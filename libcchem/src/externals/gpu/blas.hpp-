#ifndef GPU_BLAS_HPP
#define GPU_BLAS_HPP

#include <cstdio>
#include <cublas.h>

#include "gpu/blas/matrix.hpp"
#include "boost/numeric/bindings/cublas/cublas.hpp"

namespace gpu {
namespace blas {

    using boost::numeric::bindings::cublas::matrix;
    using boost::numeric::bindings::cublas::host;
    using boost::numeric::bindings::cublas::matrix_adaptor;
    using boost::numeric::bindings::cublas::trans;
    using boost::numeric::bindings::cublas::gemm;

    typedef char option_type;

    template<option_type C>
    struct option {
	static const option_type value = C;
    };

    const option<'N'> no_transpose = option<'N'>();
    const option<'T'> transpose = option<'T'>();
    const option<'C'> conjugate = option<'C'>();

#define GPU_BLAS_CHECK_STATUS  {					\
	cublasStatus status = cublasGetError();				\
	if (status != CUBLAS_STATUS_SUCCESS) {				\
	    char error[256];						\
	    sprintf(error, "%i", status);				\
	    throw std::runtime_error((__FILE__ + std::string(":") +	\
				      "__LINE__" + std::string(": ") +	\
				      error));				\
	}								\
    }

    template<option_type TA, option_type TB>
    void gemm(option<TA>, option<TB>,
	      size_t m, size_t n, size_t k,
	      const double *a, size_t lda,
	      const double *b, size_t ldb,
	      double *c, size_t ldc) {
	cublasDgemm(TA, TB, m, n, k, 1, a, lda, b, ldb, 0, c, ldc);
	GPU_BLAS_CHECK_STATUS;

    }

}
}

#endif // GPU_BLAS_HPP
