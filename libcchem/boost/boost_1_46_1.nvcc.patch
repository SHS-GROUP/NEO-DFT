diff -urN boost~/concept_check.hpp boost/concept_check.hpp
--- boost~/concept_check.hpp	2011-05-31 20:23:31.000000000 -0500
+++ boost/concept_check.hpp	2011-05-31 20:25:01.000000000 -0500
@@ -546,7 +546,7 @@
       BOOST_CONCEPT_USAGE(ForwardIterator)
       {
           BOOST_CONCEPT_ASSERT((Convertible<
-              BOOST_DEDUCED_TYPENAME ForwardIterator::iterator_category
+              typename InputIterator<TT>::iterator_category
             , std::forward_iterator_tag
           >));
 
@@ -574,7 +574,7 @@
       BOOST_CONCEPT_USAGE(BidirectionalIterator)
       {
           BOOST_CONCEPT_ASSERT((Convertible<
-              BOOST_DEDUCED_TYPENAME BidirectionalIterator::iterator_category
+              typename ForwardIterator<TT>::iterator_category
             , std::bidirectional_iterator_tag
           >));
 
@@ -678,7 +678,7 @@
       BOOST_CONCEPT_USAGE(Mutable_Container)
       {
           BOOST_CONCEPT_ASSERT((
-               Assignable<typename Mutable_Container::value_type>));
+               Assignable<typename Container<C>::value_type>));
 
           BOOST_CONCEPT_ASSERT((InputIterator<iterator>));
 
@@ -699,7 +699,7 @@
       {
           BOOST_CONCEPT_ASSERT((
                ForwardIterator<
-                    typename ForwardContainer::const_iterator
+	         typename Container<C>::const_iterator
                >));
       }
   };
@@ -708,11 +708,18 @@
     : ForwardContainer<C>
     , Mutable_Container<C>
   {
+   private:
+      template<class C_>
+      struct traits {
+	  typedef typename C_::iterator iterator;
+      };
+      typedef traits<Mutable_ForwardContainer> self;
+  public:
       BOOST_CONCEPT_USAGE(Mutable_ForwardContainer)
       {
           BOOST_CONCEPT_ASSERT((
                Mutable_ForwardIterator<
-                   typename Mutable_ForwardContainer::iterator
+                   typename self::iterator
                >));
       }
   };
@@ -728,7 +735,7 @@
       {
           BOOST_CONCEPT_ASSERT((
               BidirectionalIterator<
-                  typename ReversibleContainer::const_iterator>));
+                  typename ForwardContainer<C>::const_iterator>));
 
           BOOST_CONCEPT_ASSERT((BidirectionalIterator<const_reverse_iterator>));
 
@@ -772,7 +779,7 @@
       {
           BOOST_CONCEPT_ASSERT((
               RandomAccessIterator<
-                  typename RandomAccessContainer::const_iterator
+	          typename ReversibleContainer<C>::const_iterator
               >));
 
           const_constraints(c);
@@ -793,7 +800,13 @@
     , RandomAccessContainer<C>
   {
    private:
-      typedef Mutable_RandomAccessContainer self;
+      template<class C_>
+      struct traits {
+	  typedef typename C_::iterator iterator;
+	  typedef typename C_::reverse_iterator reverse_iterator;
+	  typedef typename C_::reference reference;
+      };
+      typedef traits<Mutable_RandomAccessContainer> self;
    public:
       BOOST_CONCEPT_USAGE(Mutable_RandomAccessContainer)
       {
@@ -817,6 +830,14 @@
       // ... so why aren't we following the standard?  --DWA
     , DefaultConstructible<S>
   {
+   private:
+      template<class S_>
+      struct traits {
+	  typedef typename S_::reference reference;
+	  typedef typename S_::const_reference const_reference;
+      };
+      typedef traits<Sequence> self;
+  public:
       BOOST_CONCEPT_USAGE(Sequence)
       {
           S
@@ -831,7 +852,7 @@
           c.erase(p);
           c.erase(p, q);
 
-          typename Sequence::reference r = c.front();
+          typename self::reference r = c.front();
 
           ignore_unused_variable_warning(c);
           ignore_unused_variable_warning(c2);
@@ -841,7 +862,7 @@
       }
    private:
       void const_constraints(const S& c) {
-          typename Sequence::const_reference r = c.front();
+          typename self::const_reference r = c.front();
           ignore_unused_variable_warning(r);
       }
 
@@ -867,17 +888,25 @@
   BOOST_concept(BackInsertionSequence,(S))
     : Sequence<S>
   {
+  private:
+      template<class S_>
+      struct traits {
+	  typedef typename S_::reference reference;
+	  typedef typename S_::const_reference const_reference;
+      };
+      typedef traits<BackInsertionSequence> self;
+  public:
       BOOST_CONCEPT_USAGE(BackInsertionSequence)
       {
           c.push_back(t);
           c.pop_back();
-          typename BackInsertionSequence::reference r = c.back();
+          typename self::reference r = c.back();
           ignore_unused_variable_warning(r);
           const_constraints(c);
       }
    private:
       void const_constraints(const S& cc) {
-          typename BackInsertionSequence::const_reference
+          typename self::const_reference
               r = cc.back();
           ignore_unused_variable_warning(r);
       };
@@ -889,6 +918,13 @@
     : ForwardContainer<C>
     , DefaultConstructible<C>
   {
+  private:
+      template<class S_>
+      struct traits {
+	  typedef typename S_::value_type value_type;
+      };
+      typedef traits<AssociativeContainer> self;
+  public:
       typedef typename C::key_type key_type;
       typedef typename C::key_compare key_compare;
       typedef typename C::value_compare value_compare;
@@ -904,7 +940,7 @@
           const_constraints(c);
           BOOST_CONCEPT_ASSERT((BinaryPredicate<key_compare,key_type,key_type>));
 
-          typedef typename AssociativeContainer::value_type value_type_;
+          typedef typename self::value_type value_type_;
           BOOST_CONCEPT_ASSERT((BinaryPredicate<value_compare,value_type_,value_type_>));
       }
 
diff -urN boost~/detail/lcast_precision.hpp boost/detail/lcast_precision.hpp
--- boost~/detail/lcast_precision.hpp	2011-05-31 20:23:38.000000000 -0500
+++ boost/detail/lcast_precision.hpp	2011-05-31 20:28:17.000000000 -0500
@@ -82,9 +82,13 @@
             2UL + limits::digits * 30103UL / 100000UL
         );
 
+    // NVCC workaround
+    BOOST_STATIC_CONSTANT(unsigned int, limits_digits = limits::digits);
+    BOOST_STATIC_CONSTANT(unsigned int, limits_digits10 = limits::digits10);
+
     BOOST_STATIC_ASSERT(!is_specialized_bin ||
-            (limits::digits + 0UL < ULONG_MAX / 30103UL &&
-            precision_bin > limits::digits10 + 0UL &&
+            (limits_digits + 0UL < ULONG_MAX / 30103UL &&
+            precision_bin > limits_digits10 + 0UL &&
             precision_bin <= streamsize_max + 0UL)
         );
 
diff -urN boost~/iterator/iterator_concepts.hpp boost/iterator/iterator_concepts.hpp
--- boost~/iterator/iterator_concepts.hpp	2011-05-31 20:23:24.000000000 -0500
+++ boost/iterator/iterator_concepts.hpp	2011-05-31 20:25:01.000000000 -0500
@@ -133,9 +133,15 @@
     , boost::EqualityComparable<Iterator>
 
   {
+  private:
+      template<class C>
+	  struct trait {
+	  typedef typename C::traversal_category traversal_category;
+      };
+  public:
       BOOST_CONCEPT_ASSERT((
           boost::Convertible<
-             BOOST_DEDUCED_TYPENAME SinglePassIterator::traversal_category
+	     typename trait<SinglePassIterator>::traversal_category
            , boost::single_pass_traversal_tag
           > ));
   };
@@ -148,10 +154,15 @@
       
       BOOST_MPL_ASSERT((boost::is_integral<difference_type>));
       BOOST_MPL_ASSERT_RELATION(std::numeric_limits<difference_type>::is_signed, ==, true);
-
+  private:
+      template<class C>
+	  struct trait {
+	  typedef typename C::traversal_category traversal_category;
+      };
+  public:
       BOOST_CONCEPT_ASSERT((
           boost::Convertible<
-             BOOST_DEDUCED_TYPENAME ForwardTraversal::traversal_category
+	     typename trait<ForwardTraversal>::traversal_category
            , boost::forward_traversal_tag
           > ));
   };
@@ -159,9 +170,15 @@
   BOOST_concept(BidirectionalTraversal,(Iterator))
     : ForwardTraversal<Iterator>
   {
+  private:
+      template<class C>
+	  struct trait {
+	  typedef typename C::traversal_category traversal_category;
+      };
+  public:
       BOOST_CONCEPT_ASSERT((
           boost::Convertible<
-             BOOST_DEDUCED_TYPENAME BidirectionalTraversal::traversal_category
+             typename trait<BidirectionalTraversal>::traversal_category
            , boost::bidirectional_traversal_tag
           > ));
 
@@ -177,9 +194,15 @@
   BOOST_concept(RandomAccessTraversal,(Iterator))
     : BidirectionalTraversal<Iterator>
   {
+  private:
+      template<class C>
+	  struct trait {
+	  typedef typename C::traversal_category traversal_category;
+      };
+  public:
       BOOST_CONCEPT_ASSERT((
           boost::Convertible<
-             BOOST_DEDUCED_TYPENAME RandomAccessTraversal::traversal_category
+  	     typename trait<RandomAccessTraversal>::traversal_category
            , boost::random_access_traversal_tag
           > ));
 
diff -urN boost~/lexical_cast.hpp boost/lexical_cast.hpp
--- boost~/lexical_cast.hpp	2011-05-31 20:23:39.000000000 -0500
+++ boost/lexical_cast.hpp	2011-05-31 20:25:01.000000000 -0500
@@ -342,7 +342,7 @@
 #ifndef BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS
             BOOST_STATIC_CONSTANT(std::size_t, value =
                   std::numeric_limits<Source>::is_signed +
-                  std::numeric_limits<Source>::is_specialized + // == 1
+                  std::numeric_limits<Source>::is_specialized +
                   std::numeric_limits<Source>::digits10 * 2
               );
 #else
diff -urN boost~/mpl/assert.hpp boost/mpl/assert.hpp
--- boost~/mpl/assert.hpp	2011-05-31 20:23:34.000000000 -0500
+++ boost/mpl/assert.hpp	2011-05-31 20:25:01.000000000 -0500
@@ -146,7 +146,11 @@
 template< typename P > struct assert_arg_pred_not
 {
     typedef typename P::type p_type;
+#ifdef __CUDACC__
+    enum { p = !p_type::value };
+#else
     BOOST_MPL_AUX_ASSERT_CONSTANT( bool, p = !p_type::value );
+#endif
     typedef typename assert_arg_pred_impl<p>::type type;
 };
 
diff -urN boost~/mpl/aux_/config/gcc.hpp boost/mpl/aux_/config/gcc.hpp
--- boost~/mpl/aux_/config/gcc.hpp	2011-05-31 20:23:35.000000000 -0500
+++ boost/mpl/aux_/config/gcc.hpp	2011-05-31 20:25:01.000000000 -0500
@@ -14,7 +14,7 @@
 // $Date: 2008-10-11 02:19:02 -0400 (Sat, 11 Oct 2008) $
 // $Revision: 49267 $
 
-#if defined(__GNUC__) && !defined(__EDG_VERSION__)
+#if defined(__GNUC__) && !(defined(__EDG_VERSION__) || defined(__CUDACC__))
 #   define BOOST_MPL_CFG_GCC ((__GNUC__ << 8) | __GNUC_MINOR__)
 #else
 #   define BOOST_MPL_CFG_GCC 0
diff -urN boost~/mpl/aux_/integral_wrapper.hpp boost/mpl/aux_/integral_wrapper.hpp
--- boost~/mpl/aux_/integral_wrapper.hpp	2011-05-31 20:23:35.000000000 -0500
+++ boost/mpl/aux_/integral_wrapper.hpp	2011-05-31 20:25:01.000000000 -0500
@@ -56,7 +56,7 @@
 // have to #ifdef here: some compilers don't like the 'N + 1' form (MSVC),
 // while some other don't like 'value + 1' (Borland), and some don't like
 // either
-#if BOOST_WORKAROUND(__EDG_VERSION__, <= 243)
+#if BOOST_WORKAROUND(__EDG_VERSION__, <= 243)  || defined(__CUDACC__)
  private:
     BOOST_STATIC_CONSTANT(AUX_WRAPPER_VALUE_TYPE, next_value = BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N + 1)));
     BOOST_STATIC_CONSTANT(AUX_WRAPPER_VALUE_TYPE, prior_value = BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N - 1)));
diff -urN boost~/mpl/size_t_fwd.hpp boost/mpl/size_t_fwd.hpp
--- boost~/mpl/size_t_fwd.hpp	2011-05-31 20:23:35.000000000 -0500
+++ boost/mpl/size_t_fwd.hpp	2011-05-31 20:25:01.000000000 -0500
@@ -20,7 +20,12 @@
 
 BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_OPEN
 
+#if defined(__CUDACC__)
+typedef std::size_t std_size_t;
+template< std_size_t N > struct size_t;
+#else
 template< std::size_t N > struct size_t;
+#endif
 
 BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_CLOSE
 BOOST_MPL_AUX_ADL_BARRIER_DECL(size_t)
diff -urN boost~/mpl/size_t.hpp boost/mpl/size_t.hpp
--- boost~/mpl/size_t.hpp	2011-05-31 20:23:34.000000000 -0500
+++ boost/mpl/size_t.hpp	2011-05-31 20:25:01.000000000 -0500
@@ -16,10 +16,22 @@
 
 #include <boost/mpl/size_t_fwd.hpp>
 
+
+#if defined(__CUDACC__)
+
+//typedef std::size_t std_size_t;
+#define AUX_WRAPPER_VALUE_TYPE std_size_t
+#define AUX_WRAPPER_NAME size_t
+#define AUX_WRAPPER_PARAMS(N) std_size_t N
+
+#else
+
 #define AUX_WRAPPER_VALUE_TYPE std::size_t
 #define AUX_WRAPPER_NAME size_t
 #define AUX_WRAPPER_PARAMS(N) std::size_t N
 
+#endif
+
 #include <boost/mpl/aux_/integral_wrapper.hpp>
 
 #endif // BOOST_MPL_SIZE_T_HPP_INCLUDED
diff -urN boost~/optional/optional.hpp boost/optional/optional.hpp
--- boost~/optional/optional.hpp	2011-05-31 20:23:22.000000000 -0500
+++ boost/optional/optional.hpp	2011-05-31 20:28:32.000000000 -0500
@@ -84,7 +84,7 @@
 #endif
 
 #if defined(__GNUC__) && (__GNUC__ * 100 + __GNUC_MINOR__) > 302 \
-    && !defined(__INTEL_COMPILER)
+    && !(defined(__INTEL_COMPILER) || defined(__CUDACC__))
 // GCC since 3.3 has may_alias attribute that helps to alleviate optimizer issues with
 // regard to violation of the strict aliasing rules. The optional< T > storage type is marked
 // with this attribute in order to let the compiler know that it will alias objects of type T
diff -urN boost~/static_assert.hpp boost/static_assert.hpp
--- boost~/static_assert.hpp	2011-05-31 20:23:36.000000000 -0500
+++ boost/static_assert.hpp	2011-05-31 20:26:26.000000000 -0500
@@ -29,7 +29,8 @@
 #define BOOST_BUGGY_INTEGRAL_CONSTANT_EXPRESSIONS
 #endif
 
-#if defined(__GNUC__) && (__GNUC__ == 3) && ((__GNUC_MINOR__ == 3) || (__GNUC_MINOR__ == 4))
+#if defined(__GNUC__) && (__GNUC__ == 3) && ((__GNUC_MINOR__ == 3) || (__GNUC_MINOR__ == 4)) \
+    && !defined(__CUDACC__)
 // gcc 3.3 and 3.4 don't produce good error messages with the default version:
 #  define BOOST_SA_GCC_WORKAROUND
 #endif
@@ -38,7 +39,8 @@
 // If the compiler issues warnings about old C style casts,
 // then enable this:
 //
-#if defined(__GNUC__) && ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4)))
+#if defined(__GNUC__) && ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))) \
+    && !defined(__CUDACC__)
 #  define BOOST_STATIC_ASSERT_BOOL_CAST( x ) ((x) == 0 ? false : true)
 #else
 #  define BOOST_STATIC_ASSERT_BOOL_CAST(x) (bool)(x)
diff -urN boost~/thread/locks.hpp boost/thread/locks.hpp
--- boost~/thread/locks.hpp	2011-05-31 20:23:31.000000000 -0500
+++ boost/thread/locks.hpp	2011-05-31 20:25:01.000000000 -0500
@@ -20,6 +20,7 @@
     struct xtime;
 
 #if defined(BOOST_NO_SFINAE) ||                           \
+    defined(__CUDACC__) ||				  \
     BOOST_WORKAROUND(__IBMCPP__, BOOST_TESTED_AT(600)) || \
     BOOST_WORKAROUND(__SUNPRO_CC, BOOST_TESTED_AT(0x590))
 #define BOOST_THREAD_NO_AUTO_DETECT_MUTEX_TYPES
