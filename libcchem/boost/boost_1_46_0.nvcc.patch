diff -urN boost/concept_check.hpp boost~/concept_check.hpp
--- boost/concept_check.hpp	2011-02-28 17:14:05.000000000 -0600
+++ boost~/concept_check.hpp	2011-02-28 17:08:23.000000000 -0600
@@ -546,7 +546,7 @@
       BOOST_CONCEPT_USAGE(ForwardIterator)
       {
           BOOST_CONCEPT_ASSERT((Convertible<
-              typename InputIterator<TT>::iterator_category
+              BOOST_DEDUCED_TYPENAME ForwardIterator::iterator_category
             , std::forward_iterator_tag
           >));
 
@@ -574,7 +574,7 @@
       BOOST_CONCEPT_USAGE(BidirectionalIterator)
       {
           BOOST_CONCEPT_ASSERT((Convertible<
-              typename ForwardIterator<TT>::iterator_category
+              BOOST_DEDUCED_TYPENAME BidirectionalIterator::iterator_category
             , std::bidirectional_iterator_tag
           >));
 
@@ -678,7 +678,7 @@
       BOOST_CONCEPT_USAGE(Mutable_Container)
       {
           BOOST_CONCEPT_ASSERT((
-               Assignable<typename Container<C>::value_type>));
+               Assignable<typename Mutable_Container::value_type>));
 
           BOOST_CONCEPT_ASSERT((InputIterator<iterator>));
 
@@ -699,7 +699,7 @@
       {
           BOOST_CONCEPT_ASSERT((
                ForwardIterator<
-	         typename Container<C>::const_iterator
+                    typename ForwardContainer::const_iterator
                >));
       }
   };
@@ -708,18 +708,11 @@
     : ForwardContainer<C>
     , Mutable_Container<C>
   {
-   private:
-      template<class C_>
-      struct traits {
-	  typedef typename C_::iterator iterator;
-      };
-      typedef traits<Mutable_ForwardContainer> self;
-  public:
       BOOST_CONCEPT_USAGE(Mutable_ForwardContainer)
       {
           BOOST_CONCEPT_ASSERT((
                Mutable_ForwardIterator<
-                   typename self::iterator
+                   typename Mutable_ForwardContainer::iterator
                >));
       }
   };
@@ -735,7 +728,7 @@
       {
           BOOST_CONCEPT_ASSERT((
               BidirectionalIterator<
-                  typename ForwardContainer<C>::const_iterator>));
+                  typename ReversibleContainer::const_iterator>));
 
           BOOST_CONCEPT_ASSERT((BidirectionalIterator<const_reverse_iterator>));
 
@@ -779,7 +772,7 @@
       {
           BOOST_CONCEPT_ASSERT((
               RandomAccessIterator<
-	          typename ReversibleContainer<C>::const_iterator
+                  typename RandomAccessContainer::const_iterator
               >));
 
           const_constraints(c);
@@ -800,13 +793,7 @@
     , RandomAccessContainer<C>
   {
    private:
-      template<class C_>
-      struct traits {
-	  typedef typename C_::iterator iterator;
-	  typedef typename C_::reverse_iterator reverse_iterator;
-	  typedef typename C_::reference reference;
-      };
-      typedef traits<Mutable_RandomAccessContainer> self;
+      typedef Mutable_RandomAccessContainer self;
    public:
       BOOST_CONCEPT_USAGE(Mutable_RandomAccessContainer)
       {
@@ -830,14 +817,6 @@
       // ... so why aren't we following the standard?  --DWA
     , DefaultConstructible<S>
   {
-   private:
-      template<class S_>
-      struct traits {
-	  typedef typename S_::reference reference;
-	  typedef typename S_::const_reference const_reference;
-      };
-      typedef traits<Sequence> self;
-  public:
       BOOST_CONCEPT_USAGE(Sequence)
       {
           S
@@ -852,7 +831,7 @@
           c.erase(p);
           c.erase(p, q);
 
-          typename self::reference r = c.front();
+          typename Sequence::reference r = c.front();
 
           ignore_unused_variable_warning(c);
           ignore_unused_variable_warning(c2);
@@ -862,7 +841,7 @@
       }
    private:
       void const_constraints(const S& c) {
-          typename self::const_reference r = c.front();
+          typename Sequence::const_reference r = c.front();
           ignore_unused_variable_warning(r);
       }
 
@@ -888,25 +867,17 @@
   BOOST_concept(BackInsertionSequence,(S))
     : Sequence<S>
   {
-  private:
-      template<class S_>
-      struct traits {
-	  typedef typename S_::reference reference;
-	  typedef typename S_::const_reference const_reference;
-      };
-      typedef traits<BackInsertionSequence> self;
-  public:
       BOOST_CONCEPT_USAGE(BackInsertionSequence)
       {
           c.push_back(t);
           c.pop_back();
-          typename self::reference r = c.back();
+          typename BackInsertionSequence::reference r = c.back();
           ignore_unused_variable_warning(r);
           const_constraints(c);
       }
    private:
       void const_constraints(const S& cc) {
-          typename self::const_reference
+          typename BackInsertionSequence::const_reference
               r = cc.back();
           ignore_unused_variable_warning(r);
       };
@@ -918,13 +889,6 @@
     : ForwardContainer<C>
     , DefaultConstructible<C>
   {
-  private:
-      template<class S_>
-      struct traits {
-	  typedef typename S_::value_type value_type;
-      };
-      typedef traits<AssociativeContainer> self;
-  public:
       typedef typename C::key_type key_type;
       typedef typename C::key_compare key_compare;
       typedef typename C::value_compare value_compare;
@@ -940,7 +904,7 @@
           const_constraints(c);
           BOOST_CONCEPT_ASSERT((BinaryPredicate<key_compare,key_type,key_type>));
 
-          typedef typename self::value_type value_type_;
+          typedef typename AssociativeContainer::value_type value_type_;
           BOOST_CONCEPT_ASSERT((BinaryPredicate<value_compare,value_type_,value_type_>));
       }
 
diff -urN boost/config/compiler/nvcc.hpp boost~/config/compiler/nvcc.hpp
--- boost/config/compiler/nvcc.hpp	2011-05-25 12:53:10.000000000 -0500
+++ boost~/config/compiler/nvcc.hpp	2011-02-28 17:08:32.000000000 -0600
@@ -15,17 +15,10 @@
 // BOOST_GPU_ENABLED : Flag a function or a method as being enabled on the host and device
 #define BOOST_GPU_ENABLED __host__ __device__
 
-// #ifndef __CUDA_ARCH__
-// #define BOOST_NO_DEDUCED_TYPENAME
-// #warning BOOST_NO_DEDUCED_TYPENAME
-// #else
-// #warning !BOOST_NO_DEDUCED_TYPENAME
-// #endif
-
 // Boost support macro for NVCC 
 // NVCC Basically behaves like some flavor of MSVC6 + some specific quirks
-//#define BOOST_NO_INCLASS_MEMBER_INITIALIZATION
-//#define BOOST_MSVC6_MEMBER_TEMPLATES
+#define BOOST_NO_INCLASS_MEMBER_INITIALIZATION
+#define BOOST_MSVC6_MEMBER_TEMPLATES
 #define BOOST_HAS_UNISTD_H
 #define BOOST_HAS_STDINT_H
 #define BOOST_HAS_SIGACTION
diff -urN boost/detail/lcast_precision.hpp boost~/detail/lcast_precision.hpp
--- boost/detail/lcast_precision.hpp	2011-05-25 12:59:41.000000000 -0500
+++ boost~/detail/lcast_precision.hpp	2011-02-28 17:08:27.000000000 -0600
@@ -82,13 +82,9 @@
             2UL + limits::digits * 30103UL / 100000UL
         );
 
-    // NVCC workaround
-    BOOST_STATIC_CONSTANT(unsigned int, limits_digits = limits::digits);
-    BOOST_STATIC_CONSTANT(unsigned int, limits_digits10 = limits::digits10);
-
     BOOST_STATIC_ASSERT(!is_specialized_bin ||
-            (limits_digits + 0UL < ULONG_MAX / 30103UL &&
-            precision_bin > limits_digits10 + 0UL &&
+            (limits::digits + 0UL < ULONG_MAX / 30103UL &&
+            precision_bin > limits::digits10 + 0UL &&
             precision_bin <= streamsize_max + 0UL)
         );
 
diff -urN boost/iterator/iterator_concepts.hpp boost~/iterator/iterator_concepts.hpp
--- boost/iterator/iterator_concepts.hpp	2011-02-28 17:14:05.000000000 -0600
+++ boost~/iterator/iterator_concepts.hpp	2011-02-28 17:08:24.000000000 -0600
@@ -133,15 +133,9 @@
     , boost::EqualityComparable<Iterator>
 
   {
-  private:
-      template<class C>
-	  struct trait {
-	  typedef typename C::traversal_category traversal_category;
-      };
-  public:
       BOOST_CONCEPT_ASSERT((
           boost::Convertible<
-	     typename trait<SinglePassIterator>::traversal_category
+             BOOST_DEDUCED_TYPENAME SinglePassIterator::traversal_category
            , boost::single_pass_traversal_tag
           > ));
   };
@@ -154,15 +148,10 @@
       
       BOOST_MPL_ASSERT((boost::is_integral<difference_type>));
       BOOST_MPL_ASSERT_RELATION(std::numeric_limits<difference_type>::is_signed, ==, true);
-  private:
-      template<class C>
-	  struct trait {
-	  typedef typename C::traversal_category traversal_category;
-      };
-  public:
+
       BOOST_CONCEPT_ASSERT((
           boost::Convertible<
-	     typename trait<ForwardTraversal>::traversal_category
+             BOOST_DEDUCED_TYPENAME ForwardTraversal::traversal_category
            , boost::forward_traversal_tag
           > ));
   };
@@ -170,15 +159,9 @@
   BOOST_concept(BidirectionalTraversal,(Iterator))
     : ForwardTraversal<Iterator>
   {
-  private:
-      template<class C>
-	  struct trait {
-	  typedef typename C::traversal_category traversal_category;
-      };
-  public:
       BOOST_CONCEPT_ASSERT((
           boost::Convertible<
-             typename trait<BidirectionalTraversal>::traversal_category
+             BOOST_DEDUCED_TYPENAME BidirectionalTraversal::traversal_category
            , boost::bidirectional_traversal_tag
           > ));
 
@@ -194,15 +177,9 @@
   BOOST_concept(RandomAccessTraversal,(Iterator))
     : BidirectionalTraversal<Iterator>
   {
-  private:
-      template<class C>
-	  struct trait {
-	  typedef typename C::traversal_category traversal_category;
-      };
-  public:
       BOOST_CONCEPT_ASSERT((
           boost::Convertible<
-  	     typename trait<RandomAccessTraversal>::traversal_category
+             BOOST_DEDUCED_TYPENAME RandomAccessTraversal::traversal_category
            , boost::random_access_traversal_tag
           > ));
 
diff -urN boost/lexical_cast.hpp boost~/lexical_cast.hpp
--- boost/lexical_cast.hpp	2011-02-28 17:14:05.000000000 -0600
+++ boost~/lexical_cast.hpp	2011-02-28 17:08:23.000000000 -0600
@@ -342,7 +342,7 @@
 #ifndef BOOST_NO_LIMITS_COMPILE_TIME_CONSTANTS
             BOOST_STATIC_CONSTANT(std::size_t, value =
                   std::numeric_limits<Source>::is_signed +
-                  std::numeric_limits<Source>::is_specialized +
+                  std::numeric_limits<Source>::is_specialized + // == 1
                   std::numeric_limits<Source>::digits10 * 2
               );
 #else
diff -urN boost/mpl/assert.hpp boost~/mpl/assert.hpp
--- boost/mpl/assert.hpp	2011-02-28 17:14:05.000000000 -0600
+++ boost~/mpl/assert.hpp	2011-02-28 17:08:26.000000000 -0600
@@ -146,11 +146,7 @@
 template< typename P > struct assert_arg_pred_not
 {
     typedef typename P::type p_type;
-#ifdef __CUDACC__
-    enum { p = !p_type::value };
-#else
     BOOST_MPL_AUX_ASSERT_CONSTANT( bool, p = !p_type::value );
-#endif
     typedef typename assert_arg_pred_impl<p>::type type;
 };
 
diff -urN boost/mpl/aux_/config/gcc.hpp boost~/mpl/aux_/config/gcc.hpp
--- boost/mpl/aux_/config/gcc.hpp	2011-02-28 17:20:29.000000000 -0600
+++ boost~/mpl/aux_/config/gcc.hpp	2011-02-28 17:08:37.000000000 -0600
@@ -14,7 +14,7 @@
 // $Date: 2008-10-11 02:19:02 -0400 (Sat, 11 Oct 2008) $
 // $Revision: 49267 $
 
-#if defined(__GNUC__) && !(defined(__EDG_VERSION__) || defined(__CUDACC__))
+#if defined(__GNUC__) && !defined(__EDG_VERSION__)
 #   define BOOST_MPL_CFG_GCC ((__GNUC__ << 8) | __GNUC_MINOR__)
 #else
 #   define BOOST_MPL_CFG_GCC 0
diff -urN boost/mpl/aux_/integral_wrapper.hpp boost~/mpl/aux_/integral_wrapper.hpp
--- boost/mpl/aux_/integral_wrapper.hpp	2011-02-28 17:14:05.000000000 -0600
+++ boost~/mpl/aux_/integral_wrapper.hpp	2011-02-28 17:08:32.000000000 -0600
@@ -56,7 +56,7 @@
 // have to #ifdef here: some compilers don't like the 'N + 1' form (MSVC),
 // while some other don't like 'value + 1' (Borland), and some don't like
 // either
-#if BOOST_WORKAROUND(__EDG_VERSION__, <= 243)  || defined(__CUDACC__)
+#if BOOST_WORKAROUND(__EDG_VERSION__, <= 243)
  private:
     BOOST_STATIC_CONSTANT(AUX_WRAPPER_VALUE_TYPE, next_value = BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N + 1)));
     BOOST_STATIC_CONSTANT(AUX_WRAPPER_VALUE_TYPE, prior_value = BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N - 1)));
diff -urN boost/mpl/size_t_fwd.hpp boost~/mpl/size_t_fwd.hpp
--- boost/mpl/size_t_fwd.hpp	2011-02-28 17:14:05.000000000 -0600
+++ boost~/mpl/size_t_fwd.hpp	2011-02-28 17:08:26.000000000 -0600
@@ -20,12 +20,7 @@
 
 BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_OPEN
 
-#if defined(__CUDACC__)
-typedef std::size_t std_size_t;
-template< std_size_t N > struct size_t;
-#else
 template< std::size_t N > struct size_t;
-#endif
 
 BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_CLOSE
 BOOST_MPL_AUX_ADL_BARRIER_DECL(size_t)
diff -urN boost/mpl/size_t.hpp boost~/mpl/size_t.hpp
--- boost/mpl/size_t.hpp	2011-02-28 17:14:05.000000000 -0600
+++ boost~/mpl/size_t.hpp	2011-02-28 17:08:26.000000000 -0600
@@ -16,22 +16,10 @@
 
 #include <boost/mpl/size_t_fwd.hpp>
 
-
-#if defined(__CUDACC__)
-
-//typedef std::size_t std_size_t;
-#define AUX_WRAPPER_VALUE_TYPE std_size_t
-#define AUX_WRAPPER_NAME size_t
-#define AUX_WRAPPER_PARAMS(N) std_size_t N
-
-#else
-
 #define AUX_WRAPPER_VALUE_TYPE std::size_t
 #define AUX_WRAPPER_NAME size_t
 #define AUX_WRAPPER_PARAMS(N) std::size_t N
 
-#endif
-
 #include <boost/mpl/aux_/integral_wrapper.hpp>
 
 #endif // BOOST_MPL_SIZE_T_HPP_INCLUDED
diff -urN boost/optional/optional.hpp boost~/optional/optional.hpp
--- boost/optional/optional.hpp	2011-05-25 02:23:14.000000000 -0500
+++ boost~/optional/optional.hpp	2011-02-28 17:08:23.000000000 -0600
@@ -84,7 +84,7 @@
 #endif
 
 #if defined(__GNUC__) && (__GNUC__ * 100 + __GNUC_MINOR__) > 302 \
-    && !(defined(__INTEL_COMPILER) || defined(__CUDACC__))
+    && !defined(__INTEL_COMPILER)
 // GCC since 3.3 has may_alias attribute that helps to alleviate optimizer issues with
 // regard to violation of the strict aliasing rules. The optional< T > storage type is marked
 // with this attribute in order to let the compiler know that it will alias objects of type T
diff -urN boost/static_assert.hpp boost~/static_assert.hpp
--- boost/static_assert.hpp	2011-05-25 12:45:06.000000000 -0500
+++ boost~/static_assert.hpp	2011-02-28 17:08:23.000000000 -0600
@@ -29,8 +29,7 @@
 #define BOOST_BUGGY_INTEGRAL_CONSTANT_EXPRESSIONS
 #endif
 
-#if defined(__GNUC__) && (__GNUC__ == 3) && ((__GNUC_MINOR__ == 3) || (__GNUC_MINOR__ == 4)) \
-    && !defined(__CUDACC__)
+#if defined(__GNUC__) && (__GNUC__ == 3) && ((__GNUC_MINOR__ == 3) || (__GNUC_MINOR__ == 4))
 // gcc 3.3 and 3.4 don't produce good error messages with the default version:
 #  define BOOST_SA_GCC_WORKAROUND
 #endif
@@ -39,8 +38,7 @@
 // If the compiler issues warnings about old C style casts,
 // then enable this:
 //
-#if defined(__GNUC__) && ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4))) \
-    && !defined(__CUDACC__)
+#if defined(__GNUC__) && ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 4)))
 #  define BOOST_STATIC_ASSERT_BOOL_CAST( x ) ((x) == 0 ? false : true)
 #else
 #  define BOOST_STATIC_ASSERT_BOOL_CAST(x) (bool)(x)
diff -urN boost/thread/locks.hpp boost~/thread/locks.hpp
--- boost/thread/locks.hpp	2011-02-28 17:14:05.000000000 -0600
+++ boost~/thread/locks.hpp	2011-02-28 17:08:25.000000000 -0600
@@ -20,7 +20,6 @@
     struct xtime;
 
 #if defined(BOOST_NO_SFINAE) ||                           \
-    defined(__CUDACC__) ||				  \
     BOOST_WORKAROUND(__IBMCPP__, BOOST_TESTED_AT(600)) || \
     BOOST_WORKAROUND(__SUNPRO_CC, BOOST_TESTED_AT(0x590))
 #define BOOST_THREAD_NO_AUTO_DETECT_MUTEX_TYPES
