#ifndef RYSQ_CUDA_HOST_H_
#define RYSQ_CUDA_HOST_H_

#include <stdio.h>
#include <assert.h>
#include <cuda.h>
#include <cuda_runtime.h>

/**
   @brief Asserts successful completion of CUDA function
*/
#define assert_cuda_success(arg) {			\
	cudaError_t err = cudaGetLastError();		\
	if(err != cudaSuccess) {cuda_error(err);}	\
    }

#define cuda_error(err) {					\
	fprintf(stderr, "%s:%i %s\n", __FILE__, __LINE__,	\
		cudaGetErrorString(err));			\
	assert(err == cudaSuccess);				\
    }

namespace host {

    static inline
    int getDevice() {
	int device;
	assert(cudaGetDevice(&device) == cudaSuccess);
	return device;
    }

    static inline
    struct cudaDeviceProp getDeviceProperties(int device = getDevice()) {
	struct cudaDeviceProp prop;
	assert(cudaGetDeviceProperties(&prop, device) == cudaSuccess);
	return prop;
    }

    template< typename T> static inline
    void getFromDevice(size_t N, const T *device, T *host, T scale = 1) {
	cudaMemcpy(host, device, N*sizeof(T), cudaMemcpyDeviceToHost);
	assert_cuda_success(0);
	if (scale != 1) Vec_scale(N, scale, host);
    }

}

#endif /* RYSQ_CUDA_HOST_H_ */
