/**  ## -*- C++-Cheetah -*-
#compiler-settings 
directiveStartToken = %
commentStartToken = ///
#end compiler-settings
 @file 
 @warning Automatically Generated
*/
%include "global.tmpl"
%from shell import Shell

#include "normalize.h"

%set index = ", ".join([str(shell.first) for shell in Shell.range(last = $LMAX+1)])
%set normals = []
%set index_x = []
%set index_y = [] 
%set index_z = []
///
%for shell in Shell.range(last = $LMAX)
%for part in shell.partition()
%silent normals += [", ".join(["RYSQ_NORMAL_%i%i%i" %tuple(sorted(orb, reverse = True)) for orb  in part])]
%set index_x += [", ".join(["%i" %(i) for (i,j,k) in part])]
%set index_y += [", ".join(["%i" %(j) for (i,j,k) in part])]
%set index_z += [", ".join(["%i" %(k) for (i,j,k) in part])]
%end for
%end for

/**@defgroup const Constant
	@internal 
	@{
*/

/** @brief Cartesian normalization constants
	@see rysq.h
*/
const double rysq::NORMALIZE[] = {
%echo "\t" + ",\n\t".join(normals)
};

/**  @brief Cartesian function l values, L = l+m+n 
	@see rysq.h
*/
const int rysq::LX[] = {
%echo "\t" + ",\n\t".join(index_x)
};

/**  @brief Cartesian function m values, L = l+m+n 
 	@see rysq.h
 */
const int rysq::LY[] = {
%echo "\t" + ",\n\t".join(index_y)
};

/**  @brief Cartesian function n values, L = l+m+n 
	 @see rysq.h
*/
const int rysq::LZ[] = {
%echo "\t" + ",\n\t".join(index_z)
};

/** @}*/
