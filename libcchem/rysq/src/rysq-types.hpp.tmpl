/**  ## -*- C++-Cheetah -*-
#compiler-settings 
directiveStartToken = %
commentStartToken = ///
#end compiler-settings
 @file 
 @warning Automatically Generated
*/
%include "global.tmpl"
%from shell import Shell
%from shell import Shell2

#ifndef RYSQ_TYPES_HPP
#define RYSQ_TYPES_HPP

%set shells = Shell.range(last=$LMAX)

namespace rysq {

    enum type {
	SP = -1, $(", ".join(["%s" % (s.upper()) for s in shells]))
    };
    
    static const type types[] = {
	SP, $(", ".join(["%s" % (s.upper()) for s in shells]))
    };

#ifdef __CUDACC__
    __constant__
#endif
    const int LX[] = {
	$(", ".join(["%i" % (xyz[0]) for s in $shells for xyz in s]))
    };

#ifdef __CUDACC__
    __constant__
#endif
    const int LY[] = {
	$(", ".join(["%i" % (xyz[1]) for s in $shells for xyz in s]))
    };

#ifdef __CUDACC__
    __constant__
#endif
    const int LZ[] = {
	$(", ".join(["%i" % (xyz[2]) for s in $shells for xyz in s]))
    };

#ifdef __CUDACC__

    template<int N>
    struct Orbitals {
	long int x_, y_;
	__host__ __device__
	int x(int i) const { return ((x_ >> N*i) & ((1 << N)-1)); }
	__host__ __device__
	int y(int i) const { return ((y_ >> N*i) & ((1 << N)-1)); }
    };

    __constant__
    const Orbitals<3> orbitals[] = {
	{ $Shell.encode([r[0] for r in Shell("sp")], 3),
	  $Shell.encode([r[1] for r in Shell("sp")], 3) }
%for s in $shells
	,
	{ $Shell.encode([r[0] for r in s], 3),
	  $Shell.encode([r[1] for r in s], 3) }
%end for 
    };

#endif


}


#define RYSQ_LMAX $(LMAX)
#define RYSQ_TYPES (rysq::SP)$("".join(["(rysq::%s)" % (s.upper()) for s in $shells]))

#endif // RYSQ_TYPES_HPP
