/**  ## -*- C++-Cheetah -*-
#compiler-settings 
directiveStartToken = %
commentStartToken = ///
#end compiler-settings
 @file 
 @warning Automatically Generated
*/
%include "global.tmpl"
%from shell import Shell

#ifndef _RYSQ_NORMALIZE_H
#define _RYSQ_NORMALIZE_H

%for shell in Shell.range(last = $LMAX)
%for (i,j,k) in Shell.unique_orbitals(shell.L)
#define RYSQ_NORMAL_$(i)$(j)$(k) $Shell.orbital_norm(($i,$j,$k)) /**< @brief ($i $j $k) normalization constant */ 
%end for
%end for

namespace rysq {

    // static inline void normalize(const Shell::Impl &a, const Shell::Impl &b,
    // 				 const Shell::Impl &c, const Shell::Impl &d,
    // 				 double scale, double *I) {
    // 	for(int l = d.first, ijkl = 0; l <= d.last; ++l) {
    // 	    for(int k = c.first; k <= c.last; ++k) {
    // 		double qkl = scale*NORMALIZE[l]*NORMALIZE[k];
    // 		for(int j = b.first; j <= b.last; ++j) {
    // 		    for(int i = a.first; i <= a.last; ++i, ++ijkl) {
    // 			I[ijkl] *= qkl*NORMALIZE[j]*NORMALIZE[i];
    // 		    }
    // 		}
    // 	    }
    // 	}    
    // }

}

#endif // _RYSQ_NORMALIZE_H
