#ifndef _RYSQ_CUDA_HPP_
#define _RYSQ_CUDA_HPP_

#include "rysq.hpp"


#ifndef _CUDAXX_CUDAXX_HPP_
#include "cuda/host.hpp"
#endif

namespace rysq {
    namespace cuda {

	using namespace ::cuda;

	namespace detail {

	    template<typename T>
	    struct scalar {
		typedef T& reference;
		typedef const T& const_reference;
		typedef T* pointer;
		typedef const T* const_pointer;
	    };

	}

	template<typename T, class A>
	struct block_matrix {

	    typedef typename detail::scalar<T>::reference reference;
	    typedef typename detail::scalar<T>::const_reference const_reference;
	    typedef typename detail::scalar<T>::pointer pointer;
	    typedef typename detail::scalar<T>::const_pointer const_pointer;

	    typedef A array_type;

	    block_matrix() : data_() {
		resize(0,0, false);
		block_resize(0,0, false);
	    }

	    reference operator()(int i,int j) {
		return reference::bind(data_ + element_offset(i,j));
	    }
	    const reference operator()(int i,int j) const {
		return const_reference::bind(data_ + element_offset(i,j));
	    }

	    void resize(size_t size1, size_t size2, bool preserve = true) {
		if (preserve) throw "not implemented";
		// assign(size_, size1, size2);
	    }

	    array_type& data() { return data_; }
	    const array_type& data() const { return data_; }

	public:
	    pointer block(int i, int j) {
		return data_ + block_offset(i,j);
	    }
	    const pointer block(int i, int j) const {
		return data_ + block_offset(i,j);
	    }
	    size_t block_size1() { return block_[0]; }
	    size_t block_size2() { return block_[1]; }
	    void block_resize(size_t size1, size_t size2, bool preserve = true) {
		if (preserve) throw "not implemented";
		// assign(size_, size1, size2);
	    }

	protected:
	    size_t block_offset(int a, int b) const {
		return a + b*(block_[0]* block_[1]);
	    }
	    size_t element_offset(int i, int j) const {
		int a = i/block_[0];
		int b = j/block_[1];
		size_t offset = (i - a*block_[0]) + ((j - b*block_[1])*block_[0]);
		return block_offset(a,b) + offset;
	    }
	    array_type data_;
	    size_t size_[2], block_[2];
	};


	static const int DEFAULT_DEVICE = -1;

	int initialize(int device = DEFAULT_DEVICE);

	void zero(void *gPtr, size_t bytes);

	void add(double *dest, const double *source, size_t size);

	template< typename T>
	void zero(T *gPtr, size_t size) { zero((void*)gPtr, size*sizeof(T)); }

	class Eri {
	public:
	    class Kernel;
	    Eri(const rysq::Quartet<rysq::Shell> &shells);
	    ~Eri();
	    operator bool() const { return kernel_ != NULL; }
	    void operator()(const host::array<double,3> &centers,
			    const host::array<int,4> &quartets,
			    double *Eri, const Parameters &parameters);
	private:
	    Kernel *kernel_;
	};

	class Fock {
	public:
	    struct Kernel;
	    Fock(const rysq::Quartet<rysq::Shell> &shells);
	    ~Fock();
	    operator bool() const { return eri_ != NULL; }
	    // operator bool() const { return  kernel_ != NULL; }
	    void operator()(const host::array<double,3> &centers,
			    const std::vector<Int4> &quartets,
			    const matrix::Adapter &D,
			    matrix::Adapter &F,
			    const Parameters &parameters);
	private:
	    Eri::Kernel *eri_;
	    Kernel *kernel_;
	};
	    

    }
}

#endif /* _RYSQ_CUDA_HPP_ */
