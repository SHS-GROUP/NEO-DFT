C     *** Based on ccsdt.src 15 OCT 2009 ***
C
C
C*MODULE CCSDT   *DECK CCDRVR_CIM
      SUBROUTINE CCDRVR_CIM(BESTCC,EOM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL EOM,QDR,QDCR,CNVR
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXRT=100)
C
      COMMON /CCENGY/ ENRG,EREF,EMP2,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CCINFO/ TSH,NH,NP,MET,MEM,ICONV,MAXIT,IREST,IDISC
      COMMON /CCPAR / AMPTSH,METHCC,NCCTOT,NCCOCC,NCCFZC,NCCFZV,
     *                MXCCIT,MXRLEIT,NWRDCC,ICCCNV,ICCRST,IDSKCC
      COMMON /CCRLE / MXRLE,NRLE0,NRLE,IRLE,ITRLE
      COMMON /ENRGYS/ VNN,EELCT,ETOTX,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),edisp
      COMMON /FMCOM / X(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON/QUADRUPLE/QDR,QDCR
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C     COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      DATA CHECK/8HCHECK   /
C
C             ---- main driver for CC calculations ----
C            Piotr Piecuch (a), Stanislaw A. Kucharski (b),
C              Karol Kowalski (a) and Monika Musial (b)
C       (a) Department of Chemistry, Michigan State University
C           (b) Institute of Chemistry, University of Silesia
C
C     Interfaced to GAMESS in March 2002.  For information on the
C     unique features of this code, the renormalized and completely
C     renormalized coupled-cluster theory, see the following:
C     K.Kowalski, P.Piecuch  J.Chem.Phys. 113, 18-35(2000)
C     K.Kowalski, P.Piecuch  J.Chem.Phys. 113, 5644-5652(2000)
C
C     The biggest (quartic) memory allocations are as follows
C     integral preparation
C        SRTING:  somewhere between NONU3 and NU4
C     CCSD iterations
C          CCSD:   NO4   NO3NU  4NO2U2   NONU3
C     non-iterative triples (only 1 of INTRIPL/INTRIP will be run)
C         T3WT2:         NO3NU  2NO2U2   NONU3
C        INTQUA:         NO3NU   NO2U2   NONU3
C       INTRIPL:         NO3NU   NO2U2  2NONU3
C          or
C        INTRIP:        2NO3NU   NO2U2   NONU3
C        INTRIH:        3NO3NU   NO2U2   NONU3
C        T3WT2N:         NO3NU  2NO2U2   NONU3
C       T3SQTOT:                2NO2U2
C     Since T3WT2 has two NU3 arrays, it may be the memory bottleneck
C     rather than CCSD, depending on how big NU is relative to NO2.
C
      IF(MASWRK) THEN
         WRITE(6,9010)
C            For FMO there would have been a print-out for each n-mer.
         IF(EXETYP.NE.CHECK  .AND.  NPRINT.NE.-5 .AND. NFG.EQ.0) THEN
           WRITE(6,9011)
           IF(GOPARR) WRITE(6,9012)
         END IF
      END IF
C
C        etotx is the SCF energy, including nuclear repulsion
C
      EREF = ETOTX
      ENRG = ZERO
      EMP2 = ZERO
      ECCN = ZERO
      DO I=1,6
        ECORR(I)= ZERO
        ETOT(I) = ZERO
      ENDDO
      DIAGS(1) = ZERO
      DIAGS(2) = ZERO
      DIAGS(3) = ZERO
      DO J=1,2
         DO I=1,5
            AMPMX(I,J) = ZERO
            IAMPMX(I,1,J) = 0
            IAMPMX(I,2,J) = 0
            IAMPMX(I,3,J) = 0
            IAMPMX(I,4,J) = 0
         ENDDO
      ENDDO
      XO1 = ONE
      XO2 = ONE
C
C        copy input parameters
C
      NH    = NCCOCC-NCCFZC
      NP    = NCCTOT-NCCFZV-NCCOCC
      MET   = METHCC
      ICONV = ICCCNV
      MAXIT = MXCCIT
      MXRLE = MXRLEIT
      IREST = ICCRST
      MEM   = NWRDCC
      IF(MEM.EQ.0) CALL GOTFM(MEM)
      TSH   = AMPTSH
      IFC   = NCCFZC
      IDISC = IDSKCC
C
      ITER=IREST
C
      CALL DRPRINT(1)
C
C        the cc program's memory allocations, etc. assume np>nh,
C        so kill any run with too few virtuals
C
      IF(NP.LT.NH) THEN
         IF(MASWRK) WRITE(6,9020) NH,NP
         CALL ABRT
      END IF
C
C        orbital energies are held throughout the entire run
C
      CALL VALFM(LOADFM)
      LEH  = LOADFM + 1
      LEP  = LEH    + NH
      LAST = LEP    + NP
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
C        parallel ccsd or ccsd(t) is done in a different place
C
      IF(GOPARR) THEN
         CALL DRCCSD_DDI(NH,NP,X(LEH),X(LEP))
         CALL RETFM(NEED)
         BESTCC = ENRG + EREF
         RETURN
      END IF
C
C        serial runs (all cctyp) pass this way...
C
C        prepare integrals and Fock matrix elements for the run
C
      CALL DRSRTING(NH,NP,X(LEH),X(LEP),IFC,EOM)
      IF(MASWRK) WRITE(6,9060)
      CALL TIMIT(1)
C
C        carry out the coupled-cluster amplitude iterations (e.g. CCSD)
C
      CALL DRCCSD_CIM(NH,NP,X(LEH),X(LEP),IFC,EOM)
      CALL DRPRINT(3)
      IF(MASWRK) WRITE(6,9070)
      CALL TIMIT(1)
      IF(MET.EQ.0) CALL TIMSTP('LCCD    ')
      IF(MET.EQ.1) CALL TIMSTP('CCD     ')
      IF(MET.GE.2) CALL TIMSTP('CCSD    ')
      IF(.NOT.CNVR) THEN
         IF(MASWRK) WRITE(6,*) 'AMPLITUDE ITERATIONS DID NOT CONVERGE'
         CALL ABRT
      END IF
C
C        non-iterative triples and/or quadruples corrections
C
      IF(MET.GE.3) THEN
         IF(.NOT.QDR) THEN
            IF(MET.EQ.3.OR.MET.EQ.4.OR.IDISC.EQ.0) THEN
               CALL DRT3WT2_CIM(NH,NP,X(LEH),X(LEP))
            END IF
            IF(MET.GE.5) THEN
               CALL DRINTRI(NH,NP,0)
               CALL DRT3WT2N(NH,NP,X(LEH),X(LEP),IDISC)
            END IF
            CALL DRSUMA(NH,NP,X(LEH),X(LEP),MET)
         ELSE
            CALL DRQUADS(NH,NP,X(LEH),X(LEP))
         END IF
      END IF
C
C        print final results
C
      CALL DRPRINT(4)
      IF(MET.GE.3  .AND.  MASWRK) WRITE(6,9080)
      IF(MET.GE.3) CALL TIMIT(1)
      BESTCC = ENRG + EREF
      CALL RETFM(NEED)
      RETURN
C
 9010 FORMAT(/3X,23(1H-)/
     *        3X,'COUPLED-CLUSTER PROGRAM'/3X,23(1H-)//
     *        3X,55(1H-)/3X,
     *    'P.PIECUCH, S.A.KUCHARSKI, M.WLOCH, K.KOWALSKI, M.MUSIAL'/
     *        3X,55(1H-))
 9011 FORMAT(/1X,65(1H*)/
     *        1X,'THE FOLLOWING PAPERS SHOULD BE CITED WHEN USING',
     *        1X,'COUPLED-CLUSTER'/
     *        1X,'OPTIONS:'//
     *        1X,'CCTYP = LCCD, CCD, CCSD, CCSD(T)'/
     *    1X,'P. PIECUCH, S.A. KUCHARSKI, K. KOWALSKI, AND M. MUSIAL,'/
     *        1X,'COMP. PHYS. COMMUN. 149, 71-96 (2002).'//
     *        1X,'CCTYP = R-CC, CR-CC, CCSD(TQ), CR-CC(Q)'/
     *    1X,'P. PIECUCH, S.A. KUCHARSKI, K. KOWALSKI, AND M. MUSIAL,'/
     *        1X,'COMP. PHYS. COMMUN. 149, 71-96 (2002);'/
     *        1X,'K. KOWALSKI AND P. PIECUCH, J. CHEM. PHYS. 113,',
     *        ' 18-35 (2000);'/
     *        1X,'K. KOWALSKI AND P. PIECUCH, J. CHEM. PHYS. 113,',
     *        ' 5644-5652 (2000).'//
     *        1X,'CCTYP = EOM-CCSD, CR-EOM'/
     *    1X,'P. PIECUCH, S.A. KUCHARSKI, K. KOWALSKI, AND M. MUSIAL,'/
     *        1X,'COMP. PHYS. COMMUN. 149, 71-96 (2002);'/
     *        1X,'K. KOWALSKI AND P. PIECUCH, J. CHEM. PHYS. 120,',
     *        ' 1715-1738 (2004);'/
     *        1X,'M. WLOCH, J.R. GOUR, K. KOWALSKI, AND P. PIECUCH,'/
     *        1X,'J. CHEM. PHYS. 122, 214107-1 - 214107-15 (2005).'//
     *        1X,'CCTYP = CR-CCL'/
     *    1X,'P. PIECUCH, S.A. KUCHARSKI, K. KOWALSKI, AND M. MUSIAL,'/
     *        1X,'COMP. PHYS. COMMUN. 149, 71-96 (2002);'/
     *        1X,'P. PIECUCH AND M. WLOCH, J. CHEM. PHYS. 123,'/
     *        1X,'224105-1 - 224105-10 (2005).'//
     *        1X,'CCTYP = CR-EOML'/
     *    1X,'P. PIECUCH, S.A. KUCHARSKI, K. KOWALSKI, AND M. MUSIAL,'/
     *        1X,'COMP. PHYS. COMMUN. 149, 71-96 (2002);'/
     *        1X,'P. PIECUCH, J. R. GOUR, AND M. WLOCH,'/
     *        1X,'INT. J. QUANTUM CHEM. 109, 3268-3304 (2009);'/
     *        1X,'K. KOWALSKI AND P. PIECUCH,'/
     *        1X,'J. CHEM. PHYS. 120, 1715-1738 (2004).'//
     *        1X,'IN ADDITION, THE USE OF CCPRP=.TRUE. IN $CCINP',
     *        ' AND/OR THE USE'/
     *        1X,'OF CCPRPE=.TRUE. IN $EOMINP SHOULD REFERENCE'//
     *        1X,'M. WLOCH, J.R. GOUR, K. KOWALSKI, AND P. PIECUCH,'/
     *        1X,'J. CHEM. PHYS. 122, 214107-1 - 214107-15 (2005).'/
     *        1X,65(1H*)/)
 9012 FORMAT(1X,'PARALLELIZATION OF CLOSED SHELL CCSD(T) IS'/
     *       1X,'J.L.BENTZ, R.M.OLSON, M.S.GORDON, M.W.SCHMIDT,',
     *          ' R.A.KENDALL'/
     *       3X,'COMPUT.PHYS.COMMUN.  176, 589-600(2007)'/
     *       1X,'R.M.OLSON, J.L.BENTZ, R.A.KENDALL, M.W.SCHMIDT,',
     *          ' M.S.GORDON'/
     *       3X,'J.COMPUT.THEORET.CHEM. 3, 1312-1328(2007)')
 9020 FORMAT(/5X,'*** ERROR READING CC INPUT ***'/
     *        1X,'THE NUMBER OF OCCUPIED CORRELATED ORBITALS=',I6/
     *        1X,'THE NUMBER OF EMPTY, CORRELATING ORBITALS =',I6/
     *        1X,'PLEASE RUN WITH MORE EMPTY THAN FILLED ORBITALS.')
 9060 FORMAT(1X,'....... DONE WITH CC INTEGRAL PREPARATION .......')
 9070 FORMAT(1X,'....... DONE WITH CC AMPLITUDE ITERATIONS .......')
 9080 FORMAT(1X,'..... DONE WITH CC NON-ITERATIVE TRIPLES CORRECTIONS',
     *          ' .....')
      END
C*MODULE CCSDT   *DECK DRT1WT3IJK_CIM
      SUBROUTINE DRT1WT3IJK_CIM(I,J,K,NO,NU,T1,VOE,TI,T3) !-CIM- 12/27/2007
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION T1(1),VOE(1),T3(1),TI(1)
C
      CALL T1WT3IJK(I,J,K,NO,NU,T1,VOE,TI,T3)   !-CIM-
      CALL TRANT3(TI,NU,1)
      CALL T1WT3IJK(I,K,J,NO,NU,T1,VOE,TI,T3)
      CALL TRANT3(TI,NU,2)
      CALL T1WT3IJK(K,I,J,NO,NU,T1,VOE,TI,T3)
      IF (I.EQ.J) RETURN
      CALL TRANT3(TI,NU,1)
      CALL T1WT3IJK(K,J,I,NO,NU,T1,VOE,TI,T3)
      CALL TRANT3(TI,NU,2)
      CALL T1WT3IJK(J,K,I,NO,NU,T1,VOE,TI,T3)
      CALL TRANT3(TI,NU,1)
      CALL T1WT3IJK(J,I,K,NO,NU,T1,VOE,TI,T3)
      RETURN
      END
C
C         this was originally ccsd.f
C
C*MODULE CCSDT   *DECK DRCCSD_CIM
      SUBROUTINE DRCCSD_CIM(NO,NU,OEH,OEP,IFC,EOM)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL EOM
      LOGICAL CNVR
      DIMENSION OEH(NO),OEP(NU)
C
      COMMON /CCENGY/ ENRG,EREF,EMP2,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CCINFO/ TSH,NH,NP,MET,MEM,ICONV,MAXIT,IREST,IDISC
      COMMON /FMCOM / X(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
C
      DATA CHECK/8HCHECK   /
      DATA VSCF/8HVSCF    /
C
C        ----- allocate memory for the CCSD iterations -----
C
      CALL GOTFM(NGOTMX)
      IF(MEM.LT.NGOTMX) NGOTMX=MEM
C
      NO2   = NO*NO
      NO3   = NO*NO2
      NO4   = NO*NO3
      NU2   = NU*NU
      NU3   = NU*NU2
      NOU   = NO*NU
      NO3U  = NO3*NU
      NOU3  = NO*NU3
      NO2U2 = NO2*NU2
C
C        caution.  The first array allocated here, at address -LO1-
C        will be passed to routines drcmp and drrlen, which will
C        re-allocate several arrays beginning at the same address.
C
      CALL VALFM(LOADFM)
      LO1  = LOADFM + 1
      LT1  = LO1    + NOU
      LFH  = LT1    + NOU
      LFPH = LFH    + NO2
      LFP  = LFPH   + NOU
      LVHH = LFP    + NU2
      LVM  = LVHH   + NO4
      LTI  = LVM    + NO3U
      LO2  = LTI    + NU3
      LT2  = LO2    + NO2U2
      LVL  = LT2    + NO2U2
      LVR  = LVL    + NO2U2
      LVPP = LVR    + NO2U2
      LNO  = LVPP   + NOU3
      LK   = LNO    + NO   !-CIM-   ECIM(NO)
      LTX  = LK     + NO2  !-CIM-   EK(NO,NO)
      LYO2 = LTX    + NO2  !-CIM-   TX(NO,NO)  2009.08.06
      LYT2 = LYO2   + NO   !-CIM-   YO2(NO)    2009.08.06
      LAST = LYT2   + NO   !-CIM-   YT2(NO)    2009.08.06
      NEED = LAST - LOADFM - 1
      IF(MET.EQ.0) WRITE(6,190) NEED
      IF(MET.EQ.1) WRITE(6,290) NEED
      IF(MET.GE.2) WRITE(6,390) NEED
      IF(MET.EQ.0) WRITE(ICIF,192) NEED
      IF(MET.EQ.1) WRITE(ICIF,292) NEED
      IF(MET.GE.2) WRITE(ICIF,392) NEED
      CALL FLSHBF(ICIF)
C
      IF(NEED.GT.NGOTMX) THEN
         IF(MEM.EQ.0) WRITE(6,191)
         IF(MEM.EQ.1) WRITE(6,291)
         IF(MEM.EQ.2) WRITE(6,391)
         WRITE(6,92) NEED,NGOTMX
         CALL ABRT
      END IF
C
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) CNVR=.TRUE.
      IF(EXETYP.EQ.CHECK) GO TO 800
C
C        restart amplitudes provided by user, or from previous geometry
C
C        VSCF explores normal modes of various symmetries and may take
C        big steps, so restarting is really not appropriate.
C        Fragment MO method is likely working on different fragments,
C        and obviously cannot possibly restart.
C
      IF((IREST.GT.0  .OR.  (NEVALS.GT.0 .AND. RUNTYP.NE.VSCF))
     *         .AND.   NFG.EQ.0) THEN
         IF(NEVALS.GT.0) IREST=3
         IF(NEVALS.GT.0) ITER=IREST
         WRITE(6,404)
         CALL DRREST(0,NO,NU,X(LVL),X(LVR))
      END IF
C
C        perform CCSD iterations for T1 and T2 amplitudes
C
      CALL CCSD_CIM(NO,NU,X(LO1),X(LT1),X(LFH),X(LFPH),X(LFP),
     *          X(LVHH),X(LVM),X(LTI),X(LO2),X(LT2),X(LVL),X(LVR),
     *          X(LVPP),X(LNO),X(LK),X(LTX),X(LYO2),X(LYT2),
     *          OEH,OEP,IFC,EOM)
C
  800 CONTINUE
      CALL RETFM(NEED)
      RETURN
C
190   FORMAT(/1X,'MEMORY REQUIRED FOR THE LCCD ITERATIONS IS',
     *            I12,' WORDS.')
290   FORMAT(/1X,'MEMORY REQUIRED FOR THE CCD ITERATIONS IS',
     *            I12,' WORDS.')
390   FORMAT(/1X,'MEMORY REQUIRED FOR THE CCSD ITERATIONS IS',
     *            I12,' WORDS.')
191   FORMAT(1X,'INSUFFICIENT MEMORY FOR LCCD STEP')
291   FORMAT(1X,'INSUFFICIENT MEMORY FOR CCD STEP')
391   FORMAT(1X,'INSUFFICIENT MEMORY FOR CCSD STEP')
 92   FORMAT(1X,'REQUIRED:',I12,'     AVAILABLE:',I12)
  404 FORMAT(1X,'RESTARTING USING PREVIOUS AMPLITUDES READ FROM A',
     *          ' DISK FILE.')
192   FORMAT(1X,'MEMORY REQUIRED FOR THE LCCD ITERATIONS IS',
     *            I12,' WORDS.')
292   FORMAT(1X,'MEMORY REQUIRED FOR THE CCD ITERATIONS IS',
     *            I12,' WORDS.')
392   FORMAT(1X,'MEMORY REQUIRED FOR THE CCSD ITERATIONS IS',
     *            I12,' WORDS.')
      END
C
C         this was originally t3wt2.f
C
C*MODULE CCSDT   *DECK DRT3WT2_CIM
      SUBROUTINE DRT3WT2_CIM(NO,NU,EH,EP)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION EH(NO),EP(NU)
      COMMON /CCINFO/ TSH,NH,NP,MET,MEM,ICONV,MAXIT,IREST,IDISC
      COMMON /FMCOM/ X(1)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      DATA CHECK/8HCHECK   /
C
      NO2   = NO*NO
      NO3   = NO*NO2
      NU2   = NU*NU
      NU3   = NU*NU2
      NOU   = NO*NU
      NO3U  = NO3*NU
      NOU3  = NO*NU3
      NO2U2 = NO2*NU2
      NC   = NCA        !-CIM-
C
      CALL GOTFM(NGOTMX)
      IF(MEM.LT.NGOTMX) NGOTMX=MEM
C
      CALL VALFM(LOADFM)
      I1   = LOADFM + 1
      I2   = I1     + NOU
      I3   = I2     + NO2U2
      I4   = I3     + NO3U
      I5   = I4     + NOU3
      I6   = I5     + NU3
      I7   = I6     + NU3
      I8   = I7     + NO2U2
      I9   = I8     + NOU
      I10  = I9     + NO      ! ECIM(NO)  -CIM-
      I11  = I10    + NO2     ! TX(NO,NO) -CIM-
      I12  = I11    + NU3*NC  ! XF3       -CIM-
      I13  = I12    + NU3*NC  ! XT3       -CIM-
      I14  = I13    + NU*NC   ! XO1       -CIM-
      LAST = I14    + NU*NC   ! XT1       -CIM-
      NEED = LAST - LOADFM - 1
      WRITE(6,90) NEED
      CALL FLSHBF(6)
      IF (ICIM.EQ.2) THEN
         WRITE(ICIF,90) NEED
         CALL FLSHBF(ICIF)
      END IF
C
      IF(NEED.GT.NGOTMX) THEN
         WRITE(6,91) NEED,NGOTMX
         CALL ABRT
      END IF
C
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 800
C
      CALL T3WT2_CIM(NH,NP,X(I1),X(I2),X(I3),X(I4),X(I5),X(I6),X(I7),
     *     X(I8),X(I9),X(I10),X(I11),X(I12),X(I13),X(I14),NC,EH,EP)
C
  800 CONTINUE
      CALL RETFM(NEED)
      RETURN
C
 90   FORMAT(/1X,'MEMORY REQUIRED FOR NONITERATIVE TRIPLES (T3WT2  )',
     *           ' IS ',I12,' WORDS.')
 91   FORMAT(1X,'INSUFFICIENT MEMORY FOR NONITERATIVE TRIPLES'/
     *       1X,'REQUIRED:',I12,'     AVAILABLE:',I12)
      END
C*MODULE CCSDT   *DECK T3WT2_CIM
      SUBROUTINE T3WT2_CIM(NO,NU,T1,T2,VM,VE,V3,T3,VOE,O1,
     *           ECIM,TX,XF3,XT3,XO1,XT1,NC,EH,EP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION T1(1),T2(NU,NU,NO,NO),VM(NO,NU,NO,NO),VOE(1),
     *          V3(1),T3(1),VE(NU,NU,NU,NO),EH(NO),EP(NU),O1(1)
      COMMON /CCRENO/ OSS,ODS,ODD,OTS,OTD,OTT,ODS_S,ODS_D,ODS_T,
     *                OQS,OQDS,OQDD,OQTS,ESD,ETD,ETS,ETTM,ESD_TM
      COMMON /CCINFO/ TSH,NH,NP,MET,MEM,ICONV,MAXIT,IREST,IDISC
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)  !-CIM-
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      DIMENSION ECIM(NO),TX(NO,NO),XF3(NC,NU,NU,NU),XT3(NC,NU,NU,NU)  !-CIM-
      DIMENSION XO1(NC,NU),XT1(NC,NU)  !-CIM-
      EXTERNAL DSUM   !-CIM-
      DATA ZERO/0.0D+00/, OM/-1.0D+00/, ONE/1.0D+00/, THREE/3.0D+00/  !-CIM-
C
      NU2   = NU*NU
      NU3   = NU*NU2
      NOU   = NO*NU
C
C     DEFINE FOR -CIM-
      NO2   = NO*NO
      NCU3  = NC*NU3
      CALL VCLR(ECIM,1,NO)
      CALL DAREAD(IDAF,IODA,TX(1,1),NO2,359,0)  !-CIM- TXA is VECTOR FROM Alpha CMO TO LMO
C
      CALL ZEROMA(V3,1,NU3)
      OTS=ZERO
      OTD=ZERO
      ETD=ZERO
      ETTM=ZERO
      ESD_TM=ZERO
      CALL ZEROMA(T1,1,NOU)
      CALL RO2HPP(1,NO,NU,V3,VOE)
      CALL INSITU(NO,NU,NU,NO,V3,VOE,13)
      CALL TRANMD(VOE,NU,NU,NO,NO,12)
      CALL RDVEM4(0,NO,NU,V3,VE)
      CALL TRANMD(VE,NU,NU,NU,NO,23)
      CALL RDVEM4(1,NU,NO,V3,T2)
      CALL VMCP1(NO,NU,VM,T2)
      CALL TRANMD(VM,NO,NU,NO,NO,13)
      CALL RO2(1,NO,NU,T2)
      CALL INSITU(NO,NU,NU,NO,V3,T2,13)
      CALL RO1(1,NO,NU,O1)
C
      KK=0
      DO 351 I=1,NO
         I1=I   !-CIM-  I-1 --> I
      DO 352 J=1,I1  !-CIM- 351 --> 352
C        J1=J-1
         CALL VCLR(XF3,1,NCU3)  !-CIM-
         CALL VCLR(XT3,1,NCU3)  !-CIM-
      DO 353 K=1,NO  !-CIM- 351 --> 353; J1 --> NO
         IF (I.EQ.J.AND.J.EQ.K) GOTO 353  !-CIML-
         KK=IT3(I,J,K)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,I),NU2,VM(1,1,K,J),NO,
     *ZERO,V3,NU2)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,I),NU2,VM(1,1,J,K),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,4)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,J),NU2,VM(1,1,K,I),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,J),NU2,VM(1,1,I,K),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,5)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,K),NU2,VM(1,1,J,I),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,K),NU2,VM(1,1,I,J),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,4)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,J,I),NU,VE(1,1,1,K),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,K,I),NU,VE(1,1,1,J),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,5)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,I,J),NU,VE(1,1,1,K),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,K,J),NU,VE(1,1,1,I),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,4)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,I,K),NU,VE(1,1,1,J),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,J,K),NU,VE(1,1,1,I),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,5)
      CALL ZEROT3(V3,NU)
      IF(IDISC.EQ.0.AND.MET.GT.4) THEN
      CALL WRT3(KK,NU,V3)
      END IF
C     CALL T3SQUA(I,J,K,NO,NU,O1,T2,V3,EH,EP)
      CALL T3SQUA_CIMX(I,J,K,NO,NU,O1,T2,V3,EH,EP,NC,XF3,XT3,TX)  !-CIM-
      DEH=EH(I)+EH(J)+EH(K)
      CALL ADT3DEN(NU,DEH,V3,EP)
      ITMP=I
      JTMP=J
      KTMP=K
      CALL DRT1WT3IJK_CIM(ITMP,JTMP,KTMP,NO,NU,T1,VOE,V3,T3)
 353  CONTINUE
      CALL T3SQUA_CIME(I,J,NO,NU,NC,XF3,XT3,ECIM)  !-CIM-
 352  CONTINUE
 351  CONTINUE
C
C     ----- REMOVE CYCLES 352 AND 353, THEN ADD -CIM-CCSD[T] -----
C
      DO 651 K=1,NO
         ECIM(K)=ECIM(K)/THREE
 651  CONTINUE
      WRITE(IW,9000)
      ETD = DSUM(NO,ECIM,1)
      WRITE(IW,9010) ETD
      WRITE(IW,9100) (ECIM(K),K=1,NO)
      IF (NC.LT.NO) WRITE(IW,9110)
      call rwrit(ICIF, '$CORR-CCSD[T]',  NO, ECIM)  !-CIM- 05/22/2009
C
      DO 652 K=1,NO
         ECIM(K)=ECIM(K)*1.5D+00
 652  CONTINUE
C
      CALL TRT1(NU,NO,T3,T1)
C     CALL T1SQ(NO,NU,T3,T1)
C
C     ----- -CIM-CCSD(T) -----
C
      CALL ECIMTS(NO,NU,T3,T1,TX,NC,XO1,XT1,ECIM)     !-CIM- 2008.01.02
      DO 653 K=1,NO
         ECIM(K)=ECIM(K)/1.5D+00
 653  CONTINUE
      ETS = DSUM(NO,ECIM,1) - ETD
      WRITE(IW,9020) DSUM(NO,ECIM,1)
      WRITE(IW,9100) (ECIM(K),K=1,NO)
      IF (NC.LT.NO) WRITE(IW,9120)
      call rwrit(ICIF, '$CORR-CCSD(T)',  NO, ECIM)  !-CIM- 05/22/2009
      CALL FLSHBF(ICIF)
C
      CALL ADDDEN1(NO,NU,T1,EH,EP)
      CALL WO1(4,NO,NU,T1)
      RETURN
 9000 FORMAT(/10X,20('-'),
     *       /10X,'CIM ENERGIES FOR MOS',
     *       /10X,20('-'))
 9010 FORMAT(/1X,'ECORR(LMO-CCSD[T])=',40X,F20.10)
 9020 FORMAT(/1X,'ECORR(LMO-CCSD(T))=',40X,F20.10)
 9100 FORMAT(5F16.10)
 9110 FORMAT( 1X,'WARNING: CCSD[T] CORRECTION ARE NOT COMPLETED!')
 9120 FORMAT( 1X,'WARNING: CCSD(T) CORRECTION ARE NOT COMPLETED!')
      END
C*MODULE CCSDT   *DECK T3SQUA_CIMX
      SUBROUTINE T3SQUA_CIMX(I,J,K,NO,NU,T1,T2,T3,EH,EP,
     *     NC,XF3,XT3,TX)  !-CIM- 01/02/2008
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C     LOGICAL IEJ,JEK
C
      PARAMETER (MXAO=8192)
C
      INTEGER A,B,C
      DIMENSION T1(NO,NU),T2(NU,NU,NO,NO),T3(NU,NU,NU),EH(NO),EP(NU)
      DIMENSION XF3(NC,NU,NU,NU),XT3(NC,NU,NU,NU),TX(NO,NO)  !-CIM-
C     COMMON /CCRENO/ OSS,ODS,ODD,OTS,OTD,OTT,ODS_S,ODS_D,ODS_T,
C    *                OQS,OQDS,OQDD,OQTS,ESD,ETD,ETS,ETTM,ESD_TM
C     COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /CIMIDX/ MOCEN(MXAO),ICENA(MXAO),ICENB(MXAO)  !-CIM- 2010.03.01  MO Cent
      DATA TWO/2.0D+00/,FOUR/4.0D+00/,EIGHT/8.0D+00/ !,ZERO/0.0D+00/
C    *     HALF/0.5D+00/,ONE/1.0D+00/
C
      DIJK=EH(I)+EH(J)+EH(K)
C     X1=ZERO
C     X2=ZERO
C     X3=ZERO
      DO 150 A=1,NU
      DO 150 B=1,NU
      DO 150 C=1,NU
      IF (A.EQ.B.AND.B.EQ.C) GO TO 150
      DABC=EP(A)+EP(B)+EP(C)
      DENOM=DIJK-DABC
CC    XT111=T1(I,A)*T1(J,B)*T1(K,C)
CC    XT21=T1(I,A)*T2(B,C,K,J)+T1(J,B)*T2(A,C,K,I)+T1(K,C)*T2(A,B,J,I)
      D1=  T3(A,B,C)
      D2=  T3(A,C,B)+T3(C,B,A)+T3(B,A,C)
      D3=  T3(B,C,A)+T3(C,A,B)
      F=D1*EIGHT-FOUR*D2+D3*TWO
CC    X1=X1+F*XT111/DENOM
CC    X2=X2+F*XT21/DENOM
CC    X3=X3+F*D1/DENOM
C
      G=D1/DENOM
      DO 153 KK=1,NC
         KKK=ICENA(KK)                               !-CIM- 2009.05.15
         XF3(KK,A,B,C)=XF3(KK,A,B,C)+F*TX(K,KKK)
         XT3(KK,A,B,C)=XT3(KK,A,B,C)+G*TX(K,KKK)
 153  CONTINUE
C
 150  CONTINUE
CC    CF=ONE
CC    IEJ=I.EQ.J
CC    JEK=J.EQ.K
C     IF(IEJ.OR.JEK) CF=HALF
CC    IF(IEJ) CF=HALF  !-CIM-
CC    OTS=OTS+CF*X1
CC    OTD=OTD+CF*X2
CC    ETD=ETD+CF*X3
      RETURN
      END
C*MODULE CCSDT   *DECK T3SQUA_CIME
      SUBROUTINE T3SQUA_CIME(I,J,NO,NU,NC,XF3,XT3,ECIM)  !-CIM- 01/02/2008
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL IEJ !,JEK
C
      PARAMETER (MXAO=8192)
C
      INTEGER A,B,C
      DIMENSION XF3(NC,NU,NU,NU),XT3(NC,NU,NU,NU),ECIM(NO)  !-CIM-
C     COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /CIMIDX/ MOCEN(MXAO),ICENA(MXAO),ICENB(MXAO)  !-CIM- 2010.03.01  MO Cent
C     DATA HALF/0.5D+00/
C
      IEJ=I.EQ.J
C     CF=ONE
C     IF(IEJ) CF=HALF  !-WL-
C
      DO 150 A=1,NU
      DO 150 B=1,NU
      DO 150 C=1,NU
      IF (A.EQ.B.AND.B.EQ.C) GO TO 150
C
      if (IEJ) then
         DO 153 KK=1,NC
            KKK=ICENA(KK)                               !-WL- 2009.05.15
            ECIM(KKK)=ECIM(KKK)+XF3(KK,A,B,C)*XT3(KK,A,B,C)*0.5D+00
 153     CONTINUE
      else
         DO 154 KK=1,NC
            KKK=ICENA(KK)                               !-WL- 2009.05.15
            ECIM(KKK)=ECIM(KKK)+XF3(KK,A,B,C)*XT3(KK,A,B,C)
 154     CONTINUE
      endif
C
 150  CONTINUE
      RETURN
      END
C
C*MODULE CCSDT   *DECK CCSD_CIM -CIM-
      SUBROUTINE CCSD_CIM(NO,NU,O1,T1,FH,FPH,FP,VHH,VM,TI,O2,T2,VL,VR,
     *                VPP,ECIM,EK,TX,YO2,YT2,OEH,OEP,IFC,EOM)  !-WL-
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL EOM
      LOGICAL LCCD,CCD,CNVR
      INTEGER A,B
C 06/23/2004 QUADRUPLES ----
      LOGICAL QDR,QDCR
      COMMON/QUADRUPLE/QDR,QDCR
C --------------------------
C
      COMMON /CCENGY/ ENRG,EREF,EMP2,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CCFILE/ INTG,NT1,NT2,NT3,NVM,NVE,NFRLE,NRESF,NRESL
      COMMON /CCINFO/ TSH,NH,NP,MET,MEM,ICONV,MAXIT,IREST,IDISC
C     COMMON /CCRENO/ OSS,ODS,ODD,OTS,OTD,OTT,ODS_S,ODS_D,ODS_T,
C    *                OQS,OQDS,OQDD,OQTS,ESD,ETD,ETS,ETTM,ESD_TM
      COMMON /CCRLE / MXRLE,NRLE0,NRLE,IRLE,ITRLE
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)  !-CIM- ADD FOR IDAF
      EXTERNAL DSUM  !-CIM-
C
      DIMENSION VHH(1),TI(1),OEH(NO),OEP(NU),T2(NO,NO,NU,NU),FP(NU,NU),
     *          FH(NO,NO),O2(1),VPP(1),VR(1),VL(1),O1(1),T1(1),VM(1),
     *          FPH(NO,NU)
      DIMENSION ECIM(NO),EK(NO,NO),TX(NO,NO),YO2(1),YT2(1)  !-CIM-
C
      DATA ZERO/0.0D+00/,TWO/2.0D+00/,HALF/0.5D+00/,TEN/10.0D+00/
     *     ONE/1.0D+00/,ONEM/-1.0D+00/,LCCD,CCD/2*.FALSE./
C
      NO2   = NO*NO
      NO3   = NO*NO2
      NO4   = NO*NO3
      NU2   = NU*NU
      NOU   = NO*NU
      NO2U  = NO2*NU
      NOU2  = NO*NU2
      NO2U2 = NO2*NU2
C
      CALL DAREAD(IDAF,IODA,TX(1,1),NO2,359,0)  !-CIM-TX is VEC FROM Alpha CMO TO LMO
C
      TRESH=TEN**(-ICONV)
      CNVR=.FALSE.
      LCCD=MET.EQ.0
      CCD =MET.EQ.1
      CALL RO2HPP(1,NO,NU,TI,O2)
      CALL ADDDEN(NO,NU,O2,OEH,OEP)
C     CALL ENERGYMM(NO,NU,TI,O2,T2,EMP2)
C
      CALL VCLR(ECIM,1,NO)
      CALL ENERGYMM_CIM(NO,NU,TI,O2,T2,TX,YO2,YT2,ECIM,EMP2)
C
C --- 2009.07.31 MP2 ENERGY -CIM-
C
      WRITE(IW,9000)
      WRITE(IW,9010) EMP2
      WRITE(IW,9100) (ECIM(I),I=1,NO)
      IF (MOTYP.EQ.1) WRITE(IW,9110)
      WRITE(IW,*)
      call rwrit(ICIF, '$CORR-MP2',  NO, ECIM)  !-CIM- 08/31/2009
C
      IF(IREST.EQ.0.OR.MET.LT.2) THEN
         CALL ZEROMA(O1,1,NOU)
         CALL WO1(1,NO,NU,O1)
         CALL WO1(2,NO,NU,O1)
      END IF
      IF(IREST.EQ.0) THEN
      CALL WO2(1,NO,NU,O2)
      ENRGOLD=EMP2
      ITER=0
      END IF
      ITRLE=0
 1000 CONTINUE
      CALL RF(NO,NU,FH,FP,FPH)
      CALL VECCOP(NOU,T1,FPH)
      CALL ZEROMA(T2,1,NO2U2)
      ITER=ITER+1
      ITRLE=ITRLE+1
      CALL RO2(1,NO,NU,O2)
C      call chksum('o2      ',o2,no2u2)
      CALL RDOV4(1,NU,NO,TI,VHH)
      CALL RO2HPP(2,NO,NU,TI,VL)
      CALL INSITU(NO,NU,NU,NO,TI,VL,12)
      CALL RO1(1,NO,NU,O1)
C      call chksum('o1      ',o1,nou)
      CALL RDVEM4(1,NU,NO,TI,VM)
      CALL RO2HPP(1,NO,NU,TI,VR)
      IF(LCCD) GO TO 100
      IF(CCD) GO TO 90
      CALL TRT1(NO,NU,TI,O1)
      CALL SYMT21(VR,NO,NU,NU,NO,23)
      CALL DGEMM('N','N',NOU,1,NOU,ONE,VR,NOU,O1,NOU,ONE,FPH,NOU)
      CALL DESM21(VR,NO,NU,NU,NO,23)
      CALL TRT1(NO,NU,TI,FPH)
      CALL INSITU(NO,NU,NU,NO,TI,VR,12)
      CALL RDVEM4(0,NO,NU,TI,VPP)
      CALL SYMT21(VPP,NU,NU,NU,NO,13)
      CALL DGEMM('N','N',NU2,1,NOU,ONE,VPP,NU2,O1,NU2,ONE,FP,NU2)
      CALL DGEMM('N','T',NU,NU,NO,ONEM,FPH,NU,O1,NU,ONE,FP,NU)
C      CALL CCMATMUL(fph,o1,fp,nu,nu,no,0,1)
      CALL DESM21(VPP,NU,NU,NU,NO,13)
      CALL TRANMD(VR,NU,NO,NU,NO,13)
      CALL TRMD(O2,TI,NU,NO,2)
 90   CONTINUE
      OL=ONE
      IF(CCD) THEN
      OL=ZERO
      CALL TRMD(O2,TI,NU,NO,2)
      CALL INSITU(NO,NU,NU,NO,TI,VR,12)
      CALL TRANMD(VR,NU,NO,NU,NO,13)
      END IF
      CALL SYMT21(O2,NO,NU,NO,NU,13)
      CALL DGEMM('N','N',NU,NU,NO2U,ONEM,VR,NU,O2,NO2U,OL,FP,NU)
      IF(EOM) THEN
         NHHHH = 85
         CALL WCCFL(NHHHH,2,NU2,FP)
      END IF
C
      CALL DESM21(O2,NO,NU,NO,NU,13)
      IF(CCD) GO TO 91
C      call ADT12(2,NO,NU,o1,o2,1)
      CALL TRANMD(VR,NU,NO,NU,NO,13)
      CALL TRMD(O2,TI,NU,NO,4)
      CALL TRT1(NU,NO,TI,O1)
      CALL SYMT21(VM,NO,NO,NO,NU,13)
      CALL DGEMM('N','N',NO2,1,NOU,ONE,VM,NO2,O1,NOU,ONE,FH,NO2)
      CALL DESM21(VM,NO,NO,NO,NU,13)
      CALL TRANSQ(FH,NO)
 91   CONTINUE
      IF(CCD) THEN
      CALL TRANMD(VR,NU,NO,NU,NO,13)
      CALL TRMD(O2,TI,NU,NO,4)
      END IF
      CALL TRMD(VR,TI,NU,NO,7)
      CALL SYMT21(O2,NO,NU,NU,NO,23)
      CALL DGEMM('N','N',NO,NO,NOU2,ONE,O2,NO,VR,NOU2,OL,FH,NO)
      CALL DESM21(O2,NO,NU,NU,NO,23)
      IF(CCD) GO TO 92
      CALL TRMD(VR,TI,NU,NO,8)
      CALL DGEMM('N','N',NO,NU,NU,ONE,O1,NO,FP,NU,ONE,T1,NO)
      CALL DGEMM('N','N',NO,NU,NO,ONEM,FH,NO,O1,NO,ONE,T1,NO)
      CALL SYMT21(O2,NO,NU,NU,NO,14)
      CALL DGEMM('N','N',NOU,1,NOU,ONE,O2,NOU,FPH,NOU,ONE,T1,NOU)
      CALL DESM21(O2,NO,NU,NU,NO,14)
      CALL TRT1(NO,NU,TI,T1)
      CALL TRT1(NO,NU,TI,O1)
      CALL VECMUL(VR,NO2U2,TWO)
      CALL VECSUB(VR,VL,NO2U2)
      CALL DGEMM('N','N',1,NOU,NOU,ONE,O1,1,VR,NOU,ONE,T1,1)
      CALL VECADD(VR,VL,NO2U2)
      CALL VECMUL(VR,NO2U2,HALF)
      CALL TRMD(O2,TI,NU,NO,10)
      CALL SYMT21(O2,NU,NU,NO,NO,12)
      CALL DGEMM('N','N',NU,NO,NOU2,ONE,VPP,NU,O2,NOU2,ONE,T1,NU)
      CALL TRT1(NU,NO,TI,T1)
      CALL TRMD(O2,TI,NU,NO,11)
      CALL DGEMM('N','N',NO,NU,NO2U,ONEM,VM,NO,O2,NO2U,ONE,T1,NO)
      CALL DESM21(O2,NO,NO,NU,NU,12)
      CALL TRMD(O2,TI,NU,NO,12)
      CALL TRT1(NU,NO,TI,O1)
      CALL ADDDEN1(NO,NU,T1,OEH,OEP)
      IF(ITER.LE.3) CALL ZEROMA(T1,1,NOU)
      CALL WO1(2,NO,NU,T1)
      CALL TRT1(NU,NO,TI,FPH)
      CALL DGEMM('N','T',NO,NO,NU,ONE,O1,NO,FPH,NO,ONE,FH,NO)
C
      IF(EOM) THEN
         CALL TRANSQ(FH,NO)
         CALL WCCFL(NHHHH,1,NO2,FH)
         CALL TRANSQ(FH,NO)
      END IF
C
      CALL WO1(3,NO,NU,FPH)
 92   CONTINUE
      IF(CCD) THEN
      CALL TRMD(VR,TI,NU,NO,8)
      END IF
      CALL DGEMM('N','T',NOU2,NO,NO,ONEM,O2,NOU2,FH,NO,ZERO,T2,NOU2)
C      call chksum('t2 1    ',t2,no2u2)
      CALL TRMD(T2,TI,NU,NO,2)
      CALL TRMD(O2,TI,NU,NO,2)
      CALL DGEMM('N','N',NO2U,NU,NU,ONE,O2,NO2U,FP,NU,ONE,T2,NO2U)
C      call chksum('t2 1    ',t2,no2u2)
      CALL INSITU(NU,NO,NU,NO,TI,VR,23)
      CALL TRMD(O2,TI,NU,NO,14)
      CALL ADT12(1,NO,NU,O1,O2,3)
      CALL DGEMM('N','N',NO2,NO2,NU2,ONE,O2,NO2,VR,NU2,ONE,VHH,NO2)
      IF(CCD) GO TO 93
      CALL MTRANS(VHH,NO,11)
      CALL VECMUL(VHH,NO4,HALF)
      CALL DGEMM('N','T',NO3,NO,NU,ONE,VM,NO3,O1,NO,ONE,VHH,NO3)
      CALL SYMV1(VHH,NO2)
      CALL TRMD(VHH,TI,NU,NO,16)
 93   CONTINUE
      IF(CCD) THEN
      CALL MTRANS(VHH,NO,19)
      END IF
      CALL TRANMD(O2,NO,NO,NU,NU,12)
      CALL TRMD(T2,TI,NU,NO,18)
 100  CONTINUE
      CALL VECMUL(O2,NO2U2,HALF)
      IF(LCCD) THEN
      CALL TRMD(O2,TI,NU,NO,39)
      END IF
      OL=ONE
      IF(LCCD)OL=ZERO
C Original version before adding quadruples
CCCX      IF(EOM) CALL WCCFL(NHHHH,3,NO4,VHH)
C 06/23/2004 QUADRUPLES ----
      IF(EOM.OR.QDR) THEN
      NHHHH=85
      CALL WCCFL(NHHHH,3,NO4,VHH)
      END IF
C --------------------------
C
      CALL DGEMM('N','N',NO2,NU2,NO2,ONE,VHH,NO2,O2,NO2,OL,T2,NO2)
      DO I=1,NU
      CALL RDVPP(I,NO,NU,TI)
      CALL DGEMM('N','N',NO2,NU,NU2,ONE,O2,NO2,TI,NU2,ONE,
     &T2(1,1,1,I),NO2)
      ENDDO
      CALL VECMUL(O2,NO2U2,TWO)
      IF(LCCD) GO TO 101
      CALL INSITU(NU,NU,NO,NO,TI,VR,23)
      CALL TRMD(VR,TI,NU,NO,13)
      IF(.NOT.CCD) CALL ADT12(2,NO,NU,O1,O2,2)
      CALL TRMD(O2,TI,NU,NO,20)
      CALL TRMD(VR,TI,NU,NO,21)
      CALL VECMUL(O2,NO2U2,HALF)
      IF(.NOT.CCD) CALL ADT12(1,NO,NU,O1,O2,4)
      CALL DGEMM('N','N',NOU,NOU,NOU,ONEM,VR,NOU,O2,NOU,ONE,VL,NOU)
      IF(.NOT.CCD) CALL ADT12(2,NO,NU,O1,O2,4)
      CALL VECMUL(O2,NO2U2,TWO)
      IF(CCD) GO TO 94
      CALL TRMD(VM,TI,NU,NO,22)
      CALL TRMD(VL,TI,NU,NO,23)
      CALL DGEMM('T','N',NU,NO2U,NO,ONEM,O1,NO,VM,NO,ONE,VL,NU)
      CALL TRMD(VM,TI,NU,NO,22)
      CALL TRMD(VL,TI,NU,NO,24)
      CALL TRMD(VPP,TI,NU,NO,25)
      CALL DGEMM('N','N',NO,NOU2,NU,ONE,O1,NO,VPP,NU,ONE,VL,NO)
      CALL TRMD(VL,TI,NU,NO,26)
 94   CONTINUE
      CALL TRMD(O2,TI,NU,NO,27)
      CALL TRMD(T2,TI,NU,NO,28)
 101  CONTINUE
      IF(LCCD) THEN
      CALL TRMD(O2,TI,NU,NO,28)
      CALL TRMD(T2,TI,NU,NO,28)
      END IF
      CALL DGEMM('N','N',NOU,NOU,NOU,ONEM,O2,NOU,VL,NOU,ONE,T2,NOU)
C      call chksum('t2 1    ',t2,no2u2)
      CALL TRANMD(O2,NO,NU,NU,NO,23)
      CALL TRANMD(T2,NO,NU,NU,NO,23)
      CALL DGEMM('N','N',NOU,NOU,NOU,ONEM,O2,NOU,VL,NOU,ONE,T2,NOU)
C      call chksum('t2 1    ',t2,no2u2)
      IF(LCCD) GO TO 102
      CALL TRMD(VR,TI,NU,NO,30)
      CALL TRMD(O2,TI,NU,NO,31)
      CALL VECMUL(O2,NO2U2,HALF)
      CALL SYMT21(VR,NU,NO,NU,NO,13)
      CALL DGEMM('N','N',NOU,NOU,NOU,ONE,VR,NOU,O2,NOU,ZERO,VL,NOU)
      CALL DESM21(VR,NU,NO,NU,NO,13)
      CALL TRANMD(O2,NU,NO,NU,NO,13)
      IF(.NOT.CCD) CALL ADT12(1,NO,NU,O1,O2,5)
      CALL DGEMM('N','N',NOU,NOU,NOU,ONEM,VR,NOU,O2,NOU,ONE,VL,NOU)
      IF(CCD) GO TO 95
      CALL ADT12(2,NO,NU,O1,O2,5)
      CALL VECMUL(O2,NO2U2,TWO)
      CALL TRMD(VPP,TI,NU,NO,25)
      CALL TRMD(VL,TI,NU,NO,33)
      CALL DGEMM('N','N',NO,NOU2,NU,ONE,O1,NO,VPP,NU,ONE,VL,NO)
      CALL TRMD(VL,TI,NU,NO,34)
      CALL DGEMM('T','N',NU,NO2U,NO,ONEM,O1,NO,VM,NO,ONE,VL,NU)
 95   CONTINUE
      IF(CCD) THEN
      CALL VECMUL(O2,NO2U2,TWO)
      CALL TRMD(VL,TI,NU,NO,33)
      CALL TRMD(VL,TI,NU,NO,34)
      END IF
      CALL TRMD(VL,TI,NU,NO,35)
      CALL VECADD(VL,VR,NO2U2)
      CALL TRMD(O2,TI,NU,NO,36)
 102  CONTINUE
      IF(LCCD) THEN
      CALL RO2HPP(1,NO,NU,TI,VL)
      CALL INSITU(NO,NU,NU,NO,TI,VL,12)
      END IF
      CALL SYMT21(O2,NO,NU,NU,NO,23)
      CALL DGEMM('N','N',NOU,NOU,NOU,ONE,O2,NOU,VL,NOU,ONE,T2,NOU)
C      call chksum('t2 1    ',t2,no2u2)
      IF(LCCD.OR.CCD) GO TO 103
      CALL DESM21(O2,NO,NU,NU,NO,23)
      CALL RO2HPP(2,NO,NU,TI,VL)
      CALL INSITU(NO,NU,NU,NO,TI,VL,12)
      CALL TRMD(VL,TI,NU,NO,37)
      CALL TRMD(VPP,TI,NU,NO,25)
      CALL DGEMM('T','N',NU,NOU2,NO,ONEM,O1,NO,VL,NO,ONE,VPP,NU)
      CALL TRMD(VPP,TI,NU,NO,25)
      CALL TRMD(VR,TI,NU,NO,37)
      CALL DGEMM('T','N',NU,NOU2,NO,ONEM,O1,NO,VR,NO,ONE,VPP,NU)
      CALL TRMD(VPP,TI,NU,NO,38)
      CALL DGEMM('N','N',NO,NOU2,NU,ONE,O1,NO,VPP,NU,ONE,T2,NO)
C      call chksum('t2 1    ',t2,no2u2)
      CALL TRMD(T2,TI,NU,NO,24)
      CALL INSITU(NO,NU,NU,NO,TI,O2,12)
      CALL INSITU(NU,NO,NU,NO,TI,O2,23)
      CALL RDVEM4(0,NO,NU,TI,VPP)
      CALL TRANMD(VPP,NU,NU,NU,NO,13)
      CALL TRANMD(VM,NO,NO,NO,NU,312)
      CALL DGEMM('T','N',NO2,NOU,NU2,ONE,O2,NU2,VPP,NU2,ZERO,VR,NO2)
      CALL VMCP(NO,NU,VM,VR)
      CALL TRANMD(VM,NO,NO,NO,NU,23)
      CALL TRANMD(VPP,NU,NU,NU,NO,13)
      CALL DGEMM('N','N',NO,NOU2,NU,ONE,O1,NO,VPP,NU,ZERO,VL,NO)
      CALL TRANSQ(VL,NOU)
      CALL DGEMM('N','N',NO,NO2U,NU,ONE,O1,NO,VL,NU,ONE,VM,NO)
      CALL TRANMD(VM,NO,NO,NO,NU,12)
      CALL DGEMM('T','N',NU,NO2U,NO,ONEM,O1,NO,VM,NO,ONE,T2,NU)
C      call chksum('t2 1    ',t2,no2u2)
      CALL TRANSQ(T2,NOU)
 103  CONTINUE
      CALL SYMETR(T2,NO,NU)
C      call chksum('t2symetr ',t2,no2u2)
      CALL RO2HPP(1,NO,NU,TI,O2)
      CALL VECADD(T2,O2,NO2U2)
      CALL ADDDEN(NO,NU,T2,OEH,OEP)
      CALL WO2(2,NO,NU,T2)
C      call chksum('t2 1    ',t2,no2u2)
      CALL VECCOP(NO2U2,O2,T2)
      IF(.NOT.LCCD.AND..NOT.CCD) CALL ADT12(1,NO,NU,T1,T2,6)
      NLAST=5*NO+2*NU
      READ(INTG,REC=NLAST+3)FPH
      ZZ=TWO*DDOT(NOU,T1,1,FPH,1)
      CALL ENERGYMM(NO,NU,TI,T2,VR,ENRG)
      ENRG=ENRG+ZZ
      DIFFENG=ENRG-ENRGOLD
C
C       *** use a Jacobi procedure to update amplitudes ***
C
      IF(MXRLE.GT.0) GO TO 717
      CALL DRCMP(NO,NU,O1)
      IF(ABS(DIFMAX).GT.1.0D+04) GO TO 718
      CNVR=ABS(DIFMAX).LT.TRESH
      IF(.NOT.LCCD.AND..NOT.CCD) CALL RO1(2,NO,NU,T1)
      IF(.NOT.LCCD.AND..NOT.CCD) CALL WO1(1,NO,NU,T1)
      CALL RO2(2,NO,NU,T2)
      CALL WO2(1,NO,NU,T2)
C
      CALL DRPRINT(2)
      ENRGOLD=ENRG
C
      CALL DRREST(1,NO,NU,VL,VR)
      IF(ITER.LT.MAXIT.AND..NOT.CNVR) GO TO 1000
      GO TO 718
C
C       *** use reduced linear equation solver to update amplitudes ***
C
 717  CONTINUE
C
C           caution: drcmp will set several amplitude quantities
C           in the -o1- storage vector, to pass to drrlen.
C
      IF(IREST.GT.0.AND.ITRLE.EQ.1) CALL DRCMP(NO,NU,O1)
      CNVR=ABS(DIFMAX).LT.TRESH
      IF(CNVR.AND.ITER.GT.1) CALL DRPRINT(2)
C
      IF(.NOT.CNVR.OR.ITER.LT.2) THEN
      IF(.NOT.LCCD.AND..NOT.CCD) CALL RO1(2,NO,NU,T1)
C      call ro2(2,no,nu,t2)
      IF(MXRLE.GT.0) CALL DRRLEN(NO,NU,O1)
C
      CALL DRPRINT(2)
C
      IF(ITRLE.EQ.1) THEN
         IF(.NOT.LCCD.AND..NOT.CCD) THEN
            CALL RO1(2,NO,NU,T1)
            CALL WO1(1,NO,NU,T1)
         END IF
         CALL RO2(2,NO,NU,T2)
         CALL WO2(1,NO,NU,T2)
      END IF
      ENRGOLD=ENRG
C
C        next call uses -vl- and -vr- as scratch storage
C
      CALL DRREST(1,NO,NU,VL,VR)
      IF(ITER.LT.MAXIT) GO TO 1000
      END IF
C
C        *** convergence of cc has been obtained ***
C
  718 CONTINUE
C
C        ----- for -CIM- analysis 01 MAR 10 -----
C
      WRITE(IW,9000)
      CALL VCLR(ECIM,1,NO)
      CALL VCLR(EK,1,NO2)
      CALL DAREAD(IDAF,IODA,TX(1,1),NO2,359,0)  ! TX is VECTOR FROM CMO TO LMO
C
      CALL RO2(2,NO,NU,T2)
      IF(.NOT.LCCD.AND..NOT.CCD) THEN
         CALL RO1(2,NO,NU,T1)
         CALL ADT12(1,NO,NU,T1,T2,6)
      END IF
C     CALL ADT12(1,NO,NU,T1,T2,6)  !-CIM- It seems that T2 have included T1 here
      NLAST=5*NO+2*NU
      READ(INTG,REC=NLAST+3)FPH
      CALL ECIM1(NO,NU,T1,FPH,ECIM,EK)    !-CIM-
      CALL ECIM2(NO,NU,TI,T2,VR,ECIM,EK)  !-CIM-
C
C
      IF (MOTYP.EQ.2) THEN
         IF (LCCD) THEN
            WRITE(IW,9021) DSUM(NO,ECIM,1)
         ELSE IF (CCD) THEN
            WRITE(IW,9022) DSUM(NO,ECIM,1)
         ELSE
            WRITE(IW,9023) DSUM(NO,ECIM,1)
         END IF
         WRITE(IW,9100) (ECIM(I),I=1,NO)  !-CIM- CMO CC ENERGIES
         CALL EECIM(NO,TX,EK,ECIM)  !-CIM- E(QCMO)-->E(LMO)
      END IF
C
      IF (LCCD) THEN
         WRITE(IW,9031) DSUM(NO,ECIM,1)
         WRITE(IW,9100) (ECIM(I),I=1,NO)  !-CIM- LMO LCCD ENERGIES
         call rwrit(ICIF, '$CORR-LCCD', NO, ECIM)  !-CIM- 05/22/2009
         IF (MOTYP.EQ.1) WRITE(IW,9111)
      ELSE IF (CCD) THEN
         WRITE(IW,9032) DSUM(NO,ECIM,1)
         WRITE(IW,9100) (ECIM(I),I=1,NO)  !-CIM- LMO CCD ENERGIES
         call rwrit(ICIF, '$CORR-CCD',  NO, ECIM)  !-CIM- 05/22/2009
         IF (MOTYP.EQ.1) WRITE(IW,9112)
      ELSE
         WRITE(IW,9033) DSUM(NO,ECIM,1)
         WRITE(IW,9100) (ECIM(I),I=1,NO)  !-CIM- LMO CCSD ENERGIES
         call rwrit(ICIF, '$CORR-CCSD', NO, ECIM)  !-CIM- 05/22/2009
      END IF
      CALL FLSHBF(ICIF)
C
C        ----- end of -CIM- analysis -----
C
C        ----- prepare some amplitude diagnostics -----
C
      IF(MET.GE.2) THEN
C
C               Read converged amplitudes from disk.
C        These have the shape t1(no,nu) and t2(no,nu,nu,no).
C        Note that the shape of T2 at this point does not match
C        the dimension above, so we use -VR- as storage of T2.
C
        CALL RO1(1,NO,NU,T1)
        CALL RO2(2,NO,NU,VR)
C
C        compute the T1 diagnostic of
C        T.J.Lee, P.R.Taylor  Int.J.Quantum Chem. S23, 199-207(1989)
C
        T1NORM=DDOT(NOU  ,T1,1,T1,1)
        T2NORM=DDOT(NO2U2,VR,1,VR,1)
        DIAGS(1) = SQRT(T1NORM/(TWO*NO))
        DIAGS(2) = SQRT(T1NORM)
        DIAGS(3) = SQRT(T2NORM)
C
C        Find largest amplitudes in t1(no,nu) and t2(no,nu,nu,no)
C        Note that the process destroys the biggest values.
C
        DO III=1,5
           IMAX = IDAMAX(NOU,T1,1)
           A = (IMAX-1)/NO + 1
           I = IMAX - (A-1)*NO
            AMPMX(III,  1) = T1(IMAX)
           IAMPMX(III,1,1) = I + IFC
           IAMPMX(III,2,1) = A + IFC + NO
           T1(IMAX) = ZERO
C
           IMAX = IDAMAX(NO2U2,VR,1)
           J = (IMAX-1)/NOU2 + 1
           IDMY = IMAX - (J-1)*NOU2
           B = (IDMY-1)/NOU + 1
           IDMY = IDMY - (B-1)*NOU
           A = (IDMY-1)/NO + 1
           I = IDMY - (A-1)*NO
            AMPMX(III,  2) = VR(IMAX)
           VR(IMAX) = ZERO
C               t2(i,a,b,j) equals t2(j,b,a,i)
           IMAX = J + (B-1)*NO + (A-1)*NOU + (I-1)*NOU2
           VR(IMAX) = ZERO
           IF(I.EQ.J  .AND.  A.GT.B) THEN
              K = B
              B = A
              A = K
           END IF
           IF(I.NE.J) THEN
              K = J
              J = I
              I = K
              K = B
              B = A
              A = K
           END IF
           IAMPMX(III,1,2) = I + IFC
           IAMPMX(III,2,2) = J + IFC
           IAMPMX(III,3,2) = A + IFC + NO
           IAMPMX(III,4,2) = B + IFC + NO
        ENDDO
      END IF
C
      IF(MET.GE.4) THEN
      CALL RO1(1,NO,NU,T1)
      CALL RO2(1,NO,NU,T2)
      CALL VECCOP(NO2U2,O2,T2)
      CALL ADT12(1,NO,NU,T1,T2,6)
C     OSS=TWO*DDOT(NOU,T1,1,T1,1)
      CALL SYMT21(O2,NO,NU,NU,NO,23)
C     ODS=ZERO
C     ODD=DDOT(NO2U2,O2,1,T2,1)
      END IF
C     ESD=ENRG
      RETURN
 9000 FORMAT(/10X,20('-'),
     *       /10X,'CIM ENERGIES FOR MOS',
     *       /10X,20('-'))
 9010 FORMAT(/1X,'ECORR(LMO-MP2)=    ',40X,F20.10)
 9021 FORMAT(/1X,'ECORR(QCMO-LCCD)=  ',40X,F20.10)
 9022 FORMAT(/1X,'ECORR(QCMO-CCD)=   ',40X,F20.10)
 9023 FORMAT(/1X,'ECORR(QCMO-CCSD)=  ',40X,F20.10)
 9031 FORMAT(/1X,'ECORR(LMO-LCCD)=   ',40X,F20.10)
 9032 FORMAT(/1X,'ECORR(LMO-CCD)=    ',40X,F20.10)
 9033 FORMAT(/1X,'ECORR(LMO-CCSD)=   ',40X,F20.10)
 9100 FORMAT(5F16.10)
 9110 FORMAT( 1X,'WARNING: LMO-MP2 ENERGIES MAY BE INCORRECT!')
 9111 FORMAT( 1X,'WARNING: LMO-LCCD ENERGIES MAY BE INCORRECT!')
 9112 FORMAT( 1X,'WARNING: LMO-CCD ENERGIES MAY BE INCORRECT!')
      END
C*MODULE CCSDT   *DECK ENERGYMM_CIM -CIM- 01 MAR 10
      SUBROUTINE ENERGYMM_CIM(NO,NU,TI,O2,V,TX,YO2,YT2,ECIM,Y)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION V(1),TI(1),O2(1)
      DIMENSION YO2(NO),YT2(NO),TX(NO,NO),ECIM(NO)  !-CIM- 2009.08.06
      DATA TWO/2.0D+00/,HALF/0.5D+00/
      EXTERNAL DSUM  !-WL-
C
      Y=0.0D+00
      NOU2  = NO*NU*NU
      NO2U2 = NO*NOU2
      CALL RO2HPP(1,NO,NU,TI,V)
      CALL VECMUL(V,NO2U2,TWO)
C     Y=DDOT(NO2U2,O2,1,V,1)
      m=0
      DO 100 I=1,NU
      DO 100 J=1,NU
      DO 100 K=1,NO
         CALL VCLR(YO2,1,NO)  !-CIM-
         CALL VCLR(YT2,1,NO)  !-CIM-
         DO 120 L=1,NO
            m=m+1
            DO 150 LL=1,NO
               YO2(LL)=YO2(LL)+O2(m)*TX(L,LL)
               YT2(LL)=YT2(LL)+V(m)*TX(L,LL)
 150        CONTINUE
 120     CONTINUE
         DO 180 LL=1,NO
            ECIM(LL)=ECIM(LL)+YO2(LL)*YT2(LL)
 180     CONTINUE
 100  CONTINUE
C
      CALL TRANMD(V,NO,NU,NU,NO,23)
      CALL VECMUL(V,NO2U2,HALF)
C     Y=Y-DDOT(NO2U2,O2,1,V,1)
      m=0
      DO 200 I=1,NU
      DO 200 J=1,NU
      DO 200 K=1,NO
         CALL VCLR(YO2,1,NO)  !-CIM-
         CALL VCLR(YT2,1,NO)  !-CIM-
         DO 220 L=1,NO
            m=m+1
            DO 250 LL=1,NO
               YO2(LL)=YO2(LL)+O2(m)*TX(L,LL)
               YT2(LL)=YT2(LL)+V(m)*TX(L,LL)
 250        CONTINUE
 220     CONTINUE
         DO 280 LL=1,NO
            ECIM(LL)=ECIM(LL)-YO2(LL)*YT2(LL)
 280     CONTINUE
 200  CONTINUE
C
      Y=DSUM(NO,ECIM,1)
C
      RETURN
      END
C*MODULE CCSDT   *DECK ECIM1   !-CIM-
      SUBROUTINE ECIM1(NO,NU,T1,FPH,ECIM,EK)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION T1(NO,NU),FPH(NO,NU),ECIM(NO),EK(NO,NO)
      DATA TWO/2.0D+00/ !,HALF/0.5D+00/,QUARTER/0.25D+00/
C
      DO 10 I=1,NO
         DO 20 J=1,NU
            ECIM(I)=ECIM(I)+T1(I,J)*FPH(I,J)
 20      CONTINUE
         ECIM(I)=ECIM(I)*TWO
 10   CONTINUE
C
      DO I=1,NO
         DO L=1,NO
            DO IA=1,NU
               EK(L,I)=EK(L,I)+T1(I,IA)*FPH(L,IA)
            END DO
            EK(L,I)=EK(L,I)*TWO
         END DO
      END DO
C
      RETURN
      END
*MODULE CCSDT   *DECK ECIM2   !-CIM-
      SUBROUTINE ECIM2(NO,NU,TI,T2,VR,ECIM,EK)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DATA TWO/2.0D+00/,HALF/0.5D+00/ !,ZERO/0.0D+00/
      DIMENSION VR(NO,NU,NU,NO),TI(NU,NU,NO),T2(NO,NU,NU,NO)
      DIMENSION ECIM(NO),EK(NO,NO)
C
      NO2U2 = NO*NO*NU*NU
      CALL RO2HPP(1,NO,NU,TI,VR)
      CALL VECMUL(VR,NO2U2,TWO)
C
      DO 10 I=1,NO
         DO 20 IA=1,NU
            DO 30 IB=1,NU
               DO 40 J=1,NO
                  ECIM(I)=ECIM(I)+T2(J,IB,IA,I)*VR(J,IB,IA,I)
                  DO L=1,NO
                     EK(L,I)=EK(L,I)+T2(J,IB,IA,I)*VR(J,IB,IA,L)   !-WL- 12/05/2007
                  END DO
 40            CONTINUE
 30         CONTINUE
 20      CONTINUE
 10   CONTINUE
C     Y=DDOT(NO2U2,T2,1,VR,1)
C
      CALL TRANMD(VR,NO,NU,NU,NO,23)
      CALL VECMUL(VR,NO2U2,HALF)
      DO 50 I=1,NO
         DO 60 IA=1,NU
            DO 70 IB=1,NU
               DO 80 J=1,NO
                  ECIM(I)=ECIM(I)-T2(J,IB,IA,I)*VR(J,IB,IA,I)
                  DO L=1,NO
                     EK(L,I)=EK(L,I)-T2(J,IB,IA,I)*VR(J,IB,IA,L)
                  END DO
 80            CONTINUE
 70         CONTINUE
 60      CONTINUE
 50   CONTINUE
C     Y=Y-DDOT(NO2U2,T2,1,VR,1)
      RETURN
      END
C*MODULE CCSDT  *DECK EECIM  !-CIM-
      SUBROUTINE EECIM(NO,TX,EK,ECIM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION TX(NO,NO),EK(NO,NO),ECIM(NO)
C
      CALL VCLR(ECIM,1,NO)
      DO II=1,NO
         DO I=1,NO
         DO J=1,NO
            ECIM(II)=ECIM(II)+TX(I,II)*TX(J,II)*EK(J,I)
         END DO
         END DO
      END DO
C
      RETURN
      END
*MODULE CCSDT   *DECK ECIMTS  -WL-
      SUBROUTINE ECIMTS(NO,NU,O1,T1,TX,NC,XO1,XT1,ECIM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXAO=8192)
C
      DIMENSION O1(NU,NO),T1(NU,NO),ECIM(NO),TX(NO,NO)
      DIMENSION XO1(NC,NU),XT1(NC,NU)
      COMMON /CCFILE/ INTG,NT1,NT2,NT3,NVM,NVE,NFRLE,NRESF,NRESL
C     COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /CIMIDX/ MOCEN(MXAO),ICENA(MXAO),ICENB(MXAO)  !-CIM- 2010.03.01  MO Cent
C     DATA TWO/2.0D+00/
C
C     NOU = NO*NU
      NCU = NC*NU
      READ(NT1,REC=1) O1
C
      CALL VCLR(XO1,1,NCU)
      CALL VCLR(XT1,1,NCU)
      DO 300 II=1,NC
         III=ICENA(II)                               !-WL- 2009.05.15
         DO 110 I=1,NO
            DO 120 IA=1,NU
               XO1(II,IA)=XO1(II,IA)+TX(I,III)*O1(IA,I)
               XT1(II,IA)=XT1(II,IA)+TX(I,III)*T1(IA,I)
 120        CONTINUE
 110     CONTINUE
 300  CONTINUE
C
      DO 200 II=1,NC
         III=ICENA(II)                               !-WL- 2009.05.15
         DO 220 IA=1,NU
            ECIM(III)=ECIM(III)+XO1(II,IA)*XT1(II,IA)
 220     CONTINUE
 200  CONTINUE
C
      RETURN
      END
C
C
C     *** Based on eomcc.src ***
C
C*MODULE EOMCC   *DECK EOMDRV_CIM
      SUBROUTINE EOMDRV_CIM(CCTYP,ESCF,ECCSD,BESTEOM)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MXATM=2000, MXAO=8192)
C
      COMMON /CCPAR / AMPTSH,METHCC,NCCTOT,NCCOCC,NCCFZC,NCCFZV,
     *                MXCCIT,MXRLEIT,NWRDCC,ICCCNV,ICCRST,IDSKCC
      COMMON /EOMFIL/ NSTAR,NC1,NC2,NHC1,NHC2,NHH,NPP,NAX,NAXX,NDIAG,
     *                ITAPP,IFAX,NRR1,NRR2,NEXM,NEXE,NW2C,NW4C,
     *                NW4D,NW2BD,NW4B,NROO,NREXM,NREXE,
     *                JCISD,KCIF,JCISDNX
      COMMON /EOMINF/ ISPACE,IHSPACE,JCISPACE,ICIMET,IOPTMM,
     *                NROOT,NOA,NUA,MAXITEOM
      COMMON /EOMPAR/ CVGCI,CVGEOM,GRPEOM,NSTEOM(8),NOACT,NUACT,
     *                MOACTCC(MXAO),MTHTRIP,MTHCI,MTHEOM,MTHINIT,
     *                MAXCI,MAXEOM,MICCI,MICEOM,IROOTCC(2),
     *                IPROPCC,IPROPCCE
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
C 27/05/2004 LEFT EOMSD ------------------
      COMMON /EOMMAR/ NL1,NL2,NHL1,NHL2,NNAXL
C-----------------------------------------
C     COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB
C
      DATA CREOM,CREOML,CRCCL/8HCR-EOM  ,8HCR-EOML ,8HCR-CCL   /
C
      IF (CCTYP.EQ.CRCCL) THEN
         WRITE(IW,9011) CCTYP
      ELSE
         WRITE(IW,9010) CCTYP
      END IF
C
C        OBTAIN INPUT VALUES
C
C---      READ(5,*) IOPTMM
C---      READ(5,*) NH,NP
C---      READ(5,*) NOA,NUA
C---      READ(5,*) MET,MEM
C---      IF(MEM.EQ.0) MEM=40000000
C---      READ(5,*) ICONV,MAXIT,IREST
C---      READ(5,*) INISTART
C---      READ(5,*) ICIMET
C---      READ(5,*) JCISPACE
C---      READ(5,*) IHSPACE,ICVCI
C---      READ(5,*) NROOT,ISPACE,ICNVEOM,MAXITEOM
C
      NO    = NCCOCC-NCCFZC
      NU    = NCCTOT-NCCFZV-NCCOCC
      NOA   = NOACT
      NUA   = NUACT
C
      IF((MTHINIT.EQ.1)  .AND.  (NUA.GT.NU  .OR.  NOA.GT.NO)) THEN
         WRITE(IW,9050) NOA,NUA,NO,NU
         CALL ABRT
      END IF
 9050 FORMAT(1X,'PLEASE CHECK "ACTIVE SPACE": NOA,NUA=',2I5,
     *          ' NO,NU=',2I5)
C
      NROOT = 0
      DO I=1,8
         NROOT = NROOT + NSTEOM(I)
      ENDDO
      INISTART = MTHINIT
      IHSPACE  = MICEOM
      ISPACE   = MTHEOM
      MAXITEOM = MAXEOM
      IF(IHSPACE.EQ.0) IHSPACE=MAXITEOM
C
      ICIMET   = MTHCI
      JCISPACE = MICCI
      IOPTMM   = MTHTRIP
C
      NU3   = NU*NU*NU
      NOU   = NO*NU
      NO2U  = NO*NO*NU
      NOU2  = NO*NU*NU
      NO2U2 = NO*NO*NU*NU
C
C        OPEN DISK FILES FOR EOM CALCULATIONS
C        NOTE THAT FILE -NHH- WAS ALREADY CREATED DURING THE CCSD STEP
C
      NSTAR=80  ! 17 (FILE NUMBER IN ORIGINAL CODE)
      NC1=81    ! 18
      NC2=82    ! 19
      NHC1=83   ! 20
      NHC2=84   ! 31
      NHH=85    ! 27
      NPP=86    ! 28
      NAX=87    ! 29
      NAXX=88   ! 30
      NDIAG=89  ! 32
C
      LRLE  = NOU+NO2U2
      LNOU  = NOU
      LNO2U2= NO2U2
      LNU3  = NU3
C
      CALL CCOPEN(NSTAR,LRLE  ,'EOMSTAR')
      CALL CCOPEN(NC1  ,LNOU  ,'EOMVEC1')
      CALL CCOPEN(NC2  ,LNO2U2,'EOMVEC2')
      CALL CCOPEN(NHC1 ,LNOU  ,'EOMHC1')
      CALL CCOPEN(NHC2 ,LNO2U2,'EOMHC2')
      CALL CCOPEN(NPP  ,LNU3  ,'EOMPPPP')
      CALL CCOPEN(NAX  ,LRLE  ,'EOMRAMP')
      CALL CCOPEN(NAXX ,LRLE  ,'EOMRTMP')
      CALL CCOPEN(NDIAG,LRLE  ,'EOMDG12')
C
C        FILES FOR METHOD OF MOMENTS TRIPLES CORRECTIONS
C        ORIGINAL FILE NUMBERS SHOWN.
C
      IF(CCTYP.EQ.CREOM .OR. CCTYP.EQ.CREOML .OR. CCTYP.EQ.CRCCL) THEN
         ITAPP=90  ! 44
         IFAX =91  ! 49
         LAPP = MAX(2*NU*NU,2*NO*NO)
         LAX3 = MAX(2*NOU2,2*NO2U)
         CALL CCOPEN(ITAPP,LAPP  ,'MMPP')
         CALL CCOPEN(IFAX ,LAX3  ,'MMHPP')
      END IF
C 27/05/2004 LEFT EOMSD ------------------
      NL1=95
      NL2=96
      NNAXL=97
      NHL1=98
      NHL2=99
      CALL CCOPEN(NL1  ,LNOU  ,'EOMVL1')
      CALL CCOPEN(NL2  ,LNO2U2,'EOMVL2')
      CALL CCOPEN(NNAXL,LRLE  ,'EOMLVEC')
      CALL CCOPEN(NHL1 ,LNOU  ,'EOMHL1')
      CALL CCOPEN(NHL2 ,LNO2U2,'EOMHL2')
C ----------------------------------------
C
C        OBTAIN OCCUPIED AND VIRTUAL EIGENVALUES
C
      CALL VALFM(LOADFM)
      LEH  = LOADFM + 1
      LEP  = LEH    + NO
      LAST = LEP    + NU
      NDEIG= LAST-LOADFM-1
      CALL GETFM(NDEIG)
C
      LWRK = LAST
      LAST = LWRK + NUM
      NEED = NUM
      CALL GETFM(NEED)
      CALL EOMEIG(X(LEH),X(LEP),X(LAST),NUM,NO,NU,NCCFZC)
      CALL RETFM(NEED)
C
C        CARRY OUT THE EOM-CCSD CALCULATION
C
      CALL DREOMCC(NO,NU,X(LEH),X(LEP),INISTART,ECCSD,BESTEOM,CCTYP)
      CALL RETFM(NDEIG)
      WRITE(IW,*) '..... DONE WITH EOM-CCSD .....'
      CALL TIMIT(1)
      CALL TIMSTP('EOM-CCSD')
C
C        CARRY OUT THE OPTIONAL TRIPLES CORRECTIONS
C
      IF(CCTYP.EQ.CREOM .OR. CCTYP.EQ.CREOML .OR. CCTYP.EQ.CRCCL) THEN
         WRITE(IW,9020)
         CALL MMDRV_CIM(ESCF,ECCSD,BESTEOM)
         WRITE(IW,9030)
         CALL TIMIT(1)
      END IF
      RETURN
C
 9010 FORMAT(/5X,26(1H-)/5X,'EQUATION-OF-MOTION PROGRAM'/5X,26(1H-)//
     *        5X,55(1H-)/5X,
     *    'K.KOWALSKI, P.PIECUCH, M.WLOCH, S.A.KUCHARSKI, M.MUSIAL'/
     *        5X,55(1H-)//
     *        1X,'CARRYING OUT ',A8,' CALCULATION.')
 9011 FORMAT(/5X,26(1H-)/5X,'EQUATION-OF-MOTION PROGRAM'/5X,26(1H-)//
     *        5X,55(1H-)/5X,
     *    'K.KOWALSKI, M.WLOCH, P.PIECUCH, S.A.KUCHARSKI, M.MUSIAL'/
     *        5X,55(1H-)//
     *        1X,'CARRYING OUT ',A8,' CALCULATION.')
 9020 FORMAT(/1X,'EOM-CCSD HAS FINISHED,',
     *          ' NOW ENTERING THE MMCC23 PROGRAM'/
     *       1X,'TO COMPUTE CR-EOMCCSD(T) AND/OR CR-CC(2,3)',
     *           ' TRIPLES CORRECTIONS')
 9030 FORMAT(/1X,'.... DONE WITH MMCC(2,3) TRIPLES CORRECTIONS ....')
      END
C     *** Based on mm23.src 15 OCT 2009 ***
C
C*MODULE MM23   *DECK MMDRV_CIM
      SUBROUTINE MMDRV_CIM(ESCF,ECCSD,BESTEOM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*3 VECREP,REP
C
      PARAMETER (MXATM=2000, MXAO=8192)
C
      COMMON /CCPAR / AMPTSH,METHCC,NCCTOT,NCCOCC,NCCFZC,NCCFZV,
     *                MXCCIT,MXRLEIT,NWRDCC,ICCCNV,ICCRST,IDSKCC
      COMMON /EOMFIL/ NSTAR,NC1,NC2,NHC1,NHC2,NHH,NPP,NAX,NAXX,NDIAG,
     *                ITAPP,IFAX,NRR1,NRR2,NEXM,NEXE,NW2C,NW4C,
     *                NW4D,NW2BD,NW4B,NROO,NREXM,NREXE,
     *                JCISD,KCIF,JCISDNX
      COMMON /EOMINF/ ISPACE,IHSPACE,JCISPACE,ICIMET,IOPTMM,
     *                NROOT,NOA,NUA,MAXITEOM
      COMMON /EOMPAR/ CVGCI,CVGEOM,GRPEOM,NSTEOM(8),NOACT,NUACT,
     *                MOACTCC(MXAO),MTHTRIP,MTHCI,MTHEOM,MTHINIT,
     *                MAXCI,MAXEOM,MICCI,MICEOM,IROOTCC(2),
     *                IPROPCC,IPROPCCE
      COMMON /EOMSYM/ IG,NRE(4),MC(8,8,4),ISORB(MXAO),REP(8)
C
C     /EOMTRP/ IS INTERMEDIATES FOR TRIPLES CORRECTIONS
C            10 - MAXIMUM NUMBER OF STATES PER IRREP
C       XM1,XD1 - R3 DEN(EH-EP)
C       XM2,XD2 - R3 DEN(FH-FP)
C       XM3,XD3 - R3 DEN(12BODY)
C           YD1 - R3/(ALL)
C           YD2 - R3/(12BODY)
C           YD3 - R3/(EH-EP)
C           YD4 - R3/(FH-FP)
C      XGRCORR  - (P+Q123)EXP(T12)(1+T3)|PHI> T3(ALL)
C      XGRCORR1 - (P+Q123)EXP(T12)(1+T3)|PHI> T3(EH-EP)
C      XGRCORR2 - (P+Q123)EXP(T12)(1+T3)|PHI> T3(FH-FP)
C      XGRCORR3 - (P+Q123)EXP(T12)(1+T3)|PHI> T3(12BODY)
C      XGRCORR4 - (P+Q12)EXP(T12)+T3|PHI> T3(ALL)
C      XGRCORR5 - (P+Q12)EXP(T12)+T3|PHI> T3(12BODY)
C      XGRCORR6 - (P+Q12)EXP(T12)+T3|PHI> T3(EH-EP)
C      XGRCORR7 - (P+Q12)EXP(T12)+T3|PHI> T3(FH-FP)
C
      COMMON /EOMTRP/ DI1(10),DI2(10),DI3(10),DI4(10),DI5(10),DI6(10),
     *                ENESD(10),XNUM(10),XDENOM(10),R0(10),
     *                XM1(10),XM2(10),XM3(10),XD1(10),XD2(10),XD3(10),
     *                YD1(10),YD2(10),YD3(10),YD4(10),XNC3(10),DC3(10),
     *                XGRCORR,XGRCORR1,XGRCORR2,XGRCORR3,XGRCORR4,
     *                XGRCORR5,XGRCORR6,XGRCORR7,CI3GCORR
C
C           /EOMWFE/ IS EOM-CCSD WAVEFUNCTION/ENERGY INFORMATION
C    IT IS SET IN PART IN EOMCC.SRC AND IN PART HERE, AND USED HEREIN.
C
C             100 - TOTAL NO. OF STATES IN ALL IRREPS, OK, SINCE WE
C                   LIMIT OURSELVES TO 8 IRREPS WITH 10 STATES EACH,
C                   WHICH EXPLAINS THE 80 IN THE SORTING CALLS.
C          EOMSDE - TABLE OF EOM-CCSD EXCITATION ENERGIES
C           EOMR0 - GROUND STATE AMPLITUDE (R0) IN EACH EOM-CCSD STATE
C          EOMR0L - SAME THING IN LEFT EIGENSTATE
C          XDELWB - UNKNOWN
C          XKKEOM - UNKNOWN
C        CRXXXXXX - RESULTS OF VARIOUS TRIPLES TERMS
C          KVGEOM - 0 FOR UNCONVERGED, 1 FOR CONVERGED EOM-CCSD STATES
C            IUST - INDEXES A SORTING PERMUTATION
C            IREL - FIRST INUMEOM ENTRIES SHOULD BE READ AS:
C  IREL(I)=J THE CLOSEST CISD VECTOR FOR I-TH EOMCCSD IS THE J-TH CISD.
C  IREL(J)=0 MEANS NO CISD HAS BEEN ATTRIBUTED TO A GIVEN J-TH EOMSD.
C  KKTRIM,KKTRIML - UNKNOWN
C         INUMEOM - NUMBER OF CONVERGED AND DISTINCT EOM-CCSD STATES,
C                   NAMELY IT DOES NOT INCLUDE THE GROUND STATE.
C         NTOTEOM - INPUT REQUESTED NUMBER OF EOM-CCSD STATES
C         NBADEOM - NUMBER OF EOM-CCSD STATES THAT ARE UNCONVERGED
C        NTOTCISD - NUMBER OF CISD STATES SOUGHT, NTOTEOM + 1 FOR G.S.
C        NCVGCISD - NUMBER OF CONVERGED CISD STATES FOUND
C         IVSYMAD - NUMBER OF EOM EXITED STATES REQUESTED, PLUS ONE MORE
C                   IN THE TOTALLY SYMMETRIC IRREP (THE GROUND STATE)
C          VECREP - STATE SYMMETRIES (CHARACTER*3 TYPE!)
C
      COMMON /EOMWFE/ EOMSDE(100),EOMR0(100),EOMR0L(100),
     *                CR1D1A(100),CR2D1A(100),CR1D1B(100),CR2D1B(100),
     *                CRCI3(100),XDELWB(100),XKKEOM(100),
     *                CR1A(100),CR1B(100),CR1C(100),CR1D(100),CR2A(100),
     *                CR2B(100),CR2C(100),CR2D(100),CREX3(100),
     *                KVGEOM(100),IUST(100),IREL(100),
     *                KKTRIM(100),KKTRIML(100),
     *                INUMEOM,NTOTEOM,NBADEOM,NTOTCISD,NCVGCISD,LAMCON,
     *                IVSYMAD(8),VECREP(100)
      COMMON /FMCOM / XX(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,NFTJK,NFTJKT,IDAF,NAV,IODA(950)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /CCNEWL/ METHL
C
      IF (METHL.EQ.1) THEN
         WRITE(IW,9011)
      ELSE
         WRITE(IW,9010)
      ENDIF
C
      NO    = NCCOCC-NCCFZC
      NU    = NCCTOT-NCCFZV-NCCOCC
      NOA   = NOACT
      NUA   = NUACT
C
      IF((MTHINIT.EQ.1)  .AND.  (NUA.GT.NU  .OR.  NOA.GT.NO)) THEN
         WRITE(IW,9050) NOA,NUA,NO,NU
         CALL ABRT
      END IF
 9050 FORMAT(1X,'PLEASE CHECK "ACTIVE SPACE": NOA,NUA=',2I5,
     *          ' NO,NU=',2I5)
C
      NOU   = NO*NU
      NO2U2 = NO*NO*NU*NU
C
      NROOT = 0
      DO I=1,8
         NROOT = NROOT + NSTEOM(I)
      ENDDO
      INISTART = MTHINIT
      IHSPACE  = MICEOM
      ISPACE   = MTHEOM
      MAXITEOM = MAXEOM
      IF(IHSPACE.EQ.0) IHSPACE=MAXITEOM
C
      ICIMET   = MTHCI
      JCISPACE = MICCI
      IOPTMM   = MTHTRIP
C
C  R0-ZEROING
C
       DO I=1,10
          XNUM(I)=0.0D+00
          R0(I)=0.0D+00
          ENESD(I)=0.0D+00
          DI1(I)=0.0D+00
          DI2(I)=0.0D+00
          DI3(I)=0.0D+00
          DI4(I)=0.0D+00
          DI5(I)=0.0D+00
          DI6(I)=0.0D+00
          XM1(I)=0.0D+00
          XM2(I)=0.0D+00
          XM3(I)=0.0D+00
          XD1(I)=0.0D+00
          XD2(I)=0.0D+00
          XD3(I)=0.0D+00
          YD1(I)=0.0D+00
          YD2(I)=0.0D+00
          YD3(I)=0.0D+00
          YD4(I)=0.0D+00
          XNC3(I)=0.0D+00
          DC3(I)=0.0D+00
      ENDDO
C
C          OPEN FILES FOR CI STATES
C
      JCISD=   92
      JCISDNX= 93
      KCIF=    94
C
CCCX      LNU3=NU3
      LCISD=(1+NOU+NO2U2)
C
      CALL CCOPEN(JCISD  ,LCISD ,'MMCIVEC')
      CALL CCOPEN(JCISDNX,LCISD ,'MMCIVC1')
      CALL CCOPEN(KCIF   ,LCISD ,'MMCIITR')
C
C          OPEN THE OTHER FILES FOR MM(2,3)
C
      NEXM=   95
      NEXE=   96
      NREXM=  97
      NREXE=  98
C
CCCX      LNU3 = NU3
CCCX      LVM = NO3U
C
C FILES FOR INTERMEDIATES
C
C 27/05/2004 LEFT EOMSD ------------------ FILES'S NUMBER REDUCTION
CCCX      CALL CCOPEN(NEXM ,LVM   ,'MMNEXM')
CCCX      CALL CCOPEN(NEXE ,LNU3  ,'MMNEXE')
CCCX      CALL CCOPEN(NREXM,LVM   ,'MMNREXM')
CCCX      CALL CCOPEN(NREXE,LNU3  ,'MMNREXE')
C ----------------------------------------
C
C        OBTAIN OCCUPIED AND VIRTUAL EIGENVALUES
C
      CALL VALFM(LOADFM)
      LEH  = LOADFM + 1
      LEP  = LEH    + NO
      LAST = LEP    + NU
      NDEIG= LAST-LOADFM-1
      CALL GETFM(NDEIG)
C
      LWRK = LAST
      LAST = LWRK + NUM
      NEED = NUM
      CALL GETFM(NEED)
      CALL EOMEIG(XX(LEH),XX(LEP),XX(LAST),NUM,NO,NU,NCCFZC)
      CALL RETFM(NEED)
C
      IF(IOPTMM.GT.1) THEN
         CALL DRDIAGH(IW,EXETYP,INISTART,MAXCI,CVGCI,ESCF,NO,NU,
     *                XX(LEH),XX(LEP))
      END IF
C
C        GENERATE AND PRINT CISD-EOMCCSD VECTORS DIAGNOSTIC
C
      CALL DREOMCI(IW,EXETYP,NO,NU)
C
C        MAIN LOOP, START AT 0 TO DO GROUND STATE, TOO
C
      ISY=0
      BEST = 0.0D+00
      WRITE(IW,9020) INUMEOM+1
      DO 500 I=0,INUMEOM
C
         II = I
         WRITE(IW,9030) II
C
        DO IIL=1,2
         XNUM(IIL)=0.0D+00
         R0(IIL)=0.0D+00
         XDENOM(IIL)=0.0D+00
         DI1(IIL)=0.0D+00
         DI2(IIL)=0.0D+00
         DI3(IIL)=0.0D+00
         DI4(IIL)=0.0D+00
         DI5(IIL)=0.0D+00
         DI6(IIL)=0.0D+00
         XM1(IIL)=0.0D+00
         XM2(IIL)=0.0D+00
         XM3(IIL)=0.0D+00
         XD1(IIL)=0.0D+00
         XD2(IIL)=0.0D+00
         XD3(IIL)=0.0D+00
         XNC3(IIL)=0.0D+00
         DC3(IIL)=0.0D+00
        ENDDO
C
         CALL TSECND(T0)
         CALL DRINITR12(EXETYP,II,NO,NU)
         CALL DRXINTRI(IW,EXETYP,II,NO,NU)
         CALL DRXT3WT2_CIM(IW,ESCF,ECCSD,BEST,EXETYP,
     *                 II,NO,NU,XX(LEH),XX(LEP))
C
         IF(II.EQ.0) THEN
            IF(IROOTCC(2).EQ.0) BESTEOM=BEST
         ELSE
            IF(VECREP(IUST(II)).EQ.REP(IROOTCC(1))) THEN
               ISY=ISY+1
               IF(IROOTCC(2).EQ.ISY) BESTEOM=BEST
            END IF
         END IF
C
         CALL TSECND(T1)
         WRITE(IW,9040) T1-T0
  500 CONTINUE
C
C         PRINT RESULTS FOR THE MMCC(2,3) EXCITATION ENRGIES
C
      CALL WRITEEX(IW,IOPTMM)
      CALL WRITEEXL(IW)
      CALL WRITEEX1(IW,IOPTMM)
      CALL RETFM(NDEIG)
C
C        FOR FMO RUNS, CLEAR THE SLATE FOR NEXT FMO STEP
C
      IF(NFG.GT.0) THEN
         CALL CCCLOS(JCISD  ,'DELETE')
         CALL CCCLOS(JCISDNX,'DELETE')
         CALL CCCLOS(KCIF   ,'DELETE')
      END IF
      RETURN
C
 9010 FORMAT(/1X,35(1H-),5X,30(1H-)/
     *        1X,'MMCC(2,3) METHOD OF MOMENTS PROGRAM',5X,
     *           'K.KOWALSKI, M.WLOCH, P.PIECUCH'/
     *        1X,35(1H-),5X,30(1H-))
 9011 FORMAT(/1X,18(1H-),5X,19(1H-)/
     *        1X,'CR-CC(2,3) PROGRAM',5X,
     *           'M. WLOCH, P.PIECUCH'/
     *        1X,18(1H-),5X,19(1H-))
 9020 FORMAT(/1X,'A TOTAL OF',I3,' STATES WILL BE TRIPLES CORRECTED')
 9030 FORMAT(/1X,'BEGINNING TRIPLES CORRECTION FOR STATE',I3)
 9040 FORMAT(1X,'CPU TIME FOR TRIPLES CORRECTION FOR THIS STATE=',F10.1)
      END
C
C
C       THIS WAS T3WT2.F SOURCE FILE, USED IN MM(2,3) PROGRAM
C
C*MODULE MM23     *DECK DRXT3WT2_CIM
      SUBROUTINE DRXT3WT2_CIM(IW,ESCF,ECCSD,BESTEOM,EXETYP,IXY,
     *           NO,NU,EH,EP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*3 VECREP
C
      PARAMETER (MXAO=8192)
C
      DIMENSION EH(NO),EP(NU)
C
      COMMON /CCFILE/ INTG,NT1,NT2,NT3,NVM,NVE,NFRLE,NRESF,NRESL
      COMMON /FMCOM / XX(1)
      COMMON /EOMFIL/ NSTAR,NC1,NC2,NHC1,NHC2,NHH,NPP,NAX,NAXX,NDIAG,
     *                ITAPP,IFAX,NRR1,NRR2,NEXM,NEXE,NW2C,NW4C,
     *                NW4D,NW2BD,NW4B,NROO,NREXM,NREXE,
     *                JCISD,KCIF,JCISDNX
      COMMON /EOMINF/ ISPACE,IHSPACE,JCISPACE,ICIMET,IOPTMM,
     *                NROOT,NOA,NUA,MAXITEOM
      COMMON /EOMWFE/ EOMSDE(100),EOMR0(100),EOMR0L(100),
     *                CR1D1A(100),CR2D1A(100),CR1D1B(100),CR2D1B(100),
     *                CRCI3(100),XDELWB(100),XKKEOM(100),
     *                CR1A(100),CR1B(100),CR1C(100),CR1D(100),CR2A(100),
     *                CR2B(100),CR2C(100),CR2D(100),CREX3(100),
     *                KVGEOM(100),IUST(100),IREL(100),
     *                KKTRIM(100),KKTRIML(100),
     *                INUMEOM,NTOTEOM,NBADEOM,NTOTCISD,NCVGCISD,LAMCON,
     *                IVSYMAD(8),VECREP(100)
      COMMON /EOMPAR/ CVGCI,CVGEOM,GRPEOM,NSTEOM(8),NOACT,NUACT,
     *                MOACTCC(MXAO),MTHTRIP,MTHCI,MTHEOM,MTHINIT,
     *                MAXCI,MAXEOM,MICCI,MICEOM,IROOTCC(2),
     *                IPROPCC,IPROPCCE
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
C
      DATA ONE/1.0D+00/
      DATA CHECK/8HCHECK   /
C
      NO2   = NO*NO
      NU2   = NU*NU
      NU3   = NU*NU*NU
      NOU   = NO*NU
      NO2U  = NO*NO*NU
      NO3U  = NO*NO*NO*NU
      NOU2  = NO*NU*NU
      NOU3  = NO*NU*NU*NU
      NO2U2 = NO*NO*NU*NU
      NC = NCA  !-CIM-
      NU3s = NU*(NU+1)*(NU+2)/6  !-CIM-
      NCU3s= NC*NU3s  !-CIM-
C
      CALL GOTFM(NGOTMX)
      CALL VALFM(LOADFM)
C
C     ---- THIS IS METHOD 1 ----
C
      IF(IOPTMM.EQ.1) THEN
C
      I1   = LOADFM + 1
      I2   = I1     + NOU
      I3   = I2     + NO2U2
      I4   = I3     + NOU
      LAST = I4     + NO2U2
      NEED = LAST - LOADFM - 1
C
      WRITE(IW,9010) '  DEN12CR',NEED,IOPTMM
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 100
C
      CALL FLSHBF(IW)
      CALL ZEROMA(XX(I1),1,NEED)
      CALL DEN12CR(NO,NU,XX(I1),XX(I2),XX(I3),XX(I4))
C
  100 CONTINUE
      CALL RETFM(NEED)
      END IF
C
C     ---- THIS IS COMBINED SETUP FOR METHOD 2,3,4 ----
C     METHOD 1 DOES NOT PERFORM THE CI-SD, AND SO IS DIFFERENT
C
      IF(IOPTMM.GT.1) THEN
C
      I1   = LOADFM + 1
      I2   = I1     + NOU
      I3   = I2     + NO2U2
      I4   = I3     + NOU
      I5   = I4     + NO2U2
      I6   = I5     + 1
      I7   = I6     + NOU
      LAST = I7     + NO2U2
      NEED = LAST - LOADFM - 1
C
      WRITE(IW,9010) '   DEN12N',NEED,IOPTMM
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 200
C
      CALL ZEROMA(XX(I1),1,NEED)
C
      IF(IXY.EQ.0) THEN
         ICIREC=1
      ELSE
         ICIREC=IREL(IXY)
      END IF
      IF(ICIREC.NE.0) THEN
         CALL RCCFL(JCISD,ICIREC,1+NOU+NO2U2,XX(I5))
      ELSE
C--      WRITE(IW,9030)
      END IF
C
      CALL FLSHBF(IW)
      CALL DEN12N(NO,NU,XX(I1),XX(I2),XX(I3),XX(I4),XX(I5),
     *            XX(I6),XX(I7))
C
  200 CONTINUE
      CALL RETFM(NEED)
      END IF
C
C     ---- THIS IS METHOD 2 ----
C     NAMELY, CR-CCSD(T) + CI3
C
      IF(IOPTMM.EQ.2) THEN
C
      I1   = LOADFM + 1
      I2   = I1     + NOU
      I3   = I2     + NO2U2
      I4   = I3     + NO3U
      I5   = I4     + NOU3
      I6   = I5     + NU3
      I7   = I6     + NU3
      I8   = I7     + NO2U2
      I9   = I8     + NOU
      I10  = I9     + NO2U2
      I11  = I10    + NO2U2
      I12  = I11    + NOU3
      I13  = I12    + NO3U
      I14  = I13    + NO2U2
      I15  = I14    + NU3
      I16  = I15    + NO
      I17  = I16    + NU
      I18  = I17    + 2*NU2
      I19  = I18    + 2*NO2
      I20  = I19    + 2*NOU
      I21  = I20    + 2*NOU2
      I22  = I21    + 2*NO2U
      I23  = I22    + NO3U
      I24  = I23    + NOU3
      I25  = I24    + 2*NU2
      I26  = I25    + 2*NO2
      I27  = I26    + 2*NOU
      LAST = I27    + NOU
      NEED = LAST - LOADFM - 1
C
      WRITE(IW,9010) ' XT3WT2N',NEED,IOPTMM
      IF(NEED.GT.NGOTMX) THEN
        WRITE(IW,9020)
        IOPTMM=4
        GO TO 4554
      END IF
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 300
C
      CALL ZEROMA(XX(I1),1,NEED)
      IF(IXY.EQ.0) THEN
         ICIREC=1
      ELSE
         ICIREC=IREL(IXY)
      END IF
      IF(ICIREC.NE.0) THEN
         CALL RCCFL(JCISD,ICIREC,1+NOU+NO2U2,XX(I1))
         CALL WCCFL(NT2,7,NO2U2,XX(I1+NOU+1))
         CALL VOOCPX(NOU,XX(I27),XX(I1+1),ONE)
      ELSE
         WRITE(IW,9030)
      END IF
C
      CALL FLSHBF(IW)
      CALL XT3WT2N(ESCF,ECCSD,BESTEOM,NO,NU,
     *             XX(I1),XX(I2),XX(I3),XX(I4),XX(I5),XX(I6),
     *             XX(I7),XX(I8),XX(I9),XX(I10),XX(I11),XX(I12),
     *             XX(I13),XX(I14),XX(I15),XX(I16),XX(I17),XX(I18),
     *             XX(I19),XX(I20),XX(I21),XX(I22),XX(I23),XX(I24),
     *             XX(I25),XX(I26),XX(I27),EH,EP,IXY)
C
  300 CONTINUE
      CALL RETFM(NEED)
      END IF
C
C     ---- THIS IS METHOD 4, AND ALSO METHOD 1 AGAIN  ----
C     NAMELY, CR-CCSD(T) - LOW MEMORY
C
 4554 CONTINUE
      IF(IOPTMM.EQ.1.OR.IOPTMM.EQ.4) THEN
      I1   = LOADFM + 1
      I2   = I1     + NOU
      I3   = I2     + NO2U2
      I4   = I3     + NO3U
      I5   = I4     + NOU3
      I7   = I5     + NU3
      I8   = I7     + NOU
      I9   = I8     + NO2U2
      I10  = I9     + NOU3
      I11  = I10    + NO3U
      I12  = I11    + NO2U2
      I13  = I12    + NU3
      I14  = I13    + NO
      I15  = I14    + NU
      I16  = I15    + 2*NU2
      I17  = I16    + 2*NO2
      I18  = I17    + 2*NOU
      I19  = I18    + 2*NOU2
      I20  = I19    + 2*NO2U
      I21  = I20    + NOU
      I22  = I21    + NO2U2
      I23  = I22    + NU3
      I24  = I23    + NOU3
      I26  = I24    + NO3U
      I27  = I26    + NOU
C
      IF(IPROPCCE.EQ.1) THEN
         I28  = I27    + NO2U2
         I29  = I28    + (NO2U2+NOU)
         LAST = I29    + (NO2U2+NOU)
      ELSE
         I29  = I27    + NO2U2    !-CIM-
         I30  = I29    + NO*2     !-CIM- ECIM  09 MAR 10 NO --> NO*2
         I31  = I30    + NO2      !-CIM- TX
         I32  = I31    + NU3*NC   !-CIM- XV3
         I33  = I32    + NCU3s*20 !-CIM- XBL
         LAST = I33    + NC       !-CIM- TXs
      END IF
C
      NEED = LAST - LOADFM - 1
C
      WRITE(IW,9010) 'XT3WT2NNN',NEED,IOPTMM
      WRITE(ICIF,9010) 'XT3WT2NNN',NEED,IOPTMM
      CALL FLSHBF(ICIF)
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 400
C
      CALL FLSHBF(IW)
      CALL ZEROMA(XX(I1),1,NEED)
        IF(IPROPCCE.EQ.1) THEN
      CALL XT3WT2NNNL(ESCF,ECCSD,BESTEOM,NO,NU,
     *               XX(I1),XX(I2),XX(I3),XX(I4),XX(I5),XX(I7),
     *               XX(I8),XX(I9),XX(I10),XX(I11),XX(I12),XX(I13),
     *               XX(I14),XX(I15),XX(I16),XX(I17),XX(I18),XX(I19),
     *               XX(I20),XX(I21),XX(I22),XX(I23),XX(I24),
     *               XX(I26),XX(I27),XX(I28),XX(I29),EH,EP,IXY)
        ELSE
           CALL XT3WT2NNN_CIM(ESCF,ECCSD,BESTEOM,NO,NU,NU3s,
     *            XX(I1),XX(I2),XX(I3),XX(I4),XX(I5),XX(I7),
     *            XX(I8),XX(I9),XX(I10),XX(I11),XX(I12),XX(I13),
     *            XX(I14),XX(I15),XX(I16),XX(I17),XX(I18),XX(I19),
     *            XX(I20),XX(I21),XX(I22),XX(I23),XX(I24),
     *            XX(I26),XX(I27),
     *            XX(I29),XX(I30),XX(I31),XX(I32),XX(I33),
     *            NC,EH,EP,IXY)
        END IF
C
  400 CONTINUE
      CALL RETFM(NEED)
      END IF
C
C     ---- THIS IS METHOD 3, AND METHOD 4 AGAIN ----
C     NAMELY, CI3 - LOW MEMORY
C
      IF(IOPTMM.EQ.3.OR.IOPTMM.EQ.4) THEN
      I1   = LOADFM + 1
      I2   = I1     + NOU
      I3   = I2     + NO2U2
      I4   = I3     + NO3U
      I5   = I4     + NOU3
      I6   = I5     + NU3
      I7   = I6     + NU3
      I8   = I7     + NO2U2
      I9   = I8     + NOU
      I10  = I9     + NO2U2
      I11  = I10    + NO2U2
      I12  = I11    + NO2U2
      I13  = I12    + NU3
      I14  = I13    + NO
      I15  = I14    + NU
      I16  = I15    + 2*NU2
      I17  = I16    + 2*NO2
      I18  = I17    + 2*NOU
      I19  = I18    + 2*NOU2
      I20  = I19    + 2*NO2U
      I21  = I20    + NO3U
      I22  = I21    + NOU3
      I23  = I22    + 2*NU2
      I24  = I23    + 2*NO2
      I25  = I24    + 2*NOU
      LAST = I25    + NOU
      NEED = LAST - LOADFM - 1
C
      WRITE(IW,9010) ' XT3WT2NN',NEED,IOPTMM
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 500
C
      CALL ZEROMA(XX(I1),1,NEED)
      IF(IXY.EQ.0) THEN
         ICIREC=1
      ELSE
         ICIREC=IREL(IXY)
      END IF
      IF(ICIREC.NE.0) THEN
         CALL RCCFL(JCISD,ICIREC,1+NOU+NO2U2,XX(I1))
         CALL WCCFL(NT2,7,NO2U2,XX(I1+NOU+1))
         CALL VOOCPX(NOU,XX(I25),XX(I1+1),ONE)
      ELSE
         WRITE(IW,9030)
      END IF
      CALL FLSHBF(IW)
C
      CALL XT3WT2NN(ESCF,ECCSD,BESTEOM,NO,NU,
     *              XX(I1),XX(I2),XX(I3),XX(I4),XX(I5),XX(I6),
     *              XX(I7),XX(I8),XX(I9),XX(I10),XX(I11),XX(I12),
     *              XX(I13),XX(I14),XX(I15),XX(I16),XX(I17),XX(I18),
     *              XX(I19),XX(I20),XX(I21),XX(I22),XX(I23),XX(I24),
     *              XX(I25),EH,EP,IXY)
C
  500 CONTINUE
      CALL RETFM(NEED)
      END IF
C
      RETURN
C
 9010 FORMAT(1X,'MEMORY REQUIRED FOR ',A9,'=',I12,' MTRIP=',I2)
 9020 FORMAT(1X,'       THE AVAILABLE MEMORY=',I12/
     *       1X,'THE PROGRAM WILL TRY USING MTHTRIP=4 CODE INSTEAD')
 9030 FORMAT(1X,'NO CISD ROOT HAS BEEN FOUND TO DESCRIBE',
     *          ' THE GIVEN EOMSD ROOT')
      END
C
C*MODULE MM23    *DECK XT3WT2NNN_CIM
      SUBROUTINE XT3WT2NNN_CIM(ESCF,ECCSD,BESTEOM,NO,NU,NU3s,
     *                     O1,T2,VM,VE,V3,
     *                     R1,R2,EXVE,EXVM,AUXR2,U3,AH,AP,APP,AHH,AHP,
     *                     AX,BX,VL1,VL2,VL3,VE2,VM2,FHP,VOE,
     *                     ECIM,TX,XV3,XBL,TXs,NC,
     *                     EH,EP,IXY)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER CRL
C
      PARAMETER (MXAO=8192)  !-CIM-
C
      CHARACTER*3 VECREP
C
      DIMENSION O1(*),T2(NU,NU,NO,NO),VM(NO,NU,NO,NO),V3(*),
     *          VE(NU,NU,NU,NO),EH(NO),EP(NU),
     *          EXVE(NU,NU,NU,NO),EXVM(NO,NU,NO,NO),
     *          R1(*),R2(NU,NU,NO,NO),FHP(NU,NO),
     *          AUXR2(NO,NU,NU,NO),U3(NU,NU,NU),
     *          AH(NO),AP(NU),VE2(NU,NU,NU,NO),
     *          AHH(NO,NO,2),AHP(NO,NU,2),APP(NU,NU,2),
     *          AX(NU,NU,NO,2),BX(NU,NO,NO,2),
     *          VL1(NU,NO),VL2(NU,NU,NO,NO),
     *          VL3(NU,NU,NU),VM2(NO,NU,NO,NO),
     *          VOE(NU,NU,NO,NO)
      DIMENSION ECIM(NO*2),TX(NO,NO),XV3(NC,NU,NU,NU),  !-CIM-
     *          XBL(0:19,NC,NU3s),TXs(NC)  !-CIM-
C
      COMMON /EOMFIL/ NSTAR,NC1,NC2,NHC1,NHC2,NHH,NPP,NAX,NAXX,NDIAG,
     *                ITAPP,IFAX,NRR1,NRR2,NEXM,NEXE,NW2C,NW4C,
     *                NW4D,NW2BD,NW4B,NROO,NREXM,NREXE,
     *                JCISD,KCIF,JCISDNX
      COMMON /EOMTRP/ DI1(10),DI2(10),DI3(10),DI4(10),DI5(10),DI6(10),
     *                ENESD(10),XNUM(10),XDENOM(10),R0(10),
     *                XM1(10),XM2(10),XM3(10),XD1(10),XD2(10),XD3(10),
     *                YD1(10),YD2(10),YD3(10),YD4(10),XNC3(10),DC3(10),
     *                XGRCORR,XGRCORR1,XGRCORR2,XGRCORR3,XGRCORR4,
     *                XGRCORR5,XGRCORR6,XGRCORR7,CI3GCORR
      COMMON /EOMWFE/ EOMSDE(100),EOMR0(100),EOMR0L(100),
     *                CR1D1A(100),CR2D1A(100),CR1D1B(100),CR2D1B(100),
     *                CRCI3(100),XDELWB(100),XKKEOM(100),
     *                CR1A(100),CR1B(100),CR1C(100),CR1D(100),CR2A(100),
     *                CR2B(100),CR2C(100),CR2D(100),CREX3(100),
     *                KVGEOM(100),IUST(100),IREL(100),
     *                KKTRIM(100),KKTRIML(100),
     *                INUMEOM,NTOTEOM,NBADEOM,NTOTCISD,NCVGCISD,LAMCON,
     *                IVSYMAD(8),VECREP(100)
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)  !-CIM-
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /CIMIDX/ MOCEN(MXAO),ICENA(MXAO),ICENB(MXAO)  !-CIM- 2010.03.01  MO Cent
      EXTERNAL DSUM !-CIM-
C
      DATA ZERO/0.0D+00/, ONE/1.0D+00/, OM/-1.0D+00/
CC    DATA HALF/0.5D+00/
      DATA THREE/3.0D+00/ !-CIM-
      DATA CRCCL/8HCR-CCL  /
      DATA CREOML/8HCR-EOML /
C
      NO2   = NO*NO
      NU2   = NU*NU
      NU3   = NU*NU*NU
      NOU   = NO*NU
      NO2U  = NO*NO*NU
      NOU2  = NO*NU*NU
      NO2U2 = NO*NO*NU*NU
      TOLPR = 0.1D+00
C
      NCU3 = NC*NU3            !-CIM- 2007/12/20
      NCU3s= NC*NU3s  !-CIM-
      CALL VCLR(ECIM,1,NO*2)   !-CIM- 2007/12/20
      CALL DAREAD(IDAF,IODA,TX(1,1),NO2,359,0)  !-CIM- TXA is VECTOR FROM Alpha CMO TO LMO
      call iwrit(IW, '$ICEN-A', NC, ICENA(1))   ! CenMO 2.0 - double occupied; 1.0 - single occupied
C
C ZEROWANIE
C
      CALL ZEROMA(V3,1,NU3)
      CALL ZEROMA(VL3,1,NU3)
      CALL ZEROMA(T2,1,NO2U2)
      CALL ZEROMA(EXVM,1,NO2U2)
C
      CALL RCCFL(ITAPP,1,NO,AH)
      CALL RCCFL(ITAPP,2,NU,AP)
      CALL RCCFL(ITAPP,3,2*NU2,APP)
      CALL RCCFL(ITAPP,4,2*NO2,AHH)
      CALL RCCFL(ITAPP,5,2*NOU,AHP)
      CALL RCCFL(IFAX,1,2*NOU2,AX)
      CALL RCCFL(IFAX,2,2*NO2U,BX)
C
      CALL RDVE(1,NO,NU,VE2)
      CALL TRANMD(VE2,NU,NU,NU,NO,23)
      CALL RDVE(3,NO,NU,VE)
      CALL TRANMD(VE,NU,NU,NU,NO,23)
      CALL RDVM(3,NO,NU,T2)
      CALL VMCP1(NO,NU,VM,T2)
      CALL TRANMD(VM,NO,NU,NO,NO,13)
      CALL RDVM(1,NO,NU,T2)
      CALL VMCP1(NO,NU,VM2,T2)
      CALL TRANMD(VM2,NO,NU,NO,NO,13)
C
C MAIN LOOP OVER ALL EXCITED STATES
C
      II=1
      IIL=2
      CRL=0
      IF(CCTYP.EQ.CRCCL) CRL=1
C
      IF(CRL.EQ.1) THEN
        WRITE(6,*)'LAMBDA CORRECTION FOR ROOT NO.',IXY
        IF(IXY.EQ.0) THEN
          CALL RO1(5,NO,NU,VL1)
          CALL RO2(8,NO,NU,VL2)
        END IF
C
        CALL INSITU(NO,NU,NU,NO,V3,VL2,13)
        CALL TRT1(NO,NU,V3,VL1)
C       CALL VECMUL(VL1,NOU,HALF)
C
C         AMPLITUDE PRINTING...
C
        WRITE(6,9030)
C
      DO 560 IIIA=1,NU
       DO 561 IIII=1,NO
        XXX=ABS(VL1(IIIA,IIII))
        IF(XXX.GT.TOLPR) THEN
         WRITE(6,9040) VL1(IIIA,IIII),IIII,IIIA+NO
        END IF
  561  CONTINUE
  560 CONTINUE
C
      DO 570,JJJ=1,NU
       DO 571,JJB=1,NU
        DO 572,IIA=1,NO
         DO 573,III=1,NO
          XXX=ABS(VL2(JJJ,JJB,IIA,III))
          IF(XXX.GT.TOLPR) THEN
            WRITE(6,9050) VL2(JJJ,JJB,IIA,III),III,IIA,JJJ+NO,JJB+NO
          END IF
  573    CONTINUE
  572   CONTINUE
  571  CONTINUE
  570 CONTINUE
C
 9030 FORMAT(1X,'THE LARGEST L1 AND L2 AMPLITUDES FOR THIS ROOT ARE')!!!
 9040 FORMAT(1X,'L1=',F15.10,' FOR   I -> A   =',2I5)!!!
 9050 FORMAT(1X,'L2=',F15.10,' FOR I,J -> A,B =',4I5)!!!
C
      CALL FLSHBF(6)
      END IF  ! CLOSE OF CR-CCL COMPUTATION
C
C
C ON R2 VECTOR WE KEEP R2(EOMCCSD)+R_0(EOMCCSD)*T2
C      CALL VECMUL(VL1,NOU,HALF)
      CALL RR1(NO,NU,R1)
      CALL RR2(NO,NU,R2)
      CALL RR2(NO,NU,AUXR2)
      CALL INSITU(NO,NU,NU,NO,V3,R2,13)
      CALL RO2(1,NO,NU,T2)
      CALL RO1(1,NO,NU,O1)
      CALL RO1(3,NO,NU,FHP)
      CALL TRT1(NO,NU,V3,FHP)
CC      CALL VECMUL(FHP,NOU,HALF)
      CALL INSITU(NO,NU,NU,NO,V3,T2,13)
      CALL VECMUL(T2,NO2U2,R0(II))
      CALL VECADD(R2,T2,NO2U2)
C      CALL RO2(2,NO,NU,VOE)
      CALL RO2HPP(1,NO,NU,V3,VOE)
      CALL INSITU(NO,NU,NU,NO,V3,VOE,13)
C
C
C
C 27/05/2004 LEFT EOMSD ------------------ FILES'S NUMBER REDUCTION
      CALL REXXVE(5,NO,NU,EXVE)
C ----------------------------------------
      CALL TRANMD(EXVE,NU,NU,NU,NO,23)
C
      CALL ZEROMA(T2,1,NO2U2)
C 27/05/2004 LEFT EOMSD ------------------ FILES'S NUMBER REDUCTION
      CALL REXXVM(5,NO,NU,T2)
C ----------------------------------------
      CALL VMCP1(NO,NU,EXVM,T2)
      CALL TRANMD(EXVM,NO,NU,NO,NO,13)
CC
      CALL RO2(1,NO,NU,T2)
      CALL INSITU(NO,NU,NU,NO,V3,T2,13)
CC
CC
CC MOMENTS(R,I)*T2 (T2 COMBINED WITH EXVM OR EXVE)
CC AND
CC MOMENTS(T)*(R2+R_0*T2) (COMBINED WITH VM OR VE)
CC
CC
CC COMMENTED BY KK
C
C --- FOR TIME TRACKING BY -WL,PP-
C
      NIJK = NO*(NO+1)/2
      NNNN = 0
      NPER0= 0
      NSTEP= 10
      CALL TSECND(T0)
      WRITE(IW,'(A)')
C
      DO 351 I=1,NO
         I1=I        !-CIM- I-1 --> I
      DO 451 J=1,I1  !-CIM- 351 --> 451
C        J1=J        !-CIM- J-1 --> J
C
      CALL VCLR(XV3,1,NCU3)
      CALL VCLR(XBL,1,20*NCU3s)
C     ----- -CIM-
C
      DO 551 K=1,NO  !-CIM- 351 --> 551; J1 --> NO
         IF (I.EQ.J.AND.J.EQ.K) GOTO 551
C              KK=IT3(I,J,K)
C
        IF(CRL.EQ.1) THEN
      CALL CCMATMUL(VL2(1,1,1,I),VM2(1,1,K,J),VL3,NU2,NU,NO,1,1)
      CALL TRANT3(VL3,NU,1)
      CALL CCMATMUL(VL2(1,1,1,I),VM2(1,1,J,K),VL3,NU2,NU,NO,0,1)
      CALL TRANT3(VL3,NU,4)
      CALL CCMATMUL(VL2(1,1,1,J),VM2(1,1,K,I),VL3,NU2,NU,NO,0,1)
      CALL TRANT3(VL3,NU,1)
      CALL CCMATMUL(VL2(1,1,1,J),VM2(1,1,I,K),VL3,NU2,NU,NO,0,1)
      CALL TRANT3(VL3,NU,5)
      CALL CCMATMUL(VL2(1,1,1,K),VM2(1,1,J,I),VL3,NU2,NU,NO,0,1)
      CALL TRANT3(VL3,NU,1)
      CALL CCMATMUL(VL2(1,1,1,K),VM2(1,1,I,J),VL3,NU2,NU,NO,0,1)
      CALL TRANT3(VL3,NU,4)
      CALL CCMATMUL(VL2(1,1,J,I),VE2(1,1,1,K),VL3,NU,NU2,NU,0,0)
      CALL TRANT3(VL3,NU,1)
      CALL CCMATMUL(VL2(1,1,K,I),VE2(1,1,1,J),VL3,NU,NU2,NU,0,0)
      CALL TRANT3(VL3,NU,5)
      CALL CCMATMUL(VL2(1,1,I,J),VE2(1,1,1,K),VL3,NU,NU2,NU,0,0)
      CALL TRANT3(VL3,NU,1)
      CALL CCMATMUL(VL2(1,1,K,J),VE2(1,1,1,I),VL3,NU,NU2,NU,0,0)
      CALL TRANT3(VL3,NU,4)
      CALL CCMATMUL(VL2(1,1,I,K),VE2(1,1,1,J),VL3,NU,NU2,NU,0,0)
      CALL TRANT3(VL3,NU,1)
      CALL CCMATMUL(VL2(1,1,J,K),VE2(1,1,1,I),VL3,NU,NU2,NU,0,0)
      CALL TRANT3(VL3,NU,5)
        END IF
C
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,I),NU2,EXVM(1,1,K,J),NO,
     *ZERO,V3,NU2)
      CALL DGEMM('N','N',NU2,NU,NO,OM,R2(1,1,1,I),NU2,VM(1,1,K,J),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,I),NU2,EXVM(1,1,J,K),NO,
     *ONE,V3,NU2)
      CALL DGEMM('N','N',NU2,NU,NO,OM,R2(1,1,1,I),NU2,VM(1,1,J,K),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,4)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,J),NU2,EXVM(1,1,K,I),NO,
     *ONE,V3,NU2)
      CALL DGEMM('N','N',NU2,NU,NO,OM,R2(1,1,1,J),NU2,VM(1,1,K,I),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,J),NU2,EXVM(1,1,I,K),NO,
     *ONE,V3,NU2)
      CALL DGEMM('N','N',NU2,NU,NO,OM,R2(1,1,1,J),NU2,VM(1,1,I,K),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,5)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,K),NU2,EXVM(1,1,J,I),NO,
     *ONE,V3,NU2)
      CALL DGEMM('N','N',NU2,NU,NO,OM,R2(1,1,1,K),NU2,VM(1,1,J,I),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU2,NU,NO,OM,T2(1,1,1,K),NU2,EXVM(1,1,I,J),NO,
     *ONE,V3,NU2)
      CALL DGEMM('N','N',NU2,NU,NO,OM,R2(1,1,1,K),NU2,VM(1,1,I,J),NO,
     *ONE,V3,NU2)
      CALL TRANT3(V3,NU,4)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,J,I),NU,EXVE(1,1,1,K),NU,
     *ONE,V3,NU)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,R2(1,1,J,I),NU,VE(1,1,1,K),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,K,I),NU,EXVE(1,1,1,J),NU,
     *ONE,V3,NU)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,R2(1,1,K,I),NU,VE(1,1,1,J),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,5)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,I,J),NU,EXVE(1,1,1,K),NU,
     *ONE,V3,NU)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,R2(1,1,I,J),NU,VE(1,1,1,K),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,K,J),NU,EXVE(1,1,1,I),NU,
     *ONE,V3,NU)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,R2(1,1,K,J),NU,VE(1,1,1,I),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,4)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,I,K),NU,EXVE(1,1,1,J),NU,
     *ONE,V3,NU)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,R2(1,1,I,K),NU,VE(1,1,1,J),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,1)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,T2(1,1,J,K),NU,EXVE(1,1,1,I),NU,
     *ONE,V3,NU)
      CALL DGEMM('N','N',NU,NU2,NU,ONE,R2(1,1,J,K),NU,VE(1,1,1,I),NU,
     *ONE,V3,NU)
      CALL TRANT3(V3,NU,5)
      CALL ZEROT3(V3,NU)
C
        IF(CRL.NE.1) THEN
      CALL XT3SQCR(II,I,J,K,NO,NU,O1,T2,R1,AUXR2,V3,U3)
      CALL XT3SQ2CR(II,I,J,K,NO,NU,V3,U3,AH,AP,APP,AHH,AHP,AX,BX,EH,EP)
C
        ELSE
      CALL ZEROT3(VL3,NU)
      CALL XT3SQCRL(II,I,J,K,NO,NU,O1,T2,R1,AUXR2,V3,U3,
     *              FHP,VL2,VL1,VOE,VL3)
      CALL XT3SQ2CRL_CIMX(II,I,J,K,NO,NU,V3,U3,VL3,AH,AP,APP,  !-CIM-
     *               AHH,AHP,AX,BX,EH,EP,NU3s,NC,XV3,XBL,TX,TXs)
        END IF
C
C
 551  CONTINUE
C
      CALL XT3SQ2CRL_CIME(NO,NU,NU3s,NC,XV3,XBL,I,J,ECIM)  !-CIM-
C
C     ----- -CIM-
      NNNN=NNNN+1
      NPER=NSTEP*NNNN/NIJK
      IF (NPER.NE.NPER0) THEN
         CALL TSECND(T1)
         WRITE(6,106) NPER*100/NSTEP,T1-T0
         CALL FLSHBF(6)
         NPER0=NPER
      ENDIF
 106  FORMAT(1X,I3,'% FINISHED  CPU TIME=',F10.1)
C
 451  CONTINUE
 351  CONTINUE
C
      DO 651 K=1,NO*2
         ECIM(K)=ECIM(K)/THREE
 651  CONTINUE
C
      XM1(IIL)  = DSUM(NO,ECIM(NO+1),1)
      XNUM(IIL) = DSUM(NO,ECIM(1),1)
      WRITE(IW,9000)
      WRITE(IW,9110) XM1(IIL)
      WRITE(IW,9100) (ECIM(K),K=NO+1,2*NO)
      WRITE(IW,9140) XNUM(IIL)
      WRITE(IW,9100) (ECIM(K),K=1,NO)
      IF (NC.LT.NO) WRITE(IW,9145)
      call rwrit(ICIF, '$CORR-CCSD(2)_T',  NO, ECIM(NO+1))  !-CIM- 05/22/2009
      call rwrit(ICIF, '$CORR-CR-CC(2,3)', NO, ECIM(1))  !-CIM- 05/22/2009
C
 9000 FORMAT(/10X,20('-'),
     *       /10X,'CIM ENERGIES FOR MOS',
     *       /10X,20('-'))
 9100 FORMAT(5F16.10)
 9110 FORMAT(/1X,'ECORR(LMO-CCSD(2)_T)=        ',30X,F20.10)
 9140 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3))=       ',30X,F20.10)
 9145 FORMAT( 1X,'WARNING: CR-CC(2,3) CORRECTION ARE NOT COMPLETED!')
C
C
C HARTREE-EV CONVERSION FACTOR
C
C****      PRZ=27.21160D+00
C
      IF(IXY.EQ.0) THEN
        WRITE(6,488) ECCSD
        XPOT  = ZERO
        XPOT1 = ZERO
        XPOT2 = ZERO
      ELSE
        WRITE(6,499)  VECREP(IUST(IXY))
        WRITE(6,434)  ECCSD+ENESD(II)
        WRITE(6,1111) ECCSD+ENESD(II)+XM1(II)/XD1(II)
        WRITE(6,1112) ECCSD+ENESD(II)+XM2(II)/XD2(II)
        WRITE(6,1113) ECCSD+ENESD(II)+XM3(II)/XD3(II)
        WRITE(6,1114) ECCSD+ENESD(II)+XNUM(II)/XDENOM(II)
        BESTEOM = ECCSD+ENESD(II)+XNUM(II)/XDENOM(II)
C
        XPOT1=XM1(II)-DI1(II)-DI2(II)-DI3(II)-DI4(II)-DI5(II)
        XPOT2=XM2(II)-DI1(II)-DI2(II)-DI3(II)-DI4(II)-DI5(II)
        XPOT =XM3(II)-DI1(II)-DI2(II)-DI3(II)-DI4(II)-DI5(II)
        WRITE(6,1115) ECCSD+ENESD(II)+XPOT1/YD3(II)
        WRITE(6,1116) ECCSD+ENESD(II)+XPOT2/YD4(II)
        WRITE(6,1117) ECCSD+ENESD(II)+XPOT/YD2(II)
        WRITE(6,1118) ECCSD+ENESD(II)+DI6(II)/YD1(II)
      END IF
C
      CR1D1A(IXY)=ENESD(II)+XNUM(II)/XDENOM(II)-XGRCORR1
      CR2D1A(IXY)=ENESD(II)+DI6(II)/YD1(II)-XGRCORR1
      CR1D1B(IXY)=ENESD(II)+XNUM(II)/XDENOM(II)-XGRCORR2
      CR2D1B(IXY)=ENESD(II)+DI6(II)/YD1(II)-XGRCORR2
C
      CR1A(IXY)=ENESD(II)+XM1(II)/XD1(II)
      CR1B(IXY)=ENESD(II)+XM2(II)/XD2(II)
      CR1C(IXY)=ENESD(II)+XM3(II)/XD3(II)
      CR1D(IXY)=ENESD(II)+XNUM(II)/XDENOM(II)
      CR2A(IXY)=ENESD(II)+XPOT1/YD3(II)
      CR2B(IXY)=ENESD(II)+XPOT2/YD4(II)
      CR2C(IXY)=ENESD(II)+XPOT/YD2(II)
      CR2D(IXY)=ENESD(II)+DI6(II)/YD1(II)
      WRXX=XM1(II)-DI1(II)-DI2(II)-DI3(II)-DI4(II)-DI5(II)
      XDELWB(IXY)=ENESD(II)+WRXX
C
 1111 FORMAT(1X,'CR-EOMCCSD(T)IA  TOTAL ENERGY ',F20.10,' HARTREE')
 1112 FORMAT(1X,'CR-EOMCCSD(T)IB  TOTAL ENERGY ',F20.10,' HARTREE')
 1113 FORMAT(1X,'CR-EOMCCSD(T)IC  TOTAL ENERGY ',F20.10,' HARTREE')
 1114 FORMAT(1X,'CR-EOMCCSD(T)ID  TOTAL ENERGY ',F20.10,' HARTREE')
 1115 FORMAT(1X,'CR-EOMCCSD(T)IIA TOTAL ENERGY ',F20.10,' HARTREE')
 1116 FORMAT(1X,'CR-EOMCCSD(T)IIB TOTAL ENERGY ',F20.10,' HARTREE')
 1117 FORMAT(1X,'CR-EOMCCSD(T)IIC TOTAL ENERGY ',F20.10,' HARTREE')
 1118 FORMAT(1X,'CR-EOMCCSD(T)IID TOTAL ENERGY ',F20.10,' HARTREE')
 434  FORMAT(1X,'TOTAL EOM-CCSD ENERGY         ',F20.10,' HARTREE')
 499  FORMAT(/1X,'SYMMETRY OF THE EXCITED STATE: ',A3)
      IF(IXY.EQ.0) THEN
        XGRCORR=XNUM(II)/XDENOM(II)
        XGRCORR1=XM1(II)/XD1(II)
        XGRCORR2=XM2(II)/XD2(II)
        XGRCORR3=XM3(II)/XD3(II)
        XGRCORR4=DI6(II)/YD1(II)
        XPOT4=XM3(II)-DI1(II)-DI2(II)-DI3(II)-DI4(II)-DI5(II)
        XGRCORR5=XPOT4/YD2(II)
        XPOT1=XM1(II)-DI1(II)-DI2(II)-DI3(II)-DI4(II)-DI5(II)
        XPOT2=XM2(II)-DI1(II)-DI2(II)-DI3(II)-DI4(II)-DI5(II)
        XGRCORR6=XPOT1/YD3(II)
        XGRCORR7=XPOT2/YD4(II)
        IF(CRL.EQ.1) THEN
           WRITE(6,423)
           IF(CCTYP.EQ.CREOML) WRITE(6,2423)
           WRITE(6,420) XM1(IIL),XM1(IIL)+ECCSD
           WRITE(6,421) XM2(IIL),XM2(IIL)+ECCSD
           WRITE(6,422) XM3(IIL),XM3(IIL)+ECCSD
           WRITE(6,419) XNUM(IIL),XNUM(IIL)+ECCSD
           WRITE(6,424)
           BESTEOM = XM1(IIL)+ECCSD
C---           BESTEOM = XNUM(IIL)+ECCSD
        ELSE
           BESTEOM = XGRCORR+ECCSD
        END IF
        WRITE(6,412) XGRCORR1,XGRCORR1+ECCSD
        WRITE(6,413) XGRCORR2,XGRCORR2+ECCSD
        WRITE(6,414) XGRCORR3,XGRCORR3+ECCSD
        WRITE(6,411) XGRCORR,XGRCORR+ECCSD
        WRITE(6,416) XGRCORR6,XGRCORR6+ECCSD
        WRITE(6,417) XGRCORR7,XGRCORR7+ECCSD
        WRITE(6,418) XGRCORR5,XGRCORR5+ECCSD
        WRITE(6,415) XGRCORR4,XGRCORR4+ECCSD
        IF(CRL.EQ.1) THEN
      WRITE(6,425)
      WRITE(6,98)
      WRITE(6,426)     ECCSD,ECCSD-ESCF
      WRITE(6,427)     XM1(IIL)+ECCSD,XM1(IIL)+ECCSD-ESCF
      WRITE(6,428)     XNUM(IIL)+ECCSD,XNUM(IIL)+ECCSD-ESCF
C---      WRITE(6,429)     BESTEOM
        END IF
      END IF
      RETURN
C
 411  FORMAT(1X,'GROUND STATE CR-CCSD(T)ID  CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 412  FORMAT(1X,'GROUND STATE CR-CCSD(T)IA  CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 413  FORMAT(1X,'GROUND STATE CR-CCSD(T)IB  CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 414  FORMAT(1X,'GROUND STATE CR-CCSD(T)IC  CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 415  FORMAT(1X,'GROUND STATE CR-CCSD(T)IID CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 416  FORMAT(1X,'GROUND STATE CR-CCSD(T)IIA CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 417  FORMAT(1X,'GROUND STATE CR-CCSD(T)IIB CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 418  FORMAT(1X,'GROUND STATE CR-CCSD(T)IIC CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 419  FORMAT(1X,'GROUND STATE CR-CC(2,3),D CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 420  FORMAT(1X,'GROUND STATE CR-CC(2,3),A CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 421  FORMAT(1X,'GROUND STATE CR-CC(2,3),B CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 422  FORMAT(1X,'GROUND STATE CR-CC(2,3),C CORRECTION',F10.6,
     *    ', TOTAL E=',F20.10)
 423  FORMAT(/1X,'MAIN RESULTS: CR-CC(2,3) = CR-CC(2,3),D =',
     *           ' CR-CCSD(T)_L CALCULATIONS'/
     *      1X, '[SEE P. PIECUCH AND M. WLOCH, J. CHEM. PHYS.',
     *      ' 123, 224105 (2005);'/
     *      1X,'P. PIECUCH, M. WLOCH, J.R. GOUR, AND A. KINAL',
     *      ', CHEM. PHYS. LETT.'/
     *      1X,'418, 463 (2005)]'/)
 2423 FORMAT(1X,'FOR EXCITED STATES, SEE'/
     *       1X,'P. PIECUCH, J. R. GOUR, AND M. WLOCH,'/
     *       1X,'INT. J. QUANTUM CHEM. 109, 3268-3304 (2009).'/)
 424  FORMAT(/
     * 1X,'CR-CC(2,3),A ENERGY IS IDENTICAL TO THE CCSD(2)_T ENERGY.'/
     * 1X,'CR-CC(2,3),D ENERGY IS IDENTICAL TO COMPLETE CR-CC(2,3)',
     *    ' ENERGY (CR-CCSD(T)_L)'//
     * 1X,'ADDITIONAL RESULTS: GROUND-STATE CR-EOMCCSD(T)',
     *    ' CALCULATIONS'/
     * 1X,'[SEE K. KOWALSKI AND P. PIECUCH, J. CHEM. PHYS.',
     *      ' 120, 1715 (2004)]'/)
  425 FORMAT(/14X,'SUMMARY OF CR-CC(2,3) OR CR-CCSD(T)_L CALCULATIONS')
   98 FORMAT(/1X,'THE MOST ACCURATE ENERGETICS IS PROVIDED BY',
     *           ' CR-CC(2,3) = CR-CC(2,3),D')
  426 FORMAT(/1X,'CCSD                       ENERGY:',F20.10,
     *        '   CORR.E=',F15.10)
  427 FORMAT( 1X,'CR-CC(2,3),A OR CCSD(2)_T  ENERGY:',F20.10,
     *        '   CORR.E=',F15.10)
  428 FORMAT( 1X,'CR-CC(2,3) OR CR-CCSD(T)_L ENERGY:',F20.10,
     *        '   CORR.E=',F15.10)
C---  429 FORMAT(/12X,'CR-CC(2,3) ENERGY FOR DERIVATIVES:',F20.10/
C---     *        12X,'THE TYPE D ENERGY IS USUALLY THE MOST ACCURATE.')
  488 FORMAT(/1X,'GROUND STATE CCSD TOTAL ENERGY=',26X,F20.10)
      END
C
C*MODULE MM23     *DECK XT3SQ2CR
      SUBROUTINE XT3SQ2CRL_NEW(JEX,I,J,K,NO,NU,V3,U3,VL3,
     *                    AH,AP,APP,AHH,AHP,AX,BX,EH,EP)
C
C ### ORDERING I,J,K - REVERSED HERE
C JEX-NUMBER OF EXCITED STATE
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      INTEGER A,B,C
C
      DIMENSION U3(NU,NU,NU),V3(NU,NU,NU),EH(NO),EP(NU),
     *          AH(NO),AP(NU),VL3(NU,NU,NU),
     *          AHH(NO,NO,2),AHP(NO,NU,2),APP(NU,NU,2),
     *          AX(NU,NU,NO,2),BX(NU,NO,NO,2)
C
      COMMON /EOMTRP/ DI1(10),DI2(10),DI3(10),DI4(10),DI5(10),DI6(10),
     *                ENESD(10),XNUM(10),XDENOM(10),R0(10),
     *                XM1(10),XM2(10),XM3(10),XD1(10),XD2(10),XD3(10),
     *                YD1(10),YD2(10),YD3(10),YD4(10),XNC3(10),DC3(10),
     *                XGRCORR,XGRCORR1,XGRCORR2,XGRCORR3,XGRCORR4,
     *                XGRCORR5,XGRCORR6,XGRCORR7,CI3GCORR
C
      DATA TWO/2.0D+00/
        JEXL=2
C
C
C
C *************************************************************
C
C I>J>K
C
        IF(I.GT.J.AND.J.GT.K) THEN
         I1=K
         J1=J
         K1=I
C
C 11 MAR 10 - WL,PP - OPT CR-CCL CODE
C
      EHIJK = EH(I1)+EH(J1)+EH(K1)
      AHIJK = AH(I1)+AH(J1)+AH(K1)
      ZA0HH = -AHH(I1,J1,1)+AHH(I1,J1,2)
     &        -AHH(K1,J1,1)+AHH(K1,J1,2)
     &        -AHH(I1,K1,1)+AHH(I1,K1,2)
      ZA1HH = -AHH(K1,J1,2)-AHH(I1,K1,2)
      ZA2HH = -AHH(K1,J1,2)-AHH(I1,K1,2)
      ZA3HH = -AHH(K1,J1,2)-AHH(I1,K1,2)
      ZA4HH = -AHH(I1,J1,2)-AHH(K1,J1,2)
      ZA5HH = -AHH(I1,J1,2)-AHH(K1,J1,2)
      ZA6HH = -AHH(I1,J1,2)-AHH(K1,J1,2)
      ZA7HH = -AHH(I1,J1,2)-AHH(I1,K1,2)
      ZA8HH = -AHH(I1,J1,2)-AHH(I1,K1,2)
      ZA9HH = -AHH(I1,J1,2)-AHH(I1,K1,2)
C
         DO 149,A=1,NU
         AIJ1 = -BX(A,I1,J1,1)+BX(A,I1,J1,2)+BX(A,J1,I1,2)-BX(A,J1,I1,1)
         AIK1 = -BX(A,I1,K1,1)+BX(A,I1,K1,2)+BX(A,K1,I1,2)-BX(A,K1,I1,1)
         AJK1 = -BX(A,J1,K1,1)+BX(A,J1,K1,2)+BX(A,K1,J1,2)-BX(A,K1,J1,1)
C
         BX1A = AIJ1 -BX(A,K1,I1,1)-BX(A,K1,J1,1)
         BX2A = AIJ1 -BX(A,K1,I1,1)-BX(A,K1,J1,1)
         BX3A =      -BX(A,I1,K1,1)-BX(A,J1,K1,1)
         BX4A = AIK1 -BX(A,J1,I1,1)-BX(A,J1,K1,1)
         BX5A = AIK1 -BX(A,J1,I1,1)-BX(A,J1,K1,1)
         BX6A =      -BX(A,I1,J1,1)-BX(A,K1,J1,1)
         BX7A = AJK1 -BX(A,I1,J1,1)-BX(A,I1,K1,1)
         BX8A = AJK1 -BX(A,I1,J1,1)-BX(A,I1,K1,1)
         BX9A =      -BX(A,J1,I1,1)-BX(A,K1,I1,1)
C
         DO 149,B=A,NU
         ABK1 = AX(A,B,K1,1)-AX(A,B,K1,2)-AX(B,A,K1,2)+AX(B,A,K1,1)
         ABJ1 = AX(A,B,J1,1)-AX(A,B,J1,2)-AX(B,A,J1,2)+AX(B,A,J1,1)
         ABI1 = AX(A,B,I1,1)-AX(A,B,I1,2)-AX(B,A,I1,2)+AX(B,A,I1,1)
         BIJ1 = -BX(B,I1,J1,1)+BX(B,I1,J1,2)+BX(B,J1,I1,2)-BX(B,J1,I1,1)
         BIK1 = -BX(B,I1,K1,1)+BX(B,I1,K1,2)+BX(B,K1,I1,2)-BX(B,K1,I1,1)
         BJK1 = -BX(B,J1,K1,1)+BX(B,J1,K1,2)+BX(B,K1,J1,2)-BX(B,K1,J1,1)
C
         BX1AB= BX1A +BIJ1 -BX(B,K1,I1,1)-BX(B,K1,J1,1)
         BX2AB= BX2A       -BX(B,I1,K1,1)-BX(B,J1,K1,1)
         BX3AB= BX3A +BIJ1 -BX(B,K1,I1,1)-BX(B,K1,J1,1)
         BX4AB= BX4A +BIK1 -BX(B,J1,I1,1)-BX(B,J1,K1,1)
         BX5AB= BX5A       -BX(B,I1,J1,1)-BX(B,K1,J1,1)
         BX6AB= BX6A +BIK1 -BX(B,J1,I1,1)-BX(B,J1,K1,1)
         BX7AB= BX7A +BJK1 -BX(B,I1,J1,1)-BX(B,I1,K1,1)
         BX8AB= BX8A       -BX(B,J1,I1,1)-BX(B,K1,I1,1)
         BX9AB= BX9A +BJK1 -BX(B,I1,J1,1)-BX(B,I1,K1,1)
C
         DO 149,C=B,NU
         IF(A.EQ.B.AND.B.EQ.C) GO TO 149
            HA1=EHIJK-EP(A)-EP(B)-EP(C)
            ZA0=AHIJK-AP(A)-AP(B)-AP(C)
            DB01=ENESD(JEX)+HA1
            DB02=ENESD(JEX)+ZA0
C
         ZA0 = ZA0+ZA0HH
     &        -APP(A,B,1)+APP(A,B,2)
     &        -APP(C,B,1)+APP(C,B,2)
     &        -APP(A,C,1)+APP(A,C,2)
     &          +AHP(I1,A,1)-AHP(I1,A,2)
     &          +AHP(I1,B,1)-AHP(I1,B,2)
     &          +AHP(I1,C,1)-AHP(I1,C,2)
     &        +AHP(J1,A,1)-AHP(J1,A,2)
     &        +AHP(J1,B,1)-AHP(J1,B,2)
     &        +AHP(J1,C,1)-AHP(J1,C,2)
     &          +AHP(K1,A,1)-AHP(K1,A,2)
     &          +AHP(K1,B,1)-AHP(K1,B,2)
     &          +AHP(K1,C,1)-AHP(K1,C,2)
C
         ACK1 = AX(A,C,K1,1)-AX(A,C,K1,2)-AX(C,A,K1,2)+AX(C,A,K1,1)
         ACJ1 = AX(A,C,J1,1)-AX(A,C,J1,2)-AX(C,A,J1,2)+AX(C,A,J1,1)
         ACI1 = AX(A,C,I1,1)-AX(A,C,I1,2)-AX(C,A,I1,2)+AX(C,A,I1,1)
         BCK1 = AX(B,C,K1,1)-AX(B,C,K1,2)-AX(C,B,K1,2)+AX(C,B,K1,1)
         BCJ1 = AX(B,C,J1,1)-AX(B,C,J1,2)-AX(C,B,J1,2)+AX(C,B,J1,1)
         BCI1 = AX(B,C,I1,1)-AX(B,C,I1,2)-AX(C,B,I1,2)+AX(C,B,I1,1)
C
         CIJ1 = -BX(C,I1,J1,1)+BX(C,I1,J1,2)+BX(C,J1,I1,2)-BX(C,J1,I1,1)
         CIK1 = -BX(C,I1,K1,1)+BX(C,I1,K1,2)+BX(C,K1,I1,2)-BX(C,K1,I1,1)
         CJK1 = -BX(C,J1,K1,1)+BX(C,J1,K1,2)+BX(C,K1,J1,2)-BX(C,K1,J1,1)
C
C
         AX0 = ABK1+ACK1+BCK1 + ABJ1+ACJ1+BCJ1 + ABI1+ACI1+BCI1
         BX0 = AIJ1+BIJ1+CIJ1 + AIK1+BIK1+CIK1 + AJK1+BJK1+CJK1
         DB03=ENESD(JEX)+ZA0  !-CIM0 ZA1+ZA2 --> ZA0
         DB0 =DB03-AX0-BX0
C
         ZA1 = ZA0-APP(C,B,2)-APP(A,C,2)+ZA1HH
     &            +AHP(I1,C,2)+AHP(J1,C,2)+AHP(K1,A,2)+AHP(K1,B,2)
         AX1 = ABJ1+ABI1 -AX(C,A,K1,2)-AX(C,B,K1,2)
     &                   -AX(A,C,J1,2)-AX(B,C,J1,2)
     &                   -AX(A,C,I1,2)-AX(B,C,I1,2)
         BX1 = BX1AB -BX(C,I1,K1,1)-BX(C,J1,K1,1)
         DB11=DB01
         DB12=DB02
         DB13=ENESD(JEX)+ZA1
         DB1 =DB13-AX1-BX1
C
         ZA2 = ZA0-APP(A,B,2)-APP(C,B,2)+ZA2HH
     &            +AHP(I1,B,2)+AHP(J1,B,2)+AHP(K1,A,2)+AHP(K1,C,2)
         AX2 = ACJ1+ACI1 -AX(B,A,K1,2)-AX(B,C,K1,2)
     &                   -AX(A,B,J1,2)-AX(C,B,J1,2)
     &                   -AX(A,B,I1,2)-AX(C,B,I1,2)
         BX2 = BX2AB+CIJ1 -BX(C,K1,I1,1)-BX(C,K1,J1,1)
         DB21=DB01
         DB22=DB02
         DB23=ENESD(JEX)+ZA2
         DB2=DB23-AX2-BX2
C
         ZA3 = ZA0-APP(A,B,2)-APP(A,C,2)+ZA3HH
     &            +AHP(I1,A,2)+AHP(J1,A,2)+AHP(K1,B,2)+AHP(K1,C,2)
         AX3 = BCJ1+BCI1 -AX(A,B,K1,2)-AX(A,C,K1,2)
     &                   -AX(B,A,J1,2)-AX(C,A,J1,2)
     &                   -AX(B,A,I1,2)-AX(C,A,I1,2)
         BX3 = BX3AB +CIJ1 -BX(C,K1,I1,1)-BX(C,K1,J1,1)
         DB31=DB01
         DB32=DB02
         DB33=ENESD(JEX)+ZA3
         DB3=DB33-AX3-BX3
C
         ZA4 = ZA0-APP(C,B,2)-APP(A,C,2)+ZA4HH
     &            +AHP(I1,C,2)+AHP(J1,A,2)+AHP(J1,B,2)+AHP(K1,C,2)
         AX4 = ABK1+ABI1 -AX(A,C,K1,2)-AX(B,C,K1,2)
     &                   -AX(C,A,J1,2)-AX(C,B,J1,2)
     &                   -AX(A,C,I1,2)-AX(B,C,I1,2)
         BX4 = BX4AB -BX(C,I1,J1,1)-BX(C,K1,J1,1)
         DB41=DB01
         DB42=DB02
         DB43=ENESD(JEX)+ZA4
         DB4=DB43-AX4-BX4
C
         ZA5 = ZA0-APP(A,B,2)-APP(C,B,2)+ZA5HH
     &            +AHP(I1,B,2)+AHP(J1,A,2)+AHP(J1,C,2)+AHP(K1,B,2)
         AX5 = ACK1+ACI1 -AX(A,B,K1,2)-AX(C,B,K1,2)
     &                   -AX(B,A,J1,2)-AX(B,C,J1,2)
     &                   -AX(A,B,I1,2)-AX(C,B,I1,2)
         BX5 = BX5AB +CIK1 -BX(C,J1,I1,1)-BX(C,J1,K1,1)
         DB51=DB01
         DB52=DB02
         DB53=ENESD(JEX)+ZA5
         DB5=DB53-AX5-BX5
C
         ZA6 = ZA0-APP(A,B,2)-APP(A,C,2)+ZA6HH
     &            +AHP(I1,A,2)+AHP(J1,B,2)+AHP(J1,C,2)+AHP(K1,A,2)
         AX6 = BCK1+BCI1 -AX(B,A,K1,2)-AX(C,A,K1,2)
     &                   -AX(A,B,J1,2)-AX(A,C,J1,2)
     &                   -AX(B,A,I1,2)-AX(C,A,I1,2)
         BX6 = BX6AB +CIK1 -BX(C,J1,I1,1)-BX(C,J1,K1,1)
         DB61=DB01
         DB62=DB02
         DB63=ENESD(JEX)+ZA6
         DB6=DB63-AX6-BX6
C
         ZA7 = ZA0-APP(C,B,2)-APP(A,C,2)+ZA7HH
     &            +AHP(I1,A,2)+AHP(I1,B,2)+AHP(J1,C,2)+AHP(K1,C,2)
         AX7 = ABK1+ABJ1 -AX(A,C,K1,2)-AX(B,C,K1,2)
     &                   -AX(A,C,J1,2)-AX(B,C,J1,2)
     &                   -AX(C,A,I1,2)-AX(C,B,I1,2)
         BX7 = BX7AB -BX(C,J1,I1,1)-BX(C,K1,I1,1)
         DB71=DB01
         DB72=DB02
         DB73=ENESD(JEX)+ZA7
         DB7=DB73-AX7-BX7
C
         ZA8 = ZA0-APP(A,B,2)-APP(C,B,2)+ZA8HH
     &            +AHP(I1,A,2)+AHP(I1,C,2)+AHP(J1,B,2)+AHP(K1,B,2)
         AX8 = ACK1+ACJ1 -AX(A,B,K1,2)-AX(C,B,K1,2)
     &                   -AX(A,B,J1,2)-AX(C,B,J1,2)
     &                   -AX(B,A,I1,2)-AX(B,C,I1,2)
         BX8 = BX8AB +CJK1 -BX(C,I1,J1,1)-BX(C,I1,K1,1)
         DB81=DB01
         DB82=DB02
         DB83=ENESD(JEX)+ZA8
         DB8=DB83-AX8-BX8
C
         ZA9 = ZA0-APP(A,B,2)-APP(A,C,2)+ZA9HH
     &            +AHP(I1,B,2)+AHP(I1,C,2)+AHP(J1,A,2)+AHP(K1,A,2)
         AX9 = BCK1+BCJ1 -AX(B,A,K1,2)-AX(C,A,K1,2)
     &                   -AX(B,A,J1,2)-AX(C,A,J1,2)
     &                   -AX(A,B,I1,2)-AX(A,C,I1,2)
         BX9 = BX9AB +CJK1 -BX(C,I1,J1,1)-BX(C,I1,K1,1)
         DB91=DB01
         DB92=DB02
         DB93=ENESD(JEX)+ZA9
         DB9=DB93-AX9-BX9
C
C
C       REVERSE ORDER OF A,B,C!!!
       B0=V3(C,B,A)-V3(B,C,A)-V3(C,A,B)+V3(A,C,B)+V3(B,A,C)-V3(A,B,C)
       B1=V3(C,B,A)-V3(C,A,B)
       B2=V3(B,C,A)-V3(B,A,C)
       B3=V3(A,C,B)-V3(A,B,C)
       B4=V3(B,C,A)-V3(A,C,B)
       B5=V3(C,B,A)-V3(A,B,C)
       B6=V3(C,A,B)-V3(B,A,C)
       B7=V3(B,A,C)-V3(A,B,C)
       B8=V3(C,A,B)-V3(A,C,B)
       B9=V3(C,B,A)-V3(B,C,A)
C
       BL0=VL3(C,B,A)-VL3(B,C,A)-VL3(C,A,B)+
     * VL3(A,C,B)+VL3(B,A,C)-VL3(A,B,C)
       BL1=VL3(C,B,A)-VL3(C,A,B)
       BL2=VL3(B,C,A)-VL3(B,A,C)
       BL3=VL3(A,C,B)-VL3(A,B,C)
       BL4=VL3(B,C,A)-VL3(A,C,B)
       BL5=VL3(C,B,A)-VL3(A,B,C)
       BL6=VL3(C,A,B)-VL3(B,A,C)
       BL7=VL3(B,A,C)-VL3(A,B,C)
       BL8=VL3(C,A,B)-VL3(A,C,B)
       BL9=VL3(C,B,A)-VL3(B,C,A)
C
       C0=U3(C,B,A)-U3(B,C,A)-U3(C,A,B)+U3(A,C,B)+U3(B,A,C)-U3(A,B,C)
       C1=U3(C,B,A)-U3(C,A,B)
       C2=U3(B,C,A)-U3(B,A,C)
       C3=U3(A,C,B)-U3(A,B,C)
       C4=U3(B,C,A)-U3(A,C,B)
       C5=U3(C,B,A)-U3(A,B,C)
       C6=U3(C,A,B)-U3(B,A,C)
       C7=U3(B,A,C)-U3(A,B,C)
       C8=U3(C,A,B)-U3(A,C,B)
       C9=U3(C,B,A)-U3(B,C,A)
C
C       CL0=UL3(C,B,A)-UL3(B,C,A)-UL3(C,A,B)+UL3(A,C,B)+
C     * UL3(B,A,C)-UL3(A,B,C)
C       CL1=UL3(C,B,A)-UL3(C,A,B)
C       CL2=UL3(B,C,A)-UL3(B,A,C)
C       CL3=UL3(A,C,B)-UL3(A,B,C)
C       CL4=UL3(B,C,A)-UL3(A,C,B)
C       CL5=UL3(C,B,A)-UL3(A,B,C)
C       CL6=UL3(C,A,B)-UL3(B,A,C)
C       CL7=UL3(B,A,C)-UL3(A,B,C)
C       CL8=UL3(C,A,B)-UL3(A,C,B)
C       CL9=UL3(C,B,A)-UL3(B,C,A)
C
       IF(A.LT.B.AND.B.LT.C) THEN
          B0B0=B0*B0
          B1B1=B1*B1
          B2B2=B2*B2
          B3B3=B3*B3
          B4B4=B4*B4
          B5B5=B5*B5
          B6B6=B6*B6
          B7B7=B7*B7
          B8B8=B8*B8
          B9B9=B9*B9
C
          B0C0=B0*C0
          B1C1=B1*C1
          B2C2=B2*C2
          B3C3=B3*C3
          B4C4=B4*C4
          B5C5=B5*C5
          B6C6=B6*C6
          B7C7=B7*C7
          B8C8=B8*C8
          B9C9=B9*C9
C
          B0BL0=B0*BL0
          B1BL1=B1*BL1
          B2BL2=B2*BL2
          B3BL3=B3*BL3
          B4BL4=B4*BL4
          B5BL5=B5*BL5
          B6BL6=B6*BL6
          B7BL7=B7*BL7
          B8BL8=B8*BL8
          B9BL9=B9*BL9
       XNUM(JEXL)=XNUM(JEXL)+TWO*(B0BL0/DB0+B1BL1/DB1+B2BL2/DB2+
     &     B3BL3/DB3+B4BL4/DB4+B5BL5/DB5+B6BL6/DB6+B7BL7/DB7+
     &                     B8BL8/DB8+B9BL9/DB9)
C       XNUM(4)=XNUM(4)+TWO*(B0*CL0/DB0+B1*CL1/DB1+B2*CL2/DB2+
C     &     B3*CL3/DB3+B4*CL4/DB4+B5*CL5/DB5+B6*CL6/DB6+B7*CL7/DB7+
C     &                     B8*CL8/DB8+B9*CL9/DB9)
       ZBBP = TWO*(B0B0/DB0+B1B1/DB1+B2B2/DB2+B3B3/DB3+B4B4/DB4
     &            +B5B5/DB5+B6B6/DB6+B7B7/DB7+B8B8/DB8+B9B9/DB9)
       XNUM(JEX)=XNUM(JEX)+ZBBP
       DI6(JEX)=DI6(JEX)+ZBBP

       ZBB  = TWO*(B0B0+B1B1+B2B2+B3B3+B4B4+B5B5+B6B6+B7B7+B8B8+B9B9)
       ZBBL = TWO*(B0BL0+B1BL1+B2BL2+B3BL3+B4BL4
     &            +B5BL5+B6BL6+B7BL7+B8BL8+B9BL9)
       XM1(JEX)=XM1(JEX)+ZBB/DB01
       XM1(JEXL)=XM1(JEXL)+ZBBL/DB01
C       XNUM(5)=XNUM(5)+TWO*(B0*CL0/DB01+B1*CL1/DB11+B2*CL2/DB21+
C     &     B3*CL3/DB31+B4*CL4/DB41+B5*CL5/DB51+B6*CL6/DB61+
C     &                    B7*CL7/DB71+ B8*CL8/DB81+B9*CL9/DB91)
       XM2(JEX)=XM2(JEX)+ZBB/DB02
       XM2(JEXL)=XM2(JEXL)+ZBBL/DB02
C       XNUM(6)=XNUM(6)+TWO*(B0*CL0/DB02+B1*CL1/DB12+B2*CL2/DB22+
C     &     B3*CL3/DB32+B4*CL4/DB42+B5*CL5/DB52+B6*CL6/DB62+
C     &                    B7*CL7/DB72+ B8*CL8/DB82+B9*CL9/DB92)
       XM3(JEX)=XM3(JEX)+TWO*(B0B0/DB03+B1B1/DB13+B2B2/DB23+
     &     B3B3/DB33+B4B4/DB43+B5B5/DB53+B6B6/DB63+B7B7/DB73+
     &                     B8B8/DB83+B9B9/DB93)
       XM3(JEXL)=XM3(JEXL)+TWO*(B0BL0/DB03+B1BL1/DB13+B2BL2/DB23+
     &     B3BL3/DB33+B4BL4/DB43+B5BL5/DB53+B6BL6/DB63+
     &                    B7BL7/DB73+B8BL8/DB83+B9BL9/DB93)
C
C       XNUM(3)=XNUM(3)+TWO*(B0*CL0/DB03+B1*CL1/DB13+B2*CL2/DB23+
C     &     B3*CL3/DB33+B4*CL4/DB43+B5*CL5/DB53+B6*CL6/DB63+
C     &                    B7*CL7/DB73+ B8*CL8/DB83+B9*CL9/DB93)
C
       ZBCP=TWO*(B0C0/DB0+B1C1/DB1+B2C2/DB2+B3C3/DB3+B4C4/DB4
     &          +B5C5/DB5+B6C6/DB6+B7C7/DB7+B8C8/DB8+B9C9/DB9)
       XDENOM(JEX)=XDENOM(JEX)+ZBCP
       YD1(JEX)=YD1(JEX)+ZBCP
C
       ZBC =TWO*(B0C0+B1C1+B2C2+B3C3+B4C4+B5C5+B6C6+B7C7+B8C8+B9C9)
       XD1(JEX)=XD1(JEX)+ZBC/DB01
       YD3(JEX)=YD3(JEX)+ZBC/DB01
       XD2(JEX)=XD2(JEX)+ZBC/DB02
       YD4(JEX)=YD4(JEX)+ZBC/DB02
       ZBCP3=TWO*(B0C0/DB03+B1C1/DB13+B2C2/DB23+B3C3/DB33+B4C4/DB43
     &           +B5C5/DB53+B6C6/DB63+B7C7/DB73+B8C8/DB83+B9C9/DB93)
       XD3(JEX)=XD3(JEX)+ZBCP3
       YD2(JEX)=YD2(JEX)+ZBCP3
C       XDENOM(JEX)=XDENOM(JEX)+TWO*(B0*B0/(DB0*DB0)+B1*B1/(DB1*DB1)+
C     &     B2*B2/(DB2*DB2)+B3*B3/(DB3*DB3)+B4*B4/(DB4*DB4)+
C     &     B5*B5/(DB5*DB5)+B6*B6/(DB6*DB6)+B7*B7/(DB7*DB7)+
C     &                     B8*B8/(DB8*DB8)+B9*B9/(DB9*DB9))
       GO TO 149
       END IF
       IF(A.EQ.B) THEN
       XNUM(JEX)=XNUM(JEX)+B2*B2/DB2+B3*B3/DB3+B5*B5/DB5+B6*B6/DB6+
     &                     B8*B8/DB8+B9*B9/DB9
       XNUM(JEXL)=XNUM(JEXL)+B2*BL2/DB2+B3*BL3/DB3+B5*BL5/DB5+
     &                     B6*BL6/DB6+B8*BL8/DB8+B9*BL9/DB9
C       XNUM(4)=XNUM(4)+B2*CL2/DB2+B3*CL3/DB3+B5*CL5/DB5+
C     &                     B6*CL6/DB6+B8*CL8/DB8+B9*CL9/DB9
       XM1(JEX)=XM1(JEX)+B2*B2/DB21+B3*B3/DB31+B5*B5/DB51+B6*B6/DB61+
     &                     B8*B8/DB81+B9*B9/DB91
       XM1(JEXL)=XM1(JEXL)+B2*BL2/DB21+B3*BL3/DB31+B5*BL5/DB51+
     &                    B6*BL6/DB61+ B8*BL8/DB81+B9*BL9/DB91
C       XNUM(5)=XNUM(5)+B2*CL2/DB21+B3*CL3/DB31+B5*CL5/DB51+
C     &                    B6*CL6/DB61+ B8*CL8/DB81+B9*CL9/DB91
       XM2(JEX)=XM2(JEX)+B2*B2/DB22+B3*B3/DB32+B5*B5/DB52+B6*B6/DB62+
     &                     B8*B8/DB82+B9*B9/DB92
       XM2(JEXL)=XM2(JEXL)+B2*BL2/DB22+B3*BL3/DB32+B5*BL5/DB52+
     &                    B6*BL6/DB62+ B8*BL8/DB82+B9*BL9/DB92
C       XNUM(6)=XNUM(6)+B2*CL2/DB22+B3*CL3/DB32+B5*CL5/DB52+
C     &                    B6*CL6/DB62+ B8*CL8/DB82+B9*CL9/DB92
       XM3(JEX)=XM3(JEX)+B2*B2/DB23+B3*B3/DB33+B5*B5/DB53+B6*B6/DB63+
     &                     B8*B8/DB83+B9*B9/DB93
       XM3(JEXL)=XM3(JEXL)+B2*BL2/DB23+B3*BL3/DB33+B5*BL5/DB53+
     &                    B6*BL6/DB63+ B8*BL8/DB83+B9*BL9/DB93
C
C       XNUM(3)=XNUM(3)+B2*CL2/DB23+B3*CL3/DB33+B5*CL5/DB53+
C     &                    B6*CL6/DB63+ B8*CL8/DB83+B9*CL9/DB93
C
       DI6(JEX)=DI6(JEX)+B2*B2/DB2+B3*B3/DB3+B5*B5/DB5+B6*B6/DB6+
     &                     B8*B8/DB8+B9*B9/DB9
       XDENOM(JEX)=XDENOM(JEX)+B2*C2/DB2+B3*C3/DB3+B5*C5/DB5+B6*C6/DB6+
     &                     B8*C8/DB8+B9*C9/DB9
       YD1(JEX)=YD1(JEX)+B2*C2/DB2+B3*C3/DB3+B5*C5/DB5+B6*C6/DB6+
     &                     B8*C8/DB8+B9*C9/DB9
       XD1(JEX)=XD1(JEX)+B2*C2/DB21+B3*C3/DB31+B5*C5/DB51+B6*C6/DB61+
     &                     B8*C8/DB81+B9*C9/DB91
       YD3(JEX)=YD3(JEX)+B2*C2/DB21+B3*C3/DB31+B5*C5/DB51+B6*C6/DB61+
     &                     B8*C8/DB81+B9*C9/DB91
       XD2(JEX)=XD2(JEX)+B2*C2/DB22+B3*C3/DB32+B5*C5/DB52+B6*C6/DB62+
     &                     B8*C8/DB82+B9*C9/DB92
       YD4(JEX)=YD4(JEX)+B2*C2/DB22+B3*C3/DB32+B5*C5/DB52+B6*C6/DB62+
     &                     B8*C8/DB82+B9*C9/DB92
       XD3(JEX)=XD3(JEX)+B2*C2/DB23+B3*C3/DB33+B5*C5/DB53+B6*C6/DB63+
     &                     B8*C8/DB83+B9*C9/DB93
       YD2(JEX)=YD2(JEX)+B2*C2/DB23+B3*C3/DB33+B5*C5/DB53+B6*C6/DB63+
     &                     B8*C8/DB83+B9*C9/DB93
C       XDENOM(JEX)=XDENOM(JEX)+B2*B2/(DB2*DB2)+B3*B3/(DB3*DB3)+
C     &     B5*B5/(DB5*DB5)+B6*B6/(DB6*DB6)+
C     &     B8*B8/(DB8*DB8)+B9*B9/(DB9*DB9)
       GO TO 149
       END IF
       IF(B.EQ.C) THEN
       XNUM(JEX)=XNUM(JEX)+B1*B1/DB1+B2*B2/DB2+
     &     B4*B4/DB4+B5*B5/DB5+B7*B7/DB7+B8*B8/DB8
       XNUM(JEXL)=XNUM(JEXL)+B1*BL1/DB1+B2*BL2/DB2+
     &     B4*BL4/DB4+B5*BL5/DB5+B7*BL7/DB7+B8*BL8/DB8
C       XNUM(4)=XNUM(4)+B1*CL1/DB1+B2*CL2/DB2+
C     &     B4*CL4/DB4+B5*CL5/DB5+B7*CL7/DB7+B8*CL8/DB8
       XM1(JEX)=XM1(JEX)+B1*B1/DB11+B2*B2/DB21+
     &     B4*B4/DB41+B5*B5/DB51+B7*B7/DB71+B8*B8/DB81
       XM1(JEXL)=XM1(JEXL)+B1*BL1/DB11+B2*BL2/DB21+
     &     B4*BL4/DB41+B5*BL5/DB51+B7*BL7/DB71+B8*BL8/DB81
C       XNUM(5)=XNUM(5)+B1*CL1/DB11+B2*CL2/DB21+
C     &     B4*CL4/DB41+B5*CL5/DB51+B7*CL7/DB71+B8*CL8/DB81
       XM2(JEX)=XM2(JEX)+B1*B1/DB12+B2*B2/DB22+
     &     B4*B4/DB42+B5*B5/DB52+B7*B7/DB72+B8*B8/DB82
       XM2(JEXL)=XM2(JEXL)+B1*BL1/DB12+B2*BL2/DB22+
     &     B4*BL4/DB42+B5*BL5/DB52+B7*BL7/DB72+B8*BL8/DB82
C       XNUM(6)=XNUM(6)+B1*CL1/DB12+B2*CL2/DB22+
C     &     B4*CL4/DB42+B5*CL5/DB52+B7*CL7/DB72+B8*CL8/DB82
       XM3(JEX)=XM3(JEX)+B1*B1/DB13+B2*B2/DB23+
     &     B4*B4/DB43+B5*B5/DB53+B7*B7/DB73+B8*B8/DB83
       XM3(JEXL)=XM3(JEXL)+B1*BL1/DB13+B2*BL2/DB23+
     &     B4*BL4/DB43+B5*BL5/DB53+B7*BL7/DB73+B8*BL8/DB83
C
C       XNUM(3)=XNUM(3)+B1*CL1/DB13+B2*CL2/DB23+
C     &     B4*CL4/DB43+B5*CL5/DB53+B7*CL7/DB73+B8*CL8/DB83
C
       DI6(JEX)=DI6(JEX)+B1*B1/DB1+B2*B2/DB2+
     &     B4*B4/DB4+B5*B5/DB5+B7*B7/DB7+B8*B8/DB8
       XDENOM(JEX)=XDENOM(JEX)+B1*C1/DB1+B2*C2/DB2+
     &     B4*C4/DB4+B5*C5/DB5+B7*C7/DB7+B8*C8/DB8
       YD1(JEX)=YD1(JEX)+B1*C1/DB1+B2*C2/DB2+
     &     B4*C4/DB4+B5*C5/DB5+B7*C7/DB7+B8*C8/DB8
       XD1(JEX)=XD1(JEX)+B1*C1/DB11+B2*C2/DB21+
     &     B4*C4/DB41+B5*C5/DB51+B7*C7/DB71+B8*C8/DB81
       YD3(JEX)=YD3(JEX)+B1*C1/DB11+B2*C2/DB21+
     &     B4*C4/DB41+B5*C5/DB51+B7*C7/DB71+B8*C8/DB81
       XD2(JEX)=XD2(JEX)+B1*C1/DB12+B2*C2/DB22+
     &     B4*C4/DB42+B5*C5/DB52+B7*C7/DB72+B8*C8/DB82
       YD4(JEX)=YD4(JEX)+B1*C1/DB12+B2*C2/DB22+
     &     B4*C4/DB42+B5*C5/DB52+B7*C7/DB72+B8*C8/DB82
       XD3(JEX)=XD3(JEX)+B1*C1/DB13+B2*C2/DB23+
     &     B4*C4/DB43+B5*C5/DB53+B7*C7/DB73+B8*C8/DB83
       YD2(JEX)=YD2(JEX)+B1*C1/DB13+B2*C2/DB23+
     &     B4*C4/DB43+B5*C5/DB53+B7*C7/DB73+B8*C8/DB83
C       XDENOM(JEX)=XDENOM(JEX)+B1*B1/(DB1*DB1)+
C     &     B2*B2/(DB2*DB2)+B4*B4/(DB4*DB4)+
C     &     B5*B5/(DB5*DB5)+B7*B7/(DB7*DB7)+B8*B8/(DB8*DB8)
       GO TO 149
       END IF
C
 149     CONTINUE
         GO TO 100
        END IF
C
C *********************************************************
C
C
C *********************************************************
C I=J>K
C
        IF(I.EQ.J.AND.J.GT.K) THEN
         I1=K
         J1=J
         K1=I
         DO 150,A=1,NU
         DO 150,B=A,NU
         DO 150,C=B,NU
         IF(A.EQ.B.AND.B.EQ.C) GO TO 150
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)+APP(A,B,2)-APP(C,B,1)-APP(A,C,1)
     &-AHH(I1,J1,1)+AHH(I1,J1,2)-AHH(K1,J1,1)-AHH(I1,K1,1)
     &+AHP(I1,A,1)-AHP(I1,A,2)+AHP(I1,B,1)-AHP(I1,B,2)+AHP(I1,C,1)
     &+AHP(J1,A,1)-AHP(J1,A,2)+AHP(J1,B,1)-AHP(J1,B,2)
     &+AHP(J1,C,1)+AHP(K1,A,1)+AHP(K1,B,1)
     &+AHP(K1,C,1)-AHP(K1,C,2)
          AX1=-AX(C,A,K1,2)-AX(C,B,K1,2)
     &+AX(A,B,J1,1)-AX(A,B,J1,2)-AX(B,A,J1,2)+AX(B,A,J1,1)
     &-AX(A,C,J1,2)-AX(B,C,J1,2)
     &+AX(A,B,I1,1)-AX(A,B,I1,2)-AX(B,A,I1,2)+AX(B,A,I1,1)
     &-AX(A,C,I1,2)-AX(B,C,I1,2)
        BX1=-BX(A,I1,J1,1)+BX(A,I1,J1,2)+BX(A,J1,I1,2)-BX(A,J1,I1,1)
     &-BX(B,I1,J1,1)+BX(B,I1,J1,2)+BX(B,J1,I1,2)-BX(B,J1,I1,1)
     &-BX(A,K1,I1,1)-BX(B,K1,I1,1)-BX(C,I1,K1,1)-BX(A,K1,J1,1)
     &-BX(B,K1,J1,1)-BX(C,J1,K1,1)
       DB1=ENESD(JEX)+ZA1+ZA2-AX1-BX1
       DB11=ENESD(JEX)+HA1
       DB12=ENESD(JEX)+ZA1
       DB13=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)-APP(C,B,1)-APP(A,C,1)+APP(A,C,2)
     &-AHH(I1,J1,1)+AHH(I1,J1,2)-AHH(K1,J1,1)-AHH(I1,K1,1)
     &+AHP(I1,A,1)-AHP(I1,A,2)+AHP(I1,B,1)+AHP(I1,C,1)
     &-AHP(I1,C,2)+AHP(J1,A,1)-AHP(J1,A,2)+AHP(J1,B,1)
     &+AHP(J1,C,1)-AHP(J1,C,2)+AHP(K1,A,1)+AHP(K1,B,1)
     &-AHP(K1,B,2)+AHP(K1,C,1)
          AX2=-AX(B,A,K1,2)-AX(B,C,K1,2)-AX(A,B,J1,2)
     &+AX(A,C,J1,1)-AX(A,C,J1,2)-AX(C,A,J1,2)+AX(C,A,J1,1)-AX(C,B,J1,2)
     &-AX(A,B,I1,2)+AX(A,C,I1,1)-AX(A,C,I1,2)-AX(C,A,I1,2)
     &+AX(C,A,I1,1)-AX(C,B,I1,2)
        BX2=-BX(A,I1,J1,1)+BX(A,I1,J1,2)+BX(A,J1,I1,2)-BX(A,J1,I1,1)
     &-BX(C,I1,J1,1)+BX(C,I1,J1,2)+BX(C,J1,I1,2)-BX(C,J1,I1,1)
     &-BX(A,K1,I1,1)-BX(B,I1,K1,1)-BX(C,K1,I1,1)
     &-BX(A,K1,J1,1)-BX(B,J1,K1,1)-BX(C,K1,J1,1)
       DB2=ENESD(JEX)+ZA1+ZA2-AX2-BX2
       DB21=ENESD(JEX)+HA1
       DB22=ENESD(JEX)+ZA1
       DB23=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)-APP(C,B,1)+APP(C,B,2)-APP(A,C,1)
     &-AHH(I1,J1,1)+AHH(I1,J1,2)-AHH(K1,J1,1)-AHH(I1,K1,1)
     &+AHP(I1,A,1)+AHP(I1,B,1)-AHP(I1,B,2)+AHP(I1,C,1)
     &-AHP(I1,C,2)+AHP(J1,A,1)+AHP(J1,B,1)-AHP(J1,B,2)
     &+AHP(J1,C,1)-AHP(J1,C,2)+AHP(K1,A,1)-AHP(K1,A,2)+AHP(K1,B,1)
     &+AHP(K1,C,1)
          AX3=-AX(A,B,K1,2)-AX(A,C,K1,2)-AX(B,A,J1,2)-AX(C,A,J1,2)
     &+AX(B,C,J1,1)-AX(B,C,J1,2)-AX(C,B,J1,2)+AX(C,B,J1,1)
     &-AX(B,A,I1,2)-AX(C,A,I1,2)+AX(B,C,I1,1)-AX(B,C,I1,2)
     &-AX(C,B,I1,2)+AX(C,B,I1,1)
        BX3=-BX(B,I1,J1,1)+BX(B,I1,J1,2)+BX(B,J1,I1,2)-BX(B,J1,I1,1)
     &-BX(C,I1,J1,1)+BX(C,I1,J1,2)+BX(C,J1,I1,2)-BX(C,J1,I1,1)
     &-BX(A,I1,K1,1)-BX(B,K1,I1,1)-BX(C,K1,I1,1)
     &-BX(A,J1,K1,1)-BX(B,K1,J1,1)-BX(C,K1,J1,1)
       DB3=ENESD(JEX)+ZA1+ZA2-AX3-BX3
       DB31=ENESD(JEX)+HA1
       DB32=ENESD(JEX)+ZA1
       DB33=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)+APP(A,B,2)-APP(C,B,1)-APP(A,C,1)
     &-AHH(I1,J1,1)-AHH(K1,J1,1)-AHH(I1,K1,1)
     &+AHH(I1,K1,2)
     &+AHP(I1,A,1)-AHP(I1,A,2)+AHP(I1,B,1)-AHP(I1,B,2)+AHP(I1,C,1)
     &+AHP(J1,A,1)+AHP(J1,B,1)
     &+AHP(J1,C,1)-AHP(J1,C,2)+AHP(K1,A,1)-AHP(K1,A,2)+AHP(K1,B,1)
     &-AHP(K1,B,2)+AHP(K1,C,1)
          AX4=AX(A,B,K1,1)-AX(A,B,K1,2)-AX(B,A,K1,2)+AX(B,A,K1,1)
     &-AX(A,C,K1,2)-AX(B,C,K1,2)-AX(C,A,J1,2)-AX(C,B,J1,2)
     &+AX(A,B,I1,1)-AX(A,B,I1,2)-AX(B,A,I1,2)+AX(B,A,I1,1)
     &-AX(A,C,I1,2)-AX(B,C,I1,2)
        BX4=-BX(A,J1,I1,1)-BX(B,J1,I1,1)-BX(C,I1,J1,1)
     &-BX(A,I1,K1,1)+BX(A,I1,K1,2)+BX(A,K1,I1,2)-BX(A,K1,I1,1)
     &-BX(B,I1,K1,1)+BX(B,I1,K1,2)+BX(B,K1,I1,2)-BX(B,K1,I1,1)
     &-BX(A,J1,K1,1)-BX(B,J1,K1,1)-BX(C,K1,J1,1)
       DB4=ENESD(JEX)+ZA1+ZA2-AX4-BX4
       DB41=ENESD(JEX)+HA1
       DB42=ENESD(JEX)+ZA1
       DB43=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)-APP(C,B,1)-APP(A,C,1)+APP(A,C,2)
     &-AHH(I1,J1,1)-AHH(K1,J1,1)-AHH(I1,K1,1)+AHH(I1,K1,2)
     &+AHP(I1,A,1)-AHP(I1,A,2)+AHP(I1,B,1)+AHP(I1,C,1)
     &-AHP(I1,C,2)+AHP(J1,A,1)+AHP(J1,B,1)-AHP(J1,B,2)
     &+AHP(J1,C,1)+AHP(K1,A,1)-AHP(K1,A,2)+AHP(K1,B,1)
     &+AHP(K1,C,1)-AHP(K1,C,2)
          AX5=-AX(A,B,K1,2)+AX(A,C,K1,1)-AX(A,C,K1,2)-AX(C,A,K1,2)
     &+AX(C,A,K1,1)-AX(C,B,K1,2)-AX(B,A,J1,2)-AX(B,C,J1,2)-AX(A,B,I1,2)
     &+AX(A,C,I1,1)-AX(A,C,I1,2)-AX(C,A,I1,2)+AX(C,A,I1,1)-AX(C,B,I1,2)
        BX5=-BX(A,J1,I1,1)-BX(B,I1,J1,1)-BX(C,J1,I1,1)
     &-BX(A,I1,K1,1)+BX(A,I1,K1,2)+BX(A,K1,I1,2)-BX(A,K1,I1,1)
     &-BX(C,I1,K1,1)+BX(C,I1,K1,2)+BX(C,K1,I1,2)-BX(C,K1,I1,1)
     &-BX(A,J1,K1,1)-BX(B,K1,J1,1)-BX(C,J1,K1,1)
       DB5=ENESD(JEX)+ZA1+ZA2-AX5-BX5
       DB51=ENESD(JEX)+HA1
       DB52=ENESD(JEX)+ZA1
       DB53=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)-APP(C,B,1)+APP(C,B,2)-APP(A,C,1)
     &-AHH(I1,J1,1)-AHH(K1,J1,1)-AHH(I1,K1,1)+AHH(I1,K1,2)
     &+AHP(I1,A,1)+AHP(I1,B,1)-AHP(I1,B,2)+AHP(I1,C,1)
     &-AHP(I1,C,2)+AHP(J1,A,1)-AHP(J1,A,2)+AHP(J1,B,1)
     &+AHP(J1,C,1)+AHP(K1,A,1)+AHP(K1,B,1)
     &-AHP(K1,B,2)+AHP(K1,C,1)-AHP(K1,C,2)
          AX6=-AX(B,A,K1,2)-AX(C,A,K1,2)+AX(B,C,K1,1)-AX(B,C,K1,2)
     &-AX(C,B,K1,2)+AX(C,B,K1,1)-AX(A,B,J1,2)-AX(A,C,J1,2)
     &-AX(B,A,I1,2)-AX(C,A,I1,2)+AX(B,C,I1,1)-AX(B,C,I1,2)
     &-AX(C,B,I1,2)+AX(C,B,I1,1)
        BX6=-BX(A,I1,J1,1)-BX(B,J1,I1,1)-BX(C,J1,I1,1)
     &-BX(B,I1,K1,1)+BX(B,I1,K1,2)+BX(B,K1,I1,2)-BX(B,K1,I1,1)
     &-BX(C,I1,K1,1)+BX(C,I1,K1,2)+BX(C,K1,I1,2)-BX(C,K1,I1,1)
     &-BX(A,K1,J1,1)-BX(B,J1,K1,1)-BX(C,J1,K1,1)
       DB6=ENESD(JEX)+ZA1+ZA2-AX6-BX6
       DB61=ENESD(JEX)+HA1
       DB62=ENESD(JEX)+ZA1
       DB63=ENESD(JEX)+ZA1+ZA2
C
C
C       REVERSE ORDER OF A,B,C!!!
       B1=V3(C,B,A)-V3(C,A,B)
       B2=V3(B,C,A)-V3(B,A,C)
       B3=V3(A,C,B)-V3(A,B,C)
       B4=V3(B,C,A)-V3(A,C,B)
       B5=V3(C,B,A)-V3(A,B,C)
       B6=V3(C,A,B)-V3(B,A,C)
C
       BL1=VL3(C,B,A)-VL3(C,A,B)
       BL2=VL3(B,C,A)-VL3(B,A,C)
       BL3=VL3(A,C,B)-VL3(A,B,C)
       BL4=VL3(B,C,A)-VL3(A,C,B)
       BL5=VL3(C,B,A)-VL3(A,B,C)
       BL6=VL3(C,A,B)-VL3(B,A,C)
C
       C1=U3(C,B,A)-U3(C,A,B)
       C2=U3(B,C,A)-U3(B,A,C)
       C3=U3(A,C,B)-U3(A,B,C)
       C4=U3(B,C,A)-U3(A,C,B)
       C5=U3(C,B,A)-U3(A,B,C)
       C6=U3(C,A,B)-U3(B,A,C)
C
C       CL1=UL3(C,B,A)-UL3(C,A,B)
C       CL2=UL3(B,C,A)-UL3(B,A,C)
C       CL3=UL3(A,C,B)-UL3(A,B,C)
C       CL4=UL3(B,C,A)-UL3(A,C,B)
C       CL5=UL3(C,B,A)-UL3(A,B,C)
C       CL6=UL3(C,A,B)-UL3(B,A,C)
C
       IF(A.LT.B.AND.B.LT.C) THEN
       XNUM(JEX)=XNUM(JEX)+B1*B1/DB1+B2*B2/DB2+
     &     B3*B3/DB3+B4*B4/DB4+B5*B5/DB5+B6*B6/DB6
       XNUM(JEXL)=XNUM(JEXL)+B1*BL1/DB1+B2*BL2/DB2+
     &     B3*BL3/DB3+B4*BL4/DB4+B5*BL5/DB5+B6*BL6/DB6
C       XNUM(4)=XNUM(4)+B1*CL1/DB1+B2*CL2/DB2+
C     &     B3*CL3/DB3+B4*CL4/DB4+B5*CL5/DB5+B6*CL6/DB6
       XM1(JEX)=XM1(JEX)+B1*B1/DB11+B2*B2/DB21+
     &     B3*B3/DB31+B4*B4/DB41+B5*B5/DB51+B6*B6/DB61
       XM1(JEXL)=XM1(JEXL)+B1*BL1/DB11+B2*BL2/DB21+
     &     B3*BL3/DB31+B4*BL4/DB41+B5*BL5/DB51+B6*BL6/DB61
C       XNUM(5)=XNUM(5)+B1*CL1/DB11+B2*CL2/DB21+
C     &     B3*CL3/DB31+B4*CL4/DB41+B5*CL5/DB51+B6*CL6/DB61
       XM2(JEX)=XM2(JEX)+B1*B1/DB12+B2*B2/DB22+
     &     B3*B3/DB32+B4*B4/DB42+B5*B5/DB52+B6*B6/DB62
       XM2(JEXL)=XM2(JEXL)+B1*BL1/DB12+B2*BL2/DB22+
     &     B3*BL3/DB32+B4*BL4/DB42+B5*BL5/DB52+B6*BL6/DB62
C       XNUM(6)=XNUM(6)+B1*CL1/DB12+B2*CL2/DB22+
C     &     B3*CL3/DB32+B4*CL4/DB42+B5*CL5/DB52+B6*CL6/DB62
       XM3(JEX)=XM3(JEX)+B1*B1/DB13+B2*B2/DB23+
     &     B3*B3/DB33+B4*B4/DB43+B5*B5/DB53+B6*B6/DB63
       XM3(JEXL)=XM3(JEXL)+B1*BL1/DB13+B2*BL2/DB23+
     &     B3*BL3/DB33+B4*BL4/DB43+B5*BL5/DB53+B6*BL6/DB63
C
C       XNUM(3)=XNUM(3)+B1*CL1/DB13+B2*CL2/DB23+
C     &     B3*CL3/DB33+B4*CL4/DB43+B5*CL5/DB53+B6*CL6/DB63
C
       DI6(JEX)=DI6(JEX)+B1*B1/DB1+B2*B2/DB2+
     &     B3*B3/DB3+B4*B4/DB4+B5*B5/DB5+B6*B6/DB6
       XDENOM(JEX)=XDENOM(JEX)+B1*C1/DB1+B2*C2/DB2+
     &     B3*C3/DB3+B4*C4/DB4+B5*C5/DB5+B6*C6/DB6
       YD1(JEX)=YD1(JEX)+B1*C1/DB1+B2*C2/DB2+
     &     B3*C3/DB3+B4*C4/DB4+B5*C5/DB5+B6*C6/DB6
       XD1(JEX)=XD1(JEX)+B1*C1/DB11+B2*C2/DB21+
     &     B3*C3/DB31+B4*C4/DB41+B5*C5/DB51+B6*C6/DB61
       YD3(JEX)=YD3(JEX)+B1*C1/DB11+B2*C2/DB21+
     &     B3*C3/DB31+B4*C4/DB41+B5*C5/DB51+B6*C6/DB61
       XD2(JEX)=XD2(JEX)+B1*C1/DB12+B2*C2/DB22+
     &     B3*C3/DB32+B4*C4/DB42+B5*C5/DB52+B6*C6/DB62
       YD4(JEX)=YD4(JEX)+B1*C1/DB12+B2*C2/DB22+
     &     B3*C3/DB32+B4*C4/DB42+B5*C5/DB52+B6*C6/DB62
       XD3(JEX)=XD3(JEX)+B1*C1/DB13+B2*C2/DB23+
     &     B3*C3/DB33+B4*C4/DB43+B5*C5/DB53+B6*C6/DB63
       YD2(JEX)=YD2(JEX)+B1*C1/DB13+B2*C2/DB23+
     &     B3*C3/DB33+B4*C4/DB43+B5*C5/DB53+B6*C6/DB63
C       XDENOM(JEX)=XDENOM(JEX)+B1*B1/(DB1*DB1)+
C     &     B2*B2/(DB2*DB2)+B3*B3/(DB3*DB3)+B4*B4/(DB4*DB4)+
C     &     B5*B5/(DB5*DB5)+B6*B6/(DB6*DB6)
       GO TO 150
       END IF
       IF(A.EQ.B) THEN
       XNUM(JEX)=XNUM(JEX)+B2*B2/DB2+B6*B6/DB6
       XNUM(JEXL)=XNUM(JEXL)+B2*BL2/DB2+B6*BL6/DB6
C       XNUM(4)=XNUM(4)+B2*CL2/DB2+B6*CL6/DB6
       XM1(JEX)=XM1(JEX)+B2*B2/DB21+B6*B6/DB61
       XM1(JEXL)=XM1(JEXL)+B2*BL2/DB21+B6*BL6/DB61
C       XNUM(5)=XNUM(5)+B2*CL2/DB21+B6*CL6/DB61
       XM2(JEX)=XM2(JEX)+B2*B2/DB22+B6*B6/DB62
       XM2(JEXL)=XM2(JEXL)+B2*BL2/DB22+B6*BL6/DB62
C       XNUM(6)=XNUM(6)+B2*CL2/DB22+B6*CL6/DB62
       XM3(JEX)=XM3(JEX)+B2*B2/DB23+B6*B6/DB63
       XM3(JEXL)=XM3(JEXL)+B2*BL2/DB23+B6*BL6/DB63
C
C       XNUM(3)=XNUM(3)+B2*CL2/DB23+B6*CL6/DB63
C
       DI6(JEX)=DI6(JEX)+B2*B2/DB2+B6*B6/DB6
       XDENOM(JEX)=XDENOM(JEX)+B2*C2/DB2+B6*C6/DB6
       YD1(JEX)=YD1(JEX)+B2*C2/DB2+B6*C6/DB6
       XD1(JEX)=XD1(JEX)+B2*C2/DB21+B6*C6/DB61
       YD3(JEX)=YD3(JEX)+B2*C2/DB21+B6*C6/DB61
       XD2(JEX)=XD2(JEX)+B2*C2/DB22+B6*C6/DB62
       YD4(JEX)=YD4(JEX)+B2*C2/DB22+B6*C6/DB62
       XD3(JEX)=XD3(JEX)+B2*C2/DB23+B6*C6/DB63
       YD2(JEX)=YD2(JEX)+B2*C2/DB23+B6*C6/DB63
C       XDENOM(JEX)=XDENOM(JEX)+B2*B2/(DB2*DB2)+B6*B6/(DB6*DB6)
       GO TO 150
       END IF
       IF(B.EQ.C) THEN
       XNUM(JEX)=XNUM(JEX)+B1*B1/DB1+B5*B5/DB5
       XNUM(JEXL)=XNUM(JEXL)+B1*BL1/DB1+B5*BL5/DB5
C       XNUM(4)=XNUM(4)+B1*CL1/DB1+B5*CL5/DB5
       XM1(JEX)=XM1(JEX)+B1*B1/DB11+B5*B5/DB51
       XM1(JEXL)=XM1(JEXL)+B1*BL1/DB11+B5*BL5/DB51
C       XNUM(5)=XNUM(5)+B1*CL1/DB11+B5*CL5/DB51
       XM2(JEX)=XM2(JEX)+B1*B1/DB12+B5*B5/DB52
       XM2(JEXL)=XM2(JEXL)+B1*BL1/DB12+B5*BL5/DB52
C       XNUM(6)=XNUM(6)+B1*CL1/DB12+B5*CL5/DB52
       XM3(JEX)=XM3(JEX)+B1*B1/DB13+B5*B5/DB53
       XM3(JEXL)=XM3(JEXL)+B1*BL1/DB13+B5*BL5/DB53
C
C       XNUM(3)=XNUM(3)+B1*CL1/DB13+B5*CL5/DB53
C
       DI6(JEX)=DI6(JEX)+B1*B1/DB1+B5*B5/DB5
       XDENOM(JEX)=XDENOM(JEX)+B1*C1/DB1+B5*C5/DB5
       YD1(JEX)=YD1(JEX)+B1*C1/DB1+B5*C5/DB5
       XD1(JEX)=XD1(JEX)+B1*C1/DB11+B5*C5/DB51
       YD3(JEX)=YD3(JEX)+B1*C1/DB11+B5*C5/DB51
       XD2(JEX)=XD2(JEX)+B1*C1/DB12+B5*C5/DB52
       YD4(JEX)=YD4(JEX)+B1*C1/DB12+B5*C5/DB52
       XD3(JEX)=XD3(JEX)+B1*C1/DB13+B5*C5/DB53
       YD2(JEX)=YD2(JEX)+B1*C1/DB13+B5*C5/DB53
C       XDENOM(JEX)=XDENOM(JEX)+B1*B1/(DB1*DB1)+B5*B5/(DB5*DB5)
       GO TO 150
       END IF
C
 150   CONTINUE
         GO TO 100
        END IF
C *****************************************************
C
C
C *****************************************************
C I>J=K
C
C
C
        IF(I.GT.J.AND.J.EQ.K) THEN
         I1=K
         J1=J
         K1=I
         DO 151,A=1,NU
         DO 151,B=A,NU
         DO 151,C=B,NU
         IF(A.EQ.B.AND.B.EQ.C) GO TO 151
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)+APP(A,B,2)-APP(C,B,1)-APP(A,C,1)
     &-AHH(I1,J1,1)-AHH(K1,J1,1)-AHH(I1,K1,1)
     &+AHH(I1,K1,2)
     &+AHP(I1,A,1)-AHP(I1,A,2)+AHP(I1,B,1)-AHP(I1,B,2)+AHP(I1,C,1)
     &+AHP(J1,A,1)+AHP(J1,B,1)
     &+AHP(J1,C,1)-AHP(J1,C,2)+AHP(K1,A,1)-AHP(K1,A,2)+AHP(K1,B,1)
     &-AHP(K1,B,2)+AHP(K1,C,1)
          AX4=AX(A,B,K1,1)-AX(A,B,K1,2)-AX(B,A,K1,2)+AX(B,A,K1,1)
     &-AX(A,C,K1,2)-AX(B,C,K1,2)-AX(C,A,J1,2)-AX(C,B,J1,2)
     &+AX(A,B,I1,1)-AX(A,B,I1,2)-AX(B,A,I1,2)+AX(B,A,I1,1)
     &-AX(A,C,I1,2)-AX(B,C,I1,2)
        BX4=-BX(A,J1,I1,1)-BX(B,J1,I1,1)-BX(C,I1,J1,1)
     &-BX(A,I1,K1,1)+BX(A,I1,K1,2)+BX(A,K1,I1,2)-BX(A,K1,I1,1)
     &-BX(B,I1,K1,1)+BX(B,I1,K1,2)+BX(B,K1,I1,2)-BX(B,K1,I1,1)
     &-BX(A,J1,K1,1)-BX(B,J1,K1,1)-BX(C,K1,J1,1)
       DB4=ENESD(JEX)+ZA1+ZA2-AX4-BX4
       DB41=ENESD(JEX)+HA1
       DB42=ENESD(JEX)+ZA1
       DB43=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)-APP(C,B,1)-APP(A,C,1)+APP(A,C,2)
     &-AHH(I1,J1,1)-AHH(K1,J1,1)-AHH(I1,K1,1)+AHH(I1,K1,2)
     &+AHP(I1,A,1)-AHP(I1,A,2)+AHP(I1,B,1)+AHP(I1,C,1)
     &-AHP(I1,C,2)+AHP(J1,A,1)+AHP(J1,B,1)-AHP(J1,B,2)
     &+AHP(J1,C,1)+AHP(K1,A,1)-AHP(K1,A,2)+AHP(K1,B,1)
     &+AHP(K1,C,1)-AHP(K1,C,2)
          AX5=-AX(A,B,K1,2)+AX(A,C,K1,1)-AX(A,C,K1,2)-AX(C,A,K1,2)
     &+AX(C,A,K1,1)-AX(C,B,K1,2)-AX(B,A,J1,2)-AX(B,C,J1,2)-AX(A,B,I1,2)
     &+AX(A,C,I1,1)-AX(A,C,I1,2)-AX(C,A,I1,2)+AX(C,A,I1,1)-AX(C,B,I1,2)
        BX5=-BX(A,J1,I1,1)-BX(B,I1,J1,1)-BX(C,J1,I1,1)
     &-BX(A,I1,K1,1)+BX(A,I1,K1,2)+BX(A,K1,I1,2)-BX(A,K1,I1,1)
     &-BX(C,I1,K1,1)+BX(C,I1,K1,2)+BX(C,K1,I1,2)-BX(C,K1,I1,1)
     &-BX(A,J1,K1,1)-BX(B,K1,J1,1)-BX(C,J1,K1,1)
       DB5=ENESD(JEX)+ZA1+ZA2-AX5-BX5
       DB51=ENESD(JEX)+HA1
       DB52=ENESD(JEX)+ZA1
       DB53=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)-APP(C,B,1)+APP(C,B,2)-APP(A,C,1)
     &-AHH(I1,J1,1)-AHH(K1,J1,1)-AHH(I1,K1,1)+AHH(I1,K1,2)
     &+AHP(I1,A,1)+AHP(I1,B,1)-AHP(I1,B,2)+AHP(I1,C,1)
     &-AHP(I1,C,2)+AHP(J1,A,1)-AHP(J1,A,2)+AHP(J1,B,1)
     &+AHP(J1,C,1)+AHP(K1,A,1)+AHP(K1,B,1)
     &-AHP(K1,B,2)+AHP(K1,C,1)-AHP(K1,C,2)
          AX6=-AX(B,A,K1,2)-AX(C,A,K1,2)+AX(B,C,K1,1)-AX(B,C,K1,2)
     &-AX(C,B,K1,2)+AX(C,B,K1,1)-AX(A,B,J1,2)-AX(A,C,J1,2)
     &-AX(B,A,I1,2)-AX(C,A,I1,2)+AX(B,C,I1,1)-AX(B,C,I1,2)
     &-AX(C,B,I1,2)+AX(C,B,I1,1)
        BX6=-BX(A,I1,J1,1)-BX(B,J1,I1,1)-BX(C,J1,I1,1)
     &-BX(B,I1,K1,1)+BX(B,I1,K1,2)+BX(B,K1,I1,2)-BX(B,K1,I1,1)
     &-BX(C,I1,K1,1)+BX(C,I1,K1,2)+BX(C,K1,I1,2)-BX(C,K1,I1,1)
     &-BX(A,K1,J1,1)-BX(B,J1,K1,1)-BX(C,J1,K1,1)
       DB6=ENESD(JEX)+ZA1+ZA2-AX6-BX6
       DB61=ENESD(JEX)+HA1
       DB62=ENESD(JEX)+ZA1
       DB63=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)+APP(A,B,2)-APP(C,B,1)-APP(A,C,1)
     &-AHH(I1,J1,1)-AHH(K1,J1,1)+AHH(K1,J1,2)-AHH(I1,K1,1)
     &+AHP(I1,A,1)+AHP(I1,B,1)+AHP(I1,C,1)
     &-AHP(I1,C,2)+AHP(J1,A,1)-AHP(J1,A,2)+AHP(J1,B,1)-AHP(J1,B,2)
     &+AHP(J1,C,1)+AHP(K1,A,1)-AHP(K1,A,2)+AHP(K1,B,1)
     &-AHP(K1,B,2)+AHP(K1,C,1)
          AX7=AX(A,B,K1,1)-AX(A,B,K1,2)-AX(B,A,K1,2)+AX(B,A,K1,1)
     &-AX(A,C,K1,2)-AX(B,C,K1,2)+AX(A,B,J1,1)-AX(A,B,J1,2)-AX(B,A,J1,2)
     &+AX(B,A,J1,1)-AX(A,C,J1,2)-AX(B,C,J1,2)-AX(C,A,I1,2)-AX(C,B,I1,2)
        BX7=-BX(A,I1,J1,1)-BX(B,I1,J1,1)-BX(C,J1,I1,1)
     &-BX(A,I1,K1,1)-BX(B,I1,K1,1)-BX(C,K1,I1,1)
     &-BX(A,J1,K1,1)+BX(A,J1,K1,2)+BX(A,K1,J1,2)-BX(A,K1,J1,1)
     &-BX(B,J1,K1,1)+BX(B,J1,K1,2)+BX(B,K1,J1,2)-BX(B,K1,J1,1)
       DB7=ENESD(JEX)+ZA1+ZA2-AX7-BX7
       DB71=ENESD(JEX)+HA1
       DB72=ENESD(JEX)+ZA1
       DB73=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
           ZA2=
     &-APP(A,B,1)-APP(C,B,1)-APP(A,C,1)+APP(A,C,2)
     &-AHH(I1,J1,1)-AHH(K1,J1,1)+AHH(K1,J1,2)-AHH(I1,K1,1)
     &+AHP(I1,A,1)+AHP(I1,B,1)-AHP(I1,B,2)+AHP(I1,C,1)
     &+AHP(J1,A,1)-AHP(J1,A,2)+AHP(J1,B,1)
     &+AHP(J1,C,1)-AHP(J1,C,2)+AHP(K1,A,1)-AHP(K1,A,2)+AHP(K1,B,1)
     &+AHP(K1,C,1)-AHP(K1,C,2)
          AX8=-AX(A,B,K1,2)+AX(A,C,K1,1)-AX(A,C,K1,2)-AX(C,A,K1,2)
     &+AX(C,A,K1,1)-AX(C,B,K1,2)-AX(A,B,J1,2)+AX(A,C,J1,1)-AX(A,C,J1,2)
     &-AX(C,A,J1,2)+AX(C,A,J1,1)-AX(C,B,J1,2)-AX(B,A,I1,2)-AX(B,C,I1,2)
        BX8=-BX(A,I1,J1,1)-BX(B,J1,I1,1)-BX(C,I1,J1,1)
     &-BX(A,I1,K1,1)-BX(B,K1,I1,1)-BX(C,I1,K1,1)
     &-BX(A,J1,K1,1)+BX(A,J1,K1,2)+BX(A,K1,J1,2)-BX(A,K1,J1,1)
     &-BX(C,J1,K1,1)+BX(C,J1,K1,2)+BX(C,K1,J1,2)-BX(C,K1,J1,1)
       DB8=ENESD(JEX)+ZA1+ZA2-AX8-BX8
       DB81=ENESD(JEX)+HA1
       DB82=ENESD(JEX)+ZA1
       DB83=ENESD(JEX)+ZA1+ZA2
          HA1=EH(I1)+EH(J1)+EH(K1)-EP(A)-EP(B)-EP(C)
          ZA1=AH(I1)+AH(J1)+AH(K1)-AP(A)-AP(B)-AP(C)
          ZA2=
     &-APP(A,B,1)-APP(C,B,1)+APP(C,B,2)-APP(A,C,1)
     &-AHH(I1,J1,1)-AHH(K1,J1,1)+AHH(K1,J1,2)-AHH(I1,K1,1)
     &+AHP(I1,A,1)-AHP(I1,A,2)+AHP(I1,B,1)+AHP(I1,C,1)
     &+AHP(J1,A,1)+AHP(J1,B,1)-AHP(J1,B,2)
     &+AHP(J1,C,1)-AHP(J1,C,2)+AHP(K1,A,1)+AHP(K1,B,1)
     &-AHP(K1,B,2)+AHP(K1,C,1)-AHP(K1,C,2)
          AX9=-AX(B,A,K1,2)-AX(C,A,K1,2)+AX(B,C,K1,1)-AX(B,C,K1,2)
     &-AX(C,B,K1,2)+AX(C,B,K1,1)-AX(B,A,J1,2)-AX(C,A,J1,2)+AX(B,C,J1,1)
     &-AX(B,C,J1,2)-AX(C,B,J1,2)+AX(C,B,J1,1)-AX(A,B,I1,2)-AX(A,C,I1,2)
        BX9=-BX(A,J1,I1,1)-BX(B,I1,J1,1)-BX(C,I1,J1,1)
     &-BX(A,K1,I1,1)-BX(B,I1,K1,1)-BX(C,I1,K1,1)
     &-BX(B,J1,K1,1)+BX(B,J1,K1,2)+BX(B,K1,J1,2)-BX(B,K1,J1,1)
     &-BX(C,J1,K1,1)+BX(C,J1,K1,2)+BX(C,K1,J1,2)-BX(C,K1,J1,1)
       DB9=ENESD(JEX)+ZA1+ZA2-AX9-BX9
       DB91=ENESD(JEX)+HA1
       DB92=ENESD(JEX)+ZA1
       DB93=ENESD(JEX)+ZA1+ZA2
C
C
C
C
C       REVERSE ORDER OF A,B,C!!!
       B4=V3(B,C,A)-V3(A,C,B)
       B5=V3(C,B,A)-V3(A,B,C)
       B6=V3(C,A,B)-V3(B,A,C)
       B7=V3(B,A,C)-V3(A,B,C)
       B8=V3(C,A,B)-V3(A,C,B)
       B9=V3(C,B,A)-V3(B,C,A)
C
       BL4=VL3(B,C,A)-VL3(A,C,B)
       BL5=VL3(C,B,A)-VL3(A,B,C)
       BL6=VL3(C,A,B)-VL3(B,A,C)
       BL7=VL3(B,A,C)-VL3(A,B,C)
       BL8=VL3(C,A,B)-VL3(A,C,B)
       BL9=VL3(C,B,A)-VL3(B,C,A)
C
       C4=U3(B,C,A)-U3(A,C,B)
       C5=U3(C,B,A)-U3(A,B,C)
       C6=U3(C,A,B)-U3(B,A,C)
       C7=U3(B,A,C)-U3(A,B,C)
       C8=U3(C,A,B)-U3(A,C,B)
       C9=U3(C,B,A)-U3(B,C,A)
C
C       CL4=UL3(B,C,A)-UL3(A,C,B)
C       CL5=UL3(C,B,A)-UL3(A,B,C)
C       CL6=UL3(C,A,B)-UL3(B,A,C)
C       CL7=UL3(B,A,C)-UL3(A,B,C)
C       CL8=UL3(C,A,B)-UL3(A,C,B)
C       CL9=UL3(C,B,A)-UL3(B,C,A)
C
       IF(A.LT.B.AND.B.LT.C) THEN
       XNUM(JEX)=XNUM(JEX)+B4*B4/DB4+B5*B5/DB5+B6*B6/DB6+B7*B7/DB7+
     &                     B8*B8/DB8+B9*B9/DB9
       XNUM(JEXL)=XNUM(JEXL)+B4*BL4/DB4+B5*BL5/DB5+B6*BL6/DB6+
     &                    B7*BL7/DB7+ B8*BL8/DB8+B9*BL9/DB9
C       XNUM(4)=XNUM(4)+B4*CL4/DB4+B5*CL5/DB5+B6*CL6/DB6+
C     &                    B7*CL7/DB7+ B8*CL8/DB8+B9*CL9/DB9
       XM1(JEX)=XM1(JEX)+B4*B4/DB41+B5*B5/DB51+B6*B6/DB61+B7*B7/DB71+
     &                     B8*B8/DB81+B9*B9/DB91
       XM1(JEXL)=XM1(JEXL)+B4*BL4/DB41+B5*BL5/DB51+B6*BL6/DB61+
     &                    B7*BL7/DB71+ B8*BL8/DB81+B9*BL9/DB91
C       XNUM(5)=XNUM(5)+B4*CL4/DB41+B5*CL5/DB51+B6*CL6/DB61+
C     &                    B7*CL7/DB71+ B8*CL8/DB81+B9*CL9/DB91
       XM2(JEX)=XM2(JEX)+B4*B4/DB42+B5*B5/DB52+B6*B6/DB62+B7*B7/DB72+
     &                     B8*B8/DB82+B9*B9/DB92
       XM2(JEXL)=XM2(JEXL)+B4*BL4/DB42+B5*BL5/DB52+B6*BL6/DB62+
     &                    B7*BL7/DB72+ B8*BL8/DB82+B9*BL9/DB92
C       XNUM(6)=XNUM(6)+B4*CL4/DB42+B5*CL5/DB52+B6*CL6/DB62+
C     &                    B7*CL7/DB72+ B8*CL8/DB82+B9*CL9/DB92
       XM3(JEX)=XM3(JEX)+B4*B4/DB43+B5*B5/DB53+B6*B6/DB63+B7*B7/DB73+
     &                     B8*B8/DB83+B9*B9/DB93
       XM3(JEXL)=XM3(JEXL)+B4*BL4/DB43+B5*BL5/DB53+B6*BL6/DB63+
     &                    B7*BL7/DB73+ B8*BL8/DB83+B9*BL9/DB93
C
C       XNUM(3)=XNUM(3)+B4*CL4/DB43+B5*CL5/DB53+B6*CL6/DB63+
C     &                    B7*CL7/DB73+B8*CL8/DB83+B9*CL9/DB93
C
       DI6(JEX)=DI6(JEX)+B4*B4/DB4+B5*B5/DB5+B6*B6/DB6+B7*B7/DB7+
     &                     B8*B8/DB8+B9*B9/DB9
       XDENOM(JEX)=XDENOM(JEX)+B4*C4/DB4+B5*C5/DB5+B6*C6/DB6+B7*C7/DB7+
     &                     B8*C8/DB8+B9*C9/DB9
       YD1(JEX)=YD1(JEX)+B4*C4/DB4+B5*C5/DB5+B6*C6/DB6+B7*C7/DB7+
     &                     B8*C8/DB8+B9*C9/DB9
       XD1(JEX)=XD1(JEX)+B4*C4/DB41+B5*C5/DB51+B6*C6/DB61+B7*C7/DB71+
     &                     B8*C8/DB81+B9*C9/DB91
       YD3(JEX)=YD3(JEX)+B4*C4/DB41+B5*C5/DB51+B6*C6/DB61+B7*C7/DB71+
     &                     B8*C8/DB81+B9*C9/DB91
       XD2(JEX)=XD2(JEX)+B4*C4/DB42+B5*C5/DB52+B6*C6/DB62+B7*C7/DB72+
     &                     B8*C8/DB82+B9*C9/DB92
       YD4(JEX)=YD4(JEX)+B4*C4/DB42+B5*C5/DB52+B6*C6/DB62+B7*C7/DB72+
     &                     B8*C8/DB82+B9*C9/DB92
       XD3(JEX)=XD3(JEX)+B4*C4/DB43+B5*C5/DB53+B6*C6/DB63+B7*C7/DB73+
     &                     B8*C8/DB83+B9*C9/DB93
       YD2(JEX)=YD2(JEX)+B4*C4/DB43+B5*C5/DB53+B6*C6/DB63+B7*C7/DB73+
     &                     B8*C8/DB83+B9*C9/DB93
C       XDENOM(JEX)=XDENOM(JEX)+B4*B4/(DB4*DB4)+
C     &     B5*B5/(DB5*DB5)+B6*B6/(DB6*DB6)+B7*B7/(DB7*DB7)+
C     &                     B8*B8/(DB8*DB8)+B9*B9/(DB9*DB9)
       GO TO 151
       END IF
       IF(A.EQ.B) THEN
       XNUM(JEX)=XNUM(JEX)+B5*B5/DB5+B9*B9/DB9
       XNUM(JEXL)=XNUM(JEXL)+B5*BL5/DB5+B9*BL9/DB9
C       XNUM(4)=XNUM(4)+B5*CL5/DB5+B9*CL9/DB9
       XM1(JEX)=XM1(JEX)+B5*B5/DB51+B9*B9/DB91
       XM1(JEXL)=XM1(JEXL)+B5*BL5/DB51+B9*BL9/DB91
C       XNUM(5)=XNUM(5)+B5*CL5/DB51+B9*CL9/DB91
       XM2(JEX)=XM2(JEX)+B5*B5/DB52+B9*B9/DB92
       XM2(JEXL)=XM2(JEXL)+B5*BL5/DB52+B9*BL9/DB92
C       XNUM(6)=XNUM(6)+B5*CL5/DB52+B9*CL9/DB92
       XM3(JEX)=XM3(JEX)+B5*B5/DB53+B9*B9/DB93
       XM3(JEXL)=XM3(JEXL)+B5*BL5/DB53+B9*BL9/DB93
C
C       XNUM(3)=XNUM(3)+B5*CL5/DB53+B9*CL9/DB93
C
       DI6(JEX)=DI6(JEX)+B5*B5/DB5+B9*B9/DB9
       XDENOM(JEX)=XDENOM(JEX)+B5*C5/DB5+B9*C9/DB9
       YD1(JEX)=YD1(JEX)+B5*C5/DB5+B9*C9/DB9
       XD1(JEX)=XD1(JEX)+B5*C5/DB51+B9*C9/DB91
       YD3(JEX)=YD3(JEX)+B5*C5/DB51+B9*C9/DB91
       XD2(JEX)=XD2(JEX)+B5*C5/DB52+B9*C9/DB92
       YD4(JEX)=YD4(JEX)+B5*C5/DB52+B9*C9/DB92
       XD3(JEX)=XD3(JEX)+B5*C5/DB53+B9*C9/DB93
       YD2(JEX)=YD2(JEX)+B5*C5/DB53+B9*C9/DB93
C       XDENOM(JEX)=XDENOM(JEX)+B5*B5/(DB5*DB5)+B9*B9/(DB9*DB9)
       GO TO 151
       END IF
       IF(B.EQ.C) THEN
       XNUM(JEX)=XNUM(JEX)+B4*B4/DB4+B8*B8/DB8
       XNUM(JEXL)=XNUM(JEXL)+B4*BL4/DB4+B8*BL8/DB8
C       XNUM(4)=XNUM(4)+B4*CL4/DB4+B8*CL8/DB8
       XM1(JEX)=XM1(JEX)+B4*B4/DB41+B8*B8/DB81
       XM1(JEXL)=XM1(JEXL)+B4*BL4/DB41+B8*BL8/DB81
C       XNUM(5)=XNUM(5)+B4*CL4/DB41+B8*CL8/DB81
       XM2(JEX)=XM2(JEX)+B4*B4/DB42+B8*B8/DB82
       XM2(JEXL)=XM2(JEXL)+B4*BL4/DB42+B8*BL8/DB82
C       XNUM(6)=XNUM(6)+B4*CL4/DB42+B8*CL8/DB82
       XM3(JEX)=XM3(JEX)+B4*B4/DB43+B8*B8/DB83
       XM3(JEXL)=XM3(JEXL)+B4*BL4/DB43+B8*BL8/DB83
C
C       XNUM(3)=XNUM(3)+B4*CL4/DB43+B8*CL8/DB83
C
       DI6(JEX)=DI6(JEX)+B4*B4/DB4+B8*B8/DB8
       XDENOM(JEX)=XDENOM(JEX)+B4*C4/DB4+B8*C8/DB8
       YD1(JEX)=YD1(JEX)+B4*C4/DB4+B8*C8/DB8
       XD1(JEX)=XD1(JEX)+B4*C4/DB41+B8*C8/DB81
       YD3(JEX)=YD3(JEX)+B4*C4/DB41+B8*C8/DB81
       XD2(JEX)=XD2(JEX)+B4*C4/DB42+B8*C8/DB82
       YD4(JEX)=YD4(JEX)+B4*C4/DB42+B8*C8/DB82
       XD3(JEX)=XD3(JEX)+B4*C4/DB43+B8*C8/DB83
       YD2(JEX)=YD2(JEX)+B4*C4/DB43+B8*C8/DB83
C       XDENOM(JEX)=XDENOM(JEX)+B4*B4/(DB4*DB4)+B8*B8/(DB8*DB8)
       GO TO 151
       END IF
C
 151     CONTINUE
         GO TO 100
        END IF
C ************************************
C
 100  CONTINUE
      RETURN
      END
C
C*MODULE MM23     *DECK XT3SQ2CRL_CIMX  -CIM-
      SUBROUTINE XT3SQ2CRL_CIMX(JEX,I,J,K,NO,NU,V3,U3,VL3,
     *                    AH,AP,APP,AHH,AHP,AX,BX,EH,EP,
     *                    NU3s,NC,XV3,XBL,TX,TXs)
C
C ### ORDERING I,J,K - REVERSED HERE
C JEX-NUMBER OF EXCITED STATE
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXAO=8192)
C
C     COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /CIMIDX/ MOCEN(MXAO),ICENA(MXAO),ICENB(MXAO)  !-CIM- 2010.03.01  MO Cent
      INTEGER A,B,C
C
      DIMENSION U3(NU,NU,NU),V3(NU,NU,NU),EH(NO),EP(NU),
     *          AH(NO),AP(NU),VL3(NU,NU,NU),
     *          AHH(NO,NO,2),AHP(NO,NU,2),APP(NU,NU,2),
     *          TX(NO,NO),   !-CIM-
     *          XV3(NC,NU,NU,NU),XBL(0:19,NC,NU3s),   !-CIM-
     *          AX(NU,NU,NO,2),BX(NU,NO,NO,2)
C
      DIMENSION V3s(6),TXs(NC),BBL(0:19)
C
      COMMON /EOMTRP/ DI1(10),DI2(10),DI3(10),DI4(10),DI5(10),DI6(10),
     *                ENESD(10),XNUM(10),XDENOM(10),R0(10),
     *                XM1(10),XM2(10),XM3(10),XD1(10),XD2(10),XD3(10),
     *                YD1(10),YD2(10),YD3(10),YD4(10),XNC3(10),DC3(10),
     *                XGRCORR,XGRCORR1,XGRCORR2,XGRCORR3,XGRCORR4,
     *                XGRCORR5,XGRCORR6,XGRCORR7,CI3GCORR
C
C     DATA TWO/2.0D+00/, ZERO/0.0D+00/
C
C     JEXL=2
C     EEE=ZERO
C
      DO 130 KK=1,NC
         KKK=ICENA(KK)                               !-CIM- 09 MAR 10
         TXs(KK)=TX(K,KKK)
 130  CONTINUE
C
C
C *************************************************************
C
C I>=J>=K    !-CIM-
C
      I1=K
      J1=J
      K1=I
C
C 11 MAR 10 - WL,PP - OPT CR-CCL CODE
C
      EHIJK = EH(I1)+EH(J1)+EH(K1)
      AHIJK = AH(I1)+AH(J1)+AH(K1)
      ZA0HH = -AHH(I1,J1,1)+AHH(I1,J1,2)
     &        -AHH(K1,J1,1)+AHH(K1,J1,2)
     &        -AHH(I1,K1,1)+AHH(I1,K1,2)
      ZA1HH = -AHH(K1,J1,2)-AHH(I1,K1,2)
      ZA2HH = -AHH(K1,J1,2)-AHH(I1,K1,2)
      ZA3HH = -AHH(K1,J1,2)-AHH(I1,K1,2)
      ZA4HH = -AHH(I1,J1,2)-AHH(K1,J1,2)
      ZA5HH = -AHH(I1,J1,2)-AHH(K1,J1,2)
      ZA6HH = -AHH(I1,J1,2)-AHH(K1,J1,2)
      ZA7HH = -AHH(I1,J1,2)-AHH(I1,K1,2)
      ZA8HH = -AHH(I1,J1,2)-AHH(I1,K1,2)
      ZA9HH = -AHH(I1,J1,2)-AHH(I1,K1,2)
C
      N=0
      DO 149,A=1,NU
         AIJ1 = -BX(A,I1,J1,1)+BX(A,I1,J1,2)+BX(A,J1,I1,2)-BX(A,J1,I1,1)
         AIK1 = -BX(A,I1,K1,1)+BX(A,I1,K1,2)+BX(A,K1,I1,2)-BX(A,K1,I1,1)
         AJK1 = -BX(A,J1,K1,1)+BX(A,J1,K1,2)+BX(A,K1,J1,2)-BX(A,K1,J1,1)
C
         BX1A = AIJ1 -BX(A,K1,I1,1)-BX(A,K1,J1,1)
         BX2A = AIJ1 -BX(A,K1,I1,1)-BX(A,K1,J1,1)
         BX3A =      -BX(A,I1,K1,1)-BX(A,J1,K1,1)
         BX4A = AIK1 -BX(A,J1,I1,1)-BX(A,J1,K1,1)
         BX5A = AIK1 -BX(A,J1,I1,1)-BX(A,J1,K1,1)
         BX6A =      -BX(A,I1,J1,1)-BX(A,K1,J1,1)
         BX7A = AJK1 -BX(A,I1,J1,1)-BX(A,I1,K1,1)
         BX8A = AJK1 -BX(A,I1,J1,1)-BX(A,I1,K1,1)
         BX9A =      -BX(A,J1,I1,1)-BX(A,K1,I1,1)
C
      DO 149,B=A,NU
         ABK1 = AX(A,B,K1,1)-AX(A,B,K1,2)-AX(B,A,K1,2)+AX(B,A,K1,1)
         ABJ1 = AX(A,B,J1,1)-AX(A,B,J1,2)-AX(B,A,J1,2)+AX(B,A,J1,1)
         ABI1 = AX(A,B,I1,1)-AX(A,B,I1,2)-AX(B,A,I1,2)+AX(B,A,I1,1)
         BIJ1 = -BX(B,I1,J1,1)+BX(B,I1,J1,2)+BX(B,J1,I1,2)-BX(B,J1,I1,1)
         BIK1 = -BX(B,I1,K1,1)+BX(B,I1,K1,2)+BX(B,K1,I1,2)-BX(B,K1,I1,1)
         BJK1 = -BX(B,J1,K1,1)+BX(B,J1,K1,2)+BX(B,K1,J1,2)-BX(B,K1,J1,1)
C
         BX1AB= BX1A +BIJ1 -BX(B,K1,I1,1)-BX(B,K1,J1,1)
         BX2AB= BX2A       -BX(B,I1,K1,1)-BX(B,J1,K1,1)
         BX3AB= BX3A +BIJ1 -BX(B,K1,I1,1)-BX(B,K1,J1,1)
         BX4AB= BX4A +BIK1 -BX(B,J1,I1,1)-BX(B,J1,K1,1)
         BX5AB= BX5A       -BX(B,I1,J1,1)-BX(B,K1,J1,1)
         BX6AB= BX6A +BIK1 -BX(B,J1,I1,1)-BX(B,J1,K1,1)
         BX7AB= BX7A +BJK1 -BX(B,I1,J1,1)-BX(B,I1,K1,1)
         BX8AB= BX8A       -BX(B,J1,I1,1)-BX(B,K1,I1,1)
         BX9AB= BX9A +BJK1 -BX(B,I1,J1,1)-BX(B,I1,K1,1)
C
      DO 149,C=B,NU
         N=N+1
         IF(A.EQ.B.AND.B.EQ.C) GO TO 149
C
C 11 MAR 10 - WL,PP - OPT CR-CCL CODE
         V3s(1) = V3(A,B,C)
         V3s(2) = V3(A,C,B)
         V3s(3) = V3(B,A,C)
         V3s(4) = V3(B,C,A)
         V3s(5) = V3(C,A,B)
         V3s(6) = V3(C,B,A)

         HA1=EHIJK-EP(A)-EP(B)-EP(C)
         ZA0=AHIJK-AP(A)-AP(B)-AP(C)
         DB01=ENESD(JEX)+HA1
C        DB02=ENESD(JEX)+ZA0
C
         ZA0 = ZA0+ZA0HH
     &        -APP(A,B,1)+APP(A,B,2)
     &        -APP(C,B,1)+APP(C,B,2)
     &        -APP(A,C,1)+APP(A,C,2)
     &          +AHP(I1,A,1)-AHP(I1,A,2)
     &          +AHP(I1,B,1)-AHP(I1,B,2)
     &          +AHP(I1,C,1)-AHP(I1,C,2)
     &        +AHP(J1,A,1)-AHP(J1,A,2)
     &        +AHP(J1,B,1)-AHP(J1,B,2)
     &        +AHP(J1,C,1)-AHP(J1,C,2)
     &          +AHP(K1,A,1)-AHP(K1,A,2)
     &          +AHP(K1,B,1)-AHP(K1,B,2)
     &          +AHP(K1,C,1)-AHP(K1,C,2)
C
         ACK1 = AX(A,C,K1,1)-AX(A,C,K1,2)-AX(C,A,K1,2)+AX(C,A,K1,1)
         ACJ1 = AX(A,C,J1,1)-AX(A,C,J1,2)-AX(C,A,J1,2)+AX(C,A,J1,1)
         ACI1 = AX(A,C,I1,1)-AX(A,C,I1,2)-AX(C,A,I1,2)+AX(C,A,I1,1)
         BCK1 = AX(B,C,K1,1)-AX(B,C,K1,2)-AX(C,B,K1,2)+AX(C,B,K1,1)
         BCJ1 = AX(B,C,J1,1)-AX(B,C,J1,2)-AX(C,B,J1,2)+AX(C,B,J1,1)
         BCI1 = AX(B,C,I1,1)-AX(B,C,I1,2)-AX(C,B,I1,2)+AX(C,B,I1,1)
C
         CIJ1 = -BX(C,I1,J1,1)+BX(C,I1,J1,2)+BX(C,J1,I1,2)-BX(C,J1,I1,1)
         CIK1 = -BX(C,I1,K1,1)+BX(C,I1,K1,2)+BX(C,K1,I1,2)-BX(C,K1,I1,1)
         CJK1 = -BX(C,J1,K1,1)+BX(C,J1,K1,2)+BX(C,K1,J1,2)-BX(C,K1,J1,1)
C
C
         AX0 = ABK1+ACK1+BCK1 + ABJ1+ACJ1+BCJ1 + ABI1+ACI1+BCI1
         BX0 = AIJ1+BIJ1+CIJ1 + AIK1+BIK1+CIK1 + AJK1+BJK1+CJK1
         DB03=ENESD(JEX)+ZA0  !-CIM0 ZA1+ZA2 --> ZA0
         DB0=DB03-AX0-BX0
C
         ZA1 = ZA0-APP(C,B,2)-APP(A,C,2)+ZA1HH
     &            +AHP(I1,C,2)+AHP(J1,C,2)+AHP(K1,A,2)+AHP(K1,B,2)
         AX1 = ABJ1+ABI1 -AX(C,A,K1,2)-AX(C,B,K1,2)
     &                   -AX(A,C,J1,2)-AX(B,C,J1,2)
     &                   -AX(A,C,I1,2)-AX(B,C,I1,2)
         BX1 = BX1AB -BX(C,I1,K1,1)-BX(C,J1,K1,1)
         DB13=ENESD(JEX)+ZA1
         DB1=DB13-AX1-BX1
C
         ZA2 = ZA0-APP(A,B,2)-APP(C,B,2)+ZA2HH
     &            +AHP(I1,B,2)+AHP(J1,B,2)+AHP(K1,A,2)+AHP(K1,C,2)
         AX2 = ACJ1+ACI1 -AX(B,A,K1,2)-AX(B,C,K1,2)
     &                   -AX(A,B,J1,2)-AX(C,B,J1,2)
     &                   -AX(A,B,I1,2)-AX(C,B,I1,2)
         BX2 = BX2AB+CIJ1 -BX(C,K1,I1,1)-BX(C,K1,J1,1)
         DB23=ENESD(JEX)+ZA2
         DB2=DB23-AX2-BX2
C
         ZA3 = ZA0-APP(A,B,2)-APP(A,C,2)+ZA3HH
     &            +AHP(I1,A,2)+AHP(J1,A,2)+AHP(K1,B,2)+AHP(K1,C,2)
         AX3 = BCJ1+BCI1 -AX(A,B,K1,2)-AX(A,C,K1,2)
     &                   -AX(B,A,J1,2)-AX(C,A,J1,2)
     &                   -AX(B,A,I1,2)-AX(C,A,I1,2)
         BX3 = BX3AB +CIJ1 -BX(C,K1,I1,1)-BX(C,K1,J1,1)
         DB33=ENESD(JEX)+ZA3
         DB3=DB33-AX3-BX3
C
         ZA4 = ZA0-APP(C,B,2)-APP(A,C,2)+ZA4HH
     &            +AHP(I1,C,2)+AHP(J1,A,2)+AHP(J1,B,2)+AHP(K1,C,2)
         AX4 = ABK1+ABI1 -AX(A,C,K1,2)-AX(B,C,K1,2)
     &                   -AX(C,A,J1,2)-AX(C,B,J1,2)
     &                   -AX(A,C,I1,2)-AX(B,C,I1,2)
         BX4 = BX4AB -BX(C,I1,J1,1)-BX(C,K1,J1,1)
         DB43=ENESD(JEX)+ZA4
         DB4=DB43-AX4-BX4
C
         ZA5 = ZA0-APP(A,B,2)-APP(C,B,2)+ZA5HH
     &            +AHP(I1,B,2)+AHP(J1,A,2)+AHP(J1,C,2)+AHP(K1,B,2)
         AX5 = ACK1+ACI1 -AX(A,B,K1,2)-AX(C,B,K1,2)
     &                   -AX(B,A,J1,2)-AX(B,C,J1,2)
     &                   -AX(A,B,I1,2)-AX(C,B,I1,2)
         BX5 = BX5AB +CIK1 -BX(C,J1,I1,1)-BX(C,J1,K1,1)
         DB53=ENESD(JEX)+ZA5
         DB5=DB53-AX5-BX5
C
         ZA6 = ZA0-APP(A,B,2)-APP(A,C,2)+ZA6HH
     &            +AHP(I1,A,2)+AHP(J1,B,2)+AHP(J1,C,2)+AHP(K1,A,2)
         AX6 = BCK1+BCI1 -AX(B,A,K1,2)-AX(C,A,K1,2)
     &                   -AX(A,B,J1,2)-AX(A,C,J1,2)
     &                   -AX(B,A,I1,2)-AX(C,A,I1,2)
         BX6 = BX6AB +CIK1 -BX(C,J1,I1,1)-BX(C,J1,K1,1)
         DB63=ENESD(JEX)+ZA6
         DB6=DB63-AX6-BX6
C
         ZA7 = ZA0-APP(C,B,2)-APP(A,C,2)+ZA7HH
     &            +AHP(I1,A,2)+AHP(I1,B,2)+AHP(J1,C,2)+AHP(K1,C,2)
         AX7 = ABK1+ABJ1 -AX(A,C,K1,2)-AX(B,C,K1,2)
     &                   -AX(A,C,J1,2)-AX(B,C,J1,2)
     &                   -AX(C,A,I1,2)-AX(C,B,I1,2)
         BX7 = BX7AB -BX(C,J1,I1,1)-BX(C,K1,I1,1)
         DB73=ENESD(JEX)+ZA7
         DB7=DB73-AX7-BX7
C
         ZA8 = ZA0-APP(A,B,2)-APP(C,B,2)+ZA8HH
     &            +AHP(I1,A,2)+AHP(I1,C,2)+AHP(J1,B,2)+AHP(K1,B,2)
         AX8 = ACK1+ACJ1 -AX(A,B,K1,2)-AX(C,B,K1,2)
     &                   -AX(A,B,J1,2)-AX(C,B,J1,2)
     &                   -AX(B,A,I1,2)-AX(B,C,I1,2)
         BX8 = BX8AB +CJK1 -BX(C,I1,J1,1)-BX(C,I1,K1,1)
         DB83=ENESD(JEX)+ZA8
         DB8=DB83-AX8-BX8
C
         ZA9 = ZA0-APP(A,B,2)-APP(A,C,2)+ZA9HH
     &            +AHP(I1,B,2)+AHP(I1,C,2)+AHP(J1,A,2)+AHP(K1,A,2)
         AX9 = BCK1+BCJ1 -AX(B,A,K1,2)-AX(C,A,K1,2)
     &                   -AX(B,A,J1,2)-AX(C,A,J1,2)
     &                   -AX(A,B,I1,2)-AX(A,C,I1,2)
         BX9 = BX9AB +CJK1 -BX(C,I1,J1,1)-BX(C,I1,K1,1)
         DB93=ENESD(JEX)+ZA9
         DB9=DB93-AX9-BX9
C
C
         BL0 = VL3(C,B,A)-VL3(B,C,A)-VL3(C,A,B)+
     *         VL3(A,C,B)+VL3(B,A,C)-VL3(A,B,C)
         BL1 = VL3(C,B,A)-VL3(C,A,B)
         BL2 = VL3(B,C,A)-VL3(B,A,C)
         BL3 = VL3(A,C,B)-VL3(A,B,C)
         BL4 = VL3(B,C,A)-VL3(A,C,B)
         BL5 = VL3(C,B,A)-VL3(A,B,C)
         BL6 = VL3(C,A,B)-VL3(B,A,C)
         BL7 = VL3(B,A,C)-VL3(A,B,C)
         BL8 = VL3(C,A,B)-VL3(A,C,B)
         BL9 = VL3(C,B,A)-VL3(B,C,A)
C
C ---    DB01 FOR CR-CC(2,3),A ---CIM-
C ---    DB02 FOR CR-CC(2,3),B ---CIM-
C ---    DB?3 FOR CR-CC(2,3),C ---CIM-
C ---    DB?  FOR CR-CC(2,3),D ---CIM-
C
         BBL(0)=BL0/DB0 
         BBL(1)=BL1/DB1 
         BBL(2)=BL2/DB2 
         BBL(3)=BL3/DB3 
         BBL(4)=BL4/DB4 
         BBL(5)=BL5/DB5 
         BBL(6)=BL6/DB6 
         BBL(7)=BL7/DB7 
         BBL(8)=BL8/DB8 
         BBL(9)=BL9/DB9 
C      
         BBL(10)=BL0/DB01
         BBL(11)=BL1/DB01
         BBL(12)=BL2/DB01
         BBL(13)=BL3/DB01
         BBL(14)=BL4/DB01
         BBL(15)=BL5/DB01
         BBL(16)=BL6/DB01
         BBL(17)=BL7/DB01
         BBL(18)=BL8/DB01
         BBL(19)=BL9/DB01
C
         IF (A.LT.B.AND.B.LT.C) THEN
            DO 950 KK=1,NC              !-CIM- 2010.03.09
               XV3(KK,A,B,C)=XV3(KK,A,B,C)+V3s(1)*TXs(KK)
               XV3(KK,A,C,B)=XV3(KK,A,C,B)+V3s(2)*TXs(KK)
               XV3(KK,B,A,C)=XV3(KK,B,A,C)+V3s(3)*TXs(KK)
               XV3(KK,B,C,A)=XV3(KK,B,C,A)+V3s(4)*TXs(KK)
               XV3(KK,C,A,B)=XV3(KK,C,A,B)+V3s(5)*TXs(KK)
               XV3(KK,C,B,A)=XV3(KK,C,B,A)+V3s(6)*TXs(KK)
 950        CONTINUE
         ELSE IF (A.EQ.B) THEN
            DO 951 KK=1,NC
               XV3(KK,A,B,C)=XV3(KK,A,B,C)+V3s(1)*TXs(KK)
               XV3(KK,A,C,B)=XV3(KK,A,C,B)+V3s(2)*TXs(KK)
               XV3(KK,C,A,B)=XV3(KK,C,A,B)+V3s(5)*TXs(KK)
 951        CONTINUE
         ELSE IF(B.EQ.C) THEN
            DO 952 KK=1,NC
               XV3(KK,A,B,C)=XV3(KK,A,B,C)+V3s(1)*TXs(KK)
               XV3(KK,B,A,C)=XV3(KK,B,A,C)+V3s(3)*TXs(KK)
               XV3(KK,B,C,A)=XV3(KK,B,C,A)+V3s(4)*TXs(KK)
 952        CONTINUE
         END IF
C
         DO 955 KK=1,NC
            DO 956 LL=0,19
               XBL(LL,KK,N)=XBL(LL,KK,N)+BBL(LL)*TXs(KK)
 956        CONTINUE
 955     CONTINUE
C
 149  CONTINUE
C
      RETURN
      END
C
C*MODULE MM23     *DECK XT3SQ2CRL_CIME  -CIM-
      SUBROUTINE XT3SQ2CRL_CIME(NO,NU,NU3s,NC,XV3,
     *     XBL,I,J,ECIM)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXAO=8192)
C
C     COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /CIMIDX/ MOCEN(MXAO),ICENA(MXAO),ICENB(MXAO)  !-CIM- 2010.03.01  MO Cent
      INTEGER A,B,C
C
      DIMENSION XV3(NC,NU,NU,NU),XBL(0:19,NC,NU3s),ECIM(NO*2),XB(0:9)
C
      DATA TWO/2.0D+00/, ZERO/0.0D+00/, HALF/0.5D+00/
C
C *************************************************************
         N=0
         DO 149,A=1,NU
         DO 149,B=A,NU
         DO 149,C=B,NU
            N=N+1
         IF(A.EQ.B.AND.B.EQ.C) GO TO 149
C
       IF(A.LT.B.AND.B.LT.C) THEN
C        EEE=EEE+TWO*(B0*BL0/DB0+B1*BL1/DB1+B2*BL2/DB2+
C    &     B3*BL3/DB3+B4*BL4/DB4+B5*BL5/DB5+B6*BL6/DB6+B7*BL7/DB7+
C    &                     B8*BL8/DB8+B9*BL9/DB9)
         DO 150 KK=1,NC
            KKK=ICENA(KK)                               !-CIM- 2009.05.07
            XB(0)=XV3(KK,C,B,A)-XV3(KK,B,C,A)
            XB(0)=XB(0)-XV3(KK,C,A,B)+XV3(KK,A,C,B)
            XB(0)=XB(0)+XV3(KK,B,A,C)-XV3(KK,A,B,C)
            XB(1)=XV3(KK,C,B,A)-XV3(KK,C,A,B)
            XB(2)=XV3(KK,B,C,A)-XV3(KK,B,A,C)
            XB(3)=XV3(KK,A,C,B)-XV3(KK,A,B,C)
            XB(4)=XV3(KK,B,C,A)-XV3(KK,A,C,B)
            XB(5)=XV3(KK,C,B,A)-XV3(KK,A,B,C)
            XB(6)=XV3(KK,C,A,B)-XV3(KK,B,A,C)
            XB(7)=XV3(KK,B,A,C)-XV3(KK,A,B,C)
            XB(8)=XV3(KK,C,A,B)-XV3(KK,A,C,B)
            XB(9)=XV3(KK,C,B,A)-XV3(KK,B,C,A)
            EEE= ZERO
            EEE1= ZERO
            DO 160 LL=0,9
               EEE= EEE+XB(LL)*XBL(LL,KK,N)
               EEE1= EEE1+XB(LL)*XBL(LL+10,KK,N)
 160        CONTINUE
            IF (I.NE.J) THEN
               ECIM(KKK)=ECIM(KKK)+EEE*TWO         !-CIM- 2009.05.07 KK --> KKK
               ECIM(KKK+NO)=ECIM(KKK+NO)+EEE1*TWO  !-CIM- 2009.05.07 KK --> KKK
            ELSE
               ECIM(KKK)=ECIM(KKK)+EEE             !-CIM- 2009.05.07 KK --> KKK
               ECIM(KKK+NO)=ECIM(KKK+NO)+EEE1      !-CIM- 2009.05.07 KK --> KKK
            ENDIF
 150     CONTINUE
         GO TO 149
       END IF
C
       IF(A.EQ.B) THEN
C        EEE=EEE+B2*BL2/DB2+B3*BL3/DB3+B5*BL5/DB5+
C    &                     B6*BL6/DB6+B8*BL8/DB8+B9*BL9/DB9
         DO 151 KK=1,NC
            KKK=ICENA(KK)                               !-CIM- 2009.05.07
            XB(2)=XV3(KK,B,C,A)-XV3(KK,B,A,C)
            XB(3)=XV3(KK,A,C,B)-XV3(KK,A,B,C)
            XB(5)=XV3(KK,C,B,A)-XV3(KK,A,B,C)
            XB(6)=XV3(KK,C,A,B)-XV3(KK,B,A,C)
            XB(8)=XV3(KK,C,A,B)-XV3(KK,A,C,B)
            XB(9)=XV3(KK,C,B,A)-XV3(KK,B,C,A)
            EEE=     XB(2)*XBL(2,KK,N)+XB(3)*XBL(3,KK,N)
            EEE= EEE+XB(5)*XBL(5,KK,N)+XB(6)*XBL(6,KK,N)
            EEE= EEE+XB(8)*XBL(8,KK,N)+XB(9)*XBL(9,KK,N)
            EEE1=      XB(2)*XBL(12,KK,N)+XB(3)*XBL(13,KK,N)
            EEE1= EEE1+XB(5)*XBL(15,KK,N)+XB(6)*XBL(16,KK,N)
            EEE1= EEE1+XB(8)*XBL(18,KK,N)+XB(9)*XBL(19,KK,N)
            IF (I.NE.J) THEN
               ECIM(KKK)=ECIM(KKK)+EEE            !-CIM- 2009.05.07 KK --> KKK
               ECIM(KKK+NO)=ECIM(KKK+NO)+EEE1     !-CIM- 2009.05.07 KK --> KKK
            ELSE
               ECIM(KKK)=ECIM(KKK)+EEE*HALF         !-CIM- 2009.05.07 KK --> KKK
               ECIM(KKK+NO)=ECIM(KKK+NO)+EEE1*HALF  !-CIM- 2009.05.07 KK --> KKK
            ENDIF
 151     CONTINUE
         GO TO 149
       END IF
C
       IF(B.EQ.C) THEN
C        EEE=EEE+B1*BL1/DB1+B2*BL2/DB2+
C    &     B4*BL4/DB4+B5*BL5/DB5+B7*BL7/DB7+B8*BL8/DB8
         DO 152 KK=1,NC
            KKK=ICENA(KK)                               !-CIM- 2009.05.07
            XB(1)=XV3(KK,C,B,A)-XV3(KK,C,A,B)
            XB(2)=XV3(KK,B,C,A)-XV3(KK,B,A,C)
            XB(4)=XV3(KK,B,C,A)-XV3(KK,A,C,B)
            XB(5)=XV3(KK,C,B,A)-XV3(KK,A,B,C)
            XB(7)=XV3(KK,B,A,C)-XV3(KK,A,B,C)
            XB(8)=XV3(KK,C,A,B)-XV3(KK,A,C,B)
            EEE=     XB(1)*XBL(1,KK,N)+XB(2)*XBL(2,KK,N)
            EEE= EEE+XB(4)*XBL(4,KK,N)+XB(5)*XBL(5,KK,N)
            EEE= EEE+XB(7)*XBL(7,KK,N)+XB(8)*XBL(8,KK,N)
            EEE1=      XB(1)*XBL(11,KK,N)+XB(2)*XBL(12,KK,N)
            EEE1= EEE1+XB(4)*XBL(14,KK,N)+XB(5)*XBL(15,KK,N)
            EEE1= EEE1+XB(7)*XBL(17,KK,N)+XB(8)*XBL(18,KK,N)
            IF (I.NE.J) THEN
               ECIM(KKK)=ECIM(KKK)+EEE             !-CIM- 2009.05.07
               ECIM(KKK+NO)=ECIM(KKK+NO)+EEE1      !-CIM- 2009.05.07
            ELSE
               ECIM(KKK)=ECIM(KKK)+EEE*HALF        !-CIM- 2009.05.07
               ECIM(KKK+NO)=ECIM(KKK+NO)+EEE1*HALF !-CIM- 2009.05.07
            ENDIF
 152     CONTINUE
         GO TO 149
       END IF
C
 149     CONTINUE
C
      RETURN
      END
C
C
C     *** Based on mp2.src ***
C
C*MODULE MP2     *DECK MP2NRG_CIM
      SUBROUTINE MP2NRG_CIM
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL SOME,OUT,DBUG,DIRSCF,PACK2E,FDIFF,ABEL,ABELPT,
     *        GOPARR,DSKWRK,MASWRK,LMOMP2,DIRTRF
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXGSH=30, MXG2=MXGSH*MXGSH,
     *           MXRT=100, MXATM=2000 )
C
      COMMON /COMPE2/ E2PARR,E2OPOS
      COMMON /DIRMEM/ LPQRJ,IVEC,IDEN,IFCK,NUM,NOCC,NDIM,MINPQ,MAXPQ
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUC,EELEC,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),edisp
      COMMON /FMCOM / X(1)
C     COMMON /IJPAIR/ IA(MXAO)
      COMMON /INFOA / NAT,ICH,MUL,MNUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /INTOPT/ ISCHWZ,IECP,NECP,IEFLD
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /INT2IC/ NINTIC,ININTIC,NXXIC,LBUFPIC,LIXIC,LABSIX,NINTIX
      COMMON /MP2DAF/ IDAF20,NAV20
      COMMON /MP2LOC/ LMOMP2
      COMMON /MP2PAR/ OSPT,CODEMP,SCSPT,TOL,METHOD,NWDMP2,MEMPRI,MPPROP,
     *                NACORE,NBCORE,NOA,NOB,NO,NBF,NOMIT,MOCPHF,MAXITC
      COMMON /MP2PRT/ SOME,OUT,DBUG
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /OPTSCF/ DIRSCF,FDIFF
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                TSYM(432),INVT(48),NT
      COMMON /TRFOPT/ CUTTRF,NWDTRF,MPTRAN,ITRFAO,NOSYMT,IPURTF,DIRTRF
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
C
C     SPIN-COMPONENT-SCALED (SCS) PARAMETER IN THE LITERATURE
C          S.GRIMME, J. CHEM. PHYS. 118, 9095-9102(2003)
      PARAMETER (FOPOS=1.2D+00, FPARR=1.0D+00/3.0D+00)
C
      DATA CHECK/8HCHECK   /, RMP2/8HMP2     /,ANONE/8HNONE    /
C
C     ----- MAIN CLOSED-SHELL MP2 ENERGY DRIVER -----
C
      SOME=NPRINT.NE.-5 .AND. MASWRK
      OUT =EXETYP.EQ.RMP2 .AND. MASWRK
      IF(MASWRK) WRITE(IW,9000) NACORE,NOA,NQMT,NBF
C
      CALL GOTFM(NGOTMX)
      IF(NWDMP2.GT.0) NGOTMX=MIN(NGOTMX,NWDMP2)
C
      NOC  = NOA - NACORE
      NVIR = NO  - NOA
      NORB = NO  - NACORE
      NBF2 = (NBF*NBF+NBF)/2
      NBF3 = NBF * NBF
C
      NUM  = NBF
      IDEN = 0
      IFCK = 0
      NDIM  = MAX(NBF2,NVIR*NOC)
C
      E2PARR=0.0D+00
      E2OPOS=0.0D+00
C
C        ---- OPTION TO DEFEAT SYMMETRY USAGE ----
C
      ABEL=ABELPT()
      IF(NOSYMT.EQ.1) CALL SYMOFF
C
C    ----- MEMORY POINTERS FOR MP2 ENERGY -----
C
C IVEC    : MATRIX OF MO COEFFICIENTS        NBF  *  NBF
C IPTR1   : PARTIALLY TRANSFORMED INTEGRAL   NOC  *  NBF
C IPTR2   : PARTIALLY TRANSFORMED INTEGRAL   NVIR *  NBF
C IENG    : ORBITAL ENERGIES                 NBF
C ILAB    : MOSLAB    |                      NBF
C IIRP    : MOSIRP    |---> SEE SYM          NBF
C IDEG    : MOSDEG    |                      NBF
C IWRK    : WORK: S, MO, ETC.                NBF * NBF
C         : HOLDS (PQ|RJ)                    NBF * NBF OR NINTMX
C IWRK2   : HOLDS Q MATRIX                   (NBF*(NBF+1))/2
C         : HOLDS INDICES FOR (PQ|RS)        NBF * NBF OR NINTMX
C IWRK3   : TEMP STORAGE OF Q*S*V            NBF
C IEIJ    : PAIR ENERGY                      NOC * NOC
C IEI     : ORBITAL CONTRIBUTION TO E2       NOC
C IMINT   : MO INTEGRAL (IA|JB) (OUT-OF-CORE)NOC * NDIM * LPASS
C IPQRJ   : PARTIALLY TRANSFORMED INTEGRAL   NBF * NDIM * LPASS
C IIODA   : TEMP STORAGE FOR MO INT FOR IO   NOC * NVIR
C
C  ----- THE FOLLOWING LIST IS FOR DIRECT MP2 -----
C IGHND   : AO INTEGRALS FOR DIRECT METHOD   MAXG --> NANGM**4
C IXINTS  : EXCHANGE INTEGRALS               (NSHELL**2 + NSHELL)/2
C IDDIJ   : WORK SPACE FOR AO INTEGRAL       49*MXG2
C
C
      CALL VALFM(LOADFM)
      IVEC   = 1    + LOADFM
      IPTR1  = IVEC + NBF*NBF
      IPTR2  = IPTR1+ NOC*NBF
      IENG   = IPTR2+ NVIR*NBF
      ILAB   = IENG + NBF
      IIRP   = ILAB + NBF
      IDEG   = IIRP + NBF
      LAST   = IDEG + NBF
      NEEDA  = LAST - LOADFM - 1
      CALL GETFM(NEEDA)
C
C    ----- SET UP TRANSPOSE MATRIX OF MO COEFFICIENTS -----
C
      CALL VALFM(LOADFM)
      IWRK   = 1    + LOADFM
      LAST   = IWRK + NBF*NBF
      NEEDB  = LAST - LOADFM - 1
      CALL GETFM(NEEDB)
C
      CALL DAREAD(IDAF,IODA,X(IWRK),NBF3,15,0)
      CALL DAREAD(IDAF,IODA,X(IENG),NBF ,17,0)
C
      MAXC = IDAMAX(NBF*NQMT,X(IWRK),1)
      IF(ABS(X(IWRK+MAXC-1)).GT.1.0D+02) THEN
         MAXM = 1 + MAXC/NUM
         MAXA = MAXC - NUM*(MAXM-1)
         IF(MASWRK) WRITE(IW,9020) ABS(X(IWRK+MAXC-1)),MAXA,MAXM
      END IF
C
C          SUBTRACTING CORE ORBITALS
C
      DO 15 J=1,NORB
         X(J+IENG-1)=X(J+NACORE +IENG-1)
         DO 10 I=1,NBF
            X(I+ NBF*(J-1)+IVEC-1)=X(I+NBF*(J-1+NACORE)+IWRK-1)
  10     CONTINUE
  15  CONTINUE
C
C          TRANSPOSING OCCUPIED SPACE
C
      DO 25 J=1,NOC
         DO 20 I=1,NBF
            X(J+NOC*(I-1)+IPTR1-1)=X(I+NBF*(J-1+NACORE)+IWRK-1)
   20    CONTINUE
   25 CONTINUE
C
C          TRANSPOSING VIRTUAL SPACE
C
      DO 35 J=1,NVIR
         DO 30 I=1,NBF
            X(J+NVIR*(I-1)+IPTR2-1)=X(I+NBF*(J-1+NOA)+IWRK-1)
   30    CONTINUE
   35 CONTINUE
      CALL RETFM(NEEDB)
C
C     ----- ASSIGN -IRREP- LABEL TO MO'S -----
C
      CALL VALFM(LOADFM)
      IWRK  = 1     + LOADFM
      IWRK2 = IWRK  + NBF2
      IWRK3 = IWRK2 + NBF3
      LAST  = IWRK3 + NBF
      NEEDC = LAST -LOADFM - 1
      CALL GETFM(NEEDC)
      IF(EXETYP.EQ.CHECK) GO TO 50
C
      CALL DAREAD(IDAF,IODA,X(IWRK),NBF2,12,0)
      CALL DAREAD(IDAF,IODA,X(IWRK2),NBF3,45,0)
C     CALL TRFSYM(X(ILAB),X(IIRP),X(IDEG),X(IWRK2),X(IWRK),X(IVEC),
C    *         X(IWRK3),IA,NQMT,NBF,NORB,NBF)
C
   50 CONTINUE
      CALL RETFM(NEEDC)
C
      NTSAVE = NT
      IF(DIRSCF  .AND.  .NOT.ABEL) NT=1
C
C     ----- INTEGRAL STORAGE FOR DIRECT OR CONVENTIONAL MP2 -----
C     BEWARE!  THE DIRECT TRANSFORMATIONS PASS STORAGE LOCATIONS
C     FOR THE TRANSFORMED INTEGRAL ARRAY AND THE VECTORS THROUGH
C     THE -LPQRJ- AND -IVEC- VARIABLES IN COMMON.  THE NUMBER OF
C     MO-S IN THE 1ST INDEX TRANSFORM IS -NOCC-, WHICH IS SET LATER.
C
      CALL BASCHK(LMAX)
                    NANGM =  4
      IF(LMAX.EQ.2) NANGM =  6
      IF(LMAX.EQ.3) NANGM = 10
      IF(LMAX.EQ.4) NANGM = 15
      IF(LMAX.EQ.5) NANGM = 21
      IF(LMAX.EQ.6) NANGM = 28
      MAXG = NANGM**4
      NSH2 = (NSHELL*NSHELL+NSHELL)/2
C
      CALL VALFM(LOADFM)
      MINTMX=NINTMX
      IF(NINTIC.NE.0) MINTMX=0
      IF(DIRSCF) THEN
         LGHND  = 1      + LOADFM
         LXINTS = LGHND  + MAXG
         LDDIJ  = LXINTS + NSH2
         LXX    = LDDIJ  + 49*MXG2
         LIX    = LXX    + NINTMX
         LAST   = LIX    + NINTMX
      ELSE
         LGHND  = 1      + LOADFM
         LXINTS = LGHND
         LDDIJ  = LXINTS
         LXX    = LDDIJ
         LIX    = LXX    + MINTMX
         LAST   = LIX    + MINTMX
         IF(NINTIC.NE.0) THEN
            LXX  = LBUFPIC
            LIX  = LIXIC
         ENDIF
      END IF
      NEEDD = LAST - LOADFM - 1
      CALL GETFM(NEEDD)
C
      IF(DIRSCF) THEN
         IF(EXETYP.EQ.CHECK) THEN
            CALL VCLR(X(LXINTS),1,NSH2)
         ELSE
            IF(ISCHWZ.EQ.1) THEN
               CALL DAREAD(IDAF,IODA,X(LXINTS),NSH2,54,0)
            ELSE
               CALL DCOPY(NSH2,1.0D+01,0,X(LXINTS),1)
            END IF
         END IF
      END IF
C
C         THE LAST TWO BRANCHES ARE TO ENABLE TESTING
C
      NGOT = NGOTMX - NEEDA - NEEDD
      IF(DIRSCF  .AND.  SOME) WRITE(IW,9050)
      IF(GOPARR) GO TO 600
      IF(METHOD.EQ.3) GO TO 400
      IF(METHOD.EQ.4) GO TO 600
C
C     ----- SEQUENTIAL SEGMENTED MP2 TRANSFORMATION -----
C     THE "SEGMENTED" TRANSFORMATION USES MORE MEMORY BUT LESS DISK
C     THAN THE "ALTERNATIVE" METHOD IMPLEMENTED BELOW.  IT HAS BOTH
C     DIRECT AND CONVENTIONAL TRANSFORMATIONS.
C
      NEED  = 2*NBF3
      LEFT  = NGOT - NEED
      NMIN  = NDIM*NBF
      MNMEM = NEEDA + NEEDD + NEED + NMIN*1
      MXMEM = NEEDA + NEEDD + NEED + NMIN*NOC
      IF(SOME) WRITE(IW,9110) MNMEM,MXMEM
C
      IF(NMIN.GT.LEFT) THEN
         NTOT = NEEDA + NEEDD + NEED + NMIN
         IF(MASWRK) WRITE(IW,9120) NTOT,NGOTMX
         IF(DIRSCF) THEN
            IF(MASWRK) WRITE(IW,9130)
            CALL ABRT
         ELSE
            IF(MASWRK) WRITE(IW,9140)
            GO TO 400
         END IF
      END IF
C
      LPASS = MIN(NOC,LEFT/NMIN)
      NPASS = (NOC+LPASS-1)/LPASS
      LPASS = (NOC+NPASS-1)/NPASS
C
      CALL VALFM(LOADFM)
      LWRK1 = 1     + LOADFM
      LWRK2 = LWRK1 + NBF3
      LPQRJ = LWRK2 + NBF3
      LNOA  = LPQRJ + NDIM*NBF*LPASS  !-CIM- 25 FEB 10
      LNOB  = LNOA  + NOC             !-CIM- 25 FEB 10
      LTX   = LNOB  + NOC             !-CIM- 25 FEB 10
      LYO2  = LTX   + NOC*NOC         !-CIM- 25 FEB 10
      LYT2T = LYO2  + NOC             !-CIM- 25 FEB 10
      LYT2S = LYT2T + NOC             !-CIM- 25 FEB 10
      LAST  = LYT2S + NOC             !-CIM- 25 FEB 10
      NEEDE = LAST - LOADFM - 1
      CALL GETFM(NEEDE)
C
      MEM = NEEDA + NEEDD + NEEDE
      IF(SOME) WRITE(IW,9150) LPASS,NPASS,MEM
      IF(EXETYP.EQ.CHECK) GO TO 700
C
      WRITE(ICIF,1010) MNMEM,MXMEM,LPASS,NPASS,MEM
      CALL MP2S_CIM(E2,X(IENG),X(IVEC),X(LPQRJ),X(LXX),X(LIX),X(LWRK1),
     *          X(LWRK2),X(IIRP),NBF,NBF3,NOC,NVIR,NDIM,
     *          IJK,NPASS,LPASS,X(LGHND),X(LXINTS),X(LDDIJ),NINTMX,
     *          MAXG,NSH2,MXG2,
     *          X(LNOA),X(LNOB),X(LTX),X(LYO2),X(LYT2T),X(LYT2S))
C
C     ----- PRINT CIM-MP2 ENERGIES FOR LMOS ----- -CIM-
C
      CALL ECIMMP2(NOC,X(LNOA),X(LNOB),E2,E2OPOS,E2PARR)
C
      GO TO 700
C
C     ----- SEQUENTIAL ALTERNATIVE OUT-OF-CORE MP2 TRANSFORMATION -----
C     THIS METHOD USES LESS MEMORY THAN THE SEGMENTED TRANSFORMATION,
C     BUT BECAUSE OF THIS IT REQUIRES MORE DISK STORAGE.  THERE IS
C     ONLY A CONVENTIONAL DISK STORAGE METHOD IMPLEMENTED.
C
  400 CONTINUE
      IF(DIRSCF) THEN
         IF(MASWRK) WRITE(IW,*) 'DIRECT MP2 REQUIRES SEGMENTED TRANSF.'
         CALL ABRT
      END IF
      NDAR20 = NVIR*NOC
C
      NEED = 2*NBF3 + NDAR20 + NOC*NOC + NOC
      LEFT = NGOT - NEED
      NMIN = NDIM*NOC
      MNMEM = NEEDA + NEEDD + NEED + NMIN*1
      MXMEM = NEEDA + NEEDD + NEED + NMIN*NBF
      IF(SOME) WRITE(IW,9210) MNMEM,MXMEM
C
      IF(NMIN.GT.LEFT) THEN
         NTOT = NEEDA + NEEDD + NEED + NMIN
         IF(MASWRK) WRITE(IW,9220) NTOT,NGOTMX
         CALL ABRT
      END IF
C
      LPASS  = LEFT/NMIN
      NPASS  = ((NBF-1)/LPASS) + 1
      IF(LPASS.GE.NBF) LPASS=NBF
C
      CALL VALFM(LOADFM)
      LWRK1 = 1     + LOADFM
      LWRK2 = LWRK1 + NBF3
      LIODA = LWRK2 + NBF3
      LEIJ  = LIODA + NDAR20
      LEI   = LEIJ  + NOC*NOC
      LMINT = LEI   + NOC
      IF (LMOMP2) THEN
         LU    = LMINT + NOC*NDIM*LPASS
         LAST  = LU    + NOC*NOC
      ELSE
         LAST  = LMINT + NOC*NDIM*LPASS
      END IF
      NEEDE = LAST - LOADFM - 1
      CALL GETFM(NEEDE)
C
      MEM = NEEDA + NEEDD + NEEDE
      IF(SOME) WRITE(IW,9250) LPASS,NPASS,MEM
      IF(EXETYP.EQ.CHECK) GO TO 700
C
C     ----- GET LMO TRANSFORMATION MATRIX -----
C
      IF (LMOMP2) CALL DAREAD(IDAF,IODA,X(LU),NOC*NOC,73,0)
C
C        DIRECT ACCESS FILE 20 IS USED IN THIS METHOD
C
      IDAF20 = 20
      CALL RAOPEN(IDAF20,X(LIODA),0,NDAR20,NDAR20,NPRINT)
C
      CALL MP2O(X(IVEC),X(IPTR2),X(LMINT),X(LXX),
     *          X(LIX),X(LWRK1),X(LWRK2),NBF,NOC,
     *          NVIR,NDIM,IJK,LPASS,NPASS,X(LIODA),
     *          NINTMX,NDAR20)
      CALL MP2OS(X(LMINT),X(IIRP),NBF,NOC,NVIR,X(LIODA))
      CALL MP2OE(X(IENG),X(LMINT),X(LEIJ),X(LEI),X(LU),E2,
     *           NBF,NOC,NVIR,X(LIODA))
C
      CALL RACLOS(IDAF20,'DELETE')
      GO TO 700
C
C     ----- PARALLEL -MP2- -----
C
  600 CONTINUE
C
      NEED  = 2*NBF3 + NPROC
      LEFT  = NGOT - NEED
      NMIN  = NDIM*NBF
      IF(NMIN.GT.LEFT) THEN
         NTOT = NEEDA + NEEDD + NEED + NMIN
         IF(MASWRK) WRITE(IW,9320) NTOT,NGOTMX
         CALL ABRT
      END IF
C
C         -NOCP- ORBITALS WILL BE TRANSFORMED BY EACH NODE,
C         DOING -MOCP- OF THEN IN EACH PASS.  -IOCP- IS THE
C         INDEX OF THE FIRST ORBITAL ASSIGNED TO EACH NODE.
C
      IAP = ME+1
      NOCP = (NOC+NPROC-1)/NPROC
      MOCP = MIN(NOCP,LEFT/NMIN)
      NPASS= (NOCP+MOCP-1)/MOCP
      NOCP = NOCP-1
      NOCL = NOC-NPROC*NOCP
      IF(IAP.LE.NOCL) NOCP=NOCP+1
      IOCP = (IAP-1)*NOCP+1
      IF(IAP.GT.NOCL) IOCP = IOCP+NOCL
      MOCP = MIN(NOCP,MOCP)
C
      MNMEM = NEEDA + NEEDD + NEED + NMIN*1
      MXMEM = NEEDA + NEEDD + NEED + NMIN*NOCP
      IF(SOME) WRITE(IW,9310) MNMEM,MXMEM
C
      CALL VALFM(LOADFM)
      LWRK1 = 1     + LOADFM
      LWRK2 = LWRK1 + NBF3
      LJFLG = LWRK2 + NBF3
      LPQRJ = LJFLG + NPROC
      LAST  = LPQRJ + NDIM*NBF*MOCP
      NEEDE = LAST - LOADFM - 1
      CALL GETFM(NEEDE)
C
      MEM = NEEDA + NEEDD + NEEDE
      IF(SOME) WRITE(IW,9350) MOCP,NPASS,MEM
      IF(EXETYP.EQ.CHECK) GO TO 700
C
      CALL MP2P(E2,X(IENG),X(IVEC),X(LPQRJ),X(LXX),X(LIX),
     *          X(LWRK1),X(LWRK2),X(IIRP),NBF,NOC,NVIR,
     *          NDIM,IJK,IOCP,NOCP,MOCP,NPASS,X(LGHND),X(LXINTS),
     *          X(LDDIJ),NINTMX,MAXG,NSH2,MXG2,X(LJFLG),NPROC-1)
      CALL DDI_GSUMF(1200,E2,1)
      CALL DDI_GSUMF(1201,E2PARR,1)
      CALL DDI_GSUMF(1202,E2OPOS,1)
C
  700 CONTINUE
      CALL RETFM(NEEDE)
      CALL RETFM(NEEDD)
      CALL RETFM(NEEDA)
C
C     ----- PRINT ENERGY DATA -----
C
      EHF     = ESCF
      EMP2    = EHF + E2
      SCSE2   = FOPOS*E2OPOS +  FPARR*E2PARR
      ESCSMP2 = EHF + SCSE2
      IF(MASWRK) WRITE(IW,9010) EHF,E2,EMP2,E2OPOS,E2PARR,SCSE2,ESCSMP2
      EMP2A=ESCSMP2
      IF(SCSPT.NE.ANONE) THEN
         EMP2A=EMP2
         E2=SCSE2
         EMP2=ESCSMP2
      ENDIF
C
      NT = NTSAVE
      IF(NOSYMT.EQ.1) CALL SYMON
      RETURN
C
 1010 FORMAT(1X,'$MEMORY-MP2'/
     * 'MINIMUM =',1P,I16/
     * 'MAXIMUM =',1P,I16/
     * 'NUMBER OF MOS/PASS =',1P,I5/ 
     * 'NUMBER OF PASSES   =',1P,I5/ 
     * 'MEMORY USED =',1P,I16/
     * 1X,'$END',0P)
 9000 FORMAT(/1X,26('-'),3X,46(1H-)/
     *        1X,'RHF-MP2 ENERGY CALCULATION',3X,
     *           'PROGRAM WRITTEN BY M.DUPUIS,C.DANIEL,A.MARQUEZ'/
     *        1X,26('-'),3X,46(1H-)/
     *        1X,'NCORE=',I5,'   NOCC=',I5,'   NMOS=',I5,'   NAOS=',I5)
 9010 FORMAT(/1X,'RESULTS OF MOLLER-PLESSET 2ND ORDER CORRECTION ARE',/,
     *       12X,'   E(0)=',1X,F20.10/
     *       12X,'   E(1)=',9X,'0.0'/
     *       12X,'   E(2)=',1X,F20.10/
     *       12X,' E(MP2)=',1X,F20.10/
     *        1X,'SPIN-COMPONENT-SCALED MP2 RESULTS ARE'/
     *       12X,'  E(2S)=',1X,F20.10/
     *       12X,'  E(2T)=',1X,F20.10/
     *       12X,' E(2ST)=',1X,F20.10,' = 6/5 * E(2S) + 1/3 * E(2T)'/
     *       12X,'SCS-MP2=',1X,F20.10)
 9020 FORMAT(/1X,'*** WARNING: THE MAXIMUM LCAO COEF=',F15.6,
     *           ', FOR AO',I6,' IN MO=',I6,','/
     *        1X,'EXCEEDS 100.  ADDITIONAL INPUTS MAY BE REQUIRED TO',
     *           ' OBTAIN GOOD MP2 ACCURACY:'/
     *        1X,' $CONTRL ICUT=10 (OR 11)'/
     *        1X,' $SCF    CONV=2.5D-7 FDIFF=.FALSE.'/
     *        1X,' $MP2    CUTOFF=1D-10 (OR 11)'/)
 9050 FORMAT(/1X,'**** EFFICIENCY NOTE ****'/
     *        1X,'THE DIRECT MP2 TRANSFORMATION WILL COMPUTE THE AO',
     *           ' INTEGRALS ONCE EVERY PASS.'/
     *        1X,'INCREASING MEMORY TO DECREASE PASSES WILL OBVIOUSLY',
     *           ' SAVE CPU TIME.')
C
 9110 FORMAT(/1X,'MEMORY REQUIREMENTS FOR SEGMENTED MP2 TRANSFORMATION'/
     *       1X,'  MINIMUM=',I15,' WORDS, USING 1 MOLECULAR ORBITAL',
     *          ' PER PASS'/
     *       1X,'  MAXIMUM=',I15,' WORDS, MAKING ONLY 1 INTEGRAL PASS')
 9120 FORMAT(1X,'THERE IS INSUFFICIENT MEMORY TO RUN THE SEGMENTED',
     *       1X,'MP2 TRANSFORMATION.'/
     *       1X,'REQUIRED,AVAILABLE MEMORY=',2I15,' WORDS.')
 9130 FORMAT(1X,'**** ERROR: TOO LITTLE MEMORY TO RUN DIRECT MP2 *****'/
     *       1X,'INCREASE MEMORY TO AT LEAST THE MINIMUM SHOWN.')
 9140 FORMAT(1X,'ABANDONING SEGMENTED TRANSFORMATION,',
     *       1X,'TRYING ALTERNATIVE TRANSFORMATION...')
 9150 FORMAT(1X,'CHOOSING THE SEGMENTED MP2 TRANSFORMATION...'/
     *       1X,'  NUMBER OF MOS/PASS = ',I4/
     *       1X,'  NUMBER OF PASSES   = ',I4/
     *       1X,'  MEMORY USED = ',I15,' WORDS.')
C
 9210 FORMAT(/1X,'MEMORY REQUIREMENTS FOR ALTERNATIVE MP2',
     *          ' TRANSFORMATION'/
     *       1X,'  MINIMUM=',I15,' WORDS, USING 1 ATOMIC ORBITAL',
     *          ' PER PASS'/
     *       1X,'  MAXIMUM=',I15,' WORDS, MAKING ONLY 1 INTEGRAL PASS')
 9220 FORMAT(1X,'THERE IS INSUFFICIENT MEMORY TO RUN THE ALTERNATIVE',
     *       1X,'MP2 TRANSFORMATION.'/
     *       1X,'REQUIRED,AVAILABLE MEMORY=',2I15,' WORDS.'/
     *       1X,'INCREASE MEMORY TO AT LEAST THE MINIMUM SHOWN.')
 9250 FORMAT(1X,'CHOOSING THE ALTERNATIVE MP2 TRANSFORMATION...'/
     *       1X,'  NUMBER OF AOS/PASS = ',I4/
     *       1X,'  NUMBER OF PASSES   = ',I4/
     *       1X,'  MEMORY USED = ',I15,' WORDS.')
C
 9310 FORMAT(/1X,'MEMORY REQUIREMENTS FOR PARALLEL MP2 TRANSFORMATION'/
     *       1X,'  MINIMUM=',I15,' WORDS, USING 1 ORBITAL PER PASS'/
     *       1X,'  MAXIMUM=',I15,' WORDS, MAKING ONLY 1 INTEGRAL PASS')
 9320 FORMAT(1X,'THERE IS INSUFFICIENT MEMORY TO RUN THE PARALLEL',
     *       1X,'MP2 TRANSFORMATION.'/
     *       1X,'REQUIRED,AVAILABLE MEMORY=',2I15,' WORDS.'/
     *       1X,'INCREASE MEMORY TO AT LEAST THE MINIMUM SHOWN.')
 9350 FORMAT(1X,'PARAMETERS FOR THE PARALLEL MP2 TRANSFORMATION'/
     *       1X,'  NUMBER OF MOS/NODE/PASS = ',I4/
     *       1X,'  NUMBER OF PASSES        = ',I4/
     *       1X,'  MEMORY USED = ',I15,' WORDS.')
      END
C
C*MODULE MP2     *DECK MP2S_CIM  -CIM-
      SUBROUTINE MP2S_CIM(E2,E,C,XPQRJ,XX,IX,X,Y,MOSIRP,NBF,NBF3,
     *                NOC,NVIR,NDIM,IJK,NPASS,LPASS,
     *                GHONDO,XINTS,DDIJ,NINTMX,MAXG,NSH2,MXG2,
     *                ECIMA,ECIMB,TX,YO2,YT2T,YT2S)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL SOME,OUT,DBUG
C
      DIMENSION E(*),C(NBF,*),XPQRJ(*),X(NBF3),Y(NBF3),MOSIRP(*),
     *          GHONDO(MAXG),XINTS(NSH2),DDIJ(MXG2),
     *          XX(NINTMX),IX(NINTMX)
      DIMENSION ECIMA(NOC),ECIMB(NOC),TX(NOC,NOC)
      DIMENSION YO2(NOC),YT2T(NOC),YT2S(NOC)
C
      COMMON /IOFILE/ IR,IW,IP,IK,IPK,IDAF,NAV,IODA(950)
      COMMON /DIRMEM/ IPQKL,IVEC,IDEN,IFCK,NUM,NOCC,NNNDIM,MINPQ,MAXPQ
      COMMON /MP2PRT/ SOME,OUT,DBUG
C     COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
C
      PARAMETER (ZERO=0.0D+00)
C
      NO2=NOC*NOC  !-CIM-
      CALL DAREAD(IDAF,IODA,TX,NO2,359,0)  !-CIM- TX is VEC FROM Alpha CMO TO LMO
      CALL VCLR(ECIMA,1,NOC)  !-CIM-
      CALL VCLR(ECIMB,1,NOC)  !-CIM-
C
      E2 = ZERO
      J0 = 1
      CALL TSECND(TIM1)
C
C     ----- LOOP OVER NUMBER OF PASSES -----
C     ----- FOR ALL  J = J0, ..., J0+NOCC-1 -----
C
      DO 100 IPASS=1,NPASS
         NOCC = MIN(NOC,J0+LPASS-1)-J0+1
C
C     ----- FORM -(PQ/RJ)- -----
C
         CALL MP2C1(IJK,XPQRJ,XX,IX,C(1,J0),
     *              NBF,NOCC,NDIM,GHONDO,XINTS,DDIJ,MAXG,NSH2)
C
C     ----- FORM -(AI/RJ)- ALL A,I -----
C
         CALL MP2C23(XPQRJ,X,Y,C,NBF,NVIR,NOC,NOCC,NDIM,NBF)
C
C     ----- FORM -(AI/BJ)-  ALL B -----
C
         CALL MP2S4(XPQRJ,X,Y,C(1,NOC+1),MOSIRP,J0,NOC,NVIR,NBF,
     *              NOCC,NDIM,NBF)
C
C     ------ CALCULATE PARTIAL CONTRIBUTION TO E(2) FROM THIS
C            BATCH -----
C
C     E(2) = SUM (J)  SUM(AIB) (AI/BJ) * ( 2*(AI/BJ)-(BI/AJ) ) /
C                              (E(A)+E(B)-E(I)-E(J))
C
         CALL MP2SE_CIM(E,XPQRJ,E2,J0,NOC,NVIR,NOCC,NDIM,
     *        TX,YO2,YT2T,YT2S,ECIMA,ECIMB)  !-CIM-
C
         J0 = J0+NOCC
         IVEC = IVEC+NOCC*NBF
C
         IF(SOME) THEN
            CALL TSECND(TIM2)
            TIME = TIM2-TIM1
            TIM1 = TIM2
            WRITE(IW,9020) IPASS,TIME
            CALL FLSHBF(IW)
         END IF
  100 CONTINUE
C
      IF(SOME) WRITE(IW,9030)
C
      RETURN
C
 9020 FORMAT(1X,'PASS #',I4,' TOOK',F12.2,' SECONDS.')
 9030 FORMAT(1X,'DONE WITH PARTIAL TRANSFORMATION (PQ|RS) TO (IA|JB)')
      END
C
C*MODULE MP2     *DECK MP2SE_CIM  !-CIM-
      SUBROUTINE MP2SE_CIM(E,AIBJ,E2,J0,NOC,NVIR,NOCC,NDIM,
     *           TX,YO2,YT2T,YT2S,ECIMA,ECIMB)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /COMPE2/ E2PARR,E2OPOS
      COMMON /MP2PAR/ OSPT,CODEMP,SCSPT,TOL,METHOD,NWDMP2,MEMPRI,MPPROP,
     *                NACORE,NBCORE,NOA,NOB,NORB,NBF,NOMIT,MOCPHF,
     *                MAXITC
C
      DIMENSION AIBJ(NOCC,NDIM,NVIR),E(*)
      DIMENSION ECIMA(NOC),ECIMB(NOC),TX(NOC,NOC)  !-CIM-
      DIMENSION YO2(NOC),YT2T(NOC),YT2S(NOC)  !-CIM-
C
C     ----- FORM PARTIAL CONTRIBUTION TO THE E(2) ENERGY -----
C
      MAI = 0
      EPARR=0.0D+00
      EOPOS=0.0D+00
      DO 25 MA=1,NVIR
         DO 20 MJ=1,NOCC  !-CIM-
            DO 15 MB=1,NVIR
               CALL VCLR(YO2,1,NOC)  !-CIM-
C              CALL VCLR(YT2,1,NOC)  !-CIM-
               CALL VCLR(YT2T,1,NOC)  !-CIM-
               CALL VCLR(YT2S,1,NOC)  !-CIM-
               DO 10 MI=1,NOC        !-CIM-
                  MAI = NOC*(MA-1)+MI  !-CIM-
                  MBI = NOC*(MB-1)+MI  !-CIM-
C
                  XAIBJ = AIBJ(MJ,MAI,MB)
                  IF(ABS(XAIBJ).LT.TOL) GO TO 10
                  XAJBI = AIBJ(MJ,MBI,MA)
                  DAIBJ = E(MA+NOC)+E(MB+NOC)-E(MI)-E(MJ+J0-1)
                  TEMP1 = XAIBJ/DAIBJ
C                 EPARR = EPARR + TEMP1*(XAIBJ-XAJBI)
C                 EOPOS = EOPOS + TEMP1*XAIBJ
                  TEMP2 = (XAIBJ-XAJBI)/DAIBJ
                  DO 5 II=1,NOC  !-CIM-
                     YO2(II)=YO2(II)+XAIBJ*TX(MI,II)
C                    YT2(II)=YT2(II)+(XAIBJ+XAIBJ-XAJBI)*TX(MI,II)/DAIBJ
                     YT2T(II)=YT2T(II)+TEMP2*TX(MI,II)
                     YT2S(II)=YT2S(II)+TEMP1*TX(MI,II)
    5             CONTINUE
   10          CONTINUE
               DO 12 II=1,NOC
C                 ECIM(II)=ECIM(II)-YO2(II)*YT2(II)
                  ECIMA(II)=ECIMA(II)-YO2(II)*YT2T(II)  ! ECIMA is E(2T)
                  ECIMB(II)=ECIMB(II)-YO2(II)*YT2S(II)  ! ECIMB is E(2S)
   12          CONTINUE
   15       CONTINUE
   20    CONTINUE
   25 CONTINUE
C
      DO 30 II = 1,NOC
         EPARR = EPARR - ECIMA(II)
         EOPOS = EOPOS - ECIMB(II)
   30 CONTINUE
C
      E2     = E2 - EPARR - EOPOS
      E2PARR = E2PARR - EPARR
      E2OPOS = E2OPOS - EOPOS
      RETURN
      END
C
C*MODULE MP2     *DECK ECIMMP2  -CIM-
      SUBROUTINE ECIMMP2(NOC,ECIMA,ECIMB,E2,E2OPOS,E2PARR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION ECIMA(NOC),ECIMB(NOC)
      COMMON /IOFILE/ IR,IW,IP,IK,IPK,IDAF,NAV,IODA(950)
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      EXTERNAL DSUM  !-CIM-
C
      PARAMETER (FOPOS=1.2D+00, FPARR=1.0D+00/3.0D+00)  !-CIM-
C
      WRITE(IW,9000)
C
      E2OPOS = DSUM(NOC,ECIMB,1)
      WRITE(IW,9010) E2OPOS
      WRITE(IW,9100) (ECIMB(I),I=1,NOC)
      call rwrit(ICIF, '$CORR-MP2-2S', NOC, ECIMB)
C
      E2PARR = DSUM(NOC,ECIMA,1)
      WRITE(IW,9020) E2PARR
      WRITE(IW,9100) (ECIMA(I),I=1,NOC)
      call rwrit(ICIF, '$CORR-MP2-2T', NOC, ECIMA)
C
      DO 30 I = 1,NOC
         TEMP1 = ECIMA(I) + ECIMB(I)
         TEMP2 = FPARR*ECIMA(I) + FOPOS*ECIMB(I)
         ECIMA(I) = TEMP1  ! E(MP2) = E(2S) + E(2T)
         ECIMB(I) = TEMP2  ! E(SCS-MP2) = 6/5*E(2S) + 1/3*E(2T)
   30 CONTINUE
C
      E2 = DSUM(NOC,ECIMA,1)
      WRITE(IW,9030) E2
      WRITE(IW,9100) (ECIMA(I),I=1,NOC)
      call rwrit(ICIF, '$CORR-MP2', NOC, ECIMA)
C
      WRITE(IW,9040) DSUM(NOC,ECIMB,1)
      WRITE(IW,9100) (ECIMB(I),I=1,NOC)
      call rwrit(ICIF, '$CORR-SCS-MP2', NOC, ECIMB)
C
      RETURN
C
 9000 FORMAT(/10X,20('-'),
     *       /10X,'CIM ENERGIES FOR MOS',
     *       /10X,20('-'))
 9010 FORMAT(/1X,'ECORR(LMO-MP2-2S)= ',40X,F20.10)
 9020 FORMAT(/1X,'ECORR(LMO-MP2-2T)= ',40X,F20.10)
 9030 FORMAT(/1X,'ECORR(LMO-MP2)=    ',40X,F20.10)
 9040 FORMAT(/1X,'ECORR(LMO-SCS-MP2)=',40X,F20.10)
 9100 FORMAT(5F16.10)
      END
C
C
C    *** Based on rohfcc.src ***
C
C*MODULE ROHFCC  *DECK ROCCDRVR_CIM
      SUBROUTINE ROCCDRVR_CIM(BESTCC,EOM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL EOM
      LOGICAL CNVR,PACK2E
C
      PARAMETER (MXATM=2000, MXRT=100)
C
      COMMON /CCENGY/ ENRG,EREF,EMP2,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CCINFO/ TSH,NH,NP,MET,MEM,ICONV,MAXIT,IREST,IDISC
      COMMON /CCOPIN/ IOPCCREF,IOPCCMET,NOPCCFC,MULOPCC,
     *                KMICRO,KREST,LMICRO,LREST
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
      COMMON /CCPAR / AMPTSH,METHCC,NCCTOT,NCCOCC,NCCFZC,NCCFZV,
     *                MXCCIT,MXRLEIT,NWRDCC,ICCCNV,ICCRST,IDSKCC
      COMMON /ENRGYS/ VNN,EELCT,ETOTX,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),edisp
      COMMON /EOMTRP/ DI1(10),DI2(10),DI3(10),DI4(10),DI5(10),DI6(10),
     *                ENESD(10),XNUM(10),XDENOM(10),R0(10),
     *                XM1(10),XM2(10),XM3A(10),XD1(10),XD2(10),XD3(10),
     *                YD1(10),YD2(10),YD3(10),YD4(10),XNC3(10),DC3(10),
     *                XGRCORR,XGRCORR1,XGRCORR2,XGRCORR3,XGRCORR4,
     *                XGRCORR5,XGRCORR6,XGRCORR7,CI3GCORR
      COMMON /FMCOM / XX(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TEN=1.0D+01)
C
      DATA CHECK/8HCHECK   /
C
C          ---- main driver for open-shell CC calculations ----
C            Marta Wloch, Jeffrey R. Gour, and Piotr Piecuch
C           Department of Chemistry, Michigan State University
C
C     Interfaced to GAMESS in April 2007. For information on the
C     unique features of this code, the open-shell completely
C     renormalized coupled-cluster methods and the underlying theory,
C     see the following:
C     M. Wloch, J.R. Gour, and P. Piecuch,
C               J. Phys. Chem. A, 111, 11359-11382(2007)
C     P. Piecuch and M. Wloch, J. Chem. Phys. 123, 224105 (2005)
C     P. Piecuch, M. Wloch, J.R. Gour, and A. Kinal,
C               Chem. Phys. Lett. 418, 467-474 (2006).
C
      WRITE(IW,9000)
      WRITE(IW,9010)
C
C          this lets us keep -eom- in the args, as a "used" variable,
C          for whenever an actual excited state code is programmed.
C
      IF(EOM) THEN
         WRITE(IW,*) 'THERE IS NO EOM CODE FOR OPEN SHELLS'
         CALL ABRT
      END IF
C
C        Multiplicity in open shell CCSD can be higher than in the SCF.
C        The multiplicity of the open shell CCSD defines orbital counts.
C
      NELS = NA + NB
      NOA = (NELS+MULOPCC-1)/2
      NOB = (NELS-MULOPCC+1)/2
      NELS = NOA + NOB
      IF(NELS.NE.(NA+NB)) THEN
         WRITE(IW,9020) MUL,NA,NB,MULOPCC,NOA,NOB
         CALL ABRT
      END IF
C                virtual space drops any frozen virtuals, off the top.
      NUA = NQMT - NCCFZV - NOA
      NUB = NQMT - NCCFZV - NOB
C                occupied space drops any frozen cores.
      NOA = NOA  - NCCFZC
      NOB = NOB  - NCCFZC
C
C        trivial problems should have DIIS interpolation turned off
C
      IF(NOB.EQ.1  .AND.  NUA.EQ.1  .AND.  MULOPCC.LE.2) THEN
         KMICRO=0
         LMICRO=0
      END IF
C
      IF (IOPCCREF.EQ.2) WRITE(IW,9030) MUL
      IF (IOPCCREF.EQ.3) WRITE(IW,9040) MUL
      WRITE(IW,9050) MULOPCC,NOA,NCCFZC,NOB,NCCFZC,NUA,NUB,
     *               MXCCIT,TEN**(-ICCCNV),
     *               KREST,KMICRO,LREST,LMICRO,IOPCCMET
      IF (NCCFZV.GT.0) WRITE(IW,9060) NCCFZV
C
C        A desire to have DIIS turned off is input of 0.
C        Now that we've printed the 0, we actually do this by setting
C        the number of iterations to DIIS as one more than the maximum.
C        We also turn off DIIS for trivial problems.
C
      IF(KMICRO.EQ.0) KMICRO=MXCCIT+1
      IF(LMICRO.EQ.0) LMICRO=MXCCIT+1
C
C        the code presumes more virtuals than occupied, and at
C        least one filled ROHF orbital and one empty ROHF orbital.
C
      IF(NOA.EQ.0  .OR.  NOB.EQ.0  .OR.  NUA.EQ.0  .OR.  NUB.EQ.0) THEN
         WRITE(IW,9070) NOA,NUA,NOB,NUB
         CALL ABRT
      END IF
      IF(MAX(NOA,NOB) .GT. MAX(NUA,NUB)) THEN
         WRITE(IW,9080) NOA,NUA,NOB,NUB
         CALL ABRT
      END IF
C
C        Zero out the energy results...
C        ETOTX is the SCF energy, including nuclear repulsion.
C        ECCN is for the use of the FMO method.
C
      EREF = ETOTX
      ENRG = ZERO
      EMP2 = ZERO
      ECCN = ZERO
      DO I=1,6
        ECORR(I)= ZERO
        ETOT(I) = ZERO
      ENDDO
      CALL VCLR(XNUM,1,10)
      CALL VCLR(XM1,1,10)
      DIAGS(1) = ZERO
      DIAGS(2) = ZERO
      DIAGS(3) = ZERO
      DO J=1,2
         DO I=1,5
            AMPMX(I,J) = ZERO
            IAMPMX(I,1,J) = 0
            IAMPMX(I,2,J) = 0
            IAMPMX(I,3,J) = 0
            IAMPMX(I,4,J) = 0
         ENDDO
      ENDDO
      XO1 = ONE
      XO2 = ONE
C
C        Copy input data to the CCINFO common, although only
C        a few of the entries are used by open shell code.
C
      TSH   = 0.0D+00
      NH    = NCCOCC-NCCFZC
      NP    = NCCTOT-NCCFZV-NCCOCC
      MET   = METHCC
      MEM   = 0
      ICONV = ICCCNV
      MAXIT = MXCCIT
      IREST = 0
      IDISC = 0
C
C        Fill /NNROHF/ and /NNMAX/ commons with data on problem size
C
      CALL MKBLOCK(NOA,NUA,NOB,NUB)
C
C        Open every disk file used by open shell CCSD or CR-CC(2,3)
C
      CALL OPCCFILE(NOA,NUA,NOB,NUB)
C
C        The "orbital energies" are held throughout the entire run.
C        These are diagonals of F-alpha + F-beta, not eigenvalues!
C
      CALL VALFM(LOADFM)
      LEHA = LOADFM + 1
      LEHB = LEHA   + NOA
      LEPA = LEHB   + NOB
      LEPB = LEPA   + NUA
      LAST = LEPB   + NUB
      NEEDE = LAST-LOADFM-1
      CALL GETFM(NEEDE)
C
C        ----- prepare Fock matrices, and diagonal elements -----
C        L1 = size of the atomic basis set
C        M1 = range of MOs in CC treatment (cores not included)
C
      L1 = NUM
      L2 = (L1*L1+L1)/2
      L3 = L1*L1
      M1 = NQMT-NCCFZC
      M2 = (M1*M1+M1)/2
      LDW = 2*M1
      LTMP = MAX(L1,NOA**2,NOB**2,NOA*NUA,NOB*NUB,NUA**2,NUB**2)
C
      CALL VALFM(LOADFM)
      LWORK = LOADFM + 1
      LVEC  = LWORK  + MAX(LDW*LDW,L2)
      LFA   = LVEC   + L3
      LFB   = LFA    + M2
      LT1   = LFB    + M2
      LT2   = LT1    + LTMP
      LAST  = LT2    + LTMP
      NEED = LAST-LOADFM-1
C
      WRITE(IW,9090) NEED
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 10
C
      CALL OPCCFOCK(NFT843,NOA,NUA,NOB,NUB,
     *              XX(LEHA),XX(LEPA),XX(LEHB),XX(LEPB),
     *              XX(LWORK),XX(LVEC),XX(LFA),XX(LFB),XX(LT1),XX(LT2),
     *              L1,L2,M1,M2,LDW,LTMP)
C
   10 CONTINUE
      CALL RETFM(NEED)
C
C            ----- prepare 2e- integrals for the run -----
C        The biggest memory used later (in CR-CC(2,3) runs) is
C          0*No**4 + 3*No**3*Nu +  7*No**2*Nu**2 + 4*No*Nu**3
C        for the H-bar intermediates.  CCSD only is smaller,
C          1*No**4 + 1*No**3*Nu +  9*No**2*Nu**2 + 3*No*Nu**3
C
C        The strategy is to form the double bar integrals without
C        using any more memory than is needed by the later steps.
C        The integral sets we are sorting are
C          3*No**4 + 4*No**3*Nu +  7*No**2*Nu**2 + 4*No*Nu**3 + 3*Nu**4
C          <-------------- pass 1 -------------> <- pass 2 -> <-3,4,..->
C        It is almost OK to combine pass 1 and 2, but separate
C        passes are certain to be smaller than CC requirements.
C        Passes 3,4,5... do the Nu**4 set in smaller stripes,
C        containing No * Nu**3 elements of the Nu**4 array.
C
      CALL VALFM(LOADFM)
      LXX    = LOADFM + 1
      LIX    = LXX    + NINTMX
      LASTBF = LIX    + NINTMX
C
C        The arrays which are used only during pass 1...
      LVHHAA   = LASTBF
      LVHHBB   = LVHHAA   + NOA*NOA*NOA*NOA
      LVHHAB   = LVHHBB   + NOB*NOB*NOB*NOB
      LVMAA    = LVHHAB   + NOA*NOB*NOA*NOB
      LVMBB    = LVMAA    + NOA*NOA*NOA*NUA
      LVMAB    = LVMBB    + NOB*NOB*NOB*NUB
      LVMBA    = LVMAB    + NOA*NOB*NUA*NOB
      LVHPRAA  = LVMBA    + NOA*NOB*NOA*NUB
      LVHPRBB  = LVHPRAA  + NUA*NOA*NUA*NOA
      LVHPRAB  = LVHPRBB  + NUB*NOB*NUB*NOB
      LVHPLAA  = LVHPRAB  + NUA*NOA*NUB*NOB
      LVHPLBB  = LVHPLAA  + NUA*NOA*NUA*NOA
      LVHPLAB  = LVHPLBB  + NUB*NOB*NUB*NOB
      LVHPLBA  = LVHPLAB  + NUA*NOB*NUA*NOB
      LAST1    = LVHPLBA  + NUB*NOA*NUB*NOA
C
C        overlap with arrays used only during pass 2...
      LVEAA    = LASTBF
      LVEBB    = LVEAA    + NUA*NUA*NUA*NOA
      LVEAB    = LVEBB    + NUB*NUB*NUB*NOB
      LVEBA    = LVEAB    + NUA*NUB*NOA*NUB
      LAST2    = LVEBA    + NUA*NUB*NUA*NOB
C
C        and also overlap with arrays used during pass 3,4,5...,MXPASS.
      NSLICEA = NOA
      NSLICEB = NOB
      MXPASS  = 2 + MAX((NUA-1)/NSLICEA,(NUB-1)/NSLICEB) + 1
      LVPPAA   = LASTBF
      LVPPBB   = LVPPAA   + NUA*NUA*NUA*NSLICEA
      LVPPAB   = LVPPBB   + NUB*NUB*NUB*NSLICEB
      LAST3    = LVPPAB   + NUA*NUB*NUA*NSLICEB
C
      NEED1 = LAST1-LOADFM-1
      NEED2 = LAST2-LOADFM-1
      NEED3 = LAST3-LOADFM-1
C
      WRITE(IW,9100) NEED1,NEED2,MXPASS,NEED3
C
      NEED = MAX(NEED1,NEED2,NEED3)
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 20
C
      CALL OPCCINTS(IW,IJKT,XX(LXX),XX(LIX),NINTMX,NOA,NOB,NUA,NUB,
     *              XX(LVHHAA),XX(LVHHBB),XX(LVHHAB),
     *              XX(LVMAA),XX(LVMBB),XX(LVMAB),XX(LVMBA),
     *              XX(LVHPRAA),XX(LVHPRBB),XX(LVHPRAB),
     *              XX(LVHPLAA),XX(LVHPLBB),XX(LVHPLAB),XX(LVHPLBA),
     *              XX(LVEAA),XX(LVEBB),XX(LVEAB),XX(LVEBA),
     *              XX(LVPPAA),XX(LVPPBB),XX(LVPPAB),NSLICEA,NSLICEB)
C
   20 CONTINUE
      CALL RETFM(NEED)
C
C           --- that's the end of integral manipulations
C
      WRITE(IW,9110)
      CALL TIMIT(1)
C
C        ----- perform the CCSD amplitude iterations -----
C     and perhaps compute the CR-CC(2,3) triples corrections.
C
      CALL DRCCOPEN_CIM(NOA,NUA,NOB,NUB,XX(LEHA),XX(LEPA),
     *     XX(LEHB),XX(LEPB))
      CALL RETFM(NEEDE)
C
C        return either CCSD, or the type -A- CR-CC(2,3) energy
C        at this point ENRG is the correlation energy, so add reference.
C
      BESTCC = ENRG + EREF
C
C        FMO method needs to close disk files so next FMO step is clean
C
      IF(NFG.NE.0) CALL CLCCFILE
      RETURN
C
 9000 FORMAT(/3X,68(1H-)/
     *        3X,'OPEN-SHELL COUPLED-CLUSTER PROGRAM:',2X,
     *           'M. WLOCH, J.R. GOUR, P. PIECUCH'/
     *        3X,68(1H-))
 9010 FORMAT(/1X,63(1H*)/
     *        1X,'THE FOLLOWING PAPERS SHOULD BE CITED WHEN USING',
     *        1X,'OPEN-SHELL CCSD',/
     *        1X,'AND/OR CR-CCL COUPLED-CLUSTER OPTIONS:'/
     *        1X,'P. PIECUCH AND M. WLOCH,'/
     *        1X,'  J. CHEM. PHYS. 123, 224105/1-10 (2005).'/
     *        1X,'M. WLOCH, J.R. GOUR, AND P. PIECUCH,'/
     *        1X,'  J. PHYS. CHEM. A, 111, 11359-11382 (2007).'//
     *        1X,'THE FOLLOWING PAPERS SHOULD BE CITED IF USING',
     *        1X,'THE EA-EOMCC OR IP-EOMCC OPTIONS:'/
     *        1X,'J. R. GOUR, P. PIECUCH, AND M. WLOCH,'/
     *        1X,'  J. CHEM. PHYS. 123, 134113/1-14 (2005).'/
     *        1X,'J. R. GOUR AND P. PIECUCH,'/
     *        1X,'  J. CHEM. PHYS. 125, 234107/1-17 (2006).'/
     *        1X,63(1H*)/)
 9020 FORMAT(1X,'MOLECULAR INPUT HAS MULT=',I3,' IMPLYING',I5,
     *          ' ALPHA, AND',I5,' BETA E-'/
     *       1X,'   $CCINP INPUT HAS MULT=',I3,' IMPLYING',I5,
     *          ' ALPHA, AND',I5,' BETA E-'/
     *       1X,'PLEASE FIX THE DISCREPANCY IN THE TOTAL NUMBER OF',
     *          ' ELECTRONS.')
 9030 FORMAT(1X,'UHF REFERENCE STATE WILL BE USED, MULTIPLICITY=',I3)
 9040 FORMAT(1X,'ROHF REFERENCE STATE WILL BE USED, MULTIPLICITY=',I3)
 9050 FORMAT(/14X,30(1H-)/
     *        14X,'OPEN SHELL CC INPUT PARAMETERS'/
     *        14X,30(1H-)/
     *   5X,'CC SPIN MULTIPLICITY (MULT IN $CCINP)    =',I5/
     *   5X,'IMPLYING NO. OF OCCUP. ALPHA =',I5,
     *      ', PLUS',I4,' FROZEN CORES'/
     *   5X,'         NO. OF OCCUP.  BETA =',I5,
     *      ', PLUS',I4,' FROZEN CORES'/
     *   5X,'         NO. OF VIRT.  ALPHA =',I5/
     *   5X,'         NO. OF VIRT.   BETA =',I5/
     *   5X,'MAX.NO. OF CCSD AND LAMBDA ITERS (MAXCC) =',I5/
     *   5X,'CCSD AND LAMBDA CONVERGENCE (FROM ICONV) =',1P,E12.3/
     *   5X,'CCSD EQUATION RESTART OPTION (KREST)     =',I5/
     *   5X,'CCSD DIIS MICROITERATIONS (KMICRO)       =',I5/
     *   5X,'LAMDA EQUATION RESTART OPTION (LREST)    =',I5/
     *   5X,'LAMBDA DIIS MICROITERATIONS (LMICRO)     =',I5/
     *   5X,'MM(2,3) CODE SELECTION (IOPMET)          =',I5)
 9060 FORMAT(5X,'VIRTUAL ORBITALS ABOVE OMIT',I5,
     *          ' FROZEN (HIGHEST) VIRTUALS.')
 9070 FORMAT(1X,'ERROR.  OPEN SHELL CCSD PROGRAM REQUIRES AT LEAST',
     *          ' ONE ORBITAL'/
     *       1X,'IN EACH OF THE FOUR CLASSES:'/
     *       1X,'OCCUPIED ALPHA=',I5,' VIRTUAL ALPHA=',I5/
     *       1X,'OCCUPIED  BETA=',I5,' VIRTUAL  BETA=',I5)
 9080 FORMAT(1X,'ERROR. THE NUMBER OF OCCUPIED ALPHA ORBITALS' /
     *       1X,'CANNOT EXCEED THE NUMBER OF VIRTUAL BETA ORBITALS'/
     *       1X,'OCCUPIED ALPHA=',I5,' VIRTUAL ALPHA=',I5/
     *       1X,'OCCUPIED  BETA=',I5,' VIRTUAL  BETA=',I5/
     *       1X,'TO RUN, INCREASE THE NUMBER OF VIRTUAL ORBITALS')
 9090 FORMAT(/1X,'MEMORY NEEDED BY FOCK PREPARATION   : ',I12,' WORDS')
 9100 FORMAT(1X,'MEMORY NEEDED BY INT. PASS 1        : ',I12,' WORDS'/
     *       1X,'MEMORY NEEDED BY INT. PASS 2        : ',I12,' WORDS'/
     *    1X,'MEMORY NEEDED BY INT. PASS 3,...,',I3,': ',I12,' WORDS')
 9110 FORMAT(1X,'....... DONE WITH CC INTEGRAL PREPARATION .......')
      END
C
C*MODULE ROHFCC  *DECK DRCCOPEN_CIM
      SUBROUTINE DRCCOPEN_CIM(NOA,NUA,NOB,NUB,EHA,EPA,EHB,EPB)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION EHA(*),EPA(*),EHB(*),EPB(*)
C
      LOGICAL CNVR
C
      COMMON /CCENGY/ ENRG,EREF,EMP2,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CCOPIN/ IOPCCREF,IOPCCMET,NOPCCFC,MULOPCC,
     *                KMICRO,KREST,LMICRO,LREST
      COMMON /FMCOM / X(1)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NNMAX / NOU,NO2,NU2,NO2U2,NO4,NU3,NO3U,NOU3,NOU2,NO2U
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
C
      DATA CCSD/8HCCSD    /
      DATA EAEOM2,EAEOM3,EAEOM3A/8HEA-EOM2 ,8HEA-EOM3 ,8HEA-EOM3A/
      DATA EOMIP2,EOMIP3,EOMIP3A/8HIP-EOM2 ,8HIP-EOM3 ,8HIP-EOM3A/
      DATA CHECK/8HCHECK   /
C
C     --- actual driver for open shell ccsd, lambda, mm(2,3) ---
C         h=occupied, h means "holes" which are occupied
C                       states in the Fermi vacuum
C         p= virtual, p means "particles" which are unoccupied
C                       states in the Fermi vacuum
C
      WRITE(IW,9000)
      ITER=0
C
      NOA2=NOA*NOA       !-CIM-
      NOB2=NOB*NOB       !-CIM-
      IF (NCA.GE.NCB) THEN
         NC=NCA
         NU3s=NUA*NUB*(NUA+1)/2
      ELSE
         NC=NCB
         NU3s=NUA*NUB*(NUB+1)/2
      END IF
      NCU3s=NC*NU3s
C
C         ----- open shell ccsd iterations -----
C     the quartic sized arrays used here are
C     1*No**4 + 1*No**3*Nu +  9*No**2*Nu**2 + 3*No*Nu**3 - right CCSD
C
      CALL VALFM(LOADFM)
      I1   = LOADFM + 1
      I2   = I1     + NOU       ! O1AA
      I3   = I2     + NOU       ! T1
      I4   = I3     + NOU       ! O1BB
      I5   = I4     + NO4       ! VHHAA
      I6   = I5     + NO2U2     ! VHPLAA
      I7   = I6     + NO2U2     ! VHPLBB
      I8   = I7     + NO2U2     ! O2AA
      I9   = I8     + NO2U2     ! O2BB
      I10  = I9     + NO2U2     ! O2AB
      I11  = I10    + NOU3      ! VEAB
      I12  = I11    + NOU3      ! VEBA
      I13  = I12    + NO2U2     ! VHPRBB
      I14  = I13    + NO2U2     ! VHPRAA
      I15  = I14    + NO2U2     ! VHPRAB
      I16  = I15    + NOU3      ! TI
      I17  = I16    + NO3U      ! VMAA
      I18  = I17    + NOU       ! FHP
      I19  = I18    + NO2       ! FHHAA
      I20  = I19    + NO2       ! FHHBB
      I21  = I20    + NU2       ! FPPAA
      I22  = I21    + NU2       ! FPPBB
      I23  = I22    + NO2U2     ! T2
      I24  = I23    + NU3       ! VPP
      I25  = I24    + (KMICRO+1)**2  ! XMAT
      I26  = I25    + (KMICRO+1)     ! BVEC
      I27  = I26    + (KMICRO+1)     ! IPVT
      I28  = I27    + NOA       !-CIM- ECIMA
      I29  = I28    + NOB       !-CIM- ECIMB
      I30  = I29    + NOA2      !-CIM- TXA(NOA,NOA)
      I31  = I30    + NOB2      !-CIM- TXB(NOB,NOB)
      I32  = I31    + NOA2      !-CIM- EKA(NOA,NOA)
      LAST = I32    + NOB2      !-CIM- EKB(NOB,NOB)
      NEED=LAST-LOADFM-1
      ITER=ITER+1
      IF (ITER.EQ.1) THEN
         WRITE(IW,9010) NEED
         CALL FLSHBF(IW)
         WRITE(ICIF,9010) NEED  !-CIM-
         CALL FLSHBF(ICIF)
      END IF
C
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 22
C
      CALL OPEN_CCSD_CIM(NOA,NUA,NOB,NUB,X(I1),X(I2),X(I3),X(I4),
     *            X(I5),X(I6),X(I7),X(I8),X(I9),X(I10),X(I11),
     *            X(I12),X(I13),X(I14),X(I15),X(I16),X(I17),
     *            X(I18),X(I19),X(I20),X(I21),X(I22),X(I23),
     *            X(I24),X(I25),X(I26),X(I27),X(I28),X(I29),
     *            X(I30),X(I31),X(I32),EHA,EPA,EHB,EPB)
C
   22 CONTINUE
      CALL RETFM(NEED)
C
      WRITE(IW,9020)
      CALL TIMIT(1)
      CALL TIMSTP('CCSD    ')
C
C        if this is just CCSD, we are now finished
C
      IF(CCTYP.EQ.CCSD) RETURN
C
C     ---- one particle h-bar intermediates ----
C     the quartic sized arrays used here are
C     0*No**4 + 4*No**3*Nu +  6*No**2*Nu**2 + 2*No*Nu**3 - H-bar(one)
C
      WRITE(IW,9030)
C
      CALL VALFM(LOADFM)
      I1   = LOADFM + 1
      I2   = I1     + NO2     ! FHHAA
      I3   = I2     + NOU     ! O1AA
      I4   = I3     + NOU     ! O1BB
      I5   = I4     + NO2     ! FHHBB
      I6   = I5     + NU2     ! FPPAA
      I7   = I6     + NU2     ! FPPBB
      I8   = I7     + NOU     ! FHPAA
      I9   = I8     + NOU     ! FHPBB
      I10  = I9     + NO2U2   ! O2AA
      I11  = I10    + NO2U2   ! O2BB
      I12  = I11    + NO2U2   ! O2AB
      I13  = I12    + NOU3    ! VEAA
      I14  = I13    + NO2U2   ! VHPRBB
      I15  = I14    + NO2U2   ! VHPRAA
      I16  = I15    + NO2U2   ! VHPRAB
      I17  = I16    + NOU3    ! TI
      I18  = I17    + NO3U    ! VMAB
      I19  = I18    + NO3U    ! VMBA
      I20  = I19    + NO3U    ! VMAA
      LAST = I20    + NO3U    ! VMBB
      NEED=LAST-LOADFM-1
      WRITE(IW,9040) NEED
C
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 33
C
      CALL ONEHBAR(NOA,NUA,NOB,NUB,X(I1),X(I2),X(I3),X(I4),X(I5),
     *             X(I6),X(I7),X(I8),X(I9),X(I10),X(I11),X(I12),X(I13),
     *             X(I14),X(I15),X(I16),X(I17),X(I18),X(I19),X(I20))
C
   33 CONTINUE
      CALL RETFM(NEED)
C
C     ---- two particle h-bar intermediates ----
C     the quartic sized arrays used here are
C     0*No**4 + 3*No**3*Nu +  7*No**2*Nu**2 + 4*No*Nu**3 - H-bar(two)
C
      CALL VALFM(LOADFM)
      I1   = LOADFM +  1
      I2   = I1     + NOU      ! O1AA
      I3   = I2     + NOU      ! O1BB
      I4   = I3     + NO4      ! VHHHHAA
      I5   = I4     + NO2U2    ! VHPLAA
      I6   = I5     + NO2U2    ! O2AA
      I7   = I6     + NO2U2    ! O2BB
      I8   = I7     + NO2U2    ! O2AB
      I9   = I8     + NOU3     ! VEBB
      I10  = I9     + NOU3     ! VEAB
      I11  = I10    + NOU3     ! VEBA
      I12  = I11    + NO2U2    ! VHPRBB
      I13  = I12    + NO2U2    ! VHPRAA
      I14  = I13    + NO2U2    ! VHPRAB
      I15  = I14    + NOU3     ! TI
      I16  = I15    + NO3U     ! VMAB
      I17  = I16    + NO3U     ! VMBA
      I18  = I17    + NO3U     ! VMAA
      I19  = I18    + NOU      ! FHP
      LAST = I19    + NU3      ! VPP
      NEED=LAST-LOADFM-1
      WRITE(IW,9050) NEED
C
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 44
C
      CALL TWOHBAR(NOA,NUA,NOB,NUB,X(I1),X(I2),X(I3),X(I4),
     *             X(I5),X(I6),X(I7),X(I8),X(I9),X(I10),X(I11),X(I12),
     *             X(I13),X(I14),X(I15),X(I16),X(I17),X(I18),X(I19))
C
   44 CONTINUE
      CALL RETFM(NEED)
C
      WRITE(IW,9060)
      CALL TIMIT(1)
C
C        if this is EA-EOMCC or IP-EOMCC call the following drivers
C        and then are finished (return instead of executing below)
C
      IF(CCTYP.EQ.EAEOM2.OR.CCTYP.EQ.EAEOM3.OR. CCTYP.EQ.EAEOM3A) THEN
        CALL DREAEOM(BESTEOM,NOA,NUA,NOB,NUB)
        RETURN
      END IF
      IF(CCTYP.EQ.EOMIP2.OR.CCTYP.EQ.EOMIP3.OR. CCTYP.EQ.EOMIP3A) THEN
        CALL DRIPEOM(BESTEOM,NOA,NUA,NOB,NUB)
        RETURN
      END IF
C
C        ----- solve for left eigenstates (lambda equation) -----
C     the quartic sized arrays used here are
C     1*No**4 + 1*No**3*Nu +  7*No**2*Nu**2 + 2*No*Nu**3 - left CCSD
C
      CALL VALFM(LOADFM)
      I1   = LOADFM + 1
      I2   = I1     + NOU            ! OL1AA
      I3   = I2     + NOU            ! OL1BB
      I4   = I3     + NOU            ! HL1
      I5   = I4     + NO2U2          ! OL2AA
      I6   = I5     + NO2U2          ! OL2BB
      I7   = I6     + NO2U2          ! OL2AB
      I8   = I7     + NO2U2          ! HL2
      I9   = I8     + NOU3           ! TI
      I11  = I9     + NO3U           ! VHPHH
      I12  = I11    + NO2            ! FHH
      I13  = I12    + NU2            ! FPP
      I14  = I13    + NOU            ! FHP
      I15  = I14    + NOU3           ! VHPPP
      I16  = I15    + NO2U2          ! VHPHP
      I17  = I16    + NO4            ! VHHHH
      I18  = I17    + NU3            ! VPPP
      I19  = I18    + NO2U2          ! VHPPH
      I20  = I19    + NO2U2          ! T2
      I21  = I20    + NO2            ! OHHA
      I22  = I21    + NO2            ! OHHB
      I23  = I22    + NU2            ! OPPA
      I24  = I23    + NU2            ! OPPB
      I25  = I24    + (LMICRO+1)**2  ! XMAT
      I26  = I25    + (LMICRO+1)     ! BVEC
      LAST = I26    + (LMICRO+1)     ! IPVT
      NEED=LAST-LOADFM-1
      WRITE(IW,9070) NEED
C
      CALL GETFM(NEED)
      IF(EXETYP.EQ.CHECK) GO TO 55
C
      CALL OPENLEFT(NOA,NUA,NOB,NUB,X(I1),X(I2),X(I3),X(I4),X(I5),
     *              X(I6),X(I7),X(I8),X(I9),X(I11),X(I12),
     *              X(I13),X(I14),X(I15),X(I16),X(I17),X(I18),X(I19),
     *              X(I20),X(I21),X(I22),X(I23),X(I24),X(I25),X(I26),
     *              EHA,EPA,EHB,EPB)
C
   55 CONTINUE
      CALL RETFM(NEED)
C
      WRITE(IW,9080)
      CALL TIMIT(1)
      CALL TIMSTP('EOM-CCSD')
C
C            --- method of moments MM(2,3) energy correction ---
C        There are three options, if keyword IOPMET is 0 (default), we
C        pick the first algorithm whose memory requirement fits into
C        the available space NGOTMX.
C        For debugging, the -IOPMET- keyword forces specific choices.
C
      CALL GOTFM(NGOTMX)
      WRITE(IW,9090) NGOTMX
C
      IF(EXETYP.EQ.CHECK) GO TO 1000
C
      IF(IOPCCMET.EQ.1) GO TO 1000
      IF(IOPCCMET.EQ.2) GO TO 2000
      IF(IOPCCMET.EQ.3) GO TO 3000
C
C         ----- High Memory Option -----
C     Option 1 is the fastest algorithm.
C     The triply excited moments M3 are not stored in LAMB23 file.
C
C     the quartic sized arrays used here are
C     0*No**4 + 6*No**3*Nu + 10*No**2*Nu**2 + 6*No*Nu**3 - MM(2,3) code1
C
 1000 CONTINUE
      CALL VALFM(LOADFM)
      I1  = LOADFM + 1
      I2   = I1     + NOU       ! O1AA
      I3   = I2     + NOU       ! O1BB
      I4   = I3     + NO2U2     ! L2AA
      I5   = I4     + NO2U2     ! L2BB
      I6   = I5     + NO2U2     ! L2AB
      I7   = I6     + NO2U2     ! O2
      I8   = I7     + NO2U2     ! O2AA
      I9   = I8     + NO2U2     ! O2BB
      I10  = I9     + NO2U2     ! O2AB
      I11  = I10    + NOU3      ! VEAA
      I12  = I11    + NOU3      ! VEBB
      I13  = I12    + NOU3      ! VEAB
      I14  = I13    + NOU3      ! VEBA
      I15  = I14    + NOU3      ! VEAB21
      I16  = I15    + NOU3      ! VEBA21
      I17  = I16    + NOU       ! FHPAA
      I18  = I17    + NOU       ! FHPBB
      I19  = I18    + NO2U2     ! VHPRAA
      I20  = I19    + NO2U2     ! VHPRBB
      I21  = I20    + NU3       ! M3
      I22  = I21    + NU3       ! L3
      I23  = I22    + NO2U2     ! VHPRAB
      I24  = I23    + NU3       ! TI
      I25  = I24    + NO3U      ! VMAB
      I26  = I25    + NO3U      ! VMBA
      I27  = I26    + NO3U      ! VMAA
      I28  = I27    + NO3U      ! VMBB
      I29  = I28    + NO3U      ! VMAB21
      I30  = I29    + NO3U      ! VMBA21
      I31  = I30    + NO2       ! FHHA
      I32  = I31    + NO2       ! FHHB
      I33  = I32    + NU2       ! FPPA
      I34  = I33    + NU2       ! FPPB
      I35  = I34    + NO2       ! X1AA
      I36  = I35    + NO2       ! X1BB
      I37  = I36    + NO2       ! X1AB
      I38  = I37    + NU2       ! X2AA
      I39  = I38    + NU2       ! X2BB
      I40  = I39    + NU2       ! X2AB
      I41  = I40    + NOU       ! X3AA
      I42  = I41    + NOU       ! X3BB
      I43  = I42    + NOU       ! X3AB
      I44  = I43    + NOU       ! X3BA
      I45  = I44    + NOU2      ! X4AAA
      I46  = I45    + NOU2      ! X4AAB
      I47  = I46    + NOU2      ! X4BBA
      I48  = I47    + NOU2      ! X4BBB
      I49  = I48    + NO2U      ! X5AAA
      I50  = I49    + NO2U      ! X5AAB
      I51  = I50    + NO2U      ! X5BBA
      I52  = I51    + NO2U      ! X5BBB
      I53  = I52    + NO4       !-CIM- VHHHH
      I54  = I53    + NOA       !-CIM- ECIMA
      I55  = I54    + NOB       !-CIM- ECIMB
      I56  = I55    + NOA2      !-CIM- TXA
      I57  = I56    + NOB2      !-CIM- TXB
      I58  = I57    + NCU3s     !-CIM- XXM3
      I59  = I58    + NCU3s     !-CIM- XXL3
      LAST = I59    + NC        !-CIM- TXs
      NEED1=LAST-LOADFM-1
      WRITE(IW,9110) NEED1,'HIGH MEMORY VERSION (1)'
      CALL FLSHBF(IW)
      WRITE(ICIF,9110) NEED1,'HIGH MEMORY VERSION (1)'
      CALL FLSHBF(ICIF)
C
      IF(EXETYP.EQ.CHECK) GO TO 2000
      IF(IOPCCMET.EQ.0  .AND.  NEED1.GT.NGOTMX) GO TO 2000
C
      WRITE(IW,9100) 'HIGH MEMORY VERSION'
      IF(NEED1.GT.NGOTMX) WRITE(IW,9150) NEED1,NGOTMX
      CALL GETFM(NEED1)
      CALL LAMB23_CIM(NOA,NUA,NOB,NUB,X(I1),X(I2),X(I3),X(I4),X(I5),
     *    X(I6),X(I7),X(I8),X(I9),X(I10),X(I11),X(I12),X(I13),
     *    X(I14),X(I15),X(I16),X(I17),X(I18),X(I19),X(I20),X(I21),
     *    X(I22),X(I23),X(I24),X(I25),X(I26),X(I27),X(I28),X(I29),
     *    X(I30),X(I31),X(I32),X(I33),X(I34),X(I35),X(I36),X(I37),
     *    X(I38),X(I39),X(I40),X(I41),X(I42),X(I43),X(I44),X(I45),
     *    X(I46),X(I47),X(I48),X(I49),X(I50),X(I51),X(I52),
     *    X(I53),X(I54),X(I55),X(I56),X(I57),X(I58),X(I59),
     *    NC,NCU3s,EHA,EPA,EHB,EPB)
      CALL RETFM(NEED1)
      GO TO 7000
C
C         ----- High Disk Option -----
C     Option 2 is slower than the High Memory Option, using less memory.
C     The memory required is about half the above.
C     Triply excited moments M3 are calculated in the following order:
C     M3(aaa), then M3(bbb), then M3(aab), and finally M3(abb),
C     each being stored on the disk in the LAMB23 file.
C     size of LAMB23 = k * record nu**3, where k is defined, more or
C     less, as the no. of triples of i<j<k for a given spin type.
C
C     the quartic sized arrays used here are
C     1*No**4 + 3*No**3*Nu +  6*No**2*Nu**2 + 3*No*Nu**3 - MM(2,3) code2
C
 2000 CONTINUE
      CALL VALFM(LOADFM)
      I1   = LOADFM + 1
      I2   = I1     + NOU     ! O1AA
      I3   = I2     + NOU     ! O1BB
      I4   = I3     + NO2U2   ! O2AA
      I5   = I4     + NO2U2   ! O2BB
      I6   = I5     + NO2U2   ! O2AB
      I7   = I6     + NOU3    ! VEAA
      I8   = I7     + NOU3    ! VEAB
      I9   = I8     + NOU3    ! VEBA
      I10  = I9     + NO4     ! VHHHH
      I11  = I10    + NOU     ! FHPAA
      I12  = I11    + NOU     ! FHPBB
      I13  = I12    + NU3     ! VPP
      I14  = I13    + NO2U2   ! VHPRAA
      I15  = I14    + NO2U2   ! VHPRBB
      I16  = I15    + NO2U2   ! VHPRAB
      I17  = I16    + NU3     ! TI
      I18  = I17    + NO3U    ! VMAB
      I19  = I18    + NO3U    ! VMBA
      I20  = I19    + NO3U    ! VMAA
      I21  = I20    + NO2     ! FHHA
      I22  = I21    + NO2     ! FHHB
      I23  = I22    + NU2     ! FPPA
      I24  = I23    + NU2     ! FPPB
      I25  = I24    + NO2     ! X1AA
      I26  = I25    + NO2     ! X1BB
      I27  = I26    + NO2     ! X1AB
      I28  = I27    + NU2     ! X2AA
      I29  = I28    + NU2     ! X2BB
      I30  = I29    + NU2     ! X2AB
      I31  = I30    + NOU     ! X3AA
      I32  = I31    + NOU     ! X3BB
      I33  = I32    + NOU     ! X3AB
      I34  = I33    + NOU     ! X3BA
      I35  = I34    + NOU2    ! X4AAA
      I36  = I35    + NOU2    ! X4AAB
      I37  = I36    + NOU2    ! X4BBA
      I38  = I37    + NOU2    ! X4BBB
      I39  = I38    + NO2U    ! X5AAA
      I40  = I39    + NO2U    ! X5AAB
      I41  = I40    + NO2U    ! X5BBA
      I42  = I41    + NO4       !-CIM- X5BBB
      I43  = I42    + NOA       !-CIM- ECIMA
      I44  = I43    + NOB       !-CIM- ECIMB
      I45  = I44    + NOA2      !-CIM- TXA
      I46  = I45    + NOB2      !-CIM- TXB
      I47  = I46    + NCU3s     !-CIM- XXM3
      I48  = I47    + NCU3s     !-CIM- XXL3
      LAST = I48    + NC        !-CIM- TXs
      NEED2=LAST-LOADFM-1
      WRITE(IW,9110) NEED2,'HIGH DISK VERSION   (2)'
      CALL FLSHBF(IW)
      WRITE(ICIF,9110) NEED2,'HIGH DISK VERSION   (2)'
      CALL FLSHBF(ICIF)
C
      IF(EXETYP.EQ.CHECK) GO TO 3000
      IF(IOPCCMET.EQ.0  .AND.  NEED2.GT.NGOTMX) GO TO 3000
C
      WRITE(IW,9100) 'HIGH DISK VERSION'
      IF(NEED2.GT.NGOTMX) WRITE(IW,9160) NEED2,NGOTMX
      CALL GETFM(NEED2)
      CALL MOM23_CIM(NOA,NUA,NOB,NUB,X(I1),X(I2),X(I3),X(I4),X(I5),
     *    X(I6),X(I7),X(I8),X(I9),X(I10),X(I11),X(I12),X(I13),X(I14),
     *    X(I15),X(I16),X(I17),X(I18),X(I19),X(I20),X(I21),X(I22),
     *    X(I23),X(I24),X(I25),X(I26),X(I27),X(I28),X(I29),X(I30),
     *    X(I31),X(I32),X(I33),X(I34),X(I35),X(I36),X(I37),X(I38),
     *    X(I39),X(I40),X(I41),X(I42),X(I43),X(I44),X(I45),X(I46),
     *    X(I47),X(I48),NC,NCU3s,EHA,EPA,EHB,EPB)
      CALL RETFM(NEED2)
      GO TO 7000
C
C         ----- High I/O Option -----
C     Option 3 is slower than the High Memory and High Disk options.
C     Option 3 uses less memory than High Memory, more than High Disk.
C     The triply excited moments M3 are not stored in LAMB23 file.
C     For each combination of i<j<k, we read the hbar matrix elements
C     using a matrix of dimension no*nu**3 to multiply them by T2
C     cluster amplitudes.
C
C     the quartic sized arrays used here are
C     1*No**4 + 6*No**3*Nu + 10*No**2*Nu**2 + 3*No*Nu**3 - MM(2,3) code3
C
 3000 CONTINUE
      CALL VALFM(LOADFM)
      I1   = LOADFM + 1
      I2   = I1     + NOU       ! O1AA
      I3   = I2     + NOU       ! O1BB
      I4   = I3     + NO2U2     ! L2AA
      I5   = I4     + NO2U2     ! L2BB
      I6   = I5     + NO2U2     ! L2AB
      I7   = I6     + NO2U2     ! O2
      I8   = I7     + NO2U2     ! O2AA
      I9   = I8     + NO2U2     ! O2BB
      I10  = I9     + NO2U2     ! O2AB
      I11  = I10    + NOU3      ! VEAA
      I12  = I11    + NOU3      ! VEAB
      I13  = I12    + NOU3      ! VEBA
      I14  = I13    + NOU       ! FHPAA
      I15  = I14    + NOU       ! FHPBB
      I16  = I15    + NO2U2     ! VHPRAA
      I17  = I16    + NO2U2     ! VHPRBB
      I18  = I17    + NU3       ! M3
      I19  = I18    + NU3       ! L3
      I20  = I19    + NO2U2     ! VHPRAB
      I21  = I20    + NU3       ! TI
      I22  = I21    + NO3U      ! VMAB
      I23  = I22    + NO3U      ! VMBA
      I24  = I23    + NO3U      ! VMAA
      I25  = I24    + NO3U      ! VMBB
      I26  = I25    + NO3U      ! VMAB21
      I27  = I26    + NO3U      ! VMBA21
      I28  = I27    + NO2       ! FHHA
      I29  = I28    + NO2       ! FHHB
      I30  = I29    + NU2       ! FPPA
      I31  = I30    + NU2       ! FPPB
      I32  = I31    + NO2       ! X1AA
      I33  = I32    + NO2       ! X1BB
      I34  = I33    + NO2       ! X1AB
      I35  = I34    + NU2       ! X2AA
      I36  = I35    + NU2       ! X2BB
      I37  = I36    + NU2       ! X2AB
      I38  = I37    + NOU       ! X3AA
      I39  = I38    + NOU       ! X3BB
      I40  = I39    + NOU       ! X3AB
      I41  = I40    + NOU       ! X3BA
      I42  = I41    + NOU2      ! X4AAA
      I43  = I42    + NOU2      ! X4AAB
      I44  = I43    + NOU2      ! X4BBA
      I45  = I44    + NOU2      ! X4BBB
      I46  = I45    + NO2U      ! X5AAA
      I47  = I46    + NO2U      ! X5AAB
      I48  = I47    + NO2U      ! X5BBA
      I49  = I48    + NO2U      ! X5BBB
      I50  = I49    + NO4       !-CIM- VHHHH
      I51  = I50    + NOA       !-CIM- ECIMA
      I52  = I51    + NOB       !-CIM- ECIMB
      I53  = I52    + NOA2      !-CIM- TXA
      I54  = I53    + NOB2      !-CIM- TXB
      I55  = I54    + NCU3s     !-CIM- XXM3
      I56  = I55    + NCU3s     !-CIM- XXL3
      LAST = I56    + NC        !-CIM- TXs
      NEED3=LAST-LOADFM-1
      WRITE(IW,9110) NEED3,'HIGH I/O VERSION    (3)'
      CALL FLSHBF(IW)
      WRITE(ICIF,9110) NEED3,'HIGH I/O VERSION    (3)'
      CALL FLSHBF(ICIF)
C
      IF(EXETYP.EQ.CHECK) GO TO 7000
C
      WRITE(IW,9100) 'HIGH I/O VERSION'
      CALL GETFM(NEED3)
      CALL LAMB23_IO_CIM(NOA,NUA,NOB,NUB,X(I1),X(I2),X(I3),X(I4),
     *    X(I5),X(I6),X(I7),X(I8),X(I9),X(I10),X(I11),X(I12),X(I13),
     *    X(I14),X(I15),X(I16),X(I17),X(I18),X(I19),X(I20),X(I21),
     *    X(I22),X(I23),X(I24),X(I25),X(I26),X(I27),X(I28),X(I29),
     *    X(I30),X(I31),X(I32),X(I33),X(I34),X(I35),X(I36),X(I37),
     *    X(I38),X(I39),X(I40),X(I41),X(I42),X(I43),X(I44),X(I45),
     *    X(I46),X(I47),X(I48),X(I49),
     *    X(I50),X(I51),X(I52),X(I53),X(I54),X(I55),X(I56),
     *    NC,NCU3s,EHA,EPA,EHB,EPB)
      CALL RETFM(NEED3)
C
C        now done, no matter which of the three options was executed
C
 7000 CONTINUE
      IF(EXETYP.EQ.CHECK) THEN
         NEED = MIN(NEED1,NEED2,NEED3)
         IF(NEED.GT.NGOTMX) THEN
            WRITE(IW,9130) NEED,NGOTMX
            CALL ABRT
         END IF
      END IF
C
      WRITE(IW,9120)
      CALL TIMIT(1)
      RETURN
C
 9000 FORMAT(/8X,'-----------------------'/
     *        8X,'OPEN-SHELL CCSD PROGRAM'/
     *        8X,'-----------------------')
 9010 FORMAT(1X,'MEMORY NEEDED BY CCSD    : ',I12,' WORDS')
 9020 FORMAT(1X,'....... DONE WITH CCSD AMPLITUDE ITERATIONS .......')
 9030 FORMAT(/8X,'-------------------------------------'/
     *        8X,'OPEN-SHELL EQUATION-OF-MOTION PROGRAM'/
     *        8X,'-------------------------------------')
 9040 FORMAT(1X,'MEMORY NEEDED BY ONEHBAR : ',I12,' WORDS')
 9050 FORMAT(1X,'MEMORY NEEDED BY TWOHBAR : ',I12,' WORDS')
 9060 FORMAT(1X,'....... DONE WITH MATRIX ELEMENTS OF HBAR .......')
 9070 FORMAT(/1X,'MEMORY NEEDED BY OPENLEFT: ',I12,' WORDS')
 9080 FORMAT(1X,'....... DONE WITH LAMBDA AMPLITUDE ITERATIONS .......')
 9090 FORMAT(/8X,'-----------------------------'/
     *        8X,'OPEN-SHELL CR-CC(2,3) PROGRAM'/
     *        8X,'-----------------------------'/
     *        9X,'AVAILABLE MEMORY : ',I12,' WORDS')
 9100 FORMAT(1X,'CHOOSING THE -',A,'- FOR OPEN SHELL MM(2,3)')
 9110 FORMAT(1X,'MEMORY NEEDED BY MM(2,3) : ',I12,' WORDS, CODE=',A)
 9120 FORMAT(/1X,'..... DONE WITH CC NON-ITERATIVE TRIPLES CORRECTIONS',
     *          ' .....')
 9130 FORMAT(//1X,'THERE IS NOT ENOUGH MEMORY TO EXECUTE ANY',
     *            ' OF THE MM(2,3) CODES.'/
     *   1X,'REQUIRED=',I14,' AVAILABLE=',I14,' WORDS'//)
 9150 FORMAT(1X,'NOT ENOUGH MEMORY FOR THE FASTEST HIGH MEMORY',
     *          ' CR-CC(2,3) OPTION'/
     *       1X,'MEMORY NEEDED = ',I10,' MEMORY AVAILABLE = ',I10/
     *       1X,'PLEASE INCREASE THE MEMORY AND RESUBMIT OR, IF',
     *          ' THE MEMORY REQUIRED'/
     *       1X,'BY THE IOPMET = 1 OPTION IS NOT AVAILABLE, CHOOSE',
     *          ' ONE OF THE'/
     *       1X,'FOLLOWING ALTERNATIVES:'/
     *       1X,'A. IF THERE IS ENOUGH DISK SPACE TO STORE THE',
     *          ' TRIPLES-LIKE VECTOR'/
     *       1X,'(WHOSE DIMENSION IS ON THE ORDER OF ',
     *          '(NO**3)(NU**3)/6) AND ALL'/
     *       1X,'OTHER INTEGRAL, AMPLITUDE, AND INTERMEDIATE FILES',
     *          ' THAT ARE COMMON'/
     *       1X,'TO ALL CR-CC(2,3) RUNS, CHOOSE THE HIGH DISK',
     *          ' IOPMET = 2 OPTION,'/
     *       1X,'WHICH IS SLOWER THAN THE HIGH MEMORY IOPMET = 1',
     *          ' OPTION, BUT FASTER'/
     *       1X,'THAN THE IOPMET = 3 HIGH I/O OPTION.'/
     *       1X,'B. IF THERE IS NOT ENOUGH DISK SPACE FOR THE',
     *          ' IOPMET = 2 OPTION,'/
     *       1X,'CHOOSE THE HIGH I/O, BUT LOWER-DISK AND SLOWER',
     *          ' IOPMET = 3 OPTION.')
 9160 FORMAT(1X,'NOT ENOUGH MEMORY FOR THE HIGH DISK STORAGE '/
     *          ' CR-CC(2,3) OPTION'/
     *       1X,'MEMORY NEEDED = ',I10,' MEMORY AVAILABLE = ',I10/
     *       1X,'PLEASE CHECK THE REQUESTED MEMORY, MAKE SURE THAT',
     *          ' YOU HAVE ENOUGH DISK,'/
     *       1X,'AND RESUBMIT, OR CHOOSE ONE OF THE FOLLOWING',
     *          ' ALTERNATIVES:'/
     *       1X,'A. IF THERE IS NOT ENOUGH DISK SPACE TO STORE THE',
     *          ' TRIPLES-LIKE VECTOR'/
     *       1X,'(WHOSE DIMENSION IS ON THE ORDER OF',
     *          ' (NO**3)(NU**3)/6) AND ALL'/
     *       1X,'OTHER INTEGRAL, AMPLITUDE, AND INTERMEDIATE FILES',
     *          ' THAT ARE COMMON'/
     *       1X,'TO ALL CR-CC(2,3) RUNS, BUT THERE IS ENOUGH MEMORY',
     *          ' FOR THE HIGH-MEMORY'/
     *       1X,'IOPMET=1 OPTION, CHOOSE OPTION IOPMET=1, WHICH IS',
     *          ' THE FASTEST.'/
     *       1X,'B. IF THERE IS NOT ENOUGH DISK SPACE FOR THE',
     *          ' IOPMET=2 OPTION AND NOT'/
     *       1X,'ENOUGH MEMORY FOR THE IOPMET=1 OPTION, CHOOSE THE',
     *          ' HIGH I/O, BUT LOWER'/
     *       1X,'DISK SPACE BUT SLOWER IOPMET=3 OPTION.')
      END
C
C*MODULE ROHFCC  *DECK OPEN_CCSD_CIM  -CIM-
      SUBROUTINE OPEN_CCSD_CIM(NOA,NUA,NOB,NUB,O1AA,T1,O1BB,VHHAA,VHPLAA
     *,VHPLBB,O2AA,O2BB,O2AB,VEAB,VEBA,VHPRBB,VHPRAA,VHPRAB,TI,VMAA,FHP,
     *FHHAA,FHHBB,FPPAA,FPPBB,T2,VPP,XMAT,BVEC,IPVT,
     *ECIMA,ECIMB,TXA,TXB,EKA,EKB,EHA,EPA,EHB,EPB)  !-CIM-
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL CNVR
C
      COMMON /CCENGY/ ENRG,EREF,EMP2,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CCINFO/ TSH,NH,NP,MET,MEM,ICONV,MAXIT,IREST,IDISC
      COMMON /CCOPIN/ IOPCCREF,IOPCCMET,NOPCCFC,MULOPCC,
     *                KMICRO,KREST,LMICRO,LREST
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
      COMMON /NNMAX / NOU,NO2,NU2,NO2U2,NO4,NU3,NO3U,NOU3,NOU2,NO2U
      COMMON /NNROHF/ NOAUA,NOAUB,NOBUA,NOBUB,NOA2,NOA2UA,NOA4,NOB2,
     *                NOB2UB,NOB4,NUA2,NOAUA2,NUA4,NUB2,NOBUB2,NUB4,
     *                NUAB,NOAB,NO2AB,NU2AB,NOABUB,NOABUA,NOAUAB,
     *                NOBUAB,NOA2UA2,NOB2UB2,NOA2UB2,NOB2UA2,NO2U2AB,
     *                NUA3,NUB3,NOA3,NOB3,NOA3UA,NOB3UB,NOA2UB,NOAUB2,
     *                NOB2UA,NOBUA2,NUA2UB,NOA2OB,NOAOB2,NUA3NOA,
     *                NUAUB2,NOAOB2UA,NUB3NOB
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)  !-CIM-
      EXTERNAL DSUM  !-CIM-
C
      DIMENSION TI(1),VHPLAA(1),VHPRAA(1),VHHAA(1),
     *          O1AA(1),O1BB(1),O2AA(1),VHPLBB(1),O2AB(1),O2BB(1),
     *          VEAB(1),VHPRAB(1),VMAA(1),VHPRBB(1),VEBA(1),FHP(1),
     *          T1(1),FHHAA(1),FHHBB(1),FPPAA(1),FPPBB(1),VPP(1),
     *          T2(1),EHA(NOA),EPA(NUA),EHB(NOB),EPB(NUB)
C
      DIMENSION ECIMA(NOA),ECIMB(NOB),TXA(NOA,NOA),TXB(NOB,NOB),
     *          EKA(NOA,NOA),EKB(NOB,NOB)  !-CIM-
C
      DATA TWO/2.0D+0/,HALF/0.5D+0/,ONE/1.0D+00/,
     *     FOURTH/0.25D+0/,FOUR/4.0D+0/,EIGHT/8.0D+0/
C
C          'jestem w open_ccsd'
C
C     --------------------NOTES--------------------------------
C     iconv is convergence threshold
C     maxit is maximum number of iterations
C     kmicro is number of iterations in DIIS cycle
C     ---------------------------------------------------------
C
      TOL=(10.0D+00)**(-ICONV)
C
      WRITE(6,2300)
 2300 FORMAT(/6X,'BEGINNING OPEN SHELL CCSD ITERATIONS')
C
C     ----------------SET INITIAL VALUES OF T--------------
C
C             clean start the CCSD iterations (KREST zero)
C
      IF(KREST.EQ.0) THEN
Cc         call zeroma(o1aa,1,noaua)
         CALL RCCFL(NFT843,5,NOAUA,O1AA)
         CALL TRANSNQN(NUA,NOA,O1AA,TI)
         CALL DENADD1(NOA,NUA,O1AA,EHA,EPA)
         CALL WRTAB2(NOA,NUA,O1AA,1,NFT858)
C
Cc         call zeroma(o1bb,1,nobub)
         CALL RCCFL(NFT843,6,NOBUB,O1BB)
         CALL TRANSNQN(NUB,NOB,O1BB,TI)
         CALL DENADD1(NOB,NUB,O1BB,EHB,EPB)
         CALL WRTAB2(NOB,NUB,O1BB,2,NFT858)
C
Cc         call zeroma(o2aa,1,noa2ua2)
         CALL RDINT(1,NOAUA,NOAUA,O2AA,NFT829)
         CALL INSITU(NUA,NOA,NUA,NOA,TI,O2AA,12)
         CALL DENADD2(NOA,NUA,O2AA,EHA,EPA)
         CALL WRTAB(NOA,NUA,NUA,NOA,O2AA,3,NFT858)
C
Cc         call zeroma(o2bb,1,nob2ub2)
         CALL RDINT(1,NOBUB,NOBUB,O2BB,NFT830)
         CALL INSITU(NUB,NOB,NUB,NOB,TI,O2BB,12)
         CALL DENADD2(NOB,NUB,O2BB,EHB,EPB)
         CALL WRTAB(NOB,NUB,NUB,NOB,O2BB,4,NFT858)
C
Cc         call zeroma(o2ab,1,no2u2ab)
         CALL RDINT(1,NOBUB,NOAUA,O2AB,NFT833)
         CALL INSITU(NUA,NOA,NUB,NOB,TI,O2AB,12)
         CALL DENADAB(NOA,NUA,NUB,NOB,O2AB,EHA,EHB,EPA,EPB)
         CALL WRTAB(NOA,NUA,NUB,NOB,O2AB,5,NFT858)
C
C             restart of the CCSD iterations (KREST non-zero)
C             Note that this entails records 1-5 of the file, with
C             higher records being used for the LAMBDA iterations.
C
      ELSE
         CALL RDTAB2(NOA,NUA,O1AA,1,NFT825)
         CALL RDTAB2(NOB,NUB,O1BB,2,NFT825)
         CALL RDTAB(NOA,NUA,NUA,NOA,O2AA,3,NFT825)
         CALL RDTAB(NOB,NUB,NUB,NOB,O2BB,4,NFT825)
         CALL RDTAB(NOA,NUA,NUB,NOB,O2AB,5,NFT825)
         CALL WRTAB2(NOA,NUA,O1AA,1,NFT858)
         CALL WRTAB2(NOB,NUB,O1BB,2,NFT858)
         CALL WRTAB(NOA,NUA,NUA,NOA,O2AA,3,NFT858)
         CALL WRTAB(NOB,NUB,NUB,NOB,O2BB,4,NFT858)
         CALL WRTAB(NOA,NUA,NUB,NOB,O2AB,5,NFT858)
      END IF
C
C     -----------------------------------------------------
      ITERTOT=0
      DO 1000,ITMACRO=1,MAXIT
      DO 1001,ITMICRO=2,KMICRO+1
      ITERTOT=ITERTOT+1
      ITER=5*(ITMICRO-2)
      I1AA=ITER+1
      I1BB=ITER+2
      I2AA=ITER+3
      I2BB=ITER+4
      I2AB=ITER+5
C
Cc      call zeroma(o1aa,1,nou)
Cc      call zeroma(o1bb,1,nou)
Cc      call zeroma(o2aa,1,no2u2)
Cc      call zeroma(o2bb,1,no2u2)
Cc      call zeroma(o2ab,1,no2u2)
      CALL RDTAB2(NOA,NUA,O1AA,I1AA,NFT858)
      CALL RDTAB2(NOB,NUB,O1BB,I1BB,NFT858)
      CALL RDTAB(NOA,NUA,NUA,NOA,O2AA,I2AA,NFT858)
      CALL RDTAB(NOB,NUB,NUB,NOB,O2BB,I2BB,NFT858)
      CALL RDTAB(NOA,NUA,NUB,NOB,O2AB,I2AB,NFT858)
C
Cc      write(6,9100)
Cc 9100 FORMAT(1X,'....... BEFORE onebody, twobody .......')
Cc      CALL TIMIT(1)
C
C     ---------COMPUTE H-BAR INTERMEDIATES------------------
C
      CALL ONEBODY(NOA,NUA,NOB,NUB,FHHAA,O1AA,O1BB,
     *             FHHBB,FHP,VHPLBB,O2AA,O2BB,O2AB,
     *             VHPRBB,VHPRAA,VHPRAB,TI,VEBA,VHPLAA,VMAA,VPP)
C
      CALL TWOBODY(NOA,NUA,NOB,NUB,O1AA,O1BB,
     *             VHHAA,VHPLAA,O2AA,O2BB,O2AB,VEAB,VEBA,VHPRBB,
     *             VHPRAA,VHPRAB,TI,VHPLBB,VPP,VMAA,FHP)
C
C     ---------------------------------------------------------
C
Cc      write(6,9105)
Cc 9105 FORMAT(1X,'....... AFTER onebody, twobody .......')
Cc      CALL TIMIT(1)
C
C
      RES=0.00D+00
      ENRG=0.00D+00
C     ------------- T1a Equation -------------------------------
Ccc      call rdtab2(noa,noa,fhhaa,3,nft891)
Ccc      call rdtab2(nob,nob,fhhbb,4,nft891)
      CALL RDTAB2(NOA,NUA,FHP,5,NFT891)   !FHPAA
      CALL RDTAB(NOA,NOA,NOA,NUA,VMAA,14,NFT891)
      CALL RDINT(1,NOAUA,NOAUA,VHPLAA,NFT831)
      CALL RDINT(1,NOBUB,NOBUB,VHPLBB,NFT832)
      CALL RDINT(1,NOAUA,NOAUA,VHPRAA,NFT829)
      CALL RDINT(1,NOBUB,NOBUB,VHPRBB,NFT830)
      CALL RDINT(1,NOBUB,NOAUA,VHPRAB,NFT833)
      CALL RDINT(1,NOAUA,NUA2,VEBA,NFT836)
      CALL RDINT(1,NOBUA,NUAB,VEAB,NFT839)
C
      CALL ZEROMA(T1,1,NOU)
      CALL CCMATMUL(FHHAA,O1AA,T1,NOA,NUA,NOA,1,1) !IA
        CALL TRANSNQN(NOA,NUA,FHP,TI)
      CALL TRANMD(O2AA,NOA,NUA,NUA,NOA,23)
      CALL CCMATMUL(O2AA,FHP,T1,NOAUA,1,NOAUA,0,1)
      CALL TRANSQ(O2AA,NOAUA)
      CALL INSITU(NUA,NOA,NOA,NUA,TI,O2AA,13) !NMEA
      CALL VECMUL(O2AA,NOA2UA2,HALF)
      CALL TRANMD(VMAA,NOA,NOA,NOA,NUA,13)
      CALL CCMATMUL(VMAA,O2AA,T1,NOA,NUA,NOA2UA,0,1)
      CALL RDTAB2(NOB,NUB,FHP,6,NFT891) !FHPBB
       CALL TRANSNQN(NOB,NUB,FHP,TI)
      CALL CCMATMUL(O2AB,FHP,T1,NOAUA,1,NOBUB,0,0)
        CALL TRANSNQN(NOAUA,NOBUB,O2AB,TI)
      CALL INSITU(NUB,NOB,NOA,NUA,TI,O2AB,13) !MNEA
      CALL RDTAB(NOA,NOB,NOA,NUB,VMAA,16,NFT891)
      CALL TRANMD(VMAA,NOA,NOB,NOA,NUB,13)
      CALL INSITU(NOA,NOB,NOA,NUB,TI,VMAA,23) !IMNE
      CALL CCMATMUL(VMAA,O2AB,T1,NOA,NUA,NOABUB,0,1)
        CALL TRANSNQN(NOA,NUA,O1AA,TI)
        CALL TRANSNQN(NOB,NUB,O1BB,TI)
        CALL TRANSNQN(NOA,NUA,T1,TI)
      CALL CCMATMUL(VHPLAA,O1AA,T1,NOAUA,1,NOAUA,0,1) !AI
      CALL CCMATMUL(VHPRAB,O1BB,T1,NOAUA,1,NOBUB,0,0)
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,13)
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,23)
      CALL INSITU(NOA,NOA,NUA,NUA,TI,O2AA,13)
      CALL TRANSQ(O2AA,NOAUA)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,O2AA,13) !FEMI
      CALL CCMATMUL(VEBA,O2AA,T1,NUA,NOA,NOAUA2,0,1)
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13) !AEFM
      CALL INSITU(NOA,NOB,NUB,NUA,TI,O2AB,12)
        CALL TRANSNQN(NOAB,NUAB,O2AB,TI) !EFMI
      CALL CCMATMUL(VEAB,O2AB,T1,NUA,NOA,NOBUAB,0,0)
        CALL RCCFL(NFT843,3,NUA2,FPPAA)
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,23)
      CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB,23)
      CALL CCMATMUL(VEBA,O1AA,FPPAA,NUA2,1,NOAUA,0,1)
      CALL CCMATMUL(VEAB,O1BB,FPPAA,NUA2,1,NOBUB,0,0)
      CALL CCMATMUL(FPPAA,O1AA,T1,NUA,NOA,NUA,0,0)
      CALL RCCFL(NFT843,5,NOAUA,FHP)
      CALL VECADD(T1,FHP,NOAUA)
      CALL DENAD1A(NOA,NUA,T1,EHA,EPA)
      CALL RESNT1A(NOA,NUA,T1,O1AA,RES)
C Calculate Energy
      CALL VECMUL(VHPRAA,NOA2UA2,HALF)
      CALL CCMATMUL(VHPRAA,T1,FHP,NOAUA,1,NOAUA,0,0)
      CALL CCMATMUL(FHP,T1,ENRG,1,1,NOAUA,1,0)
      CALL VECMUL(VHPRAA,NOA2UA2,TWO)
      CALL CCMATMUL(T1,VHPRAB,VPP,1,NOBUB,NOAUA,1,0)
      CALL TRANSNQN(NUA,NOA,T1,TI)
      CALL WRTAB2(NOA,NUA,T1,(I1AA+5),NFT858)
C     ----------------------------------------------------------
      CALL ZEROMA(T1,1,NOU)
C     ------------- T1b Equation -------------------------------
      CALL RDINT(1,NOBUB,NUB2,VEAB,NFT837)
      CALL RDINT(1,NOAUB,NUAB,VEBA,NFT838)
      CALL RDTAB2(NOB,NUB,FHP,6,NFT891) !FHPBB
        CALL TRANSNQN(NUB,NOB,O1BB,TI)
      CALL CCMATMUL(FHHBB,O1BB,T1,NOB,NUB,NOB,1,1) !IA
        CALL TRANSNQN(NOB,NUB,FHP,TI)
      CALL TRANMD(O2BB,NOB,NUB,NUB,NOB,23)
      CALL CCMATMUL(O2BB,FHP,T1,NOBUB,1,NOBUB,0,1)
      CALL TRANSQ(O2BB,NOBUB)
      CALL INSITU(NUB,NOB,NOB,NUB,TI,O2BB,13) !NMEA
      CALL VECMUL(O2BB,NOB2UB2,HALF)
      CALL RDTAB(NOB,NOB,NOB,NUB,VMAA,15,NFT891)
      CALL TRANMD(VMAA,NOB,NOB,NOB,NUB,13)
      CALL CCMATMUL(VMAA,O2BB,T1,NOB,NUB,NOB2UB,0,1)
      CALL RDTAB2(NOA,NUA,FHP,5,NFT891) !FHPAA
       CALL TRANSNQN(NOA,NUA,FHP,TI)
      CALL INSITU(NUB,NUA,NOB,NOA,TI,O2AB,23)
        CALL TRANSNQN(NOB,NUB,T1,TI)
      CALL CCMATMUL(O2AB,FHP,T1,NOBUB,1,NOAUA,0,0)
      CALL INSITU(NUB,NOB,NUA,NOA,TI,O2AB,23) !AEMN
      CALL RDTAB(NOA,NOB,NUA,NOB,VMAA,17,NFT891)
      CALL INSITU(NOA,NOB,NUA,NOB,TI,VMAA,13) !EMNI
      CALL CCMATMUL(O2AB,VMAA,T1,NUB,NOB,NOABUA,0,1)
        CALL TRANSNQN(NOB,NUB,O1BB,TI)
      CALL CCMATMUL(VHPLBB,O1BB,T1,NOBUB,1,NOBUB,0,1) !AI
      CALL CCMATMUL(O1AA,VHPRAB,T1,1,NOBUB,NOAUA,0,0)
      CALL TRANMD(VEAB,NUB,NUB,NUB,NOB,13)
      CALL TRANMD(VEAB,NUB,NUB,NUB,NOB,23)
      CALL INSITU(NOB,NOB,NUB,NUB,TI,O2BB,13)
      CALL TRANSQ(O2BB,NOBUB)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,O2BB,13) !FEMI
      CALL CCMATMUL(VEAB,O2BB,T1,NUB,NOB,NOBUB2,0,1)
      CALL INSITU(NUB,NUA,NOB,NOA,TI,O2AB,13) !IEFM
        CALL RCCFL(NFT843,6,NOBUB,FHP)
        CALL VECADD(T1,FHP,NOBUB)
        CALL TRANSNQN(NUB,NOB,T1,TI)
      CALL CCMATMUL(O2AB,VEBA,T1,NOB,NUB,NOAUAB,0,0)
        CALL RCCFL(NFT843,4,NUB2,FPPBB)
      CALL TRANMD(VEAB,NUB,NUB,NUB,NOB,23)
      CALL INSITU(NUA,NUB,NOA,NUB,TI,VEBA,23)
      CALL CCMATMUL(VEAB,O1BB,FPPBB,NUB2,1,NOBUB,0,1)
        CALL TRANSNQN(NUB,NUB,FPPBB,TI)
      CALL CCMATMUL(O1AA,VEBA,FPPBB,1,NUB2,NOAUA,0,0)
        CALL TRANSNQN(NUB,NOB,O1BB,TI)
      CALL CCMATMUL(O1BB,FPPBB,T1,NOB,NUB,NUB,0,0)
      CALL DENADD1(NOB,NUB,T1,EHB,EPB)
      CALL RESNT1B(NOB,NUB,T1,O1BB,RES)
      CALL WRTAB2(NOB,NUB,T1,(I1BB+5),NFT858)
      CALL TRANSNQN(NOB,NUB,T1,TI)
C Calculate Energy
      CALL DAXPY(NOBUB,ONE,VPP,1,FHP,1)
      CALL VECMUL(VHPRBB,NOB2UB2,HALF)
      CALL CCMATMUL(VHPRBB,T1,FHP,NOBUB,1,NOBUB,0,0)
      CALL CCMATMUL(FHP,T1,ENRG,1,1,NOAUA,0,0)
      CALL VECMUL(VHPRBB,NOB2UB2,TWO)
Ccc
Cc      write(6,9115)
Cc 9115 FORMAT(1X,'....... AFTER t1 .......')
Cc      CALL TIMIT(1)
C
C     -------------------------------------------------------------
      CALL ZEROMA(T2,1,NO2U2)
C     -----------------T2aa Equation-------------------------------
      CALL RDTAB(NOA,NOA,NOA,NOA,VHHAA,7,NFT891)
      CALL RDTAB(NOA,NOA,NOA,NUA,VMAA,10,NFT891)
      CALL RDINT(1,NOAUA,NUA2,VEBA,NFT836)
      CALL RDINT(1,NOBUA,NUAB,VEAB,NFT839)
C t2aa
      CALL TRANSQ(FHHAA,NOA)
      CALL CCMATMUL(O2AA,FHHAA,T2,NOAUA2,NOA,NOA,1,1) !ABIJ
      CALL TRANSQ(VHHAA,NOA2) !MNIJ
      CALL VECMUL(O2AA,NOA2UA2,FOURTH)
      CALL CCMATMUL(O2AA,VHHAA,T2,NUA2,NOA2,NOA2,0,0) !ABIJ
        CALL TRANSNQN(NOA2,NOAUA,VMAA,TI)
      CALL VECMUL(O1AA,NOAUA,HALF)
      CALL CCMATMUL(O1AA,VMAA,T2,NUA,NOA2UA,NOA,0,1) !ABIJ
C vhplaa_i
        CALL TRANSNQN(NUA,NOA,O1AA,TI)
      CALL VECMUL(O1AA,NOAUA,TWO)
      CALL VECMUL(O2AA,NOA2UA2,FOUR)
      CALL INSITU(NUA,NUA,NOA,NOA,TI,O2AA,13)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,O2AA,12)
      CALL TRANMD(VHPRAA,NUA,NOA,NUA,NOA,13)
      CALL TRANSQ(VHPRAA,NOAUA)
      CALL CCMATMUL(O2AA,VHPRAA,VHPLAA,NOAUA,NOAUA,NOAUA,0,1)
Cc
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,12)
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,23)
      CALL INSITU(NUA,NOA,NUA,NOA,TI,VHPLAA,12)
      CALL CCMATMUL(O1AA,VEBA,VHPLAA,NOA,NOAUA2,NUA,0,0)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,VHPLAA,12)
Cc
      CALL TRANSQ(VHPLAA,NOAUA)
      CALL VECMUL(O2AA,NOA2UA2,TWO)
      CALL INSITU(NUA,NUA,NOA,NOA,TI,T2,13)
      CALL INSITU(NUA,NOA,NUA,NOA,TI,O2AA,12)
      CALL CCMATMUL(O2AA,VHPLAA,T2,NOAUA,NOAUA,NOAUA,0,1) !IBAJ
C vhprab_i (temp veab)
      CALL VECMUL(O2AB,NO2U2AB,HALF)
      CALL TRAN14(NOB,NUA,NUB,NOA,TI,O2AB)
      CALL CCMATMUL(O2AB,VHPRBB,VHPLAA,NOAUA,NOBUB,NOBUB,1,0) !IABJ
      CALL VECCOP(NO2U2AB,VHPLBB,VHPLAA)
Ccc
      CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB,23)
      CALL CCMATMUL(O1AA,VEAB,VHPLAA,NOA,NOBUAB,NUA,0,0) !IABJ
Ccc
      CALL INSITU(NOA,NUA,NUB,NOB,TI,VHPLAA,12)
        CALL VECADD(VHPLAA,VHPRAB,NO2U2AB)
      CALL INSITU(NUA,NOA,NUB,NOB,TI,VHPLAA,12)
        CALL VECADD(VHPLBB,VHPLAA,NO2U2AB)
      CALL WRTAB(NOA,NUA,NUB,NOB,VHPLBB,6,NFT892)
      CALL TRANMD(O2AA,NOA,NUA,NUA,NOA,23)
      CALL CCMATMUL(O2AA,VHPRAB,VHPLAA,NOAUA,NOBUB,NOAUA,0,0) !IABJ
      CALL INSITU(NOA,NUA,NUB,NOB,TI,VHPLAA,12)
      CALL TRANMD(T2,NOA,NUA,NUA,NOA,23) !IABJ
        CALL TRANSNQN(NOAUA,NOBUB,VHPLAA,TI)
      CALL VECMUL(O2AB,NO2U2AB,TWO)
      CALL CCMATMUL(O2AB,VHPLAA,T2,NOAUA,NOAUA,NOBUB,0,0)
C fpp
      CALL INSITU(NOA,NUA,NUA,NOA,TI,O2AA,12)
      CALL INSITU(NUA,NOA,NUA,NOA,TI,VHPRAA,12)
      CALL TRANSQ(VHPRAA,NOAUA)
      CALL INSITU(NUA,NOA,NOA,NUA,TI,VHPRAA,12)
      CALL VECMUL(O2AA,NOA2UA2,HALF)
      CALL CCMATMUL(O2AA,VHPRAA,FPPAA,NUA,NUA,NOA2UA,0,1)
      CALL INSITU(NUA,NOA,NUB,NOB,TI,VHPRAB,12)
        CALL TRANSNQN(NOAUA,NOBUB,VHPRAB,TI)
      CALL TRAN1TO4(NOA,NUA,NUB,NOB,TI,O2AB)
      CALL CCMATMUL(O2AB,VHPRAB,FPPAA,NUA,NUA,NOABUB,0,1)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,T2,12)
      CALL TRANSQ(T2,NOAUA)
      CALL CCMATMUL(FPPAA,O2AA,T2,NUA,NOA2UA,NUA,0,0)
      CALL VECMUL(O2AA,NOA2UA2,FOURTH)
Ccc      call insitu(nua,noa,nua,noa,ti,o2aa,23)
Ccc        call transnqn(nua2,noa2,o2aa,ti)
      CALL INSITU(NUA,NOA,NUA,NOA,TI,T2,23)!BAJI
        CALL TRANSNQN(NUA2,NOA2,T2,TI)
      CALL INSITU(NOA,NOA,NUA,NUA,TI,T2,12)!IJBA
Cc
Cc      call tranmd(veba,nua,nua,nua,noa,23)
Cc      call tranmd(veba,nua,nua,nua,noa,12)
Cc
      CALL VECMUL(O1AA,NOAUA,HALF)
      CALL INSITU(NUA,NOA,NUA,NOA,TI,O2AA,12)
      CALL TRAN34N(NOA,NUA,NUA,NOA,TI,O2AA)
      CALL CCMATMUL4P(VPP,O1AA,O2AA,T2,VEAB,NOA,NUA,0)
Ccccc      call ccmatmul4p_old(vpp,o1aa,o2aa,t2,veba,noa,nua,0)
      CALL TRAN24(NOA,NOA,NUA,NUA,TI,T2) !IABJ
      CALL TRAN34N(NOA,NUA,NOA,NUA,TI,O2AA)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,O2AA,12)
Ccc        call transnqn(noa2,nua2,o2aa,ti)
Ccc      call insitu(nua,nua,noa,noa,ti,o2aa,23)
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,13)
Cc      call vecmul(o2aa,noa2ua2,sixteen)
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,12)
      CALL INSITU(NUA,NUB,NOB,NOA,TI,O2AB,13)
      CALL INSITU(NOB,NUB,NUA,NOA,TI,O2AB,12)
      CALL CCMATMUL(O1AA,VEBA,T2,NOA,NOAUA2,NUA,0,0) !IABJ
C
      CALL SYMETR2(T2,NOA,NUA,TI)
C
      CALL TRANMD(VHPRAA,NOA,NUA,NOA,NUA,13)
      CALL INSITU(NOA,NUA,NOA,NUA,TI,VHPRAA,12)
      CALL TRANSQ(VHPRAA,NOAUA)
      CALL VECADD(T2,VHPRAA,NOA2UA2)
      CALL DENADD2(NOA,NUA,T2,EHA,EPA)
      CALL VECMUL(O2AA,NOA2UA2,EIGHT)
      CALL RESNT2A(NOA,NUA,T2,O2AA,RES)
      CALL WRTAB(NOA,NUA,NUA,NOA,T2,(I2AA+5),NFT858)
C CALCULATE ENERGY
      CALL VECMUL(T2,NOA2UA2,FOURTH)
      CALL CCMATMUL(VHPRAA,T2,ENRG,1,1,NOA2UA2,0,0)
Ccc
Cc      write(6,9125)
Cc 9125 FORMAT(1X,'....... AFTER t2aa .......')
Cc      CALL TIMIT(1)
C
C     -------------------------------------------------------------
      CALL ZEROMA(T2,1,NO2U2)
C     -----------------T2bb Equation-------------------------------
      CALL RDTAB(NOB,NOB,NOB,NOB,VHHAA,8,NFT891)
      CALL RDTAB(NOB,NOB,NOB,NUB,VMAA,11,NFT891)
      CALL RDINT(1,NOBUB,NOBUB,VHPLBB,NFT832)
      CALL RDINT(1,NOBUB,NUB2,VEBA,NFT837)
      CALL RDINT(1,NOAUB,NUAB,VEAB,NFT838)
C
      CALL TRANSQ(FHHBB,NOB)
      CALL CCMATMUL(O2BB,FHHBB,T2,NOBUB2,NOB,NOB,1,1) !ABIJ
      CALL TRANSQ(VHHAA,NOB2) !MNIJ
      CALL VECMUL(O2BB,NOB2UB2,FOURTH)
      CALL CCMATMUL(O2BB,VHHAA,T2,NUB2,NOB2,NOB2,0,0) !ABIJ
        CALL TRANSNQN(NOB2,NOBUB,VMAA,TI)
        CALL TRANSNQN(NOB,NUB,O1BB,TI)
      CALL VECMUL(O1BB,NOBUB,HALF)
      CALL CCMATMUL(O1BB,VMAA,T2,NUB,NOB2UB,NOB,0,1) !ABIJ
C
C vhpl_bb
      CALL VECMUL(O1BB,NOBUB,TWO)
        CALL TRANSNQN(NUB,NOB,O1BB,TI)
      CALL TRANMD(VHPRBB,NUB,NOB,NUB,NOB,13)
      CALL TRANSQ(VHPRBB,NOBUB)
      CALL VECMUL(O2BB,NOB2UB2,FOUR)
      CALL INSITU(NUB,NUB,NOB,NOB,TI,O2BB,13)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,O2BB,12)
      CALL CCMATMUL(O2BB,VHPRBB,VHPLBB,NOBUB,NOBUB,NOBUB,0,1)
      CALL VECMUL(O2BB,NOB2UB2,TWO)
      CALL INSITU(NUB,NOB,NUB,NOB,TI,VHPLBB,12)
Cc
      CALL TRANMD(VEBA,NUB,NUB,NUB,NOB,12)
      CALL TRANMD(VEBA,NUB,NUB,NUB,NOB,23)
      CALL CCMATMUL(O1BB,VEBA,VHPLBB,NOB,NOBUB2,NUB,0,0)
Cc      call tranmd(veba,nub,nub,nub,nob,23)
Cc      call tranmd(veba,nub,nub,nub,nob,12)
Cc
      CALL TRANSQ(O2BB,NOBUB)
      CALL INSITU(NUB,NUB,NOB,NOB,TI,T2,13)
      CALL CCMATMUL(VHPLBB,O2BB,T2,NOBUB,NOBUB,NOBUB,0,1) !IBAJ
C
C vhprab_i (temp veab)
      CALL INSITU(NUA,NUB,NOA,NUB,TI,VEAB,23)
      CALL VECMUL(O2AB,NO2U2AB,HALF)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,VHPRAA,12)
      CALL CCMATMUL(O2AB,VHPRAA,VHPLAA,NOBUB,NOAUA,NOAUA,1,0)
      CALL VECCOP(NO2U2AB,VHPLBB,VHPLAA)
C
      CALL TRAN34N(NUB,NOB,NOA,NUA,TI,VHPRAB)
      CALL TRANMD(O2BB,NUB,NOB,NUB,NOB,13)
      CALL CCMATMUL(O2BB,VHPRAB,VHPLAA,NOBUB,NOAUA,NOBUB,0,0)
        CALL VECADD(VHPLAA,VHPRAB,NO2U2AB)
Cc
        CALL TRANSNQN(NOAUA,NUB2,VEAB,TI)
      CALL INSITU(NUB,NOB,NUA,NOA,TI,VHPLAA,12)
      CALL CCMATMUL(O1BB,VEAB,VHPLAA,NOB,NOAUAB,NUB,0,0)
      CALL INSITU(NOB,NUB,NUA,NOA,TI,VHPLAA,12)
Cc
        CALL VECADD(VHPLBB,VHPLAA,NO2U2AB)
      CALL WRTAB(NUB,NOB,NUA,NOA,VHPLBB,5,NFT892)
C
      CALL VECMUL(O2AB,NO2U2AB,TWO)
        CALL TRANSNQN(NOBUB,NOAUA,VHPLAA,TI)
      CALL INSITU(NUB,NOB,NUA,NOA,TI,O2AB,12)
      CALL TRANMD(T2,NOB,NUB,NUB,NOB,23) !IABJ
      CALL CCMATMUL(O2AB,VHPLAA,T2,NOBUB,NOBUB,NOAUA,0,0)
C
C fpp_bb
      CALL INSITU(NUB,NOB,NUB,NOB,TI,O2BB,12)
      CALL TRANSQ(O2BB,NOBUB)
      CALL INSITU(NUB,NOB,NOB,NUB,TI,O2BB,12)
      CALL TRANSQ(VHPRBB,NOBUB)
      CALL VECMUL(O2BB,NOB2UB2,HALF)
      CALL CCMATMUL(VHPRBB,O2BB,FPPBB,NUB,NUB,NOB2UB,0,1)
      CALL INSITU(NUB,NOB,NUA,NOA,TI,VHPRAB,23)
        CALL TRANSNQN(NOBUB,NOAUA,O2AB,TI)
      CALL INSITU(NUA,NOA,NOB,NUB,TI,O2AB,23)
      CALL CCMATMUL(VHPRAB,O2AB,FPPBB,NUB,NUB,NOABUA,0,1)
      CALL TRANSQ(T2,NOBUB)
      CALL TRANSQ(FPPBB,NUB)
      CALL INSITU(NOB,NUB,NOB,NUB,TI,O2BB,12)
      CALL CCMATMUL(FPPBB,O2BB,T2,NUB,NOB2UB,NUB,0,0) ! BJIA
C vpp
C
      CALL VECMUL(O2BB,NOB2UB2,FOURTH)
Cc      call tranmd(o2bb,nub,nob,nob,nub,14)
Cc      call insitu(nub,nob,nob,nub,ti,o2bb,13)
      CALL INSITU(NUB,NOB,NOB,NUB,TI,T2,13) !IJBA
      CALL VECMUL(O1BB,NOBUB,HALF)
      CALL INSITU(NUB,NOB,NOB,NUB,TI,O2BB,12)
      CALL TRANSQ(O2BB,NOBUB) !IAJB
      CALL CCMATMUL4P(VPP,O1BB,O2BB,T2,VHPLBB,NOB,NUB,NUA)
Ccc      call ccmatmul4p_old(vpp,o1bb,o2bb,t2,veba,nob,nub,nua)
      CALL INSITU(NOB,NUB,NOB,NUB,TI,O2BB,12)
Cc      call tranmd(o2bb,nob,nob,nub,nub,12)
      CALL TRAN24(NOB,NOB,NUB,NUB,TI,T2)   !IABJ
C
      CALL TRANMD(VEBA,NUB,NUB,NUB,NOB,12)
      CALL TRANMD(VEBA,NUB,NUB,NUB,NOB,23)
        CALL TRANSNQN(NOBUA,NOAUB,O2AB,TI)
      CALL TRAN14(NOA,NUB,NUA,NOB,TI,O2AB)
      CALL INSITU(NOB,NUB,NUA,NOA,TI,O2AB,12)
Cc      call insitu(nob,nob,nub,nub,ti,o2bb,13)
Cc      call vecmul(o2bb,nob2ub2,sixteen)
      CALL CCMATMUL(O1BB,VEBA,T2,NOB,NOBUB2,NUB,0,0)
C
        CALL SYMETR2(T2,NOB,NUB,TI)
C
      CALL INSITU(NUB,NOB,NUB,NOB,TI,VHPRBB,12)
      CALL TRANMD(VHPRBB,NOB,NUB,NUB,NOB,23)
      CALL VECADD(T2,VHPRBB,NOB2UB2)
      CALL DENADD2(NOB,NUB,T2,EHB,EPB)
      CALL VECMUL(O2BB,NOB2UB2,EIGHT)
      CALL TRANSQ(O2BB,NOBUB)
      CALL RESNT2B(NOB,NUB,T2,O2BB,RES)
      CALL WRTAB(NOB,NUB,NUB,NOB,T2,(I2BB+5),NFT858)
C CALCULATE ENERGY
      CALL VECMUL(T2,NOB2UB2,FOURTH)
      CALL CCMATMUL(VHPRBB,T2,ENRG,1,1,NOB2UB2,0,0)
C
Cc      write(6,9135)
Cc 9135 FORMAT(1X,'....... AFTER t2bb .......')
Cc      CALL TIMIT(1)
C
C     -------------------------------------------------------------
      CALL ZEROMA(T2,1,NO2U2)
C     -----------------T2ab Equation-------------------------------
         CALL RDTAB(NOA,NOB,NOA,NUB,VMAA,12,NFT891)
         CALL RDTAB(NOA,NOB,NOA,NOB,VHHAA,9,NFT891)
         CALL RDINT(1,NOAUB,NOAUB,VHPLBB,NFT835)
         CALL RDINT(1,NOAUA,NUA2,VEBA,NFT836)
C
      CALL CCMATMUL(O2AB,FHHAA,T2,NOBUAB,NOA,NOA,1,1)
        CALL TRANSNQN(NOBUB,NOAUA,O2AB,TI)
        CALL TRANSNQN(NOBUB,NOAUA,T2,TI)
      CALL CCMATMUL(O2AB,FHHBB,T2,NOAUAB,NOB,NOB,0,1)
        CALL TRANSNQN(NOAB,NOAUB,VMAA,TI)
      CALL VECMUL(O1AA,NOAUA,TWO)
      CALL VECMUL(O1BB,NOBUB,TWO)
        CALL TRANSNQN(NOA,NUA,O1AA,TI)
      CALL INSITU(NUA,NOA,NUB,NOB,TI,T2,23)
      CALL CCMATMUL(O1AA,VMAA,T2,NUA,NOABUB,NOA,0,1) !ABIJ
      CALL INSITU(NUA,NOA,NUB,NOB,TI,O2AB,23)
      CALL TRANSQ(VHHAA,NOAB)
      CALL CCMATMUL(O2AB,VHHAA,T2,NUAB,NOAB,NOAB,0,0)
      CALL CCMATMUL(FPPAA,O2AB,T2,NUA,NOABUB,NUA,0,0)
        CALL TRANSNQN(NUAB,NOAB,T2,TI)
         CALL RDTAB(NOA,NOB,NUA,NOB,VMAA,13,NFT891)
      CALL CCMATMUL(VMAA,O1BB,T2,NOABUA,NUB,NOB,0,1) !IJAB
      CALL TRANSQ(FPPBB,NUB)
        CALL TRANSNQN(NUAB,NOAB,O2AB,TI)
      CALL CCMATMUL(O2AB,FPPBB,T2,NOABUA,NUB,NUB,0,0)
C vhpr vhpl
        CALL TRANSNQN(NOAB,NUAB,T2,TI)  !ABIJ
      CALL INSITU(NUA,NUB,NOA,NOB,TI,T2,23) !AIBJ
C
      CALL RDTAB(NUB,NOB,NUA,NOA,VHPLAA,5,NFT892)
        CALL TRANSNQN(NOBUB,NOAUA,VHPLAA,TI)
        CALL TRANSNQN(NOAB,NUAB,O2AB,TI)
      CALL INSITU(NUA,NUB,NOA,NOB,TI,O2AB,23)
      CALL INSITU(NUB,NUA,NOB,NOA,TI,VHPRAB,23)
Cc        call transnqn(nobub,noaua,vhprab,ti)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,O2BB,12)
C
      CALL CCMATMUL(O2AA,VHPLAA,T2,NOAUA,NOBUB,NOAUA,0,0)
C
Cc        call transnqn(noaua,nobub,vhprab,ti)
      CALL CCMATMUL(O2AB,VHPRAB,VHPRAA,NOAUA,NOAUA,NOBUB,1,0)
      CALL CCMATMUL(VHPRAA,O2AB,T2,NOAUA,NOBUB,NOAUA,0,0)
C
C vhplba
      CALL INSITU(NUB,NOB,NUA,NOA,TI,VHPRAB,13)
      CALL INSITU(NUA,NOA,NUB,NOB,TI,O2AB,13)
      CALL CCMATMUL(O2AB,VHPRAB,VHPLBB,NOAUB,NOAUB,NOBUA,0,1)
Cc
      CALL INSITU(NUB,NUB,NUA,NOA,TI,VEAB,13)
      CALL INSITU(NUB,NOA,NUB,NOA,TI,VHPLBB,12) !IBAJ
        CALL TRANSNQN(NUA,NOA,O1AA,TI)
      CALL CCMATMUL(O1AA,VEAB,VHPLBB,NOA,NOAUB2,NUA,0,0)
        CALL TRANSNQN(NOA,NUA,O1AA,TI)
      CALL INSITU(NOA,NUB,NUB,NOA,TI,VHPLBB,12) !BIAJ
Cc
      CALL INSITU(NUA,NOA,NUB,NOB,TI,T2,13) !BIAJ
      CALL CCMATMUL(VHPLBB,O2AB,T2,NOAUB,NOBUA,NOAUB,0,1)
C vhpr
      CALL INSITU(NUA,NOB,NUB,NOA,TI,VHPRAB,13)
      CALL INSITU(NUB,NOA,NUA,NOB,TI,O2AB,13)
        CALL TRANSNQN(NOAUA,NOBUB,O2AB,TI)
      CALL RDTAB(NOA,NUA,NUB,NOB,VHPLAA,6,NFT892)
      CALL INSITU(NOA,NUA,NUB,NOB,TI,VHPLAA,12)
        CALL TRANSNQN(NOAUA,NOBUB,VHPLAA,TI)
        CALL TRANSNQN(NOAUB,NOBUA,T2,TI) !AJBI
      CALL INSITU(NUA,NOB,NUB,NOA,TI,T2,13) !BJAI
      CALL CCMATMUL(O2BB,VHPLAA,T2,NOBUB,NOAUA,NOBUB,0,0) !BJAI
         CALL RDINT(1,NOAUA,NOAUA,VHPLAA,NFT831)
      CALL TRANSQ(VHPLAA,NOAUA)
Cc
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,13)
        CALL TRANSNQN(NUA2,NOAUA,VEBA,TI)
      CALL CCMATMUL(VEBA,O1AA,VHPLAA,NOAUA2,NOA,NUA,0,0)
Cc
      CALL INSITU(NUB,NOB,NUA,NOA,TI,T2,12) !JBAI
Cc
         CALL RDINT(1,NOBUB,NOBUB,VHPLBB,NFT832)
      CALL INSITU(NUB,NOB,NUB,NOB,TI,VHPLBB,12)
Ccc
      CALL RDINT(1,NOBUB,NUB2,VEAB,NFT837)
      CALL TRANMD(VEAB,NUB,NUB,NUB,NOB,13)
      CALL TRANMD(VEAB,NUB,NUB,NUB,NOB,12)
      CALL CCMATMUL(O1BB,VEAB,VHPLBB,NOB,NOBUB2,NUB,0,0)
Ccc
      CALL CCMATMUL(VHPLBB,O2AB,T2,NOBUB,NOAUA,NOBUB,0,1) !JBAI
Cc
      CALL INSITU(NUB,NOB,NUA,NOA,TI,O2AB,12)
      CALL CCMATMUL(O2AB,VHPLAA,T2,NOBUB,NOAUA,NOAUA,0,1) !JBAI
         CALL RDINT(1,NOBUA,NOBUA,VHPLAA,NFT834)
      CALL INSITU(NUA,NOB,NUA,NOB,TI,VHPLAA,12)
      CALL RDINT(1,NOBUA,NUAB,VEAB,NFT839)
Cc
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13)
        CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB,12)
      CALL CCMATMUL(O1BB,VEAB,VHPLAA,NOB,NOBUA2,NUB,0,0)
Cc        call insitu(nub,nua,nua,nob,ti,veab,12)
Cc      call tranmd(veab,nua,nub,nua,nob,13)
Cc
      CALL INSITU(NOB,NUB,NUA,NOA,TI,O2AB,23)
      CALL INSITU(NOB,NUA,NUB,NOA,TI,O2AB,12)
      CALL INSITU(NOB,NUB,NUA,NOA,TI,T2,23)
      CALL CCMATMUL(VHPLAA,O2AB,T2,NOBUA,NOAUB,NOBUA,0,1) !JABI
      CALL INSITU(NUA,NOB,NUB,NOA,TI,O2AB,13)
Cc      call insitu(nob,nua,nub,noa,ti,t2,23)
C vppab
Cc      call insitu(nob,nub,nua,noa,ti,t2,13)
        CALL INSITU(NUB,NOB,NUA,NOA,TI,O2AB,12)
        CALL TRANSNQN(NOBUB,NOAUA,O2AB,TI)
Cc      call tran34n(nua,nub,nob,noa,ti,t2)
Cc dodaj
      CALL TRAN1TO4(NOB,NUA,NUB,NOA,TI,T2)
        CALL INSITU(NUA,NOA,NOB,NUB,TI,O2AB,12)
        CALL TRANSNQN(NUA,NOA,O1AA,TI)
      CALL CCMATMUL4PAB(VPP,O1AA,O1BB,O2AB,VEBA,
     *                     T2,NOA,NOB,NUA,NUB)
Cccc call ccmatmul4pab_old(vpp,o1bb,o2ab,veab,t2,noa,nob,nua,nub)
        CALL TRANSNQN(NOA,NUA,O1AA,TI)
        CALL INSITU(NOA,NUA,NOB,NUB,TI,O2AB,12)
      CALL TRAN34N(NUA,NUB,NOA,NOB,TI,T2)
C vhppp
C
Cc      call tran34n(nua,nub,nua,nob,ti,veab)
        CALL TRANSNQN(NUAB,NOBUA,VEAB,TI)
      CALL INSITU(NUA,NOB,NUB,NUA,TI,VEAB,23)
      CALL CCMATMUL(VEAB,O1AA,T2,NOBUAB,NOA,NUA,0,0) !ABJI
      CALL INSITU(NUA,NUB,NOB,NOA,TI,T2,13) !JBAI
      CALL RDINT(1,NOAUB,NUAB,VEBA,NFT838) !INTEGRAL
      CALL INSITU(NUA,NUB,NOA,NUB,TI,VEBA,23)
        CALL TRANSNQN(NOAUA,NUB2,VEBA,TI)
      CALL TRANMD(VEBA,NUB,NUB,NUA,NOA,12)
      CALL CCMATMUL(O1BB,VEBA,T2,NOB,NOAUAB,NUB,0,0)!JBAI
      CALL INSITU(NUA,NOA,NOB,NUB,TI,O2AB,23)
      CALL TRAN34N(NUA,NOB,NOA,NUB,TI,O2AB)
C
Cc      call rdint(1,nobub,noaua,vhprab,nft833) !aibj
       CALL TRANSNQN(NOBUB,NOAUA,VHPRAB,TI) !AIBJ
      CALL INSITU(NOB,NUB,NUA,NOA,TI,T2,12) !BJAI
       CALL TRANSNQN(NOBUB,NOAUA,T2,TI) !AIBJ
        CALL VECADD(T2,VHPRAB,NO2U2AB)
      CALL INSITU(NUA,NOA,NUB,NOB,TI,T2,12) !IABJ
      CALL DENADAB(NOA,NUA,NUB,NOB,T2,EHA,EHB,EPA,EPB)
      CALL RESNTAB(NOA,NUA,NUB,NOB,T2,O2AB,RES)
      CALL WRTAB(NOA,NUA,NUB,NOB,T2,(I2AB+5),NFT858)
C CALCULATE ENERGY
      CALL INSITU(NUA,NOA,NUB,NOB,TI,VHPRAB,12)
      CALL CCMATMUL(VHPRAB,T2,ENRG,1,1,NO2U2AB,0,0)
C     -----------------------------------------------------------------
      RES=SQRT(RES)
      WRITE(6,99) ITERTOT,ENRG,RES
      CALL FLSHBF(6)
C
      IF(ITERTOT.EQ.MAXIT) GO TO 4100
C
      IF(RES.LT.TOL) THEN
         WRITE(6,97) ENRG
         WRITE(6,100)
C
         CALL ZEROMA(O1AA,1,NOU)
         CALL RDTAB2(NOA,NUA,O1AA,(I1AA+5),NFT858)
         CALL PRT1A(NOA,NUA,O1AA)
         CALL WRTAB2(NOA,NUA,O1AA,1,NFT825)
C
         CALL ZEROMA(O1BB,1,NOU)
         CALL RDTAB2(NOB,NUB,O1BB,(I1BB+5),NFT858)
         CALL PRT1B(NOB,NUB,O1BB)
         CALL WRTAB2(NOB,NUB,O1BB,2,NFT825)
C
         CALL ZEROMA(O2AA,1,NO2U2)
         CALL RDTAB(NOA,NUA,NUA,NOA,O2AA,(I2AA+5),NFT858)
         CALL PRT2AA(NOA,NUA,O2AA)
         CALL WRTAB(NOA,NUA,NUA,NOA,O2AA,3,NFT825)
C
         CALL ZEROMA(O2BB,1,NO2U2)
         CALL RDTAB(NOB,NUB,NUB,NOB,O2BB,(I2BB+5),NFT858)
         CALL PRT2BB(NOB,NUB,O2BB)
         CALL WRTAB(NOB,NUB,NUB,NOB,O2BB,4,NFT825)
C
         CALL ZEROMA(O2AB,1,NO2U2)
         CALL RDTAB(NOA,NUA,NUB,NOB,O2AB,(I2AB+5),NFT858)
         CALL PRT2AB(NOA,NUA,NUB,NOB,O2AB)
         CALL WRTAB(NOA,NUA,NUB,NOB,O2AB,5,NFT825)
C
C 12 MAR 10 -WL,PP- -CIM- OPEN-CCSD
C
         CALL VCLR(EKA,1,NOA2)
         CALL VCLR(EKB,1,NOB2)
C
         CALL RDINT(1,NOAUA,NOAUA,VHPRAA,NFT829)
         CALL RDINT(1,NOBUB,NOBUB,VHPRBB,NFT830)
         CALL RDINT(1,NOBUB,NOAUA,VHPRAB,NFT833)
         CALL RCCFL(NFT843,5,NOAUA,FHP)
         CALL ECIMT1(NOA,NUA,O1AA,FHP,VHPRAA,ECIMA,EKA)
         CALL RCCFL(NFT843,6,NOBUB,FHP)
         CALL ECIMT1(NOB,NUB,O1BB,FHP,VHPRBB,ECIMB,EKB)
         CALL ECIMT2(NOA,NUA,VHPRAA,O2AA,ECIMA,EKA)
         CALL ECIMT2(NOB,NUB,VHPRBB,O2BB,ECIMB,EKB)
         CALL ECIMTAB(NOA,NOB,NUA,NUB,VHPRAB,O2AB,O1AA,O1BB,
     *                  ECIMA,ECIMB,EKA,EKB)
C
         WRITE(IW,9000)
C
         IF (MOTYP.EQ.2) THEN
            ECIMTA= DSUM(NOA,ECIMA,1)
            ECIMTB= DSUM(NOB,ECIMB,1)
            WRITE(IW,9021) ECIMTA
            WRITE(IW,9100) (ECIMA(I),I=1,NOA)
            WRITE(IW,9022) ECIMTB
            WRITE(IW,9100) (ECIMB(I),I=1,NOB)
            WRITE(IW,9023) ECIMTA+ECIMTB
            WRITE(IW,9100) (ECIMA(I)+ECIMB(I),I=1,NOB),
     *                    (ECIMA(I),I=NOB+1,NOA)
C
            CALL DAREAD(IDAF,IODA,TXA,NOA2,359,0)  ! TXA is VECTOR FROM Alpha CMO TO LMO
            CALL DAREAD(IDAF,IODA,TXB,NOB2,360,0)  ! TXB is VECTOR FROM Beta CMO TO LMO
C       
            CALL EECIM(NOA,TXA,EKA,ECIMA)
            CALL EECIM(NOB,TXB,EKB,ECIMB)
         END IF
C       
         ECIMTA= DSUM(NOA,ECIMA,1)
         ECIMTB= DSUM(NOB,ECIMB,1)
         WRITE(IW,9031) ECIMTA
         WRITE(IW,9100) (ECIMA(I),I=1,NOA)
         WRITE(IW,9032) ECIMTB
         WRITE(IW,9100) (ECIMB(I),I=1,NOB)
         CALL VADD(ECIMA,1,ECIMB,1,ECIMA,1,NOB)        !-WL- 05/22/2009 Add /beta energies to /alpha ones
         WRITE(IW,9033) ECIMTA+ECIMTB
         WRITE(IW,'(5f16.10)') (ECIMA(I),I=1,NOA)
         call rwrit(ICIF, '$CORR-CCSD',  NOA, ECIMA)  !-WL- 05/22/2009
C
         WRITE(6,96) EREF,ENRG+EREF,ENRG
         RETURN
      END IF
C
 1001 CONTINUE
 9000 FORMAT(/10X,20('-'),
     *       /10X,'CIM ENERGIES FOR MOS',
     *       /10X,20('-'))
 9021 FORMAT(/1X,'ECORR(QCMO-CCSD_ALPHA)=      ',30X,F20.10)
 9022 FORMAT(/1X,'ECORR(QCMO-CCSD_BETA)=       ',30X,F20.10)
 9023 FORMAT(/1X,'ECORR(QCMO-CCSD)=            ',30X,F20.10)
 9031 FORMAT(/1X,'ECORR(LMO-CCSD_ALPHA)=       ',30X,F20.10)
 9032 FORMAT(/1X,'ECORR(LMO-CCSD)_BETA=        ',30X,F20.10)
 9033 FORMAT(/1X,'ECORR(LMO-CCSD)=             ',30X,F20.10)
 9100 FORMAT(5F16.10)
C
C     -------DIIS-------
C
      CALL OPENDIIS(NOA,NOB,NUA,NUB,O1AA,O2AA,O1BB,O2BB,T1,
     *              T2,O2AB,XMAT,BVEC,IPVT,KMICRO)
      WRITE(6,98) KMICRO
C
C          save restart information
C
      CALL WRTAB2(NOA,NUA,O1BB,1,NFT825)
      CALL WRTAB2(NOB,NUB,O1AA,2,NFT825)
      CALL WRTAB(NOA,NUA,NUA,NOA,O2BB,3,NFT825)
      CALL WRTAB(NOB,NUB,NUB,NOB,O2AA,4,NFT825)
      CALL WRTAB(NOA,NUA,NUB,NOB,O2AB,5,NFT825)
C
 1000 CONTINUE
C
 4100 CONTINUE
      WRITE(6,95)
      CALL ABRT
      STOP
C
   95 FORMAT(/5X,'THE CCSD ITERATIONS DID NOT CONVERGE')
   96 FORMAT(/25X,'SUMMARY OF CCSD RESULTS',//
     *        5X,'REFERENCE ENERGY:',F20.10,/
     *        10X,'CCSD ENERGY:',F20.10,3X,'CORR. E=',F15.10, //)
   97 FORMAT(/5X,'THE CCSD ITERATIONS HAVE CONVERGED', /
     *        5X,'CCSD CORRELATION ENERGY:',F15.10, /)
   98 FORMAT(6X,'DOING DIIS EXTRAPOLATION (DIM.OF THE SPACE=',I3,')')
   99 FORMAT(1X,'ITERATION:',I4,'  CCSD CORR E=',F15.10,'  CONV:',F15.9)
  100 FORMAT(1X,'THE LARGEST T1 AND T2 AMPLITUDES ARE')
      END
C
C*MODULE ROHFCC  *DECK MOM23_CIM -CIM-
      SUBROUTINE MOM23_CIM(NOA,NUA,NOB,NUB,T1AA,T1BB,
     *                 T2AA,T2BB,T2AB,VEAA,VEAB,VEBA,VHHHH,
     *                 FHPAA,FHPBB,XM3,VHPRAA,VHPRBB,VHPRAB,TI,
     *                 VMAB,VMBA,VMAA,FHHA,FHHB,FPPA,FPPB,
     *                 X1AA,X1BB,X1AB,X2AA,X2BB,X2AB,
     *                 X3AA,X3BB,X3AB,X3BA,X4AAA,X4AAB,X4BBA,X4BBB,
     *                 X5AAA,X5AAB,X5BBA,X5BBB,
     *                 ECIMA,ECIMB,TXA,TXB,XXM3,XXL3,TXs,
     *                 NC,NCU3s,EHA,EPA,EHB,EPB) !-CIM-
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER CR
C
      LOGICAL CNVR
C
      COMMON /CCENGY/ ENRG,EREF,EMP2,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
      COMMON /EOMTRP/ DI1(10),DI2(10),DI3(10),DI4(10),DI5(10),DI6(10),
     *                ENESD(10),XNUM(10),XDENOM(10),R0(10),
     *                XM1(10),XM2(10),XM3A(10),XD1(10),XD2(10),XD3(10),
     *                YD1(10),YD2(10),YD3(10),YD4(10),XNC3(10),DC3(10),
     *                XGRCORR,XGRCORR1,XGRCORR2,XGRCORR3,XGRCORR4,
     *                XGRCORR5,XGRCORR6,XGRCORR7,CI3GCORR
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /NNROHF/ NOAUA,NOAUB,NOBUA,NOBUB,NOA2,NOA2UA,NOA4,NOB2,
     *                NOB2UB,NOB4,NUA2,NOAUA2,NUA4,NUB2,NOBUB2,NUB4,
     *                NUAB,NOAB,NO2AB,NU2AB,NOABUB,NOABUA,NOAUAB,
     *                NOBUAB,NOA2UA2,NOB2UB2,NOA2UB2,NOB2UA2,NO2U2AB,
     *                NUA3,NUB3,NOA3,NOB3,NOA3UA,NOB3UB,NOA2UB,NOAUB2,
     *                NOB2UA,NOBUA2,NUA2UB,NOA2OB,NOAOB2,NUA3NOA,
     *                NUAUB2,NOAOB2UA,NUB3NOB
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)  !-CIM-
      EXTERNAL DSUM  !-CIM-
      PARAMETER ( MXAO=8192)  !-CIM-
      COMMON /CIMIDX/ MOCEN(MXAO),ICENA(MXAO),ICENB(MXAO)  !-CIM- 2010.03.01  MO Cent
C
      DIMENSION TI(1),XM3(1),FPPA(1),FPPB(1),FHHA(1),FHHB(1),
     *          FHPAA(1),FHPBB(1),T2AA(1),T2AB(1),T2BB(1),
     *          VEAA(1),VEAB(1),VHPRAB(1),VHHHH(1),
     *          VMBA(1),VMAB(1),VMAA(1),VEBA(1),
     *          X1AA(1),X1BB(1),X1AB(1),X2AA(1),X2BB(1),X2AB(1),
     *          X3AA(1),X3BB(1),X3AB(1),X3BA(1),
     *          X4AAA(1),X4AAB(1),X4BBA(1),X4BBB(1),
     *          X5AAA(1),X5AAB(1),X5BBA(1),X5BBB(1),
     *          EHA(NOA),EPA(NUA),EHB(NOB),EPB(NUB)
      DIMENSION ECIMA(NOA),ECIMB(NOB),TXA(NOA,NOA),TXB(NOB,NOB),      !-CIM-
     *          XXM3(1),XXL3(1),TXs(NC)
C
      CALL DENMAKE(NOA,NUA,NOB,NUB,VHHHH,XM3,VHPRAB,T2AB,X1AA,
     *             X1BB,X1AB,X2AA,X2BB,X2AB,X3AA,X3BB,X3AB,X3BA,
     *             X4AAA,X4AAB,X4BBA,X4BBB,X5AAA,X5AAB,X5BBA,X5BBB)
C
      CORA=0.00D+00
      CORB=0.00D+00
      CORC=0.00D+00
      CORD=0.00D+00
C
C --- FOR TIME TRACKING BY -WL,PP-
C
      CALL TSECND(T0)
      WRITE(IW,'(A)')
C
      CALL VCLR(ECIMA,1,NOA)
      CALL VCLR(ECIMB,1,NOB)
      CALL DAREAD(IDAF,IODA,TXA,NOA2,359,0)  ! TXA is VECTOR FROM Alpha CMO TO LMO
      CALL DAREAD(IDAF,IODA,TXB,NOB2,360,0)  ! TXB is VECTOR FROM Beta CMO TO LMO
      call iwrit(IW, '$ICEN-A', NCA, ICENA(1))
      call iwrit(IW, '$ICEN-B', NCB, ICENB(1))
C
Cc L(2,3)_aaa  cccccccccccccccccccc
         CALL RDTAB(NOA,NUA,NUA,NOA,T2AA,8,NFT825) !L2AA
       CALL RDTAB(NOA,NUA,NUA,NUA,VEAA,11,NFT892)
      CALL TRAN14(NOA,NUA,NUA,NUA,VEAB,VEAA)
      CALL RDTAB2(NOA,NUA,FHPAA,5,NFT891)
        CALL TRANSNQN(NOA,NUA,FHPAA,TI)
C
         CALL RDTAB(NOA,NOA,NOA,NUA,VMAA,14,NFT891)
        CALL TRANSNQN(NOA2,NOAUA,VMAA,VMAB)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,T2AA,13)
C
      CALL RDTAB2(NOA,NUA,T1AA,6,NFT825)  !L1
        CALL TRANSNQN(NOA,NUA,T1AA,TI)
      CALL RDINT(1,NOAUA,NOAUA,VHPRAA,NFT829)
      CALL INSITU(NUA,NOA,NUA,NOA,TI,VHPRAA,23)
C
C      write(6,*) 'start of l3_a'
C      call flshbf(6)
C
      CALL LAMB23_LOOPW_CIM(NOA,NUA,FHPAA,T1AA,
     *     VHPRAA,T2AA,VEAA,XM3,TI,VMAA)
C
C        write(6,*) 'end of l3_a'
C
Cc M(2,3)_aaa  cccccccccccccccccccc
C
         CALL RDTAB(NOA,NUA,NUA,NOA,T2AB,3,NFT825)
       CALL RDTAB(NUA,NUA,NUA,NOA,VEAB,7,NFT892)
      CALL TRANMD(VEAB,NUA,NUA,NUA,NOA,13)
      CALL TRANMD(VEAB,NUA,NUA,NUA,NOA,23)
C      call rdtab2(noa,nua,fhpaa,5,nft891)
C        call transnqn(noa,nua,fhpaa,ti)
      CALL CCMATMUL(FHPAA,T2AB,VEAB,NUA,NOAUA2,NOA,0,0)
C
         CALL RDTAB(NOA,NOA,NOA,NUA,VMAB,10,NFT891)
        CALL TRANSNQN(NOA2,NOAUA,VMAB,VMBA)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,T2AB,13)
C
      CALL WRTAB(NUA,NUA,NUA,NOA,VEAB,15,NFT892)
C
      CALL RDTAB2(NOA,NOA,FHHA,3,NFT891)
      CALL RDTAB2(NOB,NUB,FHHB,4,NFT891)
      CALL RDTAB2(NUA,NUA,FPPA,1,NFT891)
      CALL RDTAB2(NUB,NUB,FPPB,2,NFT891)
C
C      write(6,*) 'start of loop_a'
C      call flshbf(6)
C
      CALL MOM23_LOOP_CIM(NOA,NUA,T2AB,VEAB,XM3,TI,VMAB,
     *     FHHA,FPPA,X1AA,X2AA,X3AA,X4AAA,X5AAA,EHA,EPA,
     *     CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,ICENA(1),
     *     TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'AAA   ',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'end of loop_a'
C      call flshbf(6)
C
Cc L(2,3)_aab   ccccccccccccccccccccccc
      CALL INSITU(NOA,NUA,NOA,NOA,TI,VMAA,12)
         CALL RDTAB(NOA,NOB,NOA,NUB,VMAB,16,NFT891)
        CALL TRANSNQN(NOAB,NOAUB,VMAB,VMBA)
         CALL RDTAB(NOA,NOB,NUA,NOB,VMBA,17,NFT891)
        CALL TRANSNQN(NOAB,NOBUA,VMBA,T2AB)
         CALL RDTAB(NOA,NUA,NUB,NOB,T2AB,10,NFT825)  !L2AB
      CALL VECCOP(NO2U2AB,T2BB,T2AB)
C      call zeroma(vhprab,1,no2u2ab)
      CALL TRAN14(NOA,NUA,NUB,NOB,VHPRAB,T2BB)
      CALL VECCOP(NO2U2AB,VHPRAB,T2AB)
C
       CALL RDTAB(NOA,NUB,NUA,NUB,VEBA,14,NFT892)
      CALL TRAN1TO4(NOA,NUB,NUA,NUB,VEAB,VEBA)
      CALL TRANMD(VEBA,NUB,NUA,NUB,NOA,13)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,13,NFT892)
Cc      call tranmd(veab,nua,nub,nua,nob,13)
      CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB,23)
C
      CALL RDTAB2(NOB,NUB,FHPBB,6,NFT891)
        CALL TRANSNQN(NOB,NUB,FHPBB,TI)
C
      CALL INSITU(NOA,NUA,NUB,NOB,TI,VHPRAB,13)
      CALL INSITU(NUB,NUA,NOA,NOB,TI,VHPRAB,12)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,23)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,13)
C
      CALL RDTAB2(NOB,NUB,T1BB,7,NFT825)  !L1
        CALL TRANSNQN(NOB,NUB,T1BB,TI)
      CALL RDINT(1,NOBUB,NOAUA,VHPRBB,NFT833)
      CALL INSITU(NUA,NOA,NUB,NOB,TI,VHPRBB,23)
C
C      write(6,*) 'start of l3_aab'
C      call flshbf(6)
C
      CALL LAMB23_LOOP_AABW_CIM(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2AA,T2BB,T2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB)
C
C      write(6,*) 'end of l3_aab'
C      call flshbf(6)
C
Cc M(2,3)_aab   cccccccccccccccccccccccc
C
         CALL RDTAB(NOA,NOA,NOA,NUA,VMAA,10,NFT891)
        CALL TRANSNQN(NOA2,NOAUA,VMAA,VMAB)
      CALL INSITU(NOA,NUA,NOA,NOA,TI,VMAA,12)
         CALL RDTAB(NOA,NOB,NOA,NUB,VMAB,12,NFT891)
        CALL TRANSNQN(NOAB,NOAUB,VMAB,VMBA)
         CALL RDTAB(NOA,NOB,NUA,NOB,VMBA,13,NFT891)
        CALL TRANSNQN(NOAB,NOBUA,VMBA,T2AA)
      CALL RDTAB(NOA,NUA,NUA,NOA,T2AA,3,NFT825)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,T2AA,13)
         CALL RDTAB(NOA,NUA,NUB,NOB,T2AB,5,NFT825)
      CALL VECCOP(NO2U2AB,T2BB,T2AB)
      CALL TRAN14(NOA,NUA,NUB,NOB,VHPRAB,T2BB)
C      call zeroma(vhprab,1,no2u2ab)
      CALL VECCOP(NO2U2AB,VHPRAB,T2AB)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,9,NFT892)
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13)
      CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB,23)
      CALL CCMATMUL(FHPAA,T2AB,VEAB,NUA,NOBUAB,NOA,0,0)
      CALL WRTAB(NUA,NUA,NUB,NOB,VEAB,17,NFT892)
C
       CALL RDTAB(NUA,NUB,NOA,NUB,VEBA,10,NFT892)
        CALL TRANSNQN(NUAB,NOAUB,VEBA,VEAA)
      CALL TRAN1TO4(NOA,NUB,NUA,NUB,VEAA,VEBA)
C      call rdtab2(nob,nub,fhp,6,nft891)
C        call transnqn(nob,nub,fhp,ti)
      CALL CCMATMUL(FHPBB,T2BB,VEBA,NUB,NOAUAB,NOB,0,0)
      CALL WRTAB(NUB,NUA,NUB,NOA,VEBA,18,NFT892)
C
      CALL INSITU(NOA,NUA,NUB,NOB,TI,VHPRAB,13)
      CALL INSITU(NUB,NUA,NOA,NOB,TI,VHPRAB,12)
      CALL RDTAB(NUA,NUA,NUA,NOA,VEAA,15,NFT892)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,23)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,13)
C
      CALL TSECND(T1)
      WRITE(IW,106) 'AAB000',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'start of loop_aab'
C      call flshbf(6)
C
      CALL MOM23_LOOP_AAB_CIMA(NOA,NUA,NOB,NUB,T2AA,T2BB,
     *     T2AB,VHPRAB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *     ICENA(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'AAB2/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1

      CALL MOM23_LOOP_AAB_CIMB(NOA,NUA,NOB,NUB,T2AA,T2BB,
     *     T2AB,VHPRAB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *     ICENB(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'AAB1/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'end of loop_aab'
C      call flshbf(6)
C
C
Cc L(2,3)_bbb   cccccccccccccccccccccccc
C
      CALL RDTAB(NOB,NUB,NUB,NOB,T2AA,9,NFT825)
      CALL RDINT(1,NOBUB,NOBUB,VHPRAA,NFT830)
      CALL INSITU(NUB,NOB,NUB,NOB,TI,VHPRAA,23)
      CALL RDTAB(NOB,NUB,NUB,NUB,VEAA,12,NFT892)
      CALL TRAN14(NOB,NUB,NUB,NUB,VEAB,VEAA)
      CALL RDTAB(NOB,NOB,NOB,NUB,VMAA,15,NFT891)
       CALL TRANSNQN(NOB2,NOBUB,VMAA,VMAB)
C
      CALL INSITU(NOB,NUB,NUB,NOB,TI,T2AA,13)
C
C      call rdtab2(nob,nub,t1aa,7,nft825)  !l1
C        call transnqn(nob,nub,t1aa,ti)
C
C      write(6,*) 'start of l3_b'
C      call flshbf(6)
C
      CALL LAMB23_LOOPW_CIM(NOB,NUB,FHPBB,T1BB,
     *     VHPRAA,T2AA,VEAA,XM3,TI,VMAA)
C
C      write(6,*) 'end of l3_b'
C      call flshbf(6)
C
Cc M(2,3)_bbb   cccccccccccccccccccccccc
C
      CALL RDTAB(NOB,NUB,NUB,NOB,T2BB,4,NFT825)
      CALL RDTAB(NUB,NUB,NUB,NOB,VEAB,8,NFT892)
      CALL TRANMD(VEAB,NUB,NUB,NUB,NOB,13)
      CALL TRANMD(VEAB,NUB,NUB,NUB,NOB,23)
      CALL CCMATMUL(FHPBB,T2BB,VEAB,NUB,NOBUB2,NOB,0,0)
      CALL WRTAB(NUB,NUB,NUB,NOB,VEAB,16,NFT892)
C
      CALL RDTAB(NOB,NOB,NOB,NUB,VMAB,11,NFT891)
      CALL TRANSNQN(NOB2,NOBUB,VMAB,VMBA)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,T2BB,13)
C
C      write(6,*) 'start of loop_b'
C      call flshbf(6)
C
      CALL MOM23_LOOP_CIM(NOB,NUB,T2BB,VEAB,XM3,TI,VMAB,
     *     FHHB,FPPB,X1BB,X2BB,X3BB,X4BBB,X5BBB,EHB,EPB,
     *     CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,ICENB(1),
     *     TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'BBB   ',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'end of loop_b'
C      call flshbf(6)
C
C
Cc L(2,3)_abb   cccccccccccccccccccccccc
C
      CALL RDTAB(NOA,NUA,NUB,NOB,T2BB,10,NFT825)  !L2AB
      CALL INSITU(NOA,NUA,NUB,NOB,TI,T2BB,13)
      CALL INSITU(NUB,NUA,NOA,NOB,TI,T2BB,12)
      CALL VECCOP(NO2U2AB,VHPRAB,T2BB)
      CALL TRAN34N(NUA,NUB,NOA,NOB,T2AB,T2BB)
C
      CALL INSITU(NUB,NUB,NOB,NOB,TI,T2AA,13)
      CALL VECCOP(NOB2UB2,T2AB,T2AA)
C
      CALL INSITU(NOB,NUB,NUB,NOB,TI,T2AB,13)
C
      CALL RDTAB(NOA,NUB,NUA,NUB,VEBA,14,NFT892)
      CALL TRAN1TO4(NOA,NUB,NUA,NUB,VEAB,VEBA)
      CALL TRANMD(VEBA,NUB,NUA,NUB,NOA,13)
      CALL INSITU(NUB,NUA,NUB,NOA,TI,VEBA,23)
      CALL INSITU(NUB,NUB,NUA,NOA,TI,VEBA,13)
      CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,13,NFT892)
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13)
C
      CALL RDTAB(NOA,NOB,NOA,NUB,VMAB,16,NFT891)
      CALL TRANSNQN(NOAB,NOAUB,VMAB,VMBA)
      CALL RDTAB(NOA,NOB,NUA,NOB,VMBA,17,NFT891)
      CALL TRANSNQN(NOAB,NOBUA,VMBA,VHPRAA)
C
      CALL RDINT(1,NOBUB,NOBUB,VHPRAA,NFT830)
      CALL INSITU(NUB,NOB,NUB,NOB,TI,VHPRAA,23)
C
C      write(6,*) 'start of l3_abb'
C      call flshbf(6)
C
      CALL LAMB23_LOOP_ABBW_CIM(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2AA,T2BB,T2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB)
C
C      write(6,*) 'end of l3_abb'
C      call flshbf(6)
C
Cc M(2,3)_abb   cccccccccccccccccccccccc
C
      CALL RDTAB(NUB,NUB,NUB,NOB,VEAA,16,NFT892)
      CALL RDTAB(NUA,NUA,NUB,NOB,VEAB,17,NFT892)
      CALL RDTAB(NUB,NUA,NUB,NOA,VEBA,18,NFT892)
C
      CALL RDTAB(NOB,NOB,NOB,NUB,VMAA,11,NFT891)
      CALL TRANSNQN(NOB2,NOBUB,VMAA,VMAB)
      CALL RDTAB(NOA,NOB,NOA,NUB,VMAB,12,NFT891)
      CALL TRANSNQN(NOAB,NOAUB,VMAB,VMBA)
      CALL RDTAB(NOA,NOB,NUA,NOB,VMBA,13,NFT891)
      CALL TRANSNQN(NOAB,NOBUA,VMBA,T2BB)
C
      CALL RDTAB(NOA,NUA,NUB,NOB,T2BB,5,NFT825)
      CALL INSITU(NOA,NUA,NUB,NOB,TI,T2BB,13)
      CALL INSITU(NUB,NUA,NOA,NOB,TI,T2BB,12)
      CALL VECCOP(NO2U2AB,VHPRAB,T2BB)
      CALL TRAN34N(NUA,NUB,NOA,NOB,T2AA,T2BB)
         CALL RDTAB(NOB,NUB,NUB,NOB,T2AA,4,NFT825)
      CALL VECCOP(NOB2UB2,T2AB,T2AA)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,T2AB,13)
C
      CALL INSITU(NUA,NUA,NUB,NOB,TI,VEAB,23)
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13)
      CALL INSITU(NUB,NUA,NUB,NOA,TI,VEBA,23)
      CALL INSITU(NUB,NUB,NUA,NOA,TI,VEBA,13)
C
C      write(6,*) 'start of loop_abb'
C      call flshbf(6)
C
      CALL TSECND(T1)
      WRITE(IW,106) 'ABB000',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
      CALL MOM23_LOOP_ABB_CIMA(NOA,NUA,NOB,NUB,T2AA,T2BB,
     *     T2AB,VHPRAB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *     ICENA(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'ABB1/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1

      CALL MOM23_LOOP_ABB_CIMB(NOA,NUA,NOB,NUB,T2AA,T2BB,
     *     T2AB,VHPRAB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *     ICENB(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'ABB2/3',T1-T0
      CALL FLSHBF(IW)
C
C --- PRINT -CIM- ENERGIES -----------------------------------
C
      ONETRD=1.0D+00/3.0D+00
      CALL VECMUL(ECIMA,NOA,ONETRD)  !-CIM- 18 MAR 10 ADD BECAUSE REMOVE /THREE IN _CIM
      CALL VECMUL(ECIMB,NOB,ONETRD)  !-CIM- THE SAME TO ABOVE
      CORDA = DSUM(NOA,ECIMA,1)
      CORDB = DSUM(NOB,ECIMB,1)
      CORD  = CORDA + CORDB
      WRITE(IW,9000)
      WRITE(IW,9141) CORDA
      WRITE(IW,9100) (ECIMA(K),K=1,NOA)
      WRITE(IW,9142) CORDB
      WRITE(IW,9100) (ECIMB(K),K=1,NOB)
C
      CALL VADD(ECIMA,1,ECIMB,1,ECIMA,1,NOB)        !-CIM- 05/22/2009 Add /beta energies to /alpha ones; 2 JUL 10 NOA -> NOB
      WRITE(IW,9143) CORD
      WRITE(IW,9100) (ECIMA(K),K=1,NOA)
      IF (NCA.LT.NOA .OR. NCB.LT.NOB) WRITE(IW,9145)
      call rwrit(ICIF, '$CORR-CR-CC(2,3)',  NOA, ECIMA)  !-CIM- 05/22/2009
C
 9000 FORMAT(/10X,20('-'),
     *       /10X,'CIM ENERGIES FOR MOS',
     *       /10X,20('-'))
 9100 FORMAT(5F16.10)
C9110 FORMAT(/1X,'ECORR(LMO-CCSD(2)_T)=',1X,F20.10)
 9141 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3)_ALPHA)= ',30X,F20.10)
 9142 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3)_BETA)=  ',30X,F20.10)
 9143 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3))=       ',30X,F20.10)
 9145 FORMAT( 1X,'WARNING: CR-CC(2,3) CORRECTION ARE NOT COMPLETED!')
C-------------------------------------------------------------
C
C       n.b. there are no less than three places where this kind of
C            printing would need to be changed.
C
      WRITE(6,94)
      ENGCC=ENRG+EREF
C
      CR='A'
      WRITE(6,95) CR,CORA,ENGCC+CORA
      CR='B'
      WRITE(6,95) CR,CORB,ENGCC+CORB
      CR='C'
      WRITE(6,95) CR,CORC,ENGCC+CORC
      CR='D'
      WRITE(6,95) CR,CORD,ENGCC+CORD
C
      EMP2=0.0D+00
      ECCN=ENRG
      XM1(2)=CORA
      XNUM(2)=CORD
C
      WRITE(6,96)
      WRITE(6,97) ENGCC,ENRG,ENGCC+CORA,ENRG+CORA,ENGCC+CORD,ENRG+CORD
      WRITE(6,98)
C
C       Save total correlation: CCSD plus best triples correlation
C       Although type -D- is considered the best energy, it is not
C       invariant to rotations of degenerate orbitals, whereas the
C       type -A- energy is.  Hence the type -A- value is returned.
C
C       n.b. There are three places like this to change.
C
      IF(NFG.NE.0)  THEN
         ENRG = ENRG + CORD
      ELSE
         ENRG = ENRG + CORA
      ENDIF
      RETURN
C
   94 FORMAT(/1X,'MAIN RESULTS: CR-CC(2,3) = CR-CC(2,3),D =',
     *           ' CR-CCSD(T)_L CALCULATIONS'/)
   95 FORMAT(1X,'GROUND STATE CR-CC(2,3),',A1,1X,'CORRECTION',F10.6,
     *       ', TOTAL E=',F20.10)
   96 FORMAT(/
     * 1X,'CR-CC(2,3),A ENERGY IS IDENTICAL TO THE CCSD(2)_T ENERGY.'/
     * 1X,'CR-CC(2,3),D ENERGY IS IDENTICAL TO COMPLETE CR-CC(2,3)',
     *    ' ENERGY (CR-CCSD(T)_L)')
   97 FORMAT(/15X,'SUMMARY OF CR-CC(2,3) OR CR-CCSD(T)_L CALCULATIONS'/
     *  1X,'CCSD',23X,'E=',F20.10,3X,'CORR. E=',F15.10/
     *  1X,'CR-CC(2,3),A OR CCSD(2)_T  E=',F20.10,3X,'CORR. E=',F15.10/
     *  1X,'CR-CC(2,3) OR CR-CCSD(T)_L E=',F20.10,3X,'CORR. E=',F15.10)
   98 FORMAT(/1X,'THE MOST ACCURATE ENERGETICS IS PROVIDED BY',
     *           ' CR-CC(2,3) = CR-CC(2,3),D')
 106  FORMAT(1X,'DONE WITH ',A6,' CORRECTION  CPU TIME=',F10.1)  !-WL,PP-
      END
C
C*MODULE ROHFCC  *DECK LAMB23_IO_CIM
      SUBROUTINE LAMB23_IO_CIM(NOA,NUA,NOB,NUB,T1AA,T1BB,
     *   XL2AA,XL2BB,XL2AB,VHPLAB,T2AA,T2BB,T2AB,VEAA,VEAB,VEBA,
     *   FHPAA,FHPBB,VHPRAA,VHPRBB,XM3,XL3,VHPRAB,TI,
     *   VMAB,VMBA,VMAA,VMBB,VMAB21,VMBA21,FHHA,FHHB,FPPA,FPPB,
     *   X1AA,X1BB,X1AB,X2AA,X2BB,X2AB,X3AA,X3BB,X3AB,X3BA,
     *   X4AAA,X4AAB,X4BBA,X4BBB,
     *   X5AAA,X5AAB,X5BBA,X5BBB,VHHHH,
     *   ECIMA,ECIMB,TXA,TXB,XXM3,XXL3,TXs,NC,NCU3s,EHA,EPA,EHB,EPB) !-CIM- ADD EKA,EKB,TXA,TXB,XXM3,XXL3
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER CR
C
      LOGICAL CNVR
C
      COMMON /CCENGY/ ENRG,EREF,EMP2,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
      COMMON /EOMTRP/ DI1(10),DI2(10),DI3(10),DI4(10),DI5(10),DI6(10),
     *                ENESD(10),XNUM(10),XDENOM(10),R0(10),
     *                XM1(10),XM2(10),XM3A(10),XD1(10),XD2(10),XD3(10),
     *                YD1(10),YD2(10),YD3(10),YD4(10),XNC3(10),DC3(10),
     *                XGRCORR,XGRCORR1,XGRCORR2,XGRCORR3,XGRCORR4,
     *                XGRCORR5,XGRCORR6,XGRCORR7,CI3GCORR
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /NNROHF/ NOAUA,NOAUB,NOBUA,NOBUB,NOA2,NOA2UA,NOA4,NOB2,
     *                NOB2UB,NOB4,NUA2,NOAUA2,NUA4,NUB2,NOBUB2,NUB4,
     *                NUAB,NOAB,NO2AB,NU2AB,NOABUB,NOABUA,NOAUAB,
     *                NOBUAB,NOA2UA2,NOB2UB2,NOA2UB2,NOB2UA2,NO2U2AB,
     *                NUA3,NUB3,NOA3,NOB3,NOA3UA,NOB3UB,NOA2UB,NOAUB2,
     *                NOB2UA,NOBUA2,NUA2UB,NOA2OB,NOAOB2,NUA3NOA,
     *                NUAUB2,NOAOB2UA,NUB3NOB
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)  !-CIM-
      EXTERNAL DSUM  !-CIM-
      PARAMETER ( MXAO=8192)  !-CIM-
      COMMON /CIMIDX/ MOCEN(MXAO),ICENA(MXAO),ICENB(MXAO)  !-CIM- 2010.03.01  MO Cent
C
      DIMENSION TI(1),XM3(1),T1AA(1),T1BB(1),XL2AA(1),XL2BB(1),XL3(1),
     *          VHPLAB(1),T2AA(1),T2AB(1),T2BB(1),FHPBB(1),VHPRBB(1),
     *          VEAA(1),VEAB(1),VHPRAA(1),VHPRAB(1),XL2AB(1),
     *          VMBA(1),VMAB(1),VMAA(1),VMBB(1),FHPAA(1),VEBA(1),
     *          VMBA21(1),VMAB21(1),VHHHH(1),
     *          X1AA(1),X1BB(1),X1AB(1),X2AA(1),X2BB(1),X2AB(1),
     *          X3AA(1),X3BB(1),X3AB(1),X3BA(1),
     *          X4AAA(1),X4AAB(1),X4BBA(1),X4BBB(1),
     *          X5AAA(1),X5AAB(1),X5BBA(1),X5BBB(1),
     *          FPPA(1),FPPB(1),FHHA(1),FHHB(1),
     *          EHA(NOA),EPA(NUA),EHB(NOB),EPB(NUB)
      DIMENSION ECIMA(NOA),ECIMB(NOB),TXA(NOA,NOA),TXB(NOB,NOB),      !-CIM-
     *          XXM3(1),XXL3(1),TXs(NC)
C
      CALL DENMAKE(NOA,NUA,NOB,NUB,VHHHH,XM3,VHPRAB,T2AB,X1AA,
     *             X1BB,X1AB,X2AA,X2BB,X2AB,X3AA,X3BB,X3AB,X3BA,X4AAA,
     *             X4AAB,X4BBA,X4BBB,X5AAA,X5AAB,X5BBA,X5BBB)
C
      CALL RDTAB2(NOA,NOA,FHHA,3,NFT891)
      CALL RDTAB2(NOB,NUB,FHHB,4,NFT891)
      CALL RDTAB2(NUA,NUA,FPPA,1,NFT891)
      CALL RDTAB2(NUB,NUB,FPPB,2,NFT891)
      CORA=0.00D+00
      CORB=0.00D+00
      CORC=0.00D+00
      CORD=0.00D+00
C
C --- FOR TIME TRACKING BY -WL,PP-
C
      CALL TSECND(T0)
      WRITE(IW,'(A)')
C
      CALL VCLR(ECIMA,1,NOA)
      CALL VCLR(ECIMB,1,NOB)
      CALL DAREAD(IDAF,IODA,TXA,NOA2,359,0)  ! TXA is VECTOR FROM Alpha CMO TO LMO
      CALL DAREAD(IDAF,IODA,TXB,NOB2,360,0)  ! TXB is VECTOR FROM Beta CMO TO LMO
      call iwrit(IW, '$ICEN-A', NCA, ICENA(1))
      call iwrit(IW, '$ICEN-B', NCB, ICENB(1))
C
Cc L3_aaa  cccccccccccccccccccc
C
         CALL RDTAB(NOA,NUA,NUA,NOA,XL2AA,8,NFT825) !L2AA
       CALL RDTAB(NOA,NUA,NUA,NUA,VEAA,11,NFT892)
      CALL TRAN14(NOA,NUA,NUA,NUA,VEBA,VEAA)
Cc       call wrtab(nua,nua,nua,noa,veaa,19,nft892)
      CALL RDTAB2(NOA,NUA,FHPAA,5,NFT891)
        CALL TRANSNQN(NOA,NUA,FHPAA,TI)
C
         CALL RDTAB(NOA,NOA,NOA,NUA,VMAA,14,NFT891)
        CALL TRANSNQN(NOA2,NOAUA,VMAA,VMBB)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,XL2AA,13)
C
      CALL RDTAB2(NOA,NUA,T1AA,6,NFT825)  !L1
        CALL TRANSNQN(NOA,NUA,T1AA,TI)
      CALL RDINT(1,NOAUA,NOAUA,VHPRAA,NFT829)
      CALL INSITU(NUA,NOA,NUA,NOA,TI,VHPRAA,23)
C
Cc ----------- M(2,3) ----------------
C
         CALL RDTAB(NOA,NUA,NUA,NOA,T2AA,3,NFT825)
       CALL RDTAB(NUA,NUA,NUA,NOA,VEBA,7,NFT892)
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,13)
      CALL TRANMD(VEBA,NUA,NUA,NUA,NOA,23)
      CALL CCMATMUL(FHPAA,T2AA,VEBA,NUA,NOAUA2,NOA,0,0)
         CALL WRTAB(NUA,NUA,NUA,NOA,VEBA,15,NFT892)
C
         CALL RDTAB(NOA,NOA,NOA,NUA,VMBB,10,NFT891)
        CALL TRANSNQN(NOA2,NOAUA,VMBB,VMAB)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,T2AA,13)
Cc ---------------
C
C      write(6,*) 'start of l3_a'
C      call flshbf(6)
C
      CALL LAMB23_LOOP_CIM(NOA,NUA,FHPAA,T1AA,
     *     VHPRAA,XL2AA,T2AA,VEAA,VEBA,XM3,XL3,TI,VMAA,VMBB,
     *     FHHA,FPPA,X1AA,X2AA,X3AA,X4AAA,X5AAA,EHA,EPA,
     *     CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,ICENA(1),
     *     TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'AAA   ',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'end of l3_a'
C      call flshbf(6)
C
C
Cc L3_aab   cccccccccccccccccccccccc
C
      CALL INSITU(NOA,NUA,NOA,NOA,TI,VMAA,12)
         CALL RDTAB(NOA,NOB,NOA,NUB,VMAB,16,NFT891)
        CALL TRANSNQN(NOAB,NOAUB,VMAB,VMBA)
         CALL RDTAB(NOA,NOB,NUA,NOB,VMBA,17,NFT891)
        CALL TRANSNQN(NOAB,NOBUA,VMBA,VMAB21)
         CALL RDTAB(NOA,NUA,NUB,NOB,XL2AB,10,NFT825)  !L2AB
      CALL VECCOP(NO2U2AB,XL2BB,XL2AB)
      CALL VECCOP(NO2U2AB,VHPRAB,XL2AB)
      CALL TRAN14(NOA,NUA,NUB,NOB,T2AB,XL2BB)
C
       CALL RDTAB(NOA,NUB,NUA,NUB,VEBA,14,NFT892)
      CALL TRAN1TO4(NOA,NUB,NUA,NUB,VEAB,VEBA)
      CALL TRANMD(VEBA,NUB,NUA,NUB,NOA,13)
       CALL WRTAB(NUB,NUA,NUB,NOA,VEBA,16,NFT892)
      CALL RDTAB2(NOB,NUB,FHPBB,6,NFT891)
        CALL TRANSNQN(NOB,NUB,FHPBB,TI)
C
Ccc       call rdtab(nua,nub,nua,nob,veab,13,nft892)
Ccc      call insitu(nua,nub,nua,nob,ti,veab,23)
C
      CALL INSITU(NOA,NUA,NUB,NOB,TI,VHPRAB,13)
      CALL INSITU(NUB,NUA,NOA,NOB,TI,VHPRAB,12)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,23)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,13)
       CALL WRTAB(NUA,NUA,NUA,NOA,VEAA,19,NFT892)
C
      CALL RDTAB2(NOB,NUB,T1BB,7,NFT825)  !L1
        CALL TRANSNQN(NOB,NUB,T1BB,TI)
      CALL RDINT(1,NOBUB,NOAUA,VHPRBB,NFT833)
      CALL INSITU(NUA,NOA,NUB,NOB,TI,VHPRBB,23)
C
C ---------------M3----------------
C
      CALL INSITU(NOA,NUA,NOA,NOA,TI,VMBB,12)
         CALL RDTAB(NOA,NOB,NOA,NUB,VMAB21,12,NFT891)
        CALL TRANSNQN(NOAB,NOAUB,VMAB21,VMBA21)
         CALL RDTAB(NOA,NOB,NUA,NOB,VMBA21,13,NFT891)
        CALL TRANSNQN(NOAB,NOBUA,VMBA21,T2AB)
         CALL RDTAB(NOA,NUA,NUB,NOB,T2AB,5,NFT825)
      CALL VECCOP(NO2U2AB,T2BB,T2AB)
C
      CALL TRAN14(NOA,NUA,NUB,NOB,VHPLAB,T2BB)
C
       CALL RDTAB(NUA,NUB,NOA,NUB,VEBA,10,NFT892)
        CALL TRANSNQN(NUAB,NOAUB,VEBA,VEAB)
      CALL TRAN1TO4(NOA,NUB,NUA,NUB,VEAB,VEBA)
      CALL CCMATMUL(FHPBB,T2BB,VEBA,NUB,NOAUAB,NOB,0,0)
       CALL WRTAB(NUB,NUA,NUB,NOA,VEBA,18,NFT892)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,9,NFT892)
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13)
      CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB,23)
      CALL CCMATMUL(FHPAA,T2AB,VEAB,NUA,NOBUAB,NOA,0,0)
       CALL WRTAB(NUA,NUA,NUB,NOB,VEAB,17,NFT892)
C
C       call rdtab(nua,nub,noa,nub,veba21,10,nft892)
C        call transnqn(nuab,noaub,veba21,ti)
C      call tran1to4(noa,nub,nua,nub,ti,veba21)
C      call ccmatmul(fhpbb,t2bb,veba21,nub,noauab,nob,0,0)
C
      CALL VECCOP(NO2U2AB,VHPLAB,T2AB)
      CALL INSITU(NOA,NUA,NUB,NOB,TI,VHPLAB,13)
      CALL INSITU(NUB,NUA,NOA,NOB,TI,VHPLAB,12)
         CALL RDTAB(NUA,NUA,NUA,NOA,VEAA,15,NFT892)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,23)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,13)
         CALL WRTAB(NUA,NUA,NUA,NOA,VEAA,15,NFT892)
C
C      write(6,*) 'start of l3_aab'
C      call flshbf(6)
C
C
      CALL LAMB23_LOOP_AAB_IO_CIMA(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *T1AA,T1BB,VHPLAB,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *VMBA21,VMAB21,VEAA,VEBA,VEAB,
     *FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *ICENA(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'AAB2/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1

      CALL LAMB23_LOOP_AAB_IO_CIMB(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *T1AA,T1BB,VHPLAB,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *VMBA21,VMAB21,VEAA,VEBA,VEAB,
     *FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *ICENB(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'AAB1/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'end of l3_aab'
C      call flshbf(6)
C
C
Cc L3_abb   cccccccccccccccccccccccc
C
         CALL RDTAB(NOB,NUB,NUB,NOB,XL2AA,9,NFT825)
      CALL VECCOP(NOB2UB2,XL2AB,XL2AA)
C
Cc       call rdtab(nob,nub,nub,nub,veaa,12,nft892)
Cc      call tran14(nob,nub,nub,nub,vebb,veaa)
Cc       call wrtab(nub,nub,nub,nob,veaa,19,nft892)
C
         CALL RDTAB(NOB,NOB,NOB,NUB,VMAA,15,NFT891)
        CALL TRANSNQN(NOB2,NOBUB,VMAA,VMBB)
      CALL INSITU(NOB,NUA,NUB,NOA,TI,XL2BB,13)
      CALL INSITU(NUB,NUA,NOB,NOA,TI,XL2BB,12)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,XL2AB,13)
C
Ccc       call rdtab(nua,nub,nua,nob,veab,13,nft892)
Ccc      call tranmd(veab,nua,nub,nua,nob,13)
C
Cc       call rdtab(nub,nua,nub,noa,veba,16,nft892)
Cc      call insitu(nub,nua,nub,noa,ti,veba,23)
Cc      call insitu(nub,nub,nua,noa,ti,veba,13)
Cc       call wrtab(nua,nub,nub,noa,veba,16,nft892)
C
      CALL RDINT(1,NOBUB,NOBUB,VHPRAA,NFT830)
      CALL INSITU(NUB,NOB,NUB,NOB,TI,VHPRAA,23)
C
C     ---------------M3--------------
C
         CALL RDTAB(NOB,NUB,NUB,NOB,T2AA,4,NFT825)
      CALL VECCOP(NOB2UB2,T2AB,T2AA)
C
         CALL RDTAB(NOB,NOB,NOB,NUB,VMBB,11,NFT891)
        CALL TRANSNQN(NOB2,NOBUB,VMBB,VEAA)
       CALL RDTAB(NUB,NUB,NUB,NOB,VEAA,8,NFT892)
      CALL TRANMD(VEAA,NUB,NUB,NUB,NOB,13)
      CALL TRANMD(VEAA,NUB,NUB,NUB,NOB,23)
      CALL CCMATMUL(FHPBB,T2AA,VEAA,NUB,NOBUB2,NOB,0,0)
       CALL WRTAB(NUB,NUB,NUB,NOB,VEAA,15,NFT892)
C
C         call rdtab(nob,nob,nob,nub,vmbb,11,nft891)
C        call transnqn(nob2,nobub,vmbb,ti)
      CALL INSITU(NOB,NUA,NUB,NOA,TI,T2BB,13)
      CALL INSITU(NUB,NUA,NOB,NOA,TI,T2BB,12)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,T2AB,13)
C
C
      CALL INSITU(NUA,NUA,NUB,NOB,TI,VEAB,23)
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13)
       CALL WRTAB(NUA,NUB,NUA,NOB,VEAB,17,NFT892)
C
C       call rdtab(nub,nua,nub,noa,veba21,18,nft892)
      CALL INSITU(NUB,NUA,NUB,NOA,TI,VEBA,23)
      CALL INSITU(NUB,NUB,NUA,NOA,TI,VEBA,13)
       CALL WRTAB(NUA,NUB,NUB,NOA,VEBA,18,NFT892)
C
C for L3
C
       CALL RDTAB(NOB,NUB,NUB,NUB,VEAA,12,NFT892)
      CALL TRAN14(NOB,NUB,NUB,NUB,VEBA,VEAA)
       CALL WRTAB(NUB,NUB,NUB,NOB,VEAA,19,NFT892)
C
       CALL RDTAB(NUB,NUA,NUB,NOA,VEBA,16,NFT892)
      CALL INSITU(NUB,NUA,NUB,NOA,TI,VEBA,23)
      CALL INSITU(NUB,NUB,NUA,NOA,TI,VEBA,13)
       CALL WRTAB(NUA,NUB,NUB,NOA,VEBA,16,NFT892)
C
C      write(6,*) 'start of l3_abb'
C      call flshbf(6)
C
      CALL LAMB23_LOOP_ABB_IO_CIMA(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *T1AA,T1BB,VHPLAB,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *VMBA21,VMAB21,VEAA,VEBA,VEAB,
     *FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *ICENA(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'ABB1/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1

      CALL LAMB23_LOOP_ABB_IO_CIMB(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *T1AA,T1BB,VHPLAB,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *VMBA21,VMAB21,VEAA,VEBA,VEAB,
     *FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *ICENB(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'ABB2/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'end of l3_abb'
C      call flshbf(6)
C
Cc L3_bbb  cccccccccccccccccccc
C
       CALL RDTAB(NUB,NUB,NUB,NOB,VEAB,19,NFT892)
Cc       call rdtab(nub,nub,nub,nob,vebb,15,nft892)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,XL2AA,13)
C
C     ---------M3-----------
      CALL INSITU(NOB,NUB,NUB,NOB,TI,T2AA,13)
C
C      write(6,*) 'start of l3_b'
C      call flshbf(6)
C
      CALL LAMB23_LOOP_CIM(NOB,NUB,FHPBB,T1BB,
     *     VHPRAA,XL2AA,T2AA,VEAB,VEAA,XM3,XL3,TI,VMAA,VMBB,
     *     FHHB,FPPB,X1BB,X2BB,X3BB,X4BBB,X5BBB,EHB,EPB,
     *     CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,ICENB(1),
     *     TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'BBB   ',T1-T0
      CALL FLSHBF(IW)
C
C      write(6,*) 'end of l3_b'
C      call flshbf(6)
C
C --- PRINT -CIM- ENERGIES -----------------------------------
C
      ONETRD=1.0D+00/3.0D+00
      CALL VECMUL(ECIMA,NOA,ONETRD)  !-CIM- 18 MAR 10 ADD BECAUSE REMOVE /THREE IN _CIM
      CALL VECMUL(ECIMB,NOB,ONETRD)  !-CIM- THE SAME TO ABOVE
      CORDA = DSUM(NOA,ECIMA,1)
      CORDB = DSUM(NOB,ECIMB,1)
      CORD  = CORDA + CORDB
      WRITE(IW,9000)
      WRITE(IW,9141) CORDA
      WRITE(IW,9100) (ECIMA(K),K=1,NOA)
      WRITE(IW,9142) CORDB
      WRITE(IW,9100) (ECIMB(K),K=1,NOB)
C
      CALL VADD(ECIMA,1,ECIMB,1,ECIMA,1,NOB)        !-CIM- 05/22/2009 Add /beta energies to /alpha ones; 2 JUL 10 NOA -> NOB
      WRITE(IW,9143) CORD
      WRITE(IW,9100) (ECIMA(K),K=1,NOA)
      IF (NCA.LT.NOA .OR. NCB.LT.NOB) WRITE(IW,9145)
      call rwrit(ICIF, '$CORR-CR-CC(2,3)',  NOA, ECIMA)  !-CIM- 05/22/2009
C
 9000 FORMAT(/10X,20('-'),
     *       /10X,'CIM ENERGIES FOR MOS',
     *       /10X,20('-'))
 9100 FORMAT(5F16.10)
C9110 FORMAT(/1X,'ECORR(LMO-CCSD(2)_T)=',1X,F20.10)
 9141 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3)_ALPHA)= ',30X,F20.10)
 9142 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3)_BETA)=  ',30X,F20.10)
 9143 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3))=       ',30X,F20.10)
 9145 FORMAT( 1X,'WARNING: CR-CC(2,3) CORRECTION ARE NOT COMPLETED!')
C-------------------------------------------------------------
C
      WRITE(6,94)
      ENGCC=ENRG+EREF
C
      CR='A'
      WRITE(6,95) CR,CORA,ENGCC+CORA
      CR='B'
      WRITE(6,95) CR,CORB,ENGCC+CORB
      CR='C'
      WRITE(6,95) CR,CORC,ENGCC+CORC
      CR='D'
      WRITE(6,95) CR,CORD,ENGCC+CORD
C
      EMP2=0.0D+00
      ECCN=ENRG
      XM1(2)=CORA
      XNUM(2)=CORD
C
      WRITE(6,96)
      WRITE(6,97) ENGCC,ENRG,ENGCC+CORA,ENRG+CORA,ENGCC+CORD,ENRG+CORD
      WRITE(6,98)
C
C       save total correlation: ccsd plus best triples correlation
C       Although type -D- is considered the best energy, it is not
C       invariant to rotations of degenerate orbitals, whereas the
C       type -A- energy is.  Hence the type -A- value is returned.
C
      IF(NFG.NE.0) THEN
         ENRG = ENRG + CORD
      ELSE
         ENRG = ENRG + CORA
      ENDIF
      RETURN
C
   94 FORMAT(/1X,'MAIN RESULTS: CR-CC(2,3) = CR-CC(2,3),D =',
     *           ' CR-CCSD(T)_L CALCULATIONS'/)
   95 FORMAT(1X,'GROUND STATE CR-CC(2,3),',A1,1X,'CORRECTION',F10.6,
     *       ', TOTAL E=',F20.10)
   96 FORMAT(/
     * 1X,'CR-CC(2,3),A ENERGY IS IDENTICAL TO THE CCSD(2)_T ENERGY.'/
     * 1X,'CR-CC(2,3),D ENERGY IS IDENTICAL TO COMPLETE CR-CC(2,3)',
     *    ' ENERGY (CR-CCSD(T)_L)')
   97 FORMAT(/15X,'SUMMARY OF CR-CC(2,3) OR CR-CCSD(T)_L CALCULATIONS'/
     *  1X,'CCSD',23X,'E=',F20.10,3X,'CORR. E=',F15.10/
     *  1X,'CR-CC(2,3),A OR CCSD(2)_T  E=',F20.10,3X,'CORR. E=',F15.10/
     *  1X,'CR-CC(2,3) OR CR-CCSD(T)_L E=',F20.10,3X,'CORR. E=',F15.10)
   98 FORMAT(/1X,'THE MOST ACCURATE ENERGETICS IS PROVIDED BY',
     *           ' CR-CC(2,3) = CR-CC(2,3),D')
 106  FORMAT(1X,'DONE WITH ',A6,' CORRECTION  CPU TIME=',F10.1)  !-WL,PP-
      END
C
C*MODULE ROHFCC  *DECK LAMB23_CIM -CIM-
      SUBROUTINE LAMB23_CIM(NOA,NUA,NOB,NUB,T1AA,T1BB,
     *XL2AA,XL2BB,XL2AB,VHPLAB,T2AA,T2BB,T2AB,VEAA,VEBB,VEAB,VEBA,
     *VEAB21,VEBA21,FHPAA,FHPBB,VHPRAA,VHPRBB,XM3,XL3,VHPRAB,TI,
     *VMAB,VMBA,VMAA,VMBB,VMAB21,VMBA21,FHHA,FHHB,FPPA,FPPB,X1AA,X1BB,
     *X1AB,X2AA,X2BB,X2AB,X3AA,X3BB,X3AB,X3BA,X4AAA,X4AAB,X4BBA,X4BBB,
     *X5AAA,X5AAB,X5BBA,X5BBB,VHHHH,ECIMA,ECIMB,TXA,TXB,XXM3,XXL3,TXs,
     *NC,NCU3s,EHA,EPA,EHB,EPB) !-CIM- ADD EKA,EKB,TXA,TXB,XXM3,XXL3
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER CR
C
      LOGICAL CNVR
C
      COMMON /CCENGY/ ENRG,EREF,EMP2,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
      COMMON /EOMTRP/ DI1(10),DI2(10),DI3(10),DI4(10),DI5(10),DI6(10),
     *                ENESD(10),XNUM(10),XDENOM(10),R0(10),
     *                XM1(10),XM2(10),XM3A(10),XD1(10),XD2(10),XD3(10),
     *                YD1(10),YD2(10),YD3(10),YD4(10),XNC3(10),DC3(10),
     *                XGRCORR,XGRCORR1,XGRCORR2,XGRCORR3,XGRCORR4,
     *                XGRCORR5,XGRCORR6,XGRCORR7,CI3GCORR
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /NNROHF/ NOAUA,NOAUB,NOBUA,NOBUB,NOA2,NOA2UA,NOA4,NOB2,
     *                NOB2UB,NOB4,NUA2,NOAUA2,NUA4,NUB2,NOBUB2,NUB4,
     *                NUAB,NOAB,NO2AB,NU2AB,NOABUB,NOABUA,NOAUAB,
     *                NOBUAB,NOA2UA2,NOB2UB2,NOA2UB2,NOB2UA2,NO2U2AB,
     *                NUA3,NUB3,NOA3,NOB3,NOA3UA,NOB3UB,NOA2UB,NOAUB2,
     *                NOB2UA,NOBUA2,NUA2UB,NOA2OB,NOAOB2,NUA3NOA,
     *                NUAUB2,NOAOB2UA,NUB3NOB
      COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)  !-CIM-
      EXTERNAL DSUM  !-CIM-
      PARAMETER ( MXAO=8192)  !-CIM-
      COMMON /CIMIDX/ MOCEN(MXAO),ICENA(MXAO),ICENB(MXAO)  !-CIM- 2010.03.01  MO Cent
C
      DIMENSION TI(1),XM3(1),T1AA(1),T1BB(1),XL2AA(1),XL2BB(1),XL3(1),
     *          VHPLAB(1),T2AA(1),T2AB(1),T2BB(1),FHPBB(1),VHPRBB(1),
     *          VEAA(1),VEBB(1),VEAB(1),VHPRAA(1),VHPRAB(1),XL2AB(1),
     *          VMBA(1),VMAB(1),VMAA(1),VMBB(1),FHPAA(1),VEBA(1),
     *          VMBA21(1),VMAB21(1),VEAB21(1),VEBA21(1),VHHHH(1),
     *          X1AA(1),X1BB(1),X1AB(1),
     *          X2AA(1),X2BB(1),X2AB(1),
     *          X3AA(1),X3BB(1),X3AB(1),X3BA(1),
     *          X4AAA(1),X4AAB(1),X4BBA(1),X4BBB(1),
     *          X5AAA(1),X5AAB(1),X5BBA(1),X5BBB(1),
     *          FPPA(1),FPPB(1),FHHA(1),FHHB(1),
     *          EHA(NOA),EPA(NUA),EHB(NOB),EPB(NUB)
      DIMENSION ECIMA(NOA),ECIMB(NOB),TXA(NOA,NOA),TXB(NOB,NOB),      !-CIM-
     *          XXM3(1),XXL3(1),TXs(NC)
C
      CALL DENMAKE(NOA,NUA,NOB,NUB,VHHHH,XM3,VHPRAB,T2AB,X1AA,
     *             X1BB,X1AB,X2AA,X2BB,X2AB,X3AA,X3BB,X3AB,X3BA,
     *             X4AAA,X4AAB,X4BBA,X4BBB,X5AAA,X5AAB,X5BBA,X5BBB)
C
      CALL RDTAB2(NOA,NOA,FHHA,3,NFT891)
      CALL RDTAB2(NOB,NUB,FHHB,4,NFT891)
      CALL RDTAB2(NUA,NUA,FPPA,1,NFT891)
      CALL RDTAB2(NUB,NUB,FPPB,2,NFT891)
      CORA=0.00D+00
      CORB=0.00D+00
      CORC=0.00D+00
      CORD=0.00D+00
C
C --- FOR TIME TRACKING BY -WL,PP-
C
      CALL TSECND(T0)
      WRITE(IW,'(A)')
C
      CALL VCLR(ECIMA,1,NOA)
      CALL VCLR(ECIMB,1,NOB)
      CALL DAREAD(IDAF,IODA,TXA,NOA2,359,0)  ! TXA is VECTOR FROM Alpha CMO TO LMO
      CALL DAREAD(IDAF,IODA,TXB,NOB2,360,0)  ! TXB is VECTOR FROM Beta CMO TO LMO
      call iwrit(IW, '$ICEN-A', NCA, ICENA(1))
      call iwrit(IW, '$ICEN-B', NCB, ICENB(1))
C
Cc L3_aaa  cccccccccccccccccccc
C
         CALL RDTAB(NOA,NUA,NUA,NOA,XL2AA,8,NFT825) !L2AA
       CALL RDTAB(NOA,NUA,NUA,NUA,VEAA,11,NFT892)
      CALL TRAN14(NOA,NUA,NUA,NUA,VEBB,VEAA)
      CALL RDTAB2(NOA,NUA,FHPAA,5,NFT891)
        CALL TRANSNQN(NOA,NUA,FHPAA,TI)
C
         CALL RDTAB(NOA,NOA,NOA,NUA,VMAA,14,NFT891)
        CALL TRANSNQN(NOA2,NOAUA,VMAA,VMBB)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,XL2AA,13)
C
      CALL RDTAB2(NOA,NUA,T1AA,6,NFT825)  !L1
        CALL TRANSNQN(NOA,NUA,T1AA,TI)
      CALL RDINT(1,NOAUA,NOAUA,VHPRAA,NFT829)
      CALL INSITU(NUA,NOA,NUA,NOA,TI,VHPRAA,23)
C
Cc ----------- M(2,3) ----------------
C
         CALL RDTAB(NOA,NUA,NUA,NOA,T2AA,3,NFT825)
       CALL RDTAB(NUA,NUA,NUA,NOA,VEBB,7,NFT892)
      CALL TRANMD(VEBB,NUA,NUA,NUA,NOA,13)
      CALL TRANMD(VEBB,NUA,NUA,NUA,NOA,23)
      CALL CCMATMUL(FHPAA,T2AA,VEBB,NUA,NOAUA2,NOA,0,0)
C
         CALL RDTAB(NOA,NOA,NOA,NUA,VMBB,10,NFT891)
        CALL TRANSNQN(NOA2,NOAUA,VMBB,VMAB)
      CALL INSITU(NOA,NUA,NUA,NOA,TI,T2AA,13)
Cc ---------------
C
C      write(6,*) 'start of l3_a'
C      call flshbf(6)
C
      CALL LAMB23_LOOP_CIM(NOA,NUA,FHPAA,T1AA,
     *     VHPRAA,XL2AA,T2AA,VEAA,VEBB,XM3,XL3,TI,VMAA,VMBB,
     *     FHHA,FPPA,X1AA,X2AA,X3AA,X4AAA,X5AAA,EHA,EPA,
     *     CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,ICENA(1),
     *     TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'AAA   ',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'end of l3_a'
C      call flshbf(6)
C
C
Cc L3_aab   cccccccccccccccccccccccc
C
      CALL INSITU(NOA,NUA,NOA,NOA,TI,VMAA,12)
         CALL RDTAB(NOA,NOB,NOA,NUB,VMAB,16,NFT891)
        CALL TRANSNQN(NOAB,NOAUB,VMAB,VMBA)
         CALL RDTAB(NOA,NOB,NUA,NOB,VMBA,17,NFT891)
        CALL TRANSNQN(NOAB,NOBUA,VMBA,VMAB21)
         CALL RDTAB(NOA,NUA,NUB,NOB,XL2AB,10,NFT825)  !L2AB
      CALL VECCOP(NO2U2AB,XL2BB,XL2AB)
      CALL VECCOP(NO2U2AB,VHPRAB,XL2AB)
      CALL TRAN14(NOA,NUA,NUB,NOB,T2AB,XL2BB)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,13,NFT892)
      CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB,23)
C
       CALL RDTAB(NOA,NUB,NUA,NUB,VEBA,14,NFT892)
      CALL TRAN1TO4(NOA,NUB,NUA,NUB,VEAB21,VEBA)
      CALL TRANMD(VEBA,NUB,NUA,NUB,NOA,13)
      CALL RDTAB2(NOB,NUB,FHPBB,6,NFT891)
        CALL TRANSNQN(NOB,NUB,FHPBB,TI)
C
      CALL INSITU(NOA,NUA,NUB,NOB,TI,VHPRAB,13)
      CALL INSITU(NUB,NUA,NOA,NOB,TI,VHPRAB,12)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,23)
      CALL TRANMD(VEAA,NUA,NUA,NUA,NOA,13)
C
      CALL RDTAB2(NOB,NUB,T1BB,7,NFT825)  !L1
        CALL TRANSNQN(NOB,NUB,T1BB,TI)
      CALL RDINT(1,NOBUB,NOAUA,VHPRBB,NFT833)
      CALL INSITU(NUA,NOA,NUB,NOB,TI,VHPRBB,23)
C
C ---------------M3----------------
C
      CALL INSITU(NOA,NUA,NOA,NOA,TI,VMBB,12)
         CALL RDTAB(NOA,NOB,NOA,NUB,VMAB21,12,NFT891)
        CALL TRANSNQN(NOAB,NOAUB,VMAB21,VMBA21)
         CALL RDTAB(NOA,NOB,NUA,NOB,VMBA21,13,NFT891)
        CALL TRANSNQN(NOAB,NOBUA,VMBA21,T2AB)
         CALL RDTAB(NOA,NUA,NUB,NOB,T2AB,5,NFT825)
      CALL VECCOP(NO2U2AB,T2BB,T2AB)
C
      CALL TRAN14(NOA,NUA,NUB,NOB,VHPLAB,T2BB)
C
       CALL RDTAB(NUA,NUB,NOA,NUB,VEBA21,10,NFT892)
        CALL TRANSNQN(NUAB,NOAUB,VEBA21,VEAB21)
      CALL TRAN1TO4(NOA,NUB,NUA,NUB,VEAB21,VEBA21)
      CALL CCMATMUL(FHPBB,T2BB,VEBA21,NUB,NOAUAB,NOB,0,0)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB21,9,NFT892)
      CALL TRANMD(VEAB21,NUA,NUB,NUA,NOB,13)
      CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB21,23)
      CALL CCMATMUL(FHPAA,T2AB,VEAB21,NUA,NOBUAB,NOA,0,0)
C
C       call rdtab(nua,nub,noa,nub,veba21,10,nft892)
C        call transnqn(nuab,noaub,veba21,ti)
C      call tran1to4(noa,nub,nua,nub,ti,veba21)
C      call ccmatmul(fhpbb,t2bb,veba21,nub,noauab,nob,0,0)
C
      CALL VECCOP(NO2U2AB,VHPLAB,T2AB)
      CALL INSITU(NOA,NUA,NUB,NOB,TI,VHPLAB,13)
      CALL INSITU(NUB,NUA,NOA,NOB,TI,VHPLAB,12)
      CALL TRANMD(VEBB,NUA,NUA,NUA,NOA,23)
      CALL TRANMD(VEBB,NUA,NUA,NUA,NOA,13)
C
C      write(6,*) 'start of l3_aab'
C      call flshbf(6)
C
      CALL LAMB23_LOOP_AAB_CIMA(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *T1AA,T1BB,VHPLAB,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *VMBA21,VMAB21,VEAA,VEBB,VEBA,VEAB,VEBA21,VEAB21,
     *FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *ICENA(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'AAB2/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1

      CALL LAMB23_LOOP_AAB_CIMB(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *T1AA,T1BB,VHPLAB,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *VMBA21,VMAB21,VEAA,VEBB,VEBA,VEAB,VEBA21,VEAB21,
     *FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *ICENB(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'AAB1/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'end of l3_aab'
C      call flshbf(6)
C
C
Cc L3_abb   cccccccccccccccccccccccc
C
         CALL RDTAB(NOB,NUB,NUB,NOB,XL2AA,9,NFT825)
      CALL VECCOP(NOB2UB2,XL2AB,XL2AA)
C
       CALL RDTAB(NOB,NUB,NUB,NUB,VEAA,12,NFT892)
      CALL TRAN14(NOB,NUB,NUB,NUB,VEBB,VEAA)
C
         CALL RDTAB(NOB,NOB,NOB,NUB,VMAA,15,NFT891)
        CALL TRANSNQN(NOB2,NOBUB,VMAA,VMBB)
      CALL INSITU(NOB,NUA,NUB,NOA,TI,XL2BB,13)
      CALL INSITU(NUB,NUA,NOB,NOA,TI,XL2BB,12)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,XL2AB,13)
C
      CALL INSITU(NUA,NUA,NUB,NOB,TI,VEAB,23)
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13)
      CALL INSITU(NUB,NUA,NUB,NOA,TI,VEBA,23)
      CALL INSITU(NUB,NUB,NUA,NOA,TI,VEBA,13)
C
      CALL RDINT(1,NOBUB,NOBUB,VHPRAA,NFT830)
      CALL INSITU(NUB,NOB,NUB,NOB,TI,VHPRAA,23)
C
C     ---------------M3--------------
C
         CALL RDTAB(NOB,NUB,NUB,NOB,T2AA,4,NFT825)
      CALL VECCOP(NOB2UB2,T2AB,T2AA)
C
         CALL RDTAB(NOB,NOB,NOB,NUB,VMBB,11,NFT891)
        CALL TRANSNQN(NOB2,NOBUB,VMBB,VEBB)
       CALL RDTAB(NUB,NUB,NUB,NOB,VEBB,8,NFT892)
      CALL TRANMD(VEBB,NUB,NUB,NUB,NOB,13)
      CALL TRANMD(VEBB,NUB,NUB,NUB,NOB,23)
      CALL CCMATMUL(FHPBB,T2AA,VEBB,NUB,NOBUB2,NOB,0,0)
C
C         call rdtab(nob,nob,nob,nub,vmbb,11,nft891)
C        call transnqn(nob2,nobub,vmbb,ti)
      CALL INSITU(NOB,NUA,NUB,NOA,TI,T2BB,13)
      CALL INSITU(NUB,NUA,NOB,NOA,TI,T2BB,12)
      CALL INSITU(NOB,NUB,NUB,NOB,TI,T2AB,13)
C
      CALL INSITU(NUA,NUA,NUB,NOB,TI,VEAB21,23)
      CALL TRANMD(VEAB21,NUA,NUB,NUA,NOB,13)
      CALL INSITU(NUB,NUA,NUB,NOA,TI,VEBA21,23)
      CALL INSITU(NUB,NUB,NUA,NOA,TI,VEBA21,13)
C
C      write(6,*) 'start of l3_abb'
C      call flshbf(6)
C
      CALL LAMB23_LOOP_ABB_CIMA(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *T1AA,T1BB,VHPLAB,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *VMBA21,VMAB21,VEAA,VEBB,VEBA,VEAB,VEBA21,VEAB21,
     *FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *ICENA(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'ABB1/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1

      CALL LAMB23_LOOP_ABB_CIMB(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *T1AA,T1BB,VHPLAB,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *VMBA21,VMAB21,VEAA,VEBB,VEBA,VEAB,VEBA21,VEAB21,
     *FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *ICENB(1),TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'ABB2/3',T1-T0
      CALL FLSHBF(IW)
      T0 = T1
C
C      write(6,*) 'end of l3_abb'
C      call flshbf(6)
C
C
Cc L3_bbb  cccccccccccccccccccc
C
      CALL INSITU(NOB,NUB,NUB,NOB,TI,XL2AA,13)
C
C     ---------M3-----------
      CALL INSITU(NOB,NUB,NUB,NOB,TI,T2AA,13)
C
C      write(6,*) 'start of l3_b'
C      call flshbf(6)
C
      CALL LAMB23_LOOP_CIM(NOB,NUB,FHPBB,T1BB,
     *     VHPRAA,XL2AA,T2AA,VEAA,VEBB,XM3,XL3,TI,VMAA,VMBB,
     *     FHHB,FPPB,X1BB,X2BB,X3BB,X4BBB,X5BBB,EHB,EPB,
     *     CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,ICENB(1),
     *     TXs(1),NCU3s)
      CALL TSECND(T1)
      WRITE(IW,106) 'BBB   ',T1-T0
      CALL FLSHBF(IW)
C
C      write(6,*) 'end of l3_b'
C      call flshbf(6)
C
C --- PRINT -CIM- ENERGIES -----------------------------------
C
      ONETRD=1.0D+00/3.0D+00
      CALL VECMUL(ECIMA,NOA,ONETRD)  !-CIM- 18 MAR 10 ADD BECAUSE REMOVE /THREE IN _CIM
      CALL VECMUL(ECIMB,NOB,ONETRD)  !-CIM- THE SAME TO ABOVE
      CORDA = DSUM(NOA,ECIMA,1)
      CORDB = DSUM(NOB,ECIMB,1)
      CORD  = CORDA + CORDB
      WRITE(IW,9000)
      WRITE(IW,9141) CORDA
      WRITE(IW,9100) (ECIMA(K),K=1,NOA)
      WRITE(IW,9142) CORDB
      WRITE(IW,9100) (ECIMB(K),K=1,NOB)
C
      CALL VADD(ECIMA,1,ECIMB,1,ECIMA,1,NOB)        !-CIM- 05/22/2009 Add /beta energies to /alpha ones; 2 JUL 10 NOA -> NOB
      WRITE(IW,9143) CORD
      WRITE(IW,9100) (ECIMA(K),K=1,NOA)
      IF (NCA.LT.NOA .OR. NCB.LT.NOB) WRITE(IW,9145)
      call rwrit(ICIF, '$CORR-CR-CC(2,3)',  NOA, ECIMA)  !-CIM- 05/22/2009
C
 9000 FORMAT(/10X,20('-'),
     *       /10X,'CIM ENERGIES FOR MOS',
     *       /10X,20('-'))
 9100 FORMAT(5F16.10)
C9110 FORMAT(/1X,'ECORR(LMO-CCSD(2)_T)=',1X,F20.10)
 9141 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3)_ALPHA)= ',30X,F20.10)
 9142 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3)_BETA)=  ',30X,F20.10)
 9143 FORMAT(/1X,'ECORR(LMO-CR-CC(2,3))=       ',30X,F20.10)
 9145 FORMAT( 1X,'WARNING: CR-CC(2,3) CORRECTION ARE NOT COMPLETED!')
C-------------------------------------------------------------
C
      WRITE(6,94)
      ENGCC=ENRG+EREF
C
      CR='A'
      WRITE(6,95) CR,CORA,ENGCC+CORA
      CR='B'
      WRITE(6,95) CR,CORB,ENGCC+CORB
      CR='C'
      WRITE(6,95) CR,CORC,ENGCC+CORC
      CR='D'
      WRITE(6,95) CR,CORD,ENGCC+CORD
C
      EMP2=0.0D+00
      ECCN=ENRG
      XM1(2)=CORA
      XNUM(2)=CORD
C
      WRITE(6,96)
      WRITE(6,97) ENGCC,ENRG,ENGCC+CORA,ENRG+CORA,ENGCC+CORD,ENRG+CORD
      WRITE(6,98)
C
C       save total correlation: ccsd plus best triples correlation
C       Although type -D- is considered the best energy, it is not
C       invariant to rotations of degenerate orbitals, whereas the
C       type -A- energy is.  Hence the type -A- value is returned.
C
      IF(NFG.NE.0) THEN
         ENRG = ENRG + CORD
      ELSE
         ENRG = ENRG + CORA
      ENDIF
      RETURN
C
   94 FORMAT(/1X,'MAIN RESULTS: CR-CC(2,3) = CR-CC(2,3),D =',
     *           ' CR-CCSD(T)_L CALCULATIONS'/)
   95 FORMAT(1X,'GROUND STATE CR-CC(2,3),',A1,1X,'CORRECTION',F10.6,
     *       ', TOTAL E=',F20.10)
   96 FORMAT(/
     * 1X,'CR-CC(2,3),A ENERGY IS IDENTICAL TO THE CCSD(2)_T ENERGY.'/
     * 1X,'CR-CC(2,3),D ENERGY IS IDENTICAL TO COMPLETE CR-CC(2,3)',
     *    ' ENERGY (CR-CCSD(T)_L)')
   97 FORMAT(/15X,'SUMMARY OF CR-CC(2,3) OR CR-CCSD(T)_L CALCULATIONS'/
     *  1X,'CCSD',23X,'E=',F20.10,3X,'CORR. E=',F15.10/
     *  1X,'CR-CC(2,3),A OR CCSD(2)_T  E=',F20.10,3X,'CORR. E=',F15.10/
     *  1X,'CR-CC(2,3) OR CR-CCSD(T)_L E=',F20.10,3X,'CORR. E=',F15.10)
   98 FORMAT(/1X,'THE MOST ACCURATE ENERGETICS IS PROVIDED BY',
     *           ' CR-CC(2,3) = CR-CC(2,3),D')
 106  FORMAT(1X,'DONE WITH ',A6,' CORRECTION  CPU TIME=',F10.1)  !-WL,PP-
      END
C
C*MODULE ROHFCC  *DECK ECIMT1
      SUBROUTINE ECIMT1(NO,NU,T1,FHP,VHPPH,ECIM,EK)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
C    *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
C    *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
C    *                NFT858,NFT859,NFT891,NFT892,NFT899
C     COMMON /NNROHF/ NOAUA,NOAUB,NOBUA,NOBUB,NOA2,NOA2UA,NOA4,NOB2,
C    *                NOB2UB,NOB4,NUA2,NOAUA2,NUA4,NUB2,NOBUB2,NUB4,
C    *                NUAB,NOAB,NO2AB,NU2AB,NOABUB,NOABUA,NOAUAB,
C    *                NOBUAB,NOA2UA2,NOB2UB2,NOA2UB2,NOB2UA2,NO2U2AB,
C    *                NUA3,NUB3,NOA3,NOB3,NOA3UA,NOB3UB,NOA2UB,NOAUB2,
C    *                NOB2UA,NOBUA2,NUA2UB,NOA2OB,NOAOB2,NUA3NOA,
C    *                NUAUB2,NOAOB2UA,NUB3NOB
C
      DIMENSION T1(NO,NU),FHP(NU,NO),VHPPH(NU,NO,NU,NO),ECIM(NO)
      DIMENSION EK(NO,NO)
C
      DATA HALF/0.5D+0/
      DATA ZERO/0.0D+0/
C
      DO 1,I=1,NO
       ECIM(I)=0.00D+00
       DO 2,IA=1,NU
        ECIM(I)=ECIM(I)+FHP(IA,I)*T1(I,IA)
 2     CONTINUE
C
       DO L=1,NO
          DO IA=1,NU
             EK(L,I)=EK(L,I)+T1(I,IA)*FHP(IA,L)
          END DO
       END DO
C
       DO 3,J=1,NO
       DO 4,IA=1,NU
       DO 5,IB=1,NU
        ECIM(I)=ECIM(I)+HALF*VHPPH(IA,I,IB,J)*T1(I,IA)*T1(J,IB)
 5     CONTINUE
 4     CONTINUE
 3     CONTINUE
C
       DO L=1,NO
          PP=ZERO
          DO IA=1,NU
             QQ=ZERO
             DO J=1,NO
                DO IB=1,NU
                   QQ=QQ+T1(J,IB)*VHPPH(IA,L,IB,J)
                END DO
             END DO
             PP=PP+QQ*T1(I,IA)
          END DO
          EK(L,I)=EK(L,I)+HALF*PP
       END DO
C
 1     CONTINUE
C
       RETURN
       END
C
C*MODULE ROHFCC  *DECK ECIMT2
      SUBROUTINE ECIMT2(NO,NU,VHPPH,T2,ECIM,EK)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
C    *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
C    *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
C    *                NFT858,NFT859,NFT891,NFT892,NFT899
C     COMMON /NNROHF/ NOAUA,NOAUB,NOBUA,NOBUB,NOA2,NOA2UA,NOA4,NOB2,
C    *                NOB2UB,NOB4,NUA2,NOAUA2,NUA4,NUB2,NOBUB2,NUB4,
C    *                NUAB,NOAB,NO2AB,NU2AB,NOABUB,NOABUA,NOAUAB,
C    *                NOBUAB,NOA2UA2,NOB2UB2,NOA2UB2,NOB2UA2,NO2U2AB,
C    *                NUA3,NUB3,NOA3,NOB3,NOA3UA,NOB3UB,NOA2UB,NOAUB2,
C    *                NOB2UA,NOBUA2,NUA2UB,NOA2OB,NOAOB2,NUA3NOA,
C    *                NUAUB2,NOAOB2UA,NUB3NOB
C
      DIMENSION T2(NO,NU,NU,NO),VHPPH(NU,NO,NU,NO),ECIM(NO)
      DIMENSION EK(NO,NO)
C
      DATA ZERO/0.0D+0/,QUARTER/0.25D+0/
C
      DO 1,I=1,NO
      DO 2,J=1,NO
      DO 3,IA=1,NU
      DO 4,IB=1,NU
       ECIM(I)=ECIM(I)+QUARTER*VHPPH(IA,I,IB,J)*T2(I,IA,IB,J)
 4    CONTINUE
 3    CONTINUE
 2    CONTINUE
 1    CONTINUE
C
      DO I=1,NO
      DO L=1,NO
         PP=ZERO
         DO J=1,NO
            DO IA=1,NU
            DO IB=1,NU
               PP=PP+T2(I,IA,IB,J)*VHPPH(IA,L,IB,J)
            END DO
            END DO
         END DO
         EK(L,I)=EK(L,I)+QUARTER*PP
      END DO
      END DO
C
      RETURN
      END
C
C*MODULE ROHFCC  *DECK ECIMTAB
      SUBROUTINE ECIMTAB(NOA,NOB,NUA,NUB,VHPPH,T2,T1A,T1B,ECIMA,ECIMB,
     *           EKA,EKB)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
C    *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
C    *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
C    *                NFT858,NFT859,NFT891,NFT892,NFT899
C     COMMON /NNROHF/ NOAUA,NOAUB,NOBUA,NOBUB,NOA2,NOA2UA,NOA4,NOB2,
C    *                NOB2UB,NOB4,NUA2,NOAUA2,NUA4,NUB2,NOBUB2,NUB4,
C    *                NUAB,NOAB,NO2AB,NU2AB,NOABUB,NOABUA,NOAUAB,
C    *                NOBUAB,NOA2UA2,NOB2UB2,NOA2UB2,NOB2UA2,NO2U2AB,
C    *                NUA3,NUB3,NOA3,NOB3,NOA3UA,NOB3UB,NOA2UB,NOAUB2,
C    *                NOB2UA,NOBUA2,NUA2UB,NOA2OB,NOAOB2,NUA3NOA,
C    *                NUAUB2,NOAOB2UA,NUB3NOB
C
      DIMENSION T2(NOA,NUA,NUB,NOB),VHPPH(NUA,NOA,NUB,NOB),
     *ECIMA(NOA),ECIMB(NOB),T1A(NOA,NUA),T1B(NOB,NUB),
     *EKA(NOA,NOA),EKB(NOB,NOB)
C
      DATA ZERO/0.0D+0/,HALF/0.5D+0/
C
      DO 1,I=1,NOA
      DO 2,J=1,NOB
      DO 3,IA=1,NUA
      DO 4,IB=1,NUB
       ECIMA(I)=ECIMA(I)+HALF*VHPPH(IA,I,IB,J)*T2(I,IA,IB,J)
     *                  +HALF*VHPPH(IA,I,IB,J)*T1A(I,IA)*T1B(J,IB)
 4    CONTINUE
 3    CONTINUE
 2    CONTINUE
 1    CONTINUE
C
      DO I=1,NOA
      DO L=1,NOA
         PP=ZERO
         DO J=1,NOB
         DO IA=1,NUA
         DO IB=1,NUB
            QQ=T2(I,IA,IB,J)+T1A(I,IA)*T1B(J,IB)
            PP=PP+QQ*VHPPH(IA,L,IB,J)
         END DO
         END DO
         END DO
         EKA(L,I)=EKA(L,I)+HALF*PP
      END DO
      END DO
C
      DO 11,I=1,NOB
      DO 12,J=1,NOA
      DO 13,IA=1,NUB
      DO 14,IB=1,NUA
       ECIMB(I)=ECIMB(I)+HALF*VHPPH(IB,J,IA,I)*T2(J,IB,IA,I)
     *                  +HALF*VHPPH(IB,J,IA,I)*T1B(I,IA)*T1A(J,IB)
 14   CONTINUE
 13   CONTINUE
 12   CONTINUE
 11   CONTINUE
      DO I=1,NOB
      DO L=1,NOB
         PP=ZERO
         DO J=1,NOA
         DO IA=1,NUB
         DO IB=1,NUA
            QQ=T2(J,IB,IA,I)+T1B(I,IA)*T1A(J,IB)
            PP=PP+QQ*VHPPH(IB,J,IA,L)
         END DO
         END DO
         END DO
         EKB(L,I)=EKB(L,I)+HALF*PP
      END DO
      END DO
C
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_CIM  -CIM-
      SUBROUTINE LAMB23_LOOP_CIM(NO,NU,FHP,T1,
     *                       VHPR,XL2,T2,VE,VE21,XM3,XL3,TI,VM,VM21,
     *                       FHH,FPP,X1,X2,X3,X4,X5,EH,EP,
     *                       CORA,CORB,CORC,CORD,NC,ECIM,TX,XXM3,XXL3,
     *                       ICEN,TXs,NCU3s) !-CIM- ADD NC,...
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION TI(1),XM3(NU,NU,NU),T2(NU,NU,NO,NO),
     *          XL3(NU,NU,NU),XL2(NU,NU,NO,NO),
     *          VE(NU,NU,NU,NO),VE21(NU,NU,NU,NO),
     *          VM(NO,NU,NO,NO),VM21(NO,NU,NO,NO),FHP(NU,NO),
     *          VHPR(NU,NU,NO,NO),T1(NU,NO),EH(NO),EP(NU),
     *          FHH(NO,NO),FPP(NU,NU),X1(NO,NO),
     *          X2(NU,NU),X3(NU,NO),X4(NO,NU,NU),X5(NU,NO,NO)
      DIMENSION ECIM(NO),TX(NO,NO),XXM3(NCU3s),XXL3(NCU3s)  !-CIM-
      DIMENSION ICEN(NC),TXs(NC)
      DATA HALF/0.5D+0/
C     DATA ZERO/0.0D+00/,THREE/3.0D+00/   !-CIM-
C
      NU2=NU*NU
      NU3=NU*NU*NU
C
      DO 131 I=1, NO-1  !-CIM- NO-2 --> NO-1
       DO 132 J=I+1, NO  !-CIM- NO-1 --> NO
        CALL ZEROMA(XXL3,1,NCU3s)  !-CIM-
        CALL ZEROMA(XXM3,1,NCU3s)  !-CIM-
        DO 133 K=1, NO   !-CIM- J+1 --> 1
           IF (K.EQ.I) GOTO 133  !-CIM-
           IF (K.EQ.J) GOTO 133  !-CIM-
C
      CALL ZEROMA(XL3,1,NU3)
C
      CALL CCMATMUL(VHPR(1,1,I,J),T1(1,K),XL3,NU2,NU,1,0,0)
      CALL CCMATMUL(VHPR(1,1,I,K),T1(1,J),XL3,NU2,NU,1,0,1)
      CALL CCMATMUL(VHPR(1,1,K,J),T1(1,I),XL3,NU2,NU,1,0,1)
C
      CALL CCMATMUL(XL2(1,1,J,I),FHP(1,K),XL3,NU2,NU,1,0,0)
      CALL CCMATMUL(XL2(1,1,K,I),FHP(1,J),XL3,NU2,NU,1,0,1)
      CALL CCMATMUL(XL2(1,1,J,K),FHP(1,I),XL3,NU2,NU,1,0,1)
C
      CALL CCMATMUL(XL2(1,1,1,I),VM(1,1,J,K),XL3,NU2,NU,NO,0,1)
      CALL CCMATMUL(XL2(1,1,1,J),VM(1,1,I,K),XL3,NU2,NU,NO,0,0)
      CALL CCMATMUL(XL2(1,1,1,K),VM(1,1,J,I),XL3,NU2,NU,NO,0,0)
C
      CALL CCMATMUL(XL2(1,1,J,I),VE(1,1,1,K),XL3,NU,NU2,NU,0,0)
      CALL CCMATMUL(XL2(1,1,K,I),VE(1,1,1,J),XL3,NU,NU2,NU,0,1)
      CALL CCMATMUL(XL2(1,1,J,K),VE(1,1,1,I),XL3,NU,NU2,NU,0,1)
C --------M3---------
      CALL ZEROMA(XM3,1,NU3)
C
      CALL CCMATMUL(T2(1,1,1,I),VM21(1,1,J,K),XM3,NU2,NU,NO,0,1)
      CALL CCMATMUL(T2(1,1,1,J),VM21(1,1,I,K),XM3,NU2,NU,NO,0,0)
      CALL CCMATMUL(T2(1,1,1,K),VM21(1,1,J,I),XM3,NU2,NU,NO,0,0)
C
      CALL CCMATMUL(T2(1,1,J,I),VE21(1,1,1,K),XM3,NU,NU2,NU,0,0)
      CALL CCMATMUL(T2(1,1,K,I),VE21(1,1,1,J),XM3,NU,NU2,NU,0,1)
      CALL CCMATMUL(T2(1,1,J,K),VE21(1,1,1,I),XM3,NU,NU2,NU,0,1)
C
C
      CALL VECMUL(XL3,NU3,HALF)
      CALL VECMUL(XM3,NU3,HALF)
C
      CALL PERMFULL(NU,TI,XL3)
      CALL PERMFULL(NU,TI,XM3)
C
C      write(6,*) 'L3'
C      call drukm3(nu,nu,nu,i,j,k,xl3)
C        write(6,*) 'M3'
C      call drukm3(nu,nu,nu,i,j,k,xm3)
C
      DO 191 KK=1,NC
         KKK=ICEN(KK)
         TXs(KK)=TX(K,KKK)
 191  CONTINUE
C
      CALL L23IJK_LOOP_CIM(I,J,K,NO,NU,XM3,XL3,
     *     FHH,FPP,X1,X2,X3,X4,X5,EH,EP,
     *     NC,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
      CALL L23_LOOP_ECIM(NO,NU,NC,NCU3s,ICEN,XXL3,XXM3,ECIM)  !-CIM-
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_AAB_CIMA 12/07/2007
      SUBROUTINE LAMB23_LOOP_AAB_CIMA(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *     VMBA21,VMAB21,VEAA,VEBB,VEBA,VEAB,VEBA21,VEAB21,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *     ICENA,TXs,NCU3s)   !-WL- 11/14/2007 ADD ECIMA,ECIMB
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION TI(1),XM3(NUA,NUA,NUB),XL3(NUA,NUA,NUB),
     *          XL2AA(NUA,NUA,NOA,NOA),T2AA(NUA,NUA,NOA,NOA),
     *          T2BB(NOB,NUA,NUB,NOA),T2AB(NOA,NUA,NUB,NOB),
     *          XL2BB(NOB,NUA,NUB,NOA),XL2AB(NOA,NUA,NUB,NOB),
     *          VMAA(NUA,NOA,NOA,NOA),FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          VMAB(NOA,NUB,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VHPRAB(NUA,NUB,NOA,NOB),VHPRAA(NUA,NUA,NOA,NOA),
     *          VEAA(NUA,NUA,NUA,NOA),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUA,NUB,NOB),VEBA(NUB,NUA,NUB,NOA),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB),
     *          T2(NUA,NUB,NOA,NOB),VEBB(NUA,NUA,NUA,NOA),
     *          VEAB21(NUA,NUA,NUB,NOB),VEBA21(NUB,NUA,NUB,NOA),
     *          VMBB(NUA,NOA,NOA,NOA),
     *          VMAB21(NOA,NUB,NOA,NOB),VMBA21(NUA,NOB,NOA,NOB)
      DIMENSION FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1AA(NOA,NOA),X1AB(NOA,NOB),X2AA(NUA,NUA),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4AAA(NOA,NUA,NUA),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5AAA(NUA,NOA,NOA),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMA(NOA),TXA(NOA,NOA),TXs(NCA),          !-WL- 11/14/2007 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENA(NCA), !-WL- 12/10/2007 ADD XXM3,XXL3 
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C     DATA ZERO/0.0D+00/,THREE/3.0D+00/   !-WL-
C
      NUA2=NUA*NUA
      NUAB=NUA*NUB
C
      DO 131 J=1, NOA
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
       DO 132 K=1, NOB   !-WL- 12/06/2007 move it before i,j; 12/07/2007 ADD AGAIN
        CALL ZEROMA(XXL3,1,NCU3s)
        CALL ZEROMA(XXM3,1,NCU3s)
        DO 133 I=1, NOA
         IF (I.EQ.J) GOTO 133
      CALL ZEROMA(XL3,1,NUA2*NUB)
C
Ccccccccccccccccccccccccc
C
      CALL CCMATMUL(XL2AA(1,1,1,I),VMAB(1,1,J,K),XL3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(XL2AA(1,1,1,J),VMAB(1,1,I,K),XL3,NUA2,NUB,NOA,0,0)
C
      CALL CCMATMUL(VEAA(1,1,1,J),VHPRAB(1,1,I,K),XL3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEAA(1,1,1,I),VHPRAB(1,1,J,K),XL3,NUA2,NUB,NUA,0,1)
C
      CALL CCMATMUL(XL2AA(1,1,J,I),FHPBB(1,K),XL3,NUA2,NUB,1,0,0)
C
      CALL CCMATMUL(VHPRAA(1,1,I,J),T1BB(1,K),XL3,NUA2,NUB,1,0,0)
C
      CALL VECMUL(XL3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA(1,1,J,K),XL2BB(1,1,1,I),XL3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA(1,1,I,K),XL2BB(1,1,1,J),XL3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMAA(1,1,J,I),XL2AB(1,1,1,K),XL3,NUA,NUAB,NOA,0,1)
C
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEBA(1,1,1,J),XL3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,J,K),VEBA(1,1,1,I),XL3,NUA,NUAB,NUB,0,1)
C
      CALL CCMATMUL(XL2AA(1,1,J,I),VEAB(1,1,1,K),XL3,NUA,NUAB,NUA,0,0)
C
C
      CALL CCMATMUL(FHPAA(1,I),VHPRAB(1,1,J,K),XL3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(FHPAA(1,J),VHPRAB(1,1,I,K),XL3,NUA,NUAB,1,0,1)
C
      CALL CCMATMUL(T1AA(1,I),VHPRBB(1,1,J,K),XL3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(T1AA(1,J),VHPRBB(1,1,I,K),XL3,NUA,NUAB,1,0,1)
C
      CALL PERM_AAB(NUA,NUB,TI,XL3)
C
Ccccccccc M3 cccccccccccc
      CALL ZEROMA(XM3,1,NUA2*NUB)
C
      CALL CCMATMUL(T2AA(1,1,1,I),VMAB21(1,1,J,K),XM3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(T2AA(1,1,1,J),VMAB21(1,1,I,K),XM3,NUA2,NUB,NOA,0,0)
C
      CALL CCMATMUL(VEBB(1,1,1,J),T2(1,1,I,K),XM3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEBB(1,1,1,I),T2(1,1,J,K),XM3,NUA2,NUB,NUA,0,1)
C
      CALL VECMUL(XM3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA21(1,1,J,K),T2BB(1,1,1,I),XM3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA21(1,1,I,K),T2BB(1,1,1,J),XM3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMBB(1,1,J,I),T2AB(1,1,1,K),XM3,NUA,NUAB,NOA,0,1)
C
C
      CALL CCMATMUL(T2(1,1,I,K),VEBA21(1,1,1,J),XM3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(T2(1,1,J,K),VEBA21(1,1,1,I),XM3,NUA,NUAB,NUB,0,1)
C
      CALL CCMATMUL(T2AA(1,1,J,I),VEAB21(1,1,1,K),XM3,NUA,NUAB,NUA,0,0)
C
      CALL PERM_AAB(NUA,NUB,TI,XM3)
C
C        write(6,*) 'M3'
C      call drukm3(nua,nua,nub,i,j,k,xm3)
C        write(6,*) 'L3'
C      call drukm3(nua,nua,nub,i,j,k,xl3)
C
      DO 191 II=1,NCA
         III=ICENA(II)
         TXs(II)=TXA(I,III)
 191  CONTINUE
C
      CALL L23IJK_LOOP_AAB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCA,XXM3,XXL3,TXs,NCU3s)
 133         CONTINUE
C
      CALL L23_LOOP_AAB_ECIM(NOA,NUA,NUB,NCA,NCU3s,ICENA,
     *     XXL3,XXM3,ECIMA)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C*MODULE ROHFCC  *DECK LAMB23_LOOP_AAB_CIMB 12/07/2007
      SUBROUTINE LAMB23_LOOP_AAB_CIMB(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *     VMBA21,VMAB21,VEAA,VEBB,VEBA,VEAB,VEBA21,VEAB21,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *     ICENB,TXs,NCU3s)   !-WL- 11/14/2007 ADD ECIMA,ECIMB
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION TI(1),XM3(NUA,NUA,NUB),XL3(NUA,NUA,NUB),
     *          XL2AA(NUA,NUA,NOA,NOA),T2AA(NUA,NUA,NOA,NOA),
     *          T2BB(NOB,NUA,NUB,NOA),T2AB(NOA,NUA,NUB,NOB),
     *          XL2BB(NOB,NUA,NUB,NOA),XL2AB(NOA,NUA,NUB,NOB),
     *          VMAA(NUA,NOA,NOA,NOA),FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          VMAB(NOA,NUB,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VHPRAB(NUA,NUB,NOA,NOB),VHPRAA(NUA,NUA,NOA,NOA),
     *          VEAA(NUA,NUA,NUA,NOA),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUA,NUB,NOB),VEBA(NUB,NUA,NUB,NOA),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB),
     *          T2(NUA,NUB,NOA,NOB),VEBB(NUA,NUA,NUA,NOA),
     *          VEAB21(NUA,NUA,NUB,NOB),VEBA21(NUB,NUA,NUB,NOA),
     *          VMBB(NUA,NOA,NOA,NOA),
     *          VMAB21(NOA,NUB,NOA,NOB),VMBA21(NUA,NOB,NOA,NOB)
      DIMENSION FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1AA(NOA,NOA),X1AB(NOA,NOB),X2AA(NUA,NUA),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4AAA(NOA,NUA,NUA),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5AAA(NUA,NOA,NOA),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMB(NOB),TXB(NOB,NOB),TXs(NCB),    !-WL- 11/14/2007 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENB(NCB),
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C     DATA ZERO/0.0D+00/,THREE/3.0D+00/   !-WL-
C
      NUA2=NUA*NUA
      NUAB=NUA*NUB
C
      DO 131 I=1, NOA-1
       DO 132 J=I+1, NOA
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
      CALL ZEROMA(XXL3,1,NCU3s)
      CALL ZEROMA(XXM3,1,NCU3s)
        DO 133 K=1, NOB
C
      CALL ZEROMA(XL3,1,NUA2*NUB)
C
Ccccccccccccccccccccccccc
C
      CALL CCMATMUL(XL2AA(1,1,1,I),VMAB(1,1,J,K),XL3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(XL2AA(1,1,1,J),VMAB(1,1,I,K),XL3,NUA2,NUB,NOA,0,0)
C
      CALL CCMATMUL(VEAA(1,1,1,J),VHPRAB(1,1,I,K),XL3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEAA(1,1,1,I),VHPRAB(1,1,J,K),XL3,NUA2,NUB,NUA,0,1)
C
      CALL CCMATMUL(XL2AA(1,1,J,I),FHPBB(1,K),XL3,NUA2,NUB,1,0,0)
C
      CALL CCMATMUL(VHPRAA(1,1,I,J),T1BB(1,K),XL3,NUA2,NUB,1,0,0)
C
      CALL VECMUL(XL3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA(1,1,J,K),XL2BB(1,1,1,I),XL3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA(1,1,I,K),XL2BB(1,1,1,J),XL3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMAA(1,1,J,I),XL2AB(1,1,1,K),XL3,NUA,NUAB,NOA,0,1)
C
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEBA(1,1,1,J),XL3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,J,K),VEBA(1,1,1,I),XL3,NUA,NUAB,NUB,0,1)
C
      CALL CCMATMUL(XL2AA(1,1,J,I),VEAB(1,1,1,K),XL3,NUA,NUAB,NUA,0,0)
C
C
      CALL CCMATMUL(FHPAA(1,I),VHPRAB(1,1,J,K),XL3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(FHPAA(1,J),VHPRAB(1,1,I,K),XL3,NUA,NUAB,1,0,1)
C
      CALL CCMATMUL(T1AA(1,I),VHPRBB(1,1,J,K),XL3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(T1AA(1,J),VHPRBB(1,1,I,K),XL3,NUA,NUAB,1,0,1)
C
      CALL PERM_AAB(NUA,NUB,TI,XL3)
C
Ccccccccc M3 cccccccccccc
      CALL ZEROMA(XM3,1,NUA2*NUB)
C
      CALL CCMATMUL(T2AA(1,1,1,I),VMAB21(1,1,J,K),XM3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(T2AA(1,1,1,J),VMAB21(1,1,I,K),XM3,NUA2,NUB,NOA,0,0)
C
      CALL CCMATMUL(VEBB(1,1,1,J),T2(1,1,I,K),XM3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEBB(1,1,1,I),T2(1,1,J,K),XM3,NUA2,NUB,NUA,0,1)
C
      CALL VECMUL(XM3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA21(1,1,J,K),T2BB(1,1,1,I),XM3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA21(1,1,I,K),T2BB(1,1,1,J),XM3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMBB(1,1,J,I),T2AB(1,1,1,K),XM3,NUA,NUAB,NOA,0,1)
C
C
      CALL CCMATMUL(T2(1,1,I,K),VEBA21(1,1,1,J),XM3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(T2(1,1,J,K),VEBA21(1,1,1,I),XM3,NUA,NUAB,NUB,0,1)
C
      CALL CCMATMUL(T2AA(1,1,J,I),VEAB21(1,1,1,K),XM3,NUA,NUAB,NUA,0,0)
C
      CALL PERM_AAB(NUA,NUB,TI,XM3)
C
C        write(6,*) 'M3'
C      call drukm3(nua,nua,nub,i,j,k,xm3)
C        write(6,*) 'L3'
C      call drukm3(nua,nua,nub,i,j,k,xl3)
C
      DO 191 KK=1,NCB
         KKK=ICENB(KK)
         TXs(KK)=TXB(K,KKK)
 191  CONTINUE
C
      CALL L23IJK_LOOP_AAB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCB,XXM3,XXL3,TXs,NCU3s)
 133         CONTINUE
C
      CALL L23_LOOP_AAB_ECIM(NOB,NUA,NUB,NCB,NCU3s,ICENB,
     *     XXL3,XXM3,ECIMB)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_ABB_CIMA 12/07/2007
      SUBROUTINE LAMB23_LOOP_ABB_CIMA(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *     VMBA21,VMAB21,VEAA,VEBB,VEBA,VEAB,VEBA21,VEAB21,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *     ICENA,TXs,NCU3s)     !-WL- 11/14/2007 ADD ECIMA,ECIMB
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION TI(1),XL3(NUA,NUB,NUB),XM3(NUA,NUB,NUB),
     *          XL2AA(NOB,NUB,NUB,NOB),T2AA(NOB,NUB,NUB,NOB),
     *          T2BB(NUA,NUB,NOB,NOA),T2(NUA,NUB,NOA,NOB),
     *          VMBB(NOB,NUB,NOB,NOB),T2AB(NUB,NUB,NOB,NOB),
     *          VMAB21(NUB,NOA,NOA,NOB),VMBA21(NUA,NOB,NOA,NOB),
     *          VEBB(NUB,NUB,NUB,NOB),
     *          VEAB21(NUA,NUB,NUA,NOB),VEBA21(NUA,NUB,NUB,NOA),
     *          XL2BB(NUA,NUB,NOB,NOA),VHPRAB(NUA,NUB,NOA,NOB),
     *          VMAA(NOB,NUB,NOB,NOB),XL2AB(NUB,NUB,NOB,NOB),
     *          VMAB(NUB,NOA,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VEAA(NUB,NUB,NUB,NOB),VHPRAA(NUB,NUB,NOB,NOB),
     *          FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUB,NUA,NOB),VEBA(NUA,NUB,NUB,NOA),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1BB(NOB,NOB),X1AB(NOA,NOB),X2BB(NUB,NUB),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4BBB(NOB,NUB,NUB),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5BBB(NUB,NOB,NOB),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMA(NOA),TXA(NOA,NOA),TXs(NCA),   !-WL- 11/14/2007 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENA(NCA),
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C     DATA ZERO/0.0D+00/,THREE/3.0D+00/           !-WL-
C
      NUB2=NUB*NUB
      NUAB=NUA*NUB
C
      DO 131 J=1, NOB-1
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
       DO 132 K=J+1, NOB
        CALL ZEROMA(XXL3,1,NCU3s)
        CALL ZEROMA(XXM3,1,NCU3s)
        DO 133 I=1, NOA
C
      CALL ZEROMA(XL3,1,NUA*NUB2)
C
      CALL CCMATMUL(VMBA(1,1,I,J),XL2AA(1,1,1,K),XL3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA(1,1,I,K),XL2AA(1,1,1,J),XL3,NUA,NUB2,NOB,0,0)
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),VEAA(1,1,1,K),XL3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEAA(1,1,1,J),XL3,NUA,NUB2,NUB,0,1)
C
C
      CALL CCMATMUL(FHPAA(1,I),XL2AB(1,1,K,J),XL3,NUA,NUB2,1,0,0)
C
      CALL CCMATMUL(T1AA(1,I),VHPRAA(1,1,J,K),XL3,NUA,NUB2,1,0,0)
C
      CALL VECMUL(XL3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(VHPRAB(1,1,1,J),VMAB(1,1,I,K),XL3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(VHPRAB(1,1,1,K),VMAB(1,1,I,J),XL3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(XL2BB(1,1,1,I),VMAA(1,1,J,K),XL3,NUAB,NUB,NOB,0,1)
C
      CALL CCMATMUL(VEAB(1,1,1,J),VHPRAB(1,1,I,K),XL3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB(1,1,1,K),VHPRAB(1,1,I,J),XL3,NUAB,NUB,NUA,0,1)
C
      CALL CCMATMUL(VEBA(1,1,1,I),XL2AB(1,1,K,J),XL3,NUAB,NUB,NUB,0,0)
C
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),FHPBB(1,K),XL3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),FHPBB(1,J),XL3,NUAB,NUB,1,0,1)
C
      CALL CCMATMUL(VHPRBB(1,1,I,J),T1BB(1,K),XL3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRBB(1,1,I,K),T1BB(1,J),XL3,NUAB,NUB,1,0,1)
C
      CALL PERM_ABB(NUA,NUB,TI,XL3)
C
C     -------M3-------------
      CALL ZEROMA(XM3,1,NUA*NUB2)
C
      CALL CCMATMUL(VMBA21(1,1,I,J),T2AA(1,1,1,K),XM3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA21(1,1,I,K),T2AA(1,1,1,J),XM3,NUA,NUB2,NOB,0,0)
C
      CALL CCMATMUL(T2(1,1,I,J),VEBB(1,1,1,K),XM3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(T2(1,1,I,K),VEBB(1,1,1,J),XM3,NUA,NUB2,NUB,0,1)
C
      CALL VECMUL(XM3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(T2(1,1,1,J),VMAB21(1,1,I,K),XM3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(T2(1,1,1,K),VMAB21(1,1,I,J),XM3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(T2BB(1,1,1,I),VMBB(1,1,J,K),XM3,NUAB,NUB,NOB,0,1)
C
      CALL CCMATMUL(VEAB21(1,1,1,J),T2(1,1,I,K),XM3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB21(1,1,1,K),T2(1,1,I,J),XM3,NUAB,NUB,NUA,0,1)
C
      CALL CCMATMUL(VEBA21(1,1,1,I),T2AB(1,1,K,J),XM3,NUAB,NUB,NUB,0,0)
C
      CALL PERM_ABB(NUA,NUB,TI,XM3)
C
C        write(6,*) 'L3'
C      call drukm3(nua,nub,nub,i,j,k,xl3)
C        write(6,*) 'M3'
C      call drukm3(nua,nub,nub,i,j,k,xm3)
C
           DO 191 II=1,NCA
              III=ICENA(II)
              TXs(II)=TXA(I,III)
 191       CONTINUE
C
      CALL L23IJK_LOOP_ABB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCA,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
        CALL L23_LOOP_ABB_ECIM(NOA,NUA,NUB,NCA,NCU3s,ICENA,
     *       XXL3,XXM3,ECIMA)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_ABB_CIMB 12/07/2007
      SUBROUTINE LAMB23_LOOP_ABB_CIMB(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *     VMBA21,VMAB21,VEAA,VEBB,VEBA,VEAB,VEBA21,VEAB21,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *     ICENB,TXs,NCU3s)     !-WL- 11/14/2007 ADD ECIMA,ECIMB
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION TI(1),XL3(NUA,NUB,NUB),XM3(NUA,NUB,NUB),
     *          XL2AA(NOB,NUB,NUB,NOB),T2AA(NOB,NUB,NUB,NOB),
     *          T2BB(NUA,NUB,NOB,NOA),T2(NUA,NUB,NOA,NOB),
     *          VMBB(NOB,NUB,NOB,NOB),T2AB(NUB,NUB,NOB,NOB),
     *          VMAB21(NUB,NOA,NOA,NOB),VMBA21(NUA,NOB,NOA,NOB),
     *          VEBB(NUB,NUB,NUB,NOB),
     *          VEAB21(NUA,NUB,NUA,NOB),VEBA21(NUA,NUB,NUB,NOA),
     *          XL2BB(NUA,NUB,NOB,NOA),VHPRAB(NUA,NUB,NOA,NOB),
     *          VMAA(NOB,NUB,NOB,NOB),XL2AB(NUB,NUB,NOB,NOB),
     *          VMAB(NUB,NOA,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VEAA(NUB,NUB,NUB,NOB),VHPRAA(NUB,NUB,NOB,NOB),
     *          FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUB,NUA,NOB),VEBA(NUA,NUB,NUB,NOA),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1BB(NOB,NOB),X1AB(NOA,NOB),X2BB(NUB,NUB),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4BBB(NOB,NUB,NUB),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5BBB(NUB,NOB,NOB),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMB(NOB),TXB(NOB,NOB),TXs(NCB),   !-WL- 11/14/2007 ADD ECIMA,ECIMB
     *          XXL3(NCU3s),XXM3(NCU3s),ICENB(NCB),
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C     DATA ZERO/0.0D+00/,THREE/3.0D+00/           !-WL-
C
      NUB2=NUB*NUB
      NUAB=NUA*NUB
C
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
      DO 131 I=1, NOA   !-WL- 12/08/2007 MOVE I=1, NOA HERE
        DO 132 J=1, NOB
      CALL ZEROMA(XXL3,1,NCU3s)
      CALL ZEROMA(XXM3,1,NCU3s)
         DO 133 K=1, NOB
            IF (K.EQ.J) GOTO 133
C
      CALL ZEROMA(XL3,1,NUA*NUB2)
C
      CALL CCMATMUL(VMBA(1,1,I,J),XL2AA(1,1,1,K),XL3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA(1,1,I,K),XL2AA(1,1,1,J),XL3,NUA,NUB2,NOB,0,0)
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),VEAA(1,1,1,K),XL3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEAA(1,1,1,J),XL3,NUA,NUB2,NUB,0,1)
C
C
      CALL CCMATMUL(FHPAA(1,I),XL2AB(1,1,K,J),XL3,NUA,NUB2,1,0,0)
C
      CALL CCMATMUL(T1AA(1,I),VHPRAA(1,1,J,K),XL3,NUA,NUB2,1,0,0)
C
      CALL VECMUL(XL3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(VHPRAB(1,1,1,J),VMAB(1,1,I,K),XL3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(VHPRAB(1,1,1,K),VMAB(1,1,I,J),XL3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(XL2BB(1,1,1,I),VMAA(1,1,J,K),XL3,NUAB,NUB,NOB,0,1)
C
      CALL CCMATMUL(VEAB(1,1,1,J),VHPRAB(1,1,I,K),XL3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB(1,1,1,K),VHPRAB(1,1,I,J),XL3,NUAB,NUB,NUA,0,1)
C
      CALL CCMATMUL(VEBA(1,1,1,I),XL2AB(1,1,K,J),XL3,NUAB,NUB,NUB,0,0)
C
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),FHPBB(1,K),XL3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),FHPBB(1,J),XL3,NUAB,NUB,1,0,1)
C
      CALL CCMATMUL(VHPRBB(1,1,I,J),T1BB(1,K),XL3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRBB(1,1,I,K),T1BB(1,J),XL3,NUAB,NUB,1,0,1)
C
      CALL PERM_ABB(NUA,NUB,TI,XL3)
C
C     -------M3-------------
      CALL ZEROMA(XM3,1,NUA*NUB2)
C
      CALL CCMATMUL(VMBA21(1,1,I,J),T2AA(1,1,1,K),XM3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA21(1,1,I,K),T2AA(1,1,1,J),XM3,NUA,NUB2,NOB,0,0)
C
      CALL CCMATMUL(T2(1,1,I,J),VEBB(1,1,1,K),XM3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(T2(1,1,I,K),VEBB(1,1,1,J),XM3,NUA,NUB2,NUB,0,1)
C
      CALL VECMUL(XM3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(T2(1,1,1,J),VMAB21(1,1,I,K),XM3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(T2(1,1,1,K),VMAB21(1,1,I,J),XM3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(T2BB(1,1,1,I),VMBB(1,1,J,K),XM3,NUAB,NUB,NOB,0,1)
C
      CALL CCMATMUL(VEAB21(1,1,1,J),T2(1,1,I,K),XM3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB21(1,1,1,K),T2(1,1,I,J),XM3,NUAB,NUB,NUA,0,1)
C
      CALL CCMATMUL(VEBA21(1,1,1,I),T2AB(1,1,K,J),XM3,NUAB,NUB,NUB,0,0)
C
      CALL PERM_ABB(NUA,NUB,TI,XM3)
C
C        write(6,*) 'L3'
C      call drukm3(nua,nub,nub,i,j,k,xl3)
C        write(6,*) 'M3'
C      call drukm3(nua,nub,nub,i,j,k,xm3)
C
           DO 191 KK=1,NCB
              KKK=ICENB(KK)
              TXs(KK)=TXB(K,KKK)
 191       CONTINUE
C
      CALL L23IJK_LOOP_ABB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCB,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
        CALL L23_LOOP_ABB_ECIM(NOB,NUA,NUB,NCB,NCU3s,ICENB,
     *       XXL3,XXM3,ECIMB)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK L23IJK_LOOP_CIM  -CIM-
      SUBROUTINE L23IJK_LOOP_CIM(I,J,K,NO,NU,XM3,XL3,
     *     FHH,FPP,X1,X2,X3,X4,X5,EH,EP,
     *     NC,XXM3,XXL3,TXs,NCU3s)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION XM3(NU,NU,NU),XL3(NU,NU,NU),
     *          EH(NO),EP(NU),FHH(NO,NO),FPP(NU,NU),X1(NO,NO),
     *          X2(NU,NU),X3(NU,NO),X4(NO,NU,NU),X5(NU,NO,NO)
      DIMENSION XXM3(NCU3s),XXL3(NCU3s),TXs(NC)
C
      PA1=-FHH(I,I)-FHH(J,J)-FHH(K,K)
      PA3=X1(I,J)+X1(I,K)+X1(J,K)
C     EIJK=EH(I)+EH(J)+EH(K)
C
      N=0  !-CIM-
      DO 231,IA=1,NU-2
         PA5A=-X3(IA,I)-X3(IA,J)-X3(IA,K)
         PA7A=-X5(IA,I,J)-X5(IA,I,K)-X5(IA,J,K)
C        EIJKA=EIJK-EP(IA)
      DO 232,IB=IA+1,NU-1
         PA2AB=FPP(IA,IA)+FPP(IB,IB)
         PA5AB=PA5A-X3(IB,I)-X3(IB,J)-X3(IB,K)
         PA6AB=X4(I,IA,IB)+X4(J,IA,IB)+X4(K,IA,IB)
         PA7AB=PA7A-X5(IB,I,J)-X5(IB,I,K)-X5(IB,J,K)
C        EIJKAB=EIJKA-EP(IB)
      DO 233,IC=IB+1,NU
         PA2=PA2AB+FPP(IC,IC)
         PA4=X2(IA,IB)+X2(IA,IC)+X2(IB,IC)
         PA5=PA5AB-X3(IC,I)-X3(IC,J)-X3(IC,K)
         PA6=PA6AB+X4(I,IA,IC)+X4(I,IB,IC)+
     *             X4(J,IA,IC)+X4(J,IB,IC)+
     *             X4(K,IA,IC)+X4(K,IB,IC)
         PA7=PA7AB-X5(IC,I,J)-X5(IC,I,K)-X5(IC,J,K)
C        YDENA=EIJKAB-EP(IC)
         YDENB=-PA1-PA2
         YDENC=YDENB-PA3-PA4-PA5
         YDEND=YDENC-PA6-PA7
ccc      XNUM=XM3(IA,IB,IC)*XL3(IA,IB,IC)
ccc      CORA=CORA+XNUM/YDENA
ccc      CORB=CORB+XNUM/YDENB
ccc      CORC=CORC+XNUM/YDENC
ccc      CORD=CORD+XNUM/YDEND
C
C --- ADD THE FOLLOWING SIX LINES -CIM-
C
         P1=XL3(IA,IB,IC)/YDEND
         P2=XM3(IA,IB,IC)
         DO 330 KK=1,NC
            N=N+1  !-CIM-
            XXL3(N)=XXL3(N)+P1*TXs(KK)
            XXM3(N)=XXM3(N)+P2*TXs(KK)
 330     CONTINUE
C
 233  CONTINUE
 232  CONTINUE
 231  CONTINUE
      RETURN
      END
C*MODULE ROHFCC  *DECK L23IJK_LOOP_AAB_CIM  -CIM-
      SUBROUTINE L23IJK_LOOP_AAB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NC,XXM3,XXL3,TXs,NCU3s)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION XM3(NUA,NUA,NUB),XL3(NUA,NUA,NUB)
      DIMENSION FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1AA(NOA,NOA),X1AB(NOA,NOB),X2AA(NUA,NUA),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4AAA(NOA,NUA,NUA),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5AAA(NUA,NOA,NOA),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
      DIMENSION TXs(NC),XXM3(NCU3s),XXL3(NCU3s)
C
      PA1=-FHHA(I,I)-FHHA(J,J)-FHHB(K,K)
      PA3=X1AA(I,J)+X1AB(I,K)+X1AB(J,K)
C     EIJK=EHA(I)+EHA(J)+EHB(K)
C
      N=0  !-CIM-
      DO 231,IA=1,NUA-1
C        EIJKA=EIJK-EPA(IA)
         PA5A=-X3AA(IA,I)-X3AA(IA,J)-X3AB(IA,K)
         PA7A=-X5AAA(IA,I,J)-X5AAB(IA,I,K)-X5AAB(IA,J,K)
      DO 232,IB=IA+1,NUA
C        EIJKAB=EIJKA-EPA(IB)
         PA2AB=FPPA(IA,IA)+FPPA(IB,IB)
         PA5AB=PA5A-X3AA(IB,I)-X3AA(IB,J)-X3AB(IB,K)
         PA6AB=X4AAA(I,IA,IB)+X4AAA(J,IA,IB)
         PA7AB=PA7A-X5AAA(IB,I,J)-X5AAB(IB,I,K)-X5AAB(IB,J,K)
      DO 233,IC=1,NUB
         PA2=PA2AB+FPPB(IC,IC)
         PA4=X2AA(IA,IB)+X2AB(IA,IC)+X2AB(IB,IC)
         PA5=PA5AB-X3BA(IC,I)-X3BA(IC,J)-X3BB(IC,K)
         PA6=PA6AB+X4AAB(I,IA,IC)+X4AAB(I,IB,IC)
     *            +X4AAB(J,IA,IC)+X4AAB(J,IB,IC)
     *            +X4BBA(K,IC,IA)+X4BBA(K,IC,IB)
         PA7=PA7AB-X5BBA(IC,K,I)-X5BBA(IC,K,J)
C        YDENA=EIJKAB-EPB(IC)
         YDENB=-PA1-PA2
         YDENC=YDENB-PA3-PA4-PA5
         YDEND=YDENC-PA6-PA7
C        XM3(IA,IB,IC)=XM3(IA,IB,IC)*HALF    !-WL- 12/11/2007
ccc      XNUM=XM3(IA,IB,IC)*XL3(IA,IB,IC)
ccc      CORA=CORA+XNUM/YDENA
ccc      CORB=CORB+XNUM/YDENB
ccc      CORC=CORC+XNUM/YDENC
ccc      CORD=CORD+XNUM/YDEND
C
C-WL- ADD THE FOLLOWING SIX LINES -WL-
         P1=XL3(IA,IB,IC)/YDEND
         P2=XM3(IA,IB,IC)
         DO 330 II=1,NC
            N=N+1  !-CIM-
            XXL3(N)=XXL3(N)+P1*TXs(II)
            XXM3(N)=XXM3(N)+P2*TXs(II)
 330     CONTINUE
 233  CONTINUE
 232  CONTINUE
 231  CONTINUE
      RETURN
      END
C*MODULE ROHFCC  *DECK L23IJK_LOOP_ABB_CIM  -CIM-
      SUBROUTINE L23IJK_LOOP_ABB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NC,XXM3,XXL3,TXs,NCU3s)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION XL3(NUA,NUB,NUB),XM3(NUA,NUB,NUB)
      DIMENSION FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1BB(NOB,NOB),X1AB(NOA,NOB),X2BB(NUB,NUB),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4BBB(NOB,NUB,NUB),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5BBB(NUB,NOB,NOB),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
      DIMENSION TXs(NC),XXM3(NCU3s),XXL3(NCU3s)
C
      PA1=-FHHA(I,I)-FHHB(J,J)-FHHB(K,K)
      PA3=X1AB(I,J)+X1AB(I,K)+X1BB(J,K)
C     EIJK=EHA(I)+EHB(J)+EHB(K)
C
      N=0  !-CIM-
      DO 231,IA=1,NUA
C        EIJKA=EIJK-EPA(IA)
         PA5A=-X3AA(IA,I)-X3AB(IA,J)-X3AB(IA,K)
         PA7A=-X5AAB(IA,I,J)-X5AAB(IA,I,K)
      DO 232,IB=1,NUB
C        EIJKAB=EIJKA-EPB(IB)
         PA2AB=FPPA(IA,IA)+FPPB(IB,IB)
         PA5AB=PA5A-X3BA(IB,I)-X3BB(IB,J)-X3BB(IB,K)
         PA6AB=X4AAB(I,IA,IB)+X4BBA(J,IB,IA)+X4BBA(K,IB,IA)
         PA7AB=PA7A-X5BBA(IB,J,I)-X5BBA(IB,K,I)-X5BBB(IB,J,K)
      DO 233,IC=IB+1,NUB
         PA2=PA2AB+FPPB(IC,IC)
         PA4=X2AB(IA,IB)+X2AB(IA,IC)+X2BB(IB,IC)
         PA5=PA5AB-X3BA(IC,I)-X3BB(IC,J)-X3BB(IC,K)
         PA6=PA6AB+X4AAB(I,IA,IC)
     *            +X4BBA(J,IC,IA)+X4BBB(J,IB,IC)
     *            +X4BBA(K,IC,IA)+X4BBB(K,IB,IC)
         PA7=PA7AB-X5BBA(IC,J,I)-X5BBA(IC,K,I)-X5BBB(IC,J,K)
C        YDENA=EIJKAB-EPB(IC)
         YDENB=-PA1-PA2
         YDENC=YDENB-PA3-PA4-PA5
         YDEND=YDENC-PA6-PA7
ccc      XNUM=XM3(IA,IB,IC)*XL3(IA,IB,IC)
ccc      CORA=CORA+XNUM/YDENA
ccc      CORB=CORB+XNUM/YDENB
ccc      CORC=CORC+XNUM/YDENC
ccc      CORD=CORD+XNUM/YDEND
C
C-WL- ADD THE FOLLOWING SIX LINES -WL-
         P1=XL3(IA,IB,IC)/YDEND
         P2=XM3(IA,IB,IC)
         DO 330 II=1,NC
            N=N+1  !-CIM
            XXL3(N)=XXL3(N)+P1*TXs(II)
            XXM3(N)=XXM3(N)+P2*TXs(II)
 330     CONTINUE
 233  CONTINUE
 232  CONTINUE
 231  CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK L23_LOOP_ECIM  -CIM-
      SUBROUTINE L23_LOOP_ECIM(NO,NU,NC,NCU3s,ICEN,XXL3,XXM3,ECIM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ECIM(NO),XXM3(NCU3s),XXL3(NCU3s),ICEN(NC)
      N=0  !-CIM-
      DO 331,IA=1,NU-2
      DO 332,IB=IA+1,NU-1
      DO 333,IC=IB+1,NU
      DO 334 KK=1,NC
         N=N+1  !-CIM-
         KKK=ICEN(KK)
         ECIM(KKK)=ECIM(KKK)+XXL3(N)*XXM3(N)
 334  CONTINUE
 333  CONTINUE
 332  CONTINUE
 331  CONTINUE
      RETURN
      END
C*MODULE ROHFCC  *DECK L23_LOOP_AAB_ECIM  -CIM-
      SUBROUTINE L23_LOOP_AAB_ECIM(NO,NUA,NUB,NC,NCU3s,ICEN,
     *           XXL3,XXM3,ECIM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ECIM(NO),XXM3(NCU3s),XXL3(NCU3s),ICEN(NC)
      N=0  !-CIM-
      DO 331,IA=1,NUA-1
      DO 332,IB=IA+1,NUA
      DO 333,IC=1,NUB
      DO 334 II=1,NC
         N=N+1  !-CIM-
         III=ICEN(II)
         ECIM(III)=ECIM(III)+XXM3(N)*XXL3(N)
 334  CONTINUE
 333  CONTINUE
 332  CONTINUE
 331  CONTINUE
      RETURN
      END
C*MODULE ROHFCC  *DECK L23_LOOP_ABB_ECIM  -CIM-
      SUBROUTINE L23_LOOP_ABB_ECIM(NO,NUA,NUB,NC,NCU3s,ICEN,
     *           XXL3,XXM3,ECIM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION ECIM(NO),XXM3(NCU3s),XXL3(NCU3s),ICEN(NC)
      N=0  !-CIM-
      DO 331,IA=1,NUA
      DO 332,IB=1,NUB
      DO 333,IC=IB+1,NUB
      DO 334 II=1,NC
         N=N+1  !-CIM
         III=ICEN(II)
         ECIM(III)=ECIM(III)+XXM3(N)*XXL3(N)
 334  CONTINUE
 333  CONTINUE
 332  CONTINUE
 331  CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK MOM23_LOOP_CIM
      SUBROUTINE MOM23_LOOP_CIM(NO,NU,T2,VE,XM3,TI,VM,
     *                      FHH,FPP,X1,X2,X3,X4,X5,EH,EP,
     *                      CORA,CORB,CORC,CORD,NC,ECIM,TX,XXM3,XXL3,
     *                      ICEN,TXs,NCU3s) !-CIM-
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(NU,NU,NU),XM3(NU,NU,NU),T2(NU,NU,NO,NO),
     *          VE(NU,NU,NU,NO),VM(NO,NU,NO,NO),EH(NO),EP(NU),
     *          FHH(NO,NO),FPP(NU,NU),X1(NO,NO),
     *          X2(NU,NU),X3(NU,NO),X4(NO,NU,NU),X5(NU,NO,NO)
      DIMENSION ECIM(NO),TX(NO,NO),XXM3(NCU3s),XXL3(NCU3s)  !-CIM-
      DIMENSION ICEN(NC),TXs(NC)
C
      DATA HALF/0.5D+0/
C
      NU2=NU*NU
      NU3=NU*NU*NU
      NO2=NO*NO
C
      DO 131 I=1, NO-1  !-CIM- NO-2 --> NO-1
       DO 132 J=I+1, NO  !-CIM- NO-1 --> NO
        CALL ZEROMA(XXL3,1,NCU3s)  !-CIM-
        CALL ZEROMA(XXM3,1,NCU3s)  !-CIM-
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
        DO 133 K=1, NO   !-CIM- J+1 --> 1
           IF (K.EQ.I) GOTO 133  !-CIM-
           IF (K.EQ.J) GOTO 133  !-CIM-
C
      KK=(I-1)*NO2+(J-1)*NO+K
      CALL ZEROMA(XM3,1,NU3)
C
      CALL CCMATMUL(T2(1,1,1,I),VM(1,1,J,K),XM3,NU2,NU,NO,0,1)
      CALL CCMATMUL(T2(1,1,1,J),VM(1,1,I,K),XM3,NU2,NU,NO,0,0)
      CALL CCMATMUL(T2(1,1,1,K),VM(1,1,J,I),XM3,NU2,NU,NO,0,0)
C
      CALL CCMATMUL(T2(1,1,J,I),VE(1,1,1,K),XM3,NU,NU2,NU,0,0)
      CALL CCMATMUL(T2(1,1,K,I),VE(1,1,1,J),XM3,NU,NU2,NU,0,1)
      CALL CCMATMUL(T2(1,1,J,K),VE(1,1,1,I),XM3,NU,NU2,NU,0,1)
C
      CALL VECMUL(XM3,NU3,HALF)
C
      CALL PERMFULL(NU,TI,XM3)
C
      CALL ZEROMA(TI,1,NU3)
      READ(NFT859,REC=KK) TI
C
C      call drukm3(nu,nu,nu,i,j,k,xm3)
C
      DO 191 KK2=1,NC
         KKK=ICEN(KK2)
         TXs(KK2)=TX(K,KKK)
 191  CONTINUE
C
      CALL L23IJK_LOOP_CIM(I,J,K,NO,NU,XM3,TI,
     *     FHH,FPP,X1,X2,X3,X4,X5,EH,EP,
     *     NC,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
      CALL L23_LOOP_ECIM(NO,NU,NC,NCU3s,ICEN,XXL3,XXM3,ECIM)  !-CIM-
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK MOM23_LOOP_AAB_CIMA !-CIM-
      SUBROUTINE MOM23_LOOP_AAB_CIMA(NOA,NUA,NOB,NUB,T2AA,T2BB,
     *             T2AB,VHPRAB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB,
     *             FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *             X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *             EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,
     *             NCA,ECIMA,TXA,XXM3,XXL3,ICENA,TXs,NCU3s)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(NUA,NUA,NUB),XM3(NUA,NUA,NUB),T2AA(NUA,NUA,NOA,NOA),
     *          T2BB(NOB,NUA,NUB,NOA),T2AB(NOA,NUA,NUB,NOB),
     *          VMAA(NUA,NOA,NOA,NOA),
     *          VMAB(NOA,NUB,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VHPRAB(NUA,NUB,NOA,NOB),
     *          VEAA(NUA,NUA,NUA,NOA),
     *          VEAB(NUA,NUA,NUB,NOB),VEBA(NUB,NUA,NUB,NOA),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1AA(NOA,NOA),X1AB(NOA,NOB),X2AA(NUA,NUA),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4AAA(NOA,NUA,NUA),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5AAA(NUA,NOA,NOA),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMA(NOA),TXA(NOA,NOA),TXs(NCA),    !-CIM- 24 MAR 10 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENA(NCA),  !-CIM- 24 MAR 10 ADD XXM3,XXL3 
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C
      NUA2=NUA*NUA
      NUAB=NUA*NUB
C
      IF (NOA .GE. NOB) THEN
              NO=NOA
      ELSE
              NO=NOB
      ENDIF
         NO2=NO*NO
C
      DO 131 J=1, NOA
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
       DO 132 K=1, NOB
        CALL ZEROMA(XXL3,1,NCU3s)
        CALL ZEROMA(XXM3,1,NCU3s)
        DO 133 I=1, NOA
         IF (I.EQ.J) GOTO 133
C
      CALL ZEROMA(XM3,1,NUA2*NUB)
      KK=(I-1)*NO2+(J-1)*NO+K
C
      CALL CCMATMUL(T2AA(1,1,1,I),VMAB(1,1,J,K),XM3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(T2AA(1,1,1,J),VMAB(1,1,I,K),XM3,NUA2,NUB,NOA,0,0)
C
C
      CALL CCMATMUL(VEAA(1,1,1,J),VHPRAB(1,1,I,K),XM3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEAA(1,1,1,I),VHPRAB(1,1,J,K),XM3,NUA2,NUB,NUA,0,1)
C
      CALL VECMUL(XM3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA(1,1,J,K),T2BB(1,1,1,I),XM3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA(1,1,I,K),T2BB(1,1,1,J),XM3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMAA(1,1,J,I),T2AB(1,1,1,K),XM3,NUA,NUAB,NOA,0,1)
C
C
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEBA(1,1,1,J),XM3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,J,K),VEBA(1,1,1,I),XM3,NUA,NUAB,NUB,0,1)
C
      CALL CCMATMUL(T2AA(1,1,J,I),VEAB(1,1,1,K),XM3,NUA,NUAB,NUA,0,0)
C
C
      CALL PERM_AAB(NUA,NUB,TI,XM3)
C
      CALL ZEROMA(TI,1,NUA*NUA*NUB)
      READ(NFT859,REC=KK) TI
C
C      call drukm3(nua,nua,nub,i,j,k,xm3)
C
      DO 191 II=1,NCA
         III=ICENA(II)
         TXs(II)=TXA(I,III)
 191  CONTINUE
C
      CALL L23IJK_LOOP_AAB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,TI,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCA,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
      CALL L23_LOOP_AAB_ECIM(NOA,NUA,NUB,NCA,NCU3s,ICENA,
     *     XXL3,XXM3,ECIMA)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK MOM23_LOOP_AAB_CIMB !-CIM-
      SUBROUTINE MOM23_LOOP_AAB_CIMB(NOA,NUA,NOB,NUB,T2AA,T2BB,
     *             T2AB,VHPRAB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB,
     *             FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *             X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *             EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,
     *             NCB,ECIMB,TXB,XXM3,XXL3,ICENB,TXs,NCU3s)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(NUA,NUA,NUB),XM3(NUA,NUA,NUB),T2AA(NUA,NUA,NOA,NOA),
     *          T2BB(NOB,NUA,NUB,NOA),T2AB(NOA,NUA,NUB,NOB),
     *          VMAA(NUA,NOA,NOA,NOA),
     *          VMAB(NOA,NUB,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VHPRAB(NUA,NUB,NOA,NOB),
     *          VEAA(NUA,NUA,NUA,NOA),
     *          VEAB(NUA,NUA,NUB,NOB),VEBA(NUB,NUA,NUB,NOA),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1AA(NOA,NOA),X1AB(NOA,NOB),X2AA(NUA,NUA),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4AAA(NOA,NUA,NUA),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5AAA(NUA,NOA,NOA),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMB(NOB),TXB(NOB,NOB),TXs(NCB),    !-CIM- 24 MAR 10 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENB(NCB),  !-CIM- 24 MAR 10 ADD XXM3,XXL3 
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C
      NUA2=NUA*NUA
      NUAB=NUA*NUB
C
      IF (NOA .GE. NOB) THEN
              NO=NOA
      ELSE
              NO=NOB
      ENDIF
         NO2=NO*NO
C
      DO 131 I=1, NOA-1
       DO 132 J=I+1, NOA
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
      CALL ZEROMA(XXL3,1,NCU3s)
      CALL ZEROMA(XXM3,1,NCU3s)
        DO 133 K=1, NOB
C
      CALL ZEROMA(XM3,1,NUA2*NUB)
      KK=(I-1)*NO2+(J-1)*NO+K
C
      CALL CCMATMUL(T2AA(1,1,1,I),VMAB(1,1,J,K),XM3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(T2AA(1,1,1,J),VMAB(1,1,I,K),XM3,NUA2,NUB,NOA,0,0)
C
C
      CALL CCMATMUL(VEAA(1,1,1,J),VHPRAB(1,1,I,K),XM3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEAA(1,1,1,I),VHPRAB(1,1,J,K),XM3,NUA2,NUB,NUA,0,1)
C
      CALL VECMUL(XM3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA(1,1,J,K),T2BB(1,1,1,I),XM3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA(1,1,I,K),T2BB(1,1,1,J),XM3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMAA(1,1,J,I),T2AB(1,1,1,K),XM3,NUA,NUAB,NOA,0,1)
C
C
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEBA(1,1,1,J),XM3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,J,K),VEBA(1,1,1,I),XM3,NUA,NUAB,NUB,0,1)
C
      CALL CCMATMUL(T2AA(1,1,J,I),VEAB(1,1,1,K),XM3,NUA,NUAB,NUA,0,0)
C
C
      CALL PERM_AAB(NUA,NUB,TI,XM3)
C
      CALL ZEROMA(TI,1,NUA*NUA*NUB)
      READ(NFT859,REC=KK) TI
C
C      call drukm3(nua,nua,nub,i,j,k,xm3)
C
      DO 191 KK2=1,NCB
         KKK=ICENB(KK2)
         TXs(KK2)=TXB(K,KKK)
 191  CONTINUE
C
      CALL L23IJK_LOOP_AAB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,TI,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCB,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
      CALL L23_LOOP_AAB_ECIM(NOB,NUA,NUB,NCB,NCU3s,ICENB,
     *     XXL3,XXM3,ECIMB)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK MOM23_LOOP_ABB_CIMA
      SUBROUTINE MOM23_LOOP_ABB_CIMA(NOA,NUA,NOB,NUB,T2AA,T2BB,
     *             T2AB,VHPRAB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB,
     *             FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *             X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *             EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,
     *             NCA,ECIMA,TXA,XXM3,XXL3,ICENA,TXs,NCU3s) 
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(NUA,NUB,NUB),XM3(NUA,NUB,NUB),T2AA(NOB,NUB,NUB,NOB),
     *          T2BB(NUA,NUB,NOB,NOA),VHPRAB(NUA,NUB,NOA,NOB),
     *          VMAA(NOB,NUB,NOB,NOB),T2AB(NUB,NUB,NOB,NOB),
     *          VMAB(NUB,NOA,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VEAA(NUB,NUB,NUB,NOB),
     *          VEAB(NUA,NUB,NUA,NOB),VEBA(NUA,NUB,NUB,NOA),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1BB(NOB,NOB),X1AB(NOA,NOB),X2BB(NUB,NUB),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4BBB(NOB,NUB,NUB),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5BBB(NUB,NOB,NOB),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMA(NOA),TXA(NOA,NOA),TXs(NCA),    !-CIM- 11/14/2007 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENA(NCA),  !-CIM- 12/10/2007 ADD XXM3,XXL3 
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C
      NUB2=NUB*NUB
      NUAB=NUA*NUB
C
      IF (NOA .GE. NOB) THEN
              NO=NOA
      ELSE
              NO=NOB
      ENDIF
         NO2=NO*NO
      DO 131 J=1, NOB-1
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
       DO 132 K=J+1, NOB
        CALL ZEROMA(XXL3,1,NCU3s)
        CALL ZEROMA(XXM3,1,NCU3s)
        DO 133 I=1, NOA
      CALL ZEROMA(XM3,1,NUA*NUB2)
      KK=(I-1)*NO2+(J-1)*NO+K
C
      CALL CCMATMUL(VMBA(1,1,I,J),T2AA(1,1,1,K),XM3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA(1,1,I,K),T2AA(1,1,1,J),XM3,NUA,NUB2,NOB,0,0)
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),VEAA(1,1,1,K),XM3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEAA(1,1,1,J),XM3,NUA,NUB2,NUB,0,1)
C
      CALL VECMUL(XM3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(VHPRAB(1,1,1,J),VMAB(1,1,I,K),XM3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(VHPRAB(1,1,1,K),VMAB(1,1,I,J),XM3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(T2BB(1,1,1,I),VMAA(1,1,J,K),XM3,NUAB,NUB,NOB,0,1)
C
      CALL CCMATMUL(VEAB(1,1,1,J),VHPRAB(1,1,I,K),XM3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB(1,1,1,K),VHPRAB(1,1,I,J),XM3,NUAB,NUB,NUA,0,1)
C
      CALL CCMATMUL(VEBA(1,1,1,I),T2AB(1,1,K,J),XM3,NUAB,NUB,NUB,0,0)
C
C
C      call vecmul(xm3,nu3,half)
C
      CALL PERM_ABB(NUA,NUB,TI,XM3)
C      call drukm3(nua,nub,nub,i,j,k,xm3)
      CALL ZEROMA(TI,1,NUA*NUB*NUB)
      READ(NFT859,REC=KK) TI
C
C      call drukm3(nua,nua,nub,i,j,k,xm3)
C
           DO 191 II=1,NCA
              III=ICENA(II)
              TXs(II)=TXA(I,III)
 191       CONTINUE
C
      CALL L23IJK_LOOP_ABB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,TI,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCA,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
        CALL L23_LOOP_ABB_ECIM(NOA,NUA,NUB,NCA,NCU3s,ICENA,
     *       XXL3,XXM3,ECIMA)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK MOM23_LOOP_ABB_CIMB
      SUBROUTINE MOM23_LOOP_ABB_CIMB(NOA,NUA,NOB,NUB,T2AA,T2BB,
     *             T2AB,VHPRAB,XM3,TI,VMAA,VMBA,VMAB,VEAA,VEBA,VEAB,
     *             FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *             X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *             EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,
     *             NCB,ECIMB,TXB,XXM3,XXL3,ICENB,TXs,NCU3s) 
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(NUA,NUB,NUB),XM3(NUA,NUB,NUB),T2AA(NOB,NUB,NUB,NOB),
     *          T2BB(NUA,NUB,NOB,NOA),VHPRAB(NUA,NUB,NOA,NOB),
     *          VMAA(NOB,NUB,NOB,NOB),T2AB(NUB,NUB,NOB,NOB),
     *          VMAB(NUB,NOA,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VEAA(NUB,NUB,NUB,NOB),
     *          VEAB(NUA,NUB,NUA,NOB),VEBA(NUA,NUB,NUB,NOA),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1BB(NOB,NOB),X1AB(NOA,NOB),X2BB(NUB,NUB),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4BBB(NOB,NUB,NUB),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5BBB(NUB,NOB,NOB),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMB(NOB),TXB(NOB,NOB),TXs(NCB),    !-CIM- 11/14/2007 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENB(NCB),  !-CIM- 12/10/2007 ADD XXM3,XXL3 
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C
      NUB2=NUB*NUB
      NUAB=NUA*NUB
C
      IF (NOA .GE. NOB) THEN
              NO=NOA
      ELSE
              NO=NOB
      ENDIF
         NO2=NO*NO
      DO 131 I=1, NOA
       DO 132 J=1, NOB
        CALL ZEROMA(XXL3,1,NCU3s)
        CALL ZEROMA(XXM3,1,NCU3s)
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
          DO 133 K=1, NOB
            IF (K.EQ.J) GOTO 133
C
      CALL ZEROMA(XM3,1,NUA*NUB2)
      KK=(I-1)*NO2+(J-1)*NO+K
C
      CALL CCMATMUL(VMBA(1,1,I,J),T2AA(1,1,1,K),XM3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA(1,1,I,K),T2AA(1,1,1,J),XM3,NUA,NUB2,NOB,0,0)
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),VEAA(1,1,1,K),XM3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEAA(1,1,1,J),XM3,NUA,NUB2,NUB,0,1)
C
      CALL VECMUL(XM3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(VHPRAB(1,1,1,J),VMAB(1,1,I,K),XM3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(VHPRAB(1,1,1,K),VMAB(1,1,I,J),XM3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(T2BB(1,1,1,I),VMAA(1,1,J,K),XM3,NUAB,NUB,NOB,0,1)
C
      CALL CCMATMUL(VEAB(1,1,1,J),VHPRAB(1,1,I,K),XM3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB(1,1,1,K),VHPRAB(1,1,I,J),XM3,NUAB,NUB,NUA,0,1)
C
      CALL CCMATMUL(VEBA(1,1,1,I),T2AB(1,1,K,J),XM3,NUAB,NUB,NUB,0,0)
C
C
C      call vecmul(xm3,nu3,half)
C
      CALL PERM_ABB(NUA,NUB,TI,XM3)
C      call drukm3(nua,nub,nub,i,j,k,xm3)
      CALL ZEROMA(TI,1,NUA*NUB*NUB)
      READ(NFT859,REC=KK) TI
C
C      call drukm3(nua,nua,nub,i,j,k,xm3)
C
           DO 191 KK2=1,NCB
              KKK=ICENB(KK2)
              TXs(KK2)=TXB(K,KKK)
 191       CONTINUE
C
      CALL L23IJK_LOOP_ABB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,TI,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCB,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
        CALL L23_LOOP_ABB_ECIM(NOB,NUA,NUB,NCB,NCU3s,ICENB,
     *       XXL3,XXM3,ECIMB)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOPW_CIM
      SUBROUTINE LAMB23_LOOPW_CIM(NO,NU,FHP,T1,
     *                        VHPR,T2,VE,XM3,TI,VM)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(1),XM3(NU,NU,NU),T2(NU,NU,NO,NO),
     *          VE(NU,NU,NU,NO),VM(NO,NU,NO,NO),FHP(NU,NO),
     *          VHPR(NU,NU,NO,NO),T1(NU,NO)
C
      DATA HALF/0.5D+0/
C
        NU2=NU*NU
        NU3=NU*NU*NU
        NO2=NO*NO
      DO 131 I=1, NO-1   !-CIM- NO-2 --> NO-1
       DO 132 J=I+1, NO  !-CIM- NO-1 --> NO
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
        DO 133 K=1, NO !-CIM- J+1 --> J
           IF (K.EQ.I) GOTO 133  !-CIM-
           IF (K.EQ.J) GOTO 133  !-CIM-
      CALL ZEROMA(XM3,1,NU3)
      KK=(I-1)*NO2+(J-1)*NO+K
C
      CALL CCMATMUL(VHPR(1,1,I,J),T1(1,K),XM3,NU2,NU,1,0,0)
      CALL CCMATMUL(VHPR(1,1,I,K),T1(1,J),XM3,NU2,NU,1,0,1)
      CALL CCMATMUL(VHPR(1,1,K,J),T1(1,I),XM3,NU2,NU,1,0,1)
C
      CALL CCMATMUL(T2(1,1,J,I),FHP(1,K),XM3,NU2,NU,1,0,0)
      CALL CCMATMUL(T2(1,1,K,I),FHP(1,J),XM3,NU2,NU,1,0,1)
      CALL CCMATMUL(T2(1,1,J,K),FHP(1,I),XM3,NU2,NU,1,0,1)
C
      CALL CCMATMUL(T2(1,1,1,I),VM(1,1,J,K),XM3,NU2,NU,NO,0,1)
      CALL CCMATMUL(T2(1,1,1,J),VM(1,1,I,K),XM3,NU2,NU,NO,0,0)
      CALL CCMATMUL(T2(1,1,1,K),VM(1,1,J,I),XM3,NU2,NU,NO,0,0)
C
      CALL CCMATMUL(T2(1,1,J,I),VE(1,1,1,K),XM3,NU,NU2,NU,0,0)
      CALL CCMATMUL(T2(1,1,K,I),VE(1,1,1,J),XM3,NU,NU2,NU,0,1)
      CALL CCMATMUL(T2(1,1,J,K),VE(1,1,1,I),XM3,NU,NU2,NU,0,1)
C
      CALL VECMUL(XM3,NU3,HALF)
C
      CALL PERMFULL(NU,TI,XM3)
C
      WRITE(NFT859,REC=KK) XM3
C
C      call drukm3(nu,nu,nu,i,j,k,xm3)
 133         CONTINUE
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_AABW_CIM
      SUBROUTINE LAMB23_LOOP_AABW_CIM(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *                            T1AA,T1BB,T2AA,T2BB,T2AB,VHPRAB,
     *                            VHPRAA,VHPRBB,XM3,TI,
     *                            VMAA,VMBA,VMAB,VEAA,VEBA,VEAB)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(1),XM3(NUA,NUA,NUB),T2AA(NUA,NUA,NOA,NOA),
     *          T2BB(NOB,NUA,NUB,NOA),T2AB(NOA,NUA,NUB,NOB),
     *          VMAA(NUA,NOA,NOA,NOA),FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          VMAB(NOA,NUB,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VHPRAB(NUA,NUB,NOA,NOB),VHPRAA(NUA,NUA,NOA,NOA),
     *          VEAA(NUA,NUA,NUA,NOA),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUA,NUB,NOB),VEBA(NUB,NUA,NUB,NOA),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB)
C
      DATA HALF/0.5D+0/
C
      NUA2=NUA*NUA
      NUAB=NUA*NUB
C
      IF (NOA .GE. NOB) THEN
              NO=NOA
      ELSE
              NO=NOB
      ENDIF
C
      NO2=NO*NO
C
      DO 131 I=1, NOA  !-CIM- NOA-1 --> NOA
       DO 132 J=1, NOA !-CIM- I+1 --> 1
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
        DO 133 K=1, NOB
      CALL ZEROMA(XM3,1,NUA2*NUB)
      KK=(I-1)*NO2+(J-1)*NO+K
C
C
      CALL CCMATMUL(T2AA(1,1,1,I),VMAB(1,1,J,K),XM3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(T2AA(1,1,1,J),VMAB(1,1,I,K),XM3,NUA2,NUB,NOA,0,0)
C
C
      CALL CCMATMUL(VEAA(1,1,1,J),VHPRAB(1,1,I,K),XM3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEAA(1,1,1,I),VHPRAB(1,1,J,K),XM3,NUA2,NUB,NUA,0,1)
C
      CALL CCMATMUL(T2AA(1,1,J,I),FHPBB(1,K),XM3,NUA2,NUB,1,0,0)
C
      CALL CCMATMUL(VHPRAA(1,1,I,J),T1BB(1,K),XM3,NUA2,NUB,1,0,0)
C
      CALL VECMUL(XM3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA(1,1,J,K),T2BB(1,1,1,I),XM3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA(1,1,I,K),T2BB(1,1,1,J),XM3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMAA(1,1,J,I),T2AB(1,1,1,K),XM3,NUA,NUAB,NOA,0,1)
C
C
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEBA(1,1,1,J),XM3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,J,K),VEBA(1,1,1,I),XM3,NUA,NUAB,NUB,0,1)
C
      CALL CCMATMUL(T2AA(1,1,J,I),VEAB(1,1,1,K),XM3,NUA,NUAB,NUA,0,0)
C
C
      CALL CCMATMUL(FHPAA(1,I),VHPRAB(1,1,J,K),XM3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(FHPAA(1,J),VHPRAB(1,1,I,K),XM3,NUA,NUAB,1,0,1)
C
      CALL CCMATMUL(T1AA(1,I),VHPRBB(1,1,J,K),XM3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(T1AA(1,J),VHPRBB(1,1,I,K),XM3,NUA,NUAB,1,0,1)
C
C
      CALL PERM_AAB(NUA,NUB,TI,XM3)
C
      WRITE(NFT859,REC=KK) XM3
C
C      call drukm3(nua,nua,nub,i,j,k,xm3)
 133         CONTINUE
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_ABBW_CIM
      SUBROUTINE LAMB23_LOOP_ABBW_CIM(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *                            T1AA,T1BB,T2AA,T2BB,T2AB,VHPRAB,
     *                            VHPRAA,VHPRBB,XM3,TI,
     *                            VMAA,VMBA,VMAB,VEAA,VEBA,VEAB)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(1),XM3(NUA,NUB,NUB),T2AA(NOB,NUB,NUB,NOB),
     *          T2BB(NUA,NUB,NOB,NOA),VHPRAB(NUA,NUB,NOA,NOB),
     *          VMAA(NOB,NUB,NOB,NOB),T2AB(NUB,NUB,NOB,NOB),
     *          VMAB(NUB,NOA,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VEAA(NUB,NUB,NUB,NOB),VHPRAA(NUB,NUB,NOB,NOB),
     *          FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUB,NUA,NOB),VEBA(NUA,NUB,NUB,NOA)
C
      DATA HALF/0.5D+0/
C
      NUB2=NUB*NUB
      NUAB=NUA*NUB
C
      IF (NOA .GE. NOB) THEN
              NO=NOA
      ELSE
              NO=NOB
      ENDIF
C
      NO2=NO*NO
C
      DO 131 I=1, NOA
       DO 132 J=1, NOB  !-CIM- NOB-1 --> NOB
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
        DO 133 K=1, NOB  !-CIM- J+1 --> 1
      CALL ZEROMA(XM3,1,NUA*NUB2)
      KK=(I-1)*NO2+(J-1)*NO+K
C
      CALL CCMATMUL(VMBA(1,1,I,J),T2AA(1,1,1,K),XM3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA(1,1,I,K),T2AA(1,1,1,J),XM3,NUA,NUB2,NOB,0,0)
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),VEAA(1,1,1,K),XM3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEAA(1,1,1,J),XM3,NUA,NUB2,NUB,0,1)
C
C
      CALL CCMATMUL(FHPAA(1,I),T2AB(1,1,K,J),XM3,NUA,NUB2,1,0,0)
C
      CALL CCMATMUL(T1AA(1,I),VHPRAA(1,1,J,K),XM3,NUA,NUB2,1,0,0)
C
      CALL VECMUL(XM3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(VHPRAB(1,1,1,J),VMAB(1,1,I,K),XM3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(VHPRAB(1,1,1,K),VMAB(1,1,I,J),XM3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(T2BB(1,1,1,I),VMAA(1,1,J,K),XM3,NUAB,NUB,NOB,0,1)
C
      CALL CCMATMUL(VEAB(1,1,1,J),VHPRAB(1,1,I,K),XM3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB(1,1,1,K),VHPRAB(1,1,I,J),XM3,NUAB,NUB,NUA,0,1)
C
      CALL CCMATMUL(VEBA(1,1,1,I),T2AB(1,1,K,J),XM3,NUAB,NUB,NUB,0,0)
C
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),FHPBB(1,K),XM3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),FHPBB(1,J),XM3,NUAB,NUB,1,0,1)
C
      CALL CCMATMUL(VHPRBB(1,1,I,J),T1BB(1,K),XM3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRBB(1,1,I,K),T1BB(1,J),XM3,NUAB,NUB,1,0,1)
C
C
      CALL PERM_ABB(NUA,NUB,TI,XM3)
C
      WRITE(NFT859,REC=KK) XM3
C
C      call drukm3(nua,nub,nub,i,j,k,xm3)
 133         CONTINUE
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_AAB_IO_CIMA -CIM- 1 APR 10
      SUBROUTINE LAMB23_LOOP_AAB_IO_CIMA(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *     VMBA21,VMAB21,VEAA,VEBA,VEAB,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *     ICENA,TXs,NCU3s)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(1),XM3(NUA,NUA,NUB),XL3(NUA,NUA,NUB),
     *          XL2AA(NUA,NUA,NOA,NOA),T2AA(NUA,NUA,NOA,NOA),
     *          T2BB(NOB,NUA,NUB,NOA),T2AB(NOA,NUA,NUB,NOB),
     *          XL2BB(NOB,NUA,NUB,NOA),XL2AB(NOA,NUA,NUB,NOB),
     *          VMAA(NUA,NOA,NOA,NOA),FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          VMAB(NOA,NUB,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VHPRAB(NUA,NUB,NOA,NOB),VHPRAA(NUA,NUA,NOA,NOA),
     *          VEAA(NUA,NUA,NUA,NOA),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUA,NUB,NOB),VEBA(NUB,NUA,NUB,NOA),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB),
     *          T2(NUA,NUB,NOA,NOB),
     *          VMBB(NUA,NOA,NOA,NOA),
     *          VMAB21(NOA,NUB,NOA,NOB),VMBA21(NUA,NOB,NOA,NOB),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1AA(NOA,NOA),X1AB(NOA,NOB),X2AA(NUA,NUA),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4AAA(NOA,NUA,NUA),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5AAA(NUA,NOA,NOA),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMA(NOA),TXA(NOA,NOA),TXs(NCA),          !-WL- 11/14/2007 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENA(NCA), !-WL- 12/10/2007 ADD XXM3,XXL3 
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C
      NUA2=NUA*NUA
      NUAB=NUA*NUB
C
      DO 131 J=1, NOA    !-CIM- 1 APR 10
       DO 132 K=1, NOB   !-CIM- 1 APR 10
        CALL ZEROMA(XXL3,1,NCU3s)  !-CIM- 1 APR 10
        CALL ZEROMA(XXM3,1,NCU3s)  !-CIM- 1 APR 10
        DO 133 I=1, NOA  !-CIM- 1 APR 10
         IF (I.EQ.J) GOTO 133  !-CIM- 1 APR 10
C
      CALL ZEROMA(XM3,1,NUA2*NUB)
      CALL ZEROMA(XL3,1,NUA2*NUB)
C
Ccccccccccccccccccccccccc
C
      CALL CCMATMUL(XL2AA(1,1,1,I),VMAB(1,1,J,K),XL3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(XL2AA(1,1,1,J),VMAB(1,1,I,K),XL3,NUA2,NUB,NOA,0,0)
C
C
       CALL RDTAB(NUA,NUA,NUA,NOA,VEAA,19,NFT892)
      CALL CCMATMUL(VEAA(1,1,1,J),VHPRAB(1,1,I,K),XL3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEAA(1,1,1,I),VHPRAB(1,1,J,K),XL3,NUA2,NUB,NUA,0,1)
C
      CALL CCMATMUL(XL2AA(1,1,J,I),FHPBB(1,K),XL3,NUA2,NUB,1,0,0)
C
      CALL CCMATMUL(VHPRAA(1,1,I,J),T1BB(1,K),XL3,NUA2,NUB,1,0,0)
C
      CALL VECMUL(XL3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA(1,1,J,K),XL2BB(1,1,1,I),XL3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA(1,1,I,K),XL2BB(1,1,1,J),XL3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMAA(1,1,J,I),XL2AB(1,1,1,K),XL3,NUA,NUAB,NOA,0,1)
C
C
       CALL RDTAB(NUB,NUA,NUB,NOA,VEBA,16,NFT892)
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEBA(1,1,1,J),XL3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,J,K),VEBA(1,1,1,I),XL3,NUA,NUAB,NUB,0,1)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,13,NFT892)
      CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB,23)
      CALL CCMATMUL(XL2AA(1,1,J,I),VEAB(1,1,1,K),XL3,NUA,NUAB,NUA,0,0)
C
C
      CALL CCMATMUL(FHPAA(1,I),VHPRAB(1,1,J,K),XL3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(FHPAA(1,J),VHPRAB(1,1,I,K),XL3,NUA,NUAB,1,0,1)
C
      CALL CCMATMUL(T1AA(1,I),VHPRBB(1,1,J,K),XL3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(T1AA(1,J),VHPRBB(1,1,I,K),XL3,NUA,NUAB,1,0,1)
C
Ccccccccc M3 cccccccccccc
C
      CALL CCMATMUL(T2AA(1,1,1,I),VMAB21(1,1,J,K),XM3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(T2AA(1,1,1,J),VMAB21(1,1,I,K),XM3,NUA2,NUB,NOA,0,0)
C
C
         CALL RDTAB(NUA,NUA,NUA,NOA,VEAA,15,NFT892)
      CALL CCMATMUL(VEAA(1,1,1,J),T2(1,1,I,K),XM3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEAA(1,1,1,I),T2(1,1,J,K),XM3,NUA2,NUB,NUA,0,1)
C
      CALL VECMUL(XM3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA21(1,1,J,K),T2BB(1,1,1,I),XM3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA21(1,1,I,K),T2BB(1,1,1,J),XM3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMBB(1,1,J,I),T2AB(1,1,1,K),XM3,NUA,NUAB,NOA,0,1)
C
C
       CALL RDTAB(NUB,NUA,NUB,NOA,VEBA,18,NFT892)
      CALL CCMATMUL(T2(1,1,I,K),VEBA(1,1,1,J),XM3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(T2(1,1,J,K),VEBA(1,1,1,I),XM3,NUA,NUAB,NUB,0,1)
C
       CALL RDTAB(NUA,NUA,NUB,NOB,VEAB,17,NFT892)
      CALL CCMATMUL(T2AA(1,1,J,I),VEAB(1,1,1,K),XM3,NUA,NUAB,NUA,0,0)
C
C
      CALL PERM_AAB(NUA,NUB,TI,XM3)
      CALL PERM_AAB(NUA,NUB,TI,XL3)
C
C        write(6,*) 'M3'
C      call drukm3(nua,nua,nub,i,j,k,xm3)
C        write(6,*) 'L3'
C      call drukm3(nua,nua,nub,i,j,k,xl3)
C
      DO 191 II=1,NCA
         III=ICENA(II)
         TXs(II)=TXA(I,III)
 191  CONTINUE
C
      CALL L23IJK_LOOP_AAB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCA,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
      CALL L23_LOOP_AAB_ECIM(NOA,NUA,NUB,NCA,NCU3s,ICENA,
     *     XXL3,XXM3,ECIMA)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_AAB_IO_CIMB -CIM- 1 APR 10
      SUBROUTINE LAMB23_LOOP_AAB_IO_CIMB(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *     VMBA21,VMAB21,VEAA,VEBA,VEAB,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *     ICENB,TXs,NCU3s)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(1),XM3(NUA,NUA,NUB),XL3(NUA,NUA,NUB),
     *          XL2AA(NUA,NUA,NOA,NOA),T2AA(NUA,NUA,NOA,NOA),
     *          T2BB(NOB,NUA,NUB,NOA),T2AB(NOA,NUA,NUB,NOB),
     *          XL2BB(NOB,NUA,NUB,NOA),XL2AB(NOA,NUA,NUB,NOB),
     *          VMAA(NUA,NOA,NOA,NOA),FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          VMAB(NOA,NUB,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VHPRAB(NUA,NUB,NOA,NOB),VHPRAA(NUA,NUA,NOA,NOA),
     *          VEAA(NUA,NUA,NUA,NOA),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUA,NUB,NOB),VEBA(NUB,NUA,NUB,NOA),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB),
     *          T2(NUA,NUB,NOA,NOB),
     *          VMBB(NUA,NOA,NOA,NOA),
     *          VMAB21(NOA,NUB,NOA,NOB),VMBA21(NUA,NOB,NOA,NOB),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1AA(NOA,NOA),X1AB(NOA,NOB),X2AA(NUA,NUA),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4AAA(NOA,NUA,NUA),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5AAA(NUA,NOA,NOA),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMB(NOB),TXB(NOB,NOB),TXs(NCB),    !-WL- 11/14/2007 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENB(NCB),
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C
      NUA2=NUA*NUA
      NUAB=NUA*NUB
C
      DO 131 I=1, NOA-1  !-CIM- 1 APR 10
       DO 132 J=I+1, NOA !-CIM- 1 APR 10
        CALL ZEROMA(XXL3,1,NCU3s)  !-CIM- 1 APR 10
        CALL ZEROMA(XXM3,1,NCU3s)  !-CIM- 1 APR 10
        DO 133 K=1, NOB  !-CIM- 1 APR 10
C
      CALL ZEROMA(XM3,1,NUA2*NUB)
      CALL ZEROMA(XL3,1,NUA2*NUB)
C
Ccccccccccccccccccccccccc
C
      CALL CCMATMUL(XL2AA(1,1,1,I),VMAB(1,1,J,K),XL3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(XL2AA(1,1,1,J),VMAB(1,1,I,K),XL3,NUA2,NUB,NOA,0,0)
C
C
       CALL RDTAB(NUA,NUA,NUA,NOA,VEAA,19,NFT892)
      CALL CCMATMUL(VEAA(1,1,1,J),VHPRAB(1,1,I,K),XL3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEAA(1,1,1,I),VHPRAB(1,1,J,K),XL3,NUA2,NUB,NUA,0,1)
C
      CALL CCMATMUL(XL2AA(1,1,J,I),FHPBB(1,K),XL3,NUA2,NUB,1,0,0)
C
      CALL CCMATMUL(VHPRAA(1,1,I,J),T1BB(1,K),XL3,NUA2,NUB,1,0,0)
C
      CALL VECMUL(XL3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA(1,1,J,K),XL2BB(1,1,1,I),XL3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA(1,1,I,K),XL2BB(1,1,1,J),XL3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMAA(1,1,J,I),XL2AB(1,1,1,K),XL3,NUA,NUAB,NOA,0,1)
C
C
       CALL RDTAB(NUB,NUA,NUB,NOA,VEBA,16,NFT892)
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEBA(1,1,1,J),XL3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,J,K),VEBA(1,1,1,I),XL3,NUA,NUAB,NUB,0,1)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,13,NFT892)
      CALL INSITU(NUA,NUB,NUA,NOB,TI,VEAB,23)
      CALL CCMATMUL(XL2AA(1,1,J,I),VEAB(1,1,1,K),XL3,NUA,NUAB,NUA,0,0)
C
C
      CALL CCMATMUL(FHPAA(1,I),VHPRAB(1,1,J,K),XL3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(FHPAA(1,J),VHPRAB(1,1,I,K),XL3,NUA,NUAB,1,0,1)
C
      CALL CCMATMUL(T1AA(1,I),VHPRBB(1,1,J,K),XL3,NUA,NUAB,1,0,0)
      CALL CCMATMUL(T1AA(1,J),VHPRBB(1,1,I,K),XL3,NUA,NUAB,1,0,1)
C
Ccccccccc M3 cccccccccccc
C
      CALL CCMATMUL(T2AA(1,1,1,I),VMAB21(1,1,J,K),XM3,NUA2,NUB,NOA,0,1)
      CALL CCMATMUL(T2AA(1,1,1,J),VMAB21(1,1,I,K),XM3,NUA2,NUB,NOA,0,0)
C
C
         CALL RDTAB(NUA,NUA,NUA,NOA,VEAA,15,NFT892)
      CALL CCMATMUL(VEAA(1,1,1,J),T2(1,1,I,K),XM3,NUA2,NUB,NUA,0,0)
      CALL CCMATMUL(VEAA(1,1,1,I),T2(1,1,J,K),XM3,NUA2,NUB,NUA,0,1)
C
      CALL VECMUL(XM3,NUA2*NUB,HALF)
C
      CALL CCMATMUL(VMBA21(1,1,J,K),T2BB(1,1,1,I),XM3,NUA,NUAB,NOB,0,0)
      CALL CCMATMUL(VMBA21(1,1,I,K),T2BB(1,1,1,J),XM3,NUA,NUAB,NOB,0,1)
C
      CALL CCMATMUL(VMBB(1,1,J,I),T2AB(1,1,1,K),XM3,NUA,NUAB,NOA,0,1)
C
C
       CALL RDTAB(NUB,NUA,NUB,NOA,VEBA,18,NFT892)
      CALL CCMATMUL(T2(1,1,I,K),VEBA(1,1,1,J),XM3,NUA,NUAB,NUB,0,0)
      CALL CCMATMUL(T2(1,1,J,K),VEBA(1,1,1,I),XM3,NUA,NUAB,NUB,0,1)
C
       CALL RDTAB(NUA,NUA,NUB,NOB,VEAB,17,NFT892)
      CALL CCMATMUL(T2AA(1,1,J,I),VEAB(1,1,1,K),XM3,NUA,NUAB,NUA,0,0)
C
C
      CALL PERM_AAB(NUA,NUB,TI,XM3)
      CALL PERM_AAB(NUA,NUB,TI,XL3)
C
C        write(6,*) 'M3'
C      call drukm3(nua,nua,nub,i,j,k,xm3)
C        write(6,*) 'L3'
C      call drukm3(nua,nua,nub,i,j,k,xl3)
C
      DO 191 KK=1,NCB
         KKK=ICENB(KK)
         TXs(KK)=TXB(K,KKK)
 191  CONTINUE
C
      CALL L23IJK_LOOP_AAB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1AA,X1AB,X2AA,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4AAA,X4AAB,X4BBA,X5AAA,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCB,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
      CALL L23_LOOP_AAB_ECIM(NOB,NUA,NUB,NCB,NCU3s,ICENB,
     *     XXL3,XXM3,ECIMB)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_ABB_IO_CIMA -CIM- 1 APR 10
      SUBROUTINE LAMB23_LOOP_ABB_IO_CIMA(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *     VMBA21,VMAB21,VEAA,VEBA,VEAB,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCA,ECIMA,TXA,XXM3,XXL3,
     *     ICENA,TXs,NCU3s)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(1),XL3(NUA,NUB,NUB),XM3(NUA,NUB,NUB),
     *          XL2AA(NOB,NUB,NUB,NOB),T2AA(NOB,NUB,NUB,NOB),
     *          T2BB(NUA,NUB,NOB,NOA),T2(NUA,NUB,NOA,NOB),
     *          VMBB(NOB,NUB,NOB,NOB),T2AB(NUB,NUB,NOB,NOB),
     *          VMAB21(NUB,NOA,NOA,NOB),VMBA21(NUA,NOB,NOA,NOB),
     *          XL2BB(NUA,NUB,NOB,NOA),VHPRAB(NUA,NUB,NOA,NOB),
     *          VMAA(NOB,NUB,NOB,NOB),XL2AB(NUB,NUB,NOB,NOB),
     *          VMAB(NUB,NOA,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VEAA(NUB,NUB,NUB,NOB),VHPRAA(NUB,NUB,NOB,NOB),
     *          FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUB,NUA,NOB),VEBA(NUA,NUB,NUB,NOA),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1BB(NOB,NOB),X1AB(NOA,NOB),X2BB(NUB,NUB),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4BBB(NOB,NUB,NUB),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5BBB(NUB,NOB,NOB),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMA(NOA),TXA(NOA,NOA),TXs(NCA),   !-WL- 11/14/2007 ADD ECIMA,ECIMB
     *          XXM3(NCU3s),XXL3(NCU3s),ICENA(NCA),
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C
      NUB2=NUB*NUB
      NUAB=NUA*NUB
C
      DO 131 J=1, NOB-1
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
       DO 132 K=J+1, NOB
        CALL ZEROMA(XXL3,1,NCU3s)
        CALL ZEROMA(XXM3,1,NCU3s)
        DO 133 I=1, NOA
C
      CALL ZEROMA(XL3,1,NUA*NUB2)
      CALL ZEROMA(XM3,1,NUA*NUB2)
C
      CALL CCMATMUL(VMBA(1,1,I,J),XL2AA(1,1,1,K),XL3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA(1,1,I,K),XL2AA(1,1,1,J),XL3,NUA,NUB2,NOB,0,0)
C
      CALL RDTAB(NUB,NUB,NUB,NOB,VEAA,19,NFT892)
      CALL CCMATMUL(VHPRAB(1,1,I,J),VEAA(1,1,1,K),XL3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEAA(1,1,1,J),XL3,NUA,NUB2,NUB,0,1)
C
      CALL CCMATMUL(FHPAA(1,I),XL2AB(1,1,K,J),XL3,NUA,NUB2,1,0,0)
C
      CALL CCMATMUL(T1AA(1,I),VHPRAA(1,1,J,K),XL3,NUA,NUB2,1,0,0)
C
      CALL VECMUL(XL3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(VHPRAB(1,1,1,J),VMAB(1,1,I,K),XL3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(VHPRAB(1,1,1,K),VMAB(1,1,I,J),XL3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(XL2BB(1,1,1,I),VMAA(1,1,J,K),XL3,NUAB,NUB,NOB,0,1)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,13,NFT892)
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13)
      CALL CCMATMUL(VEAB(1,1,1,J),VHPRAB(1,1,I,K),XL3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB(1,1,1,K),VHPRAB(1,1,I,J),XL3,NUAB,NUB,NUA,0,1)
C
       CALL RDTAB(NUA,NUB,NUB,NOA,VEBA,16,NFT892)
      CALL CCMATMUL(VEBA(1,1,1,I),XL2AB(1,1,K,J),XL3,NUAB,NUB,NUB,0,0)
C
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),FHPBB(1,K),XL3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),FHPBB(1,J),XL3,NUAB,NUB,1,0,1)
C
      CALL CCMATMUL(VHPRBB(1,1,I,J),T1BB(1,K),XL3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRBB(1,1,I,K),T1BB(1,J),XL3,NUAB,NUB,1,0,1)
C
C
      CALL PERM_ABB(NUA,NUB,TI,XL3)
C
C     -------M3-------------
C
      CALL CCMATMUL(VMBA21(1,1,I,J),T2AA(1,1,1,K),XM3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA21(1,1,I,K),T2AA(1,1,1,J),XM3,NUA,NUB2,NOB,0,0)
C
       CALL RDTAB(NUB,NUB,NUB,NOB,VEAA,15,NFT892)
      CALL CCMATMUL(T2(1,1,I,J),VEAA(1,1,1,K),XM3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(T2(1,1,I,K),VEAA(1,1,1,J),XM3,NUA,NUB2,NUB,0,1)
C
      CALL VECMUL(XM3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(T2(1,1,1,J),VMAB21(1,1,I,K),XM3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(T2(1,1,1,K),VMAB21(1,1,I,J),XM3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(T2BB(1,1,1,I),VMBB(1,1,J,K),XM3,NUAB,NUB,NOB,0,1)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,17,NFT892)
      CALL CCMATMUL(VEAB(1,1,1,J),T2(1,1,I,K),XM3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB(1,1,1,K),T2(1,1,I,J),XM3,NUAB,NUB,NUA,0,1)
C
       CALL RDTAB(NUA,NUB,NUB,NOA,VEBA,18,NFT892)
      CALL CCMATMUL(VEBA(1,1,1,I),T2AB(1,1,K,J),XM3,NUAB,NUB,NUB,0,0)
C
      CALL PERM_ABB(NUA,NUB,TI,XM3)
C
C        write(6,*) 'L3'
C      call drukm3(nua,nub,nub,i,j,k,xl3)
C        write(6,*) 'M3'
C      call drukm3(nua,nub,nub,i,j,k,xm3)
C
           DO 191 II=1,NCA
              III=ICENA(II)
              TXs(II)=TXA(I,III)
 191       CONTINUE
C
      CALL L23IJK_LOOP_ABB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCA,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
        CALL L23_LOOP_ABB_ECIM(NOA,NUA,NUB,NCA,NCU3s,ICENA,
     *       XXL3,XXM3,ECIMA)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C*MODULE ROHFCC  *DECK LAMB23_LOOP_ABB_IO_CIMB -CIM- 1 APR 10
      SUBROUTINE LAMB23_LOOP_ABB_IO_CIMB(NOA,NUA,NOB,NUB,FHPAA,FHPBB,
     *     T1AA,T1BB,T2,T2AA,T2BB,T2AB,XL2AA,XL2BB,XL2AB,VHPRAB,
     *     VHPRAA,VHPRBB,XM3,XL3,TI,VMAA,VMBB,VMBA,VMAB,
     *     VMBA21,VMAB21,VEAA,VEBA,VEAB,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,CORA,CORB,CORC,CORD,NCB,ECIMB,TXB,XXM3,XXL3,
     *     ICENB,TXs,NCU3s)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /CCOPIO/ NFT820,NFT821,NFT822,NFT823,NFT825,NFT826,NFT827,
     *                NFT828,NFT829,NFT830,NFT831,NFT832,NFT833,NFT834,
     *                NFT835,NFT836,NFT837,NFT838,NFT839,NFT843,NFT848,
     *                NFT858,NFT859,NFT891,NFT892,NFT899
C
      DIMENSION TI(1),XL3(NUA,NUB,NUB),XM3(NUA,NUB,NUB),
     *          XL2AA(NOB,NUB,NUB,NOB),T2AA(NOB,NUB,NUB,NOB),
     *          T2BB(NUA,NUB,NOB,NOA),T2(NUA,NUB,NOA,NOB),
     *          VMBB(NOB,NUB,NOB,NOB),T2AB(NUB,NUB,NOB,NOB),
     *          VMAB21(NUB,NOA,NOA,NOB),VMBA21(NUA,NOB,NOA,NOB),
     *          XL2BB(NUA,NUB,NOB,NOA),VHPRAB(NUA,NUB,NOA,NOB),
     *          VMAA(NOB,NUB,NOB,NOB),XL2AB(NUB,NUB,NOB,NOB),
     *          VMAB(NUB,NOA,NOA,NOB),VMBA(NUA,NOB,NOA,NOB),
     *          VEAA(NUB,NUB,NUB,NOB),VHPRAA(NUB,NUB,NOB,NOB),
     *          FHPAA(NUA,NOA),FHPBB(NUB,NOB),
     *          T1AA(NUA,NOA),T1BB(NUB,NOB),VHPRBB(NUA,NUB,NOA,NOB),
     *          VEAB(NUA,NUB,NUA,NOB),VEBA(NUA,NUB,NUB,NOA),
     *          FHHA(NOA,NOA),FHHB(NOB,NOB),FPPA(NUA,NUA),FPPB(NUB,NUB),
     *          X1BB(NOB,NOB),X1AB(NOA,NOB),X2BB(NUB,NUB),X2AB(NUA,NUB),
     *          X3AA(NUA,NOA),X3AB(NUA,NOB),X3BA(NUB,NOA),X3BB(NUB,NOB),
     *         X4BBB(NOB,NUB,NUB),X4AAB(NOA,NUA,NUB),X4BBA(NOB,NUB,NUA),
     *         X5BBB(NUB,NOB,NOB),X5AAB(NUA,NOA,NOB),X5BBA(NUB,NOB,NOA),
     *          ECIMB(NOB),TXB(NOB,NOB),TXs(NCB),   !-WL- 11/14/2007 ADD ECIMA,ECIMB
     *          XXL3(NCU3s),XXM3(NCU3s),ICENB(NCB),
     *          EHA(NOA),EHB(NOB),EPA(NUA),EPB(NOA)
C
      DATA HALF/0.5D+0/
C
      NUB2=NUB*NUB
      NUAB=NUA*NUB
C
C        write(6,*) 'main loop over triples ij',i,j
C      call flshbf(6)
      DO 131 I=1, NOA   !-WL- 12/08/2007 MOVE I=1, NOA HERE
        DO 132 J=1, NOB
      CALL ZEROMA(XXL3,1,NCU3s)
      CALL ZEROMA(XXM3,1,NCU3s)
         DO 133 K=1, NOB
            IF (K.EQ.J) GOTO 133
C
      CALL ZEROMA(XL3,1,NUA*NUB2)
      CALL ZEROMA(XM3,1,NUA*NUB2)
C
      CALL CCMATMUL(VMBA(1,1,I,J),XL2AA(1,1,1,K),XL3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA(1,1,I,K),XL2AA(1,1,1,J),XL3,NUA,NUB2,NOB,0,0)
C
      CALL RDTAB(NUB,NUB,NUB,NOB,VEAA,19,NFT892)
      CALL CCMATMUL(VHPRAB(1,1,I,J),VEAA(1,1,1,K),XL3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),VEAA(1,1,1,J),XL3,NUA,NUB2,NUB,0,1)
C
      CALL CCMATMUL(FHPAA(1,I),XL2AB(1,1,K,J),XL3,NUA,NUB2,1,0,0)
C
      CALL CCMATMUL(T1AA(1,I),VHPRAA(1,1,J,K),XL3,NUA,NUB2,1,0,0)
C
      CALL VECMUL(XL3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(VHPRAB(1,1,1,J),VMAB(1,1,I,K),XL3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(VHPRAB(1,1,1,K),VMAB(1,1,I,J),XL3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(XL2BB(1,1,1,I),VMAA(1,1,J,K),XL3,NUAB,NUB,NOB,0,1)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,13,NFT892)
      CALL TRANMD(VEAB,NUA,NUB,NUA,NOB,13)
      CALL CCMATMUL(VEAB(1,1,1,J),VHPRAB(1,1,I,K),XL3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB(1,1,1,K),VHPRAB(1,1,I,J),XL3,NUAB,NUB,NUA,0,1)
C
       CALL RDTAB(NUA,NUB,NUB,NOA,VEBA,16,NFT892)
      CALL CCMATMUL(VEBA(1,1,1,I),XL2AB(1,1,K,J),XL3,NUAB,NUB,NUB,0,0)
C
C
      CALL CCMATMUL(VHPRAB(1,1,I,J),FHPBB(1,K),XL3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRAB(1,1,I,K),FHPBB(1,J),XL3,NUAB,NUB,1,0,1)
C
      CALL CCMATMUL(VHPRBB(1,1,I,J),T1BB(1,K),XL3,NUAB,NUB,1,0,0)
      CALL CCMATMUL(VHPRBB(1,1,I,K),T1BB(1,J),XL3,NUAB,NUB,1,0,1)
C
C
      CALL PERM_ABB(NUA,NUB,TI,XL3)
C
C     -------M3-------------
C
      CALL CCMATMUL(VMBA21(1,1,I,J),T2AA(1,1,1,K),XM3,NUA,NUB2,NOB,0,1)
      CALL CCMATMUL(VMBA21(1,1,I,K),T2AA(1,1,1,J),XM3,NUA,NUB2,NOB,0,0)
C
       CALL RDTAB(NUB,NUB,NUB,NOB,VEAA,15,NFT892)
      CALL CCMATMUL(T2(1,1,I,J),VEAA(1,1,1,K),XM3,NUA,NUB2,NUB,0,0)
      CALL CCMATMUL(T2(1,1,I,K),VEAA(1,1,1,J),XM3,NUA,NUB2,NUB,0,1)
C
      CALL VECMUL(XM3,NUA*NUB2,HALF)
C
      CALL CCMATMUL(T2(1,1,1,J),VMAB21(1,1,I,K),XM3,NUAB,NUB,NOA,0,1)
      CALL CCMATMUL(T2(1,1,1,K),VMAB21(1,1,I,J),XM3,NUAB,NUB,NOA,0,0)
C
      CALL CCMATMUL(T2BB(1,1,1,I),VMBB(1,1,J,K),XM3,NUAB,NUB,NOB,0,1)
C
       CALL RDTAB(NUA,NUB,NUA,NOB,VEAB,17,NFT892)
      CALL CCMATMUL(VEAB(1,1,1,J),T2(1,1,I,K),XM3,NUAB,NUB,NUA,0,0)
      CALL CCMATMUL(VEAB(1,1,1,K),T2(1,1,I,J),XM3,NUAB,NUB,NUA,0,1)
C
       CALL RDTAB(NUA,NUB,NUB,NOA,VEBA,18,NFT892)
      CALL CCMATMUL(VEBA(1,1,1,I),T2AB(1,1,K,J),XM3,NUAB,NUB,NUB,0,0)
C
      CALL PERM_ABB(NUA,NUB,TI,XM3)
C
C        write(6,*) 'L3'
C      call drukm3(nua,nub,nub,i,j,k,xl3)
C        write(6,*) 'M3'
C      call drukm3(nua,nub,nub,i,j,k,xm3)
C
           DO 191 KK=1,NCB
              KKK=ICENB(KK)
              TXs(KK)=TXB(K,KKK)
 191       CONTINUE
C
      CALL L23IJK_LOOP_ABB_CIM(I,J,K,NOA,NUA,NOB,NUB,XM3,XL3,
     *     FHHA,FHHB,FPPA,FPPB,X1BB,X1AB,X2BB,X2AB,X3AA,X3AB,
     *     X3BA,X3BB,X4BBB,X4AAB,X4BBA,X5BBB,X5AAB,X5BBA,
     *     EHA,EHB,EPA,EPB,NCB,XXM3,XXL3,TXs,NCU3s)
C
 133         CONTINUE
C
        CALL L23_LOOP_ABB_ECIM(NOB,NUA,NUB,NCB,NCU3s,ICENB,
     *       XXL3,XXM3,ECIMB)
C
 132         CONTINUE
 131         CONTINUE
      RETURN
      END
C
C 19 MAR 10 - WL,PP - BACKUP SOME SUBROUTINES WITH _OLD HERE
C*MODULE ROHFCC  *DECK LAMB23_LOOP_OLD
C*MODULE ROHFCC  *DECK LAMB23_LOOP_AAB_OLD
C*MODULE ROHFCC  *DECK LAMB23_LOOP_ABB_OLD
C
C *** Based on trans.src 15 OCT 09 ***
C*MODULE TRANS   *DECK TRFMCX_CIM
      SUBROUTINE TRFMCX_CIM(NPRINT,ICORBS,IORBS,IORB,DOFOCK,DOEXCH,
     *                  DDITRF,DOOOOO,DOVOOO,DOVVOO,DOVOVO,
     *                  DOVVVO,DOVVVV,DOCORE)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION METHOD
      DOUBLE PRECISION LMOEDA
      DATA LMOEDA /8HLMOEDA  /
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXGSH=30, MXG2=MXGSH*MXGSH,
     *           MXATM=2000, MXRT=100, NMO=500, MXAO=8192,
     *           MXNORO=250)
C
      LOGICAL DOFOCK,DOEXCH,SOME,DEBUG,DEBG1,PACK2E,
     *        MASWRK,DSKWRK,GOPARR,DLB,DIRTRF,CANONC,FCORE,FORS,
     *        NOCI,EKT,LINSER,ABEL,ABELPT,MOIDON,EDCOMP,DIPDCM,
     *        DEPRNT,QADDCM,ZDO,POLDCM,POLANG,POLAPP,KMIDPT,POLDYN,
     *        NOTRF,DDITRF,DOOOOO,DOVOOO,DOVVOO,DOVOVO,DOVVVO,DOVVVV,
     &        DOCORE
C
      COMMON /CIFILS/ NFT11,NFT12,NFT13,NFT14,NFT15,NFT16,IDAF20,NEMEMX
      COMMON /DETWFN/ WSTATE(MXRT),SPINS(MXRT),CRIT,PRTTOL,SDET,SZDET,
     *                GRPDET,STSYM,GLIST,dwparm,
     *                NFLGDM(MXRT),IWTS(MXRT),NCORSV,NCORDT,NACTDT,
     *                NORBDT,NADET,NBDET,KDET,KSTDET,IRTDT,IPURES,
     *                MAXW1,NITDET,MAXP,NCIDET,IGPDET,KSTSYM,NFTGCI
     *                ,idweigh
      COMMON /DIRMEM/ IPQKL,IVEC,IDEN,IFCK,NBF,NOC,NDIM,MNPQ,MXPQ
      COMMON /EDCMP / ZIJ(NMO),ZMO(5,NMO),OCCUP(NMO),DPFREQ(50),
     *                MOIDNO(5,NMO),IJMO(2,NMO),MOIJ(NMO),NMOIJ(NMO),
     *                NMOAT(NMO),NDPFREQ,IPROT(5),NPROT,
     *                MOIDON,EDCOMP,DIPDCM,DEPRNT,QADDCM,ZDO,POLDCM,
     *                POLANG,POLAPP,KMIDPT,POLDYN
      COMMON /ENRGYS/ EN,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),edisp
      COMMON /FMCOM / X(1)
      COMMON /GUGWFN/ NNFZC,NNMCC,NNDOC,NNAOS,NNBOS,NNALP,NNVAL,NNEXT,
     *                NNFZV,IFORS,IEXCIT,ICICI,NOIRR
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /INT2IC/ NINTIC,ININTIC,NXXIC,LBUFPIC,LIXIC,LABSIX,NINTIX
      COMMON /IOFILE/ IR,IW,IP,IJKO,IJKT,IDAF,NAV,IODA(950)
      COMMON /MACHIN/ NWDVAR,MAXFM,MAXSM,LIMFM,LIMSM
      COMMON /MCINP / METHOD,CISTEP,FINALCI,ACURCY,ENGTOL,DAMP,
     *                MICIT,NWRDMC,NORBMC,NOROT(2,MXNORO),MOFRZ(15),
     *                NPFLG(10),NOFO,MCFMO,IDIABAT,
     *                CANONC,FCORE,FORS,EKT,LINSER
      COMMON /MCPAR / NFZC,NCORBS,NVAL,NORBS,NORB,NUM1
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /NTNOPT/ ENERGY,ENERG0,DEMAX,SQCDF,ITER,MICRO,NOTRF
      COMMON /ORBSET/ NORBMX,KORBS,KCORBS,NLEVS,NNA,NNB,NC,NSYM,MSYM,
     *                IDOCC,IIVAL,IMCC,ISYM(MXAO),ICODE(MXAO),
     *                NLCS(MXAO),LEVPT(MXAO),LEVNR(MXAO),IOUT(MXAO),
     *                NREFS,IEXCT,NFOCI,INTACT
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PCKLAB/ LABSIZ
      COMMON /PRPOPT/ ETOLLZ,ILOCAL,IAHARD
      COMMON /PSILVL/ IPSI,ISKPRP
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /SYMMOL/ GROUP,COMPLX,IGROUP,NAXIS,ILABMO,ABEL
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                TSYM(432),INVT(48),NT
      COMMON /TRFOPT/ CUTTRF,NWDTRF,MPTRAN,ITRFAO,NOSYMT,IPURTF,DIRTRF
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      INTEGER         D_OOOO,D_VOOO,D_VVOO,D_VOVO,D_VVVO,D_VVVV,
     *                D_OOOOAB,D_OOOOBB,D_VOOOAB,D_VOOOBA,D_VOOOBB,
     *                D_VVOOAB,D_VVOOBA,D_VVOOBB,D_VOVOAB,D_VOVOBB,
     *                D_U,D_UB,D_E,D_EB
      LOGICAL         NDOOOO,NDVOOO,NDVVOO,NDVOVO,NDVVVO,NDVVVV,NDCORE,
     *                NDVVOOBA,NDVVOOAB,NDVVOOBB,NDVOVOAB,NDVOVOBB,
     *                NDVOOOBA,NDVOOOAB,NDVOOOBB,NDOOOOAB,NDOOOOBB
      COMMON /TRFDMS/ D_OOOO,D_VOOO,D_VVOO,D_VOVO,D_VVVO,D_VVVV,
     *                D_OOOOAB,D_OOOOBB,D_VOOOAB,D_VOOOBA,D_VOOOBB,
     *                D_VVOOAB,D_VVOOBA,D_VVOOBB,D_VOVOAB,D_VOVOBB,
     *                D_U,D_UB,D_E,D_EB,
     *                NDOOOO,NDVOOO,NDVVOO,NDVOVO,NDVVVO,NDVVVV,NDCORE,
     *                NDVVOOBA,NDVVOOAB,NDVVOOBB,NDVOVOAB,NDVOVOBB,
     *                NDVOOOBA,NDVOOOAB,NDVOOOBB,NDOOOOAB,NDOOOOBB
C     COMMON /CIMINF/ ICIM,ICIF,MOTYP,NCA,NCB  !-CIM-
C
      PARAMETER (ZERO=0.0D+00)
C
      DATA RMC/8HMCSCF   /, CHECK/8HCHECK   /
      DATA DBUG/8HDEBUG   /, DBUGME/8HTRNSF   /
      DATA GUGA,ALDET,GENCI,ORMAS,GMCCI
     *       /8HGUGA    ,8HALDET   ,8HGENCI   ,8HORMAS   ,8HGMCCI   /
      DATA PROP/8HPROP    /
      DATA RNONE/8HNONE    /
C
C           ----- PARTIAL INTEGRAL TRANSFORMATION PROGRAM -----
C     -- TRANSFORM INTEGRALS AND OPTIONALLY FORM CORE FOCK OPERATOR --
C     ALL INTEGRALS WITH 0,1,2 VIRTUAL ORBITAL INDEXES ARE PRODUCED.
C
C     -NPRINT- SHOULD BE 1,2 FOR DEBUG OUTPUT OF 1,2 E- TRANSFORM.
C     -ICORBS- IS NUMBER OF CORE ORBS.  IF NEGATIVE, SKIP FROZEN CORE E
C     -IORBS- IS NUMBER OF OCCUPIED ORBS INCLUDED IN THE TRANSFORM,
C        INCLUDING ANY CORE ORBITALS.
C     -IORB- IS THE TOTAL NUMBER OF ORBS TO INCLUDE IN THE TRANSFORM.
C     -DOFOCK- IS A FLAG TO CONTROL GENERATION OF CORE FOCK MATRICES:
C            SUPPOSE THERE ARE 3 CORES, 5 TOTAL OCCUPIED.
C        IF FALSE, NO FOCK MATRICES ARE MADE, AND THE INDEX LABELS
C            PACKED UP FOR THE OCCUPIED ORBS ARE 1 AND 2.  NO CORE
C            ORBITAL INTEGRALS ARE PRODUCED.
C        IF TRUE, THE FOCK MATRICES ARE MADE, AND THE INDEX LABELS
C            PACKED UP FOR THE OCCUPIED ORBS ARE 4 AND 5.  ALL
C            INTEGRALS INVOLVING THE CORE ORBITALS ARE PRODUCED
C            AND INCLUDED IN THE OUTPUT FILES, LABELED 1,2,3.  NOTE:
C            THIS OPTION IS NOT TESTED, AND THUS MAY NOT BE WORKING.
C       NOTE THAT -DOFOCK- DOES NOT CONTROL MODIFYING THE 1E-
C       INTEGRALS FOR THE ABSENCE OF FROZEN CORE ORBITALS.
C       PARALLEL RUNS ALWAYS DO THIS (FCODDI ETC ALWAYS EXECUTED).
C       IF DDI DEBUGGING IS TURNED ON, STRAIGHT CI JOBS, WHICH ONLY
C       GENERATE THE OOOO INTEGRAL CLASS, WILL FAIL ON BAD MESSAGES
C       INSIDE FCODDI.  CCSD(T) RUNS WHICH TRY TO AVOID DOING CORE
C       ORBITAL INTEGRALS WILL ALSO FAIL IN FCODDI IF DEBUGGING IS ON.
C       SOMEHOW, THE FCODDI, ETC CODE ALL WORKS OK, IF DDI DEBUGGING
C       IS NOT TURNED ON.
C       IT WOULD BE VERY GOOD TO CLEAN THIS MESS UP SOMEDAY.
C     -DOEXCH- INDICATES EXCHANGE INTEGRALS ARE NOT AVAILABLE ON THE
C        DAF FILE AT THIS GEOMETRY, AND THEREFORE MUST BE COMPUTED.
C
C     -DDITRF- CONTROL SELECTION OF A DISTRIBUTED MEMORY PARALLEL
C              INTEGRAL TRANSFORMATION.  THE FLAGS -DOOOO-, -DOVOOO-,
C              -DOVOVO-, AND -DOVVOO- ARE MEANINGLESS UNLESS -DDITRF-
C              IS TURNED ON, IN WHICH CASE, THEY REQUEST FORMATION OF
C              MO INTEGRAL CLASSES (OO|OO),(VO|OO),(VV|OO),(VO|VO).
C
      L0 = NQMT
      L1 = NUM
      L2 = (L1*L1+L1)/2
      L3 =  L1*L1
C
C        LABSIZ IS NORMALLY SET BY -DEBUT- BUT THAT MIGHT NOT BE CALLED
C
      IF(RUNTYP.EQ.PROP) THEN
         MAXAO=255
         LABSIZ = 1
         IF(NUM.GT.MAXAO) LABSIZ = 2
      END IF
C
C         DECIDE ON THE LEVEL OF PRINTING
C
      SOME  = NPRINT.NE.-5 .AND. MASWRK
      IF(RUNTYP.EQ.LMOEDA .AND. ILOCAL.EQ.0) SOME = .FALSE.
      DEBG1 = NPRINT.EQ. 1 .AND. MASWRK
      DEBUG = NPRINT.EQ. 2 .AND. MASWRK
      IF (EXETYP.EQ.DBUG   .OR.   EXETYP.EQ.DBUGME) THEN
         SOME = .TRUE. .AND. MASWRK
         DEBUG= .TRUE. .AND. MASWRK
      END IF
C
      IF(SOME) WRITE(IW,9000)
C
      NREC=0
      NINT=0
C
      MINTMX=NINTMX
      IF(NINTIC.NE.0) MINTMX=0
C     MEMORY IS ALLOCATED ELSEWHERE
C
      CALL SEQOPN(IJKT,'MOINTS','UNKNOWN',.FALSE.,'UNFORMATTED')
C
C     ----- PROVIDE DEFAULT VALUES FOR NCORBS,NORB -----
C     THESE MAY HAVE BEEN PASSED IN THE CALLING ARGUMENTS.
C     NCORBS IS THE NUMBER OF -FZC- OR -MCC- GIVEN IN $DRTINP
C     NORBS  IS THE NUMBER OF OCCUPIED ORBITALS FOR MCSCF,
C            AND IS THE NUMBER OF OCCUPIED, NON-FZC FOR CI.
C     NORB IS THE TOTAL NUMBER TO BE INCLUDED (I.E. INCLUDING VIRTUALS)
C
      CALL DERCHK(NDER)
      JCORBS = IABS(ICORBS)
      IF(JCORBS+IORBS.EQ.0) THEN
         IF(SCFTYP.EQ.RMC  .OR.  CITYP.EQ.GUGA) THEN
C
C               TRANSFORMATION FOR A CI COMPUTATION...
C
            IF(ICICI.EQ.1) THEN
C
C               CI GRADIENT RUNS MUST INCLUDE CORE ORBITALS IN TRANSFORM
C
               IF(NDER.GT.0) THEN
                  NCORBS = 0
                  NORBS  = KORBS
                  NORB   = L0
C
C               CIS ENERGY NEEDS ONLY A PARTIAL TRANSFORMATION,
C               OTHER CI COMPUTATIONS NEED A FULL TRANSFORMATION
C
               ELSE
                  IF (IEXCIT.EQ.1  .AND.  NNEXT.EQ.0) THEN
                     NCORBS = KCORBS
                     NORBS  = KCORBS+NNDOC+NNALP+NNAOS+NNBOS
                     NORB   = KCORBS+NNDOC+NNALP+NNAOS+NNBOS+NNVAL
                  ELSE
                     NCORBS = KCORBS
                     NORBS  = KCORBS+KORBS
                     NORB   = KCORBS+KORBS
                  END IF
               END IF
            END IF
C
C               TRANSFORMATION FOR A MCSCF COMPUTATION...
C
            IF(ICICI.EQ.0) THEN
               IF(CISTEP.EQ.GUGA) THEN
                  NCORBS = 0
                  NORBS  = KORBS
                  NORB   = L0
               END IF
               IF(CISTEP.EQ.ALDET  .OR.
     *            CISTEP.EQ.GENCI  .OR.
     *            CISTEP.EQ.ORMAS  .OR.
     *            CISTEP.EQ.GMCCI) THEN
                  NCORBS = 0
                  NORBS  = NCORSV+NACTDT
                  NORB   = L0
               END IF
            END IF
         END IF
C
C               TRANSFORMATION FOR HESSIAN OR ORBITAL LOCALIZATION...
C
      ELSE
         NCORBS = JCORBS
         NORBS  = IORBS
         NORB   = IORB
      END IF
C
      NVAL = NORBS - NCORBS
      IF (SOME) WRITE (IW,9010) NCORBS,NORBS,NORB,L1,CUTTRF
C
C     ----- DISTRIBUTED MEMORY PARALLEL INTEGRAL TRANSFORMATION -----
C              IMPLEMENTED BY GRAHAM FLETCHER, FEB 14, 2002
C
C     DO NOT SKIP CORE INDICES IN TRANSFORMATION FOR MCSCF
C
      IF (DDITRF) THEN
C
C  ENSURE THE PAIR-INDEX IS INITIALIZED (AGAIN!)
C
        II = 0
        DO I = 1, MXAO
          IA(I) = II
          II = II + I
        END DO
C
C  DISTINCT NAMES
C
        NBF  = NUM
        NMOS = NORB
        NOCC = NORBS
        NCOR = NCORBS
C
C  DRIVER FOR PARALLEL DIRECT 4-INDEX TRANSFORMATION
C
        CALL TRANDDI(NMOS,NOCC,NCOR,SOME,DOOOOO,DOVOOO,DOVVOO,DOVOVO,
     &               DOVVVO,DOVVVV,DOCORE)
C
C  DEPENDENT PARAMETERS
C
        NBSQ = NBF*NBF
        NBTR = (NBF*NBF+NBF)/2
        NMTR = (NMOS*NMOS+NMOS)/2
C
C  DATA STRUCTURE LENGTHS
C
        LVECT = NBSQ
        LONEL = NBTR
        LHAMO = NMTR
        LWORK = NBF
C
C  ALLOCATE MEMORY: COMPUTE ADDRESSES AND CHECK TOTAL
C
        CALL VALFM(LOADFM)
        IVECT = LOADFM + 1            !  MO COEFFICIENTS
        IONEL = IVECT  + LVECT        !  1-EL INTEGRALS OVER AOS
        IHAMO = IONEL  + LONEL        !  1-EL INTEGRALS OVER MOS
        IWORK = IHAMO  + LHAMO        !  WORKSPACE
        LAST  = IWORK  + LWORK
        NEED  = LAST   - LOADFM
        CALL GETFM(NEED)
        IF (EXETYP.NE.CHECK) THEN
C
C  READ MO COEFFICIENTS (FOCK EIGEN'VECT'ORS)
C
          CALL DAREAD(IDAF,IODA,X(IVECT),LVECT,15,0)
C
C  READ 1-EL (CORE-HAMILTONIAN) INTEGRALS
C
          CALL DAREAD(IDAF,IODA,X(IONEL),LONEL,11,0)
C
C  TRANSFORM 1-EL INTEGRALS TO THE MO BASIS
C
          CALL TFTRI(X(IHAMO),X(IONEL),X(IVECT),X(IWORK)
     *,              NMOS,NBF,NBF)
C
C  SAVE 1-EL INTEGRALS OVER MOS FOR USE IN NEWTON
C  THIS IS NOT DONE IF THIS ROUTINE COMPUTES ONLY OOOO CASE.
C
          IF(DOVOOO .OR. DOVVOO .OR. DOVOVO)
     *       CALL DAWRIT(IDAF,IODA,X(IHAMO),LHAMO,355,0)
C
C  FORM 2-EL CORE FOCK OPERATOR IN PARALLEL
C  THIS PROBABLY SHOULD OBEY THE -DOCORE- ARGUMENT...
C  -CI- TRANSFORMATIONS HAVE ONLY -DOOOOO- TRUE, WHEREAS ANY OF THE
C  -MCSCF- AND -CC- TRANSFORMATIONS ALSO HAVE ONE AND TWO V'S AVAILABLE.
C
          IFCOR = IONEL   !  RE-USE 1-EL INT BUFFER FOR CORE FOCK
          IBUFF = IVECT   !  RE-USE VECTORS BUFFER FOR MESSAGES
C
          CALL FCODDI(NMOS,NOCC,NCOR,X(IFCOR),X(IBUFF),
     *                DOOOOO,DOVOOO,DOVVOO,DOVOVO)
C
C  SUM 1-EL AND 2-EL TERMS OF CORE FOCK MATRIX
C
          CALL DAXPY(LHAMO,1.0D+00,X(IHAMO),1,X(IFCOR),1)
C
C  SAVE CORE FOCK MATRIX
C
          CALL DAWRIT(IDAF,IODA,X(IFCOR),NBTR,35,0)
C
C  COMPUTE FROZEN CORE ENERGY, /ENRGYS/...ECORE...
C
          ECORE = ZERO
          IHII = IHAMO - 1
          IFII = IFCOR - 1
          DO I = 1, NCOR
            IHII = IHII + I
            IFII = IFII + I
            ECORE = ECORE + X(IHII) + X(IFII)
          END DO
          IF(DOFOCK.AND.NCORBS.GT.0.AND.SOME) WRITE(IW,9040) ECORE
C
C  COPY FOCK ELEMENTS OVER ACTIVE MOS TO SEPARATE BUFFER
C      SAVE MATRIX OVER ALL ORBITALS, THAT IS
C      I LOOP RUNS TO NMOS RATHER THAN NACT,
C      AND THE WRITE IS NMTR RATHER THAN NATR
C
          IJ = IHAMO
          DO I = 1, NMOS
            IN = I + NCOR
            DO J = 1, I
              JN = J + NCOR
              IJN = IA(IN) + JN
              IJH = (IFCOR-1) + IJN
              X(IJ) = X(IJH)
              IJ = IJ + 1
            END DO
          END DO
C
C  SAVE ACTIVE MO CORE FOCK ELEMENTS FOR CI (RDCI12)
C
          CALL SEQREW(IJKT)
          IF (MASWRK) CALL SQWRIT(IJKT,X(IHAMO),NMTR)
C
C  FREE DISTRIBUTED WORKSPACE IF JUST NEED OOOO AND/OR VOOO
C
          IF (.NOT.NDVVOO) CALL DDI_DESTROY(D_VVOO)
        END IF   ! CHECK RUN
C
        CALL RETFM(NEED)
        IF(SOME) WRITE(IW,*) '... END OF INTEGRAL TRANSFORMATION ...'
        IF(SOME) CALL TIMIT(1)
        RETURN
      END IF
C
C     THIS IS THE  END OF THE DISTRIBUTED MEMORY INTEGRAL TRANSFORMATION
C
C     ----- REPLICATED MEMORY PARALLEL INTEGRAL TRANSFORMATION -----
C
      IF (DIRTRF) THEN
        IF (SOME) WRITE(IW,9020)
      ELSE
        IF (SOME) WRITE(IW,9030)
      END IF
C
      NDIM=L2
C
      CALL GOTFM(NGOTMX)
      IF(NWDTRF.LE.0) NWDTRF=NGOTMX
      NWORD=MIN(NWDTRF,NGOTMX)
C
C     ----- SET POINTERS TO MEMORY FOR DIRECT RUNS -----
C     XBUF AND IXBUF ARE OUTPUT MO INTEGRAL BUFFERS
C
      CALL BASCHK(LMAX)
                    NANGM =  4
      IF(LMAX.EQ.2) NANGM =  6
      IF(LMAX.EQ.3) NANGM = 10
      IF(LMAX.EQ.4) NANGM = 15
      IF(LMAX.EQ.5) NANGM = 21
      IF(LMAX.EQ.6) NANGM = 28
      MAXG = NANGM**4
      NSH2   = (NSHELL*NSHELL+NSHELL)/2
      NCPU   = NPROC
C
      CALL VALFM(LOADFM)
      LXBUF  = LOADFM + 1
      LIXBUF = LXBUF  + NINTMX
      LJFLG  = LIXBUF + NINTMX
      LAST   = LJFLG  + NPROC
      IF (DIRTRF) THEN
         LGHND  = LAST
         LXINTS = LGHND  + MAXG
         LDDIJ  = LXINTS + NSH2
         LDSH   = LDDIJ  + 49*MXG2
         LAST   = LDSH   + NSH2
      ELSE
         LGHND  = LAST
         LXINTS = LAST
         LDDIJ  = LAST
         LDSH   = LAST
      END IF
      NEEDD = LAST - LOADFM - 1
      CALL GETFM(NEEDD)
C
C        ---- GENERATE EXCHANGE INTEGRALS FOR SCHWARZ SCREENING ----
C
      IF(DIRTRF) THEN
         IF(EXETYP.EQ.CHECK) THEN
            CALL VCLR(X(LXINTS),1,NSH2)
         ELSE
            IF(DOEXCH) THEN
               CALL DEBUT(.FALSE.,DUM,DUM,IDUM,NINTMX,0,DIRTRF)
               CALL EXCHNG(X(LXINTS),X(LGHND),X(LDDIJ),NSH2,MAXG,INTTYP)
            ELSE
               CALL DAREAD(IDAF,IODA,X(LXINTS),NSH2,54,0)
            END IF
         END IF
      END IF
C
C        ---- OPTION TO DEFEAT SYMMETRY USAGE ----
C
      ABEL=ABELPT()
      IF(NOSYMT.EQ.1) CALL SYMOFF
C
C        ---- MEMORY TO STORE VECTORS AND SYMMETRY DATA ----
C
      CALL VALFM(LOADFM)
      LMOLAB = LOADFM + 1
      LMOIRP = LMOLAB + L1
      LVEC   = LMOIRP + L1
      LAST   = LVEC   + L3
      NEEDV = LAST - LMOLAB
      CALL GETFM(NEEDV)
C
C        ---- CLEAN UP AND ORTHONORMALIZE ORBITALS ----
C        BRANCH IF YOU DO NOT WANT TO ORTHOGONALIZE THE MO'S
C
      CALL DAREAD(IDAF,IODA,X(LVEC),L3,15,0)
      IF (ZDO)            GO TO 10
      IF (VBTYP.NE.RNONE) GO TO 10
C
      LQ    = LAST  + 1
      LS    = LQ    + L3
      LTMP  = LS    + L2
      LLABS = LTMP  + L1
      LWRK  = LLABS + L1
      LAST  = LWRK  + L3
      NEEDO = LAST - LQ
      CALL GETFM(NEEDO)
C
      CALL DAREAD(IDAF,IODA,X(LS),L2,12,0)
      CALL DAREAD(IDAF,IODA,X(LQ),L3,45,0)
C          TRADITIONAL VALUES ARE 1D-8 AND 1D-6 RESPECTIVELY
      IF(NT.GT.1) THEN
         IF(ABEL) THEN
            TOLZ=1.0D-09
            TOLE=1.0D-07
         ELSE
            TOLZ=1.0D-11
            TOLE=1.0D-10
         END IF
         IF(SCFTYP.EQ.RMC  .AND.  IPSI.EQ.0) THEN
            IF(ITER.EQ.1  .OR.  SQCDF.GT.1.0D-04) THEN
               TOLZ=TOLZ*10.0D+00
               TOLE=TOLE*10.0D+00
            END IF
         END IF
         CALL CLENMO(X(LVEC),L1,L0,TOLZ,TOLE,IW,.FALSE.)
      END IF
C
C            OPTION TO PURIFY ORBITALS
C
      IF(IPURTF.EQ.2) THEN
        CALL SYMMOS(X(LLABS),X(LQ),X(LS),X(LVEC),X(LWRK),L0,L1,NORB,L1)
        CALL ORBPUR(X(LS),X(LVEC),L1,L0,.TRUE.)
        CALL DAREAD(IDAF,IODA,X(LQ),L3,45,0)
      END IF
C
C     ---- SKIP ORTHO AND TFSQB FOR -CIM- MOS ----
C
C     CALL ORTHO(X(LQ),X(LS),X(LVEC),X(LTMP),L0,L0,L1,L2,L1)
C     CALL TFSQB(X(LVEC),X(LQ),X(LTMP),L0,L1,L1)
C     WRITE(IW,*) 'SKIP ORTHO AND TFSQB IN trans.src FOR CIM'
C
      CALL DAWRIT(IDAF,IODA,X(LVEC),L3,15,0)
      CALL RETFM(NEEDO)
C
   10 CONTINUE
      IF(DOFOCK) GO TO 50
C
C        ----- ONE ELECTRON TRANSFORMATION/FROZEN CORE ENERGY -----
C
      CALL VALFM(LOADFM)
      LD    = LOADFM + 1
      LF    = LD     + L2
      LH    = LF     + L2
      LXX   = LH     + L2
      LIX   = LXX    + MINTMX
      LWRK  = LIX    + MINTMX
      LAST  = LWRK   + L2
      NEED1 = LAST - LOADFM - 1
      IF(NINTIC.NE.0) THEN
         LXX= LBUFPIC
         LIX= LIXIC
      ENDIF
      CALL GETFM(NEED1)
C
      CALL DAREAD(IDAF,IODA,X(LH),L2,11,0)
C
C        ---- CALCULATE FROZEN CORE ENERGY ----
C        AND MODIFY THE ONE ELECTRON INTEGRALS
C
      ECORE = ZERO
      IF(NCORBS.GT.0   .AND.  ICORBS.GE.0  .AND.  EXETYP.NE.CHECK) THEN
         IF (SOME) WRITE(IW,*) 'EVALUATING THE FROZEN CORE ENERGY...'
         CALL FZCORE(X(LVEC),X(LD),X(LF),X(LH),X(LXX),X(LIX),NINTMX,
     *               IA,L1,L2,NCORBS,X(LGHND),X(LXINTS),
     *               X(LDDIJ),X(LDSH),X(LWRK),NSH2,MAXG,INTTYP)
         IF (SOME) WRITE(IW,9040) ECORE
      END IF
      CALL DAWRIT(IDAF,IODA,EN,MXRT+15,2,0)
      CALL DAWRIT(IDAF,IODA,X(LH),L2,35,0)
C
C        ---- DROP ANY FROZEN CORES FROM THE TRANSFORMATION ----
C
      LVEC   = LVEC + L1*NCORBS
      NORB   = NORB   - NCORBS
      NORBS  = NORBS  - NCORBS
      NCORBS = NCORBS - NCORBS
C
      IF (DEBG1  .OR.  DEBUG) THEN
         WRITE (IW,*) 'TRANSFORMATION VECTORS'
         CALL PRSQ(X(LVEC),NORB,L1,L1)
      END IF
C
C        ---- TRANSFORM 1E- INTEGRALS ----
C
      CALL TFTRI(X(LF),X(LH),X(LVEC),X(LWRK),NORB,L1,L1)
      M2 = (NORB*NORB+NORB)/2
      CALL SEQREW(IJKT)
      IF(MASWRK) CALL SQWRIT(IJKT,X(LF),M2)
      IF(DEBG1  .OR.  DEBUG) THEN
         WRITE (IW,*) '1E- INTEGRALS IN MO BASIS'
         CALL PRTRI(X(LF),NORB)
      END IF
      CALL RETFM(NEED1)
C
C        ---- ASSIGN IRREP SYMMETRY TO THE TRANSFORMATION MO'S ----
C        LATER, WE USE SYMMETRY TYPE TO ELIMINATE FULLNR ROTATIONS
C
   50 CONTINUE
      CALL VALFM(LOADFM)
      LS     = LOADFM + 1
      LQ     = LS     + L2
      LWRK   = LQ     + L3
      LMODEG = LWRK   + L1
      LAST   = LMODEG + L1
      NEEDS = LAST - LOADFM - 1
      CALL GETFM(NEEDS)
C
C         MCSCF JOBS NEED TO KNOW ORBITAL SYMMETRY TO PROPERLY
C         ESTIMATE THE NUMBER OF NON-REDUNDANT ROTATIONS IN ORDER
C         TO PROPERLY SIZE FULLNR MEMORY NEEDS.  INPUT ORBITALS
C         SHOULD BE THE TRUE MOREAD, SO WE CAN TRUST THE SYMMETRY
C         LABELS THAT WE GENERATE IN THIS CASE.
C
      IF(EXETYP.NE.CHECK  .OR.  SCFTYP.EQ.RMC) THEN
         CALL DAREAD(IDAF,IODA,X(LS),L2,12,0)
         CALL DAREAD(IDAF,IODA,X(LQ),L3,45,0)
         CALL TRFSYM(X(LMOLAB),X(LMOIRP),X(LMODEG),X(LQ),X(LS),X(LVEC),
     *               X(LWRK),IA,L0,L1,NORB,L1)
         CALL DAWRIT(IDAF,IODA,X(LMOLAB),L1,324,1)
      END IF
C
      CALL RETFM(NEEDS)
C
      NTSAVE = NT
      IF(DIRTRF  .AND.  .NOT.ABEL) NT=1
C
C     -------- TRANSFORM TWO ELECTRON INTEGRALS ------
C     --- MEMORY FOR DIRECT OR CONVENTIONAL PARTIAL TRANSFORMATION ---
C     THIS DIVIDES INTO AN IN MEMORY, AND A SEGMENTED OPTION
C
      NMUL = L1*L2*NORBS
      FMUL = L1
      FMUL = FMUL*L2
      FMUL = FMUL*NORBS
C
      CALL VALFM(LOADFM)
      LFCK  = LOADFM + 1
      LDEN  = LFCK   + MAX(L2,L3)
      LXX   = LDEN   + MAX(L2,L3)
      LIX   = LXX    + MINTMX
      LWRK  = LIX    + MINTMX
      LIWRK = LWRK   + L3
      LPQRJ = LIWRK  + L3/NWDVAR + 1
      LAST  = LPQRJ  + NMUL
      NEED2 = LAST - LOADFM - 1
      NEEDX = LPQRJ - LOADFM - 1
      NDBASE = NEEDV + NEEDD + NEEDX
      NTOT = NDBASE + NMUL
      IF(NINTIC.NE.0) THEN
         LXX= LBUFPIC
         LIX= LIXIC
      ENDIF
      IF(SOME) WRITE(IW,9100) NWORD,NTOT
C
C        DIRECT TRANSFORMATIONS PASS SOME MEMORY POINTERS IN COMMON
C
      IVEC = LVEC
      IFCK = LFCK
      IDEN = LDEN
      IPQKL= LPQRJ
      NBF  = L1
      NOC  = NORBS
C
C        MAKE SURE IN MEMORY NEED DOESN'T EXCEED 32 BIT INTEGER
C
      IF(NWDVAR.EQ.2  .AND.  FMUL.GT.2.14D+09) GO TO 100
      IF(NTOT.GT.NWORD) GO TO 100
      IF(MPTRAN.GT.0) GO TO 100
      IF (GOPARR) THEN
         NWORD = NTOT
         IF (SOME) WRITE(IW,9110)
         GO TO 100
      END IF
C
C     ----- FULLY IN MEMORY TRANSFORMATION -----
C
      CALL GETFM(NEED2)
      IF(SOME) WRITE(IW,9120)
      IF(EXETYP.EQ.CHECK) GO TO 700
      CALL MCXTR1(X(LPQRJ),X(LVEC),X(LFCK),X(LDEN),X(LXX),X(LIX),
     *            X(LJFLG),NCPU,
     *            X(LMOLAB),X(LMOIRP),X(LWRK),X(LIWRK),
     *            IJKO,IJKT,CUTTRF,NPRINT,NINT,ECORE,DOFOCK,
     *            X(LXBUF),X(LIXBUF),X(LGHND),X(LXINTS),X(LDDIJ),
     *            MAXG,NSH2)
      GO TO 700
C
C     ----- SEGMENTED TRANSFORMATION, BY BATCHES OF J -----
C     ----- MEMORY REQUIRED IS (MIN)=L2*L1   (MAX)=L2*L1*NORBS
C
  100 CONTINUE
      NMIN = L2*L1
      NORBSMX = (NORBS-1)/NPROC+1
      NDMIN  = NDBASE + NMIN*1
      NDMAX  = NDBASE + NMIN*NORBSMX
      IF(SOME) WRITE(IW,9200) NDMIN,NDMAX,NMIN
C
      LEFT = NWORD-NDBASE
      IF(LEFT.LT.NMIN) THEN
        IF (GOPARR) THEN
          IF (SOME) WRITE(IW,9210) NMIN-LEFT+1
          CALL ABRT
          STOP
        ELSE
          GO TO 200
        END IF
      END IF
C
      LPASS = MIN(NORBSMX,LEFT/NMIN)
      NPASS = (NORBS-1)/LPASS+1
      LPASS = (NORBS-1)/NPASS+1
      LAST  = LPQRJ + NMIN*LPASS
      NEED2 = LAST - LOADFM - 1
      NTOT = NEED2+NEEDV+NEEDD
      IF(SOME) WRITE(IW,9220) NTOT,NPASS,LPASS,NPROC
      IF(MPTRAN.GT.1) GO TO 200
C
      IF(SOME) WRITE(IW,9230)
      CALL GETFM(NEED2)
      IF(EXETYP.EQ.CHECK) GO TO 700
C
      IF(DEBUG) CALL TR2OUT(0,0,0,0,0,ZERO,-1)
      NUMX = 0
      NREC = 0
C
      IF (GOPARR) THEN
        DLB = IBTYP.EQ.1  .AND.  ITRFAO.EQ.1  .AND.  NPASS.GE.NPROC
        IPCOUNT = ME - 1
        NEXT = -1
        MINE = -1
      END IF
C
C        ----- BEGIN LOOP OVER PASSES (SEGMENTS) -----
C        THERE ARE -NPASS- TRUE PASSES, AND -MXPASS- TOTAL PASSES,
C        WHERE -MXPASS- IS THE NEXT EVEN MULTIPLE OF -NPROC-.
C        THE PURPOSE OF THE EXTRA MXPASS-NPASS PASSES IS TO HAVE
C        THOSE NODES BROADCAST THEIR PORTION OF A DISTRIBUTED AO
C        INTEGRAL FILE TO THOSE NODES ASSIGNED A GENUINE PASS.
C
      MXPASS = ((NPASS-1+NPROC)/NPROC)*NPROC
C
      CALL TSECND(TIM1)
      MINJ = 1
      IPASS=0
      MYPASS=0
C
  110 CONTINUE
      IPASS = IPASS+1
      MAXJ = MIN(NORBS,MINJ-1+LPASS)
      NOC  = MAXJ-MINJ+1
      IF (GOPARR) THEN
        IF (DLB) THEN
          MINE = MINE + 1
          IF(MINJ.EQ.1) THEN
             IF(MASWRK) THEN
                NEXT = 0
             ELSE
                IF(MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
                IF(NEXT.EQ.0) CALL DDI_DLBNEXT(NEXT)
             END IF
          ELSE
             IF(MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
             IF(NEXT.EQ.0) CALL DDI_DLBNEXT(NEXT)
          END IF
          IF (NEXT.NE.MINE) THEN
             IF(IPASS.LE.NPASS  .AND.  SOME) WRITE(IW,9400) IPASS
             GO TO 115
          END IF
        ELSE
          IPCOUNT = IPCOUNT + 1
          IF (MOD(IPCOUNT,NPROC).NE.0) THEN
             IF(IPASS.LE.NPASS  .AND.  SOME) WRITE(IW,9400) IPASS
             GO TO 115
          END IF
        END IF
      END IF
C
      IF(IPASS.LE.NPASS) THEN
         CALL MCXTR2(X(LPQRJ),X(LVEC),X(LFCK),X(LDEN),X(LXX),X(LIX),
     *               X(LJFLG),NCPU,
     *               X(LFCK),X(LDEN),X(LMOLAB),X(LMOIRP),X(LWRK),
     *               X(LIWRK),IJKO,IJKT,CUTTRF,NPRINT,ECORE,DOFOCK,
     *               NOC,L2,MINJ,MAXJ,X(LXBUF),X(LIXBUF),NUMX,NREC,
     *               X(LGHND),X(LXINTS),X(LDDIJ),MAXG,NSH2,MYPASS)
         IF(SOME) THEN
            CALL TSECND(TIM2)
            TIME = TIM2 - TIM1
            TIM1 = TIM2
            WRITE(IW,9410) IPASS,TIME
            CALL FLSHBF(IW)
         END IF
      ELSE
         CALL FCKBRD(1,X(LFCK),X(LVEC),X(LDEN),X(LWRK),
     *               NCORBS,ECORE,DOFOCK,L1,L2,MYPASS)
         CALL TRFBRD(IJKO,X(LXX),X(LIX),NINTMX,X(LJFLG),NCPU)
         CALL FCKBRD(2,X(LFCK),X(LVEC),X(LDEN),X(LWRK),
     *               NCORBS,ECORE,DOFOCK,L1,L2,MYPASS)
      END IF
C
  115 CONTINUE
      IVEC = IVEC+NOC*L1
      MINJ=MAXJ+1
      IF(IPASS.LT.MXPASS) GO TO 110
C
      IF (DEBUG) CALL TR2OUT(0,0,0,0,0,ZERO,1)
      NINT = NREC*NINTMX+NUMX
      NREC = NREC+1
      NUMX = -NUMX
      CALL PWRIT(IJKT,X(LXBUF),X(LIXBUF),NUMX,NINTMX)
      IF (GOPARR) THEN
         CALL DDI_GSUMI(1700,NINT,1)
         IF (DLB) CALL DDI_DLBRESET
      END IF
      GO TO 700
C
C     ----- OUT-OF-MEMORY CONVENTIONAL OR DIRECT TRANSFORMATION -----
C     ----- MINUMUM MEMORY REQUIRED : L1*NORBS
C     ----- DISK REQUIRED           : L1*(L1+1)*NDAR20/2
C
  200 CONTINUE
      IF(GOPARR) THEN
         WRITE(IW,9320)
         CALL ABRT
      END IF
      NORBS2 = (NORBS*NORBS+NORBS)/2
      NDAR20 = NORBS2+NORBS*(L1-NORBS)
C
C        MOST MEMORY POINTERS ARE SAME AS FOR SEGMENTED,
C        BUT WE HAVE TO SQUEEZE IN A CHAINING ARRAY
C
      LIODA = LPQRJ
      LPQRJ = LIODA + NDAR20
C
      IPQKL = LPQRJ
C
      NMIN = L1*NORBS
      LEFT = NWORD - NEEDD - NEEDV - (LPQRJ-LOADFM-1)
      IF(LEFT.LT.NMIN) THEN
         IF (MASWRK) WRITE(IW,9310) NMIN-LEFT
         CALL ABRT
         STOP
      END IF
      LPASS = LEFT/NMIN
      NPASS = (L2-1)/LPASS+1
      LPASS = (L2-1)/NPASS+1
C
      LAST  = LPQRJ + NMIN*LPASS
      NEED2 = LAST - LOADFM - 1
      CALL GETFM(NEED2)
C
      NTOT = NEEDV+NEED2+NEEDD
      IF(SOME) WRITE(IW,9300) NPASS,NTOT
      IF (EXETYP.EQ.CHECK) GO TO 700
C
      CALL RAOPEN(IDAF20,X(LIODA),0,NDAR20,L2,NPRINT)
      MINPQ=1
  210 CONTINUE
      MAXPQ=MIN(L2,MINPQ+LPASS-1)
      NUMPQ=MAXPQ-MINPQ+1
      CALL MCXTR3(X(LPQRJ),X(LVEC),X(LFCK),X(LDEN),X(LXX),X(LIX),
     *            X(LFCK),X(LMOLAB),X(LWRK),
     *            IJKO,IJKT,NPRINT,ECORE,DOFOCK,
     *            NUMPQ,MINPQ,MAXPQ,IDAF20,X(LIODA),
     *            X(LGHND),X(LXINTS),X(LDDIJ),MAXG,NSH2)
      MINPQ=MAXPQ+1
      IF(MINPQ.LE.L2) GO TO 210
      DEBUG=NPRINT.GE.2
      CALL TR6MC(X(LVEC),IDAF20,X(LIODA),X(LFCK),X(LDEN),
     *           X(LWRK),X(LIWRK),L1,X(LMOIRP),IJKT,L2,DEBUG,
     *           CUTTRF,NINT,X(LXBUF),X(LIXBUF))
      CALL RACLOS(IDAF20,'DELETE')
C
C     ----- ALL IS DONE -----
C
  700 CONTINUE
      CALL RETFM(NEED2)
      CALL RETFM(NEEDV)
      CALL RETFM(NEEDD)
C
      IF(.NOT.DIRTRF) CALL SEQREW(IJKO)
      CALL SEQREW(IJKT)
C
      IF(SOME) THEN
         WRITE(IW,9050) NINT
         IF(DOFOCK  .AND.  NCORBS.GT.0) WRITE(IW,9040) ECORE
         WRITE(IW,*) '... END OF INTEGRAL TRANSFORMATION ...'
         CALL TEXIT(2,2)
      END IF
C
      NT = NTSAVE
      IF(NOSYMT.EQ.1) CALL SYMON
      RETURN
C
 9000 FORMAT(/5X,44('-')/
     *        5X,'PARTIAL TWO ELECTRON INTEGRAL TRANSFORMATION'/
     *        5X,44('-'))
 9010 FORMAT(/1X,'NUMBER OF CORE MOLECULAR ORBITALS     =',I5/
     *        1X,'NUMBER OF OCCUPIED MOLECULAR ORBITALS =',I5/
     *        1X,'TOTAL NUMBER OF MOLECULAR ORBITALS    =',I5/
     *        1X,'TOTAL NUMBER OF ATOMIC ORBITALS       =',I5/
     * 1X,'THRESHOLD FOR KEEPING TRANSFORMED 2E- INTEGRALS =',1P,E10.3)
 9020 FORMAT(1X,'AO INTEGRALS WILL BE CALCULATED IN DIRECT MODE...')
 9030 FORMAT(1X,'AO INTEGRALS WILL BE READ IN FROM DISK...')
 9040 FORMAT(1X,'----- FROZEN CORE ENERGY = ',F20.10)
 9050 FORMAT(1X,'TOTAL NUMBER OF TRANSFORMED 2E- INTEGRALS KEPT =',I10)
C
 9100 FORMAT(1X,'# OF WORDS AVAILABLE = ',I10/
     *       1X,'# OF WORDS NEEDED    = ',I10,
     *          ' FOR IN MEMORY TRANSFORMATION')
 9110 FORMAT(/' PARALLEL ONLY WORKS WITH THE SEGMENTED ALGORITHM.',
     *       /' ADJUSTING MEMORY TO USE SEGMENTED ALGORITHM.'/)
 9120 FORMAT(/1X,'CHOOSING IN MEMORY PARTIAL TRANSFORMATION...')
C
 9200 FORMAT(1X,'FOR THE SEGMENTED TRANSFORMATION:'/
     *       1X,'MINIMUM=',I10,
     *           ' WORDS FOR 1 MOLECULAR ORBITAL PER PASS'/
     *       1X,'MAXIMUM=',I10,
     *           ' WORDS FOR ALL MOLECULAR ORBITALS IN 1 PASS'/
     *       8X,'(',I10,
     *           ' EXTRA WORDS WOULD INCLUDE AN EXTRA ORBITAL/PASS)')
 9210 FORMAT(/' THERE IS NOT ENOUGH MEMORY TO RUN THE TRANSFORMATION',
     *       /' IN PARALLEL.  INCREASE MEMORY BY AT LEAST',I10,' WORDS')
 9220 FORMAT(1X,'SEGMENTED PARTIAL TRANSFORMATION WOULD USE',
     *          I10,' WORDS,'/
     *       1X,'DISTRIBUTING',I4,' PASSES EACH CONTAINING',I4,
     *          ' ORBITALS OVER',I4,' PROCESSORS.')
 9230 FORMAT(/1X,'CHOOSING SEGMENTED PARTIAL TRANSFORMATION...')
C
 9300 FORMAT(/' CHOOSING OUT-OF-MEMORY BIN-SORT TRANSFORMATION...'
     *       /' # PASSES     =',I10
     *       /' # WORDS USED =',I10)
 9310 FORMAT(/' NOT ENOUGH MEMORY TO TRANSFORM THE 2E-INTEGRALS'
     *       /' INCREASE MEMORY BY AT LEAST',I10,' WORDS')
 9320 FORMAT(1X,'THE BIN SORT TRANSFORMATION DOES NOT RUN IN PARALLEL')
 9400 FORMAT(1X,'ASSIGNING PASS #',I4,' TO A DIFFERENT PROCESSOR.')
 9410 FORMAT(1X,'PASS #',I4,' TOOK',F12.2,' SECONDS.')
      END
