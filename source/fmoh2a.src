c 21 May 13 - HN  - two-electron contributions to FMO Hessian
c
C*MODULE FMOH2A    *DECK ESDDV2D
C>
C>     @brief Second order derivative for two-electron integral
C>
C>     @details Calculate two-electron integral terms.
C>
C>     @author Hiroya Nakata
C>
      subroutine ESDDV2D( IFG,JFG,LFG,L1,L1I,L1J,l1K,NAK, NBK,NATK, 
     *     ESPA,IAGLOB,EG, EH,l2IJ,NQMTFG,
     *     WRK,WRK1,LAYFRG,IDMREC0,DA,FD,FCM) 
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (HALF=0.5D+00,thrush=1.0D+04)
      PARAMETER (MXGSH=30,MXG2=MXGSH*MXGSH,MAXL=5,MXRT=100)
      PARAMETER (MXGTOT=20000, MXSH=5000, MXATM=2000)
      LOGICAL GOPARR,DSKWRK,MASWRK,SAVGOP
      LOGICAL LARGEPRI,ESPPAR,BSSEDIM,NXT,PACK2E
      logical DODDCOR
      logical fastvesp
C
      DIMENSION ESPA(*),WRK(*),WRK1(*),DA(*)
      DIMENSION IAGLOB(*),LAYFRG(*)
      DIMENSION EG(3,*),EH(9,*),IDMREC0(*)
      DIMENSION NQMTFG(*),FCM(natfmo*3,*)
      DIMENSION FD(*)
      DIMENSION KARTEN(0:MAXL-1)
C
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FMOOPT/ ESPSCA(9),RESPAP(2),RESPPC(2),RESDIM,RESTRI(4),
     *                RCORSD,RESPCT,CONVFG,CNVDMP,COROFF,RFLMO(4),
     *                ORSHFT,ORSHFT2,CNVAFO,ASCREEN(4),IXESP,MXITFG,
     *                NGUESS,NBSSE,MODORB,MODPAR,IRSTSTP,IRSTLAY,NPRFMO,
     *                NFMOPAL,MODPRP,MAXL1C,IPIEDA,MODGRD,MODESP,IVMUL,
     *                MODLMO,NOPDEN,MOFOCK,modfd,modfmm,ncentm
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
     *                lzlmfrgv,lYlmfrgv
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO,nzmtfmo
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /RESTAR/ TIMLIM,IREST,NREC,INTLOC,IST,JST,KST,LST
C
      COMMON /SCYVEC/ IDFYVEC,LIPTYVEC,LIPTYA
      COMMON /SCZLAG/ LZVLAG,LZVWRK,LYALAG,LYAWRK
      DATA KARTEN/1,4,6,10,15/ 
c
C     Two electron derivative term
C    Main driver for two electron integral in FMO hessian
C     dummy 
      if(lfg.ne.0) write(*,*) "lfg=",lfg
C
C    initial condition
      L1A     = L1
      L3A     = L1 * L1
      ILAY    = ICURLAY
      KFG0    = 1
      KFG1    = NFG
      NATA    = NAT
      IZ      = 1
      RESPAPI =RESPAP(IZ)
      RESPPCI =RESPPC(IZ)
c
      ESPPAR=MOD(MODPAR/2,2).NE.0.AND.GOPARR
c
      CALL MONBSR(NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,NSHELL,NGAU,ENUCR,
     *            NAT0,ICH0,MUL0,NUM0,NQMT0,NE0,NA0,NB0,
     *            NCURSH,NGAU0,ENUCR0)
      NE0C=NE0+ICH0
      LOADHF=MOD(MODPAR,2)
      LARGEPRI=LOADHF.EQ.1.AND.ESPPAR
      DODDCOR=IAND(IXESP,1024).NE.0
C
      MAXIC = NATFMO
      call setatz(1,MAXIC,fastvesp,lfvesp,needfv)

C     ----- INITIALIZATION FOR PARALLEL WORK -----
C
      NXT = IBTYP.EQ.1
      NEXT  = -1
      KOUNT = -1
C
C     ESP WILL BE COMPUTED IN THE DIRECT FASHION
C
      DO 100 KKFG=KFG0,KFG1
        IF(LARGEPRI) THEN
          KFG=IXFTCH(X(LLOADM),KKFG)
        ELSE
          KFG=KKFG
        ENDIF
C
        IF(IFG.EQ.KFG.OR.JFG.EQ.KFG) GOTO 100
C
        IF(ESPPAR) THEN
          KOUNT=KOUNT+1
          IF(GOPARR) THEN
            IF(NXT) THEN
              IF(KOUNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
              IF(NEXT.NE.KOUNT) GOTO 100
            ELSE
              IF(MOD(KOUNT,NPROC).NE.ME) GOTO 100
            ENDIF
          ENDIF
          SAVGOP=GOPARR
          GOPARR=.FALSE.
c         GOPARR IS SET TO .FALSE. TO PREVENT SHELL-BASED WORK DIVISION
C         INSIDE OF EXCHNG AND FMOESP. 
C         NOTE THAT SHELL-BASED WORK DIVISION IS USED FOR ESPPAR=.FALSE. 
        ENDIF
        KLAY=MIN(ILAY,LAYFRG(KFG))
        BSSEDIM=NBSSE.EQ.2.AND.IFMOSTP.EQ.5
        KFGX = KFG
C
C

        CALL MAKEMOL(KFGX,0,0,KLAY,0,NAT0,NCURSH,NGAU0,NE0C,ICH0,MUL0,
     *               .FALSE.)
C
        L1K=NUM-NUM0
        L2K=(L1K*L1K+L1K)/2
        L3K=L1K*L1K 
        natk = nat - nat0
C
        IREC0=IDMREC0(KLAY)
        IF(DODDCOR) THEN
          IREC0RHF=1
          IF(IREC0.EQ.1) IREC0RHF=NFG*2+1
          IREC0=IREC0RHF
        ENDIF
CC
        IDMREC0K=KFG+IREC0
        NQK  = IAND(NQMTFG(KFG),65535) 
        NAK  = ISHFT(IXFTCH(X(LNUMFRG),KFG),-16) 
        MULK = IXFTCH(X(LMULFG),KFG)
        NBK  = NAK-MULK+1
        NOCK = NAK
CC
        CALL RAREADS(IDAFMO,X(LIODFMO),wrk1(1+L2K+L3A),L3K+l1k,
     *               IDMREC0K,0)
        CALL DMTX2(WRK1,wrk1(1+L2K+l3A),NAK,L1K,L1K,NAK) 
        ncount = 0
        do iii = 1, NQK
          if(wrk1(l2k+l3A+L3k+iii).ge.thrush) ncount = ncount  + 1
        end do
        NVRK = NQK  - NOCK - ncount
        NROTK= NVRK * NOCK
C
C       ***  we can not use record 16 ( due to diminid)
        CALL DAREAD(IDAF,IODA,wrk1(1+l2k),l1A*l1A,15,0)
        CALL DMTX2(WRK,wrk1(1+L2K),NA0,L1A,L1A,NA0) 
C
        CALL BASCHK(LMAX)
        IF(LMAX.GE.5) THEN
           IF(MASWRK) WRITE(IW,*) 'FMO HAS NOT BEEN REVIEWED FOR H,I'
           CALL ABRT
        END IF
        NANGM= KARTEN(MAX(LMAX,1))
        MAXG = NANGM**4
C
        CALL VALFM(LOADFM)
        CALL GOTFM(NGOTMX)
C      LFDK is used for density like matrix
C               Fragment     IJ    K
C -----------------------------------------------------------------
C 1st   D_ij = \sum D_kl  ( k l | i j)^a        | l2k * natfmo * 3
C 2st   D_ij = \sum D_kl  ( i j | k l) * S_kl^b | l2ij* natk   * 3
C -----------------------------------------------------------------
        NUMTMP  = max(l2k * natfmo * 3,l2ij * natk * 3)
        NSH2    = (NSHELL + NSHELL * NSHELL)/ 2
        LFDK    = LOADFM  + 1
        LWRKLAG = LFDK    + NUMTMP
        LWRK2   = LWRKLAG + l2k * natk   * 3 
        LXCHNG  = LWRK2   + max(l3k,l3A) * 2 + l2IJ + l1A * 8
        LGHOND  = LXCHNG  + NSH2
        LDDIJ   = LGHOND  + MAXG
        LAST    = LDDIJ   + 49 * MXG2  
C
        NEEDK   =  LAST   - LOADFM -1
        if(NEEDK.gt.NGOTMX) then
            write(*,*) "Can not allocate  memory in fmohss"
            write(*,*) "NEED = ",NEEDK,"MAX =",NGOTMX
            call abrt
        end if
C
        CALL GETFM(NEEDK)
        call vclr(x(LFDK),1,NUMTMP)
        call vclr(x(LWRKLAG),1,l2k * natk   * 3)
c
        IST=1
        JST=1
        KST=1
        LST=1
        CALL JANDK
        CALL EXCHNG(X(LXCHNG),X(LGHOND),X(LDDIJ), NSH2,MAXG,INTTYP)
C
        call FMO2HSS(IFG,JFG,KFG,L1,l1K,IAGLOB,EG, EH,
     *     l2IJ,WRK,WRK1,DA,FD,X(LFDK),l2k,BSSEDIM,lfvesp,X(LXCHNG)) 
C
        l1 = l1A
        CALL DSCAL(3*natfmo*L2K,half,x(LFDK),1)
        do i = 1,natfmo*3
           II=0
           DO JJ=1,L1K
             KK = LFDK - 1 + l2k * (i-1)
             II = II   + JJ
             x(II+kk) = x(II+kk) + x(II+kk) 
           ENDDO
        end do
C     Calculate  S^a (i j | k l ) S^b etc. detail is (FMOHSS03.pdf)
        CALL FMOHSSLAG(IFG,JFG,KFG,L1A,L1I,L1J,l1K,nak,nbk,natk,
     *     ESPA, IAGLOB,l2IJ,WRK,WRK1,DA,X(LFDK),l2k,BSSEDIM,
     *     x(LWRKLAG),x(LYALAG),NROTK,NOCK,NVRK,NVRK+ncount,NOCK,NATA,
     *     x(LIPTYA),FCM,RESPAPI,RESPPCI,x(lwrk2),
     *     FD,x(LGHOND),X(LXCHNG))
c 
        IF(ESPPAR) GOPARR=SAVGOP
C
        CALL RETFM(NEEDK)
C
C
  100 CONTINUE
c
C   DBG
c     NEGH = 3*NATFMO+9*(NATFMO*(NATFMO+1))/2
c     IF(GOPARR) CALL DDI_GSUMF(1625,EG,NEGH)
c     IF(MASWRK) THEN
c        WRITE(*,*) "checkcheckcheck01",KFG
c        CALL HSSPRT(NATFMO,EG,EH)
c     END IF
c     IF(GOPARR) CALL DSCAL(negh,1.0D+00/NPROC,EG,1)
c     RESTORE THE PRISTINE MONOMER(DIMER) CONFIGURATION
      IF (GOPARR) THEN
          CALL DDI_GSUMF(1605,FD,3*NATFMO*L2IJ)
      END IF
      CALL DSCAL(3*NATFMO*L2IJ,half,FD,1)
      do i = 1,natfmo*3
         II=0
         DO JJ=1,L1A
           II = II+JJ
           FD(II+l2IJ*(i-1)) = FD(II+l2IJ*(i-1)) +  FD(II+l2IJ*(i-1)) 
         ENDDO
c        val = TRACEP(DA,FD(l2IJ*(i-1)+1),L1A) 
c        write(*,*) "gradient =",i,val
      end do
C
C     IT IS IMPORTANT TO RESET NCURSH SO THAT 2E INTEGRALS WITHIN THE MONOMER
C     (DIMER) DURING THE FOLLOWING SCF ARE COMPUTED PROPERLY.
      NCURSH=0
      L1 = L1A
      if(fastvesp) call retfm(needfv)
c
      return
      end
c
C*MODULE FMOH2A    *DECK FMO2HSS
C>
C>     @brief Preparation for second order derivatives
C>
C>     @details Allocate memory, construct shell density.
C>
C>     @author Hiroya Nakata
C>
      subroutine FMO2HSS(IFG,JFG,KFG,L1,l1K, IAGLOB,EG,EH,
     *     l2IJ,WRK,WRK1,DA,FD,FDK,l2k,BSSEDIM,lfvesp,XCHNG) 

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MXSH=5000, MXAO=8192)
      PARAMETER (MXGTOT=20000)
      LOGICAL BSSEDIM
c
      DIMENSION WRK(*),WRK1(*),DA(*)
      DIMENSION IAGLOB(*)
      DIMENSION EG(3,*),EH(9,*)
      DIMENSION FD(l2ij,*),FDK(l2k,*),XCHNG(*) 
      COMMON /FMCOM / X(1)
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO,nzmtfmo
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
     *                lzlmfrgv,lYlmfrgv
C
C
      DATA SDEFAULT/8HDEFAULT /
      DATA RHF/8HRHF     /
      CALTYP = SDEFAULT
C
      DO 5 I=1,L1+l1k
         IA(I) = (I*I-I)/2
    5 CONTINUE
C     BODY OF THE SUBPROGRAM
      NSH2=(NSHELL*NSHELL+NSHELL)/2
      l1ij=l1
      l1=max(l1ij,l1k)
      l2=max(l2IJ,l2k)
C     ---------------
C     ALLOCATE MEMORY
C     ---------------
      NIJKL10=0
      NIJKL10 = 9*6*6*6*6
      CALL GOTFM(NGOTMX)
      CALL VALFM(LOADFM)
      LDTOT = LOADFM + 1
      LDSPN = LDTOT + L2
      LAST  = LDSPN + L2 
C
      LDSH  = LAST
      LDSHB = LDSH   + NSH2
      LWX   = LDSHB  + NSH2
      LWY   = LWX   + 2808
      LWZ   = LWY   + 2808
      LG1   = LWZ   + 2808 
      LG2   = LG1   + MAX(2808,3888)  
      LG3   = LG2   + MAX(2808,3888)
      LG4   = LG3   + MAX(2808,3888)
      LG5   = LG4   + MAX(4752,3888)
      LG6   = LG5   +     4752
      LG7   = LG6   +     4752
      LG8   = LG7   + MAX(6084,3888)
      LG9   = LG8   + MAX(6084,3888)
      LG10  = LG9   + MAX(6084,3888)
      LAST  = LG10  + 10*NIJKL10
C
C
      NEED = LAST-LOADFM-1
      CALL GETFM(NEED)
C     Out side shell
      DUMMY=0.0D+00
      CALL SHLDEN(RHF,wrk1,wrk1,DUMMY,X(LDSH),IA,
     *            L1ij,L2K,NSH2,1)
      NSHSAV=NSHELL
      NSHELL=NCURSH
      NCURSH=0
C     inside shell
      CALL SHLDEN(RHF,DA,DA,DUMMY,X(LDSHB),IA,
     *           L1IJ,L2IJ,NSH2,1)
      NCURSH=NSHELL
      NSHELL=NSHSAV
C
C     -------------------
C     END ALLOCATE MEMORY
C     -------------------
      call FMO2HSSX(IFG,JFG,KFG,L1IJ,
     *     IAGLOB,EG, EH,l2IJ,WRK,WRK1,DA,FD,
     *     FDK,l2k,CALTYP,X(LDTOT),X(LDSPN),x(LWX),x(LWY),x(LWZ),
     &     X(LG1),X(LG2),X(LG3),X(LG4),X(LG5),X(LG6),X(LG7),X(LG8),
     &     X(LG9),X(LG10),NIJKL10,
     &     IA,NSH2,L2,BSSEDIM,x(lindat),lfvesp,XCHNG,x(LDSH),x(LDSHB))
c
      l1 = l1ij
      CALL RETFM(NEED)
      return
      end
C
C*MODULE FMOH2A    *DECK FMO2HSSX
C>
C>     @brief   Second order derivative of two electron integral
C>
C>     @details Calculate two electron integral between IJ and K fragment.
C>
C>     @author Hiroya Nakata
C>
      subroutine FMO2HSSX(IFG,JFG,KFG,L1IJ,
     *     IAGLOB,EG, EH,l2IJ,WRK,WRK1,DDA,FD,FDK,l2k,
     *     CALTYP, DTOT,DSPN,
     &     WX,WY,WZ,GIJKL1,GIJKL2,GIJKL3,GIJKL4,GIJKL5,GIJKL6,
     &     GIJKL7,GIJKL8,GIJKL9,GIJKL10,NIJKL10,
     &     IA,NSH2,L2,BSSEDIM,indat,lfvesp,XCHNG,DSH,DSHB)

      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C     ARGUMENTS
c     DOUBLE PRECISION MCSCF
C
C    FOR FMO hessian
      LOGICAL   BSSEDIM
      DIMENSION EH(*),EG(*), FD(l2ij,*),FDK(l2k,*),
     *        IAGLOB(*),DDA(l2ij),WRK(*),WRK1(*),indat(*)

C
C    Two electron integral
C    FOR SECOND DERIVATIVES
      DIMENSION DTOT(L2),DSPN(L2),
     *          GIJKL1(*),GIJKL2(*),GIJKL3(*),GIJKL4(*),
     *          GIJKL5(*),GIJKL6(*),GIJKL7(*),GIJKL8(*),GIJKL9(*),
     *          WX(2808),WY(2808),WZ(2808),
     *          GIJKL10(NIJKL10,10),
     *          DSH(NSH2),XCHNG(NSH2),DSHB(NSH2)
c     DIMENSION LENSHL(5)
      DIMENSION IA(*)
C logic
      LOGICAL NSKIP1,NSKIP2,NSKIP3,NSKIP4
      LOGICAL NSKIP5,NSKIP6,NSKIP7,NSKIP8,NSKIP9
      LOGICAL SHLON,SKIP
      LOGICAL FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      LOGICAL GOPARR,DSKWRK,MASWRK,NXT
      LOGICAL BDEFAULT,BFIRST,BSECOND
      LOGICAL bimer(3)


      DATA SSECOND/8HSECOND  /
C
      PARAMETER (MXGTOT=20000, MXSH=5000)
C     INTEGRAL WORK AREAS, WORST CASE FOR SPD FUNCTIONS IS
C        D'DDD  = (P+F)DDD     = 13* 6*6*6 = 2808 = G1-G3 ARRAYS
C        D''DDD = (S+D+G)DDD   = 22* 6*6*6 = 4752 = G4-G6 ARRAYS
C        D'D'DD = (P+F)(P+F)DD = 13*13*6*6 = 6084 = G7-G9 ARRAYS
C     NOTE THAT -JDDFCK- USES G1-G4 AND G7-G9 WITH DIFFERENT LENGTHS.
C     BODY OF THE SUBPROGRAM
      COMMON /ATMJDD/ NATOM(4),NPASS
      COMMON /HSSPAR/ FIRST,SECND,CPHF,BOTH,MFIRST,MSECND,MCPHF
      COMMON /JDDSKP/ MSHL(4),MGETDG(3),SHLON(6),SKIP(4)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      common /shlexc/ norgsh(3),norgsp(3),iexch,nangm,ngth(4)
      COMMON /SKPJDD/ NSKIP1,NSKIP2,NSKIP3,NSKIP4,NSKIP5,
     *                NSKIP6,NSKIP7,NSKIP8,NSKIP9
      COMMON /TMVALS/ TI,TXX,TIM
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO,nzmtfmo
C
      PARAMETER (ZERO=0.0D+00)
C
C
      DATA SDEFAULT/8HDEFAULT /,SFIRST/8HFIRST   /,SSECOND/8HSECOND  /
C
      bimer(1)=.false.
      bimer(2)=.false.
      bimer(3)=.false.
      if(BSSEDIM) write(*,*) "BSSEDIM =",BSSEDIM,KFG,NSH2,
     *            wrk(1),indat(1),IFG,JFG,bimer(1)
C
!     WRK --->   IJ fragment Density  ----> K, L shell
!     WRK1--->    K fragment Density  ----> I, J shell
      CALTYP   = SDEFAULT
      BDEFAULT = CALTYP.EQ.SDEFAULT
      BFIRST   = CALTYP.EQ.SFIRST
      BSECOND  = CALTYP.EQ.SSECOND
      IF(.NOT.(BDEFAULT.OR.BFIRST.OR.BSECOND)) CALL ABRT
C     ----- 2 E- CONTRIBUTION TO ENERGY GRADIENT AND HESSIAN -----
      NIJKL1 = 2808
      NIJKL2 = 4752
      NIJKL3 = 6084
      NSKIPF = 0
      NCALC  = 0
      DATOL  = 1.0D-09
      DABTOL = 1.0D-09
c     ----- PRECALCULATE SOME INDICES -----
c
      CALL STVJDD
c
c     ----- INITIALIZATION FOR PARALLEL WORK -----
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
c
c     start shell loop
      TIM = ZERO
      CALL TSECND(TIM)
c
      ngth(4) = 1 
      ngth(3) = ngth(4) * NANGM
      ngth(2) = ngth(3) * NANGM
      ngth(1) = ngth(2) * NANGM
      do i=1,3
         norgsh(i) = 0
         norgsp(i) = 0
      enddo
      NSCHWNZB= 0
c
      jj0=ncursh+1
      DO 920 II = ncursh+1,NSHELL
        DO 900 JJ = jj0,II
C
C         ----- GO PARALLEL! -----
C
          IF (NXT .AND. GOPARR) THEN
            MINE = MINE + 1
            IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
            IF (NEXT.NE.MINE) GO TO 900
          END IF
          NSCHWNZB=NSCHWNZB+1
          DO 880 KK = 1,ncursh
            DO 860 LL = 1,KK
c  
              IF ((.NOT.NXT) .AND. GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 860
              END IF
c  
c             ----- (II,JJ//KK,LL) -----
              IEXCH = 1
              QQ4 = 1.0D+00
c
              IJIJ = IA(MAX(II,JJ))+MIN(II,JJ)
              KLKL = IA(MAX(KK,LL))+MIN(KK,LL)
              GMAX = XCHNG(IJIJ)*XCHNG(KLKL)
C            inside  max density
              DAMAX= DSHB(KLKL) * GMAX
C            outside max density
              IJIJ2= IA(MAX(II-ncursh,JJ-ncursh))
              IJIJ2= IJIJ2 + MIN(II-ncursh,JJ-ncursh)
              DKMAX= DSH(IJIJ2) * GMAX
c  
              CALL JDDATM(II,JJ,KK,LL,.false.)
              IF(NPASS.EQ.0) GO TO 860
              ISH = MSHL(1)
              JSH = MSHL(2)
              KSH = MSHL(3)
              LSH = MSHL(4)
              NSKIP1 = .NOT. ( MFIRST .AND. .NOT. SHLON(1))
              NSKIP2 = .NOT. ( MFIRST .AND. .NOT. SHLON(2))
              NSKIP3 = .NOT. ( MFIRST .AND. .NOT. SHLON(3))
              NSKIP4 = .NOT. ( MSECND .AND. .NOT. SHLON(1))
              NSKIP5 = .NOT. ( MSECND .AND. .NOT. SHLON(2))
              NSKIP6 = .NOT. ( MSECND .AND. .NOT. SHLON(3))
              NSKIP7 = .NOT. ( MSECND .AND. .NOT. SHLON(4))
              NSKIP8 = .NOT. ( MSECND .AND. .NOT. SHLON(5))
              NSKIP9 = .NOT. ( MSECND .AND. .NOT. SHLON(6))
C
              CALL JDDDFMO(ISH,JSH,KSH,LSH,QQ4,.true.,
     *             IA,DTOT,DSPN,DABMAX,DDA,WRK1,l1ij)

c             write(*,*) "MAXVAL =",GMAX
              IF(DABMAX*GMAX.LT.DABTOL.and.
     *           DAMAX.lt.DATOL.and.DKMAX.lt.DATOL) THEN
                 NSKIPF=NSKIPF+1
                 GO TO 860 
              ELSE
                 NCALC=NCALC+1
              END IF
              CALL JDDSHL(ISH,JSH,KSH,LSH)
              CALL JDDIDX
c
C
C     ----- INITIALIZE TO ZERO -----
C 
              CALL VCLR(GIJKL1,1,NIJKL1)
              CALL VCLR(GIJKL2,1,NIJKL1)
              CALL VCLR(GIJKL3,1,NIJKL1)
              CALL VCLR(GIJKL4,1,NIJKL2)
              CALL VCLR(GIJKL5,1,NIJKL2)
              CALL VCLR(GIJKL6,1,NIJKL2)
              CALL VCLR(GIJKL7,1,NIJKL3)
              CALL VCLR(GIJKL8,1,NIJKL3)
              CALL VCLR(GIJKL9,1,NIJKL3)
c
C     ----- COMPUTE TWO-ELECTRON INTEGRALS -----
c
              CALL JDDGEN(GIJKL1,GIJKL2,GIJKL3,GIJKL4,GIJKL5,GIJKL6,
     *            GIJKL7,GIJKL8,GIJKL9)
              CALL JDDFSD(GIJKL1,GIJKL2,GIJKL3,GIJKL4,GIJKL5,GIJKL6,
     *            GIJKL7,GIJKL8,GIJKL9,GIJKL10,NIJKL10,WX,WY,WZ)
c
C         CALCULATE FOR Delta D * V^(ab)
              CALL FMOJDDEGH(EG,EH,ISH,JSH,KSH,LSH,.false.,IAGLOB,
     *             lfvesp)
C
C         CALCULATE FOR V_kl^a(kl \in IJ) or V_ij^b (ij \in K)
              IF(DAMAX.lt.DATOL.and.DKMAX.lt.DATOL) THEN
C         Skip calculating (ii | jj)^a
              ELSE
                CALL FMOJDDFCK(MCPHF,BFIRST,BSECOND,
     &                      QQ4,FD,GIJKL1,GIJKL2,
     &                      GIJKL3,GIJKL4,GIJKL7,GIJKL8,GIJKL9,
     &                      DDA,l1ij,WRK1,FDK,l2k,l2ij,iaglob,lfvesp)
C
              END IF
  860       CONTINUE
  880     CONTINUE
  900   CONTINUE
  920 CONTINUE
c
      IF(MASWRK) write(*,*) "NSKIP NCALC =",NSKIPF,NCALC
c
      IF (GOPARR) THEN
         IF(NXT) CALL DDI_DLBRESET
      END IF
c
      return
      end
c
C*MODULE FMOH2A    *DECK FMOHSSLAG
C>
C>     @brief   Pure two-electron contributions to FMO Hessian 
C>
C>     @details Calculate S^a (ij | kl) * S^b, S^a (ij | kl) * U^b and U^a (ij | kl) U^b
C>
C>     @author Hiroya Nakata
C>
      SUBROUTINE  FMOHSSLAG(IFG,JFG,KFG,L1A,L1I,L1J,l1K,nak,nbk,natk,
     *     ESPA, IAGLOB,l2IJ,
     *     WRK,WRK1,DA,FDK,l2k,BSSEDIM,
     *     WRKLAG,YALAG,NROTK,NOCK,NVRK,
     *     NVIRA,NOCCA,NATA,
     *     IPTYA,FCM,RESPAPI,RESPPCI,wrk2,FD,GHOND,XCHNG)
c
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (HALF=0.5D+00,ZERO=0.0D+00,TWO=2.0D+00,ONE=1.0D+00)
      PARAMETER (FOUR=4.0D+00)
      PARAMETER (MXGTOT=20000, MXSH=5000, MXAO=8192)
      PARAMETER (MAXL=5)
      LOGICAL GOPARR,DSKWRK,MASWRK,DIRSAV
      LOGICAL SGOPARR
      LOGICAL ESPAP,BSSEDIM,DIRSCF,FDIFF
      logical SCHWRZ,ESDDER,ESDER
C
      DIMENSION ESPA(*),WRK(*),WRK1(*),DA(*)
      DIMENSION IAGLOB(*)
      DIMENSION FDK(*),GHOND(*),XCHNG(*)
      DIMENSION KARTEN(0:MAXL-1)
      DIMENSION WRKLAG(*),YALAG(*),IPTYA(*)
      DIMENSION FCM(natfmo*3,*),wrk2(*),FD(l2ij,*)
      COMMON /FMCOM / X(1)
      COMMON /SHLEXC/ NORGSH(3),NORGSP(3),IEXCH,NANGM,NGTH(4)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /MACHIN/ NWDVAR,MAXFM,MAXSM,LIMFM,LIMSM
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,liactfg,lcrfrg,
     *                lzlmfrgv,lYlmfrgv
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO,nzmtfmo
      COMMON /OPTSCF/ DIRSCF,FDIFF
C
      DATA KARTEN/1,4,6,10,15/ 
      DATA RHF/8HRHF     /
c
C     Calculate  S^a (i j | k l ) S^b etc.
c
CC    DA  maxm2d  : Delta DIJ - DI - DJ
CC    DB  maxm2d  : free 
CC    DC  =   DA
CC   WRK   |  l1  + L2 + l3  : DIJ
CC  WRK1  l1 * 8  + l2 + l3*2
C          | wrk1(1)         : DK
C          | wrk1(l2k+1)     : C in IJ fragment
C          | wrk1(l2k+l3A+1) : C in K fragment
C   WRK2  free    : l3k + l3A
C   First make (FDK^a * S^b||U^b) terms
      L3A    = L1A * L1A 
      L3i    = l1i * l1i
      L3j    = l1j * l1j
      L3k    = l1k * l1k
      NQMTA  = NVIRA + NOCCA
      NQMTK  = NOCK  + NVRK
      NQMTK  = NQMTA
      NTMPSH = NCURSH
      ILAY   = ICURLAY
      if(NQMTA.eq.0) write(*,*) "dummy =",l3i,l3j,nak,nbk
C
C    (2012 11/12)it is likely to produce program error | i will check carefully later.
      NATSAV= NATK
      if(goparr) then
        SGOPARR=GOPARR
        goparr=.false.
      end if
      CALL EXTSDER(WRK2,WRKLAG,L1K,natk,.TRUE.,.TRUE.,l1A)
      NATK  = NATSAV
      if(SGOPARR) GOPARR=SGOPARR
c
C
      LCK = l2k + l3A + 1
C
      do ixyz = 1,3*natfmo
          ii = (ixyz - 1) * l2k + 1
          if(goparr) then
            SGOPARR=GOPARR
            goparr=.false.
          end if
          CALL TFTRI(WRK2,FDK(ii),wrk1(LCK),WRK(l2ij+1),NQMTK,l1k,l1k)
          if(SGOPARR) GOPARR=SGOPARR
          do jat=1,natk
             jzat = IAGLOB(jat+nata)
             do jxyz = 1,3
               jzxyz = (jzat - 1) * 3 + jxyz
               jj    = (jat  - 1) * 3 + jxyz - 1
               jj    = jj * l2k   + 1
               CALL TFTRI(WRK2(l3k+1),WRKLAG(jj),WRK1(lck),
     *                    wrk(l2ij+1),nqmtk,l1k,l1k)
               val = TRACEP(wrk2,wrk2(l3k+1),nock)
c              write(*,*) "val01 = ",val ,ixyz,jzxyz
               FCM(ixyz,jzxyz) =  FCM(ixyz,jzxyz) - val * two
               FCM(jzxyz,ixyz) =  FCM(jzxyz,ixyz) - val * two
               call cpytsq(WRK2,wrk2(l3k+1),nqmtk,1)
               ii = (jat - 1) * 3 + jxyz  - 1
               ii = IPTYA(kfg)    + NROTK * ii
               val = zero 
               irot = 0
               do kk = 1 , nvrk
                  do ll = 1, nock
                     korb = kk   + nock 
                     klx  = l3k  + nqmtk * (korb -1) + ll 
                     val  = val  + YALAG(irot+ii) * wrk2(klx) 
                     irot = irot + 1
                  end do
               end do
c              write(*,*) "val02 = ",val ,ixyz,jzxyz
               FCM(ixyz,jzxyz) =  FCM(ixyz,jzxyz) + val * four
               FCM(jzxyz,ixyz) =  FCM(jzxyz,ixyz) + val * four
             end do
          end do
      end do
C
C   Second construct density like terms 
C     Construct WRKLAG : ( ij | kl )  2 (C * U^K * C)-  (D * S^K_{kl} * D)  
C  
      do ixyz = 1, natk * 3
C       - 1/4  D * S^a * D
        call cpytsq(WRK1,wrk2(l3k+1),l1k,1) 
        ii = (ixyz - 1) * l2k + 1
        CALL TFTRI(WRK2,wrklag(ii),wrk2(l3k+1),WRK(l2ij+1),l1k,l1k,l1k)
C      check scaler half || one
        call dscal(l2k,-half,wrk2,1) 
        call DCOPY(l2k,wrk2,1,wrklag(ii),1) 
        iii = ii
C       TWO * C(l1k,nqmtk) * U(nocc,nvir) * C^T(l1k,nqmtk)
        ii = IPTYA(kfg) + NROTK * (ixyz - 1)
        jj = nock * l1k 
        CALL DGEMM('N','N',l1k,nvrk,nock,one,wrk1(lck),l1k,
     *             YALAG(ii),nock,ZERO,wrk(l2ij+1),L1K)
        CALL DGEMM('N','T',l1k,l1k,nvrk,one,wrk(l2ij+1),l1k,
     *                wrk1(lck+jj),L1k,ZERO,wrk2(l3k+1),l1k)
     
        CALL SQ2TRI(L1K,L1K,WRK2(l3k+1),WRK2,one)
        CALL DAXPY(L2K,four,WRK2,1,WRKLAG(iii),1)
c       write(*,*) "C(l1,nvir) U(nocc,nvir) C^T(l1,nocc)",ixyz
c       CALL PRTRI(wrk2,l1k) 
      end do 
C
      NSH2 = (NSHELL*NSHELL+NSHELL)/2
      CALL BASCHK(LMAX)
      NANGM  = KARTEN(MAX(LMAX,1))
      MAXG   = NANGM**4
      LDENA  = LFMODA
C   ldenp is never used
c     LDENP  = 0
      DIRSAV=DIRSCF
      DIRSCF=.TRUE.
      SCHWRZ =.TRUE. 
      ESDDER =.TRUE.
      SCFTYP1=RHF
      ESDER  =.FALSE.
C    Notice that it dose not work if PC approximation is on.
      ESPAP  =.FALSE.
C
      CALL VALFM(LOADFM)
      LDSH    = LOADFM  + 1
      LDSHB   = LDSH    + NSH2
      LAST    = LDSHB   + NSH2
      NEEDL   = LAST    - LOADFM - 1
      CALL GETFM(NEEDL)
C    shell density
      IF(SCHWRZ) THEN
        DUMMY = 0.0D+00
        IF(ESPAP) THEN
         CALL SHLDEND(SCFTYP1,wrk1,wrk,DUMMY,X(LDSH),L1A,1)
        ELSE
C       outer part of  fragment shell
          CALL SHLDEN(SCFTYP1,wrklag,wrklag,DUMMY,X(LDSH),IA,
     *                L1A,L2K,NSH2,natk*3)
          IF(ESDDER) THEN
           NSHSAV=NSHELL
           NSHELL=NCURSH
           NCURSH=0
C         inside shell
           CALL SHLDEN(SCFTYP1,DA,DA,DUMMY,X(LDSHB),IA,
     *                L1A,L2IJ,NSH2,1)
           NCURSH=NSHELL
           NSHELL=NSHSAV
          ENDIF
        ENDIF
      END IF
C
c     INITIALISE TWO-ELECTRON INTEGRALS
c     POPLE INTEGRALS USE A SEPARATE COORDINATE COMMON BLOCK INITIALISED
c     ABOVE, ETC. ?ST MUST BE RESET SO THAT NO PHONEY RESTART IS DONE.
C
c
c     ----- EXCHANGE INTEGRALS FOR DIRECT SCF THRESHOLD TESTS -----
c       COMPUTED FOR THE COMBINED SYSTEM, NO NEED TO ADJUST INDICES.
      NINT=0
      NSCHWZ=0
C      FA in fmo2ei
      call vclr(FDK, 1,l2ij * natk * 3)
C      FB in fmo2ei
      call vclr(ESPA,1,l2k)
      nxyz  = natk * 3
      LDEMP = LDENA
      LFG   = 0
cZ      WHAT I WANT IS BOTH ESPA and FDK.
C       The Combination is   LDENA ---> ESPA : \Delta D_IJ *  (IJ | ij)
C    and                     WRKLAG---> FDK  : (D S^a D)^K *  (ij |  K)
C       i.e.  FA * DB  ||  FB * DA  
      CALL FMO2EI(SCHWRZ,NINT,NSCHWZ,NSCHWZB,NSCHWNZB,L1A,L2K,
     *    XCHNG,NSH2,GHOND,MAXG,IA,LDENA,LDEMP,FDK,
     *    WRKLAG,ESPA,X(LDSH),X(LDSHB),X(LIAGLOB),
     *    X(LINDAT),X(LINDATG),BSSEDIM,RESPAPI,RESPPCI,ESPAP,
     *    ESDDER,ESDER,IFG,JFG,LFG,KFG,nxyz)
cZ
cZ
      CALL DSCAL(L2K, HALF,ESPA,1)
c     CALL DSCAL(L2IJ*natk*3,HALF,FDK,1)
      II = 0
      DO I=1,L1K
        II = II+I
        ESPA(II) = ESPA(II) + ESPA(II)
      ENDDO
      IF(GOPARR) CALL DDI_GSUMF(2418,ESPA,L2K)
C
      CALL RETFM(NEEDL)
C     ( ii | jm) * S^(ab,K){jm}
      CALL MAKEMOL(KFG,0,0,ILAY,0,0,0,0,0,0,0,.FALSE.)
      CALL VALFM(LOADFM)
      NGOTMX = LIMFM - LOADFM
      LSX    = 1     + LOADFM
      LSY    = LSX   + L2k
      LSZ    = LSY   + L2k
      LDSDX  = LSZ   + L2k
      LDSDY  = LDSDX + L3k
      LDSDZ  = LDSDY + L3k
      LDRG   = LDSDZ + L3k
      LLIMF  = LDRG  + NATk*NATk
      LLIMS  = LLIMF + NSHELL
      LDE    = LLIMS + NSHELL
      LEG3   = LDE   + NATK*3
      LEGI   = LEG3  + NATK*3
      LEHI   = LEGI  + NATK*3
      LAST   = LEHI  + 9 * (NATK+NATK*NATK)/2
      NEED   = LAST  - LSX
      IF(NEED.GT.NGOTMX) THEN
         IF (MASWRK) WRITE(IW,*) 'IN SD, NEED,NGOT=',NEED,NGOTMX
         CALL ABRT
      END IF
      CALL GETFM(NEED)
      CALL VCLR(X(LEGI),1,NATK*3)
      CALL VCLR(X(LEHI),1,9 * (NATK+NATK*NATK)/2)
      CALL VCLR(X(LSX),1,L2K)
      CALL VCLR(X(LSY),1,L2K)
      CALL VCLR(X(LSZ),1,L2K)
      CALL VCLR(X(LDSDX),1,L3K)
      CALL VCLR(X(LDSDY),1,L3K)
      CALL VCLR(X(LDSDZ),1,L3K)
C    Calculate S^ab terms
      CALL CPYTSQ(WRK1,wrk2(l3k+1),l1k,1)
      CALL TFTRI(WRK2,espa,wrk2(l3k+1),WRK(l2ij+1),l1k,l1k,l1k)
      CALL DSCAL(L2K,-half,wrk2,1)
      CALL SDSPD(X(LEGI),X(LEHI),WRK2,X(LSX),X(LSY),X(LSZ),
     *           X(LDSDX),X(LDSDY),X(LDSDZ),.false.,WRK(l2ij+1),.false.)
C     summing up contribution (\Delta D * S * D * (ii | uv)
      call addhss(natk,natfmo,x(LEHI),FCM,1,x(liaglob))
C    Reproduce S^a 
      CALL CNSTSAO(l1k,l2k,X(LDSDX),WRKLAG,natk,IA)
      IF(GOPARR) CALL DSCAL(l2k,ONE/NPROC,ESPA,1)
      CALL RETFM(NEED)
C
      do iat=1,natk
         izat = IAGLOB(iat)
         do ixyz = 1,3
           izxyz = (izat - 1) * 3 + ixyz
           ii    = (iat  - 1) * 3 + ixyz - 1
           ii    = ii * l2k + 1
C          S^a(l1k,l1k) * D(l1k,l1k) * 1/2  = X^a(l1k,l1k)
           call cpytsq(WRKLAG(ii),wrk2,l1k,1) 
           call cpytsq(wrk1,wrk2(l3k+1),l1k,1) 
           CALL DGEMM('N','N',l1k,l1k,l1k,half,wrk2,l1k,wrk2(l3k+1),
     *                L1k,ZERO,WRK(l2ij+1),L1K)
C          X^a(l1k,l1k) * (ii | kl)(l1k,l1k) = X2^a(l1k,l1k) 
           call cpytsq(ESPA,wrk2,l1k,1) 
           CALL DGEMM('N','N',l1k,l1k,l1k,one,wrk(l2ij+1),l1k,wrk2,
     *                L1k,ZERO,wrk2(l3k+1),L1K)
C          convert X2  from AO to MO  ---> wrk2(nqmt,nqmt)
           CALL DGEMM('N','N',l1k,NQMTK,l1k,one,wrk2(l3k+1),l1k,
     *                wrk1(lck),L1k,ZERO,wrk(l2ij+1),L1K)
           CALL DGEMM('T','N',NQMTK,NQMTK,l1k,one,wrk1(lck),l1k,
     *                wrk(l2ij+1),L1k,ZERO,wrk2,NQMTK)
           do jat=1,natk
c             jzat = IAGLOB(jat+nata)
              jzat = IAGLOB(jat)
              do jxyz = 1,3
                jzxyz = (jzat - 1) * 3 + jxyz
                jj    = (jat  - 1) * 3 + jxyz - 1
                jj    = jj * l2k + 1
C               S^b in MO basis
                CALL TFTRI(WRK(l2ij+1),WRKLAG(jj),WRK1(lck),
     *                     wrk2(l3k+1),nqmtk,l1k,l1k)
                call cpytsq(wrk(l2ij+1),wrk2(L3k+1),nqmtk,1) 
                val = zero
                do kk = 1 , nock
                   do ll = 1, nock
                      klx  = nqmtk * (kk - 1) + ll 
                      val  = val  + wrk2(klx) * wrk2(klx + l3k) 
                   end do
                end do
c               write(*,*) "val03 =",val
                FCM(izxyz,jzxyz) =  FCM(izxyz,jzxyz) + val * two 
                FCM(jzxyz,izxyz) =  FCM(jzxyz,izxyz) + val * two
c               U^a * S^b * (ii | jn)
                ii = (jat - 1) * 3 + jxyz - 1
                ii = IPTYA(kfg)    + NROTK * ii
                val = zero 
                irot = 0
                do kk = 1 , nvrk
                   do ll = 1, nock
                      korb = kk    + nock 
                      klx1 = nqmtk * (korb -1) + ll 
                      klx2 = nqmtk * (ll   -1) + korb
                      val  = val   + YALAG(irot+ii) * wrk2(klx1) 
                      val  = val   + YALAG(irot+ii) * wrk2(klx2) 
                      irot = irot  + 1
                   end do
                end do
                FCM(izxyz,jzxyz) =  FCM(izxyz,jzxyz) - val * four  
                FCM(jzxyz,izxyz) =  FCM(jzxyz,izxyz) - val * four  
c               write(*,*) "val04 =",val
               end do
           end do
         end do
      end do
C
C     U^a(m,j) * (ii | mn)(nqmt,nqmt) * U^b(n,j)
      if(goparr) then
        SGOPARR=GOPARR
        goparr=.false.
      end if
      CALL TFTRI(WRK2(l3k+1),espa,wrk1(LCK),WRK(l2ij+1),NQMTK,l1k,l1k)
      if(SGOPARR) GOPARR=SGOPARR
      call cpytsq(WRK2(l3k+1),wrk2,nqmtk,1) 
      do iat=1,natk
         izat = IAGLOB(iat)
         do ixyz = 1,3
           izxyz = (izat - 1) * 3 + ixyz
           ii = (iat - 1) * 3 + ixyz - 1
           ii = IPTYA(kfg)    + NROTK * ii - 1
           do jat=1,natk
              jzat = IAGLOB(jat)
              do jxyz = 1,3
                jzxyz = (jzat - 1) * 3 + jxyz
                jj    = (jat  - 1) * 3 + jxyz - 1
                jj    = IPTYA(kfg)     + NROTK * jj - 1
                val  = zero
C               U^a(m,j) * (ii | mn) * U^b(n,j)
                do 10 kk = 1 , nvrk
                  jrot = 0
                  do 20 ll = 1, nvrk 
                    nn  = (kk + nock - 1) * nqmtk + ll + nock
                    do 30 mm =1, nock
                      irot = (kk - 1) * nock + mm
                      jrot = jrot + 1    
                      val  = val+YALAG(irot+ii)*YALAG(jrot+jj)*wrk2(nn)
 30                 continue
 20               continue
 10             continue
C               U^a(m,k) * (ii | jk) * U^b(m,j)
                do 15 kk = 1 , nvrk
                  do 25 ll = 1, nock
                    do 35 mm =1, nock
                      nn   = (ll - 1) * nqmtk + mm 
                      irot = (kk - 1) * nock  + ll
                      jrot = (kk - 1) * nock  + mm    
                      val  = val-YALAG(irot+ii)*YALAG(jrot+jj)*wrk2(nn)
 35                 continue
 25               continue
 15             continue
c               write(*,*) "val05 =",val
                FCM(izxyz,jzxyz) =  FCM(izxyz,jzxyz) + val * two
                FCM(jzxyz,izxyz) =  FCM(jzxyz,izxyz) + val * two
              end do
           end do
         end do
      end do
C
      do iatm = 1,natk
          izatm = iaglob(iatm) 
          do itmp=1,3
            ixyz  = (iatm  - 1) * 3    + itmp
            izxyz = (izatm - 1) * 3    + itmp
            ii    = (ixyz - 1)  * L2IJ + 1
            CALL DAXPY(L2IJ,one,FDK(ii),1,FD(1,izxyz),1)
          end do
      end do
c
      DIRSCF=DIRSAV
      CALL MAKEMOL(IFG,JFG,0,ILAY,0,0,0,0,0,0,0,.FALSE.)
C
      NCURSH=NTMPSH
      return
      end
c
C*MODULE FMOH2A    *DECK CNSTSAO
C>
C>     @brief Constract S^a
C>
C>     @details Constract S^a: DSAO from DS 
C>
C>     @author Hiroya Nakata
C>
      subroutine CNSTSAO(l1,l2,DS,DSAO,nat,IA)
c
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
c
      DIMENSION DS(l1,l1,3),IA(l1),DSAO(l2,nat*3)
C
      PARAMETER (MXGTOT=20000, MXSH=5000)
C
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
C
C
C
      CALL VCLR(DSAO,1,l2*nat*3)
C     ----- COMPUTE DS/DA IN THE Atomic orbital BASIS -----
      DO 150 ISHELL = 1,NSHELL
         IAT  = KATOM(ISHELL)
         IXYZ = 3*(IAT-1)
         LOCI = KLOC(ISHELL) - KMIN(ISHELL)
         MINI = KMIN(ISHELL)
         MAXI = KMAX(ISHELL)
         DO 140 I = MINI,MAXI
            II   = LOCI + I
            DO 130 JJ = 1,l1
               IJ = IA(MAX(II,JJ)) + MIN(II,JJ)
               DSAO(IJ,IXYZ+1) = DSAO(IJ,IXYZ+1) + DS(II,JJ,1)
               DSAO(IJ,IXYZ+2) = DSAO(IJ,IXYZ+2) + DS(II,JJ,2)
               DSAO(IJ,IXYZ+3) = DSAO(IJ,IXYZ+3) + DS(II,JJ,3)
  130       CONTINUE
  140    CONTINUE
  150 CONTINUE
      return
      end
