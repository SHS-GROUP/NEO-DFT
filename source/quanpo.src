C XX XXX 11 - NMT - POLARIZABILITY PATCH FOR QUANTUM BOND CUT
C 11 AUG 11 - HL,NMT,DJS  - QUANPOL IMPROVEMENTS
C 15 APR 11 - HL,NMT,DJS  - NEW MODULE FOR QUANPOL FORCE FIELD
C
C*MODULE QUANPO  *DECK QUANPOL
      SUBROUTINE QUANPOL
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, HUGE=1.0D+30)
C
      CHARACTER*8 TEXT,AANAM
      CHARACTER*10 FRAG1(10),FRAG2(10),DFSA(10)
C
      DIMENSION LKQM(2,200),IATREP(200),CRPIAT(4,200),ZRPIAT(4,200)
C
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSC0,LFFDFSA,LFFDFSN
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFRNUM/ JJRAND(3),NRANDOM,NRANDOM0
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /MACHIN/ NWDVAR,MAXFM,MAXSM,LIMFM,LIMSM
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
C
C     -- POSITION THE INPUT TO $FFDATA --
C
      NFFAT=0
      NBOND=0
      NANGL=0 
      NDIHR=0
      NDIHB=0
      NWAGG=0
C
      IERR = 0
      IEOF = 0
      IDAT = 0
      IPDB = 0
C
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $FFDATA',IEOF)
      IF(IEOF.EQ.0) THEN
        IDAT = 1
        GOTO 777
      END IF
      IEOF = 0
      CALL SEQREW(IR)
      CALL FNDGRP(IR,' $FFPDB ',IEOF)
      IF(IEOF.EQ.0) IPDB = 1
      IF(IEOF.NE.0) RETURN
 777  CONTINUE
C
C     -- PRINT THE BANNER --
C
      IF(MASWRK)THEN
      WRITE(IW,*)' '
      WRITE(IW,*)'==================================================='
      WRITE(IW,*)'                      QUANPOL                      '
      WRITE(IW,*)' QUANTUM CHEMISTRY POLARIZABLE FORCE FIELD PROGRAM '
      WRITE(IW,*)'       NANDUN THELLAMUREGE, DEJUN SI, HUI LI       '
      WRITE(IW,*)'                 LI RESEARCH GROUP                 '
      WRITE(IW,*)'          UNIVERSITY OF NEBRASKA-LINCOLN           '
      WRITE(IW,*)'                  - - - - - - - -                  '
      WRITE(IW,*)'   QM/MM AND QM/MM/CONTINUUM STYLE MD SIMULATION   '
      WRITE(IW,*)'   USING HF, DFT, GVB, MCSCF, MP2, TDDFT METHODS   '
      WRITE(IW,*)'==================================================='
      END IF
C
C     -- DEFAULTS FOR $FFDATA KEYWORDS
C
      MXFFAT = MIN(100000,10000*NPROC)
      MXBOND = MIN(100000,10000*NPROC)
      MXANGL = MIN(100000,10000*NPROC)
      MXDIHR = MIN(100000,10000*NPROC)
      MXCMAP = MXFFAT/7 + 1
      MXDIHB = MIN( 10000, 1000*NPROC)
      MXWAGG = MIN(  1000,  100*NPROC)
      MXLIST =  1400
      BUFLIST= 2.0D+00*TOBOHR
      NFOLD  =     0
      RFOLD  =  ZERO
      MXITER =   100
      INTALG =     1       !  1=BEEMAN; 2=VELOCITY VERLET
      POLTOL =  1.0D-09
      XBOX   =  HUGE
      YBOX   =  HUGE
      ZBOX   =  HUGE
      RCUT   =  HUGE
      MODESW =     3 ! 1=ATOM-ATOM SWITCHING
C                    ! 2=GROUP-GROUP SWITCHING
C                    ! 3=ATOM-ATOM SHIFTING S=[1-(R/RCUT)]**2
C                    ! 4=ATOM-ATOM SHIFTING S=[1-(R/RCUT)**2]**2
C                    ! 5=ATOM-ATOM CONTINUUM-LIKE SHIFTING
      SWR1   =  1.0D+03*TOBOHR
      SWR2   =  HUGE
      RCUTQ  =  HUGE
      SWR1Q  =  1.0D+03*TOBOHR
      SWR2Q  =  HUGE
      CENTX  =  HUGE       !    PBC MASTER BOX CENTER, 
      CENTY  =  HUGE       !    ALSO THE SPHERE CENTER IN RXN FIELD.
      CENTZ  =  HUGE       !    REQUIRED WHEN ADDING WATER BOX.
      IDOCHG =     1
      IDOPOL =     1
      IDOLJ  =     1
      IDOCMAP=     1
      IRXNFLD=     0
      RXNEPS =  1.0D+00
      RXNRAD =  HUGE
      SPHRAD =  HUGE
      SPHSIG =  1.50D+00*TOBOHR  ! 1.50 IS GOOD FOR WAT301
      SPHEPS =  0.15D+00*TOHART  ! 0.15 IS GOOD FOR WAT301
      DT     =  1.0D-15
      NRDF   =     0
      DELRDF = 0.02D+00*TOBOHR
      NDFS   =     0
      TIMDFS =  3.0D-12  ! TIME USED TO CALCULATE DIFFUSION COEFFICIENT
      NATPDB =     0
      NFIXPDB=     0
      NRIJ   =     0
      NRMSD  =     0
      NGYRA  =     0
      NDIEL  =     0
      TIMGYRA=  1.0D-12  ! TIME USED TO CALCULATE RADIUS OF GYRATION
      NRALL  =     0
      TIMRALL=  1.0D-12  ! TIME USED TO CALCULATE ALL PAIR DISTANCES
      NSTEPS =  1000
      OPTTOL =  1.0D-04
      TEMP0  =  298.15D+00
      PRES0  =  1.0D+00  !  1 BAR
      ITSTAT =     0  !  1=VELOCITY SCALING; 2=BERNEDSEN; 3=ANDERSEN
      IPSTAT =     0  !  1=BERNEDSEN; 2=ANDERSEN
      JOUT   =     1  !  PRINT OUT ENERGY      EVERY JOUT STEPS
      KOUT   =   100  !  PRINT OUT COORDINATES EVERY KOUT STEPS
      LOUT   =     0  !  314159: SEARCH LOUT314159.PAR + LOUT314159.TOP
      NFFTYP = 20022  !   20022: CHARMM22
      WT14   =  1.0D+00   ! SCALING FACT FOR 1-4 LJ/CHG/POL INTERACTION
      RETAIN =  0.5D+00   ! SCALING FACT FOR MM COVALENT TERMS INVOLVING
C                         ! FRONTIER MM ATOM (WHICH IS A WEAK QM H ATOM)
C                         ! RETAIN = 1.0 MEANS FULL RETAIN
C                         ! RETAIN = 0.0 MEANS NO   RETAIN
      NQMREP =     0
      AANAM  =   ' '  !  AMINO ACID NAME
      IADDWAT=     0  !  1=PBC WATER;  2=SPHERICAL WATER
      ITYPWAT=   301  !  301=NONPOL 3-POINT; 302=POL 3-POINT
      IADDNA1=     0  !  SO MANY NA+  IONS BE ADDED AT RANDOM SITES
      IADDK1 =     0  !  SO MANY K+   IONS BE ADDED AT RANDOM SITES
      IADDCA2=     0  !  SO MANY CA2+ IONS BE ADDED AT RANDOM SITES
      IADDMG2=     0  !  SO MANY MG2+ IONS BE ADDED AT RANDOM SITES
      IADDCL1=     0  !  SO MANY CL-  IONS BE ADDED AT RANDOM SITES
      JADDNA1=     1  !  IF = 1, NA+  IONS BE ADDED TO DNA/RNA PO4 SITES
      JADDK1 =     0  !  IF = 1, K+   IONS BE ADDED TO DNA/RNA PO4 SITES
      NPROP  =     0  !  START TO CALCULATE PROPERTIES AFTER NPROP STEPS
      NRANDOM=     0  !  IF 0 USE FIXED SEEDS, IF 1 SEEDS FROM TIME/DATE
      CALL VICLR(LKQM,1,400)
      CALL VICLR(IATREP,1,200)
      CALL VCLR(CRPIAT,1,800)
      CALL VCLR(ZRPIAT,1,800)
C
C
C     -- READ $FFDATA OR $FFPDB KEYWORDS
C
      CALL OPNCRD(IR,-IW)
      IF(IDAT.EQ.1)THEN
         CALL RDCARD('$FFDATA ',IEOF)
         IF(IEOF.EQ.1) THEN
            WRITE(IW,*)'ERROR: END OF FILE LOOKING FOR $FFDATA GROUP'
            CALL ABRT
         END IF
         GOTO 100
      END IF
      IF(IPDB.EQ.1) THEN
         CALL RDCARD('$FFPDB  ',IEOF)
         IF(IEOF.EQ.1) THEN
            WRITE(IW,*)'ERROR: END OF FILE LOOKING FOR $FFPDB  GROUP'
            CALL ABRT
         END IF
      END IF
C
 100  CONTINUE
      TEXT='        '
      LGSTR=-8
      CALL GSTRNG(TEXT,LGSTR)
      IF(TEXT.EQ.'        ') GO TO 110
C
      IF(TEXT.EQ.'AANAM   ') THEN
        CALL GSTRNG(AANAM,LGSTR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'DT      ') THEN
        DT     = RFIND('DT      ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'NSTEPS  ') THEN
        NSTEPS = IFIND('NSTEPS  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'OPTTOL  ') THEN
        OPTTOL = RFIND('OPTTOL  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'INTALG  ') THEN
        INTALG = IFIND('INTALG  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'NRANDOM ') THEN
        NRANDOM = IFIND('NRANDOM',IERR)
        NRANDOM0= NRANDOM
        GO TO 100
      END IF
      IF(TEXT.EQ.'TEMP0   ') THEN
        TEMP0  = RFIND('TEMP0   ',IERR)
        IF(TEMP0.LT.1.0D-20) TEMP0 = 1.0D-20
        GO TO 100
      END IF
      IF(TEXT.EQ.'NFOLD   ') THEN
        NFOLD  = IFIND('NFOLD   ',IERR)
        IF(NFOLD.GT.20) THEN
           WRITE(IW,*)'ERROR: NFOLD CANNOT BE GREATER THAN 20'
           CALL ABRT
        END IF
        GO TO 100
      END IF
      IF(TEXT.EQ.'RFOLD   ') THEN
        RFOLD  = RFIND('RFOLD   ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'POLTOL  ') THEN
        RFOLD  = RFIND('POLTOL  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'MXFFAT  ') THEN
        MXFFAT = IFIND('MXFFAT  ',IERR)
        MXBOND = 2*MXFFAT
        MXANGL = 4*MXFFAT
        MXDIHR = 5*MXFFAT
        MXDIHB =   MXFFAT
        MXCMAP =   MXFFAT/7 + 1
        GO TO 100
      END IF
      IF(TEXT.EQ.'MXBOND  ') THEN
        MXBOND = IFIND('MXBOND  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'MXANGL  ') THEN
        MXANGL = IFIND('MXANGL  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'MXDIHR  ') THEN
        MXDIHR = IFIND('MXDIHR  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'MXWAGG  ') THEN
        MXWAGG = IFIND('MXWAGG  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'MXDIHB  ') THEN
        MXDIHB = IFIND('MXDIHB  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'MXLIST  ') THEN
        MXLIST = IFIND('MXLIST  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'BUFLIST ') THEN
        BUFLIST= RFIND('BUFLIST ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'SWMODE  ') THEN
        MODESW = IFIND('SWMODE  ',IERR)
        GO TO 100
      END IF
C
      IF(TEXT.EQ.'IADDNA1 ') THEN
        IADDNA1= IFIND('IADDNA1 ',IERR)
        IF(IADDNA1.LT.0) THEN
           WRITE(IW,*)'ERROR: IADDNA1 CANNOT BE < 0.'
           CALL ABRT
        END IF
        GO TO 100
      END IF
      IF(TEXT.EQ.'IADDK1  ') THEN
        IADDK1 = IFIND('IADDK1  ',IERR)
        IF(IADDK1.LT.0) THEN
           WRITE(IW,*)'ERROR: IADDK1 CANNOT BE < 0.'
           CALL ABRT
        END IF
        GO TO 100
      END IF
      IF(TEXT.EQ.'IADDCA2 ') THEN
        IADDCA2= IFIND('IADDCA2 ',IERR)
        IF(IADDCA2.LT.0) THEN
           WRITE(IW,*)'ERROR: IADDCA2 CANNOT BE < 0.'
           CALL ABRT
        END IF
        GO TO 100
      END IF
      IF(TEXT.EQ.'IADDMG2 ') THEN
        IADDMG2= IFIND('IADDMG2 ',IERR)
        IF(IADDMG2.LT.0) THEN
           WRITE(IW,*)'ERROR: IADDMG2 CANNOT BE < 0.'
           CALL ABRT
        END IF
        GO TO 100
      END IF
      IF(TEXT.EQ.'IADDCL1 ') THEN
        IADDCL1= IFIND('IADDCL1 ',IERR)
        IF(IADDCL1.LT.0) THEN
           WRITE(IW,*)'ERROR: IADDCL1 CANNOT BE < 0.'
           CALL ABRT
        END IF
        GO TO 100
      END IF
      IF(TEXT.EQ.'JADDNA1 ') THEN
        JADDNA1= IFIND('JADDNA1 ',IERR)
        IF(JADDNA1.NE.0 .AND. JADDNA1.NE.1) THEN 
           WRITE(IW,*)'ERROR: JADDNA1 MUST BE 0 OR 1.'
           CALL ABRT
        END IF
        GO TO 100
      END IF
      IF(TEXT.EQ.'JADDK1  ') THEN
        JADDK1 = IFIND('JADDK1  ',IERR)
        IF(JADDK1.NE.0 .AND. JADDK1.NE.1) THEN
           WRITE(IW,*)'ERROR: JADDK1 MUST BE 0 OR 1.'
           CALL ABRT
        END IF
        GO TO 100
      END IF
      IF(TEXT.EQ.'IADDWAT ') THEN
        IADDWAT= IFIND('IADDWAT ',IERR)
        IF(IADDWAT.NE.0 .AND. IADDWAT.NE.1 .AND. IADDWAT.NE.2) THEN
           WRITE(IW,*)'ERROR: IADDWAT MUST BE 0, 1 OR 2.'
           CALL ABRT
        END IF
        GO TO 100
      END IF
      IF(TEXT.EQ.'ITYPWAT ') THEN
        ITYPWAT= IFIND('ITYPWAT ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'CENTER  ') THEN
        CENTX = RFIND('CENTER  ',IERR)*TOBOHR
        CENTY = RFIND('CENTER  ',IERR)*TOBOHR
        CENTZ = RFIND('CENTER  ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'XBOX    ') THEN
        XBOX = RFIND('XBOX    ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'YBOX    ') THEN
        YBOX = RFIND('YBOX    ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'ZBOX    ') THEN
        ZBOX = RFIND('ZBOX    ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'RCUT    ') THEN
        RCUT = RFIND('RCUT    ',IERR)*TOBOHR
        IF(RCUTQ.EQ.HUGE) RCUTQ=RCUT + 6.0D+00*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'SWR1    ') THEN
        SWR1 = RFIND('SWR1    ',IERR)*TOBOHR
        IF(SWR1Q.EQ.1.0D+03*TOBOHR) SWR1Q = SWR1 + 6.0D+00*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'SWR2    ') THEN
        SWR2 = RFIND('SWR2    ',IERR)*TOBOHR
        IF(SWR2Q.EQ.HUGE) SWR2Q = SWR2 + 6.0D+00*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'RCUTQ   ') THEN
        RCUTQ= RFIND('RCUTQ   ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'SWR1Q   ') THEN
        SWR1Q= RFIND('SWR1Q   ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'SWR2Q   ') THEN
        SWR2Q= RFIND('SWR2Q   ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'IRXNFLD ') THEN
        IRXNFLD= IFIND('IRXNFLD ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'RXNEPS  ') THEN
        RXNEPS= RFIND('RXNEPS  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'RXNRAD  ') THEN
        RXNRAD= RFIND('RXNRAD  ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'SPHRAD  ') THEN
        SPHRAD= RFIND('SPHRAD  ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'SPHSIG  ') THEN
        SPHSIG= RFIND('SPHSIG  ',IERR)*TOBOHR
        GO TO 100
      END IF
      IF(TEXT.EQ.'SPHEPS  ') THEN
        SPHEPS= RFIND('SPHEPS  ',IERR)*TOHART
        GO TO 100
      END IF
      IF(TEXT.EQ.'IDOCHG  ') THEN
        IDOCHG= IFIND('IDOCHG  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'IDOPOL  ') THEN
        IDOPOL= IFIND('IDOPOL  ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'IDOLJ   ') THEN
        IDOLJ = IFIND('IDOLJ   ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'IDOCMAP ') THEN
        IDOCMAP= IFIND('IDOCMAP ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'ITSTAT  ') THEN
        ITSTAT = IFIND('ITSTAT ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'IPSTAT  ') THEN
        IPSTAT = IFIND('IPSTAT ',IERR)
        GO TO 100
      END IF
      IF(TEXT.EQ.'JOUT    ') THEN
        JOUT = IFIND('JOUT   ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'KOUT    ') THEN
        KOUT = IFIND('KOUT   ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'LOUT    ') THEN
        LOUT = IFIND('LOUT   ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NFFTYP  ') THEN
        NFFTYP = IFIND('NFFTYP ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'WT14    ') THEN
        WT14   = RFIND('WT14   ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'RETAIN  ') THEN
        RETAIN = RFIND('RETAIN ',IERR)
        GOTO 100
      END IF
C
      IF(TEXT.EQ.'QMREP   ') THEN
        NQMREP = IFIND('QMREP  ',IERR)
        IF(NQMREP.GT.200) THEN
           IF(MASWRK)WRITE(IW,*)'ERROR: NQMREP MUST BE < 201'
           CALL ABRT
        END IF
        IF(NQMREP.GT.NAT) THEN
           IF(MASWRK)WRITE(IW,*)'ERROR: NQMREP MUST BE < ',NAT+1
           CALL ABRT
        END IF
        DO I =1,NQMREP
           IATREP(I) = IFIND('IATREP  ',IERR)
           LTERM = IFIND('LTERM  ',IERR)
           IF(LTERM.GT.4) THEN
              IF(MASWRK)WRITE(IW,*)'ERROR: LTERM MUST BE < 5'
              CALL ABRT
           END IF
           DO J =1,LTERM
              CRPIAT(J,I) = RFIND('CRPIAT  ',IERR)
              ZRPIAT(J,I) = RFIND('ZRPIAT  ',IERR)
           ENDDO
        ENDDO
        GOTO 100
      END IF
C
      IF(TEXT.EQ.'NPROP   ') THEN
        NPROP  = IFIND('NPROP  ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'RDF     ') THEN
        NRDF = IFIND('NRDF   ',IERR)
        IF(NRDF.GT.10) THEN
           IF(MASWRK)WRITE(IW,*)'ERROR: NRDF MUST BE SMALLER THAN 10'
           CALL ABRT
        END IF
        DO I =1,NRDF
           FRAG1(I)='          '
           FRAG2(I)='          '
           LGSTR =-10
           CALL GSTRNG(FRAG1(I),LGSTR)
           LGSTR =-10
           CALL GSTRNG(FRAG2(I),LGSTR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'DELRDF  ') THEN
        DELRDF  = RFIND('DELRDF ',IERR)*TOBOHR
        GOTO 100
      END IF
      IF(TEXT.EQ.'DIFFUSE ') THEN
        NDFS = IFIND('NDFS',IERR)
        IF(NDFS.GT.10) THEN
           IF(MASWRK)WRITE(IW,*)'ERROR: NDFS MUST BE SMALLER THAN 10'
           CALL ABRT
        END IF
        DO I =1,NDFS
           DFSA(I)='          '
           LGSTR =-10
           CALL GSTRNG(DFSA(I),LGSTR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'TIMDFS  ') THEN
        TIMDFS = RFIND('TIMDFS  ',IERR)
        GOTO 100
      END IF
C
      IF(TEXT.EQ.'NATPDB  ') THEN
        NATPDB= IFIND('NATPDB',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRMSD   ') THEN
        NRMSD = IFIND('NRMSD',IERR)
        IF(NRMSD.NE.0 .AND. NRMSD.NE.1) THEN
           IF(MASWRK)WRITE(IW,*)'ERROR: NRMSD MUST BE 0 OR 1.'
           CALL ABRT
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRALL   ') THEN
        NRALL= IFIND('NRALL',IERR)
        IF(NRALL.NE.0 .AND. NRALL.NE.1) THEN
           IF(MASWRK)WRITE(IW,*)'ERROR: NRALL MUST BE 0 OR 1.'
           CALL ABRT
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'TIMRALL ') THEN
        TIMRALL= RFIND('TIMRALL ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NGYRA   ') THEN
        NGYRA  = IFIND('NGYRA   ',IERR)
        IF(NGYRA.NE.0 .AND. NGYRA.NE.1) THEN
          IF(MASWRK)WRITE(IW,*)'ERROR: NGYRA MUST BE 0 OR 1.'
          CALL ABRT
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'TIMGYRA ') THEN
        TIMGYRA= RFIND('TIMGYRA ',IERR)
        GOTO 100
      END IF
      IF(TEXT.EQ.'NRIJ    ') THEN
        NRIJ=IFIND('NRIJ',IERR)
        IF(NRIJ.GT.20 .OR. NRIJ.LT.0) THEN
           IF(MASWRK)WRITE(IW,*)'ERROR: NRIJ MUST BE BETWEEN 0 AND 20'
           CALL ABRT
        END IF
        DO II=1,NRIJ
           IJRIJ(1,II) = IFIND('IJRIJ1',IERR)
           IJRIJ(2,II) = IFIND('IJRIJ2',IERR)
        ENDDO
        GOTO 100
      END IF
      IF(TEXT.EQ.'NDIEL   ') THEN
        NDIEL= IFIND('NDIEL',IERR)
        IF(NDIEL.NE.0 .AND. NDIEL.NE.1) THEN
          IF(MASWRK)WRITE(IW,*)'ERROR: NDIEL MUST BE 0 OR 1.'
          CALL ABRT
        END IF
        GOTO 100
      END IF
      IF(TEXT.EQ.'NFIXPDB ') THEN
        NFIXPDB= IFIND('NFIXPDB',IERR)
        IF(NFIXPDB.LT.0) THEN
          IF(MASWRK)WRITE(IW,*)'ERROR: NFIXPDB MUST BE > 0.'
          CALL ABRT
        END IF
        GOTO 100
      END IF
C
      IF(MASWRK)WRITE(IW,*)'ERROR: '
      IF(MASWRK)WRITE(IW,*)'$FFDATA OR $FFPDB: UNRECOGNIZED KEYWORD=',
     *                     TEXT
      IF(MASWRK)WRITE(IW,*)'YOU HAVE TYPED AN OPTION INCORRECTLY,'
      IF(MASWRK)WRITE(IW,*)'THIS CAN MEAN A "BLANK" LINE WAS NOT GIVEN'
      CALL ABRT
 110  CONTINUE
C
C     -- VARIOUS ENFORCEMENTS --
C
      IF(XBOX.GT.1.0D+04)        XBOX   = HUGE
      IF(YBOX.GT.1.0D+04)        YBOX   = HUGE
      IF(ZBOX.GT.1.0D+04)        ZBOX   = HUGE
      IF(RCUT.GT.1.0D+04)        RCUT   = HUGE
      IF(RXNRAD.GT.1.0D+04)      RXNRAD = HUGE
      IF(SPHRAD.GT.1.0D+04)      SPHRAD = HUGE
      IF(SWR2.GT.1.0D+04)        SWR2   = HUGE
      IF(RXNEPS.LT.1.0D+00)      RXNEPS = 1.0D+00
      IF(DT.GT.1.0D-10)          DT     = 1.0D-15
      IF(TIMDFS.LT.1.0D-12)      TIMDFS = 1.0D-12
                                 TIMDFS = INT(TIMDFS/DT+0.1D+00)*DT
      TIMGYRA= INT(TIMGYRA/DT+0.1D+00)*DT
      TIMRALL= INT(TIMRALL/DT+0.1D+00)*DT
C
      IF(NDFS.GT.0 .AND. ITSTAT.EQ.3) THEN
         IF(MASWRK) WRITE(IW,*) 'ERROR: ANDERSEN THERMOSTAT CANNOT',
     *      ' BE USED IN DIFFUSION COEFFICIENT CALCULATION.'
         CALL ABRT
      END IF
C
      IF(INTALG.EQ.1 .AND. ITSTAT.EQ.3) THEN
         IF(MASWRK) WRITE(IW,*) 'ERROR: ANDERSEN THERMOSTAT CANNOT',
     *      ' BE USED WITH INTALG=1. PLEASE USE INTALG=2.'
         CALL ABRT
      END IF
C
      IF(IRXNFLD.EQ. 0 .OR. IRXNFLD.EQ.  1 .OR.
     *   IRXNFLD.EQ.60 .OR. IRXNFLD.EQ.240 .OR.
     *   IRXNFLD.EQ.960.OR. IRXNFLD.EQ.3840) THEN
      ELSE
         IF(MASWRK) WRITE(IW,*) 'ERROR: IRXNFLD MUST BE 0, 1, ',
     *                   '60, 240, 960 OR 3840.'
         CALL ABRT
      END IF
      IF(IRXNFLD.EQ.1 .AND. NAT.GT.0) THEN
         IF(MASWRK) WRITE(IW,*) 'ERROR: IRXNFLD=1 ',
     *              'CURRENTLY WORKS ONLY FOR PURE MM SYSTEM.'
         CALL ABRT
      END IF
      IF(IRXNFLD.GT.0) THEN
         XBOX = HUGE
         YBOX = HUGE
         ZBOX = HUGE
         IF(SPHRAD.GT.RXNRAD) THEN
            IF(MASWRK) WRITE(IW,*) 'ERROR: SPHRAD SHOULD NOT BE ',
     *                 'LARGER THAN RXNRAD.'
            CALL ABRT
         END IF
      END IF
      IF(SPHRAD.LT.HUGE .AND. MIN(XBOX,YBOX,ZBOX).LT.HUGE) THEN
         IF(MASWRK) WRITE(IW,*) 'SPHRAD AND XBOX(YBOX,ZBOX)',
     *                          'CANNOT COEXIST. CHOOSE ONLY ONE.'
         CALL ABRT
      END IF
      IF(RCUT.EQ.HUGE) THEN
         IF(SWR1.GT.SWR2 .OR. SWR2.GT.MIN(XBOX,YBOX,ZBOX))THEN
            IF(MASWRK) WRITE(IW,*) 'ERROR: SWR1 MUST BE < SWR2,',
     *                   ' AND SWR2 MUST BE < XBOX (YBOX, ZBOX)'
            CALL ABRT
         END IF
      ELSE
         SWR1   =  1.0D+03*TOBOHR 
         SWR2   =  HUGE
      END IF
      IF(RCUTQ.EQ.HUGE) THEN
         IF(SWR1Q.GT.SWR2Q .OR. SWR2Q.GT.MIN(XBOX,YBOX,ZBOX))THEN
            IF(MASWRK) WRITE(IW,*) 'ERROR: SWR1Q MUST BE < SWR2Q,',
     *                    ' AND SWR2Q MUST BE < XBOX (YBOX, ZBOX)'
            CALL ABRT
         END IF
      ELSE
         SWR1Q  =  1.0D+03*TOBOHR
         SWR2Q  =  HUGE
      END IF
      IF(MAX(XBOX,YBOX,ZBOX).GT.1.0D+04) NRDF = 0
      IF(SPHRAD.LT.1.0D+04) NRDF = 0
      IF(SPHRAD.LT.1.0D+04) IPSTAT = 0
      IF(IADDWAT.EQ.0) THEN
         IADDNA1  = 0
         IADDK1   = 0
         IADDCA2  = 0
         IADDMG2  = 0
         IADDCL1  = 0
         JADDNA1  = 0
         JADDK1   = 0
      END IF
      IF(JADDNA1.GT.0 .AND. JADDK1.GT.0) THEN
         IF(MASWRK) WRITE(IW,*) 'ERROR: CANNOT USE BOTH JADDNA1 ',
     *                          'AND JADDK1.'
         CALL ABRT
      END IF
      MXLIST = MIN(MXLIST,MXFFAT)
      IF(NRALL.EQ.1) THEN
         NRMSD = 1
         NGYRA = 1
      END IF
C
C     -- SWF COMMON BLOCK --
C
      DT      = DT/2.418884326505D-17
      DT2     = DT*DT
      TIMDFS  = TIMDFS/2.418884326505D-17
      TIMRALL = TIMRALL/2.418884326505D-17
      TIMGYRA = TIMGYRA/2.418884326505D-17
      RRCUT   = RCUT*RCUT
      SWRR1   = SWR1*SWR1
      SWRR2   = SWR2*SWR2
      SWFDUM1 = ONE/(SWRR2 - SWRR1)
      SWFDUM2 = SWFDUM1*SWFDUM1
      SWFDUM3 = SWFDUM2*SWFDUM1
      SWFDUM4 = SWFDUM2*SWFDUM2
      SWFDUM5 = SWFDUM2*SWFDUM3
      RRCUTQ  = RCUTQ*RCUTQ
      SWRR1Q  = SWR1Q*SWR1Q
      SWRR2Q  = SWR2Q*SWR2Q
      SWFDUM1Q= ONE/(SWRR2Q- SWRR1Q)
      SWFDUM2Q= SWFDUM1Q*SWFDUM1Q
      SWFDUM3Q= SWFDUM2Q*SWFDUM1Q
      SWFDUM4Q= SWFDUM2Q*SWFDUM2Q
      SWFDUM5Q= SWFDUM2Q*SWFDUM3Q
C
      IF(MASWRK) WRITE(IW,*)' '
      IF(MASWRK.AND.IDAT.EQ.1) THEN
         WRITE(IW,*)'    $FFDATA OPTIONS'
         WRITE(IW,*)'    ---------------'
      END IF
      IF(MASWRK.AND.IPDB.EQ.1) THEN
         WRITE(IW,*)'    $FFPDB OPTIONS'
         WRITE(IW,*)'    --------------'
      END IF
      IF(MASWRK)THEN
         WRITE(IW,'(/1X,3(A,I10,7X))')
     *      'MXFFAT  =',MXFFAT,'MXBOND  =',MXBOND,'MXANGL  =',MXANGL
         WRITE(IW,'( 1X,3(A,I10,7X))')
     *      'MXDIHR  =',MXDIHR,'MXDIHB  =',MXDIHB,'MXWAGG  =',MXWAGG
      END IF
C
C     -- SET UP ALL MEMORY POINTERS
C
      CALL VALFM(LOADFM)
      LFFATMNAM  = LOADFM     +          1
      LFFCORD    = LFFATMNAM  +   2*MXFFAT
      LFFCORDSV  = LFFCORD    +   3*MXFFAT
      LFFZANF    = LFFCORDSV  +   3*MXFFAT
      LFFZMAS    = LFFZANF    +     MXFFAT
      LFFONEMAS  = LFFZMAS    +     MXFFAT
      LFFCHARG   = LFFONEMAS  +     MXFFAT
      LFFPOL     = LFFCHARG   +     MXFFAT
      LFFDIP     = LFFPOL     +     MXFFAT
      LFFFIELD1  = LFFDIP     +   3*MXFFAT
      LFFFIELD2  = LFFFIELD1  +   3*MXFFAT
      LFFFIELD3  = LFFFIELD2  +   3*MXFFAT
      LFFSIG     = LFFFIELD3  +   3*MXFFAT
      LFFEPS     = LFFSIG     +     MXFFAT
      LFFSIG2    = LFFEPS     +     MXFFAT
      LFFEPS2    = LFFSIG2    +     MXFFAT
      LFFBOND0   = LFFEPS2    +     MXFFAT
      LFFFCBOND  = LFFBOND0   +     MXBOND
      LFFANGL0   = LFFFCBOND  +     MXBOND
      LFFFCANGL  = LFFANGL0   +     MXANGL
      LFFFCWAGG  = LFFFCANGL  +     MXANGL
      LFFVROT    = LFFFCWAGG  +     MXWAGG
      LFFNNN     = LFFVROT    +     MXDIHR
      LFFGAMA    = LFFNNN     +     MXDIHR/NWDVAR + 1
      LFFIPAIR   = LFFGAMA    +     MXDIHR
      LFFDIHB0   = LFFIPAIR   +   2*MXBOND/NWDVAR + 1
      LFFFCDIHB  = LFFDIHB0   +     MXDIHB
      LFFNONLST  = LFFFCDIHB  +     MXDIHB
      LFFNONLSTQ = LFFNONLST  +     MXFFAT*MXLIST/NWDVAR/NPROC + 1
      LFFIDGROUP = LFFNONLSTQ +     MXFFAT/NWDVAR + 1
      LFFKLIST   = LFFIDGROUP +     MXFFAT/NWDVAR + 1
      LFFLLIST   = LFFKLIST   +   3*MXANGL/NWDVAR + 1
      LFFMLIST   = LFFLLIST   +   4*MXDIHR/NWDVAR + 1
      LFFNLIST   = LFFMLIST   +   4*MXWAGG/NWDVAR + 1
      LFFMAPLST  = LFFNLIST   +   4*MXDIHB/NWDVAR + 1
      LFFCMAPCO  = LFFMAPLST  +   6*MXCMAP/NWDVAR + 1
      LFFLKQMMM  = LFFCMAPCO  +   4*4*24*24*5    
      LFFL1213J  = LFFLKQMMM  +      20000/NWDVAR + 1
      LFFL14J    = LFFL1213J  +   2*(MXBOND+MXANGL)/NWDVAR + 1
      LFFVEL     = LFFL14J    +   2*MXDIHR/NWDVAR + 1
      LFFFFGRD0  = LFFVEL     +   3*MXFFAT
      LFFFFGRD1  = LFFFFGRD0  +   3*MXFFAT
      LFFFFGRD2  = LFFFFGRD1  +   3*MXFFAT
      LFFCLPR    = LFFFFGRD2  +   3*MXFFAT
      LFFZLPR    = LFFCLPR    +   4*MXFFAT
      LFFNLPR    = LFFZLPR    +   4*MXFFAT
      LAST       = LFFNLPR    +     MXFFAT/NWDVAR + 1
C
C     FOR QMMM RUNS
C
      LFFDETMP   = LAST
      LFFQMGRD0  = LFFDETMP   +    3*MXATM
      LFFQMGRD1  = LFFQMGRD0  +    3*MXATM
      LFFQMGRD2  = LFFQMGRD1  +    3*MXATM
      LFFQMVEL   = LFFQMGRD2  +    3*MXATM
      LFFQMZMAS  = LFFQMVEL   +    3*MXATM
      LFFQM1MAS  = LFFQMZMAS  +      MXATM
      LFFQMNAM   = LFFQM1MAS  +      MXATM
      LFFDIPMP   = LFFQMNAM   +      MXATM
      LFFDIPTA   = LFFDIPMP   +   3*MXFFAT
      LFFDIPXY   = LFFDIPTA   +   3*MXFFAT
      LFFLISTQM  = LFFDIPXY   +   3*MXFFAT
      LAST       = LFFLISTQM  +    (MXFFAT+MXATM+1)/NWDVAR + 1
C
C     FOR RXNFLD SURFACE CHARGE METHOD
      NTS = IRXNFLD
      NTS1= MAX(NTS,1)
C
      LFFXTS     = LAST
      LFFYTS     = LFFXTS     +    NTS1
      LFFZTS     = LFFYTS     +    NTS1
      LFFCMAT1   = LFFZTS     +    NTS1
      LFFQRXN1   = LFFCMAT1   +    NTS1*NTS1
      LFFQRXN2   = LFFQRXN1   +    NTS1
      LFFPOT1    = LFFQRXN2   +    NTS1
      LFFPOT2    = LFFPOT1    +    NTS1
      LFFQRXNMP  = LFFPOT2    +    NTS1
      LFFQRXNTA  = LFFQRXNMP  +    NTS1
      LFFQRXNXY  = LFFQRXNTA  +    NTS1
      LAST       = LFFQRXNXY  +    NTS1
C
C     FOR RDF CALCULATION
C
      LFFGOFR    = LAST
      LFFNFRAG1  = LFFGOFR    +    1000*10
      LFFNFRAG2  = LFFNFRAG1  +    10
      LFFFRAG1   = LFFNFRAG2  +    10
      LFFFRAG2   = LFFFRAG1   +    20
      LAST       = LFFFRAG2   +    20
C
C     FOR DIFFUSION COEFFICIENT CALCULATION
C
      MXTEMP     = 1
      IF(NDFS.GT.0) MXTEMP = MXFFAT
      LFFDFSC    = LAST
      LFFDFSC0   = LFFDFSC    +    30
      LFFDFSA    = LFFDFSC0   +    3*MXTEMP
      LFFDFSN    = LFFDFSA    +    20
      LAST       = LFFDFSN    +    10
C
C     FOR RMS POSITION DEVIATION CALCULATION
C
      MXTEMP     = 1
      IF(NRMSD.EQ.1) MXTEMP = MXFFAT
      LFFRMSD0   = LAST
      LAST       = LFFRMSD0   +    3*MXTEMP
C
C     FOR INTERNUCLEAR DISTANCE CALCULATION
C
      MXTEMP     = 1
      IF(NRALL.EQ.1) MXTEMP = MXFFAT
      LFFRALL0   = LAST
      LAST       = LFFRALL0  + 3*MXTEMP
C
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
C     ***************************
C     WE DO NOT RETURN THE MEMORY
C     ***************************
C
C
      IF(MASWRK)THEN
         WRITE(IW,'(/1X,A,I12,A)')
     *              'MEMORY REQUIRED BY QUANPOL IS ',
     *               NEED,' WORDS ON EACH PROCESSOR.'
         WRITE(IW,*)'INPUT SMALLER MXFFAT, MXBOND, ',
     *              'MXANGL, MXDIHR, MXDIHB AND MXWAGG.'
         WRITE(IW,*)'ACTUAL NFFAT, NBOND, NANGL, NDIHR, NDIHB',
     *              ' AND NWAGG ARE PRINTED BELOW.'
         WRITE(IW,*)' '
         IF(IDAT.EQ.1)WRITE(IW,*)'PROCESSING $FFDATA.',
     *              ' MAY NEED A FEW MINUTES FOR 100,000 ATOMS.'
         IF(IPDB.EQ.1)WRITE(IW,*)'PROCESSING $FFPDB.',
     *              ' MAY NEED A FEW MINUTES FOR 100,000 ATOMS.'
         WRITE(IW,*)' '
      END IF
C
C     -- READ IN MORE $FFDATA INFORMATION --
C
      CALL VALFM(LOADFM)
      LLLIST2    = LOADFM     +   1
      LAST       = LLLIST2    +   4*MXDIHR/NWDVAR + 1
      NEEDX      = LAST       -   LOADFM - 1
      CALL GETFM(NEEDX)
      CALL FFDATA(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *            X(LFFZMAS),X(LFFONEMAS),X(LFFQMZMAS),X(LFFQM1MAS),
     *            X(LFFCHARG),X(LFFPOL),X(LFFSIG),X(LFFEPS),
     *            X(LFFSIG2),X(LFFEPS2),
     *            X(LFFBOND0),X(LFFFCBOND),
     *            X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *            X(LFFDIHB0),X(LFFFCDIHB),
     *            X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *            X(LFFKLIST),X(LFFLLIST),X(LLLIST2),
     *            X(LFFMLIST),X(LFFNLIST),
     *            X(LFFLISTQM),
     *            X(LFFL1213J),X(LFFL14J),
     *            X(LFFVEL),X(LFFQMVEL),
     *            X(LFFCLPR),X(LFFZLPR),X(LFFNLPR),
     *            X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *            AANAM,LKQM,X(LFFLKQMMM),X(LFFNONLST),X(LFFNONLSTQ),
     *            MXFFAT,MXBOND,MXANGL,MXDIHR,MXCMAP,
     *            MXWAGG,MXDIHB,NFOLD,RFOLD,RETAIN,
     *            IDAT,IPDB,IADDNA1,IADDK1,IADDCA2,IADDMG2,IADDCL1,
     *            JADDNA1,JADDK1,
     *            ITYPWAT,NTS,X(LFFMAPLST),X(LFFCMAPCO),
     *            FRAG1,FRAG2,X(LFFFRAG1),X(LFFFRAG2),X(LFFIDGROUP),
     *            DFSA,X(LFFDFSA),NQMREP,IATREP,CRPIAT,ZRPIAT)
      CALL RETFM(NEEDX)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFDATA
      SUBROUTINE FFDATA(ATMNAM,CORD,CORDSV,ZANF,
     *                  ZMAS,ONEMAS,QMZMAS,QM1MAS,
     *                  CHARG,POL,SIG,EPS,
     *                  SIG2,EPS2,
     *                  BOND0,FCBOND,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,
     *                  VROT,NNN,GAMA,IPAIR,
     *                  KLIST,LLIST,LLIST2,
     *                  MLIST,NLIST,LISTQM,
     *                  L1213J,L14J,
     *                  VEL,QMVEL,
     *                  CLPR,ZLPR,NLPR,
     *                  XTS,YTS,ZTS,CMAT1,
     *                  AANAM,LKQM,LKQMMM,NONLST,NONLSTQ,
     *                  MXFFAT,MXBOND,MXANGL,MXDIHR,MXCMAP,
     *                  MXWAGG,MXDIHB,
     *                  NFOLD,RFOLD,RETAIN,IDAT,IPDB,IADDNA1,IADDK1,
     *                  IADDCA2,IADDMG2,IADDCL1,JADDNA1,JADDK1,
     *                  ITYPWAT,NTS,
     *                  MAPLST,CMAPCO,FRAG1,FRAG2,FFFRAG1,FFFRAG2,
     *                  IDGROUP,DFSA,FFDFSA,NQMREP,IATREP,CRPIAT,
     *                  ZRPIAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, HUGE=1.0D+30)
C
      CHARACTER*5  WORD5A,WORD5B,WORD5C,WORD5D,WORD5E,WORD5F
      CHARACTER*7  WORD7A,WORD7B
      CHARACTER*8  WORD8A,AANAM
      CHARACTER*9  WORD9A,WORD9B,WORD9C
      CHARACTER*10 WORD,ATMNAM,ENTRY10,WORD10A,WORD10B
      CHARACTER*15 ENTRY15,WORD15A,WORD15B
      CHARACTER*20 ENTRY20,WORD20A,WORD20B,WORD20C,WORD20D,WORD20E,
     *             WORD20F
      CHARACTER*256 QPFILE
      CHARACTER*10 FRAG1(10),FRAG2(10),FFFRAG1(10),FFFRAG2(10)
      CHARACTER*10 DFSA(10),FFDFSA(10)
C
      DIMENSION RMASS(200)
      DIMENSION ATMNAM(MXFFAT),CORD(3,MXFFAT),CORDSV(3,MXFFAT),
     *          ZANF(MXFFAT),
     *          ZMAS(MXFFAT),ONEMAS(MXFFAT),QMZMAS(NAT),QM1MAS(NAT),
     *          CHARG(MXFFAT),POL(MXFFAT),SIG(MXFFAT),EPS(MXFFAT),
     *          SIG2(MXFFAT),EPS2(MXFFAT),
     *          BOND0(MXBOND),FCBOND(MXBOND), 
     *          ANGL0(MXANGL),FCANGL(MXANGL),
     *          FCWAGG(MXWAGG),
     *          DIHB0(MXDIHB),FCDIHB(MXDIHB),
     *          VROT(MXDIHR),NNN(MXDIHR),GAMA(MXDIHR),IPAIR(2,MXBOND),
     *          KLIST(3,MXANGL),
     *          LLIST(4,MXDIHR),LLIST2(4,MXDIHR),MLIST(4,MXWAGG),
     *          NLIST(4,MXDIHB),
     *          LISTQM(MXFFAT+MXATM+1),
     *          L1213J(2,MXBOND+MXANGL),L14J(2,MXDIHR),
     *          VEL(3,MXFFAT),QMVEL(3,MXATM),
     *          CLPR(4,MXFFAT),ZLPR(4,MXFFAT),NLPR(MXFFAT),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),LKQM(2,200),
     *          LKQMMM(100,200),NONLST(2,*),NONLSTQ(*),MAPLST(6,*),
     *          CMAPCO(4,4,24,24,5),IDGROUP(MXFFAT),
     *          IATREP(200),CRPIAT(4,200),ZRPIAT(4,200)
C
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSC0,LFFDFSA,LFFDFSN
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFRNUM/ JJRAND(3),NRANDOM,NRANDOM0
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /MACHIN/ NWDVAR,MAXFM,MAXSM,LIMFM,LIMSM
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, DEJUN SI, HUI LI, MAR 2011, LINCOLN
C
      INPQMV  = 0
      INPMMV  = 0
C
      CALL DCOPY(3*NFFAT,CORD,1,CORDSV,1)
      DO IAT = 1, 10
         FFFRAG1(IAT) = FRAG1(IAT)
         FFFRAG2(IAT) = FRAG2(IAT)
         FFDFSA(IAT)  = DFSA(IAT)
      ENDDO
C
C     -- SET QM ATOMIC MASS AND CONVERT TO AU (ELECTRON MASS)
C        THIS MUST BE DONE BEFORE QMZMAS IS USED
C
      IF(NAT.GT.0) THEN
         CALL RAMS(RMASS,2)
         DO IAT = 1, NAT
            QMZMAS(IAT) = RMASS(IAN(IAT))*1822.88850204D+00
            QM1MAS(IAT) = 1.0D+00/QMZMAS(IAT)
         END DO
      END IF
C
C     -- READ FROM INPUT FILE --
C
      CALL OPNCRD(IR,-IW)
      IEOF = 0
      IF(IDAT.EQ.0.AND.IPDB.EQ.1) GOTO 290
  110 CONTINUE
      CALL RDCARD('$FFDATA ',IEOF)
      IF(IEOF.EQ.1) THEN
         WRITE(IW,*)'ERROR: END OF FILE READING $FFDATA' 
         CALL ABRT
      END IF
      WORD ='          '
      KSIZE = -10
      CALL GSTRNG(WORD,KSIZE)
C
      IF(WORD.NE.'COORDINATE')GOTO 120
      CALL RDXYZ(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,MXFFAT,NFOLD)
      GOTO 110
C
  120 CONTINUE
      IF(WORD.NE.'MMVELOCITY')GOTO 125
      INPMMV = 1
      CALL RDMMVEL(VEL)
      GOTO 110
C     
  125 CONTINUE
      IF(WORD.NE.'QMVELOCITY')GOTO 126
      INPQMV = 1
      CALL RDQMVEL(QMVEL)
      GOTO 110
C
  126 CONTINUE
      IF(WORD.NE.'PARAMETERS')GOTO 130
      CALL RDPARA(ATMNAM,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,SIG2,EPS2)
      GOTO 110
C
  130 CONTINUE
      IF(WORD.NE.'QMMMREP   ')GOTO 135
      CALL RDQMMM(CLPR,ZLPR,NLPR)
      GOTO 110
C
  135 CONTINUE
      IF(WORD.NE.'BOND      ')GOTO 140
      CALL RDBOND(BOND0,FCBOND,IPAIR,MXBOND)
      GOTO 110
C
  140 CONTINUE
      IF(WORD.NE.'ANGLE     ')GOTO 150
      CALL RDANGL(ANGL0,FCANGL,KLIST,MXANGL)
      GOTO 110
C
  150 CONTINUE
      IF(WORD.NE.'DIHROT    ')GOTO 160
      CALL RDDIHR(LLIST,GAMA,NNN,VROT,MXDIHR)
      GOTO 110
C
  160 CONTINUE
      IF(WORD.NE.'DIHBND    ')GOTO 170
      CALL RDDIHB(NLIST,DIHB0,FCDIHB,MXDIHB)
      GOTO 110
C
  170 CONTINUE
      IF(WORD.NE.'WAGGING   ')GOTO 180
      CALL RDWAGG(MLIST,FCWAGG,MXWAGG)
      GOTO 110
  180 CONTINUE
      IF(WORD.NE.'CMAP      ')GOTO 190
      CALL RDCMAP(MAPLST,MXCMAP)
      GOTO 110
C
  190 CONTINUE 
      IF (WORD.EQ.'$END      ') THEN
         GOTO 300
      ELSE
         WRITE(IW,*)'ERROR: UNRECOGNIZED KEYWORD IN $FFDATA'
         CALL ABRT
      END IF
C
  290 CONTINUE
C
C     --- READ $FFPDB AND LOAD PROTEIN PARAMETERS ---
C
      CALL VALFM(LOADFM)
      LSSBDID  = LOADFM   + 1
      LSSBOND  = LSSBDID  + MXFFAT/14
      LPDBNAM  = LSSBOND  + MXFFAT/14
      LRESNAM  = LPDBNAM  + MXFFAT
      LNATAAA  = LRESNAM  + MXFFAT/7
      LNHPOS   = LNATAAA  + MXFFAT/7
      LNHAPOS  = LNHPOS   + MXFFAT/7
      LNNNCCC  = LNHAPOS  + MXFFAT/7
      LAST     = LNNNCCC  + MXFFAT/7
      NEED     = LAST     - LOADFM -1
      CALL GETFM(NEED)
      CALL FFPDB(ATMNAM,CORD,ZANF,
     *           ZMAS,ONEMAS,
     *           CHARG,POL,SIG,EPS,
     *           SIG2,EPS2,
     *           BOND0,FCBOND,
     *           ANGL0,FCANGL,FCWAGG,
     *           DIHB0,FCDIHB,
     *           VROT,NNN,GAMA,IPAIR,
     *           KLIST,LLIST,MLIST,NLIST,
     *           CLPR,ZLPR,NLPR,
     *           X(LSSBDID),X(LSSBOND),
     *           X(LPDBNAM),X(LRESNAM),X(LNATAAA),
     *           X(LNHPOS),X(LNHAPOS),X(LNNNCCC),
     *           MXFFAT,MXBOND,MXANGL,MXDIHR,MXCMAP,
     *           MXWAGG,MXDIHB,
     *           ITYPWAT,MAPLST)
      NATPDB = NFFAT
      CALL RETFM(NEED)
      INPMMV  = 0
C
  300 CONTINUE
C
C     -- IF LOUT=314159, AUTOMATICALLY GENERATE 
C        BOND, ANGLE, DIHEDRAL ANGLE --
C     IPAIR, KLIST, LLIST ALL HAVE LOWER NUMBER BEFORE HIGHER NUMBERS.
C
      IF(LOUT.EQ.314159) THEN
         CALL FFBOND(NFFAT,IPAIR,ZANF,CORD,NBOND)
         CALL FFANGL(IPAIR,NBOND,KLIST,NANGL)
         CALL FFDIHR(KLIST,NANGL,LLIST,NDIHR)
         CALL FFDIHB(CORD,IPAIR,KLIST,NLIST)
         GOTO 350
      END IF
C
C     -- FINE TUNE THE INPUT BOND, ANGLE LISTS --
C        FORCE THEM TO BE FROM LOWER TO HIGHER NUMBER.
C        WATER ADDED LATER WILL BE DONE SEPARATELY
C        IN THE SAME WAY.
C
      DO IBOND = 1, NBOND
         IF(IPAIR(1,IBOND).LE.0 .OR.
     *      IPAIR(2,IBOND).LE.0     ) THEN
            IF(MASWRK)WRITE(IW,'(2I7,/1X,A)')
     *         IPAIR(1,IBOND),IPAIR(2,IBOND),
     *         'ERROR: BOND ATM1 OR ATM2 MUST BE > 0' 
            CALL ABRT
         END IF
         IF(IPAIR(2,IBOND).EQ.IPAIR(1,IBOND)) THEN
            IF(MASWRK)WRITE(IW,'(2I7,/1X,A)')
     *         IPAIR(1,IBOND),IPAIR(2,IBOND),
     *         'ERROR: BOND ATM1, ATM2 MUST BE DIFFERENT'
            CALL ABRT
         END IF
         IF(IPAIR(2,IBOND).LT.IPAIR(1,IBOND)) THEN
            IZ5G9          = IPAIR(1,IBOND)
            IPAIR(1,IBOND) = IPAIR(2,IBOND)
            IPAIR(2,IBOND) = IZ5G9
          END IF
      ENDDO
C
      DO IANGL = 1, NANGL
         IF(KLIST(1,IANGL).LE.0.OR.
     *      KLIST(2,IANGL).LE.0.OR.
     *      KLIST(3,IANGL).LE.0    ) THEN
            IF(MASWRK)WRITE(IW,'(3I7,/1X,A)')
     *         KLIST(1,IANGL),KLIST(2,IANGL),KLIST(3,IANGL),
     *         'ERROR: ANGLE ATM1, ATM2, ATM3 MUST BE > 0'
               CALL ABRT
         END IF
         IF(KLIST(1,IANGL).EQ.KLIST(2,IANGL).OR.
     *      KLIST(1,IANGL).EQ.KLIST(3,IANGL).OR.
     *      KLIST(2,IANGL).EQ.KLIST(3,IANGL)) THEN
            IF(MASWRK)WRITE(IW,'(3I7,/1X,A)')
     *         KLIST(1,IANGL),KLIST(2,IANGL),KLIST(3,IANGL),
     *         'ERROR: ANGLE ATM1, ATM2, ATM3 MUST BE DIFFERENT'
               CALL ABRT
         END IF
         IF(KLIST(1,IANGL).GT.KLIST(3,IANGL)) THEN
            IZ5G9          = KLIST(1,IANGL)
            KLIST(1,IANGL) = KLIST(3,IANGL)
            KLIST(3,IANGL) = IZ5G9
         END IF
      ENDDO
C
      DO IDIHR = 1, NDIHR
         IF(LLIST(1,IDIHR).LE.0.OR.
     *      LLIST(2,IDIHR).LE.0.OR.
     *      LLIST(3,IDIHR).LE.0.OR.
     *      LLIST(4,IDIHR).LE.0    ) THEN
            IF(MASWRK)WRITE(IW,'(4I7,/1X,A)')
     *         LLIST(1,IDIHR),LLIST(2,IDIHR),
     *         LLIST(3,IDIHR),LLIST(4,IDIHR),
     *        'ERROR: DIHR ATM1, ATM2, ATM3, ATM4 MUST BE > 0'
               CALL ABRT
         END IF
         IF(LLIST(1,IDIHR).EQ.LLIST(2,IDIHR).OR.
     *      LLIST(1,IDIHR).EQ.LLIST(3,IDIHR).OR.
     *      LLIST(1,IDIHR).EQ.LLIST(4,IDIHR).OR.
     *      LLIST(2,IDIHR).EQ.LLIST(3,IDIHR).OR.
     *      LLIST(2,IDIHR).EQ.LLIST(4,IDIHR).OR.
     *      LLIST(3,IDIHR).EQ.LLIST(4,IDIHR)) THEN
            IF(MASWRK)WRITE(IW,'(4I7,/1X,A)') 
     *         LLIST(1,IDIHR),LLIST(2,IDIHR),
     *         LLIST(3,IDIHR),LLIST(4,IDIHR),
     *        'ERROR: DIHR ATM1, ATM2, ATM3, ATM4 MUST BE DIFFERENT'
               CALL ABRT
         END IF
         IF(LLIST(1,IDIHR).GT.LLIST(4,IDIHR)) THEN
            IZ5G9          = LLIST(1,IDIHR)
            LLIST(1,IDIHR) = LLIST(4,IDIHR)
            LLIST(4,IDIHR) = IZ5G9
            IZ5G9          = LLIST(2,IDIHR)
            LLIST(2,IDIHR) = LLIST(3,IDIHR)
            LLIST(3,IDIHR) = IZ5G9
         END IF
      ENDDO
C
      DO IDIHB = 1, NDIHB
         IF(NLIST(1,IDIHB).LE.0.OR.
     *      NLIST(2,IDIHB).LE.0.OR.
     *      NLIST(3,IDIHB).LE.0.OR.
     *      NLIST(4,IDIHB).LE.0    ) THEN
            IF(MASWRK)WRITE(IW,'(4I7,/1X,A)')
     *         LLIST(1,IDIHB),LLIST(2,IDIHB),
     *         LLIST(3,IDIHB),LLIST(4,IDIHB),
     *        'ERROR: DIHB ATM1, ATM2, ATM3, ATM4 MUST BE > 0'
               CALL ABRT
         END IF
         IF(NLIST(1,IDIHB).EQ.NLIST(2,IDIHB).OR.
     *      NLIST(1,IDIHB).EQ.NLIST(3,IDIHB).OR.
     *      NLIST(1,IDIHB).EQ.NLIST(4,IDIHB).OR.
     *      NLIST(2,IDIHB).EQ.NLIST(3,IDIHB).OR.
     *      NLIST(2,IDIHB).EQ.NLIST(4,IDIHB).OR.
     *      NLIST(3,IDIHB).EQ.NLIST(4,IDIHB)) THEN
            IF(MASWRK)WRITE(IW,'(4I7,/1X,A)')
     *         LLIST(1,IDIHB),LLIST(2,IDIHB),
     *         LLIST(3,IDIHB),LLIST(4,IDIHB),
     *        'ERROR: DIHB ATM1, ATM2, ATM3, ATM4 MUST BE DIFFERENT'
               CALL ABRT
         END IF
         IF(NLIST(1,IDIHB).GT.NLIST(4,IDIHB)) THEN
            IZ5G9          = NLIST(1,IDIHB)
            NLIST(1,IDIHB) = NLIST(4,IDIHB)
            NLIST(4,IDIHB) = IZ5G9
            IZ5G9          = NLIST(2,IDIHB)
            NLIST(2,IDIHB) = NLIST(3,IDIHB)
            NLIST(3,IDIHB) = IZ5G9
         END IF
      ENDDO
C
C     -- GENERATE EXCLUSION LIST --
C        1-2 AND 1-3 INTERACTIONS ARE USUALLY EXCLUDED.
C        1-4 INTERACTIONS ARE USUALLY INCLUDED, BUT OFTEN SCALED.
C        SINCE LLIST MAY BE EMPTY OR INCOMPLETE, IT IS BETTER
C        TO GENERATE A TEMPORARY LLIST2.
C
      CALL FFDIHR(KLIST,NANGL,LLIST2,NDIHR2)
      N1213J = 0
      N14J   = 0
      DO 305 IFFAT = 1, NFFAT
         XI = CORD(1,IFFAT)
         YI = CORD(2,IFFAT)
         ZI = CORD(3,IFFAT)
         DO 306 JFFAT = IFFAT+1, NFFAT
            XJ = CORD(1,JFFAT)
            YJ = CORD(2,JFFAT)
            ZJ = CORD(3,JFFAT)
            DIFF = MAX(ABS(XI-XJ),ABS(YI-YJ),ABS(ZI-ZJ))
            IF(DIFF.GT.11.34D+00) GOTO 306
            DIFF = (XI-XJ)**2 + (YI-YJ)**2 + (ZI-ZJ)**2
            IF(DIFF.GT.128.56D+00) GOTO 306  !  R=6.0 ANGSTROM
            DO IBOND = 1, NBOND            !  BOND FIRST
               IF((IFFAT.EQ.IPAIR(1,IBOND).AND.
     *             JFFAT.EQ.IPAIR(2,IBOND))    .OR.
     *            (IFFAT.EQ.IPAIR(2,IBOND).AND.
     *             JFFAT.EQ.IPAIR(1,IBOND))       ) THEN
                  N1213J = N1213J + 1
                  L1213J(1,N1213J)=IFFAT
                  L1213J(2,N1213J)=JFFAT
                  GOTO 306
               END IF
            ENDDO
            DO IANGL = 1, NANGL            !  ANGL SECOND
               IF((IFFAT.EQ.KLIST(1,IANGL).AND.
     *             JFFAT.EQ.KLIST(3,IANGL))    .OR.
     *            (IFFAT.EQ.KLIST(3,IANGL).AND.
     *             JFFAT.EQ.KLIST(1,IANGL))       ) THEN 
                  N1213J = N1213J + 1
                  L1213J(1,N1213J)=IFFAT
                  L1213J(2,N1213J)=JFFAT
                  GOTO 306
               END IF
            ENDDO
            DO IDIHR2 = 1, NDIHR2          !  DIHR THIRD
               IF((IFFAT.EQ.LLIST2(1,IDIHR2).AND.
     *             JFFAT.EQ.LLIST2(4,IDIHR2))    .OR.
     *            (IFFAT.EQ.LLIST2(4,IDIHR2).AND.
     *             JFFAT.EQ.LLIST2(1,IDIHR2))       ) THEN
                  N14J = N14J + 1
                  L14J(1,N14J)=IFFAT
                  L14J(2,N14J)=JFFAT
                  GOTO 306
               END IF
            ENDDO
 306     CONTINUE
 305  CONTINUE
C
C     -- USE A GEOMETRIC CENTER AS THE QM CENTER --
C
      IF(NAT.GT.0 .AND. NFFAT.GT.0 .AND. SWRR2.LT.1.0D+08) THEN
         XMAX = -1.0D+30
         YMAX = -1.0D+30
         ZMAX = -1.0D+30
         XMIN =  1.0D+30
         YMIN =  1.0D+30
         ZMIN =  1.0D+30
         DO IAT = 1, NAT
            XMAX = MAX(XMAX,C(1,IAT))
            YMAX = MAX(YMAX,C(2,IAT))
            ZMAX = MAX(ZMAX,C(3,IAT))
            XMIN = MIN(XMIN,C(1,IAT))
            YMIN = MIN(YMIN,C(2,IAT))
            ZMIN = MIN(ZMIN,C(3,IAT))
         ENDDO
         QMCX   = (XMAX+XMIN)*PT5
         QMCY   = (YMAX+YMIN)*PT5
         QMCZ   = (ZMAX+ZMIN)*PT5
         R2NEAR = 100.0D+00
         NEAR   = 0
         DO IAT = 1,NAT
            XI = C(1,IAT) - QMCX
            YI = C(2,IAT) - QMCY
            ZI = C(3,IAT) - QMCZ
            R2 = XI**2 + YI**2 + ZI**2
            IF(R2.LT.R2NEAR) THEN
               R2NEAR = R2
               NEAR   = IAT
            END IF
         ENDDO
         LQMCT = NEAR
      END IF
      QMCXSV = QMCX
      QMCYSV = QMCY
      QMCZSV = QMCZ
C
C     -- THE DEFAULT IS TO USE A GEOMETRIC CENTER AS PBC CENTER --
C        WE NEED A POINT TO DEFINE THE MASTER BOX.
C        THIS MUST BE DONE BEFORE ADDING WATER BOX
C
      IF(CENTX.EQ.HUGE.OR.CENTY.EQ.HUGE.OR.CENTZ.EQ.HUGE) THEN
         XMAX = -1.0D+30
         YMAX = -1.0D+30
         ZMAX = -1.0D+30
         XMIN =  1.0D+30
         YMIN =  1.0D+30
         ZMIN =  1.0D+30
         DO IAT = 1, NAT
            XMAX = MAX(XMAX,C(1,IAT))
            YMAX = MAX(YMAX,C(2,IAT))
            ZMAX = MAX(ZMAX,C(3,IAT))
            XMIN = MIN(XMIN,C(1,IAT))
            YMIN = MIN(YMIN,C(2,IAT))
            ZMIN = MIN(ZMIN,C(3,IAT))
         ENDDO
         DO IFFAT = 1,NFFAT
            XMAX = MAX(XMAX,CORD(1,IFFAT))
            YMAX = MAX(YMAX,CORD(2,IFFAT))
            ZMAX = MAX(ZMAX,CORD(3,IFFAT))
            XMIN = MIN(XMIN,CORD(1,IFFAT))
            YMIN = MIN(YMIN,CORD(2,IFFAT))
            ZMIN = MIN(ZMIN,CORD(3,IFFAT))
         ENDDO
         CENTX= (XMAX+XMIN)*PT5
         CENTY= (YMAX+YMIN)*PT5
         CENTZ= (ZMAX+ZMIN)*PT5
      END IF
C
C     -- ADD WATER BOX IF REQUESTED --
C        ADD IONS BEFORE WATER
C
      IF(IADDWAT.EQ.1.AND.XBOX.LT.1890.0D+00.AND.
     *                    YBOX.LT.1890.0D+00.AND.
     *                    ZBOX.LT.1890.0D+00) THEN
         CALL VALFM(LOADFM)
         LWATO1 = LOADFM + 1
         LWATH2 = LWATO1 + 3*8*MXFFAT
         LWATH3 = LWATH2 + 3*8*MXFFAT
         LAST   = LWATH3 + 3*8*MXFFAT
         NEED   = LAST   - LOADFM  - 1
         CALL GETFM(NEED)
         IF(MASWRK) WRITE(IW,*)
     *   'ADDING WATER MOLECULES. MAY NEED A FEW MINUTES.'
         CALL ADDPBCWAT(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                  SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                  IPAIR,FCBOND,BOND0,
     *                  KLIST,FCANGL,ANGL0,L1213J,
     *                  MXFFAT,MXBOND,MXANGL,
     *                  X(LWATO1),X(LWATH2),X(LWATH3),
     *                  NWATER,ITYPWAT,IADDNA1,IADDK1,
     *                  IADDCA2,IADDMG2,IADDCL1,JADDNA1,JADDK1)
         CALL RETFM(NEED)
         IF(MASWRK)WRITE(IW,'(A,I8,A)')
     *      ' THIS PERIODIC BOUNDARY CONDITION SYSTEM HAS ',
     *      NWATER,' WATER ADDED.'
         IF(MASWRK.AND.(IADDNA1+JADDNA1).GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDNA1+JADDNA1,' NA+    IONS ADDED.'
         IF(MASWRK.AND.(IADDK1+JADDK1).GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDK1+JADDK1, ' K+     IONS ADDED.'
         IF(MASWRK.AND.IADDCL1.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDCL1,' CL-    IONS ADDED.'
         IF(MASWRK.AND.IADDCA2.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDCA2,' CA2+   IONS ADDED.'
         IF(MASWRK.AND.IADDMG2.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDMG2,' MG2+   IONS ADDED.'
         IF(MASWRK) WRITE(IW,*) ' '
      END IF
C
      IF(IADDWAT.EQ.2.AND.SPHRAD.LT.0.945D+03) THEN
         CALL VALFM(LOADFM)
         LWATO1 = LOADFM + 1
         LWATH2 = LWATO1 + 3*8*MXFFAT
         LWATH3 = LWATH2 + 3*8*MXFFAT
         LAST   = LWATH3 + 3*8*MXFFAT
         NEED   = LAST   - LOADFM  - 1
         CALL GETFM(NEED)
         IF(MASWRK) WRITE(IW,*)
     *   'ADDING WATER MOLECULES. MAY NEED A FEW MINUTES.'
         CALL ADDSPHWAT(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                  SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                  IPAIR,FCBOND,BOND0,
     *                  KLIST,FCANGL,ANGL0,L1213J,
     *                  MXFFAT,MXBOND,MXANGL,
     *                  X(LWATO1),X(LWATH2),X(LWATH3),
     *                  NWATER,ITYPWAT,IADDNA1,IADDK1,
     *                  IADDCA2,IADDMG2,IADDCL1,JADDNA1,JADDK1)
         CALL RETFM(NEED)
         IF(MASWRK)WRITE(IW,'(A,I8,A)')
     *      ' THIS SPHERICAL SYSTEM HAS ',
     *      NWATER,' WATER MOLECULES ADDED.'
         IF(MASWRK.AND.(IADDNA1+JADDNA1).GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDNA1+JADDNA1,' NA+    IONS ADDED.'
         IF(MASWRK.AND.(IADDK1+JADDK1).GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDK1+JADDK1, ' K+     IONS ADDED.'
         IF(MASWRK.AND.IADDCL1.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDCL1,' CL-    IONS ADDED.'
         IF(MASWRK.AND.IADDCA2.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDCA2,' CA2+   IONS ADDED.'
         IF(MASWRK.AND.IADDMG2.GT.0)WRITE(IW,'(A,I8,A)')
     *      ' AND ',IADDMG2,' MG2+   IONS ADDED.'
         IF(MASWRK) WRITE(IW,*) ' '
      END IF
C
C     -- MATCH QM AND MM ATOMS -- 
C                 
      CALL VICLR(LISTQM,1,NFFAT+NAT+1)
      DO 310 IAT =1, NAT
         DO IFFAT =1,NFFAT
            DIFF = ABS(C(1,IAT)-CORD(1,IFFAT))
     *            +ABS(C(2,IAT)-CORD(2,IFFAT))
     *            +ABS(C(3,IAT)-CORD(3,IFFAT))
            IF(DIFF.LT.0.01D+00) THEN
               LISTQM(IFFAT    )   = IAT
               LISTQM(NFFAT+IAT)   = IFFAT
               LISTQM(NFFAT+NAT+1) = LISTQM(NFFAT+NAT+1) + 1
C              -- ENFORCE MM COORD AND MASS
               C(1,IAT)      = CORD(1,IFFAT)
               C(2,IAT)      = CORD(2,IFFAT)
               C(3,IAT)      = CORD(3,IFFAT)
               QMZMAS(IAT)   = ZMAS(IFFAT)
               QM1MAS(IAT)   = ONEMAS(IFFAT)
               GOTO 310
            END IF
         ENDDO
 310  CONTINUE
C
C     -- AUTOMATICALLY GENERATE LKQM LIST --
C        LKQM(1,*) = MM FRONTIER ATOM (E.G. PROTEIN ALPHA CARBON)
C                    IT CAN BE A WEAK QM H ATOM
C        LKQM(2,*) = QM FRONTIER ATOM (E.G. PROTEIN BETA CARBON)
C
      NLKQMM = 0
      IF(NAT.GT.0.AND.NFFAT.GT.0) THEN
      DO IANGL=1,NANGL
         KK1 = KLIST(1,IANGL)
         KK2 = KLIST(2,IANGL)
         KK3 = KLIST(3,IANGL)
         IF(LISTQM(KK1).EQ.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK3).GT.0) THEN
            KADD = 1
            DO ILKQMM =1, NLKQMM
               IF(LKQM(1,ILKQMM).EQ.LISTQM(KK2) .AND.
     *            LKQM(2,ILKQMM).EQ.LISTQM(KK3)) KADD = 0
            ENDDO
            IF(KADD.EQ.1) THEN
               NLKQMM = NLKQMM + 1
               LKQM(1,NLKQMM) = LISTQM(KK2)
               LKQM(2,NLKQMM) = LISTQM(KK3)
            END IF
         END IF
         IF(LISTQM(KK3).EQ.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK1).GT.0) THEN
            KADD = 1
            DO ILKQMM =1, NLKQMM
               IF(LKQM(1,ILKQMM).EQ.LISTQM(KK2) .AND.
     *            LKQM(2,ILKQMM).EQ.LISTQM(KK1)) KADD = 0
            ENDDO
            IF(KADD.EQ.1) THEN
               NLKQMM = NLKQMM + 1
               LKQM(1,NLKQMM) = LISTQM(KK2)
               LKQM(2,NLKQMM) = LISTQM(KK1)
            END IF
         END IF
         IF(NLKQMM.GT.200) THEN
            IF(MASWRK)WRITE(IW,*)
     *      'ERROR: TOO MANY QM/MM BOUNDARY COVALENT BONDS'
            CALL ABRT
         END IF
      ENDDO
      END IF
C
C     -- ZERO OFF MM NONBOND INTERACTIONS IF PART OF QM
C        EXCEPT FOR THE FRONTIER MM ATOMS, BECAUSE THE FRONTIER
C        ATOMS STILL NEED TO INTERACT WITH OTHER MM ATOMS
C
      LINKOK = 0
      DO 340 IFFAT =1,NFFAT
         KK = LISTQM(IFFAT)
         IF(KK.GT.0) THEN
            CLPR(1,IFFAT) = ZERO
            CLPR(2,IFFAT) = ZERO
            CLPR(3,IFFAT) = ZERO
            CLPR(4,IFFAT) = ZERO
            ZLPR(1,IFFAT) = ZERO
            ZLPR(2,IFFAT) = ZERO
            ZLPR(3,IFFAT) = ZERO
            ZLPR(4,IFFAT) = ZERO
            POL(IFFAT)    = ZERO
C
            LNK = 0
            DO III = 1, NLKQMM
               IF(KK.EQ.LKQM(1,III)) LNK=LNK + 1
            ENDDO
            LINKOK = LINKOK + LNK
C           - ZERO THEM IF LNK=0 OR LNK=2, 3, 4
C             MULTIPLE LINK ROLE IS POSSIBLE
            IF(LNK.NE.1) THEN
               CHARG(IFFAT)  = ZERO
               SIG(IFFAT)    = ZERO
               EPS(IFFAT)    = ZERO
               SIG2(IFFAT)   = ZERO
               EPS2(IFFAT)   = ZERO
            END IF
C
            DO III = 1, NQMREP
               IF(IFFAT.EQ.LISTQM(NFFAT+IATREP(III))) THEN
                  CLPR(1,IFFAT) = CRPIAT(1,III)
                  CLPR(2,IFFAT) = CRPIAT(2,III)
                  CLPR(3,IFFAT) = CRPIAT(3,III)
                  CLPR(4,IFFAT) = CRPIAT(4,III)
                  ZLPR(1,IFFAT) = ZRPIAT(1,III)
                  ZLPR(2,IFFAT) = ZRPIAT(2,III)
                  ZLPR(3,IFFAT) = ZRPIAT(3,III)
                  ZLPR(4,IFFAT) = ZRPIAT(4,III)
               END IF
            ENDDO
C
         END IF
 340  CONTINUE
      IF(LINKOK.NE.NLKQMM) THEN
         IF(MASWRK) WRITE(IW,*)'LINKOK=',LINKOK,'NLKQMM=',NLKQMM
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: FAILED TO LINK QM-MM ATOMS.'
         CALL ABRT
      END IF
C
C     -- ZERO OFF THE REPULSION TERM IN QMMMREP FOR MM ATOMS
C        THAT FORM BONDS TO FRONTIER MM ATOMS, WHICH ARE QM
C        ATOMS, TYPICALLY H.
C        
      DO IBOND=1,NBOND
         KK1 = IPAIR(1,IBOND)
         KK2 = IPAIR(2,IBOND)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).EQ.0 .OR.
     *      LISTQM(KK1).EQ.0 .AND. LISTQM(KK2).GT.0) THEN
            IF(LISTQM(KK2).EQ.0) IFFAT = KK2
            IF(LISTQM(KK1).EQ.0) IFFAT = KK1
            DO III = 1, 4
               IF(CLPR(III,IFFAT).GT.ZERO) THEN
                  CLPR(III,IFFAT) = ZERO
                  ZLPR(III,IFFAT) = ZERO
               END IF
            ENDDO
         END IF
      ENDDO
C
C     -- ZERO OFF MM COVALENT TERMS FOR QM ATOMS
C        SOME MAY RETAIN
C
      DO IBOND=1,NBOND
         KK1 = IPAIR(1,IBOND)
         KK2 = IPAIR(2,IBOND)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0) THEN
            LNK = 0
            DO III = 1, NLKQMM
               JJ1 = LKQM(1,III)
               JJ2 = LKQM(2,III)
               IF((LISTQM(KK1).EQ.JJ1.AND.LISTQM(KK2).EQ.JJ2) .OR.
     *            (LISTQM(KK2).EQ.JJ1.AND.LISTQM(KK1).EQ.JJ2))
     *             LNK = 1
            ENDDO
            IF(LNK.EQ.0) FCBOND(IBOND) = ZERO
            IF(LNK.EQ.1) FCBOND(IBOND) = -ABS(FCBOND(IBOND))*1.0D+10
         END IF
      ENDDO
      DO IANGL=1,NANGL
         KK1 = KLIST(1,IANGL)
         KK2 = KLIST(2,IANGL)
         KK3 = KLIST(3,IANGL)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0
     *                       .AND. LISTQM(KK3).GT.0) THEN
            LNK = 0
            DO III = 1, NLKQMM
               JJ1 = LKQM(1,III)
               JJ2 = LKQM(2,III)
               IF((LISTQM(KK1).EQ.JJ1.AND.LISTQM(KK2).EQ.JJ2) .OR.
     *            (LISTQM(KK3).EQ.JJ1.AND.LISTQM(KK2).EQ.JJ2))
     *             LNK = 1
            ENDDO
            IF(LNK.EQ.0) FCANGL(IANGL) = ZERO
            IF(LNK.EQ.1) FCANGL(IANGL) = -ABS(FCANGL(IANGL))*1.0D+10
         END IF
      ENDDO
      DO IDIHR=1,NDIHR
         KK1 = LLIST(1,IDIHR)
         KK2 = LLIST(2,IDIHR)
         KK3 = LLIST(3,IDIHR)
         KK4 = LLIST(4,IDIHR)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK3).GT.0 .AND. LISTQM(KK4).GT.0) THEN
            LNK = 0
            DO III = 1, NLKQMM
               JJ1 = LKQM(1,III)
               JJ2 = LKQM(2,III)
               IF((LISTQM(KK1).EQ.JJ1.AND.LISTQM(KK2).EQ.JJ2) .OR.
     *            (LISTQM(KK4).EQ.JJ1.AND.LISTQM(KK3).EQ.JJ2))
     *             LNK = 1
            ENDDO
            IF(LNK.EQ.0) VROT(IDIHR) = ZERO
            IF(LNK.EQ.1) VROT(IDIHR) = -ABS(VROT(IDIHR))*1.0D+10
         END IF
      ENDDO
      DO IDIHB=1,NDIHB
         KK1 = NLIST(1,IDIHB)
         KK2 = NLIST(2,IDIHB)
         KK3 = NLIST(3,IDIHB)
         KK4 = NLIST(4,IDIHB)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK3).GT.0 .AND. LISTQM(KK4).GT.0)
     *      FCDIHB(IDIHB) = ZERO
      ENDDO
      DO IWAGG=1,NWAGG
         KK1 = MLIST(1,IWAGG)
         KK2 = MLIST(2,IWAGG)
         KK3 = MLIST(3,IWAGG)
         KK4 = MLIST(4,IWAGG)
         IF(LISTQM(KK1).GT.0 .AND. LISTQM(KK2).GT.0 .AND.
     *      LISTQM(KK3).GT.0 .AND. LISTQM(KK4).GT.0)
     *      FCWAGG(IWAGG) = ZERO
      ENDDO
C
C     -- IDENTIFY QM-MM PAIRS OF ATOMS NEAR THE QMMM LINK BONDS
C        THESE PAIRS COULD BE EXCLUDED IN QM-MM INTERACTIONS
C        SUCH AS NUC-CHG, NUC-POL, ELE-CHG, ELE-POL, ELE-REP
C        (CURRENTLY NOT USED. HUI LI AUG 10, 2011)
C
      DO III = 1, NLKQMM
         LKQMMM(1,III) = LKQM(1,III)                !  QM SERIAL #
         LKQMMM(2,III) = LISTQM(NFFAT+LKQM(1,III))  !  MM SERIAL #
         LKQMMM(3,III) = LKQM(2,III)                !  QM SERIAL #
         LKQMMM(4,III) = LISTQM(NFFAT+LKQM(1,III))  !  MM SERIAL #
         LFIND = 4          !  THE FIRST 4 PLACES ARE USED
         DO IANGL=1,NANGL
            KK1 = KLIST(1,IANGL)
            KK2 = KLIST(2,IANGL)
            KK3 = KLIST(3,IANGL)
            IF(KK1.EQ.LISTQM(NFFAT+LKQMMM(1,III)).AND.
     *         KK2.EQ.LKQMMM(2,III)     )THEN
                  LKQMMM(LFIND+1,III) = LKQMMM(1,III)
                  LKQMMM(LFIND+2,III) = KK3
                  LFIND               = LFIND + 2
                  LKQMMM(LFIND+1,III) = LISTQM(LKQMMM(2,III))
                  LKQMMM(LFIND+2,III) = KK3
                  LFIND               = LFIND + 2
            END IF
            IF(KK2.EQ.LISTQM(NFFAT+LKQMMM(1,III)).AND.
     *         KK3.EQ.LKQMMM(2,III).AND.
     *         LISTQM(KK1).GT.0     )THEN
                  LKQMMM(LFIND+1,III) = LISTQM(KK1)
                  LKQMMM(LFIND+2,III) = KK3
                  LFIND               = LFIND + 2
            END IF
            IF(KK2.EQ.LISTQM(NFFAT+LKQMMM(1,III)).AND.
     *         KK1.EQ.LKQMMM(2,III).AND.
     *         LISTQM(KK3).GT.0     )THEN
                  LKQMMM(LFIND+1,III) = LISTQM(KK3)
                  LKQMMM(LFIND+2,III) = KK1
                  LFIND               = LFIND + 2
            END IF
            IF(KK3.EQ.LISTQM(NFFAT+LKQMMM(1,III)).AND.
     *         KK2.EQ.LKQMMM(2,III)     )THEN
                  LKQMMM(LFIND+1,III) = LKQMMM(1,III)
                  LKQMMM(LFIND+2,III) = KK1
                  LFIND               = LFIND + 2
                  LKQMMM(LFIND+1,III) = LISTQM(LKQMMM(2,III))
                  LKQMMM(LFIND+2,III) = KK1
                  LFIND               = LFIND + 2
            END IF
            IF(KK1.EQ.LKQMMM(2,III).AND. LISTQM(KK1).GT.0 .AND.
     *         LISTQM(KK2).EQ.0 .AND. LISTQM(KK3).EQ.0)THEN
                  LKQMMM(LFIND+1,III) = LISTQM(KK1)
                  LKQMMM(LFIND+2,III) = KK3
                  LFIND               = LFIND + 2
            END IF
            IF(KK3.EQ.LKQMMM(2,III).AND. LISTQM(KK3).GT.0 .AND.
     *         LISTQM(KK2).EQ.0 .AND. LISTQM(KK1).EQ.0)THEN
                  LKQMMM(LFIND+1,III) = LISTQM(KK3)
                  LKQMMM(LFIND+2,III) = KK1
                  LFIND               = LFIND + 2
            END IF
         ENDDO
         IF(LFIND.GT.100) THEN
            IF(MASWRK) WRITE(IW,*)'ERROR: LKQMMM LIST IS FULL.'
            CALL ABRT
         END IF
      ENDDO
C
C     -- ASSIGN INITIAL VELOCITY --
C
      IF((NAT.GT.0 .AND. INPQMV.EQ.0) .OR. INPMMV.EQ.0) THEN
         CALL VALFM(LOADFM)
         LSET   = LOADFM   + 1
         LDX    = LSET     + 3*(NFFAT+NAT)
         LDY    = LDX      + NFFAT+NAT
         LDZ    = LDY      + NFFAT+NAT
         LAST   = LDZ      + NFFAT+NAT
         NEED   = LAST     - LOADFM -1
         CALL GETFM(NEED)
         CALL INIVEL(VEL,QMVEL,ONEMAS,QM1MAS,
     *               CORD,ZMAS,QMZMAS,X(LSET),X(LDX),X(LDY),X(LDZ),
     *               LISTQM)
         CALL RETFM(NEED)
      END IF
C
C     -- DUPLICATE THE READ IN MM MOLECULE 'NCOPY' TIMES --
C        HUI LI
C
      IF(NFOLD.EQ.0 .OR. NAT.GT.0) GOTO 350
      NCOPY = 2**NFOLD
      DO KCOPY=2, NCOPY
         KK = (KCOPY-1)*NFFAT+1
         DO IFFAT=1, NFFAT
            ATMNAM(KK+IFFAT-1) =ATMNAM(IFFAT)
         ENDDO
         CALL DCOPY(3*NFFAT,   VEL,1, VEL(1,KK),1)
         CALL DCOPY(  NFFAT,  ZANF,1,  ZANF(KK),1)
         CALL DCOPY(  NFFAT,  ZMAS,1,  ZMAS(KK),1)
         CALL DCOPY(  NFFAT,ONEMAS,1,ONEMAS(KK),1)
         CALL DCOPY(  NFFAT, CHARG,1, CHARG(KK),1)
         CALL DCOPY(  NFFAT,   POL,1,   POL(KK),1)
         CALL DCOPY(  NFFAT,   SIG,1,   SIG(KK),1)
         CALL DCOPY(  NFFAT,   EPS,1,   EPS(KK),1)
         CALL DCOPY(  NFFAT,  SIG2,1,  SIG2(KK),1)
         CALL DCOPY(  NFFAT,  EPS2,1,  EPS2(KK),1)
         CALL DCOPY(4*NFFAT,  CLPR,1,CLPR(1,KK),1)
         CALL DCOPY(4*NFFAT,  ZLPR,1,ZLPR(1,KK),1)
         CALL ICOPY(  NFFAT,  NLPR,1,  NLPR(KK),1)
         KK = (KCOPY-1)*NBOND+1
         CALL DCOPY(  NBOND, BOND0,1, BOND0(KK),1)
         CALL DCOPY(  NBOND,FCBOND,1,FCBOND(KK),1)
         KK = (KCOPY-1)*NANGL+1
         CALL DCOPY(  NANGL, ANGL0,1, ANGL0(KK),1)
         CALL DCOPY(  NANGL,FCANGL,1,FCANGL(KK),1)
         KK = (KCOPY-1)*NDIHR+1
         CALL DCOPY(  NDIHR,  GAMA,1,  GAMA(KK),1)
         CALL ICOPY(  NDIHR,   NNN,1,   NNN(KK),1)
         CALL DCOPY(  NDIHR,  VROT,1,  VROT(KK),1)
         KK = (KCOPY-1)*NDIHB+1
         CALL DCOPY(  NDIHB, DIHB0,1, DIHB0(KK),1)
         CALL DCOPY(  NDIHB,FCDIHB,1,FCDIHB(KK),1)
         KK = (KCOPY-1)*NWAGG+1
         CALL DCOPY(  NWAGG,FCWAGG,1,FCWAGG(KK),1)
      ENDDO
      SIZE =RFOLD/2.0D+00
      DO IFOLD = 1, NFOLD
         IXYZ1 = MOD(IFOLD,3)
         IF(IXYZ1.EQ.1) IXYZ2 = 2
         IF(IXYZ1.EQ.1) IXYZ3 = 3
         IF(IXYZ1.EQ.2) IXYZ2 = 1
         IF(IXYZ1.EQ.2) IXYZ3 = 3
         IF(IXYZ1.EQ.0) IXYZ2 = 1
         IF(IXYZ1.EQ.0) IXYZ3 = 2
         IF(IXYZ1.EQ.0) IXYZ1 = 3
         IF(IXYZ1.EQ.1) SIZE  = SIZE*2.0D+00
         NDONE  = 2**(IFOLD-1)
         LENGTH = NFFAT*NDONE
         DO III = 1, LENGTH
            CORD(IXYZ1,LENGTH+III) = CORD(IXYZ1,III) + SIZE
            CORD(IXYZ2,LENGTH+III) = CORD(IXYZ2,III)
            CORD(IXYZ3,LENGTH+III) = CORD(IXYZ3,III)
         ENDDO
         LENBOND= NBOND*NDONE
         DO III = 1, LENBOND
            IPAIR(1,   LENBOND+III) = IPAIR(1,   III) + LENGTH
            IPAIR(2,   LENBOND+III) = IPAIR(2,   III) + LENGTH
         ENDDO
         LENANGL= NANGL*NDONE
         DO III = 1, LENANGL
            KLIST(1,   LENANGL+III) = KLIST(1,   III) + LENGTH
            KLIST(2,   LENANGL+III) = KLIST(2,   III) + LENGTH
            KLIST(3,   LENANGL+III) = KLIST(3,   III) + LENGTH
         ENDDO
         LENDIHR= NDIHR*NDONE
         DO III = 1, LENDIHR
            LLIST(1,   LENDIHR+III) = LLIST(1,   III) + LENGTH
            LLIST(2,   LENDIHR+III) = LLIST(2,   III) + LENGTH
            LLIST(3,   LENDIHR+III) = LLIST(3,   III) + LENGTH
            LLIST(4,   LENDIHR+III) = LLIST(4,   III) + LENGTH
         ENDDO
         LENDIHB= NDIHB*NDONE
         DO III = 1, LENDIHB
            NLIST(1,   LENDIHB+III) = NLIST(1,   III) + LENGTH
            NLIST(2,   LENDIHB+III) = NLIST(2,   III) + LENGTH
            NLIST(3,   LENDIHB+III) = NLIST(3,   III) + LENGTH
            NLIST(4,   LENDIHB+III) = NLIST(4,   III) + LENGTH
         ENDDO
         LENWAGG= NWAGG*NDONE
         DO III = 1, LENWAGG
            MLIST(1,   LENWAGG+III) = MLIST(1,   III) + LENGTH
            MLIST(2,   LENWAGG+III) = MLIST(2,   III) + LENGTH
            MLIST(3,   LENWAGG+III) = MLIST(3,   III) + LENGTH
            MLIST(4,   LENWAGG+III) = MLIST(4,   III) + LENGTH
         ENDDO
         LEN1213J= N1213J*NDONE
         DO III = 1, LEN1213J
            L1213J(1, LEN1213J+III) = L1213J(1,  III) + LENGTH
            L1213J(2, LEN1213J+III) = L1213J(2,  III) + LENGTH
         ENDDO
         LEN14J= N14J*NDONE
         DO III = 1, LEN14J
            L14J(1,     LEN14J+III) = L14J(1,    III) + LENGTH
            L14J(2,     LEN14J+III) = L14J(2,    III) + LENGTH
         ENDDO
      ENDDO
      NFFAT=NFFAT*NCOPY
      NBOND=NBOND*NCOPY
      NANGL=NANGL*NCOPY
      NDIHR=NDIHR*NCOPY
      NDIHB=NDIHB*NCOPY
      NWAGG=NWAGG*NCOPY
      N1213J=N1213J*NCOPY
      N14J = N14J*NCOPY
C
 350  CONTINUE
C
C     -- SEARCH FOR CHARMM STYLE PARAMETERS
C
      IF(LOUT.EQ.314159) THEN
C
      IF(MASWRK) THEN
      WRITE(IW,*)' '
      WRITE(IW,*)'$',AANAM
      IF(AANAM.EQ.'FFDATA  ') WRITE(IW,'(A,I6)')' MXFFAT=',NFFAT+100
C
C        *** COORDINATES ***
C
      WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
      DO IFFAT=1,NFFAT
         WRITE(IW,1010) ATMNAM(IFFAT),ZANF(IFFAT),
     *   CORD(1,IFFAT)*TOANGS,CORD(2,IFFAT)*TOANGS,CORD(3,IFFAT)*TOANGS
      ENDDO
      WRITE(IW,*)'STOP'
      END IF
C
C        *** CHARGES IN TOP ***
C
      IF(MASWRK) THEN
         CALL GENQPFILE('LOUT314159.TOP ',QPFILE,LENQP)
         OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      END IF
      IEOF=0
      CALL SEQREW(12)
      WORD8A='RESI '//AANAM(1:3)
      CALL FNDGRP(12,WORD8A,IEOF)
      IF(IEOF.EQ.1) GOTO 382
      DO 380 IFFAT=1,NFFAT
         IERR   = 0
         IEOF   = 0
         CALL SEQREW(12)
         CALL FNDGRP(12,WORD8A,IEOF)
         CALL OPNCRD(12,-IW)
 381     CONTINUE
         CALL RDCARD('ENTRY   ',IEOF)
         IF(IEOF.EQ.1) THEN
            IF(MASWRK) WRITE(IW,*)
     *      'ERROR: END OF FILE READING LOUT314159.TOP'
            CALL ABRT
         END IF
         WORD5A='     '
         WORD5B='     '
         WORD5C='     '
         KSIZE = -5
         CALL GSTRNG(WORD5A,KSIZE)
         IF(WORD5A.EQ.'ATOM ')THEN
            CALL GSTRNG(WORD5B,KSIZE)
            CALL GSTRNG(WORD5C,KSIZE)
            IF(WORD5B.EQ.ATMNAM(IFFAT)(1:5))THEN
               ATMNAM(IFFAT) = WORD5C                 ! CHANGE NAME
               CHARG(IFFAT)  = RFIND('CHARGE',IERR)
               GOTO 380
            END IF
         ELSE IF(WORD5A.EQ.'BOND ')THEN
           IF(MASWRK) WRITE(IW,*)'ERROR:',ATMNAM(IFFAT)(1:5),
     *     ' NOT IN LOUT314159.TOP'
           CALL ABRT
         END IF
         GOTO 381
 380  CONTINUE
 382  CONTINUE
      IF(MASWRK) CLOSE(12)
C
C        *** LJ RMIN/2 AND EPSILON IN PAR ***
C
      IF(MASWRK) THEN
         CALL GENQPFILE('LOUT314159.PAR ',QPFILE,LENQP)
         OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      END IF
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,'NONBONDE',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: NONBONDE',
     *          ' GROUP NOT FOUND IN LOUT314159.PAR'
         GOTO 392
      END IF
      DO 390 IFFAT=1,NFFAT
         WORD5E =  ATMNAM(IFFAT)(1:5)
         IERR = 0
         IEOF = 0
         CALL SEQREW(12)
         CALL FNDGRP(12,'NONBONDE',IEOF)
         CALL OPNCRD(12,-IW)
 391     CONTINUE
         CALL RDCARD('ENTRY   ',IEOF)
         IF(IEOF.EQ.1) THEN
            IF(MASWRK) WRITE(IW,*)
     *      'ERROR: ',WORD5E,' NOT IN LOUT314159.PAR'
            CALL ABRT
         END IF
         WORD5F='     '
         KSIZE = -5
         LSIZE = -9
         CALL GSTRNG(WORD5F,KSIZE)
         IF(WORD5E.EQ.WORD5F)THEN
            DUMMY       = RFIND('DUMMY',IERR)
            DUMMY       = DUMMY*0.0D+00
            EPS(IFFAT)  = ABS(RFIND('EPSILON',IERR)*TOHART)
            SIG(IFFAT)  = RFIND('SIGMA',IERR)*TOBOHR
            EPS2(IFFAT) = 0.0D+00
            SIG2(IFFAT) = 0.0D+00
            WORD9A      = '         '
            WORD9B      = '         '
            WORD9C      = '         '
            SIGMA2      = 0.0D+00
            EPSILON2    = 0.0D+00
            CALL GSTRNG(WORD9A,LSIZE)
            CALL GSTRNG(WORD9B,LSIZE)
            CALL GSTRNG(WORD9C,LSIZE)
            IF(WORD9A.NE.'         ') THEN
               READ(WORD9B,'(F9.6)')EPSILON2
               READ(WORD9C,'(F9.6)')SIGMA2
               EPS2(IFFAT) =-EPSILON2*TOHART
               SIG2(IFFAT) = SIGMA2*TOBOHR
            END IF
            GOTO 390
         END IF
         GOTO 391
 390  CONTINUE
 392  CONTINUE
C
C        *** MASS, Q AND POL IN PAR ***
C        
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,'MASSQPOL',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: MASSQPOL',
     *          ' GROUP NOT FOUND IN LOUT314159.PAR'
         GOTO 395
      END IF
      DO 393 IFFAT=1,NFFAT
         WORD5E =  ATMNAM(IFFAT)(1:5)
         IERR = 0  
         IEOF = 0
         CALL SEQREW(12)
         CALL FNDGRP(12,'MASSQPOL',IEOF)
         CALL OPNCRD(12,-IW)
 394     CONTINUE
         CALL RDCARD('ENTRY   ',IEOF)
         IF(IEOF.EQ.1) THEN   
            IF(MASWRK) WRITE(IW,*)
     *      'ERROR: ',WORD5E,' NOT IN LOUT314159.PAR'
            CALL ABRT
         END IF
         WORD5F='     '
         KSIZE = -5   
         CALL GSTRNG(WORD5F,KSIZE)
         IF(WORD5E.EQ.WORD5F)THEN
            ZMAS(IFFAT) = RFIND('MASS ',IERR)*1822.88850204D+00
            CHARG(IFFAT)= RFIND('CHARG',IERR)
            POL(IFFAT)  = RFIND('POL',IERR)*TOBOHR**3
            GOTO 393
         END IF
         GOTO 394
 393  CONTINUE
 395  CONTINUE
C
C
      IF(MASWRK) THEN
      WRITE(IW,*)'PARAMETERS       MASS         Q      ',
     *          'POL   RMIN/2  EPSILON   RMIN/2  EPSILON'
      DO IFFAT=1,NFFAT
         WRITE(IW,1020)ATMNAM(IFFAT),ZMAS(IFFAT)/1822.88850204D+00,
     *                 CHARG(IFFAT),POL(IFFAT)*TOANGS**3,
     *                 SIG(IFFAT)*TOANGS,EPS(IFFAT)*TOKCAL,
     *                 SIG2(IFFAT)*TOANGS,EPS2(IFFAT)*TOKCAL
      ENDDO
      WRITE(IW,*)'STOP'
      END IF
C
C
C        *** QMMMREP IN PAR ***
C        
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,'QMMMREP ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: QMMMREP',
     *          ' GROUP NOT FOUND IN LOUT314159.PAR'
         GOTO 398 
      END IF
      DO 396 IFFAT=1,NFFAT
         WORD5E =  ATMNAM(IFFAT)(1:5)
         IERR = 0  
         IEOF = 0
         CALL SEQREW(12)
         CALL FNDGRP(12,'QMMMREP ',IEOF)
         CALL OPNCRD(12,-IW)
 397     CONTINUE
         CALL RDCARD('ENTRY   ',IEOF)
         IF(IEOF.EQ.1) THEN
            IF(MASWRK) WRITE(IW,*)
     *      'ERROR: ',WORD5E,' NOT IN LOUT314159.PAR'
            CALL ABRT
         END IF
         WORD5F='     '
         KSIZE = -5
         CALL GSTRNG(WORD5F,KSIZE)
         IF(WORD5E.EQ.WORD5F)THEN
            NTERMS = IFIND('NTERM   ',IERR)
            IF(NTERMS.GT.4) THEN
               IF(MASWRK) WRITE(IW,*)
     *         'ERROR IN LOUT314159.PAR: NTERMS CANNOT BE > 4'
               CALL ABRT
            END IF
            DO II = 1, NTERMS
               CLPR(II,IFFAT) = RFIND('CLPR    ',IERR)
               ZLPR(II,IFFAT) = RFIND('ZLPR    ',IERR)
            ENDDO
            NLPR(IFFAT) = 2
            GOTO 396
         END IF
         GOTO 397
 396  CONTINUE
 398  CONTINUE
C
C        *** PRINT OUT QMMMREP ***
C
      IF(MASWRK) THEN
      WRITE(IW,*)'QMMMREP    N       C1     Z1       C2     Z2',
     *          '       C3     Z3       C4     Z4'
      DO IFFAT=1,NFFAT
         WRITE(IW,1030) ATMNAM(IFFAT),4,
     *                 CLPR(1,IFFAT),ZLPR(1,IFFAT),
     *                 CLPR(2,IFFAT),ZLPR(2,IFFAT),
     *                 CLPR(3,IFFAT),ZLPR(3,IFFAT),
     *                 CLPR(4,IFFAT),ZLPR(4,IFFAT)
      ENDDO
      WRITE(IW,*)'STOP'
      END IF
C
C        *** BONDS IN PAR ***
C
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,'BONDS   ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: BONDS   ',
     *          ' GROUP NOT FOUND IN LOUT314159.PAR'
         CALL ABRT
      END IF
      DO 400 IBOND=1,NBOND
         KK1    = IPAIR(1,IBOND)
         KK2    = IPAIR(2,IBOND)
         WORD10A= ATMNAM(KK1)(1:5)//ATMNAM(KK2)(1:5)
         WORD10B= ATMNAM(KK2)(1:5)//ATMNAM(KK1)(1:5)
         IERR = 0
         IEOF = 0
         CALL SEQREW(12)
         CALL FNDGRP(12,'BONDS   ',IEOF)
         CALL OPNCRD(12,-IW)
 401     CONTINUE
         CALL RDCARD('ENTRY   ',IEOF)
         IF(IEOF.EQ.1) THEN
            IF(MASWRK)WRITE(IW,*)WORD10A,'          OR       ',
     *                WORD10B,'          NOT IN LOUT314159.PAR'
            FCBOND(IBOND) = 1.0D+20
            BOND0(IBOND)  = 1.0D+20
            GOTO 400
         END IF
         WORD5A ='     '
         WORD5B ='     '
         KSIZE = -5
         CALL GSTRNG(WORD5A,KSIZE)
         CALL GSTRNG(WORD5B,KSIZE)
         ENTRY10 = WORD5A//WORD5B
         IF(ENTRY10.EQ.WORD10A .OR. ENTRY10.EQ.WORD10B)THEN
            FCBOND(IBOND) = RFIND('FCBOND',IERR)
            BOND0(IBOND)  = RFIND('BOND0' ,IERR)
            FCBOND(IBOND) = FCBOND(IBOND)*TOHART*TOANGS*TOANGS
            BOND0(IBOND)  = BOND0(IBOND)*TOBOHR
            GOTO 400
         END IF
         GOTO 401
 400  CONTINUE
C
C        *** ANGLES IN PAR ***
C
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,'ANGLES  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: ANGLES  ',
     *          ' GROUP NOT FOUND IN LOUT314159.PAR'
         CALL ABRT
      END IF
      DO 410 IANGL=1,NANGL
         KK1    = KLIST(1,IANGL)
         KK2    = KLIST(2,IANGL)
         KK3    = KLIST(3,IANGL)
         WORD15A= ATMNAM(KK1)(1:5)//ATMNAM(KK2)(1:5)//ATMNAM(KK3)(1:5)
         WORD15B= ATMNAM(KK3)(1:5)//ATMNAM(KK2)(1:5)//ATMNAM(KK1)(1:5)
         IERR = 0
         IEOF = 0
         CALL SEQREW(12)
         CALL FNDGRP(12,'ANGLES  ',IEOF)
         CALL OPNCRD(12,-IW)
 411     CONTINUE
         CALL RDCARD('ENTRY   ',IEOF)
         IF(IEOF.EQ.1) THEN
            IF(MASWRK) WRITE(IW,*)WORD15A,'     OR       ',
     *                WORD15B,'     NOT IN LOUT314159.PAR'
            FCANGL(IANGL) = 1.0D+20
            ANGL0(IANGL)  = 1.0D+20
            GOTO 410
         END IF
         WORD5A ='     '
         WORD5B ='     '
         WORD5C ='     '
         KSIZE = -5
         LSIZE = -7
         CALL GSTRNG(WORD5A,KSIZE)
         CALL GSTRNG(WORD5B,KSIZE)
         CALL GSTRNG(WORD5C,KSIZE)
         ENTRY15 = WORD5A//WORD5B//WORD5C
         IF(ENTRY15.EQ.WORD15A .OR. ENTRY15.EQ.WORD15B)THEN
            FCANGL(IANGL) = RFIND('FCANGL',IERR)
            ANGL0(IANGL)  = RFIND('ANGL0' ,IERR)
            WORD7A='       '
            WORD7B='       '
            UBCONS=0.0D+00
            UBDIST=0.0D+00
            CALL GSTRNG(WORD7A,LSIZE)
            CALL GSTRNG(WORD7B,LSIZE)
            IF(WORD7A.NE.'       '.AND.WORD7B.NE.'       ') THEN
               READ(WORD7A,'(F7.2)')UBCONS
               READ(WORD7B,'(F7.5)')UBDIST
               NBOND = NBOND + 1
               IPAIR(1,NBOND) = KLIST(1,IANGL)
               IPAIR(2,NBOND) = KLIST(3,IANGL)
               FCBOND(NBOND)  = UBCONS*TOHART*TOANGS*TOANGS
               BOND0(NBOND)   = UBDIST*TOBOHR
            END IF
            FCANGL(IANGL) = FCANGL(IANGL)*TOHART
            ANGL0(IANGL)  = ANGL0(IANGL)*TORAD
            GOTO 410
         END IF
         GOTO 411
 410  CONTINUE
C
C     - NOW PRINT OUT BONDS AND ANGLES -
C
      IF(MASWRK) THEN
      WRITE(IW,*)'BOND     #     ATM1     ATM2       FC       R0'
      DO IBOND=1,NBOND
         WRITE(IW,1040)IBOND,IPAIR(1,IBOND),IPAIR(2,IBOND),
     *                 FCBOND(IBOND)*TOKCAL*TOBOHR*TOBOHR,
     *                 BOND0(IBOND)*TOANGS
      ENDDO
      WRITE(IW,*)'STOP'
C
      WRITE(IW,*)'ANGLE    #     ATM1     ATM2     ATM3 ',
     *          '      FC   ANGLE0'
      DO IANGL=1,NANGL
         WRITE(IW,1050)IANGL,KLIST(1,IANGL),KLIST(2,IANGL),
     *                 KLIST(3,IANGL),FCANGL(IANGL)*TOKCAL,
     *                 ANGL0(IANGL)*DEGREE
      ENDDO
      WRITE(IW,*)'STOP'
      END IF
C
C        *** DIHEDRAL ROTATION IN PAR ***
C
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,'DIHEDRAL',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: DIHEDRAL',
     *          ' GROUP NOT FOUND IN LOUT314159.PAR'
         GOTO 422
      END IF
      IF(MASWRK) WRITE(IW,*)'DIHROT   #     ATM1     ATM2     ATM3  ',
     *          '   ATM4     VROT        N    GAMMA'
      KDIHR   = 0
      DO 420 IDIHR=1,NDIHR
         LFIND  = 0
         KK1    = LLIST(1,IDIHR)
         KK2    = LLIST(2,IDIHR)
         KK3    = LLIST(3,IDIHR)
         KK4    = LLIST(4,IDIHR)
         WORD20A= ATMNAM(KK1)(1:5)//ATMNAM(KK2)(1:5)//
     *            ATMNAM(KK3)(1:5)//ATMNAM(KK4)(1:5)
         WORD20B= ATMNAM(KK4)(1:5)//ATMNAM(KK3)(1:5)//
     *            ATMNAM(KK2)(1:5)//ATMNAM(KK1)(1:5)
         WORD20C= 'X    '//ATMNAM(KK2)(1:5)//
     *            ATMNAM(KK3)(1:5)//'X    '
         WORD20D= 'X    '//ATMNAM(KK3)(1:5)//
     *            ATMNAM(KK2)(1:5)//'X    '
         IERR = 0
         IEOF = 0
         CALL SEQREW(12)
         CALL FNDGRP(12,'DIHEDRAL',IEOF)
         CALL OPNCRD(12,-IW)
 421     CONTINUE
         CALL RDCARD('ENTRY   ',IEOF)
         IF(IEOF.EQ.1) THEN
            IF(LFIND.EQ.0) THEN
               IF(MASWRK)WRITE(IW,*)WORD20A,'       OR '
               IF(MASWRK)WRITE(IW,*)WORD20B,'       OR '
               IF(MASWRK)WRITE(IW,*)WORD20C,'       OR '
               IF(MASWRK)WRITE(IW,*)WORD20D,
     *                    '       NOT IN LOUT314159.PAR'
               KDIHR       = KDIHR + 1
               VROT(KDIHR) = 1.0D+20
               NNN(KDIHR)  = 2147000000 ! JUST UNDER LARGEST 32 BIT INT
               GAMA(KDIHR) = 1.0D+20
               IF(MASWRK)WRITE(IW,1060)
     *                       KDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                       LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                       VROT(KDIHR),NNN(KDIHR),
     *                       GAMA(KDIHR)
            END IF
            GOTO 420
         END IF
         WORD5A ='     '
         WORD5B ='     '
         WORD5C ='     '
         WORD5D ='     '
         KSIZE = -5    
         CALL GSTRNG(WORD5A,KSIZE)
         IF(WORD5A.EQ.'IMPRO' .OR. WORD5A.EQ.'CMAP ') THEN
            IF(LFIND.EQ.0) THEN
               IF(MASWRK)WRITE(IW,*)WORD20A,'       OR '
               IF(MASWRK)WRITE(IW,*)WORD20B,'       OR '
               IF(MASWRK)WRITE(IW,*)WORD20C,'       OR '
               IF(MASWRK)WRITE(IW,*)WORD20D,
     *                    '       NOT IN LOUT314159.PAR'
               KDIHR       = KDIHR + 1
               VROT(KDIHR) = 1.0D+20
               NNN(KDIHR)  = 2147000000 ! JUST UNDER LARGEST 32 BIT INT
               GAMA(KDIHR) = 1.0D+20
               IF(MASWRK)WRITE(IW,1060)
     *                       KDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                       LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                       VROT(KDIHR),NNN(KDIHR),
     *                       GAMA(KDIHR)
            END IF
            GOTO 420
         END IF 
         CALL GSTRNG(WORD5B,KSIZE)
         CALL GSTRNG(WORD5C,KSIZE)
         CALL GSTRNG(WORD5D,KSIZE)
         ENTRY20 = WORD5A//WORD5B//WORD5C//WORD5D
         IF(ENTRY20.EQ.WORD20A) THEN 
            KDIHR         = KDIHR +1
            VROT(KDIHR)   = RFIND('VROT    ',IERR)
            NNN(KDIHR)    = IFIND('NNN     ',IERR)
            GAMA(KDIHR)   = RFIND('GAMMA   ' ,IERR)
            IF(IERR.EQ.0) THEN
            IF(MASWRK) WRITE(IW,1060)
     *              KDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                    LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                    VROT(KDIHR),NNN(KDIHR),
     *                    GAMA(KDIHR)
            VROT(KDIHR)=VROT(KDIHR)*TOHART
            GAMA(KDIHR)=GAMA(KDIHR)*TORAD
            LFIND = LFIND + 1
            ELSE
               IF(MASWRK)WRITE(IW,*)' '
               IF(MASWRK)WRITE(IW,*)
     *         '    QUANPOL: NOTHING IS WRONG. KEEP GOING.'
               IF(MASWRK)WRITE(IW,*)' '
               KDIHR = KDIHR - 1
            END IF
            GOTO 421
         END IF
         IF(ENTRY20.EQ.WORD20B) THEN
            KDIHR         = KDIHR +1
            VROT(KDIHR)   = RFIND('VROT',IERR)
            NNN(KDIHR)    = IFIND('NNN',IERR)
            GAMA(KDIHR)   = RFIND('GAMMA' ,IERR)
            IF(IERR.EQ.0) THEN
            IF(MASWRK)WRITE(IW,1060)
     *              KDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                    LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                    VROT(KDIHR),NNN(KDIHR),
     *                    GAMA(KDIHR)
            VROT(KDIHR)=VROT(KDIHR)*TOHART
            GAMA(KDIHR)=GAMA(KDIHR)*TORAD
            LFIND = LFIND + 1
            ELSE
               IF(MASWRK)WRITE(IW,*)' ' 
               IF(MASWRK)WRITE(IW,*)
     *         '    QUANPOL: NOTHING IS WRONG. KEEP GOING.'
               IF(MASWRK)WRITE(IW,*)' '
               KDIHR = KDIHR - 1
            END IF
            GOTO 421
         END IF
         IF(ENTRY20.EQ.WORD20C) THEN
            KDIHR         = KDIHR +1
            VROT(KDIHR)   = RFIND('VROT',IERR)
            NNN(KDIHR)    = IFIND('NNN',IERR)
            GAMA(KDIHR)   = RFIND('GAMMA' ,IERR)
            IF(IERR.EQ.0) THEN
            IF(MASWRK)WRITE(IW,1060)
     *                    KDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                    LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                    VROT(KDIHR),NNN(KDIHR),
     *                    GAMA(KDIHR)
            VROT(KDIHR)=VROT(KDIHR)*TOHART
            GAMA(KDIHR)=GAMA(KDIHR)*TORAD
            LFIND = LFIND + 1
            ELSE
               IF(MASWRK)WRITE(IW,*)' ' 
               IF(MASWRK)WRITE(IW,*)
     *         '    QUANPOL: NOTHING IS WRONG. KEEP GOING.'
               IF(MASWRK)WRITE(IW,*)' '
               KDIHR = KDIHR - 1
            END IF
            GOTO 421
         END IF
         IF(ENTRY20.EQ.WORD20D) THEN
            KDIHR         = KDIHR +1
            VROT(KDIHR)   = RFIND('VROT',IERR)
            NNN(KDIHR)    = IFIND('NNN',IERR)
            GAMA(KDIHR)   = RFIND('GAMMA' ,IERR)
            IF(IERR.EQ.0) THEN
            IF(MASWRK)WRITE(IW,1060)
     *                    KDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                    LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                    VROT(KDIHR),NNN(KDIHR),
     *                    GAMA(KDIHR)
            VROT(KDIHR)=VROT(KDIHR)*TOHART
            GAMA(KDIHR)=GAMA(KDIHR)*TORAD
            LFIND = LFIND + 1
            ELSE
               IF(MASWRK)WRITE(IW,*)' ' 
               IF(MASWRK)WRITE(IW,*)
     *         '    QUANPOL: NOTHING IS WRONG. KEEP GOING.'
               IF(MASWRK)WRITE(IW,*)' '
               KDIHR = KDIHR - 1
            END IF
            GOTO 421
         END IF
         GOTO 421
 420  CONTINUE
      NDIHR = KDIHR
      IF(MASWRK)WRITE(IW,*)'STOP'
 422  CONTINUE
C
C        *** DIHEDRAL BENDING (IMPROPER) IN PAR ***
C
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,'IMPROPER',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: IMPROPER',
     *          ' GROUP NOT FOUND IN LOUT314159.PAR'
         CALL ABRT
      END IF
      IF(MASWRK)WRITE(IW,*)'DIHBND   #     ATM1     ATM2     ATM3  ',
     *          '   ATM4       FC    DIHB0'
      KDIHB = 0
      DO 430 IDIHB=1,NDIHB
         KK1    = NLIST(1,IDIHB)
         KK2    = NLIST(2,IDIHB)
         KK3    = NLIST(3,IDIHB)
         KK4    = NLIST(4,IDIHB)
         WORD20A= ATMNAM(KK1)(1:5)//ATMNAM(KK2)(1:5)//
     *            ATMNAM(KK3)(1:5)//ATMNAM(KK4)(1:5)
         WORD20B= ATMNAM(KK4)(1:5)//ATMNAM(KK3)(1:5)//
     *            ATMNAM(KK2)(1:5)//ATMNAM(KK1)(1:5)
         WORD20C= ATMNAM(KK1)(1:5)//ATMNAM(KK3)(1:5)//
     *            ATMNAM(KK2)(1:5)//ATMNAM(KK4)(1:5)
         WORD20D= ATMNAM(KK4)(1:5)//ATMNAM(KK2)(1:5)//
     *            ATMNAM(KK3)(1:5)//ATMNAM(KK1)(1:5)
         WORD20E= ATMNAM(KK1)(1:5)//'X    '//
     *            'X    '//ATMNAM(KK4)(1:5)
         WORD20F= ATMNAM(KK4)(1:5)//'X    '//
     *            'X    '//ATMNAM(KK1)(1:5)
         IERR = 0
         IEOF = 0
         CALL SEQREW(12)
         CALL FNDGRP(12,'IMPROPER',IEOF)
         CALL OPNCRD(12,-IW)
         KFOUND = 0
 431     CONTINUE
         CALL RDCARD('ENTRY   ',IEOF)
         IF(IEOF.EQ.1) GOTO 430
         WORD5A ='     '
         WORD5B ='     '
         WORD5C ='     '
         WORD5D ='     '
         KSIZE = -5
         CALL GSTRNG(WORD5A,KSIZE)
         CALL GSTRNG(WORD5B,KSIZE)
         CALL GSTRNG(WORD5C,KSIZE)
         CALL GSTRNG(WORD5D,KSIZE)
         ENTRY20 = WORD5A//WORD5B//WORD5C//WORD5D
         IF(ENTRY20.EQ.WORD20A .OR. ENTRY20.EQ.WORD20B) THEN
            KDIHB         = KDIHB + 1
            KFOUND        = KFOUND+ 1
            FCDIHB(KDIHB) = RFIND('FCDIHB',IERR)
            K5F67         = IFIND('NDUMMY',IERR)
            DIHB0(KDIHB)  = RFIND('DIHB0' ,IERR)
            IF(MASWRK)WRITE(IW,1070)
     *                    KDIHB,NLIST(1,IDIHB),NLIST(2,IDIHB),
     *                          NLIST(3,IDIHB),NLIST(4,IDIHB),
     *                    FCDIHB(KDIHB),
     *                    DIHB0(KDIHB)
            FCDIHB(KDIHB)=FCDIHB(KDIHB)*TOHART
            DIHB0(KDIHB) =DIHB0(KDIHB)*TORAD
            IF(KFOUND.EQ.2) GOTO 430
         END IF
         IF(ENTRY20.EQ.WORD20C .OR. ENTRY20.EQ.WORD20D) THEN
            KDIHB         = KDIHB + 1
            KFOUND        = KFOUND+ 1
            FCDIHB(KDIHB) = RFIND('FCDIHB',IERR)
            K5F67         = IFIND('NDUMMY',IERR)
            DIHB0(KDIHB)  = RFIND('DIHB0' ,IERR)
            IF(MASWRK)WRITE(IW,1070)
     *                    KDIHB,NLIST(1,IDIHB),NLIST(3,IDIHB),
     *                          NLIST(2,IDIHB),NLIST(4,IDIHB),
     *                    FCDIHB(KDIHB),
     *                    DIHB0(KDIHB)
            FCDIHB(KDIHB)=FCDIHB(KDIHB)*TOHART
            DIHB0(KDIHB) =DIHB0(KDIHB)*TORAD
            IF(KFOUND.EQ.2) GOTO 430
         END IF
         IF(ENTRY20.EQ.WORD20E .OR. ENTRY20.EQ.WORD20F) THEN
            KDIHB         = KDIHB + 1
            KFOUND        = KFOUND+ 1
            FCDIHB(KDIHB) = RFIND('FCDIHB',IERR)
            K5F67         = IFIND('NDUMMY',IERR)
            DIHB0(KDIHB)  = RFIND('DIHB0' ,IERR)
            IF(MASWRK)WRITE(IW,1070)
     *                    KDIHB,NLIST(1,IDIHB),NLIST(2,IDIHB),
     *                          NLIST(3,IDIHB),NLIST(4,IDIHB),
     *                    FCDIHB(KDIHB),
     *                    DIHB0(KDIHB)
            FCDIHB(KDIHB)=FCDIHB(KDIHB)*TOHART
            DIHB0(KDIHB) =DIHB0(KDIHB)*TORAD
            IF(KFOUND.EQ.2) GOTO 430
         END IF
         K5F67 = K5F67*0
         GOTO 431
 430  CONTINUE
      IF(MASWRK) CLOSE(12)
      NDIHB = KDIHB
      IF(MASWRK)WRITE(IW,*)'STOP'
C
C     -- PRINT OUT CMAP AS WELL --
C
      IF(MASWRK) THEN
      WRITE(IW,*)'CMAP     #     ATM1     ATM2     ATM3  ',
     *          '   ATM4     ATM5    ITYPE'
      DO ICMAP=1,NCMAP
         WRITE(IW,1075) ICMAP,MAPLST(1,ICMAP),MAPLST(2,ICMAP),
     *                        MAPLST(3,ICMAP),MAPLST(4,ICMAP),
     *                        MAPLST(5,ICMAP),MAPLST(6,ICMAP)
      END DO
      WRITE(IW,*)'STOP'
C
C     -- PRINT OUT WAGGING AS WELL --
C
      WRITE(IW,*)'WAGGING  #     ATM2     ATM3     ATM4  ',
     *          '   ATM1       FC'
      DO IWAGG=1,NWAGG
         WRITE(IW,1080) IWAGG,MLIST(2,IWAGG),MLIST(3,IWAGG),
     *                 MLIST(4,IWAGG),MLIST(1,IWAGG),
     *                 FCWAGG(IWAGG)*TOKCAL
      END DO
      WRITE(IW,*)'STOP'
      WRITE(IW,*)'$END'
      WRITE(IW,*)' '
      WRITE(IW,'(1X,3(A,I10,7X))')'NFFAT   =',NFFAT,'NBOND   =',NBOND,
     *                            'NANGL   =',NANGL
      WRITE(IW,'(1X,3(A,I10,7X))')'NDIHR   =',NDIHR,'NDIHB   =',NDIHB,
     *                            'NWAGG   =',NWAGG
      WRITE(IW,*)' '
      END IF
C
      END IF      ! END OF LOUT=314159
C
C     -- DO NOT RUN MD --
      IF(LOUT.EQ.314159) NSTEPS=0
      IF(LOUT.EQ.314159) RETURN
C
C     ****** END OF PREPARATION CODE ******
C
C    
C     -- PRINT OUT $FFDATA OPTIONS
C
C     -- CHECK IF IT IS POL OR NOT --
C
      IF(IDOPOL.EQ.1) THEN
         IDOPOL = 0
         DO IFFAT=1, NFFAT
            IF(POL(IFFAT).NE.ZERO) IDOPOL = 1
         ENDDO
      END IF
C
      IF(MASWRK .AND. LOUT.NE.314159) THEN
      WRITE(IW,'(1X,3(A,I10,7X))')'NFFAT   =',NFFAT,'NBOND   =',NBOND,
     *                            'NANGL   =',NANGL
      WRITE(IW,'(1X,3(A,I10,7X))')'NDIHR   =',NDIHR,'NDIHB   =',NDIHB,
     *                            'NWAGG   =',NWAGG
      WRITE(IW,*)' '
C
      XBOXP = XBOX*TOANGS
      IF(XBOXP.GT.1.0D+6) XBOXP = 99999.9999D+00
      YBOXP = YBOX*TOANGS
      IF(YBOXP.GT.1.0D+6) YBOXP = 99999.9999D+00
      ZBOXP = ZBOX*TOANGS
      IF(ZBOXP.GT.1.0D+6) ZBOXP = 99999.9999D+00
      RCUTP = SQRT(RRCUT)*TOANGS
      IF(RCUTP.GT.1.0D+6) RCUTP = 99999.9999D+00
      SWR1P = SQRT(SWRR1)*TOANGS
      SWR2P = SQRT(SWRR2)*TOANGS
      IF(SWR2P.GT.1.0D+6) SWR2P = 99999.9999D+00
      RCUTQP= SQRT(RRCUTQ)*TOANGS
      IF(RCUTQP.GT.1.0D+6) RCUTQP = 99999.9999D+00
      SWR1QP = SQRT(SWRR1Q)*TOANGS
      SWR2QP = SQRT(SWRR2Q)*TOANGS
      IF(SWR2QP.GT.1.0D+6) SWR2QP = 99999.9999D+00
      WRITE(IW,'(/1X,3(A,F10.4,7X))')
     *   'XBOX    =',XBOXP, 'YBOX    =',YBOXP, 'ZBOX    =',ZBOXP
      WRITE(IW,'( 1X,3(A,F10.4,7X))')
     *   'SWR1    =',SWR1P,
     *   'SWR2    =',SWR2P,
     *   'RCUT    =',RCUTP
      WRITE(IW,'( 1X,3(A,F10.4,7X))')
     *   'SWR1Q   =',SWR1QP,
     *   'SWR2Q   =',SWR2QP,
     *   'RCUTQ   =',RCUTQP
      RXNRADP = RXNRAD*TOANGS
      IF(RXNRADP.GT.1.0D+6) RXNRADP = 99999.9999D+00
      SPHRADP = SPHRAD*TOANGS
      IF(SPHRADP.GT.1.0D+6) SPHRADP = 99999.9999D+00
      WRITE(IW,'( 1X,(A,I10,7X),2(A,F10.4,7X))')
     *   'IRXNFLD =',IRXNFLD,'RXNEPS  =',RXNEPS,'RXNRAD  =',RXNRADP
      WRITE(IW,'( 1X,3(A,F10.4,7X))')
     *   'SPHSIG  =',SPHSIG*TOANGS,
     *   'SPHEPS  =',SPHEPS*TOKCAL,
     *   'SPHRAD  =',SPHRADP
      WRITE(IW,'( 1X,3(A,I10,7X))')
     *   'IDOCHG  =',IDOCHG,'IDOPOL  =',IDOPOL,'IDOLJ   =',IDOLJ
      WRITE(IW,'( 1X,(A,E10.2,7X),2(A,I10,7X))')
     *   'DT      =',DT*2.418884326505D-17,
     *   'NSTEPS  =',NSTEPS,'INTALG  =',INTALG
      WRITE(IW,'( 1X,A,F10.4,7X,A,I10,7X,A,I10)')
     *   'TEMP0   =',TEMP0,  'ITSTAT  =',ITSTAT,'NPROP   =',NPROP
      WRITE(IW,'( 1X,A,F10.4,7X,A,I10,7X,A,I10)')
     *   'PRES0   =',PRES0,  'IPSTAT  =',IPSTAT,'NATPDB  =',NATPDB
      WRITE(IW,'( 1X,A,I10,7X,A,F10.4,7X,A,E10.2)')
     *   'MXLIST  =',MXLIST,'BUFLIST =',BUFLIST*TOANGS,
     *   'OPTTOL  =',OPTTOL
      WRITE(IW,'( 1X,3(A,I10,7X))')
     *   'JOUT    =',JOUT,  'KOUT    =',KOUT,  'LOUT    =',LOUT
      WRITE(IW,'( 1X,A,I10,7X,A,I10,7X,A,F10.4)')
     *   'NFFTYP  =',NFFTYP,'IDOCMAP =',IDOCMAP,'WT14    =',WT14
      WRITE(IW,'( 1X,A,I10,7X,A,E10.2,7X,A,I10)')
     *   'MXITER  =',MXITER,'POLTOL  =',POLTOL,'SWMODE  =',MODESW
      WRITE(IW,'( 1X,A,I10,7X,A,F10.4,7X,A,I10)')
     *   'RDF     =',NRDF,'DELRDF  =',DELRDF*TOANGS,'DIFFUSE =',NDFS
      WRITE(IW,'( 1X,A,I10,7X,A,I10,7X,A,I10)')
     *   'NRALL   =',NRALL,'NRMSD   =',NRMSD,'NGYRA   =',NGYRA
      WRITE(IW,'( 1X,A,E10.2,7X,A,E10.2,7X,A,E10.2)')
     *   'TIMRALL =',TIMRALL*2.418884326505D-17,
     *   'TIMGYRA =',TIMGYRA*2.418884326505D-17,
     *   'TIMDFS  =',TIMDFS *2.418884326505D-17
      WRITE(IW,'( 1X,A,I10,7X,A,I10,7X,A,I10)')
     *   'NRIJ    =',NRIJ,'NDIEL   =',NDIEL,'NFIXPDB =',NFIXPDB
      WRITE(IW,'( 1X,3(A,I10,7X))')
     *   'IADDNA1 =',IADDNA1, 'IADDK1  =',IADDK1,'IADDCL1 =',IADDCL1
      WRITE(IW,'( 1X,3(A,I10,7X))')
     *   'IADDCA2 =',IADDCA2, 'IADDMG2 =',IADDMG2,'IADDWAT =',IADDWAT
      WRITE(IW,'( 1X,A,I10,7X,A,I10,7X,A,I10)')
     *   'ITYPWAT =',ITYPWAT,
     *   'JADDNA1 =',MIN(1,JADDNA1),
     *   'JADDK1  =',MIN(1,JADDK1)
      WRITE(IW,'( 1X,A,I10,7X,A,I10,7X,A,F10.4)')
     *   'NRANDOM =',NRANDOM0,'NFOLD   =',NFOLD,
     *   'RFOLD   =',RFOLD*TOANGS
      WRITE(IW,'( 1X,A,F10.4,7X,A,I10)')
     *   'RETAIN  =',RETAIN,'QMREP   =',NQMREP
      WRITE(IW,'( 1X,3(A,F10.4))')
     *   'CENTER  =',CENTX*TOANGS,
     *         ',  ',CENTY*TOANGS,
     *         ',  ',CENTZ*TOANGS
      WRITE(IW,*)' '
C
      IF(NAT.GT.0.AND.NFFAT.GT.0.AND.NLKQMM.GT.0) THEN
         WRITE(IW,'(A,I4,A)')' THIS IS A QM/MM SYSTEM WITH ',
     *               NLKQMM, ' BOUNDARY COVALENT BONDS.'
         WRITE(IW,*)'THE FOLLOWING QM-MM PAIRS ARE IN THE LKQMMM LIST.'
         WRITE(IW,*)'THE LISTED QM-MM INTERACTIONS ARE REMOVED, BUT MM'
         WRITE(IW,*)'COVALENT TERMS REMAIN EFFECTIVE.'
         WRITE(IW,*)'MM COVALENT TERMS RETAIN IN THE QM REGION IF THEY'
         WRITE(IW,*)'INVOLVE A "WEAK" BOUNDARY H ATOM, AND ARE SCALED'
         WRITE(IW,'(A,F6.4,A)')' BY ',RETAIN,' AS DEFINED BY "RETAIN".'
      END IF
      DO III=1,NLKQMM
         WRITE(IW,'(/1X,A,I4)')'FOR QM-MM COVALENT LINK ',III
         WRITE(IW,*)'     QM     MM     QM     MM     QM     MM',
     *              '     QM     MM     QM     MM'
         DO LL = 1, 10
            WRITE(IW,'(1X,10I7)')
     *      (LKQMMM(NN,III), NN=(LL-1)*10+1,(LL-1)*10+10)
         ENDDO
      ENDDO
      WRITE(IW,*)' '
C
C     -- CHECK THE TOTAL CHARGE OF THE MM SYSTEM --
C
      QTOTAL = ZERO
      DO IFFAT=1,NFFAT
         QTOTAL = QTOTAL + CHARG(IFFAT)
      ENDDO
      DIFF = ABS(QTOTAL - DBLE(NINT(QTOTAL)))
      IF(DIFF.GT.1.0D-7) THEN
         WRITE(IW,*) ' '
         WRITE(IW,*) 
     *      ' ** WARNING: TOTAL MM CHARGE IS NOT AN INTEGER **'
      END IF
      WRITE(IW,'(A,F15.7)') ' TOTAL MM    CHARGE = ',QTOTAL
      IF(NAT.GT.0) 
     *WRITE(IW,'(A,F15.7)') ' TOTAL QM/MM CHARGE = ',QTOTAL+DBLE(ICH)
      WRITE(IW,*)' '
C
      WRITE(IW,*)'$FFDATA'
      WRITE(IW,'(A,3(F15.10,2X)," ")')
     *' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
      WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
      DO IFFAT=1,NFFAT
         WRITE(IW,1010) ATMNAM(IFFAT),ZANF(IFFAT),
     *   CORD(1,IFFAT)*TOANGS,CORD(2,IFFAT)*TOANGS,CORD(3,IFFAT)*TOANGS
      ENDDO
      WRITE(IW,*)'STOP'
C
      IF(NFFTYP.EQ.20022)THEN
      WRITE(IW,*)'PARAMETERS       MASS         Q      ',
     *          'POL   RMIN/2  EPSILON   RMIN/2  EPSILON'
      DO IFFAT=1,NFFAT
         WRITE(IW,1020) ATMNAM(IFFAT),ZMAS(IFFAT)/1822.88850204D+00,
     *                 CHARG(IFFAT),POL(IFFAT)*TOANGS**3,
     *   SIG(IFFAT)*TOANGS/1.781797436280679D+00,EPS(IFFAT)*TOKCAL,
     *   SIG2(IFFAT)*TOANGS/1.781797436280679D+00,EPS2(IFFAT)*TOKCAL
      ENDDO
      ELSE
      WRITE(IW,*)'PARAMETERS       MASS         Q      ',
     *          'POL    SIGMA  EPSILON    SIGMA  EPSILON'
      DO IFFAT=1,NFFAT
         WRITE(IW,1020) ATMNAM(IFFAT),ZMAS(IFFAT)/1822.88850204D+00,
     *                 CHARG(IFFAT),POL(IFFAT)*TOANGS**3,
     *                 SIG(IFFAT)*TOANGS,EPS(IFFAT)*TOKCAL,
     *                 SIG2(IFFAT)*TOANGS,EPS2(IFFAT)*TOKCAL
      ENDDO
      END IF
      WRITE(IW,*)'STOP'
C
      WRITE(IW,*)'QMMMREP    N       C1     Z1       C2     Z2',
     *          '       C3     Z3       C4     Z4'
      DO IFFAT=1,NFFAT
         WRITE(IW,1030) ATMNAM(IFFAT),4,
     *                 CLPR(1,IFFAT),ZLPR(1,IFFAT),
     *                 CLPR(2,IFFAT),ZLPR(2,IFFAT),
     *                 CLPR(3,IFFAT),ZLPR(3,IFFAT),
     *                 CLPR(4,IFFAT),ZLPR(4,IFFAT)
      ENDDO
      WRITE(IW,*)'STOP'
C
      WRITE(IW,*)'BOND     #     ATM1     ATM2       FC       R0'
      DO IBOND=1,NBOND
         IF(FCBOND(IBOND).GT.-1.0D+05) THEN
         WRITE(IW,1040) IBOND,IPAIR(1,IBOND),IPAIR(2,IBOND),
     *                 FCBOND(IBOND)*TOKCAL*TOBOHR*TOBOHR,
     *                 BOND0(IBOND)*TOANGS
         ELSE
         WRITE(IW,1040) IBOND,IPAIR(1,IBOND),IPAIR(2,IBOND),
     *                -FCBOND(IBOND)*TOKCAL*TOBOHR*TOBOHR*1.0D-10,
     *                 BOND0(IBOND)*TOANGS
         END IF
      ENDDO
      WRITE(IW,*)'STOP'
C
      WRITE(IW,*)'ANGLE    #     ATM1     ATM2     ATM3 ',
     *          '      FC   ANGLE0'
      DO IANGL=1,NANGL
         IF(FCANGL(IANGL).GT.-1.0D+05) THEN
         WRITE(IW,1050) IANGL,KLIST(1,IANGL),KLIST(2,IANGL),
     *                 KLIST(3,IANGL),FCANGL(IANGL)*TOKCAL,
     *                 ANGL0(IANGL)*DEGREE
         ELSE
         WRITE(IW,1050) IANGL,KLIST(1,IANGL),KLIST(2,IANGL),
     *                 KLIST(3,IANGL),-FCANGL(IANGL)*TOKCAL*1.0D-10,
     *                 ANGL0(IANGL)*DEGREE
         END IF
      ENDDO
      WRITE(IW,*)'STOP'
C
      WRITE(IW,*)'DIHROT   #     ATM1     ATM2     ATM3  ',
     *          '   ATM4     VROT        N    GAMMA'
      DO IDIHR=1,NDIHR
         IF(VROT(IDIHR).GT.-1.0D+05) THEN
         WRITE(IW,1060) IDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                 LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                 VROT(IDIHR)*TOKCAL,NNN(IDIHR),
     *                 GAMA(IDIHR)*DEGREE
         ELSE
         WRITE(IW,1060) IDIHR,LLIST(1,IDIHR),LLIST(2,IDIHR),
     *                 LLIST(3,IDIHR),LLIST(4,IDIHR),
     *                 -VROT(IDIHR)*TOKCAL*1.0D-10,NNN(IDIHR),
     *                 GAMA(IDIHR)*DEGREE
         END IF
      ENDDO
      WRITE(IW,*)'STOP'
C
      WRITE(IW,*)'DIHBND   #     ATM1     ATM2     ATM3  ',
     *          '   ATM4       FC    DIHB0'
      DO IDIHB=1,NDIHB
         WRITE(IW,1070) IDIHB,NLIST(1,IDIHB),NLIST(2,IDIHB),
     *                 NLIST(3,IDIHB),NLIST(4,IDIHB),
     *                 FCDIHB(IDIHB)*TOKCAL,
     *                 DIHB0(IDIHB)*DEGREE
      END DO
      WRITE(IW,*)'STOP'
C
      WRITE(IW,*)'CMAP     #     ATM1     ATM2     ATM3  ',
     *          '   ATM4     ATM5    ITYPE'
      DO ICMAP=1,NCMAP
         WRITE(IW,1075) ICMAP,MAPLST(1,ICMAP),MAPLST(2,ICMAP),
     *                        MAPLST(3,ICMAP),MAPLST(4,ICMAP),
     *                        MAPLST(5,ICMAP),MAPLST(6,ICMAP)
      END DO
      WRITE(IW,*)'STOP'
C
      WRITE(IW,*)'WAGGING  #     ATM2     ATM3     ATM4  ',
     *          '   ATM1       FC'
      DO IWAGG=1,NWAGG
         WRITE(IW,1080) IWAGG,MLIST(2,IWAGG),MLIST(3,IWAGG),
     *                 MLIST(4,IWAGG),MLIST(1,IWAGG),
     *                 FCWAGG(IWAGG)*TOKCAL
      END DO
      WRITE(IW,*)'STOP'
C
      WRITE(IW,*)'$END'
      END IF
C
C
      DO IBOND=1,NBOND
         IF(FCBOND(IBOND).LT.-1.0D+05) THEN
         FCBOND(IBOND) = -FCBOND(IBOND)*1.0D-10*RETAIN
         END IF
      ENDDO
      DO IANGL=1,NANGL
         IF(FCANGL(IANGL).LT.-1.0D+05) THEN
         FCANGL(IANGL) = -FCANGL(IANGL)*1.0D-10*RETAIN
         END IF
      ENDDO
      DO IDIHR=1,NDIHR
         IF(VROT(IDIHR).LT.-1.0D+05) THEN
         VROT(IDIHR) = -VROT(IDIHR)*1.0D-10*RETAIN
         END IF
      ENDDO
C
C     -- READ INVERSED C MATRIX --
C
      IF(MASWRK.AND.NTS.GE.60 .AND. RXNRAD.LT.1.0D+30) THEN
         IF(NTS.EQ.60) THEN
            CALL GENQPFILE('RXNFLD0060.DAT ',QPFILE,LENQP)
            OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         ELSE IF(NTS.EQ.240) THEN
            CALL GENQPFILE('RXNFLD0240.DAT ',QPFILE,LENQP)
            OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         ELSE IF(NTS.EQ.960) THEN
            CALL GENQPFILE('RXNFLD0960.DAT ',QPFILE,LENQP)
            OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         ELSE IF(NTS.EQ.3840) THEN
            CALL GENQPFILE('RXNFLD3840.DAT ',QPFILE,LENQP)
            OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         END IF
         DO ITS=1,NTS
            DO JTS=1,NTS
               IF(MOD(JTS,8).EQ.1) THEN
                  IF((JTS+7).LE.ITS) THEN
                     READ (12,'(8F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS),
     *                           CMAT1(JTS+4,ITS),
     *                           CMAT1(JTS+5,ITS),
     *                           CMAT1(JTS+6,ITS),
     *                           CMAT1(JTS+7,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RXNRAD
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RXNRAD
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RXNRAD
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RXNRAD
                     CMAT1(JTS+4,ITS) = CMAT1(JTS+4,ITS)*RXNRAD
                     CMAT1(JTS+5,ITS) = CMAT1(JTS+5,ITS)*RXNRAD
                     CMAT1(JTS+6,ITS) = CMAT1(JTS+6,ITS)*RXNRAD
                     CMAT1(JTS+7,ITS) = CMAT1(JTS+7,ITS)*RXNRAD
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                     CMAT1(ITS,JTS+4) = CMAT1(JTS+4,ITS)
                     CMAT1(ITS,JTS+5) = CMAT1(JTS+5,ITS)
                     CMAT1(ITS,JTS+6) = CMAT1(JTS+6,ITS)
                     CMAT1(ITS,JTS+7) = CMAT1(JTS+7,ITS)
                  ELSE IF((JTS+6).EQ.ITS) THEN
                     READ (12,'(7F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS),
     *                           CMAT1(JTS+4,ITS),
     *                           CMAT1(JTS+5,ITS),
     *                           CMAT1(JTS+6,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RXNRAD
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RXNRAD
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RXNRAD
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RXNRAD
                     CMAT1(JTS+4,ITS) = CMAT1(JTS+4,ITS)*RXNRAD
                     CMAT1(JTS+5,ITS) = CMAT1(JTS+5,ITS)*RXNRAD
                     CMAT1(JTS+6,ITS) = CMAT1(JTS+6,ITS)*RXNRAD
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                     CMAT1(ITS,JTS+4) = CMAT1(JTS+4,ITS)
                     CMAT1(ITS,JTS+5) = CMAT1(JTS+5,ITS)
                     CMAT1(ITS,JTS+6) = CMAT1(JTS+6,ITS)
                  ELSE IF((JTS+5).EQ.ITS) THEN
                     READ (12,'(6F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS),
     *                           CMAT1(JTS+4,ITS),
     *                           CMAT1(JTS+5,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RXNRAD
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RXNRAD
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RXNRAD
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RXNRAD
                     CMAT1(JTS+4,ITS) = CMAT1(JTS+4,ITS)*RXNRAD
                     CMAT1(JTS+5,ITS) = CMAT1(JTS+5,ITS)*RXNRAD
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                     CMAT1(ITS,JTS+4) = CMAT1(JTS+4,ITS)
                     CMAT1(ITS,JTS+5) = CMAT1(JTS+5,ITS)
                  ELSE IF((JTS+4).EQ.ITS) THEN
                     READ (12,'(5F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS),
     *                           CMAT1(JTS+4,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RXNRAD
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RXNRAD
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RXNRAD
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RXNRAD
                     CMAT1(JTS+4,ITS) = CMAT1(JTS+4,ITS)*RXNRAD
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                     CMAT1(ITS,JTS+4) = CMAT1(JTS+4,ITS)
                  ELSE IF((JTS+3).EQ.ITS) THEN
                     READ (12,'(4F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS),
     *                           CMAT1(JTS+3,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RXNRAD
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RXNRAD
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RXNRAD
                     CMAT1(JTS+3,ITS) = CMAT1(JTS+3,ITS)*RXNRAD
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                     CMAT1(ITS,JTS+3) = CMAT1(JTS+3,ITS)
                  ELSE IF((JTS+2).EQ.ITS) THEN
                     READ (12,'(3F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS),
     *                           CMAT1(JTS+2,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RXNRAD
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RXNRAD
                     CMAT1(JTS+2,ITS) = CMAT1(JTS+2,ITS)*RXNRAD
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                     CMAT1(ITS,JTS+2) = CMAT1(JTS+2,ITS)
                  ELSE IF((JTS+1).EQ.ITS) THEN
                     READ (12,'(2F10.7)')
     *                           CMAT1(JTS  ,ITS),
     *                           CMAT1(JTS+1,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RXNRAD
                     CMAT1(JTS+1,ITS) = CMAT1(JTS+1,ITS)*RXNRAD
                     CMAT1(ITS,JTS  ) = CMAT1(JTS  ,ITS)
                     CMAT1(ITS,JTS+1) = CMAT1(JTS+1,ITS)
                  ELSE IF((JTS+0).EQ.ITS) THEN
                     READ (12,'(F10.7)')
     *                           CMAT1(JTS  ,ITS)
                     CMAT1(JTS  ,ITS) = CMAT1(JTS  ,ITS)*RXNRAD
                  END IF
               END IF
            ENDDO
         ENDDO
         DO ITS=1,NTS,2
            READ (12,'(6F10.7)')
     *      XTS(ITS),YTS(ITS),ZTS(ITS),
     *      XTS(ITS+1),YTS(ITS+1),ZTS(ITS+1)
            XTS(ITS  ) = XTS(ITS  )*RXNRAD+CENTX
            YTS(ITS  ) = YTS(ITS  )*RXNRAD+CENTY
            ZTS(ITS  ) = ZTS(ITS  )*RXNRAD+CENTZ
            XTS(ITS+1) = XTS(ITS+1)*RXNRAD+CENTX
            YTS(ITS+1) = YTS(ITS+1)*RXNRAD+CENTY
            ZTS(ITS+1) = ZTS(ITS+1)*RXNRAD+CENTZ
         ENDDO
         CLOSE(12)
      END IF
      IF(GOPARR) CALL DDI_BCAST(450,'F',CMAT1,NTS*NTS,MASTER)
      IF(GOPARR) CALL DDI_BCAST(451,'F',XTS,NTS,MASTER)
      IF(GOPARR) CALL DDI_BCAST(452,'F',YTS,NTS,MASTER)
      IF(GOPARR) CALL DDI_BCAST(453,'F',ZTS,NTS,MASTER)
C
C     -- READ IN CMAP COEFFICIENTS --
C
      IF(MASWRK.AND.IDOCMAP.EQ.1.AND.NFFTYP.EQ.20022) THEN
         CALL GENQPFILE('CHARMM22.CMAP ',QPFILE,LENQP)
         OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
         DO ITYPE=1, 5
            DO IPHI=1,24
               DO JPSI=1,24
                  DO ICPHI=1,3,2
                     READ(12,'(8F10.6)')
     *               CMAPCO(1,ICPHI  ,JPSI,IPHI,ITYPE),
     *               CMAPCO(2,ICPHI  ,JPSI,IPHI,ITYPE),
     *               CMAPCO(3,ICPHI  ,JPSI,IPHI,ITYPE),
     *               CMAPCO(4,ICPHI  ,JPSI,IPHI,ITYPE),
     *               CMAPCO(1,ICPHI+1,JPSI,IPHI,ITYPE),
     *               CMAPCO(2,ICPHI+1,JPSI,IPHI,ITYPE),
     *               CMAPCO(3,ICPHI+1,JPSI,IPHI,ITYPE),
     *               CMAPCO(4,ICPHI+1,JPSI,IPHI,ITYPE)
                  ENDDO
               ENDDO
            ENDDO
         ENDDO
         CLOSE(12)
      END IF
      IF(GOPARR) CALL DDI_BCAST(454,'F',CMAPCO,4*4*24*24*5,MASTER)
C
      MXLIST     = MXFFAT*MXLIST/NWDVAR/NPROC/2
      CALL GROUPID(IDGROUP,KLIST)
      CALL NONBOND(0,CORD,CORDSV,NONLST,NONLSTQ,L1213J,IDGROUP)
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'  ** QUANPOL IS SUCCESSFULLY LOADED **'
         WRITE(IW,*)' '
      END IF
C
 1010 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1020 FORMAT(1X,A10,1X,F10.6,1X,F9.5,1X,F8.5,1X,
     *       F8.5,1X,F8.5,1X,F8.5,1X,F8.5)
 1030 FORMAT(1X,A10,1X,I1,1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4,
     *                    1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4,
     *                    1X,F8.5,1X,F6.4,1X,F8.5,1X,F6.4)
 1040 FORMAT(1X,I10,1X,I8,1X,I8,1X,F8.2,1X,F8.5)
 1050 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,F8.2,1X,F8.2)
 1060 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F8.3,1X,I8,1X,F8.2)
 1070 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F8.2,1X,F8.2)
 1075 FORMAT(1X,I10,6(1X,I8))
 1080 FORMAT(1X,I10,1X,I8,1X,I8,1X,I8,1X,I8,1X,F8.2)
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDXYZ
      SUBROUTINE RDXYZ(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,MXFFAT,NFOLD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 ATMNAM,NAME
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION RMASS(200)
      DIMENSION ATMNAM(*),CORD(3,*),ZANF(*),ZMAS(*),ONEMAS(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN COORDINATES IN $FFDATA --
C
      IERR = 0
      IEOF = 0
      NFFAT= 0
      NCOPY= 2**NFOLD
C
  100 CONTINUE
      IF((NFFAT*NCOPY).GT.MXFFAT) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY ATOMS. INCREASE MXFFAT' 
         CALL ABRT
      END IF
C
      CALL RDCARD('RDXYZ   ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: END OF FILE READING $FFDATA COORDINATES'
         CALL ABRT
      END IF
C
      NAME='          '
      LGSTR=-10
      CALL GSTRNG(NAME,LGSTR)
      IF(NAME.EQ.'STOP      ') GO TO 200
C
      NFFAT=NFFAT+1
      ATMNAM(NFFAT) = NAME
      ZANF(NFFAT) = RFIND('ZANF    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING NUC CHARGE'
         CALL ABRT
      END IF
C
      CORD(1,NFFAT) = RFIND('XCORD   ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING X COORD'
         CALL ABRT
      END IF
C
      CORD(2,NFFAT) = RFIND('YCORD   ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Y COORD'
         CALL ABRT
      END IF
C
      CORD(3,NFFAT) = RFIND('ZCORD   ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Z COORD'
         CALL ABRT
      END IF
C
      GOTO 100
C
  200 CONTINUE
C
C     -- SET ATOMIC MASS AND CONVERT TO AU (ELECTRON MASS)
C
      CALL RAMS(RMASS,2)
      IF(NFFTYP.EQ.20022) THEN
         RMASS( 1) = 1.0080D+00
         RMASS( 6) = 12.011D+00
         RMASS( 7) = 14.007D+00
         RMASS( 8) = 15.999D+00
         RMASS(16) = 32.060D+00
      END IF
      DO IFFAT = 1, NFFAT
         ZMAS(IFFAT)  = RMASS(INT(ZANF(IFFAT)))*1822.88850204D+00
         ONEMAS(IFFAT)= 1.0D+00/ZMAS(IFFAT)
      END DO
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDQMVEL
      SUBROUTINE RDQMVEL(QMVEL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 NAME
C
      DIMENSION QMVEL(3,*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
C     -- READ IN QM INITIAL VELOCITIES IN $FFDATA --
C
      IERR = 0
      IEOF = 0
      IAT  = 0
C
 100  CONTINUE
      CALL RDCARD('RDVEL    ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: END OF FILE READING $FFDATA QMVELOCITY'
         CALL ABRT
      END IF
C
      NAME='          '
      LGSTR=-10
      CALL GSTRNG(NAME,LGSTR)
      IF(NAME.EQ.'STOP      ') RETURN
C
      IAT=IAT+1
C
      QMVEL(1,IAT) = RFIND('VELX    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING X VELOCITY'
         CALL ABRT
      END IF
C
      QMVEL(2,IAT) = RFIND('VELY    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Y VELOCITY'
         CALL ABRT
      END IF
C
      QMVEL(3,IAT) = RFIND('VELZ    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Z VELOCITY'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDMMVEL
      SUBROUTINE RDMMVEL(VEL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*10 NAME
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION VEL(3,*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN INITIAL VELOCITIES IN $FFDATA --
C
      IERR = 0
      IEOF = 0
      IFFAT= 0
C
 100  CONTINUE
      CALL RDCARD('RDVEL    ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: END OF FILE READING $FFDATA MMVELOCITY'
         CALL ABRT
      END IF
C
      NAME='          '
      LGSTR=-10
      CALL GSTRNG(NAME,LGSTR)
      IF(NAME.EQ.'STOP      ') RETURN
C
      IFFAT=IFFAT+1
C
      VEL(1,IFFAT) = RFIND('VELX    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING X VELOCITY'
         CALL ABRT
      END IF
C
      VEL(2,IFFAT) = RFIND('VELY    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Y VELOCITY'
         CALL ABRT
      END IF
C
      VEL(3,IFFAT) = RFIND('VELZ    ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING Z VELOCITY'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDPARA
      SUBROUTINE RDPARA(ATMNAM,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,SIG2,EPS2)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      CHARACTER*10 ATMNAM,FFNAME
C
      DIMENSION ATMNAM(*),ZMAS(*),ONEMAS(*),
     *          CHARG(*),POL(*),SIG(*),EPS(*),SIG2(*),EPS2(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
      IERR = 0
      IEOF = 0
      K    = 0
  100 CONTINUE
      CALL RDCARD('RDPARAMT',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: END OF FILE READING FFDATA PARAMETERS'
         CALL ABRT
      END IF
      FFNAME = '          '
      LGSTR=-10
      CALL GSTRNG(FFNAME,LGSTR)
      IF(FFNAME.EQ.'STOP      ') GOTO 200
      K = K + 1
      IF(K.GT.NFFAT) THEN
         IF(MASWRK)WRITE(IW,9000) K,NFFAT
         CALL ABRT
      END IF
      IF(FFNAME.NE.ATMNAM(K)) THEN
         IF(MASWRK)WRITE(IW,'(4A)')
     *   'ERROR: ',FFNAME,' MUST EQUAL TO ',ATMNAM(K)
         CALL ABRT
      END IF
      ZMAS(K)  = RFIND('FFMASS  ',IERR)*1822.88850204D+00
      ONEMAS(K)= 1.0D+00/ZMAS(K)
      CHARG(K) = RFIND('FFCHARGE',IERR)
      POL(K)   = RFIND('FFPOL   ',IERR)*TOBOHR**3
      SIG(K)   = RFIND('FFSIGMA ',IERR)*TOBOHR
      EPS(K)   = RFIND('FFEPSILN',IERR)*TOHART
      SIG2(K)  = RFIND('FFSIGMA ',IERR)*TOBOHR
      EPS2(K)  = RFIND('FFEPSILN',IERR)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING $FFDATA PARAMETERS'
         CALL ABRT
      END IF
      GO TO 100
C
 200  CONTINUE
C
C     -- AUTOMATICALLY CHECK SIGMA OR RMIN/2 --
C
      NCOUNT  = 0
      SIGSUM  = ZERO
      DO IPTS = 1, K
         AAA  = ZMAS(IPTS)/1822.88850204D+00
         IF(AAA.GT.10.0D+00) THEN
            NCOUNT = NCOUNT + 1
            SIGSUM = SIGSUM + SIG(IPTS)
         END IF
      ENDDO
      SIGAVE  = SIGSUM/NCOUNT
      IF(SIGAVE.LT.4.7D+00) THEN
         DO IPTS = 1, K
            SIG(IPTS)  = SIG(IPTS) *1.781797436280679D+00
            SIG2(IPTS) = SIG2(IPTS)*1.781797436280679D+00
         ENDDO
      END IF
C
 9000 FORMAT(1X,'ERROR IN READING $FFDATA PARAMETERS',I10,
     *          ' EXCEEDED NFFAT=',I10)
      END
C*MODULE QUANPO  *DECK RDQMMM
      SUBROUTINE RDQMMM(CLPR,ZLPR,NLPR)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00)
C
      CHARACTER*10 FFNAME
C
      DIMENSION CLPR(4,*),ZLPR(4,*),NLPR(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
      IERR = 0
      IEOF = 0
      NPTS = 0
  100 CONTINUE
      K = NPTS+1
      IF(NPTS.GT.NFFAT) THEN
         IF(MASWRK) WRITE(IW,9000) NFFAT
         CALL ABRT
      END IF
      CALL RDCARD('RDQMMMREP ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *     'ERROR: END OF FILE READING QMMMREP DATA'
         CALL ABRT
      END IF
      FFNAME = '          '
      LGSTR=-10
      CALL GSTRNG(FFNAME,LGSTR)
      IF(FFNAME.EQ.'STOP      ') GO TO 400
C
      NTERMS = IFIND('NTERM   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERROR READING NTERMS'
         CALL ABRT
      END IF
      IF(NTERMS.GT.4) THEN
         IF(MASWRK) WRITE(IW,*) 'QMMMREP: NTERMS CANNOT BE > 4'
         CALL ABRT
      END IF
      DO 300 II = 1, NTERMS
C
         CLPR(II,K) = RFIND('CLPR    ',IERR)
         IF(IERR.NE.0) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERORR READING CLPR'
            CALL ABRT
         END IF
C
         ZLPR(II,K) = RFIND('ZLPR    ',IERR)
         IF(IERR.NE.0) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERORR READING ZLPR'
            CALL ABRT
         END IF
         IF(CLPR(II,K).NE.ZERO .AND. ZLPR(II,K).EQ.ZERO) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ZETA CANNOT BE ZERO'
            CALL ABRT
         END IF
  300 CONTINUE
C      -- THE CURRENT CODE ONLY USES POTENTIAL = R**2.  
      NLPR(K) = 2
C
      NPTS = NPTS + 1
      GO TO 100
C
  400 CONTINUE
      RETURN
 9000 FORMAT(1X,'ERROR IN READING QMMMREP POINTS,',
     *          ' EXCEEDED NFFAT=',I8)
      END
C*MODULE QUANPO  *DECK RDBOND
      SUBROUTINE RDBOND(BOND0,FCBOND,IPAIR,MXBOND)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION BOND0(MXBOND),FCBOND(MXBOND),IPAIR(2,MXBOND)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
C     -- READ IN BOND INFO IN $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NBOND=0
C
  100 CONTINUE
      IF(NBOND.GT.MXBOND) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY BONDS. INCREASE MXBOND'
         CALL ABRT
      END IF
      CALL RDCARD('RDBOND  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR: END OF FILE READING BOND INFO'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NBOND = NBOND + 1
      IPAIR(1,NBOND) = IFIND('IPAIR  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING BOND ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      IPAIR(2,NBOND) = IFIND('IPAIR  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING BOND ATM2 IN $FFDATA'
         CALL ABRT
      END IF
C
      FCBOND(NBOND) = RFIND('FCBOND  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING FCBOND IN $FFDATA'
         CALL ABRT
      END IF
C     -INPUT KCAL/(MOL*A*A), CONVERT TO HARTREE/(BOHR*BOHR)
      FCBOND(NBOND) = FCBOND(NBOND)*TOANGS*TOANGS*TOHART
C
      BOND0(NBOND) = RFIND('BOND0   ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING BOND0 IN $FFDATA'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDANGL
      SUBROUTINE RDANGL(ANGL0,FCANGL,KLIST,MXANGL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION ANGL0(MXANGL),FCANGL(MXANGL),KLIST(3,MXANGL)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN ANGLE INFO FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NANGL  = 0
C
  100 CONTINUE
      IF(NANGL.GT.MXANGL) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY ANGLES. INCREASE MXANGL'
         CALL ABRT
      END IF
      CALL RDCARD('RDANGL  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR: END OF FILE READING ANGLE INFO'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NANGL = NANGL + 1
      KLIST(1,NANGL) = IFIND('KLIST1  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING ANGLE ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      KLIST(2,NANGL) = IFIND('KLIST2  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING ANGLE ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      KLIST(3,NANGL) = IFIND('KLIST3  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING ANGLE ATM3 IN $FFDATA'
         CALL ABRT
      END IF
C
      FCANGL(NANGL) = RFIND('FCANGL  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING FCANGL IN $FFDATA'
         CALL ABRT
      END IF 
C     -INPUT KCAL/(MOL*RAD*RAD), CONVERT TO HARTREE/(RAD*RAD)
      FCANGL(NANGL) = FCANGL(NANGL)*TOHART
C
      ANGL0(NANGL) = RFIND('ANGL0   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING ANGL0 IN $FFDATA'
         CALL ABRT
      END IF
C     - INPUT DEGREES, CONVERT TO RADIANS
      ANGL0(NANGL) = ANGL0(NANGL)*TORAD
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDDIHR
      SUBROUTINE RDDIHR(LLIST,GAMA,NNN,VROT,MXDIHR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION LLIST(4,MXDIHR),GAMA(MXDIHR),NNN(MXDIHR),VROT(MXDIHR)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN DIHEDRAL ROTATION ANGLE INFO FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NDIHR  = 0
C
  100 CONTINUE
      IF(NDIHR.GT.MXDIHR) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY DIHR. INCREASE MXDIHR'
         CALL ABRT
      END IF
      CALL RDCARD('RDDIHR  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: END OF FILE READING DIHROT GROUP IN $FFDATA'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NDIHR = NDIHR + 1
      LLIST(1,NDIHR) = IFIND('LLIST1  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      LLIST(2,NDIHR) = IFIND('LLIST2  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      LLIST(3,NDIHR) = IFIND('LLIST3  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT ATM3 IN $FFDATA'
         CALL ABRT
      END IF
      LLIST(4,NDIHR) = IFIND('LLIST4  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT ATM4 IN $FFDATA'
         CALL ABRT
      END IF
      VROT(NDIHR) = RFIND('VROT    ',IERR)
C     -INPUT KCAL/MOL, CONVERT TO HARTREE
      VROT(NDIHR) = VROT(NDIHR)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT VROT IN $FFDATA'
         CALL ABRT
      END IF
C
      NNN(NDIHR) = IFIND('NNN     ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT NNN IN $FFDATA'
         CALL ABRT
      END IF
C
      GAMA(NDIHR) = RFIND('GAMA   ',IERR)
C     - INPUT DEGREES, CONVERT TO RADIANS
      GAMA(NDIHR) = GAMA(NDIHR)*TORAD
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING DIHROT GAMA IN $FFDATA'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDDIHB
      SUBROUTINE RDDIHB(NLIST,DIHB0,FCDIHB,MXDIHB)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION NLIST(4,MXDIHB),DIHB0(MXDIHB),FCDIHB(MXDIHB)
C
      CHARACTER*10 HEAD
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, FEB 2011, LINCOLN
C
C     -- READ IN DIHEDRAL BENDING INFO FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NDIHB  = 0
C
  100 CONTINUE
      IF(NDIHB.GT.MXDIHB) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY DIHB. INCREASE MXDIHB'
         CALL ABRT
      END IF
      CALL RDCARD('RDDIHB  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR: END OF FILE READING DIHBND GROUP IN $FFDATA'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NDIHB = NDIHB + 1
      NLIST(1,NDIHB) = IFIND('NLIST1  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      NLIST(2,NDIHB) = IFIND('NLIST2  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *       'ERROR READING DIHBND ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      NLIST(3,NDIHB) = IFIND('NLIST3  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND ATM3 IN $FFDATA'
         CALL ABRT
      END IF
      NLIST(4,NDIHB) = IFIND('NLIST4  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND ATM4 IN $FFDATA'
         CALL ABRT
      END IF
      FCDIHB(NDIHB) = RFIND('FCDIHB  ',IERR)
C     -INPUT KCAL/(MOL*RAD*RAD), CONVERT TO HARTREE/(RAD*RAD)
      FCDIHB(NDIHB) = FCDIHB(NDIHB)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND FCDIHB IN $FFDATA'
         CALL ABRT
      END IF
C
      DIHB0(NDIHB)  = RFIND('DIHB0   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND DIHB0 IN $FFDATA'
         CALL ABRT
      END IF
      IF(DIHB0(NDIHB).NE.  0.0D+00 .AND.
     *   DIHB0(NDIHB).NE.180.0D+00) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR: DIHB0 MUST BE 0.0 OR 180.0 DEGREES'
         CALL ABRT
      END IF
      DIHB0(NDIHB)  = DIHB0(NDIHB)*TORAD
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDCMAP
      SUBROUTINE RDCMAP(MAPLST,MXCMAP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION MAPLST(6,MXCMAP)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, APR 2011, LINCOLN
C
C     -- READ IN CMAP LIST FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NCMAP  = 0
C
  100 CONTINUE
      IF(NCMAP.GT.MXCMAP) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY NCMAP. INCREASE MXFFAT'
         CALL ABRT
      END IF
      CALL RDCARD('RDCMAP  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *      'ERROR: END OF FILE READING CMAP GROUP IN $FFDATA'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NCMAP = NCMAP + 1
      MAPLST(1,NCMAP) = IFIND('MAPLST1 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(2,NCMAP) = IFIND('MAPLST2 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(3,NCMAP) = IFIND('MAPLST3 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM3 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(4,NCMAP) = IFIND('MAPLST4 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM4 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(5,NCMAP) = IFIND('MAPLST5 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ATM5 IN $FFDATA'
         CALL ABRT
      END IF
      MAPLST(6,NCMAP) = IFIND('MAPLST6 ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR READING CMAP ITYPE IN $FFDATA'
         CALL ABRT
      END IF
C
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK RDWAGG
      SUBROUTINE RDWAGG(MLIST,FCWAGG,MXWAGG)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      DIMENSION MLIST(4,MXWAGG),FCWAGG(MXWAGG)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN WAGGING INFO FROM $FFDATA --
C
      IERR   = 0
      IEOF   = 0
      NWAGG  = 0
C
  100 CONTINUE
      IF(NWAGG.GT.MXWAGG) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY WAGG. INCREASE MXWAGG'
         CALL ABRT
      END IF
      CALL RDCARD('RDWAGG  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR: END OF FILE READING WAGGING GROUP IN $FFDATA'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') RETURN
C
      NWAGG = NWAGG + 1
      MLIST(2,NWAGG) = IFIND('MLIST2  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING WAGGING ATM2 IN $FFDATA'
         CALL ABRT
      END IF
      MLIST(3,NWAGG) = IFIND('MLIST3  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING WAGGING ATM3 IN $FFDATA'
         CALL ABRT
      END IF
      MLIST(4,NWAGG) = IFIND('MLIST4  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING WAGGING ATM4 IN $FFDATA'
         CALL ABRT
      END IF
      MLIST(1,NWAGG) = IFIND('MLIST1  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING WAGGING ATM1 IN $FFDATA'
         CALL ABRT
      END IF
      FCWAGG(NWAGG) = RFIND('FCWAGG  ',IERR)
C     -INPUT KCAL/(MOL*RAD*RAD), CONVERT TO HARTREE/(RAD*RAD)
      FCWAGG(NWAGG) = FCWAGG(NWAGG)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR READING FCWAGG IN $FFDATA'
         CALL ABRT
      END IF
      GOTO 100
C
      END
C*MODULE QUANPO  *DECK FFPDB
      SUBROUTINE FFPDB(ATMNAM,CORD,ZANF,
     *                 ZMAS,ONEMAS,
     *                 CHARG,POL,SIG,EPS,
     *                 SIG2,EPS2,
     *                 BOND0,FCBOND,
     *                 ANGL0,FCANGL,FCWAGG,
     *                 DIHB0,FCDIHB,
     *                 VROT,NNN,GAMA,IPAIR,
     *                 KLIST,LLIST,MLIST,NLIST,
     *                 CLPR,ZLPR,NLPR,
     *                 SSBDID,SSBOND,
     *                 PDBNAM,RESNAM,NATAAA,
     *                 NHPOS,NHAPOS,NNNCCC,
     *                 MXFFAT,MXBOND,MXANGL,MXDIHR,MXCMAP,
     *                 MXWAGG,MXDIHB,
     *                 ITYPWAT,MAPLST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER CMSG(100)
      INTEGER SSBOND(2,*)
      CHARACTER*1 SSBDID(2,*)
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*100 WD100
      CHARACTER*9   TEXT9
      CHARACTER*10  ATMNAM
      CHARACTER*8   RESNAM,RNAME,RNAME1,TEXT8
      CHARACTER*6   NAME6
      CHARACTER*4   NAME4,PDBNAM
      CHARACTER*3   AAA,A3
      CHARACTER*2   SYMBOL
      CHARACTER*1   ALTLOC,A1,CHNID,ICODE,CHNID1,CHNID2
C
      DIMENSION ATMNAM(MXFFAT),CORD(3,MXFFAT),ZANF(MXFFAT),
     *          ZMAS(MXFFAT),ONEMAS(MXFFAT),CHARG(MXFFAT),POL(MXFFAT),
     *          SIG(MXFFAT),EPS(MXFFAT),
     *          SIG2(MXFFAT),EPS2(MXFFAT),
     *          BOND0(MXBOND),FCBOND(MXBOND),
     *          ANGL0(MXANGL),FCANGL(MXANGL),
     *          FCWAGG(MXWAGG),
     *          DIHB0(MXDIHB),FCDIHB(MXDIHB),
     *          VROT(MXDIHR),NNN(MXDIHR),
     *          GAMA(MXDIHR),IPAIR(2,MXBOND),
     *          KLIST(3,MXANGL),LLIST(4,MXDIHR),MLIST(4,MXWAGG),
     *          NLIST(4,MXDIHB),
     *          CLPR(4,MXFFAT),ZLPR(4,MXFFAT),NLPR(MXFFAT),
     *          MAPLST(6,*)
      DIMENSION PDBNAM(*),RESNAM(*),NATAAA(*),NHPOS(*),NHAPOS(*),
     *          NNNCCC(*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ THE $FFPDB GROUP IN THE INPUT FILE --
C
C     -------------------------------------------------------
C     NRES         - NUMBER OF RESIDUES IN THE INPUT PDB FILE
C     NATAAA(I)    - NUMBER OF ATOMS IN RESIDUE I
C     NHPOS(I)     - POSITION OF THE PEPTIDE H ATOM
C     NHAPOS(I)    - POSITION OF THE ALPHA H ATOM
C     -------------------------------------------------------
C
      NFFAT = 0
      NBOND = 0
      NANGL = 0
      NDIHR = 0
      NDIHB = 0
      NCMAP = 0
      NWAGG = 0
      NSSBD = 0
C
C     -- READ THE PDB FILE IN THE $FFPDB GROUP --
C
      NUMOLD = 0
      NRES   = 0
  100 CONTINUE
      IF(MASWRK) THEN
         READ(IR,'(A100)',END=110)WD100
         DO I=1,100
            CMSG(I) = ICHAR(WD100(I:I))
         ENDDO
      END IF
      IF (GOPARR) CALL DDI_BCAST(301,'I',CMSG,100,MASTER)
      IF (.NOT.MASWRK) THEN
         DO I=1,100
            WD100(I:I) = CHAR(CMSG(I))
         ENDDO
      END IF
C
      READ(WD100,'(A6)')NAME6
      IF(NAME6.EQ.'TER   ') THEN
         WRITE(IW,*)'ERROR: QUANPOL CANNOT PROCESS "TER".',
     *       ' CHANGE IT TO "ATOM......OXT" AND/OR "HXT"'
         CALL ABRT
      END IF
      IF(NAME6.EQ.'SSBOND') THEN
         READ(WD100,1000)NAME6,TEXT9,CHNID1,LSS1,TEXT8,CHNID2,LSS2
         I5ZW9G = 20110301
         IF(I5ZW9G.EQ.20110300) THEN
         WRITE(IW,1000)NAME6,TEXT9,CHNID1,LSS1,TEXT8,CHNID2,LSS2
         END IF
      END IF
      IF(NAME6.EQ.'ATOM  '.OR. NAME6.EQ.'HETATM') THEN
         READ(WD100,1010) NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,
     *                    CHNID,NUMAAA,ICODE,A3,XXX,YYY,ZZZ,
     *                    OCC,TEMFAC,SYMBOL,ICHARG
         I5ZW9G = 20110301
         IF(I5ZW9G.EQ.20110300) THEN
            WRITE(IW,1010)NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,
     *                    CHNID,NUMAAA,ICODE,A3,XXX,YYY,ZZZ,
     *                    OCC,TEMFAC,SYMBOL,ICHARG
         END IF
         DO KKK = 1, 4
            IF(NAME4(1:1).EQ.' ') NAME4 = NAME4(2:4)//' '
         ENDDO
      END IF
 1000 FORMAT(A6,A9,A,I5,A8,A,I5)
 1010 FORMAT(A6,I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
      IF(NAME6.EQ.'SSBOND') THEN
         NSSBD           = NSSBD + 1
         SSBDID(1,NSSBD) = CHNID1
         SSBDID(2,NSSBD) = CHNID2
         SSBOND(1,NSSBD) = LSS1
         SSBOND(2,NSSBD) = LSS2
         GOTO 100
      END IF
      IF(NAME6.EQ.'ENDMDL') GOTO 110
      IF(NAME6.EQ.'END   ') GOTO 110
      IF(NAME6.EQ.'$END  ') GOTO 110
      IF(NAME6.EQ.' $END ') GOTO 110
      IF(NAME6.EQ.'  $END') GOTO 110
C
C     -- ADD UP NFFAT --
C
      IF(NAME6.NE.'ATOM  '.AND.NAME6.NE.'HETATM') THEN
C        - WE SHOULD NOT COME HERE IF IT IS NOT AN ATOM
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: IN THE LINE STARTING WITH "',NAME6,'" IN $FFPDB.',
     *   '       YOU MAY HAVE MISSED A ">".'
         CALL ABRT
      END IF
C
      NFFAT= NFFAT+1
      IF(NFFAT.GT.MXFFAT) THEN
         IF(MASWRK)WRITE(IW,*) 
     *       'ERROR: TOO MANY ATOMS IN $FFPDB. INCREASE MXFFAT'
         CALL ABRT
      END IF
      PDBNAM(NFFAT)=NAME4
      ATMNAM(NFFAT)=SYMBOL
      CORD(1,NFFAT)=XXX*TOBOHR
      CORD(2,NFFAT)=YYY*TOBOHR
      CORD(3,NFFAT)=ZZZ*TOBOHR
      IF(SYMBOL.EQ.'H ') ZANF(NFFAT)  =  1.0D+00
      IF(SYMBOL.EQ.'HE') ZANF(NFFAT)  =  2.0D+00
      IF(SYMBOL.EQ.'LI') ZANF(NFFAT)  =  3.0D+00
      IF(SYMBOL.EQ.'BE') ZANF(NFFAT)  =  4.0D+00
      IF(SYMBOL.EQ.'B ') ZANF(NFFAT)  =  5.0D+00
      IF(SYMBOL.EQ.'C ') ZANF(NFFAT)  =  6.0D+00
      IF(SYMBOL.EQ.'N ') ZANF(NFFAT)  =  7.0D+00
      IF(SYMBOL.EQ.'O ') ZANF(NFFAT)  =  8.0D+00
      IF(SYMBOL.EQ.'F ') ZANF(NFFAT)  =  9.0D+00
      IF(SYMBOL.EQ.'NE') ZANF(NFFAT)  = 10.0D+00
      IF(SYMBOL.EQ.'NA') ZANF(NFFAT)  = 11.0D+00
      IF(SYMBOL.EQ.'MG') ZANF(NFFAT)  = 12.0D+00
      IF(SYMBOL.EQ.'AL') ZANF(NFFAT)  = 13.0D+00
      IF(SYMBOL.EQ.'SI') ZANF(NFFAT)  = 14.0D+00
      IF(SYMBOL.EQ.'P ') ZANF(NFFAT)  = 15.0D+00
      IF(SYMBOL.EQ.'S ') ZANF(NFFAT)  = 16.0D+00
      IF(SYMBOL.EQ.'CL') ZANF(NFFAT)  = 17.0D+00
      IF(SYMBOL.EQ.'AR') ZANF(NFFAT)  = 18.0D+00
      IF(SYMBOL.EQ.'K ') ZANF(NFFAT)  = 19.0D+00
      IF(SYMBOL.EQ.'CA') ZANF(NFFAT)  = 20.0D+00
      IF(SYMBOL.EQ.'SC') ZANF(NFFAT)  = 21.0D+00
      IF(SYMBOL.EQ.'TI') ZANF(NFFAT)  = 22.0D+00
      IF(SYMBOL.EQ.'V ') ZANF(NFFAT)  = 23.0D+00
      IF(SYMBOL.EQ.'CR') ZANF(NFFAT)  = 24.0D+00
      IF(SYMBOL.EQ.'MN') ZANF(NFFAT)  = 25.0D+00
      IF(SYMBOL.EQ.'FE') ZANF(NFFAT)  = 26.0D+00
      IF(SYMBOL.EQ.'CO') ZANF(NFFAT)  = 27.0D+00
      IF(SYMBOL.EQ.'NI') ZANF(NFFAT)  = 28.0D+00
      IF(SYMBOL.EQ.'CU') ZANF(NFFAT)  = 29.0D+00
      IF(SYMBOL.EQ.'ZN') ZANF(NFFAT)  = 30.0D+00
C
C     -- ADD UP NRES --
C
      IF(NUMAAA.NE.NUMOLD) THEN
         NRES = NRES + 1
         RESNAM(NRES) = AAA
         NNNCCC(NRES) = 2
         IF(NNNCCC(NRES-1).EQ.9 .AND. NAME6.EQ.'ATOM  ') THEN
            NNNCCC(NRES) = 1
         END IF
         DO ISSBD = 1, NSSBD
            IF(SSBDID(1,ISSBD).EQ.CHNID .AND.
     *         SSBOND(1,ISSBD).EQ.NUMAAA) THEN
               SSBDID(1,ISSBD) = ' '
               SSBOND(1,ISSBD) = NRES
            END IF
            IF(SSBDID(2,ISSBD).EQ.CHNID .AND. 
     *         SSBOND(2,ISSBD).EQ.NUMAAA) THEN
               SSBDID(2,ISSBD) = ' '
               SSBOND(2,ISSBD) = NRES
            END IF
         END DO
         NATAAA(NRES) = 0
         NUMOLD       = NUMAAA
      END IF
      IF(NFFAT.EQ.1.AND.NAME6.EQ.'ATOM  ') NNNCCC(NRES) = 1
      IF(NAME4.EQ.'OXT ') NNNCCC(NRES) = 9
      IF(NAME4.EQ.'HXT ') NNNCCC(NRES) = 9
      IF(NAME6.NE.'ATOM  ') NNNCCC(NRES) = 0
      NATAAA(NRES) = NATAAA(NRES) + 1
C
C     -- SAVE THE POSITION OF PEPTIDE H ATOM FOR LATER USE --
C
      IF(NAME6.EQ.'ATOM  ') THEN
         IF(PDBNAM(NFFAT).EQ.'H   ')THEN
            NHPOS(NRES)  = NFFAT
         END IF
         IF(PDBNAM(NFFAT).EQ.'HA  '.OR.
     *      PDBNAM(NFFAT).EQ.'2HA ')THEN
            NHAPOS(NRES) = NFFAT
         END IF
      END IF
C
      GOTO 100
  110 CONTINUE
C
C
C     -- FIND PARAMETERS FOR EACH RESIDUE --
C
C        IDENTIFY THE FORM OF N- AND C-TERMINUS
C        INTERH =  3 :  NH3+ GROUP
C               =  2 :  NH2  GROUP
C               =  1 :  NH   GROUP (NORMAL PEPTIDE)
C               =-99 :  DNA/RNA
C        ICTERH =  0 :  COO- GROUP
C               =  1 :  COOH GROUP
C               = -1 :  C=O  GROUP (NORMAL PEPTIDE)
C               =-99 :  DNA/RNA
C
      LFFAT = 0
      MMRES = 0
      DO IRES = 1, NRES
         INTERH = 1
         ICTERH =-1
         KASE   = 0
         KSS1   = 0
         KSS2   = 0
         MMRES  = MMRES + 1
         AAA    = RESNAM(IRES)(1:3)
         IF(IRES.EQ.NRES) RNAME1 = '        '
         IF(IRES.LT.NRES) RNAME1 = RESNAM(IRES+1)(1:3)
         JATOM  = NATAAA(IRES)
         JHPOS  = NHPOS(IRES)
         JHPOS1 = 0
         IF(NNNCCC(IRES).EQ.1 .OR. NNNCCC(IRES).EQ.2)
     *   JHPOS1 = NHPOS(IRES+1)
         JHAPOS = NHAPOS(IRES)
         JHAPOS1= 0
         IF(NNNCCC(IRES).EQ.1 .OR. NNNCCC(IRES).EQ.2)
     *   JHAPOS1= NHAPOS(IRES+1)
C - ALA -      
         IF      (AAA.EQ.'ALA') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.12)      INTERH = 3
               IF(JATOM.EQ.11)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.12)      ICTERH = 1
               IF(JATOM.EQ.11)      ICTERH = 0
            END IF
            IF(JATOM.NE.10 .AND. JATOM.NE.11 .AND. JATOM.NE.12)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF 
C - ARG -      
         ELSE IF (AAA.EQ.'ARG') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.26)      INTERH = 3
               IF(JATOM.EQ.25)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.26)      ICTERH = 1
               IF(JATOM.EQ.25)      ICTERH = 0
            END IF
            IF(JATOM.NE.24 .AND. JATOM.NE.25 .AND. JATOM.NE.26)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - ASN -
         ELSE IF (AAA.EQ.'ASN') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.16)      INTERH = 3
               IF(JATOM.EQ.15)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.16)      ICTERH = 1
               IF(JATOM.EQ.15)      ICTERH = 0
            END IF
            IF(JATOM.NE.14 .AND. JATOM.NE.15 .AND. JATOM.NE.16)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - ASP -
         ELSE IF (AAA.EQ.'ASP') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.14)      INTERH = 3
               IF(JATOM.EQ.13)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.14)      ICTERH = 1
               IF(JATOM.EQ.13)      ICTERH = 0
            END IF
            IF(JATOM.NE.12 .AND. JATOM.NE.13 .AND. JATOM.NE.14)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - CYS - CYSSS -
         ELSE IF (AAA.EQ.'CYS') THEN
            KASE = 0
            KSS1 = 0
            KSS2 = 0
            DO ISSBD=1,NSSBD
               IF(IRES.EQ.SSBOND(1,ISSBD)) THEN
                  KASE = 1
C                 - THE LOWER S ATOM IS MEMORIZED -
                  SSBOND(1,ISSBD) = LFFAT + 6
               END IF
               IF(IRES.EQ.SSBOND(2,ISSBD)) THEN
                  KASE = 1
                  KSS1 = SSBOND(1,ISSBD)
                  KSS2 = SSBOND(2,ISSBD)
               END IF
            ENDDO
            IF(KASE.EQ.0) THEN
               IF(NNNCCC(IRES).EQ.1)THEN
                  IF(JATOM.EQ.13)      INTERH = 3
                  IF(JATOM.EQ.12)      INTERH = 2
               ELSE IF(NNNCCC(IRES).EQ.9)THEN
                  IF(JATOM.EQ.13)      ICTERH = 1
                  IF(JATOM.EQ.12)      ICTERH = 0
               END IF
               IF(JATOM.NE.11 .AND. JATOM.NE.12 .AND. JATOM.NE.13)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
               END IF
            ELSE IF (KASE.EQ.1) THEN
               RESNAM(IRES)=AAA//'SS'
               IF(NNNCCC(IRES).EQ.1)THEN
                  IF(JATOM.EQ.12)      INTERH = 3
                  IF(JATOM.EQ.11)      INTERH = 2
               ELSE IF(NNNCCC(IRES).EQ.9)THEN
                  IF(JATOM.EQ.12)      ICTERH = 1
                  IF(JATOM.EQ.11)      ICTERH = 0
               END IF
               IF(JATOM.NE.10 .AND. JATOM.NE.11 .AND. JATOM.NE.12)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
               END IF
            END IF
C - GLN -
         ELSE IF (AAA.EQ.'GLN') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.19)      INTERH = 3
               IF(JATOM.EQ.18)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.19)      ICTERH = 1
               IF(JATOM.EQ.18)      ICTERH = 0
            END IF
            IF(JATOM.NE.17 .AND. JATOM.NE.18 .AND. JATOM.NE.19)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - GLU -
         ELSE IF (AAA.EQ.'GLU') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.17)      INTERH = 3
               IF(JATOM.EQ.16)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.17)      ICTERH = 1
               IF(JATOM.EQ.16)      ICTERH = 0
            END IF
            IF(JATOM.NE.15 .AND. JATOM.NE.16 .AND. JATOM.NE.17)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - GLY -
         ELSE IF (AAA.EQ.'GLY') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.9)      INTERH = 3
               IF(JATOM.EQ.8)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.9)      ICTERH = 1
               IF(JATOM.EQ.8)      ICTERH = 0
            END IF
            IF(JATOM.NE.7 .AND. JATOM.NE.8 .AND. JATOM.NE.9)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - HIS - HISAA - HISAB - HISBA -
         ELSE IF (AAA.EQ.'HIS') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF      (JATOM.EQ.20) THEN
                     RESNAM(IRES)=AAA//'AA'
                     INTERH      =3
               ELSE IF (JATOM.EQ.19) THEN
                  IF      (PDBNAM(JATOM  ).EQ.'HE1 ')THEN
                     RESNAM(IRES)=AAA//'AB'
                     INTERH      =3
                     ICTERH      =1
                  ELSE IF (PDBNAM(JATOM  ).EQ.'HE2 '
     *                .AND.PDBNAM(JATOM-3).EQ.'HD1 ')THEN
                     RESNAM(IRES)=AAA//'AA'
                     INTERH      =2
                  ELSE IF (PDBNAM(JATOM  ).EQ.'HE2 '
     *                .AND.PDBNAM(JATOM-3).EQ.'3HB ')THEN
                     RESNAM(IRES)=AAA//'BA'
                     INTERH      =3
                  END IF
               ELSE IF (JATOM.EQ.18) THEN
                  IF      (PDBNAM(JATOM  ).EQ.'HE2 ')THEN
                     RESNAM(IRES)=AAA//'BA'
                     INTERH      =2
                  ELSE IF (PDBNAM(JATOM  ).EQ.'HE1 '
     *                .AND.PDBNAM(JATOM-2).EQ.'HD1 ')THEN
                     RESNAM(IRES)=AAA//'AB'
                     INTERH      =2
                  ELSE IF (PDBNAM(JATOM  ).EQ.'HE1 '
     *                .AND.PDBNAM(JATOM-2).EQ.'3HB ')THEN
                     RESNAM(IRES)=AAA//'BB'
                     INTERH      =3
                  END IF
               ELSE IF (JATOM.EQ.17) THEN
                     RESNAM(IRES)=AAA//'BB'
                     INTERH      =2
               END IF
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF     (             JATOM.EQ.20          )THEN
                     RESNAM(IRES)=AAA//'AA'
                     ICTERH      =1
               ELSE IF(             JATOM.EQ.19
     *               .AND.PDBNAM(NFFAT  ).EQ.'OXT '
     *               .AND.PDBNAM(NFFAT-1).EQ.'HE2 '
     *               .AND.PDBNAM(NFFAT-4).EQ.'HD1 ')THEN
                     RESNAM(IRES)=AAA//'AA'
                     ICTERH      =0
               ELSE IF(             JATOM.EQ.19
     *               .AND.PDBNAM(NFFAT  ).EQ.'HXT '
     *               .AND.PDBNAM(NFFAT-2).EQ.'HE1 '
     *               .AND.PDBNAM(NFFAT-4).EQ.'HD1 ')THEN
                     RESNAM(IRES)=AAA//'AB'
                     ICTERH      =1
               ELSE IF(             JATOM.EQ.19
     *               .AND.PDBNAM(NFFAT  ).EQ.'HXT '
     *               .AND.PDBNAM(NFFAT-2).EQ.'HE2 '
     *               .AND.PDBNAM(NFFAT-5).EQ.'3HB ')THEN
                     RESNAM(IRES)=AAA//'BA'
                     ICTERH      =1
               ELSE IF(             JATOM.EQ.18
     *               .AND.PDBNAM(NFFAT  ).EQ.'OXT '
     *               .AND.PDBNAM(NFFAT-1).EQ.'HE2 ')THEN
                     RESNAM(IRES)=AAA//'BA'
                     ICTERH      =0
               ELSE IF(             JATOM.EQ.18
     *               .AND.PDBNAM(NFFAT  ).EQ.'OXT '
     *               .AND.PDBNAM(NFFAT-1).EQ.'HE1 '
     *               .AND.PDBNAM(NFFAT-3).EQ.'HD1 ')THEN
                     RESNAM(IRES)=AAA//'AB'
                     ICTERH      =0
               END IF
            ELSE
               IF(JATOM.EQ.18) RESNAM(IRES)=AAA//'AA'
               IF(JATOM.EQ.17)THEN
                  IF(PDBNAM(JATOM+LFFAT).EQ.'HE2 ')THEN
                     RESNAM(IRES)=AAA//'BA'
                  ELSE IF
     *              (PDBNAM(JATOM+LFFAT).EQ.'HE1 ')THEN
                     RESNAM(IRES)=AAA//'AB'
                  END IF
               END IF
               IF(JATOM.EQ.16) RESNAM(IRES)=AAA//'BB'
            END IF
            IF(JATOM.NE.16 .AND. JATOM.NE.17 .AND. JATOM.NE.18
     *                     .AND. JATOM.NE.19 .AND. JATOM.NE.20)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - ILE -
         ELSE IF (AAA.EQ.'ILE') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.21)      INTERH = 3
               IF(JATOM.EQ.20)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.21)      ICTERH = 1
               IF(JATOM.EQ.20)      ICTERH = 0
            END IF
            IF(JATOM.NE.19 .AND. JATOM.NE.20 .AND. JATOM.NE.21)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - LEU -
         ELSE IF (AAA.EQ.'LEU') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.21)      INTERH = 3
               IF(JATOM.EQ.20)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.21)      ICTERH = 1
               IF(JATOM.EQ.20)      ICTERH = 0
            END IF
            IF(JATOM.NE.19 .AND. JATOM.NE.20 .AND. JATOM.NE.21)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - LYS -
         ELSE IF (AAA.EQ.'LYS') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.24)      INTERH = 3
               IF(JATOM.EQ.23)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.24)      ICTERH = 1
               IF(JATOM.EQ.23)      ICTERH = 0
            END IF
            IF(JATOM.NE.22 .AND. JATOM.NE.23 .AND. JATOM.NE.24)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - MET -
         ELSE IF (AAA.EQ.'MET') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.19)      INTERH = 3
               IF(JATOM.EQ.18)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.19)      ICTERH = 1
               IF(JATOM.EQ.18)      ICTERH = 0
            END IF
            IF(JATOM.NE.17 .AND. JATOM.NE.18 .AND. JATOM.NE.19)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - PHE -
         ELSE IF (AAA.EQ.'PHE') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.22)      INTERH = 3
               IF(JATOM.EQ.21)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.22)      ICTERH = 1
               IF(JATOM.EQ.21)      ICTERH = 0
            END IF
            IF(JATOM.NE.20 .AND. JATOM.NE.21 .AND. JATOM.NE.22)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - PRO -
         ELSE IF (AAA.EQ.'PRO') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.16) THEN
                  INTERH = 3
                  RESNAM(IRES)=AAA//'NH2'
               END IF
               IF(JATOM.EQ.15) THEN
                 INTERH = 2
                 RESNAM(IRES)=AAA//'NH1'
               END IF
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.16) THEN
                  ICTERH = 1
                  RESNAM(IRES)=AAA//'COH'
               END IF
               IF(JATOM.EQ.15) THEN
                  ICTERH = 0
                  RESNAM(IRES)=AAA//'COO'
               END IF
            END IF
            IF(JATOM.NE.14 .AND. JATOM.NE.15 .AND. JATOM.NE.16)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - SER -
         ELSE IF (AAA.EQ.'SER') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.13)      INTERH = 3
               IF(JATOM.EQ.12)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.13)      ICTERH = 1
               IF(JATOM.EQ.12)      ICTERH = 0
            END IF
            IF(JATOM.NE.11 .AND. JATOM.NE.12 .AND. JATOM.NE.13)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - THR -     
         ELSE IF (AAA.EQ.'THR') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.16)      INTERH = 3
               IF(JATOM.EQ.15)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.16)      ICTERH = 1
               IF(JATOM.EQ.15)      ICTERH = 0
            END IF
            IF(JATOM.NE.14 .AND. JATOM.NE.15 .AND. JATOM.NE.16)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - TRP -      
         ELSE IF (AAA.EQ.'TRP') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.26)      INTERH = 3
               IF(JATOM.EQ.25)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.26)      ICTERH = 1
               IF(JATOM.EQ.25)      ICTERH = 0
            END IF
            IF(JATOM.NE.24 .AND. JATOM.NE.25 .AND. JATOM.NE.26)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - TYR -
         ELSE IF (AAA.EQ.'TYR') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.23)      INTERH = 3
               IF(JATOM.EQ.22)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.23)      ICTERH = 1
               IF(JATOM.EQ.22)      ICTERH = 0
            END IF
            IF(JATOM.NE.21 .AND. JATOM.NE.22 .AND. JATOM.NE.23)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - VAL -
         ELSE IF (AAA.EQ.'VAL') THEN
            IF(NNNCCC(IRES).EQ.1)THEN
               IF(JATOM.EQ.18)      INTERH = 3
               IF(JATOM.EQ.17)      INTERH = 2
            ELSE IF(NNNCCC(IRES).EQ.9)THEN
               IF(JATOM.EQ.18)      ICTERH = 1
               IF(JATOM.EQ.17)      ICTERH = 0
            END IF
            IF(JATOM.NE.16 .AND. JATOM.NE.17 .AND. JATOM.NE.18)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C
C --- NUCLEIC ACIDS ---
C
C - RNA ADE -
         ELSE IF (AAA.EQ.'  A') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.33)THEN
               RESNAM(IRES) = 'RNAADE'
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'RA5OH '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.34)THEN
               RESNAM(IRES) = 'RA3OH '
            ELSE
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - RNA CYT -
         ELSE IF (AAA.EQ.'  C') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'RNACYT'
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.29)THEN
               RESNAM(IRES) = 'RC5OH '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.32)THEN
               RESNAM(IRES) = 'RC3OH '
            ELSE
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - RNA GUA -
         ELSE IF (AAA.EQ.'  G') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.34)THEN
               RESNAM(IRES) = 'RNAGUA'
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.32)THEN
               RESNAM(IRES) = 'RG5OH '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.35)THEN
               RESNAM(IRES) = 'RG3OH '
            ELSE
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - RNA URA -
         ELSE IF (AAA.EQ.'  U') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.30)THEN
               RESNAM(IRES) = 'RNAURA'
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.28)THEN
               RESNAM(IRES) = 'RU5OH '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'RU3OH '
            ELSE
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - DNA ADE -
         ELSE IF (AAA.EQ.' DA') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.32)THEN
               RESNAM(IRES) = 'DNAADE'
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.30)THEN
               RESNAM(IRES) = 'DA5OH '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.33)THEN
               RESNAM(IRES) = 'DA3OH '
            ELSE
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - DNA CYT -
         ELSE IF (AAA.EQ.' DC') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.30)THEN
               RESNAM(IRES) = 'DNACYT'
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.28)THEN
               RESNAM(IRES) = 'DC5OH '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'DC3OH '
            ELSE
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - DNA GUA -
         ELSE IF (AAA.EQ.' DG') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.33)THEN
               RESNAM(IRES) = 'DNAGUA'
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.31)THEN
               RESNAM(IRES) = 'DG5OH '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.34)THEN
               RESNAM(IRES) = 'DG3OH '
            ELSE 
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - DNA THY -
         ELSE IF (AAA.EQ.' DT') THEN
            INTERH = -99
            ICTERH = -99
            IF(     NNNCCC(IRES).EQ.2.AND.JATOM.EQ.32)THEN
               RESNAM(IRES) = 'DNATHY'
            ELSE IF(NNNCCC(IRES).EQ.1.AND.JATOM.EQ.30)THEN
               RESNAM(IRES) = 'DT5OH '
            ELSE IF(NNNCCC(IRES).EQ.9.AND.JATOM.EQ.33)THEN
               RESNAM(IRES) = 'DT3OH '
            ELSE
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
C - HOH -
         ELSE IF (AAA.EQ.'HOH') THEN
            IF(JATOM.NE.3)THEN
               WRITE(IW,'(1X,A6,I6,A)')AAA,IRES,' WRONG NUMBER OF ATOMS'
               CALL ABRT
            END IF
            WRITE(RESNAM(IRES),'(A3,I3)') AAA, ITYPWAT
         END IF
C
C        -- READ IN PARAMETERS FROM LIBRARY --
C
         RNAME  = ' $'//RESNAM(IRES)(1:6)
         RNAME1 = ' $'//RNAME1(1:6)
         CALL RDPDBFILE(RNAME,RNAME1,
     *                  ZMAS,ONEMAS,
     *                  CHARG,POL,SIG,EPS,
     *                  SIG2,EPS2,
     *                  BOND0,FCBOND,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,
     *                  VROT,NNN,GAMA,
     *                  IPAIR,
     *                  KLIST,LLIST,MLIST,NLIST,
     *                  CLPR,ZLPR,NLPR,
     *                  JATOM,LFFAT,
     *                  MMRES,JHPOS,JHPOS1,
     *                  MXFFAT,MXBOND,MXANGL,MXDIHR,MXCMAP,
     *                  MXWAGG,MXDIHB,
     *                  INTERH,ICTERH,JHAPOS,JHAPOS1,
     *                  KSS1,KSS2,NNNCCC,MAPLST)
         LFFAT = LFFAT + JATOM
      ENDDO
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBFILE
      SUBROUTINE RDPDBFILE(RNAME,RNAME1,
     *                     ZMAS,ONEMAS,
     *                     CHARG,POL,SIG,EPS,
     *                     SIG2,EPS2,
     *                     BOND0,FCBOND,
     *                     ANGL0,FCANGL,FCWAGG,
     *                     DIHB0,FCDIHB,
     *                     VROT,NNN,GAMA,
     *                     IPAIR,
     *                     KLIST,LLIST,MLIST,NLIST,
     *                     CLPR,ZLPR,NLPR,
     *                     JATOM,LFFAT,
     *                     KRES,JHPOS,JHPOS1,
     *                     MXFFAT,MXBOND,MXANGL,MXDIHR,MXCMAP,
     *                     MXWAGG,MXDIHB,
     *                     INTERH,ICTERH,JHAPOS,JHAPOS1,
     *                     KSS1,KSS2,NNNCCC,MAPLST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 WORD
      CHARACTER*8  RNAME,RNAME1
      CHARACTER*256 QPFILE
C
      DIMENSION ZMAS(MXFFAT),ONEMAS(MXFFAT),CHARG(MXFFAT),POL(MXFFAT),
     *          SIG(MXFFAT),EPS(MXFFAT),
     *          SIG2(MXFFAT),EPS2(MXFFAT),
     *          BOND0(MXBOND),FCBOND(MXBOND),
     *          ANGL0(MXANGL),FCANGL(MXANGL),
     *          FCWAGG(MXWAGG),
     *          DIHB0(MXDIHB),FCDIHB(MXDIHB),
     *          VROT(MXDIHR),NNN(MXDIHR),
     *          GAMA(MXDIHR),IPAIR(2,MXBOND),
     *          KLIST(3,MXANGL),LLIST(4,MXDIHR),MLIST(4,MXWAGG),
     *          NLIST(4,MXDIHB),
     *          CLPR(4,MXFFAT),ZLPR(4,MXFFAT),NLPR(MXFFAT),
     *          MAPLST(6,*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN ALL PARAMETERS FROM LIBRARY --
C
      IF(MASWRK) THEN
         CALL GENQPFILE('CHARMM22.LIB ',QPFILE,LENQP)
         OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      END IF
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,RNAME,IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: ',RNAME,' NOT IN LIBRARY'
         CALL ABRT
      END IF 
      CALL OPNCRD(12,-IW)
C
  100 CONTINUE   
      CALL RDCARD('QUANPO  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF
      WORD ='          '
      KSIZE = -10
      CALL GSTRNG(WORD,KSIZE)
C
      IF(WORD.EQ.'COORDINATE'.OR.WORD.EQ.'CMAP      ') THEN
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'PARAMETERS') THEN
         CALL RDPDBPARA(RNAME,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,
     *                  SIG2,EPS2,LFFAT,KRES,NNNCCC,
     *                  INTERH,ICTERH,JHPOS,JHAPOS)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'QMMMREP   ') THEN
         CALL RDPDBQMMM(RNAME,CLPR,ZLPR,NLPR,LFFAT,KRES,NNNCCC,
     *                  JATOM,INTERH,ICTERH,JHPOS)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'BOND      ') THEN 
         CALL RDPDBBOND(RNAME,RNAME1,BOND0,FCBOND,IPAIR,MXBOND,LFFAT,
     *                  KRES,NNNCCC,JATOM,
     *                  INTERH,ICTERH,JHPOS,JHAPOS,KSS1,KSS2)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'ANGLE     ') THEN
         CALL RDPDBANGL(RNAME,RNAME1,ANGL0,FCANGL,KLIST,MXANGL,LFFAT,
     *                  KRES,NNNCCC,JATOM,
     *                  INTERH,ICTERH,JHPOS,JHPOS1,JHAPOS,KSS1,KSS2) 
         GOTO 100
      END IF
C
      IF(WORD.EQ.'DIHROT    ') THEN
         CALL RDPDBDIHR(RNAME,RNAME1,LLIST,GAMA,NNN,VROT,MXDIHR,
     *                  MXCMAP,JATOM,LFFAT,KRES,NNNCCC,
     *                  INTERH,ICTERH,JHPOS,JHPOS1,JHAPOS,JHAPOS1,
     *                  KSS1,KSS2,MAPLST)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'DIHBND    ')THEN
         CALL RDPDBDIHB(NLIST,DIHB0,FCDIHB,MXDIHB,LFFAT,
     *                  KRES,NNNCCC,JATOM,JHPOS,JHPOS1,
     *                  INTERH,ICTERH)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'WAGGING   ') THEN
         CALL RDPDBWAGG(FCWAGG,MLIST,MXWAGG,LFFAT)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'$END      ') THEN
         IF(MASWRK) CLOSE(12)      
         RETURN
      END IF
C
      END
C*MODULE QUANPO  *DECK RDPDBPARA
      SUBROUTINE RDPDBPARA(RNAME,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,
     *                     SIG2,EPS2,LFFAT,KRES,NNNCCC,
     *                     INTERH,ICTERH,JHPOS,JHAPOS)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      CHARACTER*10 FFNAME
      CHARACTER*8  RNAME
C
      DIMENSION ZMAS(*),ONEMAS(*),CHARG(*),POL(*),SIG(*),EPS(*),
     *          SIG2(*),EPS2(*),NNNCCC(*)
C
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN PARAMETERS FROM LIBRARY --
C
      IERR = 0
      IEOF = 0
      K    = LFFAT
  100 CONTINUE
      K = K + 1
      CALL RDCARD('RDPARAMT',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF
      FFNAME = '          '
      LGSTR=-10
      CALL GSTRNG(FFNAME,LGSTR)
      IF(FFNAME.EQ.'STOP      ') GOTO 200
      ZMAS(K)  = RFIND('FFMASS  ',IERR)*1822.88850204D+00
      ONEMAS(K)= 1.0D+00/ZMAS(K)
      CHARG(K) = RFIND('FFCHARGE',IERR)
      POL(K)   = RFIND('FFPOL   ',IERR)*TOBOHR**3
      SIG(K)   = RFIND('FFSIGMA ',IERR)*TOBOHR
      EPS(K)   = RFIND('FFEPSILN',IERR)*TOHART
      SIG2(K)  = RFIND('FFSIGMA ',IERR)*TOBOHR
      EPS2(K)  = RFIND('FFEPSILN',IERR)*TOHART
C     - CHARMM22 PARAMETER FILE USES RMIN/2 INSTAED OF SIGMA
      IF(NFFTYP.EQ.20022) SIG(K)  = SIG(K) *1.781797436280679D+00
      IF(NFFTYP.EQ.20022) SIG2(K) = SIG2(K)*1.781797436280679D+00
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR READING PARAMETERS IN LIBRARY'
         CALL ABRT
      END IF
C     - 2ND & 3RD H OF THE N-TER ARE NOT IN LIBRARY --
C       SO K MUST JUMP BY 1 OR 2 (EXCEPT FOR PRONH1/PRONH2
      IF(NNNCCC(KRES).EQ.1 .AND. K.EQ.JHPOS .AND.
     *   RNAME.NE.' $PRONH1'.AND.RNAME.NE.' $PRONH2')THEN
         IF (INTERH.EQ.2) K = K + 1
         IF (INTERH.EQ.3) K = K + 2
      END IF
      GOTO 100
C
 200  CONTINUE
      CALL FLSHBF(IW)
C
C     -- IF N-TERMINAL, ASSIGN CORRECT N, CA, HA, H CHARGES --
C        (N-TER GLY HAS 2 ALPHA H ATOMS)
C
      IF (NNNCCC(KRES).EQ.1 .AND. RNAME.NE.' $PRONH1' .AND.
     *                            RNAME.NE.' $PRONH2') THEN
         IF (NFFTYP.EQ.20022) THEN
            IF(INTERH.EQ.2)THEN
               CHARG(LFFAT+1)     =-0.96D+00
               CHARG(LFFAT+2)     = 0.19D+00
               CHARG(JHAPOS)= 0.09D+00
               DO K = JHPOS, JHPOS+1
                  ZMAS(K)  = 1.008000D+00*1822.88850204D+00
                  ONEMAS(K)= 1.0D+00/ZMAS(K)
                  CHARG(K) = 0.34000D+00
                  POL(K)   = 0.00000D+00
                  SIG(K)   = 0.22450D+00*TOBOHR
                  SIG(K)   = SIG(K)*1.781797436280679D+00
                  EPS(K)   = 0.04600D+00*TOHART
               ENDDO
            END IF
            IF(INTERH.EQ.3)THEN
               CHARG(LFFAT+1)     =-0.30D+00
               CHARG(LFFAT+2)     = 0.21D+00
               CHARG(JHAPOS)= 0.10D+00
               IF(RNAME.EQ.' $GLY   ')THEN
                  CHARG(2)       = 0.13D+00
                  CHARG(JHAPOS)  = 0.09D+00
                  CHARG(JHAPOS+1)= 0.09D+00
               END IF
               DO K = JHPOS, JHPOS+2
                  ZMAS(K)  = 1.008000D+00*1822.88850204D+00
                  ONEMAS(K)= 1.0D+00/ZMAS(K)
                  CHARG(K) = 0.33000D+00
                  POL(K)   = 0.00000D+00
                  SIG(K)   = 0.22450D+00*TOBOHR
                  SIG(K)   = SIG(K)*1.781797436280679D+00
                  EPS(K)   = 0.04600D+00*TOHART
               ENDDO
            END IF
         END IF
      END IF
C
C     -- IF C-TERMINAL, APPLY COO- OR COOH PARAMETERS --
C
      IF(NNNCCC(KRES).EQ.9)THEN
         IF(NFFTYP.EQ.20022) THEN
            IF(ICTERH.EQ.0.AND.RNAME.NE.' $PROCOO')THEN
               CHARG(LFFAT+3) = 0.34D+00
               CHARG(LFFAT+4) =-0.67D+00
               ZMAS(K)  = 15.999000D+00*1822.88850204D+00
               ONEMAS(K)= 1.0D+00/ZMAS(K)
               CHARG(K) =-0.67000D+00
               POL(K)   = 0.00000D+00
               SIG(K)   = 1.70000D+00*TOBOHR
               SIG(K)   = SIG(K)*1.781797436280679D+00
               EPS(K)   = 0.12000D+00*TOHART
            END IF
            IF(ICTERH.EQ.1.AND.RNAME.NE.' $PROCOH')THEN
               CHARG(LFFAT+3) = 0.72D+00
               CHARG(LFFAT+4) =-0.55D+00
               ZMAS(K)  = 15.999000D+00*1822.88850204D+00
               ONEMAS(K)= 1.0D+00/ZMAS(K)
               CHARG(K) =-0.61000D+00
               POL(K)   = 0.00000D+00
               SIG(K)   = 1.70000D+00*TOBOHR
               SIG(K)   = SIG(K)*1.781797436280679D+00
               EPS(K)   = 0.12000D+00*TOHART
               K        = K + 1
               ZMAS(K)  = 1.008000D+00*1822.88850204D+00
               ONEMAS(K)= 1.0D+00/ZMAS(K)
               CHARG(K) = 0.44000D+00
               POL(K)   = 0.00000D+00
               SIG(K)   = 0.22450D+00*TOBOHR
               SIG(K)   = SIG(K)*1.781797436280679D+00
               EPS(K)   = 0.04600D+00*TOHART
            END IF
         END IF
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBQMMM
      SUBROUTINE RDPDBQMMM(RNAME,CLPR,ZLPR,NLPR,LFFAT,KRES,NNNCCC,
     *                     JATOM,INTERH,ICTERH,JHPOS)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (ZERO=0.0D+00)
C
      CHARACTER*10 FFNAME
      CHARACTER*8  RNAME
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CLPR(4,*),ZLPR(4,*),NLPR(*),NNNCCC(*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN QMMMREP FROM LIBRARY --
C
      IERR = 0
      IEOF = 0
      K    = LFFAT
  100 CONTINUE
      K = K + 1
      CALL RDCARD('RDQMMMPDB',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF
      FFNAME = '          '
      LGSTR=-10
      CALL GSTRNG(FFNAME,LGSTR)
      IF(FFNAME.EQ.'STOP      ') GOTO 200
      NTERMS = IFIND('NTERM   ',IERR)
      IF(NTERMS.GT.4) THEN
         IF(MASWRK) WRITE(IW,*) 'QMMMREP: NTERMS CANNOT BE > 4'
         CALL ABRT
      END IF
      DO 110 II = 1, NTERMS
         CLPR(II,K) = RFIND('CLPR    ',IERR)
         IF(IERR.NE.0) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERORR READING CLPR'
            CALL ABRT
         END IF
         ZLPR(II,K) = RFIND('ZLPR    ',IERR)
         IF(IERR.NE.0) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ERORR READING ZLPR'
            CALL ABRT
         END IF
         IF(CLPR(II,K).NE.ZERO .AND. ZLPR(II,K).EQ.ZERO) THEN
            IF(MASWRK) WRITE(IW,*) 'QMMMREP: ZETA CANNOT BE ZERO'
            CALL ABRT
         END IF
  110 CONTINUE
C      -- THE CURRENT CODE ONLY USES POTENTIAL = R**2.
      NLPR(K) = 2
C     - 2ND & 3RD H OF THE N-TER ARE NOT IN LIBRARY --
C       SO K MUST JUMP BY 1 OR 2
      IF(NNNCCC(KRES).EQ.1 .AND. K.EQ.JHPOS .AND.
     *   RNAME.NE.' $PRONH1'.AND.RNAME.NE.' $PRONH2')THEN
         IF (INTERH.EQ.2) K = K + 1
         IF (INTERH.EQ.3) K = K + 2
      END IF
      GOTO 100
C
 200  CONTINUE
C
C     -- IF N-TERMINAL, ASSIGN CORRECT N, CA, HA, H VALUES --
C        (N-TER GLY HAS 2 ALPHA H ATOMS)
C
      IF (NNNCCC(KRES).EQ.1 .AND. RNAME.NE.' $PRONH1' .AND.
     *                            RNAME.NE.' $PRONH2') THEN
         IF (INTERH.EQ.2) THEN
            DO K = JHPOS, JHPOS+1
               CLPR(1,K)= ZERO
               ZLPR(1,K)= ZERO
               CLPR(2,K)= ZERO
               ZLPR(2,K)= ZERO
               CLPR(3,K)= ZERO
               ZLPR(3,K)= ZERO
               CLPR(4,K)= ZERO
               ZLPR(4,K)= ZERO
               NLPR(  K)= 2
            ENDDO
         END IF
         IF (INTERH.EQ.3) THEN
            DO K = JHPOS, JHPOS+2
               CLPR(1,K)= ZERO
               ZLPR(1,K)= ZERO
               CLPR(2,K)= ZERO
               ZLPR(2,K)= ZERO
               CLPR(3,K)= ZERO
               ZLPR(3,K)= ZERO
               CLPR(4,K)= ZERO
               ZLPR(4,K)= ZERO
               NLPR(  K)= 2
            ENDDO
         END IF
      END IF
C
C     -- IF C-TERMINAL, APPLY COO- OR COOH PARAMETERS --
C
         IF(NNNCCC(KRES).EQ.9)THEN
            IF(ICTERH.EQ.0.AND.RNAME.NE.' $PROCOO')THEN
               K = LFFAT + JATOM
               CLPR(1,K)= 30.00000D+00
               ZLPR(1,K)= 0.80000D+00
               CLPR(2,K)= -0.00900D+00
               ZLPR(2,K)= 0.14000D+00
               CLPR(3,K)= ZERO
               ZLPR(3,K)= ZERO
               CLPR(4,K)= ZERO
               ZLPR(4,K)= ZERO
               NLPR(  K)= 2
            END IF
            IF(ICTERH.EQ.1.AND.RNAME.NE.' $PROCOH')THEN
               K = LFFAT+JATOM - 1
               CLPR(1,K)= 30.00000D+00
               ZLPR(1,K)= 0.80000D+00
               CLPR(2,K)= -0.00900D+00
               ZLPR(2,K)= 0.14000D+00
               CLPR(3,K)= ZERO
               ZLPR(3,K)= ZERO
               CLPR(4,K)= ZERO
               ZLPR(4,K)= ZERO
               NLPR(  K)= 2
               K = LFFAT + JATOM
               CLPR(1,K)= ZERO
               ZLPR(1,K)= ZERO
               CLPR(2,K)= ZERO
               ZLPR(2,K)= ZERO
               CLPR(3,K)= ZERO
               ZLPR(3,K)= ZERO
               CLPR(4,K)= ZERO
               ZLPR(4,K)= ZERO
               NLPR(  K)= 2
            END IF
         END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDPDBBOND
      SUBROUTINE RDPDBBOND(RNAME,RNAME1,BOND0,FCBOND,IPAIR,MXBOND,LFFAT,
     *                     KRES,NNNCCC,JATOM,
     *                     INTERH,ICTERH,JHPOS,JHAPOS,KSS1,KSS2)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 HEAD
      CHARACTER*8  RNAME,RNAME1
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION BOND0(MXBOND),FCBOND(MXBOND),IPAIR(2,MXBOND),NNNCCC(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN BOND INFO FROM LIBRARY --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE
      CALL RDCARD('RDBOND  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NBOND = NBOND + 1
      IPAIR(1,NBOND) = IFIND('IPAIR  ',IERR)+LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING ATM1 IN LIBRARY'
         CALL ABRT
      END IF
      IPAIR(2,NBOND) = IFIND('IPAIR  ',IERR)+LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING ATM2 IN LIBRARY'
         CALL ABRT
      END IF
      FCBOND(NBOND) = RFIND('FCBOND  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING FCBOND IN LIBRARY'
         CALL ABRT
      END IF
C     -INPUT KCAL/(MOL*A*A), CONVERT TO HARTREE/(BOHR*BOHR)
      FCBOND(NBOND) = FCBOND(NBOND)*TOANGS*TOANGS*TOHART
      BOND0(NBOND) = RFIND('R0      ',IERR)*TOBOHR
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING R0 IN LIBRARY'
         CALL ABRT
      END IF
C
C     -- MODIFY THE PARAMETERS FOR N-TER --
C
      IF (NNNCCC(KRES).EQ.1 .AND. RNAME.NE.' $PRONH1' .AND.
     *                            RNAME.NE.' $PRONH2') THEN
         IF(INTERH.EQ.2 .OR. INTERH.EQ.3)THEN
            IF(IPAIR(1,NBOND).GT.JHPOS)
     *            IPAIR(1,NBOND) = IPAIR(1,NBOND) + INTERH - 1
            IF(IPAIR(2,NBOND).GT.JHPOS)
     *            IPAIR(2,NBOND) = IPAIR(2,NBOND) + INTERH - 1
C           -- MODIFY NH BOND PARAMETER FOR N-TER
            IF((IPAIR(1,NBOND).EQ.LFFAT+1.AND.
     *          IPAIR(2,NBOND).EQ.JHPOS       ).OR.
     *         (IPAIR(2,NBOND).EQ.LFFAT+1.AND.
     *          IPAIR(1,NBOND).EQ.JHPOS       )    )THEN
                IF(INTERH.EQ.3) THEN
                   BOND0(NBOND)  = 1.040D+00*TOBOHR
                   FCBOND(NBOND) = 403.0D+00*TOANGS*TOANGS*TOHART
                ELSE IF(INTERH.EQ.2) THEN
                   BOND0(NBOND)  = 1.000D+00*TOBOHR
                   FCBOND(NBOND) = 480.0D+00*TOANGS*TOANGS*TOHART
                END IF
            END IF
C           -- MODIFY CA-N BOND PARAMETER FOR N-TER
            IF((IPAIR(1,NBOND).EQ.LFFAT+1.AND.
     *          IPAIR(2,NBOND).EQ.LFFAT+2     ).OR.
     *         (IPAIR(2,NBOND).EQ.LFFAT+1.AND.
     *          IPAIR(1,NBOND).EQ.LFFAT+2     )    )THEN
                IF(INTERH.EQ.3) THEN
                   BOND0(NBOND)  = 1.480D+00*TOBOHR
                   FCBOND(NBOND) = 200.0D+00*TOANGS*TOANGS*TOHART
                ELSE IF(INTERH.EQ.2) THEN
                   BOND0(NBOND)  = 1.455D+00*TOBOHR
                   FCBOND(NBOND) = 240.0D+00*TOANGS*TOANGS*TOHART
                END IF
            END IF
         END IF
      END IF
C
C     -- MODIFY THE C=O PARAMETERS FOR C-TER --
C
      IF (NNNCCC(KRES).EQ.9.AND.RNAME.NE.' $PROCOO'.AND.
     *                          RNAME.NE.' $PROCOH') THEN
         IF((IPAIR(1,NBOND).EQ.LFFAT+3.AND.
     *       IPAIR(2,NBOND).EQ.LFFAT+4).OR.
     *      (IPAIR(1,NBOND).EQ.LFFAT+4.AND.
     *       IPAIR(2,NBOND).EQ.LFFAT+3)) THEN
             IF(ICTERH.EQ.0) THEN
C               O=C  BOND IN COO-
                BOND0(NBOND)  = 1.260D+00*TOBOHR
                FCBOND(NBOND) = 525.0D+00*TOANGS*TOANGS*TOHART
             ELSE IF(ICTERH.EQ.1) THEN
C               O=C  BOND IN COOH
                BOND0(NBOND)  = 1.220D+00*TOBOHR
                FCBOND(NBOND) = 750.0D+00*TOANGS*TOANGS*TOHART
             END IF
         END IF
         IF((IPAIR(1,NBOND).EQ.LFFAT+2.AND.
     *       IPAIR(2,NBOND).EQ.LFFAT+3).OR.
     *      (IPAIR(1,NBOND).EQ.LFFAT+3.AND.
     *       IPAIR(2,NBOND).EQ.LFFAT+2)) THEN
             IF(ICTERH.EQ.0) THEN
C               CA-C  BOND IN CA-COO-
                BOND0(NBOND)  = 1.522D+00*TOBOHR
                FCBOND(NBOND) = 200.0D+00*TOANGS*TOANGS*TOHART
             ELSE IF(ICTERH.EQ.1) THEN
C               CA-C  BOND IN CA-COOH
                BOND0(NBOND)  = 1.522D+00*TOBOHR
                FCBOND(NBOND) = 200.0D+00*TOANGS*TOANGS*TOHART
             END IF
         END IF
      END IF
C
      GOTO 100
C
 200  CONTINUE
C
C     -- PROTEIN
      IF(NFFTYP.EQ.20022.AND.INTERH.GT.-99.AND.ICTERH.GT.-99)THEN
            IF(NNNCCC(KRES).EQ.1 .OR. NNNCCC(KRES).EQ.2)THEN
C              - THE C-N BOND
               NBOND = NBOND + 1
               IPAIR(1,NBOND)= LFFAT + 3              ! LOWER  C
               IPAIR(2,NBOND)= LFFAT + JATOM + 1      ! HIGHER N
               BOND0(NBOND)  = 1.345D+00*TOBOHR
               FCBOND(NBOND) = 370.0D+00*TOANGS*TOANGS*TOHART
               IF(RNAME1.EQ.' $PRO   ')THEN
                  BOND0(NBOND)  = 1.300D+00*TOBOHR
                  FCBOND(NBOND) = 260.0D+00*TOANGS*TOANGS*TOHART
               END IF
C              - ADD SOME N-TER BONDS
               IF (NNNCCC(KRES).EQ.1 .AND. RNAME.NE.' $PRONH1' .AND.
     *                                     RNAME.NE.' $PRONH2') THEN
                  IF(INTERH.EQ.2) THEN
                     NBOND = NBOND + 1
                     IPAIR(1,NBOND)=LFFAT + 1
                     IPAIR(2,NBOND)=JHPOS + 1
                     BOND0(NBOND)  = 1.000D+00*TOBOHR
                     FCBOND(NBOND) = 480.0D+00*TOANGS*TOANGS*TOHART
C                    - U-B TERMS -
                     NBOND = NBOND + 1
                     IPAIR(1,NBOND)=LFFAT + 1
                     IPAIR(2,NBOND)=JHAPOS
                     BOND0(NBOND)  = 2.140D+00*TOBOHR
                     FCBOND(NBOND) = 50.00D+00*TOANGS*TOANGS*TOHART
                     IF(RNAME.EQ.' $GLY   ')THEN
                        NBOND = NBOND + 1
                        IPAIR(1,NBOND)=LFFAT + 1
                        IPAIR(2,NBOND)=JHAPOS+1
                        BOND0(NBOND)  = 2.140D+00*TOBOHR
                        FCBOND(NBOND) = 50.00D+00*TOANGS*TOANGS*TOHART
                     END IF
                  END IF
                  IF(INTERH.EQ.3)THEN
                     NBOND = NBOND + 1
                     IPAIR(1,NBOND)=LFFAT + 1
                     IPAIR(2,NBOND)=JHPOS + 1
                     BOND0(NBOND)  = 1.040D+00*TOBOHR
                     FCBOND(NBOND) = 403.0D+00*TOANGS*TOANGS*TOHART
                     NBOND = NBOND + 1
                     IPAIR(1,NBOND)=LFFAT + 1
                     IPAIR(2,NBOND)=JHPOS + 2
                     BOND0(NBOND)  = 1.040D+00*TOBOHR
                     FCBOND(NBOND) = 403.0D+00*TOANGS*TOANGS*TOHART
C                    - U-B TERMS -
                     NBOND = NBOND + 1
                     IPAIR(1,NBOND)=LFFAT + 2
                     IPAIR(2,NBOND)=JHPOS
                     BOND0(NBOND)  = 2.07400D+00 *TOBOHR
                     FCBOND(NBOND) = 20.0D+00 *TOANGS*TOANGS*TOHART
                     NBOND = NBOND + 1
                     IPAIR(1,NBOND)=LFFAT + 2
                     IPAIR(2,NBOND)=JHPOS + 1
                     BOND0(NBOND)  = 2.07400D+00 *TOBOHR
                     FCBOND(NBOND) = 20.0D+00 *TOANGS*TOANGS*TOHART
                     NBOND = NBOND + 1
                     IPAIR(1,NBOND)=LFFAT + 2
                     IPAIR(2,NBOND)=JHPOS + 2
                     BOND0(NBOND)  = 2.07400D+00 *TOBOHR
                     FCBOND(NBOND) = 20.0D+00 *TOANGS*TOANGS*TOHART
                  END IF
               END IF
            END IF
C           - ADD SOME C-TER BONDS
            IF(NNNCCC(KRES).EQ.9.AND.RNAME.NE.' $PROCOO'.AND.
     *                               RNAME.NE.' $PROCOH') THEN
               IF(ICTERH.EQ.0)THEN
                  NBOND = NBOND + 1
                  IPAIR(1,NBOND)=LFFAT + 3
                  IPAIR(2,NBOND)=LFFAT + JATOM
                  BOND0(NBOND)  = 1.26000D+00 *TOBOHR
                  FCBOND(NBOND) = 525.00D+00 *TOANGS*TOANGS*TOHART
C                 -  U-B TERMS -
                  NBOND = NBOND + 1
                  IPAIR(1,NBOND)=LFFAT + 4
                  IPAIR(2,NBOND)=LFFAT + JATOM
                  BOND0(NBOND)  = 2.22500D+00 *TOBOHR
                  FCBOND(NBOND) = 70.00D+00 *TOANGS*TOANGS*TOHART
                  NBOND = NBOND + 1
                  IPAIR(1,NBOND)=LFFAT + 4
                  IPAIR(2,NBOND)=LFFAT + 2
                  BOND0(NBOND)  = 2.38800D+00 *TOBOHR
                  FCBOND(NBOND) = 50.00D+00 *TOANGS*TOANGS*TOHART
                  NBOND = NBOND + 1
                  IPAIR(1,NBOND)=LFFAT + JATOM
                  IPAIR(2,NBOND)=LFFAT + 2
                  BOND0(NBOND)  = 2.38800D+00 *TOBOHR
                  FCBOND(NBOND) = 50.00D+00 *TOANGS*TOANGS*TOHART
               END IF
               IF(ICTERH.EQ.1)THEN
                  NBOND = NBOND + 1
                  IPAIR(1,NBOND)=LFFAT + 3
                  IPAIR(2,NBOND)=LFFAT + JATOM - 1
                  BOND0(NBOND)  = 1.40000D+00 *TOBOHR
                  FCBOND(NBOND) = 230.00D+00 *TOANGS*TOANGS*TOHART
C                 -  U-B TERM -
                  NBOND = NBOND + 1
                  IPAIR(1,NBOND)=LFFAT + 4
                  IPAIR(2,NBOND)=LFFAT + JATOM - 1
                  BOND0(NBOND)  = 2.26200D+00 *TOBOHR
                  FCBOND(NBOND) = 210.00D+00 *TOANGS*TOANGS*TOHART
                  NBOND = NBOND + 1
                  IPAIR(1,NBOND)=LFFAT + 2
                  IPAIR(2,NBOND)=LFFAT + 4
                  BOND0(NBOND)  = 2.44200D+00 *TOBOHR
                  FCBOND(NBOND) = 20.00D+00 *TOANGS*TOANGS*TOHART
                  NBOND = NBOND + 1
                  IPAIR(1,NBOND)=LFFAT + JATOM - 1
                  IPAIR(2,NBOND)=LFFAT + JATOM
                  BOND0(NBOND)  = 0.96000D+00 *TOBOHR
                  FCBOND(NBOND) = 545.00D+00 *TOANGS*TOANGS*TOHART
               END IF
            END IF
            IF(KRES.EQ.KSS2) THEN
               NBOND = NBOND + 1
               IPAIR(1,NBOND)=KSS1
               IPAIR(2,NBOND)=LFFAT + 6
               BOND0(NBOND)  = 2.0290D+00 *TOBOHR
               FCBOND(NBOND) = 173.00D+00 *TOANGS*TOANGS*TOHART
            END IF
      END IF
C
C     -- DNA/RNA: ADD THE O-P BOND
      IF(NFFTYP.EQ.20022.AND.INTERH.EQ.-99.AND.ICTERH.EQ.-99)THEN
         IF(NNNCCC(KRES).EQ.1.OR.NNNCCC(KRES).EQ.2)THEN
            IF(NNNCCC(KRES).EQ.1) NADD = 0
            IF(NNNCCC(KRES).EQ.2) NADD = 3
            NBOND = NBOND + 1
            IPAIR(1,NBOND)= LFFAT + 6 + NADD       ! LOWER  O3'
            IPAIR(2,NBOND)= LFFAT + JATOM + 1      ! HIGHER P
            BOND0(NBOND)  = 1.600D+00*TOBOHR
            FCBOND(NBOND) = 270.0D+00*TOANGS*TOANGS*TOHART
            NBOND = NBOND + 1
            IPAIR(1,NBOND)= LFFAT + 5 + NADD       ! LOWER  C3'
            IPAIR(2,NBOND)= LFFAT + JATOM + 1      ! HIGHER P
            BOND0(NBOND)  = 2.330D+00*TOBOHR
            FCBOND(NBOND) = 35.0D+00*TOANGS*TOANGS*TOHART
         END IF
      END IF
C
      IF(NBOND.GT.MXBOND) THEN
         IF(MASWRK) WRITE(IW,*) 'ERROR: TOO MANY BONDS. INCREASE MXBOND'
         CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBANGL
      SUBROUTINE RDPDBANGL(RNAME,RNAME1,ANGL0,FCANGL,KLIST,MXANGL,LFFAT,
     *                     KRES,NNNCCC,JATOM,
     *                     INTERH,ICTERH,JHPOS,JHPOS1,JHAPOS,KSS1,KSS2)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 HEAD
      CHARACTER*8  RNAME,RNAME1
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION ANGL0(MXANGL),FCANGL(MXANGL),KLIST(3,MXANGL),NNNCCC(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN ANGLE INFO FROM LIBRARY  --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE
      CALL RDCARD('RDANGL  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*) 
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NANGL = NANGL + 1
      KLIST(1,NANGL) = IFIND('KLIST1  ',IERR) + LFFAT
      KLIST(2,NANGL) = IFIND('KLIST2  ',IERR) + LFFAT
      KLIST(3,NANGL) = IFIND('KLIST3  ',IERR) + LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING ANGLE IN LIBRARY'
         CALL ABRT
      END IF
      FCANGL(NANGL) = RFIND('FCANGL  ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING FCANGL IN LIBRARY'
         CALL ABRT
      END IF
      FCANGL(NANGL) = FCANGL(NANGL)*TOHART
      ANGL0(NANGL) = RFIND('ANGL0   ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING ANGL0 IN LIBRARY'
         CALL ABRT
      END IF
      ANGL0(NANGL) = ANGL0(NANGL)*TORAD
C
      IF (NNNCCC(KRES).EQ.1 .AND. RNAME.NE.' $PRONH1' .AND.
     *                            RNAME.NE.' $PRONH2') THEN
         IF(INTERH.EQ.2 .OR. INTERH.EQ.3)THEN
            IF(KLIST(1,NANGL).GT.JHPOS)
     *         KLIST(1,NANGL) = KLIST(1,NANGL) + INTERH - 1
            IF(KLIST(2,NANGL).GT.JHPOS)
     *         KLIST(2,NANGL) = KLIST(2,NANGL) + INTERH - 1
            IF(KLIST(3,NANGL).GT.JHPOS)
     *         KLIST(3,NANGL) = KLIST(3,NANGL) + INTERH - 1
C           -- MODIFY CA-N-H PARAMETERS FOR N-TER --
            IF((KLIST(1,NANGL).EQ.JHPOS  .AND.  
     *          KLIST(3,NANGL).EQ.LFFAT+2).OR.
     *         (KLIST(1,NANGL).EQ.LFFAT+2.AND.  
     *          KLIST(3,NANGL).EQ.JHPOS  )) THEN
               IF(INTERH.EQ.3) THEN
                  ANGL0(NANGL)   = 109.5D+00*TORAD
                  FCANGL(NANGL)  = 30.0D+00*TOHART
               ELSE IF(INTERH.EQ.2) THEN
                  ANGL0(NANGL)   = 111.0D+00*TORAD
                  FCANGL(NANGL)  = 50.0D+00*TOHART
               END IF
            END IF
C           -- MODIFY C-CA-N, HA-CA-N  AND  CB-CA-N FOR N-TER --
            IF((KLIST(1,NANGL).EQ.LFFAT+1.AND.
     *          KLIST(3,NANGL).EQ.LFFAT+3).OR.
     *         (KLIST(1,NANGL).EQ.LFFAT+3.AND.
     *          KLIST(3,NANGL).EQ.LFFAT+1)) THEN
                IF(INTERH.EQ.3) THEN
                   ANGL0(NANGL)   = 110.0D+00*TORAD
                   FCANGL(NANGL)  =  43.7D+00*TOHART
                ELSE IF(INTERH.EQ.2) THEN
                   ANGL0(NANGL)   = 107.0D+00*TORAD
                   FCANGL(NANGL)  =  50.0D+00*TOHART
                   IF(RNAME.EQ.' $GLY   ')THEN
                     ANGL0(NANGL)   = 108.0D+00*TORAD
                     FCANGL(NANGL)  =  52.0D+00*TOHART
                   END IF
                END IF
            END IF
C
            IF(RNAME.NE.' $GLY   ') THEN
               IF((KLIST(1,NANGL).EQ.LFFAT+1.AND.
     *             KLIST(3,NANGL).EQ.JHAPOS).OR.
     *            (KLIST(1,NANGL).EQ.JHAPOS.AND.
     *             KLIST(3,NANGL).EQ.LFFAT+1)) THEN
                   IF(INTERH.EQ.3)THEN
                      ANGL0(NANGL)   = 107.5D+00*TORAD
                      FCANGL(NANGL)  = 51.50D+00*TOHART
                   END IF
                   IF(INTERH.EQ.2)THEN
                      ANGL0(NANGL)   = 109.5D+00*TORAD
                      FCANGL(NANGL)  = 38.00D+00*TOHART
                   END IF
               END IF
               IF((KLIST(1,NANGL).EQ.LFFAT+1.AND.
     *             KLIST(3,NANGL).EQ.LFFAT+5).OR.
     *            (KLIST(1,NANGL).EQ.LFFAT+5.AND.
     *             KLIST(3,NANGL).EQ.LFFAT+1)) THEN
                  ANGL0(NANGL)   = 110.0D+00*TORAD
                  FCANGL(NANGL)  = 67.70D+00*TOHART 
               END IF
            ELSE
               IF((KLIST(1,NANGL).EQ.LFFAT+1.AND.
     *             KLIST(3,NANGL).EQ.JHAPOS).OR.
     *            (KLIST(1,NANGL).EQ.JHAPOS.AND.
     *             KLIST(3,NANGL).EQ.LFFAT+1)) THEN
                  IF(INTERH.EQ.3)THEN
                     ANGL0(NANGL)   = 107.5D+00*TORAD
                     FCANGL(NANGL)  = 51.50D+00*TOHART
                  END IF
                  IF(INTERH.EQ.2)THEN
                     ANGL0(NANGL)   = 109.5D+00*TORAD
                     FCANGL(NANGL)  = 38.00D+00*TOHART
                  END IF
               END IF
               IF((KLIST(1,NANGL).EQ.LFFAT+1.AND.
     *             KLIST(3,NANGL).EQ.JHAPOS+1).OR.
     *            (KLIST(1,NANGL).EQ.JHAPOS+1.AND.
     *             KLIST(3,NANGL).EQ.LFFAT+1)) THEN
                  IF(INTERH.EQ.3)THEN
                     ANGL0(NANGL)   = 107.5D+00*TORAD
                     FCANGL(NANGL)  = 51.50D+00*TOHART
                  END IF
                  IF(INTERH.EQ.2)THEN
                     ANGL0(NANGL)   = 109.5D+00*TORAD
                     FCANGL(NANGL)  = 38.00D+00*TOHART
                  END IF
               END IF
            END IF
         END IF
      END IF
C
C     -- MODIFY THE COO- OR COOH PARAMETERS FOR C-TER --
C
      IF (NNNCCC(KRES).EQ.9 .AND. ICTERH.EQ.0.AND.
     *                            RNAME.NE.' $PROCOO') THEN
C        O-C-CA
         IF((KLIST(1,NANGL).EQ.LFFAT+4.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+2).OR.
     *      (KLIST(1,NANGL).EQ.LFFAT+2.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+4)) THEN
            ANGL0(NANGL)   = 118.0D+00*TORAD
            FCANGL(NANGL)  =  40.0D+00*TOHART
         END IF
C        C-CA-HA
         IF((KLIST(1,NANGL).EQ.LFFAT+3.AND.
     *       KLIST(3,NANGL).EQ.JHAPOS).OR.
     *      (KLIST(1,NANGL).EQ.JHAPOS.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+3)) THEN
            ANGL0(NANGL)   = 109.5D+00*TORAD
            FCANGL(NANGL)  =  50.0D+00*TOHART
         END IF
C
C        C-CA-N
         IF((KLIST(1,NANGL).EQ.LFFAT+3.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+1).OR.
     *      (KLIST(1,NANGL).EQ.LFFAT+1.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+3)) THEN
            ANGL0(NANGL)   = 107.0D+00*TORAD
            FCANGL(NANGL)  =  50.0D+00*TOHART
         END IF
C
         IF(RNAME.EQ.' $GLY   ') THEN
C        - C-CA-HA -
            IF((KLIST(1,NANGL).EQ.LFFAT+3.AND.
     *          KLIST(3,NANGL).EQ.JHAPOS + 1).OR.
     *         (KLIST(1,NANGL).EQ.JHAPOS + 1 .AND.
     *          KLIST(3,NANGL).EQ.LFFAT+3)) THEN
               ANGL0(NANGL)   = 109.5D+00 *TORAD
               FCANGL(NANGL)  = 50.0D+00*TOHART
            END IF
         ELSE
            IF((KLIST(1,NANGL).EQ.LFFAT+3.AND.
     *          KLIST(3,NANGL).EQ.LFFAT+5).OR.
     *         (KLIST(1,NANGL).EQ.LFFAT+5 .AND.
     *          KLIST(3,NANGL).EQ.LFFAT+3)) THEN
               ANGL0(NANGL)   = 108.0D+00 *TORAD
               FCANGL(NANGL)  = 52.0D+00*TOHART
            END IF
         END IF
      END IF
C
      IF (NNNCCC(KRES).EQ.9 .AND. ICTERH.EQ.1.AND.
     *                            RNAME.NE.' $PROCOH') THEN
C        O-C-CA
         IF((KLIST(1,NANGL).EQ.LFFAT+4.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+2).OR.
     *      (KLIST(1,NANGL).EQ.LFFAT+2.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+4)) THEN
            ANGL0(NANGL)   = 125.0D+00*TORAD
            FCANGL(NANGL)  =  70.0D+00*TOHART
         END IF
C        C-CA-HA
         IF((KLIST(1,NANGL).EQ.LFFAT+3.AND.
     *       KLIST(3,NANGL).EQ.JHAPOS).OR.
     *      (KLIST(1,NANGL).EQ.JHAPOS.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+3)) THEN
            ANGL0(NANGL)   = 109.5D+00*TORAD
            FCANGL(NANGL)  =  50.0D+00*TOHART
         END IF
C        C-CA-N
         IF((KLIST(1,NANGL).EQ.LFFAT+3.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+1).OR.
     *      (KLIST(1,NANGL).EQ.LFFAT+1.AND.
     *       KLIST(3,NANGL).EQ.LFFAT+3)) THEN
            ANGL0(NANGL)   = 107.0D+00*TORAD
            FCANGL(NANGL)  =  50.0D+00*TOHART
         END IF
C
         IF(RNAME.EQ.' $GLY   ') THEN
C        - C-CA-HA -
            IF((KLIST(1,NANGL).EQ.LFFAT+3.AND.
     *          KLIST(3,NANGL).EQ.JHAPOS + 1).OR.
     *         (KLIST(1,NANGL).EQ.JHAPOS + 1 .AND.
     *          KLIST(3,NANGL).EQ.LFFAT+3)) THEN
               ANGL0(NANGL)   = 109.5D+00*TORAD
               FCANGL(NANGL)  =  50.0D+00*TOHART
            END IF
         ELSE
            IF((KLIST(1,NANGL).EQ.LFFAT+3.AND.
     *          KLIST(3,NANGL).EQ.LFFAT+5).OR.
     *         (KLIST(1,NANGL).EQ.LFFAT+5 .AND.
     *          KLIST(3,NANGL).EQ.LFFAT+3)) THEN
               ANGL0(NANGL)   = 108.0D+00*TORAD
               FCANGL(NANGL)  =  52.0D+00*TOHART
            END IF
         END IF
      END IF
C
      GOTO 100
C
 200  CONTINUE
C
C        - ADD PEPTIDE JUNCTION ANGLES -
      IF(NFFTYP.EQ.20022.AND.INTERH.GT.-99.AND.ICTERH.GT.-99)THEN
         IF(NNNCCC(KRES).EQ.1 .OR. NNNCCC(KRES).EQ.2)THEN
C           - CA-C-N -
            NANGL = NANGL + 1
            KLIST(1,NANGL) = LFFAT + 2
            KLIST(2,NANGL) = LFFAT + 3
            KLIST(3,NANGL) = LFFAT + JATOM + 1
            ANGL0(NANGL)   = 116.5D+00 *TORAD
            FCANGL(NANGL)  = 80.0D+00*TOHART
            IF(RNAME1.EQ.' $PRO   ')THEN
               ANGL0(NANGL)   = 112.5D+00 *TORAD
               FCANGL(NANGL)  = 20.0D+00*TOHART
            END IF
C           - C-N-CA -
            NANGL = NANGL + 1
            KLIST(1,NANGL) = LFFAT + 3
            KLIST(2,NANGL) = LFFAT + JATOM + 1
            KLIST(3,NANGL) = LFFAT + JATOM + 2
            ANGL0(NANGL)   = 120.00D+00 *TORAD
            FCANGL(NANGL)  = 50.0D+00*TOHART
            IF(RNAME1.EQ.' $PRO   ')THEN
               ANGL0(NANGL)   = 117.0D+00 *TORAD
               FCANGL(NANGL)  = 60.0D+00*TOHART
            END IF
C           - C-N-H -   (FOR PROLINE, IT IS C-N-CD)
            NANGL = NANGL + 1
            KLIST(1,NANGL) = LFFAT + 3
            KLIST(2,NANGL) = LFFAT + JATOM + 1
            KLIST(3,NANGL) = JHPOS1
            ANGL0(NANGL)   = 123.0D+00 *TORAD
            FCANGL(NANGL)  = 34.0D+00*TOHART
            IF(JHPOS1.EQ.0) THEN
               KLIST(3,NANGL) = LFFAT + JATOM + 7
               ANGL0(NANGL)   = 117.0D+00 *TORAD
               FCANGL(NANGL)  = 60.0D+00*TOHART
            END IF
C           - O-C-N
            NANGL = NANGL + 1
            KLIST(1,NANGL) = LFFAT + 4
            KLIST(2,NANGL) = LFFAT + 3
            KLIST(3,NANGL) = LFFAT + JATOM + 1
            ANGL0(NANGL)   = 122.5D+00 *TORAD
            FCANGL(NANGL)  = 80.0D+00*TOHART
C
C           - ADD NH2 OR NH3+ PARAMETERS FOR N-TER
            IF (NNNCCC(KRES).EQ.1 .AND. RNAME.NE.' $PRONH1' .AND.
     *                                  RNAME.NE.' $PRONH2') THEN
               IF(INTERH.EQ.2)THEN
                  NANGL = NANGL + 1
                  KLIST(1,NANGL) = LFFAT + 2
                  KLIST(2,NANGL) = LFFAT + 1
                  KLIST(3,NANGL) = JHPOS + 1
                  ANGL0(NANGL)   = 111.0D+00*TORAD
                  FCANGL(NANGL)  =  50.0D+00*TOHART
                  NANGL = NANGL + 1
                  KLIST(1,NANGL) = JHPOS
                  KLIST(2,NANGL) = LFFAT + 1
                  KLIST(3,NANGL) = JHPOS + 1
                  ANGL0(NANGL)   = 120.0D+00*TORAD
                  FCANGL(NANGL)  =  23.0D+00*TOHART
               END IF
               IF(INTERH.EQ.3)THEN
                  NANGL = NANGL + 1
                  KLIST(1,NANGL) = LFFAT + 2
                  KLIST(2,NANGL) = LFFAT + 1
                  KLIST(3,NANGL) = JHPOS + 1
                  ANGL0(NANGL)   = 109.50D+00 *TORAD
                  FCANGL(NANGL)  = 30.0D+00*TOHART
                  NANGL = NANGL + 1
                  KLIST(1,NANGL) = LFFAT + 2
                  KLIST(2,NANGL) = LFFAT + 1
                  KLIST(3,NANGL) = JHPOS + 2
                  ANGL0(NANGL)   = 109.50D+00 *TORAD
                  FCANGL(NANGL)  = 30.0D+00*TOHART
                  NANGL = NANGL + 1
                  KLIST(1,NANGL) = JHPOS
                  KLIST(2,NANGL) = LFFAT + 1
                  KLIST(3,NANGL) = JHPOS + 2
                  ANGL0(NANGL)   = 109.50D+00 *TORAD
                  FCANGL(NANGL)  = 44.0D+00*TOHART
                  NANGL = NANGL + 1
                  KLIST(1,NANGL) = JHPOS + 1
                  KLIST(2,NANGL) = LFFAT + 1
                  KLIST(3,NANGL) = JHPOS + 2
                  ANGL0(NANGL)   = 109.50D+00 *TORAD
                  FCANGL(NANGL)  = 44.0D+00*TOHART
                  NANGL = NANGL + 1
                  KLIST(1,NANGL) = JHPOS
                  KLIST(2,NANGL) = LFFAT + 1
                  KLIST(3,NANGL) = JHPOS + 1
                  ANGL0(NANGL)   = 109.50D+00*TORAD
                  FCANGL(NANGL)  = 44.0D+00*TOHART
               END IF
            END IF
C        -- ADD SOME C-TER ANGLES
         ELSE IF (NNNCCC(KRES).EQ.9) THEN
            IF(ICTERH.EQ.0.AND.RNAME.NE.' $PROCOO')THEN
               NANGL = NANGL + 1
               KLIST(1,NANGL) = LFFAT + 4
               KLIST(2,NANGL) = LFFAT + 3
               KLIST(3,NANGL) = LFFAT + JATOM
               ANGL0(NANGL)   = 124.0D+00*TORAD
               FCANGL(NANGL)  = 100.0D+00*TOHART
               NANGL = NANGL + 1
               KLIST(1,NANGL) = LFFAT + 2
               KLIST(2,NANGL) = LFFAT + 3
               KLIST(3,NANGL) = LFFAT + JATOM
               ANGL0(NANGL)   = 118.0D+00*TORAD
               FCANGL(NANGL)  =  40.0D+00*TOHART
            END IF
            IF(ICTERH.EQ.1.AND.RNAME.NE.' $PROCOH')THEN
               NANGL = NANGL + 1
               KLIST(1,NANGL) = LFFAT + 4
               KLIST(2,NANGL) = LFFAT + 3
               KLIST(3,NANGL) = LFFAT + JATOM - 1
               ANGL0(NANGL)   = 123.0D+00*TORAD
               FCANGL(NANGL)  =  50.0D+00*TOHART
               NANGL = NANGL + 1
               KLIST(1,NANGL) = LFFAT + 2
               KLIST(2,NANGL) = LFFAT + 3
               KLIST(3,NANGL) = LFFAT + JATOM - 1
               ANGL0(NANGL)   = 110.5D+00*TORAD
               FCANGL(NANGL)  =  55.0D+00*TOHART
               NANGL = NANGL + 1
               KLIST(1,NANGL) = LFFAT + 3
               KLIST(2,NANGL) = LFFAT + JATOM - 1
               KLIST(3,NANGL) = LFFAT + JATOM
               ANGL0(NANGL)   = 115.0D+00*TORAD
               FCANGL(NANGL)  =  55.0D+00*TOHART
            END IF
         END IF
         IF(KRES.EQ.KSS2) THEN
            NANGL = NANGL + 1
            KLIST(1,NANGL) = KSS1  - 1
            KLIST(2,NANGL) = KSS1
            KLIST(3,NANGL) = LFFAT + 6
            ANGL0(NANGL)   = 103.30D+00*TORAD
            FCANGL(NANGL)  = 72.500D+00*TOHART
            NANGL = NANGL + 1
            KLIST(1,NANGL) = LFFAT + 5
            KLIST(2,NANGL) = LFFAT + 6
            KLIST(3,NANGL) = KSS1
            ANGL0(NANGL)   = 103.30D+00*TORAD
            FCANGL(NANGL)  = 72.500D+00*TOHART
         END IF
      END IF
C
C        - ADD DNA/RNA -
      IF(NFFTYP.EQ.20022.AND.INTERH.EQ.-99.AND.ICTERH.EQ.-99)THEN
         IF(NNNCCC(KRES).EQ.1.OR.NNNCCC(KRES).EQ.2)THEN
            IF(NNNCCC(KRES).EQ.1) NADD = 0
            IF(NNNCCC(KRES).EQ.2) NADD = 3
            NANGL = NANGL + 1
            KLIST(1,NANGL) = LFFAT + 5 + NADD
            KLIST(2,NANGL) = LFFAT + 6 + NADD
            KLIST(3,NANGL) = LFFAT + JATOM + 1
            FCANGL(NANGL)  = 20.00D+00*TOHART
            ANGL0(NANGL)   = 120.0D+00*TORAD
            NANGL = NANGL + 1
            KLIST(1,NANGL) = LFFAT + 6 + NADD
            KLIST(2,NANGL) = LFFAT + JATOM + 1
            KLIST(3,NANGL) = LFFAT + JATOM + 2
            FCANGL(NANGL)  = 98.90D+00*TOHART
            ANGL0(NANGL)   = 111.6D+00*TORAD
            NANGL = NANGL + 1
            KLIST(1,NANGL) = LFFAT + 6 + NADD
            KLIST(2,NANGL) = LFFAT + JATOM + 1
            KLIST(3,NANGL) = LFFAT + JATOM + 3
            FCANGL(NANGL)  = 98.90D+00*TOHART
            ANGL0(NANGL)   = 111.6D+00*TORAD
            NANGL = NANGL + 1
            KLIST(1,NANGL) = LFFAT + 6 + NADD
            KLIST(2,NANGL) = LFFAT + JATOM + 1
            KLIST(3,NANGL) = LFFAT + JATOM + 4
            FCANGL(NANGL)  = 80.00D+00*TOHART
            ANGL0(NANGL)   = 104.3D+00*TORAD
         END IF
      END IF
C
      IF(NANGL.GT.MXANGL) THEN
         IF(MASWRK)WRITE(IW,*)'ERROR: TOO MANY ANGLES. INCREASE MXANGL'
         CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBDIHR
      SUBROUTINE RDPDBDIHR(RNAME,RNAME1,LLIST,GAMA,NNN,VROT,MXDIHR,
     *                     MXCMAP,JATOM,LFFAT,KRES,NNNCCC,
     *                     INTERH,ICTERH,JHPOS,JHPOS1,JHAPOS,
     *                     JHAPOS1,KSS1,KSS2,MAPLST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 HEAD
      CHARACTER*8  RNAME,RNAME1
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION LLIST(4,MXDIHR),GAMA(MXDIHR),NNN(MXDIHR),VROT(MXDIHR),
     *          NNNCCC(*),MAPLST(6,MXCMAP)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN DIHEDRAL ROTATION ANGLE INFO FROM LIBRARY  --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE
      CALL RDCARD('RDDIHR  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NDIHR = NDIHR + 1
      LLIST(1,NDIHR) = IFIND('LLIST1  ',IERR) + LFFAT
      LLIST(2,NDIHR) = IFIND('LLIST2  ',IERR) + LFFAT
      LLIST(3,NDIHR) = IFIND('LLIST3  ',IERR) + LFFAT
      LLIST(4,NDIHR) = IFIND('LLIST4  ',IERR) + LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *       'ERROR READING DIHROT ANGLE LIST IN LIBRARY'
         CALL ABRT
      END IF
      IF (NNNCCC(KRES).EQ.1 .AND. RNAME.NE.' $PRONH1' .AND.
     *                            RNAME.NE.' $PRONH2') THEN
         IF(INTERH.EQ.2 .OR. INTERH.EQ.3)THEN
            IF(LLIST(1,NDIHR).GT.JHPOS)
     *         LLIST(1,NDIHR) = LLIST(1,NDIHR) + INTERH - 1
            IF(LLIST(2,NDIHR).GT.JHPOS)
     *         LLIST(2,NDIHR) = LLIST(2,NDIHR) + INTERH - 1
            IF(LLIST(3,NDIHR).GT.JHPOS)
     *         LLIST(3,NDIHR) = LLIST(3,NDIHR) + INTERH - 1
            IF(LLIST(4,NDIHR).GT.JHPOS)
     *         LLIST(4,NDIHR) = LLIST(4,NDIHR) + INTERH - 1
         END IF
      END IF
C
      VROT(NDIHR) = RFIND('VROT    ',IERR)
C     -INPUT KCAL/MOL, CONVERT TO HARTREE
      VROT(NDIHR) = VROT(NDIHR)*TOHART
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING VROT IN LIBRARY'
         CALL ABRT
      END IF
C
      NNN(NDIHR) = IFIND('NNN     ',IERR)
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING NNN IN LIBRARY'
         CALL ABRT
      END IF
C
      GAMA(NDIHR) = RFIND('GAMA   ',IERR)
C     - INPUT DEGREES, CONVERT TO RADIANS
      GAMA(NDIHR) = GAMA(NDIHR)*TORAD
      IF(IERR.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR READING GAMA IN LIBRARY'
         CALL ABRT
      END IF
C
C     -- MODIFY NH2 OR NH3+ PARAMETERS FOR N-TER --
C
      IF (NNNCCC(KRES).EQ.1 .AND. INTERH.EQ.2) THEN
C       1  H-N-CA-C    
         IF((LLIST(1,NDIHR).EQ.JHPOS    .AND.
     *       LLIST(4,NDIHR).EQ.LFFAT + 3     ).OR.
     *      (LLIST(4,NDIHR).EQ.JHPOS    .AND.
     *       LLIST(1,NDIHR).EQ.LFFAT + 3     )) THEN
             GAMA(NDIHR)    = 0.0D+00*TORAD
             NNN(NDIHR)     = 1
             VROT(NDIHR)    = 0.0D+00*TOHART
             IF(RNAME.EQ.' $GLY   ')THEN
                GAMA(NDIHR)    = 0.0D+00*TORAD
                NNN(NDIHR)     = 3
                VROT(NDIHR)    = 0.11D+00*TOHART
             END IF
             IF(RNAME.EQ.' $PRONH1')THEN
                GAMA(NDIHR)    = 0.0D+00*TORAD
                NNN(NDIHR)     = 3
                VROT(NDIHR)    = 0.08D+00*TOHART
             END IF
         END IF
C       2  H-N-CA-CB   
         IF(RNAME.NE.' $GLY   ')THEN
            IF((LLIST(1,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(4,NDIHR).EQ.LFFAT + 5     ).OR.
     *         (LLIST(4,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(1,NDIHR).EQ.LFFAT + 5     )) THEN
                GAMA(NDIHR)    = 0.0D+00*TORAD
                NNN(NDIHR)     = 3
                VROT(NDIHR)    = 0.11D+00*TOHART
                IF(RNAME.EQ.' $PRONH1')THEN
                   GAMA(NDIHR)    = 0.0D+00*TORAD
                   NNN(NDIHR)     = 3
                   VROT(NDIHR)    = 0.08D+00*TOHART
                END IF
            END IF
         ELSE
            IF((LLIST(1,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(4,NDIHR).EQ.JHAPOS + 1     ).OR.
     *         (LLIST(4,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(1,NDIHR).EQ.JHAPOS + 1     )) THEN
                GAMA(NDIHR)    = 0.0D+00*TORAD
                NNN(NDIHR)     = 3
                VROT(NDIHR)    = 0.11D+00*TOHART
            END IF
         END IF
C       3  H-N-CA-HA   
         IF((LLIST(1,NDIHR).EQ.JHPOS    .AND.
     *       LLIST(4,NDIHR).EQ.JHAPOS        ).OR.
     *      (LLIST(4,NDIHR).EQ.JHPOS    .AND.
     *       LLIST(1,NDIHR).EQ.JHAPOS        )) THEN
             GAMA(NDIHR)    = 0.0D+00*TORAD
             NNN(NDIHR)     = 3
             VROT(NDIHR)    = 0.11D+00*TOHART
             IF(RNAME.EQ.' $PRONH1')THEN
                GAMA(NDIHR)    = 0.0D+00*TORAD
                NNN(NDIHR)     = 3
                VROT(NDIHR)    = 0.08D+00*TOHART
             END IF
         END IF
C       4  N-CA-C-O
         IF((LLIST(1,NDIHR).EQ.LFFAT +1    .AND.
     *       LLIST(4,NDIHR).EQ.LFFAT +4        ).OR.
     *      (LLIST(4,NDIHR).EQ.LFFAT +1    .AND.
     *       LLIST(1,NDIHR).EQ.LFFAT +4      )) THEN
             GAMA(NDIHR)    = 180.0D+00*TORAD
             NNN(NDIHR)     = 6
             VROT(NDIHR)    = 0.0D+00*TOHART
         END IF
      END IF
      IF (NNNCCC(KRES).EQ.1 .AND. INTERH.EQ.3) THEN
C       1  H-N-CA-C
         IF(RNAME.NE.' $PRONH2')THEN
            IF((LLIST(1,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(4,NDIHR).EQ.LFFAT + 3     ).OR.
     *         (LLIST(4,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(1,NDIHR).EQ.LFFAT + 3     )) THEN
                GAMA(NDIHR)    = 0.0D+00*TORAD  
                NNN(NDIHR)     = 3
                VROT(NDIHR)    = 0.1D+00*TOHART
            END IF
            IF(RNAME.EQ.' $PRONH2')THEN
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.08D+00*TOHART
            END IF
         END IF
C       2  H-N-CA-CB 
         IF(RNAME.NE.' $GLY   ')THEN
            IF((LLIST(1,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(4,NDIHR).EQ.LFFAT + 5     ).OR.
     *         (LLIST(4,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(1,NDIHR).EQ.LFFAT + 5     )) THEN
                GAMA(NDIHR)    = 0.0D+00*TORAD
                NNN(NDIHR)     = 3
                VROT(NDIHR)    = 0.1D+00*TOHART
                IF(RNAME.EQ.' $PRONH2')THEN
                   GAMA(NDIHR)    = 0.0D+00*TORAD
                   NNN(NDIHR)     = 3
                   VROT(NDIHR)    = 0.08D+00*TOHART
                END IF
            END IF
         ELSE
            IF((LLIST(1,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(4,NDIHR).EQ.JHAPOS + 1     ).OR.
     *         (LLIST(4,NDIHR).EQ.JHPOS    .AND.
     *          LLIST(1,NDIHR).EQ.JHAPOS + 1     )) THEN
                GAMA(NDIHR)    = 0.0D+00*TORAD
                NNN(NDIHR)     = 3
                VROT(NDIHR)    = 0.1D+00*TOHART
            END IF
         END IF
C       3  H-N-CA-HA 
         IF((LLIST(1,NDIHR).EQ.JHPOS    .AND.
     *       LLIST(4,NDIHR).EQ.JHAPOS        ).OR.
     *      (LLIST(4,NDIHR).EQ.JHPOS    .AND.
     *       LLIST(1,NDIHR).EQ.JHAPOS        )) THEN
             GAMA(NDIHR)    = 0.0D+00*TORAD
             NNN(NDIHR)     = 3
             VROT(NDIHR)    = 0.1D+00*TOHART
             IF(RNAME.EQ.' $PRONH2')THEN
                GAMA(NDIHR)    = 0.0D+00*TORAD
                NNN(NDIHR)     = 3
                VROT(NDIHR)    = 0.08D+00*TOHART
             END IF
         END IF
      END IF
C
C     -- MODIFY COO- OR COOH PARAMETERS FOR C-TER --
C
      IF (NNNCCC(KRES).EQ.9 .AND. ICTERH.EQ.0.AND.
     *                            RNAME.NE.' $PROCOO') THEN
C       1  - N-CA-C-O1 -
         IF((LLIST(1,NDIHR).EQ.LFFAT + 1.AND.
     *       LLIST(4,NDIHR).EQ.LFFAT + 4     ).OR.
     *      (LLIST(4,NDIHR).EQ.LFFAT + 1.AND.
     *       LLIST(1,NDIHR).EQ.LFFAT + 4     )) THEN
             GAMA(NDIHR)    = 180.0D+00*TORAD
             NNN(NDIHR)     = 6 
             VROT(NDIHR)    = 0.05D+00*TOHART
         END IF
C       2  - HA-CA-C-O1 -
         IF((LLIST(1,NDIHR).EQ.JHAPOS   .AND.
     *       LLIST(4,NDIHR).EQ.LFFAT + 4     ).OR.
     *      (LLIST(4,NDIHR).EQ.JHAPOS   .AND.
     *       LLIST(1,NDIHR).EQ.LFFAT + 4     )) THEN 
             GAMA(NDIHR)    = 180.0D+00*TORAD
             NNN(NDIHR)     = 6
             VROT(NDIHR)    = 0.05D+00*TOHART
         END IF
         IF(RNAME.EQ.' $GLY   ') THEN
C       3     - HA2-CA-C-O1 -
            IF((LLIST(1,NDIHR).EQ.JHAPOS+ 1.AND.
     *          LLIST(4,NDIHR).EQ.LFFAT + 4     ).OR.
     *         (LLIST(4,NDIHR).EQ.JHAPOS+ 1.AND.
     *          LLIST(1,NDIHR).EQ.LFFAT + 4     )) THEN
                GAMA(NDIHR)    = 180.0D+00*TORAD
                NNN(NDIHR)     = 6
                VROT(NDIHR)    = 0.05D+00*TOHART
            END IF
         ELSE
C       3     - CB-CA-C-O1 -
            IF((LLIST(1,NDIHR).EQ.LFFAT + 5.AND.
     *          LLIST(4,NDIHR).EQ.LFFAT + 4     ).OR.
     *         (LLIST(4,NDIHR).EQ.LFFAT + 5.AND.
     *          LLIST(1,NDIHR).EQ.LFFAT + 4     )) THEN
                GAMA(NDIHR)    = 180.0D+00*TORAD
                NNN(NDIHR)     = 6
                VROT(NDIHR)    = 0.0500D+00*TOHART
            END IF
         END IF
      END IF
C
      IF (NNNCCC(KRES).EQ.9 .AND. ICTERH.EQ.1.AND.
     *                            RNAME.NE.' $PROCOH') THEN
C       1  - N-CA-C-O1 -
         IF((LLIST(1,NDIHR).EQ.LFFAT + 1.AND.
     *       LLIST(4,NDIHR).EQ.LFFAT + 4     ).OR.
     *      (LLIST(4,NDIHR).EQ.LFFAT + 1.AND.
     *       LLIST(1,NDIHR).EQ.LFFAT + 4     )) THEN
             GAMA(NDIHR)    = 180.0D+00*TORAD
             NNN(NDIHR)     = 6
             VROT(NDIHR)    = 0.00D+00*TOHART
         END IF
C       2  - HA-CA-C-O1 -
         IF((LLIST(1,NDIHR).EQ.JHAPOS   .AND.
     *       LLIST(4,NDIHR).EQ.LFFAT + 4     ).OR.
     *      (LLIST(4,NDIHR).EQ.JHAPOS   .AND.
     *       LLIST(1,NDIHR).EQ.LFFAT + 4     )) THEN
             GAMA(NDIHR)    = 180.0D+00*TORAD
             NNN(NDIHR)     = 6
             VROT(NDIHR)    = 0.00D+00*TOHART
         END IF
         IF(RNAME.EQ.' $GLY   ') THEN
C       3     - HA2-CA-C-O1 -
            IF((LLIST(1,NDIHR).EQ.JHAPOS+ 1.AND.
     *          LLIST(4,NDIHR).EQ.LFFAT + 4     ).OR.
     *         (LLIST(4,NDIHR).EQ.JHAPOS+ 1.AND.
     *          LLIST(1,NDIHR).EQ.LFFAT + 4     )) THEN
                GAMA(NDIHR)    = 180.0D+00*TORAD
                NNN(NDIHR)     = 6
                VROT(NDIHR)    = 0.00D+00*TOHART
            END IF
         ELSE
C       3     - CB-CA-C-O1 -
            IF((LLIST(1,NDIHR).EQ.LFFAT + 5.AND.
     *          LLIST(4,NDIHR).EQ.LFFAT + 4     ).OR.
     *         (LLIST(4,NDIHR).EQ.LFFAT + 5.AND.
     *          LLIST(1,NDIHR).EQ.LFFAT + 4     )) THEN
                GAMA(NDIHR)    = 180.0D+00*TORAD
                NNN(NDIHR)     = 6
                VROT(NDIHR)    = 0.0D+00*TOHART
            END IF
         END IF
      END IF
C
      GOTO 100
C
 200  CONTINUE
C
      IF(NFFTYP.EQ.20022.AND.INTERH.GT.-99.AND.ICTERH.GT.-99)THEN
C
C        - ADD 6 DIHEDRAL ANGLES FOR N-TER NH3+
C
         IF(NNNCCC(KRES).EQ.1.AND.INTERH.EQ.3)THEN
            IF(RNAME.NE.' $PRONH2')THEN
C              1  H1-N-CA-C
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHPOS + 1
               LLIST(2,NDIHR) = LFFAT + 1
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = LFFAT + 3
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.1D+00*TOHART
C              2  H1-N-CA-CB
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHPOS + 1
               LLIST(2,NDIHR) = LFFAT + 1
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = LFFAT + 5
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.1D+00*TOHART
C              3  H1-N-CA-HA
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHPOS + 1
               LLIST(2,NDIHR) = LFFAT + 1
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = JHAPOS
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.1D+00*TOHART
C              4  H2-N-CA-C
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHPOS + 2
               LLIST(2,NDIHR) = LFFAT + 1
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = LFFAT + 3
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.1D+00*TOHART
C              5  H2-N-CA-CB
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHPOS + 2
               LLIST(2,NDIHR) = LFFAT + 1
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = LFFAT + 5
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.1D+00*TOHART
C              6  H2-N-CA-HA
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHPOS + 2
               LLIST(2,NDIHR) = LFFAT + 1
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = JHAPOS
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.1D+00*TOHART
            END IF
         END IF
C
C        - ADD 3 DIHEDRAL ANGLES FOR N-TER NH2
C
         IF(NNNCCC(KRES).EQ.1.AND.INTERH.EQ.2)THEN
            IF(RNAME.NE.' $PRONH1')THEN
C              1  H1-N-CA-C
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHPOS + 1
               LLIST(2,NDIHR) = LFFAT + 1
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = LFFAT + 3
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.11D+00*TOHART
C              2  H1-N-CA-CB   
               IF(RNAME.NE.' $GLY   ')THEN
                  NDIHR = NDIHR + 1
                  LLIST(1,NDIHR) = JHPOS + 1
                  LLIST(2,NDIHR) = LFFAT + 1
                  LLIST(3,NDIHR) = LFFAT + 2
                  LLIST(4,NDIHR) = LFFAT + 5
                  GAMA(NDIHR)    = 0.0D+00*TORAD
                  NNN(NDIHR)     = 3
                  VROT(NDIHR)    = 0.11D+00*TOHART
               ELSE
                  NDIHR = NDIHR + 1
                  LLIST(1,NDIHR) = JHPOS + 1
                  LLIST(2,NDIHR) = LFFAT + 1
                  LLIST(3,NDIHR) = LFFAT + 2
                  LLIST(4,NDIHR) = JHAPOS + 1
                  GAMA(NDIHR)    = 0.0D+00*TORAD
                  NNN(NDIHR)     = 3
                  VROT(NDIHR)    = 0.11D+00*TOHART
               END IF
C           3  H1-N-CA-HA   
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHPOS + 1
               LLIST(2,NDIHR) = LFFAT + 1
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = JHAPOS
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.11D+00*TOHART
            END IF
         END IF
C
C        - ADD 10 PEPTIDE DIHROT -
C
         IF(NNNCCC(KRES).EQ.1 .OR. NNNCCC(KRES).EQ.2)THEN
C          1  N-CA-C-N
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + JATOM + 1
            LLIST(2,NDIHR) = LFFAT + 3
            LLIST(3,NDIHR) = LFFAT + 2
            LLIST(4,NDIHR) = LFFAT + 1
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 1
            VROT(NDIHR)    = 0.6D+00*TOHART
            IF(INTERH.EQ.2) VROT(NDIHR) = 0.0D+00*TOHART
            IF(RNAME.EQ.' $GLY   '.AND.INTERH.EQ.3)
     *                      VROT(NDIHR) = 0.4D+00*TOHART
            IF(RNAME.EQ.' $GLY   '.AND.INTERH.EQ.2) THEN
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 6
               VROT(NDIHR)    = 0.0D+00*TOHART
            END IF               
            IF(RNAME.EQ.' $PRO   '.OR.RNAME.EQ.' $PRONH1'.OR.
     *         RNAME.EQ.' $PRONH2') THEN
               NNN(NDIHR)     = 1
               VROT(NDIHR) = 0.3D+00*TOHART
            END IF
            IF(RNAME.EQ.' $PRO   ')THEN
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + JATOM + 1
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = LFFAT + 1
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 4
               VROT(NDIHR)    =-0.3D+00*TOHART
            END IF
            IF(RNAME(1:5).EQ.' $PRO')THEN
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + JATOM + 1
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = LFFAT + 1
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 6
               VROT(NDIHR)    = 0.0D+00*TOHART
            END IF
C
C           -- FILL IN MAPLST --
            IF(NNNCCC(KRES).NE.1)THEN
               MAPLST(5,NCMAP) = LLIST(1,NDIHR)
            END IF
C          2  HA-CA-C-N
            NDIHR = NDIHR + 1 
            LLIST(1,NDIHR) = LFFAT + JATOM + 1
            LLIST(2,NDIHR) = LFFAT + 3
            LLIST(3,NDIHR) = LFFAT + 2
            LLIST(4,NDIHR) = JHAPOS
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 1
            VROT(NDIHR)    = 0.0D+00*TOHART
            IF(RNAME.EQ.' $PRO   '.OR.RNAME.EQ.' $PRONH2'.OR.
     *         RNAME.EQ.' $PRONH1')THEN
               NNN(NDIHR)     = 2
               VROT(NDIHR)    = 0.6D+00*TOHART             
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + JATOM + 1
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = JHAPOS
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 1
               VROT(NDIHR)    = 0.4D+00*TOHART
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + JATOM + 1
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = JHAPOS
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 6
               VROT(NDIHR)    = 0.0D+00*TOHART
            END IF
C          3  CB-CA-C-N
            IF(RNAME.NE.' $GLY   ')THEN
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + JATOM + 1
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = LFFAT + 5
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 1
               VROT(NDIHR)    = 0.0D+00*TOHART
               IF(RNAME.EQ.' $PRO   '.OR.RNAME.EQ.' $PRONH2'.OR.
     *            RNAME.EQ.' $PRONH1')THEN
                  NNN(NDIHR)     = 2
                  VROT(NDIHR)    = 0.6D+00*TOHART
                  NDIHR = NDIHR + 1
                  LLIST(1,NDIHR) = LFFAT + JATOM + 1
                  LLIST(2,NDIHR) = LFFAT + 3
                  LLIST(3,NDIHR) = LFFAT + 2
                  LLIST(4,NDIHR) = LFFAT + 5
                  GAMA(NDIHR)    = 180.0D+00*TORAD
                  NNN(NDIHR)     = 1
                  VROT(NDIHR)    = 0.4D+00*TOHART
                  NDIHR = NDIHR + 1
                  LLIST(1,NDIHR) = LFFAT + JATOM + 1
                  LLIST(2,NDIHR) = LFFAT + 3
                  LLIST(3,NDIHR) = LFFAT + 2
                  LLIST(4,NDIHR) = LFFAT + 5
                  GAMA(NDIHR)    = 180.0D+00*TORAD
                  NNN(NDIHR)     = 6
                  VROT(NDIHR)    = 0.0D+00*TOHART
               END IF
            ELSE
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + JATOM + 1
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + 2
               LLIST(4,NDIHR) = JHAPOS + 1
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 1
               VROT(NDIHR)    = 0.0D+00*TOHART
            END IF
C          4  CA-C-N-CA
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 2
            LLIST(2,NDIHR) = LFFAT + 3
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = LFFAT + JATOM + 2
            GAMA(NDIHR)    = 180.00D+00*TORAD
            NNN(NDIHR)     = 2
            VROT(NDIHR)    = 2.5D+00*TOHART
            IF(RNAME1.EQ.' $PRO   ')THEN
               VROT(NDIHR)    =2.75D+00*TOHART
            END IF
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 2
            LLIST(2,NDIHR) = LFFAT + 3
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = LFFAT + JATOM + 2
            GAMA(NDIHR)    = 0.00D+00*TORAD
            NNN(NDIHR)     = 1
            VROT(NDIHR)    = 1.6D+00*TOHART
            IF(RNAME1.EQ.' $PRO   ')THEN
               NNN(NDIHR)     = 4
               VROT(NDIHR)    =0.30D+00*TOHART
            END IF
C          5  CA-C-N-H  (FOR PROLINE, IT IS CA-C-N-CD)
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 2
            LLIST(2,NDIHR) = LFFAT + 3
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = JHPOS1
            GAMA(NDIHR)    = 180.00D+00*TORAD
            NNN(NDIHR)     = 2
            VROT(NDIHR)    = 2.5D+00*TOHART
            IF(JHPOS1.EQ.0) THEN
               LLIST(4,NDIHR) = LFFAT + JATOM + 7
               GAMA(NDIHR)    = 180.00D+00*TORAD
               NNN(NDIHR)     = 2
               VROT(NDIHR)    = 2.75D+00*TOHART
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 2
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + JATOM + 1
               LLIST(4,NDIHR) = LFFAT + JATOM + 7
               GAMA(NDIHR)    = 0.00D+00*TORAD
               NNN(NDIHR)     = 4
               VROT(NDIHR)    = 0.30D+00*TOHART
            END IF
C          6  C-N-CA-C
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 3
            LLIST(2,NDIHR) = LFFAT + JATOM + 1
            LLIST(3,NDIHR) = LFFAT + JATOM + 2
            LLIST(4,NDIHR) = LFFAT + JATOM + 3
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NNN(NDIHR)     = 1
            VROT(NDIHR)    = 0.2D+00*TOHART
            IF(RNAME1.EQ.' $PRO   ')THEN
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.8D+00*TOHART
            END IF
C           -- FILL IN MAPLST --
            IF(NNNCCC(KRES+1).NE.9)THEN
            NCMAP = NCMAP + 1
            MAPLST(1,NCMAP) = LLIST(1,NDIHR)
            MAPLST(2,NCMAP) = LLIST(2,NDIHR)
            MAPLST(3,NCMAP) = LLIST(3,NDIHR)
            MAPLST(4,NCMAP) = LLIST(4,NDIHR)
            MAPLST(6,NCMAP) = 1 
            IF(RNAME(3:5).EQ.'ALA'.AND.RNAME1(3:5).EQ.'PRO')
     *         MAPLST(6,NCMAP) = 2
            IF(RNAME(3:5).EQ.'GLY'.AND.RNAME1(3:5).EQ.'GLY')
     *         MAPLST(6,NCMAP) = 3
            IF(RNAME(3:5).EQ.'GLY'.AND.RNAME1(3:5).EQ.'PRO')
     *         MAPLST(6,NCMAP) = 3
            IF(RNAME(3:5).EQ.'PRO'.AND.RNAME1(3:5).EQ.'ALA')
     *         MAPLST(6,NCMAP) = 4
            IF(RNAME(3:5).EQ.'PRO'.AND.RNAME1(3:5).EQ.'PRO')
     *         MAPLST(6,NCMAP) = 5
            END IF
C
C          7  C-N-CA-HA
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 3
            LLIST(2,NDIHR) = LFFAT + JATOM + 1
            LLIST(3,NDIHR) = LFFAT + JATOM + 2
            LLIST(4,NDIHR) = JHAPOS1
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 1
            VROT(NDIHR)    = 0.0D+00*TOHART
            IF(RNAME1.EQ.' $PRO   ')THEN
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.8D+00*TOHART
            END IF
            IF(RNAME1.EQ.' $PRO   ')THEN
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 3
               LLIST(2,NDIHR) = LFFAT + JATOM + 1
               LLIST(3,NDIHR) = LFFAT + JATOM + 7
               LLIST(4,NDIHR) = LFFAT + JATOM + 6
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.0D+00*TOHART
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 3
               LLIST(2,NDIHR) = LFFAT + JATOM + 1
               LLIST(3,NDIHR) = LFFAT + JATOM + 7
               LLIST(4,NDIHR) = LFFAT + JATOM + 13 
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.0D+00*TOHART
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 3
               LLIST(2,NDIHR) = LFFAT + JATOM + 1
               LLIST(3,NDIHR) = LFFAT + JATOM + 7
               LLIST(4,NDIHR) = LFFAT + JATOM + 14
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 3
               VROT(NDIHR)    = 0.0D+00*TOHART
            END IF
C          8  C-N-CA-CB
            IF(RNAME1.NE.' $GLY   ')THEN
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 3
               LLIST(2,NDIHR) = LFFAT + JATOM + 1
               LLIST(3,NDIHR) = LFFAT + JATOM + 2
               LLIST(4,NDIHR) = LFFAT + JATOM + 5
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 1
               VROT(NDIHR)    = 1.8D+00*TOHART
               IF(RNAME1.EQ.' $PRO   ')THEN
                  GAMA(NDIHR)    = 0.0D+00*TORAD
                  NNN(NDIHR)     = 3
                  VROT(NDIHR)    = 0.8D+00*TOHART
               END IF
            ELSE
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 3
               LLIST(2,NDIHR) = LFFAT + JATOM + 1
               LLIST(3,NDIHR) = LFFAT + JATOM + 2
               LLIST(4,NDIHR) = JHAPOS + 1
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 1
               VROT(NDIHR)    = 0.0D+00*TOHART
            END IF
C          9  O-C-N-H  (FOR PROLINE, IT IS O-C-N-CD)
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 4
            LLIST(2,NDIHR) = LFFAT + 3
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = JHPOS1
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NNN(NDIHR)     = 2
            VROT(NDIHR)    = 2.5D+00*TOHART
            IF(JHPOS1.EQ.0) THEN
               LLIST(4,NDIHR) = LFFAT + JATOM + 7
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 2
               VROT(NDIHR)    = 2.75D+00*TOHART
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 4
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + JATOM + 1
               LLIST(4,NDIHR) = LFFAT + JATOM + 7
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 4
               VROT(NDIHR)    = 0.30D+00*TOHART
            END IF
C         10  O-C-N-CA
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 4
            LLIST(2,NDIHR) = LFFAT + 3
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = LFFAT + JATOM + 2
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NNN(NDIHR)     = 2
            VROT(NDIHR)    = 2.5D+00*TOHART
            IF(RNAME1.EQ.' $PRO   ')THEN
               VROT(NDIHR)    = 2.75D+00*TOHART
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 4
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + JATOM + 1
               LLIST(4,NDIHR) = LFFAT + JATOM + 2
               GAMA(NDIHR)    = 0.0D+00*TORAD
               NNN(NDIHR)     = 4
               VROT(NDIHR)    = 0.3D+00*TOHART
            END IF
         END IF
C
C        - ADD NEW C-TER DIHROT DUE TO THE ADDITION OF OXT AND HXT - 
C
         IF(NNNCCC(KRES).EQ.9)THEN
            IF(ICTERH.EQ.0.AND.RNAME.NE.' $PROCOO') THEN
C          1  - N-CA-C-O2 -
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 1
               LLIST(2,NDIHR) = LFFAT + 2
               LLIST(3,NDIHR) = LFFAT + 3
               LLIST(4,NDIHR) = LFFAT + JATOM
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 6
               VROT(NDIHR)    = 0.05D+00*TOHART
C          2  - HA-CA-C-O2 -
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHAPOS
               LLIST(2,NDIHR) = LFFAT + 2
               LLIST(3,NDIHR) = LFFAT + 3
               LLIST(4,NDIHR) = LFFAT + JATOM
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 6
               VROT(NDIHR)    = 0.05D+00*TOHART
               IF(RNAME.EQ.' $GLY   ') THEN
C          3     - HA2-CA-C-O2 -
                  NDIHR = NDIHR + 1
                  LLIST(1,NDIHR) = JHAPOS+1
                  LLIST(2,NDIHR) = LFFAT + 2
                  LLIST(3,NDIHR) = LFFAT + 3
                  LLIST(4,NDIHR) = LFFAT + JATOM
                  GAMA(NDIHR)    = 180.0D+00*TORAD
                  NNN(NDIHR)     = 6
                  VROT(NDIHR)    = 0.0500D+00*TOHART
               ELSE
C          3     - CB-CA-C-O2 -
                  NDIHR = NDIHR + 1
                  LLIST(1,NDIHR) = LFFAT + 5
                  LLIST(2,NDIHR) = LFFAT + 2
                  LLIST(3,NDIHR) = LFFAT + 3
                  LLIST(4,NDIHR) = LFFAT + JATOM
                  GAMA(NDIHR)    = 180.0D+00*TORAD
                  NNN(NDIHR)     = 6
                  VROT(NDIHR)    = 0.0500D+00*TOHART
               END IF
            END IF
            IF(ICTERH.EQ.1.AND.RNAME.NE.' $PROCOH') THEN
C          1  - N-CA-C-O2 -
               NDIHR = NDIHR + 1 
               LLIST(1,NDIHR) = LFFAT + 1
               LLIST(2,NDIHR) = LFFAT + 2
               LLIST(3,NDIHR) = LFFAT + 3
               LLIST(4,NDIHR) = LFFAT + JATOM - 1
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 6
               VROT(NDIHR)    = 0.00D+00*TOHART
C          2  - HA-CA-C-O2 -
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = JHAPOS
               LLIST(2,NDIHR) = LFFAT + 2
               LLIST(3,NDIHR) = LFFAT + 3
               LLIST(4,NDIHR) = LFFAT + JATOM - 1
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 6
               VROT(NDIHR)    = 0.00D+00*TOHART
               IF(RNAME.EQ.' $GLY   ') THEN
C          3     - HA2-CA-C-O2 -
                  NDIHR = NDIHR + 1
                  LLIST(1,NDIHR) = JHAPOS+1
                  LLIST(2,NDIHR) = LFFAT + 2
                  LLIST(3,NDIHR) = LFFAT + 3
                  LLIST(4,NDIHR) = LFFAT + JATOM - 1
                  GAMA(NDIHR)    = 180.0D+00*TORAD
                  NNN(NDIHR)     = 6
                  VROT(NDIHR)    = 0.0000D+00*TOHART
               ELSE
C          3     - CB-CA-C-O2 -
                  NDIHR = NDIHR + 1
                  LLIST(1,NDIHR) = LFFAT + 5
                  LLIST(2,NDIHR) = LFFAT + 2
                  LLIST(3,NDIHR) = LFFAT + 3
                  LLIST(4,NDIHR) = LFFAT + JATOM - 1
                  GAMA(NDIHR)    = 180.0D+00*TORAD
                  NNN(NDIHR)     = 6
                  VROT(NDIHR)    = 0.000D+00*TOHART
               END IF
C          4   - H-O2-C-CA -
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + JATOM
               LLIST(2,NDIHR) = LFFAT + JATOM - 1
               LLIST(3,NDIHR) = LFFAT + 3
               LLIST(4,NDIHR) = LFFAT + 2
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 2
               VROT(NDIHR)    = 2.05D+00*TOHART
C          5   - O1-C-O2-H -
               NDIHR = NDIHR + 1
               LLIST(1,NDIHR) = LFFAT + 4
               LLIST(2,NDIHR) = LFFAT + 3
               LLIST(3,NDIHR) = LFFAT + JATOM - 1
               LLIST(4,NDIHR) = LFFAT + JATOM
               GAMA(NDIHR)    = 180.0D+00*TORAD
               NNN(NDIHR)     = 2
               VROT(NDIHR)    = 2.0500D+00*TOHART
            END IF
         END IF
C
C        - ADD SOME S-S DIHROT -
C
         IF(KRES.EQ.KSS2) THEN
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = KSS1  - 1
            LLIST(2,NDIHR) = KSS1
            LLIST(3,NDIHR) = LFFAT + 6
            LLIST(4,NDIHR) = LFFAT + 5
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 2
            VROT(NDIHR)    = 1.0D+00*TOHART
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = KSS1  - 1
            LLIST(2,NDIHR) = KSS1
            LLIST(3,NDIHR) = LFFAT + 6
            LLIST(4,NDIHR) = LFFAT + 5
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 2
            VROT(NDIHR)    = 4.1D+00*TOHART
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = KSS1  - 1
            LLIST(2,NDIHR) = KSS1
            LLIST(3,NDIHR) = LFFAT + 6
            LLIST(4,NDIHR) = LFFAT + 5
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 3
            VROT(NDIHR)    = 0.9D+00*TOHART
C
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = KSS1
            LLIST(2,NDIHR) = LFFAT + 6
            LLIST(3,NDIHR) = LFFAT + 5
            LLIST(4,NDIHR) = LFFAT + 2
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 3
            VROT(NDIHR)    = 0.31D+00*TOHART
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = KSS1
            LLIST(2,NDIHR) = LFFAT + 6
            LLIST(3,NDIHR) = LFFAT + 5
            LLIST(4,NDIHR) = LFFAT + 9
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 3
            VROT(NDIHR)    = 0.158D+00*TOHART
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = KSS1
            LLIST(2,NDIHR) = LFFAT + 6
            LLIST(3,NDIHR) = LFFAT + 5
            LLIST(4,NDIHR) = LFFAT +10
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 3
            VROT(NDIHR)    = 0.158D+00*TOHART
C
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 6
            LLIST(2,NDIHR) = KSS1
            LLIST(3,NDIHR) = KSS1  - 1
            LLIST(4,NDIHR) = KSS1  - 4
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 3
            VROT(NDIHR)    = 0.31D+00*TOHART
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 6
            LLIST(2,NDIHR) = KSS1
            LLIST(3,NDIHR) = KSS1  - 1
            LLIST(4,NDIHR) = KSS1  + 3
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 3
            VROT(NDIHR)    = 0.158D+00*TOHART
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 6
            LLIST(2,NDIHR) = KSS1
            LLIST(3,NDIHR) = KSS1  - 1
            LLIST(4,NDIHR) = KSS1  + 4
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NNN(NDIHR)     = 3
            VROT(NDIHR)    = 0.158D+00*TOHART
         END IF
      END IF
C
C        - ADD DNA/RNA -
      IF(NFFTYP.EQ.20022.AND.INTERH.EQ.-99.AND.ICTERH.EQ.-99)THEN
         IF(NNNCCC(KRES).EQ.1.OR.NNNCCC(KRES).EQ.2)THEN
            IF(NNNCCC(KRES).EQ.1) NADD = 0
            IF(NNNCCC(KRES).EQ.2) NADD = 3
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 3 + NADD
            LLIST(2,NDIHR) = LFFAT + 5 + NADD
            LLIST(3,NDIHR) = LFFAT + 6 + NADD
            LLIST(4,NDIHR) = LFFAT + JATOM + 1
            VROT(NDIHR)    = 0.6D+00*TOHART
            NNN(NDIHR)     = 5
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 3 + NADD
            LLIST(2,NDIHR) = LFFAT + 5 + NADD
            LLIST(3,NDIHR) = LFFAT + 6 + NADD
            LLIST(4,NDIHR) = LFFAT + JATOM + 1
            VROT(NDIHR)    = 0.2D+00*TOHART
            NNN(NDIHR)     = 4
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 3 + NADD
            LLIST(2,NDIHR) = LFFAT + 5 + NADD
            LLIST(3,NDIHR) = LFFAT + 6 + NADD
            LLIST(4,NDIHR) = LFFAT + JATOM + 1
            VROT(NDIHR)    = 0.0D+00*TOHART
            NNN(NDIHR)     = 3
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 3 + NADD
            LLIST(2,NDIHR) = LFFAT + 5 + NADD
            LLIST(3,NDIHR) = LFFAT + 6 + NADD
            LLIST(4,NDIHR) = LFFAT + JATOM + 1
            VROT(NDIHR)    = 0.4D+00*TOHART
            NNN(NDIHR)     = 2
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 3 + NADD
            LLIST(2,NDIHR) = LFFAT + 5 + NADD
            LLIST(3,NDIHR) = LFFAT + 6 + NADD
            LLIST(4,NDIHR) = LFFAT + JATOM + 1
            VROT(NDIHR)    = 1.9D+00*TOHART
            NNN(NDIHR)     = 1
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 7 + NADD
            LLIST(2,NDIHR) = LFFAT + 5 + NADD
            LLIST(3,NDIHR) = LFFAT + 6 + NADD
            LLIST(4,NDIHR) = LFFAT + JATOM + 1
            VROT(NDIHR)    = 2.5D+00*TOHART
            NNN(NDIHR)     = 1
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NDIHR = NDIHR + 1
            KHNUM = 0
            IF(RNAME.EQ.' $DA5OH ') KHNUM = 22
            IF(RNAME.EQ.' $RA5OH ') KHNUM = 23
            IF(RNAME.EQ.' $DC5OH ') KHNUM = 20
            IF(RNAME.EQ.' $RC5OH ') KHNUM = 21
            IF(RNAME.EQ.' $DG5OH ') KHNUM = 23
            IF(RNAME.EQ.' $RG5OH ') KHNUM = 24
            IF(RNAME.EQ.' $DT5OH ') KHNUM = 21
            IF(RNAME.EQ.' $RT5OH ') KHNUM = 22
            IF(RNAME.EQ.' $RU5OH ') KHNUM = 21
            IF(RNAME.EQ.' $DNAADE') KHNUM = 25
            IF(RNAME.EQ.' $RNAADE') KHNUM = 26
            IF(RNAME.EQ.' $DNACYT') KHNUM = 23
            IF(RNAME.EQ.' $RNACYT') KHNUM = 24
            IF(RNAME.EQ.' $DNAGUA') KHNUM = 26
            IF(RNAME.EQ.' $RNAGUA') KHNUM = 27
            IF(RNAME.EQ.' $DNATHY') KHNUM = 24
            IF(RNAME.EQ.' $RNATHY') KHNUM = 25
            IF(RNAME.EQ.' $RNAURA') KHNUM = 24
            LLIST(1,NDIHR) = LFFAT + KHNUM    !  H5' ATOM
            LLIST(2,NDIHR) = LFFAT + 5 + NADD
            LLIST(3,NDIHR) = LFFAT + 6 + NADD
            LLIST(4,NDIHR) = LFFAT + JATOM + 1
            VROT(NDIHR)    = 0.0D+00*TOHART
            NNN(NDIHR)     = 3
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 5 + NADD
            LLIST(2,NDIHR) = LFFAT + 6 + NADD
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = LFFAT + JATOM + 2
            VROT(NDIHR)    = 0.1D+00*TOHART
            NNN(NDIHR)     = 3
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 5 + NADD
            LLIST(2,NDIHR) = LFFAT + 6 + NADD
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = LFFAT + JATOM + 3
            VROT(NDIHR)    = 0.1D+00*TOHART
            NNN(NDIHR)     = 3
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 5 + NADD
            LLIST(2,NDIHR) = LFFAT + 6 + NADD
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = LFFAT + JATOM + 4
            VROT(NDIHR)    = 1.2D+00*TOHART
            NNN(NDIHR)     = 1
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 5 + NADD
            LLIST(2,NDIHR) = LFFAT + 6 + NADD
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = LFFAT + JATOM + 4
            VROT(NDIHR)    = 0.1D+00*TOHART
            NNN(NDIHR)     = 2
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 5 + NADD
            LLIST(2,NDIHR) = LFFAT + 6 + NADD
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = LFFAT + JATOM + 4
            VROT(NDIHR)    = 0.1D+00*TOHART
            NNN(NDIHR)     = 3
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 5 + NADD
            LLIST(2,NDIHR) = LFFAT + 6 + NADD
            LLIST(3,NDIHR) = LFFAT + JATOM + 1
            LLIST(4,NDIHR) = LFFAT + JATOM + 4
            VROT(NDIHR)    = 0.0D+00*TOHART
            NNN(NDIHR)     = 6
            GAMA(NDIHR)    = 0.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 6 + NADD
            LLIST(2,NDIHR) = LFFAT + JATOM + 1
            LLIST(3,NDIHR) = LFFAT + JATOM + 4
            LLIST(4,NDIHR) = LFFAT + JATOM + 5
            VROT(NDIHR)    = 1.2D+00*TOHART
            NNN(NDIHR)     = 1
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 6 + NADD
            LLIST(2,NDIHR) = LFFAT + JATOM + 1
            LLIST(3,NDIHR) = LFFAT + JATOM + 4
            LLIST(4,NDIHR) = LFFAT + JATOM + 5
            VROT(NDIHR)    = 0.1D+00*TOHART
            NNN(NDIHR)     = 2
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 6 + NADD
            LLIST(2,NDIHR) = LFFAT + JATOM + 1
            LLIST(3,NDIHR) = LFFAT + JATOM + 4
            LLIST(4,NDIHR) = LFFAT + JATOM + 5
            VROT(NDIHR)    = 0.1D+00*TOHART
            NNN(NDIHR)     = 3
            GAMA(NDIHR)    = 180.0D+00*TORAD
            NDIHR = NDIHR + 1
            LLIST(1,NDIHR) = LFFAT + 6 + NADD
            LLIST(2,NDIHR) = LFFAT + JATOM + 1
            LLIST(3,NDIHR) = LFFAT + JATOM + 4
            LLIST(4,NDIHR) = LFFAT + JATOM + 5
            VROT(NDIHR)    = 0.0D+00*TOHART
            NNN(NDIHR)     = 6
            GAMA(NDIHR)    = 0.0D+00*TORAD
         END IF
      END IF
C
      IF(NDIHR.GT.MXDIHR) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: TOO MANY DIHROT ANGLES. INCREASE MXDIHR'
         CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBDIHB
      SUBROUTINE RDPDBDIHB(NLIST,DIHB0,FCDIHB,MXDIHB,
     *                     LFFAT,KRES,NNNCCC,JATOM,JHPOS,JHPOS1,
     *                     INTERH,ICTERH)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 HEAD
C
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
C
      DIMENSION NLIST(4,MXDIHB),DIHB0(MXDIHB),FCDIHB(MXDIHB),NNNCCC(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
C     -- READ IN DIHEDRAL BENDING ANGLE INFO FROM LIBRARY --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE 
      CALL RDCARD('RDDIHB  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF   
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR) 
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NDIHB = NDIHB + 1
      NLIST(1,NDIHB) = IFIND('NLIST1  ',IERR) + LFFAT
      NLIST(2,NDIHB) = IFIND('NLIST2  ',IERR) + LFFAT
      NLIST(3,NDIHB) = IFIND('NLIST3  ',IERR) + LFFAT
      NLIST(4,NDIHB) = IFIND('NLIST4  ',IERR) + LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *       'ERROR READING DIHBND ANGLES IN LIBRARY'
         CALL ABRT
      END IF
      IF(NNNCCC(KRES).EQ.1)THEN
         IF(INTERH.EQ.2 .OR. INTERH.EQ.3)THEN
            IF(NLIST(1,NDIHB).GT.JHPOS)
     *         NLIST(1,NDIHB) = NLIST(1,NDIHB) + INTERH - 1
            IF(NLIST(2,NDIHB).GT.JHPOS)
     *         NLIST(2,NDIHB) = NLIST(2,NDIHB) + INTERH - 1
            IF(NLIST(3,NDIHB).GT.JHPOS)
     *         NLIST(3,NDIHB) = NLIST(3,NDIHB) + INTERH - 1
            IF(NLIST(4,NDIHB).GT.JHPOS)
     *         NLIST(4,NDIHB) = NLIST(4,NDIHB) + INTERH - 1
         END IF
      END IF
      FCDIHB(NDIHB) = RFIND('FDIHBG  ',IERR)*TOHART
      DIHB0(NDIHB) = RFIND('DIHB0   ',IERR)
      IF(DIHB0(NDIHB).NE.  0.0D+00 .AND.
     *   DIHB0(NDIHB).NE.180.0D+00) THEN
         IF(MASWRK)WRITE(IW,*) 'ERROR: DIHB0=', DIHB0(NDIHB)
         IF(MASWRK)WRITE(IW,*) 'DIHB0 MUST BE 0.0 OR 180.0 DEGREES'
         CALL ABRT
      END IF
      DIHB0(NDIHB) = DIHB0(NDIHB)*TORAD
C
      GOTO 100
C
 200  CONTINUE
C
      IF(NFFTYP.EQ.20022.AND.INTERH.GT.-99.AND.ICTERH.GT.-99)THEN
         IF(NNNCCC(KRES).EQ.2 .OR. NNNCCC(KRES).EQ.1) THEN
C       :   - O-N-CA-C -
            NDIHB = NDIHB + 1
            NLIST(1,NDIHB) = LFFAT + 4
            NLIST(2,NDIHB) = LFFAT + JATOM + 1
            NLIST(3,NDIHB) = LFFAT + 2
            NLIST(4,NDIHB) = LFFAT + 3
            DIHB0 (NDIHB)  =   0.0D+00*TORAD
            FCDIHB(NDIHB)  = 120.0D+00*TOHART
C       :   - N-C-CA-H -   (FOR PROLINE, IT IS N-C-CA-CD)
            NDIHB = NDIHB + 1
            NLIST(1,NDIHB) = LFFAT + JATOM + 1
            NLIST(2,NDIHB) = LFFAT + 3
            NLIST(3,NDIHB) = LFFAT + JATOM + 2
            NLIST(4,NDIHB) = JHPOS1
            DIHB0 (NDIHB)  =  0.0D+00*TORAD
            FCDIHB(NDIHB)  = 20.0D+00*TOHART
            IF(JHPOS1.EQ.0)THEN
               NLIST(4,NDIHB) =  LFFAT + JATOM + 7
               DIHB0 (NDIHB)  =  0.0D+00*TORAD
               FCDIHB(NDIHB)  =  0.0D+00*TOHART
            END IF
         END IF
         IF(NNNCCC(KRES).EQ.9) THEN
            IF(ICTERH.EQ.0) THEN
               NDIHB = NDIHB + 1
               NLIST(1,NDIHB) = LFFAT + 3
               NLIST(2,NDIHB) = LFFAT + 2
               NLIST(3,NDIHB) = LFFAT + JATOM
               NLIST(4,NDIHB) = LFFAT + 4
               DIHB0 (NDIHB)  =   0.0D+00*TORAD
               FCDIHB(NDIHB)  =  96.0D+00*TOHART
            ELSE IF(ICTERH.EQ.1) THEN
               NDIHB = NDIHB + 1
               NLIST(1,NDIHB) = LFFAT + 3
               NLIST(2,NDIHB) = LFFAT + 2
               NLIST(3,NDIHB) = LFFAT + JATOM - 1
               NLIST(4,NDIHB) = LFFAT + 4
               DIHB0 (NDIHB)  =   0.0D+00*TORAD
               FCDIHB(NDIHB)  = 100.0D+00*TOHART
            END IF
         END IF
      END IF
C
      IF(NDIHB.GT.MXDIHB) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: TOO MANY DIHBND ANGLES. INCREASE MXDIHB'
         CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK RDPDBWAGG
      SUBROUTINE RDPDBWAGG(FCWAGG,MLIST,MXWAGG,LFFAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00,TOHART=1.0D+00/TOKCAL)
C
      DIMENSION MLIST(4,MXWAGG),FCWAGG(MXWAGG)
C
      CHARACTER*10 HEAD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     -- READ IN WAGGING ANGLE INFO FROM $FFPDB --
C
      IERR   = 0
      IEOF   = 0
  100 CONTINUE
      CALL RDCARD('RDWAGG  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF
      HEAD='          '
      LGSTR=-10
      CALL GSTRNG(HEAD,LGSTR)
      IF(HEAD.EQ.'STOP      ') GOTO 200
      NWAGG = NWAGG + 1
      MLIST(1,NWAGG) = IFIND('MLIST1  ',IERR) + LFFAT
      MLIST(2,NWAGG) = IFIND('MLIST2  ',IERR) + LFFAT
      MLIST(3,NWAGG) = IFIND('MLIST3  ',IERR) + LFFAT
      MLIST(4,NWAGG) = IFIND('MLIST3  ',IERR) + LFFAT
      IF(IERR.NE.0) THEN
         IF(MASWRK)WRITE(IW,*)
     *   'ERROR READING WAGGING IN LIBRARY'
         CALL ABRT
      END IF
      FCWAGG(NWAGG) = RFIND('FCWAGG  ',IERR)
C     -INPUT KCAL/(MOL*RAD*RAD), CONVERT TO HARTREE/(RAD*RAD)
      FCWAGG(NWAGG) = FCWAGG(NWAGG)*TOHART
C
      GOTO 100
C
 200  CONTINUE
C
      IF(NWAGG.GT.MXWAGG) THEN
        IF(MASWRK)WRITE(IW,*)
     *  'ERROR: TOO MANY WAGGING ANGLES. INCREASE MXWAGG'
        CALL ABRT
      END IF
C
      RETURN
C
      END
C*MODULE QUANPO  *DECK ADDPBCWAT
      SUBROUTINE ADDPBCWAT(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                     SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                     IPAIR,FCBOND,BOND0,
     *                     KLIST,FCANGL,ANGL0,L1213J,
     *                     MXFFAT,MXBOND,MXANGL,
     *                     WATO1,WATH2,WATH3,NWATER,ITYPWAT,
     *                     IADDNA1,IADDK1,IADDCA2,IADDMG2,IADDCL1,
     *                     JADDNA1,JADDK1)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      CHARACTER*10 ATMNAM
      CHARACTER*256 QPFILE
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, FOUR=4.0D+00)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION ATMNAM(*),CORD(3,*),ZANF(*),ZMAS(*),
     *          ONEMAS(*),CHARG(*),POL(*),
     *          SIG(*),EPS(*),SIG2(*),EPS2(*),CLPR(4,*),ZLPR(4,*),
     *          NLPR(*),IPAIR(2,*),FCBOND(*),BOND0(*),
     *          KLIST(3,*),FCANGL(*),ANGL0(*),L1213J(2,*),
     *          WATO1(3,*),WATH2(3,*),WATH3(3,*),
     *          O1(3),H2(3),H3(3)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     ADD WATER MOLECULES TO THE SYSTEM TO FILL A RECTANGULAR PBC BOX.
C
C     HUI LI, MAR 2011, LINCOLN
C
      NFFAT0 = NFFAT
C
      XMAXMOL = -1.0D+30
      YMAXMOL = -1.0D+30
      ZMAXMOL = -1.0D+30
      XMINMOL =  1.0D+30
      YMINMOL =  1.0D+30
      ZMINMOL =  1.0D+30
      DO IAT = 1,NAT
         XMAXMOL = MAX(XMAXMOL,C(1,IAT))
         YMAXMOL = MAX(YMAXMOL,C(2,IAT))
         ZMAXMOL = MAX(ZMAXMOL,C(3,IAT))
         XMINMOL = MIN(XMINMOL,C(1,IAT))
         YMINMOL = MIN(YMINMOL,C(2,IAT))
         ZMINMOL = MIN(ZMINMOL,C(3,IAT))
      ENDDO
      DO IFFAT = 1,NFFAT0
         XMAXMOL = MAX(XMAXMOL,CORD(1,IFFAT))
         YMAXMOL = MAX(YMAXMOL,CORD(2,IFFAT))
         ZMAXMOL = MAX(ZMAXMOL,CORD(3,IFFAT))
         XMINMOL = MIN(XMINMOL,CORD(1,IFFAT))
         YMINMOL = MIN(YMINMOL,CORD(2,IFFAT))
         ZMINMOL = MIN(ZMINMOL,CORD(3,IFFAT))
      ENDDO
      IF(XMAXMOL.EQ.-1.0D+30) XMAXMOL = ZERO
      IF(YMAXMOL.EQ.-1.0D+30) YMAXMOL = ZERO
      IF(ZMAXMOL.EQ.-1.0D+30) ZMAXMOL = ZERO
      IF(XMINMOL.EQ. 1.0D+30) XMINMOL = ZERO
      IF(YMINMOL.EQ. 1.0D+30) YMINMOL = ZERO
      IF(ZMINMOL.EQ. 1.0D+30) ZMINMOL = ZERO
      IF(MASWRK) THEN
         WRITE(IW,'(6(1X,A,F8.2))')
     *     'XMIN=',XMINMOL*TOANGS,'XMAX=',XMAXMOL*TOANGS,
     *     'YMIN=',YMINMOL*TOANGS,'YMAX=',YMAXMOL*TOANGS,
     *     'ZMIN=',ZMINMOL*TOANGS,'ZMAX=',ZMAXMOL*TOANGS
      END IF
C     - THE AVERAGE DISTANCE BETWEEN AN ATOM
C       AND WATER OXYGEN ATOM SHOULD BE 2.3 ANGSTROM
C       THIS VALUE DOES NOT AFFECT THE NUMBER OF WATER
C       BECAUSE IT IS USED ONLY FOR PRE-SCREENING
      VDW     = 2.3D+00*TOBOHR
      XMAXMOL = XMAXMOL + VDW
      YMAXMOL = YMAXMOL + VDW
      ZMAXMOL = ZMAXMOL + VDW
      XMINMOL = XMINMOL - VDW
      YMINMOL = YMINMOL - VDW
      ZMINMOL = ZMINMOL - VDW
      IF((XBOX-(XMAXMOL-XMINMOL)).LT.ZERO)THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: XBOX MUST BE LARGER THAN ',
     *      (XMAXMOL-XMINMOL)*TOANGS,' ANGSTROM.'
         CALL ABRT
      END IF
      IF((YBOX-(YMAXMOL-YMINMOL)).LT.ZERO)THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: YBOX MUST BE LARGER THAN ',
     *      (YMAXMOL-YMINMOL)*TOANGS,' ANGSTROM.'
         CALL ABRT
      END IF
      IF((ZBOX-(ZMAXMOL-ZMINMOL)).LT.ZERO)THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: ZBOX MUST BE LARGER THAN ',
     *      (ZMAXMOL-ZMINMOL)*TOANGS,' ANGSTROM.'
         CALL ABRT
      END IF
C 
C     -- SET UP A WATER BOX CENTERED AT THE DEFINED PBC CENTER
      XMAX    = CENTX + PT5*XBOX 
      YMAX    = CENTY + PT5*YBOX
      ZMAX    = CENTZ + PT5*ZBOX
      XMIN    = CENTX - PT5*XBOX
      YMIN    = CENTY - PT5*YBOX
      ZMIN    = CENTZ - PT5*ZBOX
C
C     - DETERMINE THE MAXIMUM NUMBER OF WATER
      VOLM    = (MAX(XBOX,YBOX,ZBOX))**3
C     - VOLUME OF ONE WATER =  29.998696 A**3 AT 298.15 K, 1 BAR
C                           = 202.441191 BOHR**3
      MAXWAT  = INT(VOLM/202.441191D+00)
      NFOLD   = 0
      DO K = 0, 30, 3
         IF(MAXWAT.GT.4096*(2**K)) NFOLD = K+3
      ENDDO
      KKKWAT = 4096*(2**NFOLD)
      IF(KKKWAT.GT.8*MXFFAT) THEN
         IF(MASWRK) WRITE(IW,*)
     *      'ERROR: TOO MANY WATER IN ADDPBCWAT. INCREASE MXFFAT'
         CALL ABRT
      END IF
C
C     -- READ IN 4096 WATER MOLECULES --
C        THEY ARE IN A CUBE WITH SIDE LENGTH = 49.7150 A.
C        CREATE MORE WATER IF NECESSARY
C
      IF(MASWRK) THEN
      CALL GENQPFILE('WATER4096.DAT ',QPFILE,LENQP)
      OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      DO IWAT=1,4096
         READ(12,*) WATO1(1,IWAT),WATO1(2,IWAT),WATO1(3,IWAT),
     *              WATH2(1,IWAT),WATH2(2,IWAT),WATH2(3,IWAT),
     *              WATH3(1,IWAT),WATH3(2,IWAT),WATH3(3,IWAT)
      ENDDO         
      CLOSE(12)
      END IF
      IF(GOPARR) CALL DDI_BCAST(457,'F',WATO1,3*4096,MASTER)
      IF(GOPARR) CALL DDI_BCAST(458,'F',WATH2,3*4096,MASTER)
      IF(GOPARR) CALL DDI_BCAST(459,'F',WATH3,3*4096,MASTER)
      SIZE  = 49.7150D+00*TOBOHR*PT5
      DO IFOLD = 1, NFOLD
         IXYZ1 = MOD(IFOLD,3)
         IF(IXYZ1.EQ.1) IXYZ2 = 2
         IF(IXYZ1.EQ.1) IXYZ3 = 3
         IF(IXYZ1.EQ.2) IXYZ2 = 1
         IF(IXYZ1.EQ.2) IXYZ3 = 3
         IF(IXYZ1.EQ.0) IXYZ2 = 1
         IF(IXYZ1.EQ.0) IXYZ3 = 2
         IF(IXYZ1.EQ.0) IXYZ1 = 3
         IF(IXYZ1.EQ.1) SIZE  = SIZE*2.0D+00
         NDONE  = 2**(IFOLD-1)
         LENGTH = NDONE*4096
         DO III = 1, LENGTH
            WATO1(IXYZ1,LENGTH+III) = WATO1(IXYZ1,III) + SIZE
            WATO1(IXYZ2,LENGTH+III) = WATO1(IXYZ2,III) 
            WATO1(IXYZ3,LENGTH+III) = WATO1(IXYZ3,III)
            WATH2(IXYZ1,LENGTH+III) = WATH2(IXYZ1,III) + SIZE
            WATH2(IXYZ2,LENGTH+III) = WATH2(IXYZ2,III)
            WATH2(IXYZ3,LENGTH+III) = WATH2(IXYZ3,III)
            WATH3(IXYZ1,LENGTH+III) = WATH3(IXYZ1,III) + SIZE
            WATH3(IXYZ2,LENGTH+III) = WATH3(IXYZ2,III)
            WATH3(IXYZ3,LENGTH+III) = WATH3(IXYZ3,III)
         ENDDO
      ENDDO
C
C     -- ADD IONS BEFORE WATER --
C        (1) ADD NA+ OR K+ TO DNA/RNA, IF REQUESTED.
C        (2) ADD OTHER IONS
C
      MADDNA1= 0
      MADDK1 = 0
      IF(JADDNA1.EQ.1 .OR. JADDK1.EQ.1) THEN
      DO IFFAT = 1, NFFAT
         IF(ATMNAM(IFFAT  ).EQ.'P         '.AND.
     *      ATMNAM(IFFAT+1).EQ.'O         '.AND.
     *      ATMNAM(IFFAT+2).EQ.'O         ') THEN
            DIS1 = (CORD(1,IFFAT)-CORD(1,IFFAT+1))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+1))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+1))**2
            DIS2 = (CORD(1,IFFAT)-CORD(1,IFFAT+2))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+2))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+2))**2
            IF(DIS1.LT.11.6D+00 .AND. DIS2.LT.11.6D+00) THEN
               XXX = CORD(1,IFFAT)
     *             + ((CORD(1,IFFAT+1)+CORD(1,IFFAT+2))*PT5
     *                -CORD(1,IFFAT))*FOUR
               YYY = CORD(2,IFFAT)
     *             + ((CORD(2,IFFAT+1)+CORD(2,IFFAT+2))*PT5
     *                -CORD(2,IFFAT))*FOUR
               ZZZ = CORD(3,IFFAT)
     *             + ((CORD(3,IFFAT+1)+CORD(3,IFFAT+2))*PT5
     *                -CORD(3,IFFAT))*FOUR
               IF(JADDNA1.EQ.1) THEN
                  MADDNA1         = MADDNA1 + 1
                  NFFAT           = NFFAT + 1
                  CORD(1,NFFAT)   = XXX
                  CORD(2,NFFAT)   = YYY
                  CORD(3,NFFAT)   = ZZZ
                  ZANF  (NFFAT)   = 11.0D+00
                  ATMNAM(NFFAT)   = 'NA'
                  CALL RDIONS(' $NA1   ',ZMAS,ONEMAS,
     *                        CHARG,POL,SIG,EPS,
     *                        SIG2,EPS2,
     *                        CLPR,ZLPR,NLPR,NFFAT)
               ELSE IF(JADDK1.EQ.1) THEN
                  MADDK1          = MADDK1 + 1
                  NFFAT           = NFFAT + 1
                  CORD(1,NFFAT)   = XXX
                  CORD(2,NFFAT)   = YYY
                  CORD(3,NFFAT)   = ZZZ
                  ZANF  (NFFAT)   = 19.0D+00
                  ATMNAM(NFFAT)   = 'K'
                  CALL RDIONS(' $K1    ',ZMAS,ONEMAS,
     *                        CHARG,POL,SIG,EPS,
     *                        SIG2,EPS2,
     *                        CLPR,ZLPR,NLPR,NFFAT)
               END IF
            END IF
         END IF
      ENDDO
      JADDNA1 = MADDNA1
      JADDK1  = MADDK1
      END IF
C
      NADDNA1= 0
      NADDK1 = 0
      NADDMG2= 0
      NADDCA2= 0
      NADDCL1= 0
C
 100  CONTINUE
      IF(IADDNA1.EQ.0) GOTO 101
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX/XBOX)
         PBCY  = YBOX*ANINT(CY/YBOX)
         PBCZ  = ZBOX*ANINT(CZ/ZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 100
      ENDDO
      NADDNA1         = NADDNA1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 11.0D+00
      ATMNAM(NFFAT)   = 'NA'
      CALL RDIONS(' $NA1   ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDNA1.LT.IADDNA1) GOTO 100
C
 101  CONTINUE
      IF(IADDCL1.EQ.0) GOTO 102
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX/XBOX)
         PBCY  = YBOX*ANINT(CY/YBOX)
         PBCZ  = ZBOX*ANINT(CZ/ZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 101
      ENDDO
      NADDCL1         = NADDCL1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 17.0D+00
      ATMNAM(NFFAT)   = 'CL'
      CALL RDIONS(' $CL1   ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDCL1.LT.IADDCL1) GOTO 101
C
 102  CONTINUE
      IF(IADDK1.EQ.0) GOTO 103
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX/XBOX)
         PBCY  = YBOX*ANINT(CY/YBOX)
         PBCZ  = ZBOX*ANINT(CZ/ZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 102
      ENDDO
      NADDK1          = NADDK1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 19.0D+00
      ATMNAM(NFFAT)   = 'K'
      CALL RDIONS(' $K1    ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDK1.LT.IADDK1) GOTO 102
C
 103  CONTINUE
      IF(IADDCA2.EQ.0) GOTO 104
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX/XBOX)
         PBCY  = YBOX*ANINT(CY/YBOX)
         PBCZ  = ZBOX*ANINT(CZ/ZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 103
      ENDDO
      NADDCA2         = NADDCA2+ 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 20.0D+00
      ATMNAM(NFFAT)   = 'CA'
      CALL RDIONS(' $CA2   ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDCA2.LT.IADDCA2) GOTO 103
C
 104  CONTINUE
      IF(IADDMG2.EQ.0) GOTO 105
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = CENTX + XBOX*(XXX-PT5)
      YYY   = CENTY + YBOX*(YYY-PT5)
      ZZZ   = CENTZ + ZBOX*(ZZZ-PT5)
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX/XBOX)
         PBCY  = YBOX*ANINT(CY/YBOX)
         PBCZ  = ZBOX*ANINT(CZ/ZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 104
      ENDDO
      NADDMG2         = NADDMG2+ 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 12.0D+00
      ATMNAM(NFFAT)   = 'MG'
      CALL RDIONS(' $MG2   ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDMG2.LT.IADDMG2) GOTO 104
C
 105  CONTINUE
C
C     -- MUST UPDATE NFFAT0
      NFFAT0 = NFFAT
C
C     -- CHECK EACH WATER MOLECULE --
C
      NWATER = 0
      DO 200 IWAT = 1, KKKWAT
         O1(1) = WATO1(1,IWAT) + XMIN
         O1(2) = WATO1(2,IWAT) + YMIN
         O1(3) = WATO1(3,IWAT) + ZMIN
         H2(1) = WATH2(1,IWAT) + XMIN
         H2(2) = WATH2(2,IWAT) + YMIN
         H2(3) = WATH2(3,IWAT) + ZMIN
         H3(1) = WATH3(1,IWAT) + XMIN
         H3(2) = WATH3(2,IWAT) + YMIN
         H3(3) = WATH3(3,IWAT) + ZMIN
C        - WATER BEYOND THE XBOX*YBOX*ZBOX LIMIT IS EXCLUDED
         IF(O1(1).GT.XMAX.OR.O1(2).GT.YMAX.OR.O1(3).GT.ZMAX)THEN
            GOTO 200
         END IF
C        - WATER TOO CLOSE TO PROTEIN ATOMS AND ALREADY 
C          ADDED WATER MOLECULES IS EXCLUDED. SO USE 'NFFAT'.
         NEAR = 0
         IPCOUNT = ME - 1
         DO 210 IFFAT = 1, NFFAT
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 210
            END IF
            IF(ZANF(IFFAT).NE.1.0D+00) THEN
               CX    = O1(1) - CORD(1,IFFAT)
               CY    = O1(2) - CORD(2,IFFAT)
               CZ    = O1(3) - CORD(3,IFFAT)
               PBCX  = XBOX*ANINT(CX/XBOX)
               PBCY  = YBOX*ANINT(CY/YBOX)
               PBCZ  = ZBOX*ANINT(CZ/ZBOX)
               CX    = CX - PBCX
               CY    = CY - PBCY
               CZ    = CZ - PBCZ
               IF(ABS(CX).GT.5.68D+00) GOTO 210
               IF(ABS(CY).GT.5.68D+00) GOTO 210
               IF(ABS(CZ).GT.5.68D+00) GOTO 210
               R2    = CX*CX+CY*CY+CZ*CZ
               IF(IFFAT.LE.NFFAT0.AND.R2.LT.32.14D+00) NEAR=NEAR+1
C              -- CANNOT BE SMALLER THAN 2.5 ANGSTROM
               IF(R2.LT.22.32D+00) NEAR=NEAR+1
            END IF
 210     CONTINUE
         IPCOUNT = ME - 1
         DO 220 IAT = 1, NAT
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 220
            END IF
            IF(ZAN(IAT).NE.1.0D+00) THEN
               CX    = O1(1) - C(1,IAT)
               CY    = O1(2) - C(2,IAT)
               CZ    = O1(3) - C(3,IAT)
               PBCX  = XBOX*ANINT(CX/XBOX)
               PBCY  = YBOX*ANINT(CY/YBOX)
               PBCZ  = ZBOX*ANINT(CZ/ZBOX)
               CX    = CX - PBCX
               CY    = CY - PBCY
               CZ    = CZ - PBCZ
               IF(ABS(CX).GT.5.68D+00) GOTO 220
               IF(ABS(CY).GT.5.68D+00) GOTO 220
               IF(ABS(CZ).GT.5.68D+00) GOTO 220
               R2    = CX*CX+CY*CY+CZ*CZ
C              -- CANNOT BE SMALLER THAN 3.0 ANGSTROM
               IF(R2.LT.32.14D+00) NEAR=NEAR+1
            END IF
 220     CONTINUE
         IF(GOPARR) CALL DDI_GSUMI(2407,NEAR,1)
         IF(NEAR.GT.0) GOTO 200
C        - WATER NOT CLOSE TO PROTEIN ATOMS MUST STAY
         NWATER= NWATER+ 1
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = O1(1)
         CORD(2,NFFAT) = O1(2)
         CORD(3,NFFAT) = O1(3)
         ZANF  (NFFAT) = 8.0D+00
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = H2(1)
         CORD(2,NFFAT) = H2(2)
         CORD(3,NFFAT) = H2(3)
         ZANF  (NFFAT) = 1.0D+00
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = H3(1)
         CORD(2,NFFAT) = H3(2)
         CORD(3,NFFAT) = H3(3)
         ZANF  (NFFAT) = 1.0D+00
 200  CONTINUE
C
      IF(NFFAT.GT.MXFFAT) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY NFFAT ATOMS IN ADDPBCWAT. INCREASE MXFFAT'
         CALL ABRT
      END IF
C
      DO IFFAT = NFFAT0+1, NFFAT-2, 3
         IF(IFFAT.EQ.NFFAT0+1) THEN
            CALL RDHOH(ATMNAM,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,
     *                 SIG2,EPS2,BOND0,FCBOND,
     *                 ANGL0,FCANGL,IPAIR,KLIST,
     *                 CLPR,ZLPR,NLPR,NFFAT0+1,L1213J,ITYPWAT)
         ELSE
            DO KK = 0, 2
               ATMNAM(IFFAT+KK) = ATMNAM(IFFAT+KK-3)
               ZMAS  (IFFAT+KK) = ZMAS(IFFAT+KK-3)
               ONEMAS(IFFAT+KK) = ONEMAS(IFFAT+KK-3)
               CHARG (IFFAT+KK) = CHARG(IFFAT+KK-3)
               POL   (IFFAT+KK) = POL(IFFAT+KK-3)
               SIG   (IFFAT+KK) = SIG(IFFAT+KK-3)
               EPS   (IFFAT+KK) = EPS(IFFAT+KK-3)
               SIG2  (IFFAT+KK) = SIG2(IFFAT+KK-3)
               EPS2  (IFFAT+KK) = EPS2(IFFAT+KK-3)
               CLPR(1,IFFAT+KK) = CLPR(1,IFFAT+KK-3)
               ZLPR(1,IFFAT+KK) = ZLPR(1,IFFAT+KK-3)
               CLPR(2,IFFAT+KK) = CLPR(2,IFFAT+KK-3)
               ZLPR(2,IFFAT+KK) = ZLPR(2,IFFAT+KK-3)
               CLPR(3,IFFAT+KK) = CLPR(3,IFFAT+KK-3)
               ZLPR(3,IFFAT+KK) = ZLPR(3,IFFAT+KK-3)
               CLPR(4,IFFAT+KK) = CLPR(4,IFFAT+KK-3)
               ZLPR(4,IFFAT+KK) = ZLPR(4,IFFAT+KK-3)
               NLPR  (IFFAT+KK) = 2
            ENDDO
            DO KK=1, 2
               NBOND = NBOND + 1
               IPAIR(1,NBOND)  = IPAIR(1,NBOND-2)+3
               IPAIR(2,NBOND)  = IPAIR(2,NBOND-2)+3
               FCBOND(NBOND)   = FCBOND(NBOND-2)
               BOND0(NBOND)    = BOND0(NBOND-2)
            ENDDO
C
            NANGL = NANGL + 1
            KLIST(1,NANGL)  = KLIST(1,NANGL-1)+3
            KLIST(2,NANGL)  = KLIST(2,NANGL-1)+3
            KLIST(3,NANGL)  = KLIST(3,NANGL-1)+3
            FCANGL(NANGL)   = FCANGL(NANGL-1)
            ANGL0(NANGL)    = ANGL0(NANGL-1)
C
            DO KK=1, 3
               N1213J = N1213J + 1
               L1213J(1,N1213J) = L1213J(1,N1213J-3)+3
               L1213J(2,N1213J) = L1213J(2,N1213J-3)+3
            ENDDO
         END IF
      ENDDO
      IF(NBOND.GT.MXBOND) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY BONDS IN ADDPBCWAT. INCREASE MXBOND'
         CALL ABRT
      END IF
      IF(NANGL.GT.MXANGL) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY ANGLES IN ADDPBCWAT. INCREASE MXANGL'
         CALL ABRT
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK ADDSPHWAT
      SUBROUTINE ADDSPHWAT(ATMNAM,CORD,ZANF,ZMAS,ONEMAS,CHARG,POL,
     *                     SIG,EPS,SIG2,EPS2,CLPR,ZLPR,NLPR,
     *                     IPAIR,FCBOND,BOND0,
     *                     KLIST,FCANGL,ANGL0,L1213J,
     *                     MXFFAT,MXBOND,MXANGL,
     *                     WATO1,WATH2,WATH3,NWATER,ITYPWAT,
     *                     IADDNA1,IADDK1,IADDCA2,IADDMG2,IADDCL1,
     *                     JADDNA1,JADDK1)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      CHARACTER*10 ATMNAM
      CHARACTER*256 QPFILE
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, TWO=2.0D+00,
     *           FOUR=4.0D+00)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION ATMNAM(*),CORD(3,*),ZANF(*),ZMAS(*),
     *          ONEMAS(*),CHARG(*),POL(*),
     *          SIG(*),EPS(*),SIG2(*),EPS2(*),CLPR(4,*),ZLPR(4,*),
     *          NLPR(*),IPAIR(2,*),FCBOND(*),BOND0(*),
     *          KLIST(3,*),FCANGL(*),ANGL0(*),L1213J(2,*),
     *          WATO1(3,*),WATH2(3,*),WATH3(3,*),
     *          O1(3),H2(3),H3(3)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     ADD WATER MOLECULES TO THE SYSTEM TO FILL A SPHERICAL SPACE
C     WITH R=SPHRAD, AND CENTERTED AT (CENTX,CENTY,CENTZ).
C     NOTE: SPHERICAL SYSTEMS HAVE 10E+6 BAR PRESSURE (SURFACE TENSION).
C           RXNFLD MAY REDUCE THE PRESSURE.
C
C     HUI LI, MAR 2011, LINCOLN
C
      NFFAT0 = NFFAT
C
      RRMOL   = ZERO
      DO IAT = 1, NAT
         DX      = C(1,IAT) - CENTX
         DY      = C(2,IAT) - CENTY
         DZ      = C(3,IAT) - CENTZ
         RR      = DX*DX+DY*DY+DZ*DZ
         RRMOL   = MAX(RRMOL,RR)
      ENDDO
      DO IFFAT = 1,NFFAT0
         DX      = CORD(1,IFFAT) - CENTX
         DY      = CORD(2,IFFAT) - CENTY
         DZ      = CORD(3,IFFAT) - CENTZ
         RR      = DX*DX+DY*DY+DZ*DZ
         RRMOL   = MAX(RRMOL,RR)
      ENDDO
      RMOL = SQRT(RRMOL)
      IF(MASWRK) THEN 
         WRITE(IW,'(1X,A,F8.2," ANGSTROM")')
     *     'RMOL=',RMOL*TOANGS
      END IF
C     - THE AVERAGE DISTANCE BETWEEN AN ATOM
C       AND WATER OXYGEN ATOM SHOULD BE 2.3 ANGSTROM
C       THIS VALUE DOES NOT AFFECT THE NUMBER OF WATER
C       BECAUSE IT IS USED FOR PRE-SCREENING
      VDW     = 2.3D+00*TOBOHR
      RMOL    = RMOL + VDW
      IF((SPHRAD-RMOL).LT.ZERO)THEN
         IF(MASWRK) WRITE(IW,*)'ERROR: SPHRAD MUST BE LARGER THAN ',
     *      RMOL*TOANGS,' ANGSTROM.'
         CALL ABRT
      END IF
C     - DETERMINE THE BOUNDARY OF THE WATER BOX
      XMAX    = CENTX + SPHRAD
      YMAX    = CENTY + SPHRAD
      ZMAX    = CENTZ + SPHRAD
      XMIN    = CENTX - SPHRAD
      YMIN    = CENTY - SPHRAD
      ZMIN    = CENTZ - SPHRAD
C     - DETERMINE THE MAXIMUM NUMBER OF WATER
      VOLM    = (TWO*SPHRAD)**3
C     - VOLUME OF ONE WATER =  29.998696 A**3 AT 298.15 K, 1 BAR
C                           = 202.441191 BOHR**3
      MAXWAT  = INT(VOLM/202.441191D+00)
      NFOLD   = 0
      DO K = 0, 30, 3
         IF(MAXWAT.GT.4096*(2**K)) NFOLD = K+3
      ENDDO
      KKKWAT  = 4096*(2**NFOLD)
      IF(KKKWAT.GT.8*MXFFAT) THEN
         IF(MASWRK) WRITE(IW,*)
     *      'ERROR: TOO MANY WATER IN ADDSPHWAT. INCREASE MXFFAT'
         CALL ABRT
      END IF
C
C     -- READ IN 4096 WATER MOLECULES --
C        THEY ARE IN A CUBE WITH SIDE LENGTH = 49.7150 A.
C        CREATE MORE WATER IF NECESSARY
C
      IF(MASWRK) THEN
      CALL GENQPFILE('WATER4096.DAT ',QPFILE,LENQP)
      OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      DO IWAT=1,4096
         READ(12,*) WATO1(1,IWAT),WATO1(2,IWAT),WATO1(3,IWAT),
     *              WATH2(1,IWAT),WATH2(2,IWAT),WATH2(3,IWAT),
     *              WATH3(1,IWAT),WATH3(2,IWAT),WATH3(3,IWAT)
      ENDDO
      CLOSE(12)
      END IF
      IF(GOPARR) CALL DDI_BCAST(457,'F',WATO1,3*4096,MASTER)
      IF(GOPARR) CALL DDI_BCAST(458,'F',WATH2,3*4096,MASTER)
      IF(GOPARR) CALL DDI_BCAST(459,'F',WATH3,3*4096,MASTER)
      SIZE  = 49.7150D+00*TOBOHR*PT5
      DO IFOLD = 1, NFOLD
         IXYZ1 = MOD(IFOLD,3)
         IF(IXYZ1.EQ.1) IXYZ2 = 2
         IF(IXYZ1.EQ.1) IXYZ3 = 3
         IF(IXYZ1.EQ.2) IXYZ2 = 1
         IF(IXYZ1.EQ.2) IXYZ3 = 3
         IF(IXYZ1.EQ.0) IXYZ2 = 1
         IF(IXYZ1.EQ.0) IXYZ3 = 2
         IF(IXYZ1.EQ.0) IXYZ1 = 3
         IF(IXYZ1.EQ.1) SIZE  = SIZE*2.0D+00
         NDONE  = 2**(IFOLD-1)
         LENGTH = NDONE*4096
         DO III = 1, LENGTH
            WATO1(IXYZ1,LENGTH+III) = WATO1(IXYZ1,III) + SIZE
            WATO1(IXYZ2,LENGTH+III) = WATO1(IXYZ2,III)
            WATO1(IXYZ3,LENGTH+III) = WATO1(IXYZ3,III)
            WATH2(IXYZ1,LENGTH+III) = WATH2(IXYZ1,III) + SIZE
            WATH2(IXYZ2,LENGTH+III) = WATH2(IXYZ2,III)
            WATH2(IXYZ3,LENGTH+III) = WATH2(IXYZ3,III)
            WATH3(IXYZ1,LENGTH+III) = WATH3(IXYZ1,III) + SIZE
            WATH3(IXYZ2,LENGTH+III) = WATH3(IXYZ2,III)
            WATH3(IXYZ3,LENGTH+III) = WATH3(IXYZ3,III)
         ENDDO
      ENDDO
C
C     -- ADD IONS BEFORE WATER --
C        (1) ADD NA+ OR K+ TO DNA/RNA, IF REQUESTED.
C        (2) ADD OTHER IONS
C
      MADDNA1= 0
      MADDK1 = 0
      IF(JADDNA1.EQ.1 .OR. JADDK1.EQ.1) THEN
      DO IFFAT = 1, NFFAT
         IF(ATMNAM(IFFAT  ).EQ.'P         '.AND.
     *      ATMNAM(IFFAT+1).EQ.'O         '.AND.
     *      ATMNAM(IFFAT+2).EQ.'O         ') THEN
            DIS1 = (CORD(1,IFFAT)-CORD(1,IFFAT+1))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+1))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+1))**2
            DIS2 = (CORD(1,IFFAT)-CORD(1,IFFAT+2))**2 +
     *             (CORD(2,IFFAT)-CORD(2,IFFAT+2))**2 +
     *             (CORD(3,IFFAT)-CORD(3,IFFAT+2))**2
            IF(DIS1.LT.11.6D+00 .AND. DIS2.LT.11.6D+00) THEN
               XXX = CORD(1,IFFAT) 
     *             + ((CORD(1,IFFAT+1)+CORD(1,IFFAT+2))*PT5
     *                -CORD(1,IFFAT))*FOUR
               YYY = CORD(2,IFFAT) 
     *             + ((CORD(2,IFFAT+1)+CORD(2,IFFAT+2))*PT5
     *                -CORD(2,IFFAT))*FOUR
               ZZZ = CORD(3,IFFAT) 
     *             + ((CORD(3,IFFAT+1)+CORD(3,IFFAT+2))*PT5
     *                -CORD(3,IFFAT))*FOUR
               IF(JADDNA1.EQ.1) THEN
               MADDNA1         = MADDNA1 + 1
               NFFAT           = NFFAT + 1
               CORD(1,NFFAT)   = XXX
               CORD(2,NFFAT)   = YYY
               CORD(3,NFFAT)   = ZZZ
               ZANF  (NFFAT)   = 11.0D+00
               ATMNAM(NFFAT)   = 'NA'
               CALL RDIONS(' $NA1   ',ZMAS,ONEMAS,
     *                     CHARG,POL,SIG,EPS,
     *                     SIG2,EPS2,
     *                     CLPR,ZLPR,NLPR,NFFAT)
               ELSE IF(JADDK1.EQ.1) THEN
               MADDK1          = MADDK1 + 1
               NFFAT           = NFFAT + 1
               CORD(1,NFFAT)   = XXX
               CORD(2,NFFAT)   = YYY
               CORD(3,NFFAT)   = ZZZ
               ZANF  (NFFAT)   = 19.0D+00
               ATMNAM(NFFAT)   = 'K'
               CALL RDIONS(' $K1    ',ZMAS,ONEMAS,
     *                     CHARG,POL,SIG,EPS,
     *                     SIG2,EPS2,
     *                     CLPR,ZLPR,NLPR,NFFAT)
               END IF
            END IF
         END IF
      ENDDO
      JADDNA1 = MADDNA1
      JADDK1  = MADDK1
      END IF
C
      NADDNA1= 0
      NADDK1 = 0
      NADDMG2= 0
      NADDCA2= 0
      NADDCL1= 0
C
 100  CONTINUE
      IF(IADDNA1.EQ.0) GOTO 101
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 100
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 100
      ENDDO
      NADDNA1         = NADDNA1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 11.0D+00
      ATMNAM(NFFAT)   = 'NA'
      CALL RDIONS(' $NA1   ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDNA1.LT.IADDNA1) GOTO 100
C
 101  CONTINUE
      IF(IADDCL1.EQ.0) GOTO 102
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 101
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 101
      ENDDO
      NADDCL1         = NADDCL1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 17.0D+00
      ATMNAM(NFFAT)   = 'CL'
      CALL RDIONS(' $CL1   ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDCL1.LT.IADDCL1) GOTO 101
C
 102  CONTINUE
      IF(IADDK1.EQ.0) GOTO 103
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 102
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 102
      ENDDO
      NADDK1          = NADDK1 + 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 19.0D+00
      ATMNAM(NFFAT)   = 'K'
      CALL RDIONS(' $K1    ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDK1.LT.IADDK1) GOTO 102
C
 103  CONTINUE
      IF(IADDCA2.EQ.0) GOTO 104
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)   
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 103
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX/XBOX)
         PBCY  = YBOX*ANINT(CY/YBOX)
         PBCZ  = ZBOX*ANINT(CZ/ZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 103
      ENDDO
      NADDCA2         = NADDCA2+ 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 20.0D+00
      ATMNAM(NFFAT)   = 'CA'
      CALL RDIONS(' $CA2   ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDCA2.LT.IADDCA2) GOTO 103
C
 104  CONTINUE
      IF(IADDMG2.EQ.0) GOTO 105
      CALL FFRAND(XXX)
      CALL FFRAND(YYY)
      CALL FFRAND(ZZZ)
      XXX   = TWO*SPHRAD*(XXX-PT5)
      YYY   = TWO*SPHRAD*(YYY-PT5)
      ZZZ   = TWO*SPHRAD*(ZZZ-PT5)
C     - IONS BEYOND THE SPHRAD-RWAT LIMIT IS EXCLUDED
      RR = XXX**2 + YYY**2 + ZZZ**2
      R  = SQRT(RR)   
      IF(R.GT.(SPHRAD-2.936D+00)) GOTO 104
      XXX   = CENTX + XXX
      YYY   = CENTY + YYY
      ZZZ   = CENTZ + ZZZ
      DO IFFAT = 1, NFFAT
         CX    = XXX - CORD(1,IFFAT)
         CY    = YYY - CORD(2,IFFAT)
         CZ    = ZZZ - CORD(3,IFFAT)
         PBCX  = XBOX*ANINT(CX/XBOX)
         PBCY  = YBOX*ANINT(CY/YBOX)
         PBCZ  = ZBOX*ANINT(CZ/ZBOX)
         CX    = CX - PBCX
         CY    = CY - PBCY
         CZ    = CZ - PBCZ
         R2    = CX*CX+CY*CY+CZ*CZ
C        -- CANNOT BE SMALLER THAN 4.0 ANGSTROM
         IF(R2.LT.57.14D+00) GOTO 104
      ENDDO
      NADDMG2         = NADDMG2+ 1
      NFFAT           = NFFAT + 1
      CORD(1,NFFAT)   = XXX
      CORD(2,NFFAT)   = YYY
      CORD(3,NFFAT)   = ZZZ
      ZANF  (NFFAT)   = 12.0D+00
      ATMNAM(NFFAT)   = 'MG'
      CALL RDIONS(' $MG2   ',ZMAS,ONEMAS,
     *            CHARG,POL,SIG,EPS,
     *            SIG2,EPS2,
     *            CLPR,ZLPR,NLPR,NFFAT)
      IF(NADDMG2.LT.IADDMG2) GOTO 104
C
 105  CONTINUE
C
C     -- MUST UPDATE NFFAT0
      NFFAT0 = NFFAT
C
C     -- CHECK EACH WATER MOLECULE --
C
      NWATER = 0
      DO 200 IWAT = 1, KKKWAT
         O1(1) = WATO1(1,IWAT) + XMIN
         O1(2) = WATO1(2,IWAT) + YMIN
         O1(3) = WATO1(3,IWAT) + ZMIN
         H2(1) = WATH2(1,IWAT) + XMIN
         H2(2) = WATH2(2,IWAT) + YMIN
         H2(3) = WATH2(3,IWAT) + ZMIN
         H3(1) = WATH3(1,IWAT) + XMIN
         H3(2) = WATH3(2,IWAT) + YMIN
         H3(3) = WATH3(3,IWAT) + ZMIN
C        - WATER BEYOND THE LIMIT IS EXCLUDED
         IF(O1(1).GT.XMAX.OR.O1(2).GT.YMAX.OR.O1(3).GT.ZMAX)THEN
            GOTO 200
         END IF
C        - WATER BEYOND THE SPHRAD LIMIT IS EXCLUDED
         RR = (O1(1)-CENTX)**2
     *      + (O1(2)-CENTY)**2
     *      + (O1(3)-CENTZ)**2
         R  = SQRT(RR)
         IF(R.GT.SPHRAD) GOTO 200
C        - WATER TOO CLOSE TO PROTEIN ATOMS IS EXCLUDED 
C          NO PBC HERE, SO USE 'NFFAT0'.
         NEAR = 0
         IPCOUNT = ME - 1
         DO 210 IFFAT = 1, NFFAT0
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 210
            END IF
            IF(ZANF(IFFAT).NE.1.0D+00) THEN
               CX    = O1(1) - CORD(1,IFFAT)
               CY    = O1(2) - CORD(2,IFFAT)
               CZ    = O1(3) - CORD(3,IFFAT)
               IF(ABS(CX).GT.5.68D+00) GOTO 210
               IF(ABS(CY).GT.5.68D+00) GOTO 210
               IF(ABS(CZ).GT.5.68D+00) GOTO 210
               R2    = CX*CX+CY*CY+CZ*CZ
C              -- CANNOT BE SMALLER THAN 3.0 ANGSTROM
               IF(R2.LT.32.14D+00) NEAR=NEAR+1
            END IF
 210     CONTINUE
         IPCOUNT = ME - 1
         DO 220 IAT = 1, NAT
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 220
            END IF
            IF(ZAN(IAT).NE.1.0D+00) THEN
               CX    = O1(1) - C(1,IAT)
               CY    = O1(2) - C(2,IAT)
               CZ    = O1(3) - C(3,IAT)
               IF(ABS(CX).GT.5.68D+00) GOTO 220
               IF(ABS(CY).GT.5.68D+00) GOTO 220
               IF(ABS(CZ).GT.5.68D+00) GOTO 220
               R2    = CX*CX+CY*CY+CZ*CZ
C              -- CANNOT BE SMALLER THAN 3.0 ANGSTROM
               IF(R2.LT.32.14D+00) NEAR=NEAR+1
            END IF
 220     CONTINUE
         IF(GOPARR) CALL DDI_GSUMI(2407,NEAR,1)
         IF(NEAR.GT.0) GOTO 200
C        - WATER NOT CLOSE TO PROTEIN ATOMS MUST STAY
         NWATER= NWATER+ 1
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = O1(1)
         CORD(2,NFFAT) = O1(2)
         CORD(3,NFFAT) = O1(3)
         ZANF  (NFFAT) = 8.0D+00
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = H2(1)
         CORD(2,NFFAT) = H2(2)
         CORD(3,NFFAT) = H2(3)
         ZANF  (NFFAT) = 1.0D+00
         NFFAT = NFFAT + 1
         CORD(1,NFFAT) = H3(1)
         CORD(2,NFFAT) = H3(2)
         CORD(3,NFFAT) = H3(3)
         ZANF  (NFFAT) = 1.0D+00
 200  CONTINUE
C
      IF(NFFAT.GT.MXFFAT) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY NFFAT ATOMS IN ADDSPHWAT. INCREASE MXFFAT'
         CALL ABRT
      END IF
C
      DO IFFAT = NFFAT0+1, NFFAT-2, 3
         IF(IFFAT.EQ.NFFAT0+1) THEN
            CALL RDHOH(ATMNAM,ZMAS,ONEMAS,CHARG,POL,SIG,EPS,
     *                 SIG2,EPS2,BOND0,FCBOND,
     *                 ANGL0,FCANGL,IPAIR,KLIST,
     *                 CLPR,ZLPR,NLPR,NFFAT0+1,L1213J,ITYPWAT)
         ELSE
            DO KK = 0, 2
               ATMNAM(IFFAT+KK) = ATMNAM(IFFAT+KK-3)
               ZMAS  (IFFAT+KK) = ZMAS(IFFAT+KK-3)
               ONEMAS(IFFAT+KK) = ONEMAS(IFFAT+KK-3)
               CHARG (IFFAT+KK) = CHARG(IFFAT+KK-3)
               POL   (IFFAT+KK) = POL(IFFAT+KK-3)
               SIG   (IFFAT+KK) = SIG(IFFAT+KK-3)
               EPS   (IFFAT+KK) = EPS(IFFAT+KK-3)
               SIG2  (IFFAT+KK) = SIG2(IFFAT+KK-3)
               EPS2  (IFFAT+KK) = EPS2(IFFAT+KK-3)
               CLPR(1,IFFAT+KK) = CLPR(1,IFFAT+KK-3)
               ZLPR(1,IFFAT+KK) = ZLPR(1,IFFAT+KK-3)
               CLPR(2,IFFAT+KK) = CLPR(2,IFFAT+KK-3)
               ZLPR(2,IFFAT+KK) = ZLPR(2,IFFAT+KK-3)
               CLPR(3,IFFAT+KK) = CLPR(3,IFFAT+KK-3)
               ZLPR(3,IFFAT+KK) = ZLPR(3,IFFAT+KK-3)
               CLPR(4,IFFAT+KK) = CLPR(4,IFFAT+KK-3)
               ZLPR(4,IFFAT+KK) = ZLPR(4,IFFAT+KK-3)
               NLPR  (IFFAT+KK) = 2
            ENDDO
            DO KK=1, 2
               NBOND = NBOND + 1
               IPAIR(1,NBOND)  = IPAIR(1,NBOND-2)+3
               IPAIR(2,NBOND)  = IPAIR(2,NBOND-2)+3
               FCBOND(NBOND)   = FCBOND(NBOND-2)
               BOND0(NBOND)    = BOND0(NBOND-2)
            ENDDO
C
            NANGL = NANGL + 1
            KLIST(1,NANGL)  = KLIST(1,NANGL-1)+3
            KLIST(2,NANGL)  = KLIST(2,NANGL-1)+3
            KLIST(3,NANGL)  = KLIST(3,NANGL-1)+3
            FCANGL(NANGL)   = FCANGL(NANGL-1)
            ANGL0(NANGL)    = ANGL0(NANGL-1)
C
            DO KK=1, 3
               N1213J = N1213J + 1
               L1213J(1,N1213J) = L1213J(1,N1213J-3)+3
               L1213J(2,N1213J) = L1213J(2,N1213J-3)+3
            ENDDO
         END IF
      ENDDO
      IF(NBOND.GT.MXBOND) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY BONDS IN ADDSPHWAT. INCREASE MXBOND'
         CALL ABRT
      END IF
      IF(NANGL.GT.MXANGL) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: TOO MANY ANGLES IN ADDSPHWAT. INCREASE MXANGL'
         CALL ABRT
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK RDIONS
      SUBROUTINE RDIONS(RNAME,ZMAS,ONEMAS,
     *                  CHARG,POL,SIG,EPS,
     *                  SIG2,EPS2,
     *                  CLPR,ZLPR,NLPR,IFFAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      CHARACTER*8 RNAME
      CHARACTER*10 WORD,FFNAME
      CHARACTER*256 QPFILE
C
      DIMENSION ZMAS(*),ONEMAS(*),CHARG(*),POL(*),
     *          SIG(*),EPS(*),
     *          SIG2(*),EPS2(*),
     *          CLPR(4,*),ZLPR(4,*),NLPR(*)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAY 2011, LINCOLN
C
C     -- READ IN IONS PARAMETERS FROM LIBRARY --
C
      IF(MASWRK) THEN
         CALL GENQPFILE('CHARMM22.LIB ',QPFILE,LENQP)
         OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      END IF
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,RNAME,IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: ',RNAME,' NOT IN LIBRARY'
         CALL ABRT
      END IF 
      CALL OPNCRD(12,-IW)
C
  100 CONTINUE   
      CALL RDCARD('QUANPO  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF
      WORD ='          '
      KSIZE = -10
      CALL GSTRNG(WORD,KSIZE)
C
      IF(WORD.EQ.'COORDINATE'.OR.
     *   WORD.EQ.'BOND      '.OR.
     *   WORD.EQ.'ANGLE     '.OR.
     *   WORD.EQ.'DIHROT    '.OR.
     *   WORD.EQ.'DIHBND    '.OR.
     *   WORD.EQ.'WAGGING   ') THEN
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'PARAMETERS') THEN
         IERR = 0
         IEOF = 0
         CALL RDCARD('RDPARAMT',IEOF)
         FFNAME = '          '
         LGSTR=-10
         CALL GSTRNG(FFNAME,LGSTR)
         ZMAS(IFFAT)  = RFIND('FFMASS  ',IERR)*1822.88850204D+00
         ONEMAS(IFFAT)= 1.0D+00/ZMAS(IFFAT)
         CHARG(IFFAT) = RFIND('FFCHARGE',IERR)
         POL(IFFAT)   = RFIND('FFPOL   ',IERR)*TOBOHR**3
         SIG(IFFAT)   = RFIND('FFSIGMA ',IERR)*TOBOHR
         EPS(IFFAT)   = RFIND('FFEPSILN',IERR)*TOHART
         SIG2(IFFAT)  = RFIND('FFSIGMA ',IERR)*TOBOHR
         EPS2(IFFAT)  = RFIND('FFEPSILN',IERR)*TOHART
C        - CHARMM22 PARAMETER FILE USES RMIN/2 INSTAED OF SIGMA
         SIG(IFFAT)  = SIG(IFFAT) *1.781797436280679D+00
         SIG2(IFFAT) = SIG2(IFFAT)*1.781797436280679D+00
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'QMMMREP   ') THEN
         IERR = 0
         IEOF = 0
         CALL RDCARD('RDQMMMPDB',IEOF)
         FFNAME = '          '
         LGSTR=-10
         CALL GSTRNG(FFNAME,LGSTR)
         NTERMS = IFIND('NTERM   ',IERR)
         DO II = 1, NTERMS
            CLPR(II,IFFAT) = RFIND('CLPR    ',IERR)
            ZLPR(II,IFFAT) = RFIND('ZLPR    ',IERR)
         ENDDO
         NLPR(IFFAT) = 2
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'$END      ') THEN
         IF(MASWRK) CLOSE(12)      
         RETURN
      END IF
C
      END
C*MODULE QUANPO  *DECK RDHOH
      SUBROUTINE RDHOH(ATMNAM,ZMAS,ONEMAS,
     *                 CHARG,POL,SIG,EPS,
     *                 SIG2,EPS2,
     *                 BOND0,FCBOND,
     *                 ANGL0,FCANGL,
     *                 IPAIR,
     *                 KLIST,
     *                 CLPR,ZLPR,NLPR,IFFAT,L1213J,ITYPWAT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
      PARAMETER (DEGREE=57.2957795130823D+00, TORAD=1.0D+00/DEGREE)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
C
      CHARACTER*8 RNAME
      CHARACTER*10 WORD,ATMNAM,FFNAME,HEAD
      CHARACTER*256 QPFILE
C
      DIMENSION ATMNAM(*),ZMAS(*),ONEMAS(*),CHARG(*),POL(*),
     *          SIG(*),EPS(*),
     *          SIG2(*),EPS2(*),
     *          BOND0(*),FCBOND(*),
     *          ANGL0(*),FCANGL(*),
     *          IPAIR(2,*),
     *          KLIST(3,*),
     *          CLPR(4,*),ZLPR(4,*),NLPR(*),L1213J(2,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAY 2011, LINCOLN
C
C     -- READ IN WATER PARAMETERS FROM LIBRARY --
C
      WRITE(RNAME,'(A5,I3)') ' $HOH', ITYPWAT
      IF(MASWRK) THEN
         CALL GENQPFILE('CHARMM22.LIB ',QPFILE,LENQP)
         OPEN(12,FILE=QPFILE(1:LENQP),STATUS='OLD')
      END IF
      IEOF=0
      CALL SEQREW(12)
      CALL FNDGRP(12,RNAME,IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: ',RNAME,' NOT IN LIBRARY'
         CALL ABRT
      END IF 
      CALL OPNCRD(12,-IW)
C
  100 CONTINUE   
      CALL RDCARD('QUANPO  ',IEOF)
      IF(IEOF.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*)
     *   'ERROR: END OF FILE READING LIBRARY'
         CALL ABRT
      END IF
      WORD ='          '
      KSIZE = -10
      CALL GSTRNG(WORD,KSIZE)
C
      IF(WORD.EQ.'COORDINATE'.OR.
     *   WORD.EQ.'DIHROT    '.OR.
     *   WORD.EQ.'DIHBND    '.OR.
     *   WORD.EQ.'WAGGING   ') THEN
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'PARAMETERS') THEN
         IERR = 0
         IEOF = 0
         DO K=0,2
            CALL RDCARD('RDPARAMT',IEOF)
            FFNAME = '          '
            LGSTR=-10
            CALL GSTRNG(FFNAME,LGSTR)
            ATMNAM(IFFAT+K) = FFNAME
            ZMAS(IFFAT+K)  = RFIND('FFMASS  ',IERR)*1822.88850204D+00
            ONEMAS(IFFAT+K)= 1.0D+00/ZMAS(IFFAT+K)
            CHARG(IFFAT+K) = RFIND('FFCHARGE',IERR)
            POL(IFFAT+K)   = RFIND('FFPOL   ',IERR)*TOBOHR**3
            SIG(IFFAT+K)   = RFIND('FFSIGMA ',IERR)*TOBOHR
            EPS(IFFAT+K)   = RFIND('FFEPSILN',IERR)*TOHART
            SIG2(IFFAT+K)  = RFIND('FFSIGMA ',IERR)*TOBOHR
            EPS2(IFFAT+K)  = RFIND('FFEPSILN',IERR)*TOHART
C           - CHARMM22 PARAMETER FILE USES RMIN/2 INSTAED OF SIGMA
            SIG(IFFAT+K)  = SIG(IFFAT+K) *1.781797436280679D+00
            SIG2(IFFAT+K) = SIG2(IFFAT+K)*1.781797436280679D+00
         ENDDO
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'QMMMREP   ') THEN
         IERR = 0
         IEOF = 0
         DO K=0,2
            CALL RDCARD('RDQMMMPDB',IEOF)
            FFNAME = '          '
            LGSTR=-10
            CALL GSTRNG(FFNAME,LGSTR)
            NTERMS = IFIND('NTERM   ',IERR)
            DO II = 1, NTERMS
               CLPR(II,IFFAT+K) = RFIND('CLPR    ',IERR)
               ZLPR(II,IFFAT+K) = RFIND('ZLPR    ',IERR)
            ENDDO
            NLPR(IFFAT+K) = 2
         ENDDO
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'BOND      ') THEN 
         IERR = 0
         IEOF = 0
         DO K=1,2
            CALL RDCARD('RDBOND  ',IEOF)
            HEAD='          '
            LGSTR=-10  
            CALL GSTRNG(HEAD,LGSTR)
            NBOND = NBOND + 1
            IPAIR(1,NBOND) = IFIND('IPAIR  ',IERR) + IFFAT - 1
            IPAIR(2,NBOND) = IFIND('IPAIR  ',IERR) + IFFAT - 1
            FCBOND(NBOND)  = RFIND('FCBOND  ',IERR)*TOANGS*TOANGS*TOHART
            BOND0(NBOND)   = RFIND('R0      ',IERR)*TOBOHR
            N1213J = N1213J + 1
            L1213J(1,N1213J) = IPAIR(1,NBOND)
            L1213J(2,N1213J) = IPAIR(2,NBOND)
         ENDDO
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'ANGLE     ') THEN
         IERR = 0
         IEOF = 0
         CALL RDCARD('RDANGL  ',IEOF)
         HEAD='          '
         LGSTR=-10
         CALL GSTRNG(HEAD,LGSTR)
         NANGL = NANGL + 1
         KLIST(1,NANGL) = IFIND('KLIST1  ',IERR) + IFFAT - 1
         KLIST(2,NANGL) = IFIND('KLIST2  ',IERR) + IFFAT - 1
         KLIST(3,NANGL) = IFIND('KLIST3  ',IERR) + IFFAT - 1
         FCANGL(NANGL)  = RFIND('FCANGL  ',IERR)*TOHART
         ANGL0(NANGL)   = RFIND('ANGL0   ',IERR)*TORAD
         N1213J = N1213J + 1
         L1213J(1,N1213J) = KLIST(1,NANGL)
         L1213J(2,N1213J) = KLIST(3,NANGL)
         CALL FNDGRP(12,' STOP   ',IEOF)
         GOTO 100
      END IF
C
      IF(WORD.EQ.'$END      ') THEN
         IF(MASWRK) CLOSE(12)      
         RETURN
      END IF
C
      END
C*MODULE QUANPO  *DECK FFBOND
      SUBROUTINE FFBOND(KFFAT,IPAIR,ZANF,CORD,KBOND)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION RCOV(86),ZANF(*),CORD(3,*)
C
      PARAMETER (TOANGS=0.52917724924D+00)
C
      DIMENSION IPAIR(2,*)
C
C      COVALENT RADII FROM J.EMSLEY, "THE ELEMENTS", 2ND EDITION, 1991
C      EXCEPT VAN DER WAALS RADII FOR HE,NE,AR,KR (SAME SOURCE),
C      AND GUESSES FOR NA,V,CR,RB,TC,PM,EU,YB,AT,RN
C
      DATA (RCOV(NUCZ),NUCZ=1,2)/0.30D+00,1.22D+00/
      DATA (RCOV(NUCZ),NUCZ=3,10)
     *  /1.23D+00,0.89D+00,0.88D+00,0.77D+00,
     *   0.70D+00,0.66D+00,0.58D+00,1.60D+00/
      DATA (RCOV(NUCZ),NUCZ=11,18)
     *  /1.66D+00,1.36D+00,1.25D+00,1.17D+00,
     *   1.10D+00,1.04D+00,0.99D+00,1.91D+00/
      DATA (RCOV(NUCZ),NUCZ=19,36)
     *  /2.03D+00,1.74D+00,
     *   1.44D+00,1.32D+00,1.22D+00,1.19D+00,1.17D+00,
     *   1.165D+00,1.16D+00,1.15D+00,1.17D+00,1.25D+00,
     *   1.25D+00,1.22D+00,1.21D+00,1.17D+00,1.14D+00,1.98D+00/
      DATA (RCOV(NUCZ),NUCZ=37,54)
     *  /2.22D+00,1.92D+00,
     *   1.62D+00,1.45D+00,1.34D+00,1.29D+00,1.27D+00,
     *   1.24D+00,1.25D+00,1.28D+00,1.34D+00,1.41D+00,
     *   1.50D+00,1.40D+00,1.41D+00,1.37D+00,1.33D+00,2.09D+00/
      DATA (RCOV(NUCZ),NUCZ=55,86)
     *  /2.35D+00,1.98D+00,
     *   1.69D+00,1.65D+00,1.65D+00,1.64D+00,1.65D+00,1.66D+00,1.65D+00,
     *   1.61D+00,1.59D+00,1.59D+00,1.58D+00,1.57D+00,1.56D+00,1.56D+00,
     *   1.56D+00,1.44D+00,1.34D+00,1.30D+00,1.28D+00,
     *   1.26D+00,1.26D+00,1.29D+00,1.34D+00,1.44D+00,
     *   1.55D+00,1.54D+00,1.52D+00,1.53D+00,1.50D+00,2.20D+00/
C
C     ADAPTED BY NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
      KBOND=0
      DO 130 I=1,KFFAT
         INUCZ = INT(ZANF(I)) 
         RADI = 1.6D+00
         IF(INUCZ.EQ.1)                 RADI =         RCOV(1)
         IF(INUCZ.GT.1.AND.INUCZ.LE.86) RADI = 1.2D+00*RCOV(INUCZ)
         DO 120 J=I+1,KFFAT
            JNUCZ = INT(ZANF(J))
            RADJ = 1.6D+00
            IF(JNUCZ.EQ.1)                 RADJ =         RCOV(1)
            IF(JNUCZ.GT.1.AND.JNUCZ.LE.86) RADJ = 1.2D+00*RCOV(JNUCZ)
            DIST = SQRT((CORD(1,I)*TOANGS-CORD(1,J)*TOANGS)**2
     *                + (CORD(2,I)*TOANGS-CORD(2,J)*TOANGS)**2
     *                + (CORD(3,I)*TOANGS-CORD(3,J)*TOANGS)**2) 
            BOND = RADI + RADJ
            IF(DIST.LE.BOND) THEN
               KBOND = KBOND + 1
               IPAIR(1,KBOND) = I
               IPAIR(2,KBOND) = J
            END IF
  120    CONTINUE
  130 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFANGL
      SUBROUTINE FFANGL(IPAIR,KBOND,KLIST,KANGL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1,P2,P3,P4
C
      DIMENSION IPAIR(2,*),KLIST(3,*)
C
C     HUI LI, MAR 2011, LINCOLN
C
C     ---- GET ANGLE LIST ----
C
      KANGL=0
      DO IBOND = 1, KBOND
         P1 = IPAIR(1,IBOND)
         P2 = IPAIR(2,IBOND)
         DO JBOND = IBOND+1, KBOND
            P3 = IPAIR(1,JBOND)
            P4 = IPAIR(2,JBOND)
            IF(P3.EQ.P2) THEN
               KANGL = KANGL + 1
               KLIST(1,KANGL) = MIN(P1,P4)
               KLIST(2,KANGL) = P2
               KLIST(3,KANGL) = MAX(P1,P4)
            END IF
         ENDDO
      ENDDO
      DO IBOND = 1, KBOND
         P1 = IPAIR(1,IBOND)
         P2 = IPAIR(2,IBOND)
         DO JBOND = IBOND+1, KBOND
            P3 = IPAIR(1,JBOND)
            P4 = IPAIR(2,JBOND)
            IF(P3.EQ.P1) THEN
               KANGL = KANGL + 1
               KLIST(1,KANGL) = MIN(P2,P4)
               KLIST(2,KANGL) = P1
               KLIST(3,KANGL) = MAX(P2,P4)
            END IF
         ENDDO
      ENDDO
      DO IBOND = 1, KBOND
         P1 = IPAIR(1,IBOND)
         P2 = IPAIR(2,IBOND)
         DO JBOND = IBOND+1, KBOND
            P3 = IPAIR(1,JBOND)
            P4 = IPAIR(2,JBOND)
            IF(P2.EQ.P4) THEN
               KANGL = KANGL + 1
               KLIST(1,KANGL) = MIN(P1,P3)
               KLIST(2,KANGL) = P2
               KLIST(3,KANGL) = MAX(P1,P3)
            END IF
         ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFDIHR
      SUBROUTINE FFDIHR(KLIST,KANGL,LLIST,KDIHR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION KLIST(3,*),LLIST(4,*)
C
C     HUI LI, APR 2011, LINCOLN
C
C     ---- GET DIHEDRAL ROTATION ANGLE LIST ----
C          USE ONLY THE ANGLE LIST
C
      KDIHR=0
      DO I=1, KANGL
         DO J=I+1,KANGL
            IF(KLIST(2,I).EQ.KLIST(1,J).AND.
     *         KLIST(3,I).EQ.KLIST(2,J).AND.
     *         KLIST(1,I).LT.KLIST(3,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(1,I)
                  LLIST(2,KDIHR)=KLIST(2,I)
                  LLIST(3,KDIHR)=KLIST(3,I)
                  LLIST(4,KDIHR)=KLIST(3,J)
            END IF
            IF(KLIST(2,I).EQ.KLIST(1,J).AND.
     *         KLIST(3,I).EQ.KLIST(2,J).AND.
     *         KLIST(1,I).GT.KLIST(3,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(3,J)
                  LLIST(2,KDIHR)=KLIST(3,I)
                  LLIST(3,KDIHR)=KLIST(2,I)
                  LLIST(4,KDIHR)=KLIST(1,I)
            END IF
            IF(KLIST(2,I).EQ.KLIST(3,J).AND.
     *         KLIST(3,I).EQ.KLIST(2,J).AND.
     *         KLIST(1,I).LT.KLIST(1,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(1,I)
                  LLIST(2,KDIHR)=KLIST(2,I)
                  LLIST(3,KDIHR)=KLIST(3,I)
                  LLIST(4,KDIHR)=KLIST(1,J)
            END IF
            IF(KLIST(2,I).EQ.KLIST(3,J).AND.
     *         KLIST(3,I).EQ.KLIST(2,J).AND.
     *         KLIST(1,I).GT.KLIST(1,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(1,J)
                  LLIST(2,KDIHR)=KLIST(3,I)
                  LLIST(3,KDIHR)=KLIST(2,I)
                  LLIST(4,KDIHR)=KLIST(1,I)
            END IF
            IF(KLIST(1,I).EQ.KLIST(2,J).AND.
     *         KLIST(2,I).EQ.KLIST(1,J).AND.
     *         KLIST(3,I).LT.KLIST(3,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(3,I)
                  LLIST(2,KDIHR)=KLIST(2,I)
                  LLIST(3,KDIHR)=KLIST(1,I)
                  LLIST(4,KDIHR)=KLIST(3,J)
            END IF
            IF(KLIST(1,I).EQ.KLIST(2,J).AND.
     *         KLIST(2,I).EQ.KLIST(1,J).AND.
     *         KLIST(3,I).GT.KLIST(3,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(3,J)
                  LLIST(2,KDIHR)=KLIST(1,I)
                  LLIST(3,KDIHR)=KLIST(2,I)
                  LLIST(4,KDIHR)=KLIST(3,I)
            END IF
            IF(KLIST(1,I).EQ.KLIST(2,J).AND.
     *         KLIST(2,I).EQ.KLIST(3,J).AND.
     *         KLIST(3,I).LT.KLIST(1,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(3,I)
                  LLIST(2,KDIHR)=KLIST(2,I)
                  LLIST(3,KDIHR)=KLIST(1,I)
                  LLIST(4,KDIHR)=KLIST(1,J)
            END IF
            IF(KLIST(1,I).EQ.KLIST(2,J).AND.
     *         KLIST(2,I).EQ.KLIST(3,J).AND.
     *         KLIST(3,I).GT.KLIST(1,J)) THEN
                  KDIHR=KDIHR+1
                  LLIST(1,KDIHR)=KLIST(1,J)
                  LLIST(2,KDIHR)=KLIST(1,I)
                  LLIST(3,KDIHR)=KLIST(2,I)
                  LLIST(4,KDIHR)=KLIST(3,I)
            END IF
         ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFDIHB
      SUBROUTINE FFDIHB(CORD,IPAIR,KLIST,NLIST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INTEGER P1, P2, P3, P4
C
      DIMENSION CORD(3,*),IPAIR(2,*),KLIST(3,*),NLIST(4,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
C
C     HUI LI, MAR 2011, LINCOLN
C
C     ---- GET DIHEDRAL BENDING ANGLE LIST ----
C          ONLY THOSE CLOSE TO 0.0 OR 180.0 DEGREE
C          WILL BE SAVED.
C
      NDIHB=0
      DO I=1, NANGL
         DO J=1,NBOND
            IF((KLIST(2,I).EQ.IPAIR(1,J)).AND.
     *         (KLIST(1,I).NE.IPAIR(2,J)).AND.
     *         (KLIST(3,I).NE.IPAIR(2,J)))THEN
                  P1=KLIST(2,I)
                  P2=KLIST(1,I)
                  P3=KLIST(3,I)
                  P4=IPAIR(2,J)
                  GOTO 100
            END IF
            IF((KLIST(2,I).EQ.IPAIR(2,J)).AND.
     *         (KLIST(1,I).NE.IPAIR(1,J)).AND.
     *         (KLIST(3,I).NE.IPAIR(1,J)))THEN
                  P1=KLIST(2,I)
                  P2=KLIST(1,I)
                  P3=KLIST(3,I)
                  P4=IPAIR(1,J)
                  GOTO 100
            END IF
            GOTO 200
C
 100        CONTINUE
            X12=CORD(1,P1)-CORD(1,P2)
            Y12=CORD(2,P1)-CORD(2,P2)
            Z12=CORD(3,P1)-CORD(3,P2)
            X23=CORD(1,P2)-CORD(1,P3)
            Y23=CORD(2,P2)-CORD(2,P3)
            Z23=CORD(3,P2)-CORD(3,P3)
            X34=CORD(1,P3)-CORD(1,P4)
            Y34=CORD(2,P3)-CORD(2,P4)
            Z34=CORD(3,P3)-CORD(3,P4)
C
            R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
            R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
            R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
C
            COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
            COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
            SIN2123= 1.0D+00-COS123*COS123
            SIN2234= 1.0D+00-COS234*COS234
            SIN123 = SQRT(SIN2123)
            SIN234 = SQRT(SIN2234)
            ONESIN = 1.0D+00/(SIN123*SIN234)
C
            COSTOR = ONESIN*(COS123*COS234-
     *               ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
            IF(ABS(COSTOR).GT.0.8660D+00) THEN   !   30 DEGREE
               NDIHB=NDIHB+1
               NLIST(1,NDIHB)=P1
               NLIST(2,NDIHB)=P2
               NLIST(3,NDIHB)=P3
               NLIST(4,NDIHB)=P4
            END IF
 200        CONTINUE
         ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK NONBOND
      SUBROUTINE NONBOND(ISTEP,CORD,CORDSV,NONLST,NONLSTQ,L1213J,
     *                   IDGROUP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      DIMENSION CORD(3,*),CORDSV(3,*),NONLST(2,*),NONLSTQ(*),
     *          L1213J(2,*),IDGROUP(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAR 2011, LINCOLN
C
C     -- TEST IF A NEW LIST IS NECESSARY --
C        DO NOT UPDATE THE LIST IF ISTEP<NFIXPDB
C
      IF(ISTEP.GT.0 .AND. ISTEP.LT.NFIXPDB) RETURN
      IF(ISTEP.GT.0 .AND. (ISTEP.LT.100.AND.IADDWAT.EQ.2)) RETURN
C
      DISMAX = -1.0D+30
      DO IFFAT=1, NFFAT
         DX = CORD(1,IDGROUP(IFFAT))-CORDSV(1,IDGROUP(IFFAT))
         DY = CORD(2,IDGROUP(IFFAT))-CORDSV(2,IDGROUP(IFFAT))
         DZ = CORD(3,IDGROUP(IFFAT))-CORDSV(3,IDGROUP(IFFAT))
         DIS= DX*DX+DY*DY+DZ*DZ
         DISMAX = MAX(DISMAX,DIS)
      ENDDO
      DIS = (QMCX-QMCXSV)**2+(QMCY-QMCYSV)**2+(QMCZ-QMCZSV)**2
      DISMAX = MAX(DISMAX,DIS)
      IF(DISMAX.LT.(BUFLIST/2.0D+00)**2) RETURN
C
      IF(MASWRK) WRITE(IW,'(1X,A,I10)')
     *           'UPDATING NONBOND LIST AT STEP ',ISTEP
      CALL DCOPY(3*NFFAT,CORD,1,CORDSV,1)
      QMCXSV = QMCX
      QMCYSV = QMCY
      QMCZSV = QMCZ
C
C     -- GENERATE MM-MM NONBOND LIST --
C
      RLIST   = SQRT(SWRR2) + BUFLIST
      RRLIST  = RLIST**2
C
      KFULL   = 0
      NTODO   = 0    !  NTODO WILL BE DIFFERENT FOR DIFFERENT PROCESSOR.
      IPCOUNT = ME - 1
      DO 200 IFFAT = 1, NFFAT
         DO 210 JFFAT = IFFAT+1, NFFAT
            XGRP  = CORD(1,IDGROUP(IFFAT)) - CORD(1,IDGROUP(JFFAT))
            YGRP  = CORD(2,IDGROUP(IFFAT)) - CORD(2,IDGROUP(JFFAT))
            ZGRP  = CORD(3,IDGROUP(IFFAT)) - CORD(3,IDGROUP(JFFAT))
            PBCX  = XBOX * ANINT(XGRP/XBOX)
            PBCY  = YBOX * ANINT(YGRP/YBOX)
            PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
            XGRP  = XGRP - PBCX
            YGRP  = YGRP - PBCY
            ZGRP  = ZGRP - PBCZ
            IF(ABS(XGRP).GT.RLIST) GOTO 210
            IF(ABS(YGRP).GT.RLIST) GOTO 210
            IF(ABS(ZGRP).GT.RLIST) GOTO 210
            R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
            IF(R2.GT.RRLIST) GOTO 210
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 210
            END IF
            NTODO = NTODO + 1
            NONLST(1,NTODO) = IFFAT
            NONLST(2,NTODO) = JFFAT
            IF(NTODO.GT.MXLIST) KFULL = 1
 210     CONTINUE
 200  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMI(2408,KFULL,1)
      IF(MASWRK.AND.KFULL.GT.0) THEN
         WRITE(IW,*)'ERROR: NONBOND LIST IS FULL.',
     *              ' INCREASE MXLIST.'
         CALL ABRT
      END IF
C
      DO 220 ITODO=1, NTODO
         DO 230 I1213J=1, N1213J
            IF((NONLST(1,ITODO).EQ.L1213J(1,I1213J) .AND. 
     *          NONLST(2,ITODO).EQ.L1213J(2,I1213J)      ) .OR.
     *         (NONLST(1,ITODO).EQ.L1213J(2,I1213J) .AND.
     *          NONLST(2,ITODO).EQ.L1213J(1,I1213J)      )     ) THEN
                NONLST(1,ITODO) = 0
                NONLST(2,ITODO) = 0
                GOTO 220
            END IF
 230     CONTINUE
 220  CONTINUE
C
C     -- GENERATE QM-MM LIST: MM ATOMS CLOSE TO QMCX,Y,Z
C        THIS IS DONE ON EVERY CPU BECAUSE
C        WE NEED THE CORRECT AND TOTAL NTODOQ EVERYWHERE.
C        PARALLEL IS AT THE QM LEVEL, NOT MM.
C
      RLISTQ  = SQRT(SWRR2Q) + BUFLIST
      RRLISTQ = RLISTQ**2
C
      NTODOQ  = 0
      DO 300 IFFAT=1, NFFAT
         XGRP  = CORD(1,IDGROUP(IFFAT)) - QMCX
         YGRP  = CORD(2,IDGROUP(IFFAT)) - QMCY
         ZGRP  = CORD(3,IDGROUP(IFFAT)) - QMCZ
         PBCX  = XBOX * ANINT(XGRP/XBOX)
         PBCY  = YBOX * ANINT(YGRP/YBOX)
         PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         IF(ABS(XGRP).GT.RLISTQ) GOTO 300
         IF(ABS(YGRP).GT.RLISTQ) GOTO 300
         IF(ABS(ZGRP).GT.RLISTQ) GOTO 300
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.RRLISTQ) GOTO 300
         NTODOQ = NTODOQ + 1
         NONLSTQ(NTODOQ) = IFFAT
 300  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK E00012
      SUBROUTINE E00012(CORD,FFGRD,BOND0,FCBOND,IPAIR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      INTEGER P1, P2
C
      DIMENSION CORD(3,*),FFGRD(3,*),IPAIR(2,*),BOND0(*),FCBOND(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     FORMULA:  E = K*(R-R0)**2
C
      EN12=0.0D+00
      IPCOUNT = ME - 1
      DO 100 IBOND=1,NBOND
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         FCONST  = FCBOND(IBOND)
         IF(FCONST.EQ.0.0D+00) GOTO 100
         P1      = IPAIR(1,IBOND)
         P2      = IPAIR(2,IBOND)
         R0      = BOND0(IBOND)
         X       = CORD(1,P1) - CORD(1,P2)
         Y       = CORD(2,P1) - CORD(2,P2)
         Z       = CORD(3,P1) - CORD(3,P2)
         R2      = X*X + Y*Y + Z*Z
         R       = SQRT(R2)
         EN12    = EN12 + FCONST*(R-R0)*(R-R0)
         DUM     = 2.0D+00*FCONST*(R-R0)/R
         DEX     = DUM*X
         DEY     = DUM*Y
         DEZ     = DUM*Z
         FFGRD(1,P1)=FFGRD(1,P1) + DEX
         FFGRD(2,P1)=FFGRD(2,P1) + DEY
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ
         FFGRD(1,P2)=FFGRD(1,P2) - DEX
         FFGRD(2,P2)=FFGRD(2,P2) - DEY
         FFGRD(3,P2)=FFGRD(3,P2) - DEZ
         VIR(1)     =VIR(1)      + DEX*X
         VIR(2)     =VIR(2)      + DEY*Y
         VIR(3)     =VIR(3)      + DEZ*Z
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK E00123
      SUBROUTINE E00123(CORD,FFGRD,ANGL0,FCANGL,KLIST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      INTEGER P1, P2, P3
C
      PARAMETER (PI=3.14159265358979323846264338D+00, PT5=0.5D+00,
     *           ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, FOUR=4.0D+00,
     *           EIGHT=8.0D+00, DEG20=0.349065850398866D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),KLIST(3,*),ANGL0(*),FCANGL(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     FORMULA:  E = K*(A-A0)**2
C                 + 4.0*K*(A-A0-20)**2  (TOO LARGE POSITIVE DEVIATION)
C                 + 4.0*K*(A-A0+20)**2  (TOO LARGE NEGATIVE DEVIATION)
C     FORMULA:  E = 2*K(1+COS(A))       (FOR A0 = 180 DEGREES)
C
      EN123=ZERO
      IPCOUNT = ME - 1
      DO 100 IANGL=1,NANGL
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         FCONST =FCANGL(IANGL)
         IF(FCONST.EQ.ZERO) GOTO 100
         P1     =KLIST(1,IANGL)
         P2     =KLIST(2,IANGL)
         P3     =KLIST(3,IANGL)
         X13    =CORD(1,P1)-CORD(1,P3)
         Y13    =CORD(2,P1)-CORD(2,P3)
         Z13    =CORD(3,P1)-CORD(3,P3)
         X12    =CORD(1,P1)-CORD(1,P2)
         Y12    =CORD(2,P1)-CORD(2,P2)
         Z12    =CORD(3,P1)-CORD(3,P2)
         X23    =CORD(1,P2)-CORD(1,P3)
         Y23    =CORD(2,P2)-CORD(2,P3)
         Z23    =CORD(3,P2)-CORD(3,P3)
C
         R13R13 =X13*X13+Y13*Y13+Z13*Z13
         R12R12 =X12*X12+Y12*Y12+Z12*Z12
         R23R23 =X23*X23+Y23*Y23+Z23*Z23
         R12    =SQRT(R12R12)
         R23    =SQRT(R23R23)
C
         ONEBC  =ONE/(R12*R23)
         COSA   =(R12R12 + R23R23 - R13R13)*ONEBC*PT5
C
         IF(ABS(ANGL0(IANGL)-PI).GT.1.0D-06) THEN
            IF(COSA.GT. ONE) COSA = ONE
            IF(COSA.LT.-ONE) COSA =-ONE
            ALPHA  =ACOS(COSA)
            SINA   =SQRT(ONE - COSA*COSA)
            DELT   =ALPHA - ANGL0(IANGL)
            EN123  =EN123 + FCONST*DELT*DELT
C
            IF(DELT.GT. DEG20) EN123 = EN123 + 
     *                              FOUR*FCONST*(DELT-DEG20)**2
            IF(DELT.LT.-DEG20) EN123 = EN123 + 
     *                              FOUR*FCONST*(DELT+DEG20)**2
         ELSE
            EN123 = EN123 + TWO*FCONST*(ONE+COSA)
         END IF
C
C        - CALCULATE BENDING ENERGY GRADIENTS
C
         DR23X2 =-X23*ONEBC
         DR23Y2 =-Y23*ONEBC
         DR23Z2 =-Z23*ONEBC
         DR12X1A=-COSA*X12/R12R12
         DR12Y1A=-COSA*Y12/R12R12
         DR12Z1A=-COSA*Z12/R12R12
C
         DR23X2A=COSA*X23/R23R23
         DR23Y2A=COSA*Y23/R23R23
         DR23Z2A=COSA*Z23/R23R23
         DR12X1 =X12*ONEBC
         DR12Y1 =Y12*ONEBC
         DR12Z1 =Z12*ONEBC
C
         IF(ABS(ANGL0(IANGL)-PI).GT.1.0D-06) THEN
            DUMY   = -TWO*FCONST*DELT/SINA
            IF(DELT.GT. DEG20)DUMY=DUMY-EIGHT*FCONST*(DELT-DEG20)/SINA
            IF(DELT.LT.-DEG20)DUMY=DUMY-EIGHT*FCONST*(DELT+DEG20)/SINA
         ELSE
            DUMY   = TWO*FCONST
         END IF
C
         DEX1   = DUMY*(DR12X1A+DR23X2)
         DEY1   = DUMY*(DR12Y1A+DR23Y2)
         DEZ1   = DUMY*(DR12Z1A+DR23Z2)
         FFGRD(1,P1)=FFGRD(1,P1) + DEX1
         FFGRD(2,P1)=FFGRD(2,P1) + DEY1
         FFGRD(3,P1)=FFGRD(3,P1) + DEZ1
C
         DEX3   = DUMY*(DR23X2A+DR12X1)
         DEY3   = DUMY*(DR23Y2A+DR12Y1)
         DEZ3   = DUMY*(DR23Z2A+DR12Z1)
         FFGRD(1,P3)=FFGRD(1,P3)+DEX3
         FFGRD(2,P3)=FFGRD(2,P3)+DEY3
         FFGRD(3,P3)=FFGRD(3,P3)+DEZ3
C
         FFGRD(1,P2)=FFGRD(1,P2)-DEX1-DEX3
         FFGRD(2,P2)=FFGRD(2,P2)-DEY1-DEY3
         FFGRD(3,P2)=FFGRD(3,P2)-DEZ1-DEZ3
C
         VIR(1)     =VIR(1)  + DEX1*X12 - DEX3*X23
         VIR(2)     =VIR(2)  + DEY1*Y12 - DEY3*Y23
         VIR(3)     =VIR(3)  + DEZ1*Z12 - DEZ3*Z23
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK E123R4
      SUBROUTINE E123R4(CORD,FFGRD,VROT,GAMA,NNN,LLIST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      INTEGER P1, P2, P3, P4
C
      PARAMETER (PI=3.14159265358979323846264338D+00, ONE=1.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),VROT(*),
     *          GAMA(*),NNN(*),LLIST(4,*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     FORMULA:  E = VROT*[1 + COS(NNN*TOR - GAMA)]
C
      EN123R4=0.0D+00
      IPCOUNT = ME - 1
      DO 100 I=1,NDIHR
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         VR    = VROT(I)
         IF(VR.EQ.0.0D+00) GOTO 100
         REALN = DBLE(NNN(I))
         IF(REALN.EQ.0.0D+00) GOTO 100
         GAMMA = GAMA(I)
         P1=LLIST(1,I)
         P2=LLIST(2,I)
         P3=LLIST(3,I)
         P4=LLIST(4,I)
C
         X12=CORD(1,P1)-CORD(1,P2)
         Y12=CORD(2,P1)-CORD(2,P2)
         Z12=CORD(3,P1)-CORD(3,P2)
         X13=CORD(1,P1)-CORD(1,P3)
         Y13=CORD(2,P1)-CORD(2,P3)
         Z13=CORD(3,P1)-CORD(3,P3)
         X23=CORD(1,P2)-CORD(1,P3)
         Y23=CORD(2,P2)-CORD(2,P3)
         Z23=CORD(3,P2)-CORD(3,P3)
         X34=CORD(1,P3)-CORD(1,P4)
         Y34=CORD(2,P3)-CORD(2,P4)
         Z34=CORD(3,P3)-CORD(3,P4)
C
         R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
         R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
C
         COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123= 1.0D+00-COS123*COS123
         SIN2234= 1.0D+00-COS234*COS234
         SIN123 = SQRT(SIN2123)
         SIN234 = SQRT(SIN2234)
         ONESIN = 1.0D+00/(SIN123*SIN234)
C
         COSTOR = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. 1.0D+00) COSTOR= 1.0D+00
         IF(COSTOR.LT.-1.0D+00) COSTOR=-1.0D+00
         TOR    = ACOS(COSTOR)
C        -- DIHEDRAL ANGLE IS 0 - 360 DEGREES
         XNORM  = -Y23*Z34 + Z23*Y34
         YNORM  = -Z23*X34 + X23*Z34
         ZNORM  = -X23*Y34 + Y23*X34
         DOTN12 = X12*XNORM + Y12*YNORM + Z12*ZNORM
         IF(DOTN12.LT.0.0D+00) TOR = 2.0D+00*PI - TOR
C
         ROTA    = REALN*TOR-GAMMA
         EN123R4 = EN123R4 + VR*(ONE + COS(ROTA))
C
C        - CALCULATING DERIVATIVES
C
         A123=1.0D+00/(R12*SIN2123)
         A432=1.0D+00/(R34*SIN2234)
         B123=R12*COS123/R23
         B432=R34*COS234/R23
         C123=B123-1.0D+00
         FACT=VR*REALN*(-SIN(ROTA))
C
         DUMY       =  FACT*A123/(R12*R23)
         DEX1       =  DUMY*(-Y12*Z23+Z12*Y23)
         DEY1       =  DUMY*(-Z12*X23+X12*Z23)
         DEZ1       =  DUMY*(-X12*Y23+Y12*X23)
         FFGRD(1,P1)=FFGRD(1,P1)+DEX1
         FFGRD(2,P1)=FFGRD(2,P1)+DEY1
         FFGRD(3,P1)=FFGRD(3,P1)+DEZ1
C
         DUMY       =  FACT*(-A432)/(R23*R34)
         DEX4       =  DUMY*(-Y23*Z34+Z23*Y34)
         DEY4       =  DUMY*(-Z23*X34+X23*Z34)
         DEZ4       =  DUMY*(-X23*Y34+Y23*X34)
         FFGRD(1,P4)=FFGRD(1,P4)+DEX4
         FFGRD(2,P4)=FFGRD(2,P4)+DEY4
         FFGRD(3,P4)=FFGRD(3,P4)+DEZ4
C
         DEX2       =  C123*DEX1 - B432*DEX4
         DEY2       =  C123*DEY1 - B432*DEY4
         DEZ2       =  C123*DEZ1 - B432*DEZ4
         FFGRD(1,P2)=FFGRD(1,P2)+DEX2
         FFGRD(2,P2)=FFGRD(2,P2)+DEY2
         FFGRD(3,P2)=FFGRD(3,P2)+DEZ2
C
         FFGRD(1,P3)=FFGRD(1,P3)-DEX1-DEX2-DEX4
         FFGRD(2,P3)=FFGRD(2,P3)-DEY1-DEY2-DEY4
         FFGRD(3,P3)=FFGRD(3,P3)-DEZ1-DEZ2-DEZ4
C
         VIR(1)     =VIR(1)  + DEX1*X13 + DEX2*X23 - DEX4*X34
         VIR(2)     =VIR(2)  + DEY1*Y13 + DEY2*Y23 - DEY4*Y34
         VIR(3)     =VIR(3)  + DEZ1*Z13 + DEZ2*Z23 - DEZ4*Z34
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK E123B4
      SUBROUTINE E123B4(CORD,FFGRD,DIHB0,FCDIHB,NLIST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      INTEGER P1, P2, P3, P4
C
      PARAMETER (PI=3.14159265358979323846264338D+00, TWO=2.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),DIHB0(*),FCDIHB(*),NLIST(4,*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, FEB 2011, LINCOLN
C
C     FORMULA:  E = K*(B-B0)**2
C
      EN123B4=0.0D+00
      IPCOUNT = ME - 1
      DO 100 I=1,NDIHB
         IF(FCDIHB(I).EQ.0.0D+00) GOTO 100
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         FC=FCDIHB(I)
         A0=DIHB0(I)
         P1=NLIST(1,I)
         P2=NLIST(2,I)
         P3=NLIST(3,I)
         P4=NLIST(4,I)
C
         X12=CORD(1,P1)-CORD(1,P2)
         Y12=CORD(2,P1)-CORD(2,P2)
         Z12=CORD(3,P1)-CORD(3,P2)
         X13=CORD(1,P1)-CORD(1,P3)
         Y13=CORD(2,P1)-CORD(2,P3)
         Z13=CORD(3,P1)-CORD(3,P3)
         X23=CORD(1,P2)-CORD(1,P3)
         Y23=CORD(2,P2)-CORD(2,P3)
         Z23=CORD(3,P2)-CORD(3,P3)
         X34=CORD(1,P3)-CORD(1,P4)
         Y34=CORD(2,P3)-CORD(2,P4)
         Z34=CORD(3,P3)-CORD(3,P4)
C
         R12=SQRT(X12*X12+Y12*Y12+Z12*Z12)
         R23=SQRT(X23*X23+Y23*Y23+Z23*Z23)
         R34=SQRT(X34*X34+Y34*Y34+Z34*Z34)
C
         COS123=(-(X12*X23)-(Y12*Y23)-(Z12*Z23))/(R12*R23)
         COS234=(-(X23*X34)-(Y23*Y34)-(Z23*Z34))/(R23*R34)
         SIN2123= 1.0D+00-COS123*COS123
         SIN2234= 1.0D+00-COS234*COS234
         SIN123 = SQRT(SIN2123)
         SIN234 = SQRT(SIN2234)
         ONESIN = 1.0D+00/(SIN123*SIN234)
C
         COSTOR = ONESIN*(COS123*COS234-
     *                    ((+X12*X34+Y12*Y34+Z12*Z34)/(R12*R34)))
         IF(COSTOR.GT. 1.0D+00) COSTOR= 1.0D+00
         IF(COSTOR.LT.-1.0D+00) COSTOR=-1.0D+00
         TOR    = ACOS(COSTOR)
         XNORM  = -Y23*Z34 + Z23*Y34
         YNORM  = -Z23*X34 + X23*Z34
         ZNORM  = -X23*Y34 + Y23*X34
         DOTN12 = X12*XNORM + Y12*YNORM + Z12*ZNORM
C
C        -- TOR FROM ACOS() IS ALWAYS 0 - 180 DEGREE
C           IF A0 =   0, TOR SHOULD BE  -20 TO  +20 DEGREE
C           IF A0 = 180, TOR SHOULD BE +160 TO +200 DEGREE
C
         IF(ABS(A0).LE.0.2D+00.AND.DOTN12.LT.0.0D+00)
     *      TOR= -TOR
         IF(ABS(A0-PI).LE.0.2D+00.AND.DOTN12.LT.0.0D+00)
     *      TOR = 2.0D+00*PI - TOR
C
         EN123B4 = EN123B4 + FC*(TOR-A0)*(TOR-A0)
C
C        -- DERIVATIVES --
C
         A123=1.0D+00/(R12*SIN2123)
         A432=1.0D+00/(R34*SIN2234)
         B123=R12*COS123/R23
         B432=R34*COS234/R23
         C123=B123-1.0D+00
         FACT=TWO*FC*(TOR-A0)
C
         DUMY       =  FACT*A123/(R12*R23)
         DEX1       =  DUMY*(-Y12*Z23+Z12*Y23)
         DEY1       =  DUMY*(-Z12*X23+X12*Z23)
         DEZ1       =  DUMY*(-X12*Y23+Y12*X23)
         FFGRD(1,P1)=FFGRD(1,P1)+DEX1
         FFGRD(2,P1)=FFGRD(2,P1)+DEY1
         FFGRD(3,P1)=FFGRD(3,P1)+DEZ1
C
         DUMY       =  FACT*(-A432)/(R23*R34)
         DEX4       =  DUMY*(-Y23*Z34+Z23*Y34)
         DEY4       =  DUMY*(-Z23*X34+X23*Z34)
         DEZ4       =  DUMY*(-X23*Y34+Y23*X34)
         FFGRD(1,P4)=FFGRD(1,P4)+DEX4
         FFGRD(2,P4)=FFGRD(2,P4)+DEY4
         FFGRD(3,P4)=FFGRD(3,P4)+DEZ4
C
         DEX2       =  C123*DEX1 - B432*DEX4
         DEY2       =  C123*DEY1 - B432*DEY4
         DEZ2       =  C123*DEZ1 - B432*DEZ4
         FFGRD(1,P2)=FFGRD(1,P2)+DEX2
         FFGRD(2,P2)=FFGRD(2,P2)+DEY2
         FFGRD(3,P2)=FFGRD(3,P2)+DEZ2
C
         FFGRD(1,P3)=FFGRD(1,P3)-DEX1-DEX2-DEX4
         FFGRD(2,P3)=FFGRD(2,P3)-DEY1-DEY2-DEY4
         FFGRD(3,P3)=FFGRD(3,P3)-DEZ1-DEZ2-DEZ4
C
         VIR(1)     =VIR(1)  + DEX1*X13 + DEX2*X23 - DEX4*X34
         VIR(2)     =VIR(2)  + DEY1*Y13 + DEY2*Y23 - DEY4*Y34
         VIR(3)     =VIR(3)  + DEZ1*Z13 + DEZ2*Z23 - DEZ4*Z34
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK E234W1
      SUBROUTINE E234W1(CORD,FFGRD,FCWAGG,MLIST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      INTEGER P1, P2, P3, P4
C
      DIMENSION CORD(3,*),FFGRD(3,*),MLIST(4,*),FCWAGG(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     FORMULA:  E = K*W**2
C
      EN234W1 = 0.0D+00
      IPCOUNT = ME - 1
      DO 100 IWAGG = 1, NWAGG
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         FCONST = FCWAGG(IWAGG)
         IF(FCONST.EQ.0.0D+00) GOTO 100
C
C        --- P1 IS THE WAGGING ATOM, P4 IS THE LINKING ATOM ---
C
         P1     = MLIST(1,IWAGG)
         P2     = MLIST(2,IWAGG)
         P3     = MLIST(3,IWAGG)
         P4     = MLIST(4,IWAGG)
C
         X41    = CORD(1,P4)-CORD(1,P1)
         Y41    = CORD(2,P4)-CORD(2,P1)
         Z41    = CORD(3,P4)-CORD(3,P1)
         R41SQ  = X41*X41 + Y41*Y41 + Z41*Z41
         R41    = SQRT(R41SQ)
         ONER41 = 1.0D+00/R41
C
         X42    = CORD(1,P4)-CORD(1,P2)
         Y42    = CORD(2,P4)-CORD(2,P2)
         Z42    = CORD(3,P4)-CORD(3,P2)
         R42SQ  = X42*X42 +Y42*Y42 + Z42*Z42
         R42    = SQRT(R42SQ)
         ONER42 = 1.0D+00/R42
C
         X43    = CORD(1,P4)-CORD(1,P3)
         Y43    = CORD(2,P4)-CORD(2,P3)
         Z43    = CORD(3,P4)-CORD(3,P3)
         R43SQ  = X43*X43 + Y43*Y43 + Z43*Z43
         R43    = SQRT(R43SQ)
         ONER43 = 1.0D+00/R43
C
         X23    = CORD(1,P2)-CORD(1,P3)
         Y23    = CORD(2,P2)-CORD(2,P3)
         Z23    = CORD(3,P2)-CORD(3,P3)
         R23SQ  = X23*X23 + Y23*Y23 + Z23*Z23
         R23    = SQRT(R23SQ)
C
         P4243X = Y42*Z43 - Z42*Y43
         P4243Y = Z42*X43 - X42*Z43
         P4243Z = X42*Y43 - Y42*X43
C
C        --- ANGLE 243 CAN BE 90 -120 ---
         COS243 = (R42*R42 + R43*R43 - R23*R23)/(2.0D+00*R42*R43)
         SIN243 = SQRT(1.0D+00 - COS243*COS243)
         DUM    = 1.0D+00/(SIN243*R42*R43)
         AX     = P4243X*DUM 
         AY     = P4243Y*DUM 
         AZ     = P4243Z*DUM 
C        --- WWW IS LIKELY -30 TO +30 ---
         SINW   = -(AX*X41 + AY*Y41 + AZ*Z41)*ONER41
         COSW   = SQRT(1.0D+00 - SINW*SINW)
         ONECOSW= 1.0D+00/COSW
         WWW    = ASIN(SINW)
         EN234W1= EN234W1 + FCONST*WWW*WWW
C
         C243   = 1.0D+00/(R42*SIN243)
         C342   = 1.0D+00/(R43*SIN243)
         B2     = R42*SINW
         B3     = R43*SINW
C
C        --- CALCULATING DERIVATIVES ---
C
         FACT   = 2.0D+00*FCONST*WWW*ONECOSW
C
         DEX1   = FACT*ONER41*(AX - SINW*(-X41)*ONER41)
         DEY1   = FACT*ONER41*(AY - SINW*(-Y41)*ONER41)
         DEZ1   = FACT*ONER41*(AZ - SINW*(-Z41)*ONER41)
C
         D2X    = -B3*ONER43*(X43*COS243*ONER43 - X42*ONER42)/SIN243
         D2Y    = -B3*ONER43*(Y43*COS243*ONER43 - Y42*ONER42)/SIN243
         D2Z    = -B3*ONER43*(Z43*COS243*ONER43 - Z42*ONER42)/SIN243
         P4341X = (Y43*Z41 - Z43*Y41)/(R43*R41)
         P4341Y = (Z43*X41 - X43*Z41)/(R43*R41)
         P4341Z = (X43*Y41 - Y43*X41)/(R43*R41)
         DEX2   = FACT*C243*(D2X + P4341X)
         DEY2   = FACT*C243*(D2Y + P4341Y)
         DEZ2   = FACT*C243*(D2Z + P4341Z)
C
         D3X    = -B2*ONER42*(X42*COS243*ONER42 - X43*ONER43)/SIN243
         D3Y    = -B2*ONER42*(Y42*COS243*ONER42 - Y43*ONER43)/SIN243
         D3Z    = -B2*ONER42*(Z42*COS243*ONER42 - Z43*ONER43)/SIN243
         P4142X = (Y41*Z42 - Z41*Y42)/(R41*R42)
         P4142Y = (Z41*X42 - X41*Z42)/(R41*R42)
         P4142Z = (X41*Y42 - Y41*X42)/(R41*R42)
         DEX3   = FACT*C342*(D3X + P4142X)
         DEY3   = FACT*C342*(D3Y + P4142Y)
         DEZ3   = FACT*C342*(D3Z + P4142Z)
C
         FFGRD(1,P1)=FFGRD(1,P1)+DEX1
         FFGRD(2,P1)=FFGRD(2,P1)+DEY1
         FFGRD(3,P1)=FFGRD(3,P1)+DEZ1
         FFGRD(1,P2)=FFGRD(1,P2)+DEX2
         FFGRD(2,P2)=FFGRD(2,P2)+DEY2
         FFGRD(3,P2)=FFGRD(3,P2)+DEZ2
         FFGRD(1,P3)=FFGRD(1,P3)+DEX3
         FFGRD(2,P3)=FFGRD(2,P3)+DEY3
         FFGRD(3,P3)=FFGRD(3,P3)+DEZ3
         FFGRD(1,P4)=FFGRD(1,P4)-DEX1-DEX2-DEX3
         FFGRD(2,P4)=FFGRD(2,P4)-DEY1-DEY2-DEY3
         FFGRD(3,P4)=FFGRD(3,P4)-DEZ1-DEZ2-DEZ3
C
         VIR(1)     =VIR(1)  - DEX1*X41 - DEX2*X42 - DEX3*X43
         VIR(2)     =VIR(2)  - DEY1*Y41 - DEY2*Y42 - DEY3*Y43
         VIR(3)     =VIR(3)  - DEZ1*Z41 - DEZ2*Z42 - DEZ3*Z43
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK ECMAP
      SUBROUTINE ECMAP(CORD,FFGRD,MAPLST,CMAPCO)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (DEGREE=57.2957795130823D+00)
      PARAMETER (TOKCAL=627.509469D+00, TOHART=1.0D+00/TOKCAL)
      PARAMETER (ONEFIF=1.0D+00/15.0D+00)
C
      INTEGER P1PSI, P2PSI, P3PSI, P4PSI, P1PHI, P2PHI, P3PHI, P4PHI
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*),FFGRD(3,*),MAPLST(6,*),CMAPCO(4,4,24,24,5)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, APR 2011, LINCOLN
C
      ENCMAP=0.0D+00
      IF(IDOCMAP.EQ.0 .OR. NFFTYP.NE.20022) RETURN
C
      IPCOUNT = ME - 1
      DO 100 ICMAP=1,NCMAP
C        -- CALCULATE PHI AND PSI --
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
C
         ITYPE = MAPLST(6,ICMAP)
C
         P1PHI=MAPLST(1,ICMAP)
         P2PHI=MAPLST(2,ICMAP)
         P3PHI=MAPLST(3,ICMAP)
         P4PHI=MAPLST(4,ICMAP)
         X12PHI=CORD(1,P1PHI)-CORD(1,P2PHI)
         Y12PHI=CORD(2,P1PHI)-CORD(2,P2PHI)
         Z12PHI=CORD(3,P1PHI)-CORD(3,P2PHI)
         X13PHI=CORD(1,P1PHI)-CORD(1,P3PHI)
         Y13PHI=CORD(2,P1PHI)-CORD(2,P3PHI)
         Z13PHI=CORD(3,P1PHI)-CORD(3,P3PHI)
         X23PHI=CORD(1,P2PHI)-CORD(1,P3PHI)
         Y23PHI=CORD(2,P2PHI)-CORD(2,P3PHI)
         Z23PHI=CORD(3,P2PHI)-CORD(3,P3PHI)
         X34PHI=CORD(1,P3PHI)-CORD(1,P4PHI)
         Y34PHI=CORD(2,P3PHI)-CORD(2,P4PHI)
         Z34PHI=CORD(3,P3PHI)-CORD(3,P4PHI)
         R12PHI=SQRT(X12PHI*X12PHI+Y12PHI*Y12PHI+Z12PHI*Z12PHI)
         R23PHI=SQRT(X23PHI*X23PHI+Y23PHI*Y23PHI+Z23PHI*Z23PHI)
         R34PHI=SQRT(X34PHI*X34PHI+Y34PHI*Y34PHI+Z34PHI*Z34PHI)
         COS123PHI=(-(X12PHI*X23PHI)-(Y12PHI*Y23PHI)-(Z12PHI*Z23PHI))/
     *               (R12PHI*R23PHI)
         COS234PHI=(-(X23PHI*X34PHI)-(Y23PHI*Y34PHI)-(Z23PHI*Z34PHI))/
     *               (R23PHI*R34PHI)
         SIN2123PHI= 1.0D+00-COS123PHI*COS123PHI
         SIN2234PHI= 1.0D+00-COS234PHI*COS234PHI
         SIN123PHI = SQRT(SIN2123PHI)
         SIN234PHI = SQRT(SIN2234PHI)
         ONESINPHI = 1.0D+00/(SIN123PHI*SIN234PHI)
         COSPHI = ONESINPHI*(COS123PHI*COS234PHI-
     *             ((+X12PHI*X34PHI+Y12PHI*Y34PHI+Z12PHI*Z34PHI)/
     *              (R12PHI*R34PHI)))
         IF(COSPHI.GT. 1.0D+00) COSPHI= 1.0D+00
         IF(COSPHI.LT.-1.0D+00) COSPHI=-1.0D+00
         PHI   = ACOS(COSPHI)
C        -- DIHEDRAL ANGLE IS 0 - 360 DEGREES
         XNORMPHI  = -Y23PHI*Z34PHI + Z23PHI*Y34PHI
         YNORMPHI  = -Z23PHI*X34PHI + X23PHI*Z34PHI
         ZNORMPHI  = -X23PHI*Y34PHI + Y23PHI*X34PHI
         DOTN12PHI =  X12PHI*XNORMPHI + Y12PHI*YNORMPHI +
     *                Z12PHI*ZNORMPHI
         IF(DOTN12PHI.LT.0.0D+00) PHI = 2.0D+00*PI - PHI
         PHI = PHI*DEGREE
C
C
         P1PSI=MAPLST(2,ICMAP)
         P2PSI=MAPLST(3,ICMAP)
         P3PSI=MAPLST(4,ICMAP)
         P4PSI=MAPLST(5,ICMAP)
         X12PSI=CORD(1,P1PSI)-CORD(1,P2PSI)
         Y12PSI=CORD(2,P1PSI)-CORD(2,P2PSI)
         Z12PSI=CORD(3,P1PSI)-CORD(3,P2PSI)
         X13PSI=CORD(1,P1PSI)-CORD(1,P3PSI)
         Y13PSI=CORD(2,P1PSI)-CORD(2,P3PSI)
         Z13PSI=CORD(3,P1PSI)-CORD(3,P3PSI)
         X23PSI=CORD(1,P2PSI)-CORD(1,P3PSI)
         Y23PSI=CORD(2,P2PSI)-CORD(2,P3PSI)
         Z23PSI=CORD(3,P2PSI)-CORD(3,P3PSI)
         X34PSI=CORD(1,P3PSI)-CORD(1,P4PSI)
         Y34PSI=CORD(2,P3PSI)-CORD(2,P4PSI)
         Z34PSI=CORD(3,P3PSI)-CORD(3,P4PSI)
         R12PSI=SQRT(X12PSI*X12PSI+Y12PSI*Y12PSI+Z12PSI*Z12PSI)
         R23PSI=SQRT(X23PSI*X23PSI+Y23PSI*Y23PSI+Z23PSI*Z23PSI)
         R34PSI=SQRT(X34PSI*X34PSI+Y34PSI*Y34PSI+Z34PSI*Z34PSI)
         COS123PSI=(-(X12PSI*X23PSI)-(Y12PSI*Y23PSI)-(Z12PSI*Z23PSI))/
     *               (R12PSI*R23PSI)
         COS234PSI=(-(X23PSI*X34PSI)-(Y23PSI*Y34PSI)-(Z23PSI*Z34PSI))/
     *               (R23PSI*R34PSI)
         SIN2123PSI= 1.0D+00-COS123PSI*COS123PSI
         SIN2234PSI= 1.0D+00-COS234PSI*COS234PSI
         SIN123PSI = SQRT(SIN2123PSI)
         SIN234PSI = SQRT(SIN2234PSI)
         ONESINPSI = 1.0D+00/(SIN123PSI*SIN234PSI)
         COSPSI = ONESINPSI*(COS123PSI*COS234PSI-
     *             ((+X12PSI*X34PSI+Y12PSI*Y34PSI+Z12PSI*Z34PSI)/
     *              (R12PSI*R34PSI)))
         IF(COSPSI.GT. 1.0D+00) COSPSI= 1.0D+00
         IF(COSPSI.LT.-1.0D+00) COSPSI=-1.0D+00
         PSI   = ACOS(COSPSI)
C        -- DIHEDRAL ANGLE IS 0 - 360 DEGREES
         XNORMPSI  = -Y23PSI*Z34PSI + Z23PSI*Y34PSI
         YNORMPSI  = -Z23PSI*X34PSI + X23PSI*Z34PSI
         ZNORMPSI  = -X23PSI*Y34PSI + Y23PSI*X34PSI
         DOTN12PSI =  X12PSI*XNORMPSI + Y12PSI*YNORMPSI +
     *                Z12PSI*ZNORMPSI
         IF(DOTN12PSI.LT.0.0D+00) PSI = 2.0D+00*PI - PSI
         PSI = PSI*DEGREE
C
C
         IPHI  = INT(PHI*ONEFIF) + 1 ! FROM 1 - 24
         JPSI  = INT(PSI*ONEFIF) + 1 ! FROM 1 - 24
         DPHI  = DMOD(PHI,15.0D+00)*ONEFIF
         DPSI  = DMOD(PSI,15.0D+00)*ONEFIF
C
C
         DO ICPHI =1,4
            DO JCPSI=1,4
               CIJ = CMAPCO(JCPSI,ICPHI,JPSI,IPHI,ITYPE)
               ENCMAP=ENCMAP + TOHART*
     *                CIJ*DPHI**(ICPHI-1)*DPSI**(JCPSI-1)
            ENDDO
         ENDDO
C
C        - CALCULATING DERIVATIVES
C
         PHIFAC = 0.0D+00
         DO ICPHI =1,4
            DO JCPSI=1,4
               CIJ = CMAPCO(JCPSI,ICPHI,JPSI,IPHI,ITYPE)
               PHIFAC=PHIFAC + TOHART*ONEFIF*DEGREE*
     *                (ICPHI-1)*CIJ*DPHI**(ICPHI-2)*DPSI**(JCPSI-1)
            ENDDO
         ENDDO
C
         A123PHI = 1.0D+00/(R12PHI*SIN2123PHI)
         A432PHI = 1.0D+00/(R34PHI*SIN2234PHI)
         B123PHI = R12PHI*COS123PHI/R23PHI
         B432PHI = R34PHI*COS234PHI/R23PHI
         C123PHI = B123PHI-1.0D+00
C    
         DUMY        =  PHIFAC*A123PHI/(R12PHI*R23PHI)
         DEX1        =  DUMY*(-Y12PHI*Z23PHI+Z12PHI*Y23PHI)
         DEY1        =  DUMY*(-Z12PHI*X23PHI+X12PHI*Z23PHI)
         DEZ1        =  DUMY*(-X12PHI*Y23PHI+Y12PHI*X23PHI)
         FFGRD(1,P1PHI)=FFGRD(1,P1PHI)+DEX1
         FFGRD(2,P1PHI)=FFGRD(2,P1PHI)+DEY1
         FFGRD(3,P1PHI)=FFGRD(3,P1PHI)+DEZ1
C
         DUMY        =  PHIFAC*(-A432PHI)/(R23PHI*R34PHI)
         DEX4        =  DUMY*(-Y23PHI*Z34PHI+Z23PHI*Y34PHI)
         DEY4        =  DUMY*(-Z23PHI*X34PHI+X23PHI*Z34PHI)
         DEZ4        =  DUMY*(-X23PHI*Y34PHI+Y23PHI*X34PHI)
         FFGRD(1,P4PHI)=FFGRD(1,P4PHI)+DEX4
         FFGRD(2,P4PHI)=FFGRD(2,P4PHI)+DEY4
         FFGRD(3,P4PHI)=FFGRD(3,P4PHI)+DEZ4
C
         DEX2        =  C123PHI*DEX1 - B432PHI*DEX4
         DEY2        =  C123PHI*DEY1 - B432PHI*DEY4
         DEZ2        =  C123PHI*DEZ1 - B432PHI*DEZ4
         FFGRD(1,P2PHI)=FFGRD(1,P2PHI)+DEX2
         FFGRD(2,P2PHI)=FFGRD(2,P2PHI)+DEY2
         FFGRD(3,P2PHI)=FFGRD(3,P2PHI)+DEZ2
C
         FFGRD(1,P3PHI)=FFGRD(1,P3PHI)-DEX1-DEX2-DEX4
         FFGRD(2,P3PHI)=FFGRD(2,P3PHI)-DEY1-DEY2-DEY4
         FFGRD(3,P3PHI)=FFGRD(3,P3PHI)-DEZ1-DEZ2-DEZ4
C
         VIR(1)  =VIR(1) + DEX1*X13PHI + DEX2*X23PHI - DEX4*X34PHI
         VIR(2)  =VIR(2) + DEY1*Y13PHI + DEY2*Y23PHI - DEY4*Y34PHI
         VIR(3)  =VIR(3) + DEZ1*Z13PHI + DEZ2*Z23PHI - DEZ4*Z34PHI
C
C
         PSIFAC=0.0D+00
         DO ICPHI =1,4
            DO JCPSI=1,4
               CIJ = CMAPCO(JCPSI,ICPHI,JPSI,IPHI,ITYPE)
               PSIFAC=PSIFAC+ TOHART*ONEFIF*DEGREE*
     *         (JCPSI-1)*CIJ*DPHI**(ICPHI-1)*DPSI**(JCPSI-2)
            ENDDO
         ENDDO
C
         A123PSI = 1.0D+00/(R12PSI*SIN2123PSI)
         A432PSI = 1.0D+00/(R34PSI*SIN2234PSI)
         B123PSI = R12PSI*COS123PSI/R23PSI
         B432PSI = R34PSI*COS234PSI/R23PSI
         C123PSI = B123PSI-1.0D+00
C
         DUMY         = PSIFAC*A123PSI/(R12PSI*R23PSI)
         DEX1         = DUMY*(-Y12PSI*Z23PSI+Z12PSI*Y23PSI)
         DEY1         = DUMY*(-Z12PSI*X23PSI+X12PSI*Z23PSI)
         DEZ1         = DUMY*(-X12PSI*Y23PSI+Y12PSI*X23PSI)
         FFGRD(1,P1PSI) = FFGRD(1,P1PSI)+DEX1
         FFGRD(2,P1PSI) = FFGRD(2,P1PSI)+DEY1
         FFGRD(3,P1PSI) = FFGRD(3,P1PSI)+DEZ1
C
         DUMY         = PSIFAC*(-A432PSI)/(R23PSI*R34PSI)
         DEX4         = DUMY*(-Y23PSI*Z34PSI+Z23PSI*Y34PSI)
         DEY4         = DUMY*(-Z23PSI*X34PSI+X23PSI*Z34PSI)
         DEZ4         = DUMY*(-X23PSI*Y34PSI+Y23PSI*X34PSI)
         FFGRD(1,P4PSI) = FFGRD(1,P4PSI)+DEX4
         FFGRD(2,P4PSI) = FFGRD(2,P4PSI)+DEY4
         FFGRD(3,P4PSI) = FFGRD(3,P4PSI)+DEZ4
C
         DEX2         = C123PSI*DEX1 - B432PSI*DEX4
         DEY2         = C123PSI*DEY1 - B432PSI*DEY4
         DEZ2         = C123PSI*DEZ1 - B432PSI*DEZ4
         FFGRD(1,P2PSI) = FFGRD(1,P2PSI)+DEX2
         FFGRD(2,P2PSI) = FFGRD(2,P2PSI)+DEY2
         FFGRD(3,P2PSI) = FFGRD(3,P2PSI)+DEZ2
C
         FFGRD(1,P3PSI) = FFGRD(1,P3PSI)-DEX1-DEX2-DEX4
         FFGRD(2,P3PSI) = FFGRD(2,P3PSI)-DEY1-DEY2-DEY4
         FFGRD(3,P3PSI) = FFGRD(3,P3PSI)-DEZ1-DEZ2-DEZ4
C
         VIR(1)  =VIR(1) + DEX1*X13PSI + DEX2*X23PSI - DEX4*X34PSI
         VIR(2)  =VIR(2) + DEY1*Y13PSI + DEY2*Y23PSI - DEY4*Y34PSI
         VIR(3)  =VIR(3) + DEZ1*Z13PSI + DEZ2*Z23PSI - DEZ4*Z34PSI
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK ELJ126
      SUBROUTINE ELJ126(CORD,FFGRD,SIG,EPS,SIG2,EPS2,L14J,
     *                  NONLST,IDGROUP)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),SIG(*),EPS(*),SIG2(*),EPS2(*),
     *          L14J(2,*),NONLST(2,*),IDGROUP(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFTYPE/ WT14,NFFTYP
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
C     FORMULA:  E = 4*EPSILON*[(SIGMA/R)**12 - (SIGMA/R)**6)]
C
C               SIGMA(I,J)   = 0.5*(SIGMA_I   + SIGMA_J  )
C               EPSILON(I,J) = SQRT(EPSILON_I * EPSILON_J)
C
      ENLJR=ZERO
      ENLJD=ZERO
      IF(IDOLJ.EQ.0) RETURN
C
      DO 100 III = 1, NTODO     ! NTODO IS LOCAL
         I = NONLST(1,III)
         J = NONLST(2,III)
         IF(I.EQ.0.OR.J.EQ.0) GOTO 100
         SIGI  = SIG(I)
         EPSI  = EPS(I)
         SIGJ  = SIG(J)
         EPSJ  = EPS(J)
         IF(SIGI.EQ.ZERO .OR. EPSI.EQ.ZERO) GOTO 100
         IF(SIGJ.EQ.ZERO .OR. EPSJ.EQ.ZERO) GOTO 100
C
         XGRP  = CORD(1,IDGROUP(I)) - CORD(1,IDGROUP(J))
         YGRP  = CORD(2,IDGROUP(I)) - CORD(2,IDGROUP(J))
         ZGRP  = CORD(3,IDGROUP(I)) - CORD(3,IDGROUP(J))
         PBCX  = XBOX * ANINT(XGRP/XBOX)
         PBCY  = YBOX * ANINT(YGRP/YBOX)
         PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.RRCUT) GOTO 100
         IF(R2.GT.SWRR2) GOTO 100
         CALL SWFUNC(R2,XGRP,YGRP,ZGRP)
C
         X     = CORD(1,I) - CORD(1,J)
         Y     = CORD(2,I) - CORD(2,J)
         Z     = CORD(3,I) - CORD(3,J)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         ONER2 = ONE/R2
         ONER6 = ONER2*ONER2*ONER2
         ONER12= ONER6*ONER6
C
         SIG1  = 0.5D+00*(SIGI+SIGJ)
         EPS1  = SQRT(EPSI*EPSJ)
         FOUREP= 4.0D+00*EPS1
         SIGSQ = SIG1*SIG1
         SIG6  = SIGSQ*SIGSQ*SIGSQ
         SIG12 = SIG6*SIG6
         REP   = SIG12*ONER12
         DISP  =-SIG6 *ONER6
C
         EPAIRR= FOUREP*REP
         EPAIRD= FOUREP*DISP
         EPAIR = EPAIRR+EPAIRD
         ENLJR = ENLJR + EPAIRR*SWF
         ENLJD = ENLJD + EPAIRD*SWF
         DUM   = -SWF*6.0D+00*FOUREP*(2.0D+00*REP+DISP)*ONER2
         DEX   = DUM*X
         DEY   = DUM*Y
         DEZ   = DUM*Z
         FFGRD(1,I)=FFGRD(1,I) + DEX
         FFGRD(2,I)=FFGRD(2,I) + DEY
         FFGRD(3,I)=FFGRD(3,I) + DEZ
         FFGRD(1,IDGROUP(I)) = FFGRD(1,IDGROUP(I)) + EPAIR*SWFDX
         FFGRD(2,IDGROUP(I)) = FFGRD(2,IDGROUP(I)) + EPAIR*SWFDY
         FFGRD(3,IDGROUP(I)) = FFGRD(3,IDGROUP(I)) + EPAIR*SWFDZ
         FFGRD(1,J)=FFGRD(1,J) - DEX
         FFGRD(2,J)=FFGRD(2,J) - DEY
         FFGRD(3,J)=FFGRD(3,J) - DEZ
         FFGRD(1,IDGROUP(J)) = FFGRD(1,IDGROUP(J)) - EPAIR*SWFDX
         FFGRD(2,IDGROUP(J)) = FFGRD(2,IDGROUP(J)) - EPAIR*SWFDY
         FFGRD(3,IDGROUP(J)) = FFGRD(3,IDGROUP(J)) - EPAIR*SWFDZ
         VIR(1)    =VIR(1)     + DEX*X + EPAIR*SWFDX*XGRP
         VIR(2)    =VIR(2)     + DEY*Y + EPAIR*SWFDY*YGRP
         VIR(3)    =VIR(3)     + DEZ*Z + EPAIR*SWFDZ*ZGRP
 100  CONTINUE
C
C
C     -- THE IDEA IS TO REMOVE ALL 1-4 PAIRS, THEN ADD
C        THEM BACK. WHEN ADD BACK, SELECT THE CORRECT 
C        L-J PARAMETERS. -HL.
C
      IPCOUNT = ME - 1
      DO 400 III=1,N14J
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1       
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 400
         END IF
         I = L14J(1,III)
         J = L14J(2,III)
         IF(SIG2(I).EQ.ZERO.AND.EPS2(I).EQ.ZERO .AND.
     *      SIG2(J).EQ.ZERO.AND.EPS2(J).EQ.ZERO) GOTO 400
         DO 410 LLL = 1, 2
            IF(LLL.EQ.1) THEN
               SIGN = -1.0D+00     ! REMOVE
               SIGI  = SIG(I)
               EPSI  = EPS(I)
               SIGJ  = SIG(J)
               EPSJ  = EPS(J)
            END IF
            IF(LLL.EQ.2) THEN
               SIGN =  1.0D+00     ! ADD
               SIGI  = SIG(I)
               EPSI  = EPS(I)
               SIGJ  = SIG(J)
               EPSJ  = EPS(J)
               IF(SIG2(I).GT.ZERO.AND.EPS2(I).GT.ZERO) THEN
                  SIGI = SIG2(I)
                  EPSI = EPS2(I)
               ELSE IF(SIG2(J).GT.ZERO.AND.EPS2(J).GT.ZERO) THEN
                  SIGJ = SIG2(J)
                  EPSJ = EPS2(J)
               END IF
            END IF
            IF(SIGI.EQ.ZERO .OR. EPSI.EQ.ZERO) GOTO 410
            IF(SIGJ.EQ.ZERO .OR. EPSJ.EQ.ZERO) GOTO 410
            X     = CORD(1,I) - CORD(1,J)
            Y     = CORD(2,I) - CORD(2,J)
            Z     = CORD(3,I) - CORD(3,J)
            R2    = X*X+Y*Y+Z*Z
            CALL SWFUNC(R2,X,Y,Z)
            ONER2 = ONE/R2
            ONER6 = ONER2*ONER2*ONER2
            ONER12= ONER6*ONER6
C
            SIG1  = 0.5D+00*(SIGI+SIGJ)
            EPS1  = SQRT(EPSI*EPSJ)
            FOUREP= 4.0D+00*EPS1
            SIGSQ = SIG1*SIG1
            SIG6  = SIGSQ*SIGSQ*SIGSQ
            SIG12 = SIG6*SIG6
            REP   = SIG12*ONER12
            DISP  =-SIG6 *ONER6
C
            EPAIRR= FOUREP*REP
            EPAIRD= FOUREP*DISP
            EPAIR = EPAIRR+EPAIRD
            ENLJR = ENLJR + EPAIRR*SWF*SIGN
            ENLJD = ENLJD + EPAIRD*SWF*SIGN
            DUM   = -SWF*6.0D+00*FOUREP*(2.0D+00*REP+DISP)*ONER2
            DEX   = DUM*X + EPAIR*SWFDX
            DEY   = DUM*Y + EPAIR*SWFDY
            DEZ   = DUM*Z + EPAIR*SWFDZ
            FFGRD(1,I)=FFGRD(1,I) + DEX*SIGN
            FFGRD(2,I)=FFGRD(2,I) + DEY*SIGN
            FFGRD(3,I)=FFGRD(3,I) + DEZ*SIGN
            FFGRD(1,J)=FFGRD(1,J) - DEX*SIGN
            FFGRD(2,J)=FFGRD(2,J) - DEY*SIGN
            FFGRD(3,J)=FFGRD(3,J) - DEZ*SIGN
            VIR(1)    =VIR(1)     + DEX*X*SIGN
            VIR(2)    =VIR(2)     + DEY*Y*SIGN
            VIR(3)    =VIR(3)     + DEZ*Z*SIGN
 410     CONTINUE
 400  CONTINUE
C
C     -- IF WT14 IS NOT 1.0, REMOVE (1-WT14) OR ADD (WT14-1)
C
      IF(WT14.NE.1.0D+00) THEN
         IPCOUNT = ME - 1
         DO 500 III=1,N14J
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 500
            END IF
            I = L14J(1,III)
            J = L14J(2,III)
            FACT  =  WT14-1.0D+00     ! ADD (WT14 -1)
            SIGI  = SIG(I)
            EPSI  = EPS(I)
            SIGJ  = SIG(J)
            EPSJ  = EPS(J)
            IF(SIGI.EQ.ZERO .OR. EPSI.EQ.ZERO) GOTO 500
            IF(SIGJ.EQ.ZERO .OR. EPSJ.EQ.ZERO) GOTO 500
            X     = CORD(1,I) - CORD(1,J)
            Y     = CORD(2,I) - CORD(2,J)
            Z     = CORD(3,I) - CORD(3,J)
            R2    = X*X+Y*Y+Z*Z
            CALL SWFUNC(R2,X,Y,Z)
            ONER2 = ONE/R2
            ONER6 = ONER2*ONER2*ONER2
            ONER12= ONER6*ONER6
C
            SIG1  = 0.5D+00*(SIGI+SIGJ)
            EPS1  = SQRT(EPSI*EPSJ)
            FOUREP= 4.0D+00*EPS1
            SIGSQ = SIG1*SIG1
            SIG6  = SIGSQ*SIGSQ*SIGSQ
            SIG12 = SIG6*SIG6
            REP   = SIG12*ONER12
            DISP  =-SIG6 *ONER6
C
            EPAIRR= FOUREP*REP
            EPAIRD= FOUREP*DISP
            EPAIR = EPAIRR+EPAIRD
            ENLJR = ENLJR + EPAIRR*SWF*FACT
            ENLJD = ENLJD + EPAIRD*SWF*FACT
            DUM   = -SWF*6.0D+00*FOUREP*(2.0D+00*REP+DISP)*ONER2
            DEX   = DUM*X + EPAIR*SWFDX
            DEY   = DUM*Y + EPAIR*SWFDY
            DEZ   = DUM*Z + EPAIR*SWFDZ
            FFGRD(1,I)=FFGRD(1,I) + DEX*FACT
            FFGRD(2,I)=FFGRD(2,I) + DEY*FACT
            FFGRD(3,I)=FFGRD(3,I) + DEZ*FACT
            FFGRD(1,J)=FFGRD(1,J) - DEX*FACT
            FFGRD(2,J)=FFGRD(2,J) - DEY*FACT
            FFGRD(3,J)=FFGRD(3,J) - DEZ*FACT
            VIR(1)    =VIR(1)     + DEX*X*FACT
            VIR(2)    =VIR(2)     + DEY*Y*FACT
            VIR(3)    =VIR(3)     + DEZ*Z*FACT
 500     CONTINUE
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK ESPHER
      SUBROUTINE ESPHER(CORD,FFGRD)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, FOUR=4.0D+00,
     *           SIX=6.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FMCOM / XX(1)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, FEB 2011, LINCOLN
C
C     --  ENRXNR: LENNARD-JONES POTENTIAL ENERGY DUE TO SPHERE --
C                 (REQUIRED IF SPHRAD IS APPLIED)
C
      ENRXNR =ZERO
      IF(SPHRAD.GE.1.0D+30.OR.SPHEPS.EQ.ZERO) RETURN
C
      R     = SPHRAD + (TWO**(ONE/SIX)-ONE)*SPHSIG
      FOUREP= FOUR*SPHEPS
      SIG6  = SPHSIG**6
      SIG12 = SIG6*SIG6
C
      IPCOUNT = ME - 1
      DO 100 IFFAT = 1, NFFAT
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         IF(XX(LFFZANF+IFFAT-1).EQ.1.0D+00) GO TO 100
         XI    = CORD(1,IFFAT) - CENTX
         YI    = CORD(2,IFFAT) - CENTY
         ZI    = CORD(3,IFFAT) - CENTZ
         RI2   = XI*XI+YI*YI+ZI*ZI
         RI    = SQRT(RI2)
         R2    = (RI-R)**2
         ONER2 = ONE/R2
         ONER6 = ONER2*ONER2*ONER2
         ONER12= ONER6*ONER6
         REP   = SIG12*ONER12
         DISP  =-SIG6 *ONER6
         ENRXNR= ENRXNR + FOUREP*(REP+DISP)
         IF(R2.LT.(0.50D+00*SPHSIG)**2)ENRXNR=ENRXNR-FOUREP*(REP+DISP)
         DUM   = -SIX*FOUREP*(TWO*REP+DISP)/((RI-R)*RI)
         IF(RI.GT.R) DUM = -DUM
         IF(DUM.GT. 0.01D+00) DUM= 0.01D+00
         IF(DUM.LT.-0.01D+00) DUM=-0.01D+00
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*XI
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*YI
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*ZI
         VIR(1)        =VIR(1)         + DUM*XI*CORD(1,IFFAT)
         VIR(2)        =VIR(2)         + DUM*YI*CORD(2,IFFAT)
         VIR(3)        =VIR(3)         + DUM*ZI*CORD(3,IFFAT)
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK ESPHQM
      SUBROUTINE ESPHQM(DETMP,LISTQM)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, FOUR=4.0D+00,
     *           SIX=6.0D+00)
      PARAMETER (MXATM=2000)
      PARAMETER (TOANGS=0.52917724924D+00, TOBOHR=1.0D+00/TOANGS)
C
      DIMENSION DETMP(3,*),LISTQM(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, MAR 2011, LINCOLN
C
C     -- ENCENT: POTENTIAL ENERGY DUE TO A BOND-LIKE POTENTIAL --
C                (REQUIRED IN QM/MM SWITCHING FUNCTION METHOD)
C     -- ENRXNR: POTENTIAL ENERGY DUE TO SPHERE --
C                (REQUIRED IN REACTION FIELD METHOD)
C
      ENCENT = ZERO
      IF(MASWRK) THEN   ! ONLY ONE CASE, LET THE MASWRK DO IT
         IF(NAT.GT.0 .AND. NFFAT.GT.0 .AND. SWRR2.LT.1.0D+08) THEN
            XI  = C(1,LQMCT)-QMCX
            YI  = C(2,LQMCT)-QMCY
            ZI  = C(3,LQMCT)-QMCZ
            RI2 = XI*XI+YI*YI+ZI*ZI
            RI  = SQRT(RI2)
            R0  = TOBOHR         !   R0=1.0 ANGSTROM
            IF(RI.GT.R0) THEN
               ENCENT = ENCENT + (RI-R0)**2  ! K=1.0 HARTREE/BOHR**2
               DUM    = 2.0D+00*(RI-R0)/RI
               DETMP(1,LQMCT) = DETMP(1,LQMCT) + DUM*XI
               DETMP(2,LQMCT) = DETMP(2,LQMCT) + DUM*YI
               DETMP(3,LQMCT) = DETMP(3,LQMCT) + DUM*ZI
            END IF
         END IF
      END IF
C
      IF(SPHRAD.GE.1.0D+30.OR.SPHEPS.EQ.ZERO) RETURN
C
      R     = SPHRAD + (TWO**(ONE/SIX)-ONE)*SPHSIG
      FOUREP= FOUR*SPHEPS
      SIG6  = SPHSIG**6
      SIG12 = SIG6*SIG6
C
      IPCOUNT = ME - 1
      DO 200 IAT=1,NAT
       IF(LISTQM(NFFAT+IAT).EQ.0)THEN  ! DO NOT DO IT TWICE
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 200
         END IF
         IF(IAN(IAT).EQ.1) GO TO 200
         XI    = C(1,IAT) - CENTX
         YI    = C(2,IAT) - CENTY
         ZI    = C(3,IAT) - CENTZ
         RI2   = XI*XI+YI*YI+ZI*ZI
         RI    = SQRT(RI2)
         R2    = (RI-R)**2
         ONER2 = ONE/R2
         ONER6 = ONER2*ONER2*ONER2
         ONER12= ONER6*ONER6
         REP   = SIG12*ONER12
         DISP  =-SIG6 *ONER6
         ENRXNR= ENRXNR + FOUREP*(REP+DISP)
         DUM   = -SIX*FOUREP*(TWO*REP+DISP)/((RI-R)*RI)
         IF(RI.GT.R) DUM = -DUM
         IF(DUM.GT. 0.01D+00) DUM= 0.01D+00
         IF(DUM.LT.-0.01D+00) DUM=-0.01D+00
         DETMP(1,IAT) = DETMP(1,IAT) + DUM*XI
         DETMP(2,IAT) = DETMP(2,IAT) + DUM*YI
         DETMP(3,IAT) = DETMP(3,IAT) + DUM*ZI
         VIR(1)       = VIR(1)       + DUM*XI*C(1,IAT)
         VIR(2)       = VIR(2)       + DUM*YI*C(2,IAT)
         VIR(3)       = VIR(3)       + DUM*ZI*C(3,IAT)
       END IF
 200  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK ECHARG
      SUBROUTINE ECHARG(CORD,FFGRD,CHARG,NONLST,IDGROUP)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),NONLST(2,*),
     *          IDGROUP(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
C
C     HUI LI, JAN 2011, LINCOLN
C
C     FORMULA:  E = QI*QJ/RIJ  (IN VACUUM)
C          OR:  E = SHF*SWF*(QI*QJ/RIJ)
C                   SHF = SHIFTING  FUNCTION IN RANGE 0 - RCUTOFF
C                   SWF = SWITCHING FUNCTION IN RANGE RSTART - RCUTOFF
C
      ENCHAR=ZERO
      IF(IDOCHG.EQ.0) RETURN
C
      TWOROFF = ZERO
      ONEROFF2= ZERO
      ONEROFF = ZERO
      ONEROFF3= ZERO
      TWOROFF3= ZERO
      TWOROFF2= ZERO
      ONEROFF4= ZERO
      THREEROFF4=ZERO
      IF(MODESW.EQ.3) THEN
         TWOROFF = TWO/SQRT(SWRR2)
         ONEROFF2= ONE/SWRR2
      END IF
      IF(MODESW.EQ.4) THEN
         TWOROFF2  = TWO/SWRR2
         ONEROFF4  = (ONE/SWRR2)**2
         THREEROFF4= THREE*ONEROFF4
      END IF
      IF(MODESW.EQ.5) THEN
         ONEROFF = ONE/SQRT(SWRR2)
         ONEROFF3= (RXNEPS-ONE)/(TWO*RXNEPS+ONE)*ONEROFF**3
         TWOROFF3= TWO*ONEROFF3
         ONEROFF = THREE*RXNEPS/(TWO*RXNEPS+ONE)*ONEROFF
      END IF
C
      DO 100 III = 1, NTODO     ! NTODO IS LOCAL
         I = NONLST(1,III)
         J = NONLST(2,III)
         IF(I.EQ.0.OR.J.EQ.0) GOTO 100
         QI = CHARG(I)
         IF(QI.EQ.ZERO) GOTO 100
         QJ    = CHARG(J)
         IF(QJ.EQ.ZERO) GOTO 100
         QIQJ  = QI*QJ
C
         XGRP  = CORD(1,IDGROUP(I)) - CORD(1,IDGROUP(J))
         YGRP  = CORD(2,IDGROUP(I)) - CORD(2,IDGROUP(J))
         ZGRP  = CORD(3,IDGROUP(I)) - CORD(3,IDGROUP(J))
         PBCX  = XBOX * ANINT(XGRP/XBOX)
         PBCY  = YBOX * ANINT(YGRP/YBOX)
         PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         R2GRP = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2GRP.GT.RRCUT) GOTO 100
         IF(R2GRP.GT.SWRR2) GOTO 100
         CALL SWFUNC(R2GRP,XGRP,YGRP,ZGRP)
C
         X     = CORD(1,I) - CORD(1,J)
         Y     = CORD(2,I) - CORD(2,J)
         Z     = CORD(3,I) - CORD(3,J)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         R     = SQRT(R2)
         R3    = R*R2
         ONER2 = ONE/R2
         ONER  = ONE/R
         ONER3 = ONER2*ONER
C
         EPAIR = QIQJ*(ONER-TWOROFF+R*ONEROFF2+R2*ONEROFF3-ONEROFF
     *                             -R*TWOROFF2+R3*ONEROFF4)
         ENCHAR= ENCHAR  + EPAIR*SWF
         DUM   = -QIQJ*(ONER3-ONEROFF2*ONER-TWOROFF3
     *                       +TWOROFF2*ONER-THREEROFF4*R)*SWF
         DEX   = DUM*X
         DEY   = DUM*Y
         DEZ   = DUM*Z
         FFGRD(1,I)=FFGRD(1,I) + DEX
         FFGRD(2,I)=FFGRD(2,I) + DEY
         FFGRD(3,I)=FFGRD(3,I) + DEZ
         FFGRD(1,IDGROUP(I)) = FFGRD(1,IDGROUP(I)) + EPAIR*SWFDX
         FFGRD(2,IDGROUP(I)) = FFGRD(2,IDGROUP(I)) + EPAIR*SWFDY
         FFGRD(3,IDGROUP(I)) = FFGRD(3,IDGROUP(I)) + EPAIR*SWFDZ
         FFGRD(1,J)=FFGRD(1,J) - DEX
         FFGRD(2,J)=FFGRD(2,J) - DEY
         FFGRD(3,J)=FFGRD(3,J) - DEZ
         FFGRD(1,IDGROUP(J)) = FFGRD(1,IDGROUP(J)) - EPAIR*SWFDX
         FFGRD(2,IDGROUP(J)) = FFGRD(2,IDGROUP(J)) - EPAIR*SWFDY
         FFGRD(3,IDGROUP(J)) = FFGRD(3,IDGROUP(J)) - EPAIR*SWFDZ
         VIR(1)    =VIR(1)     + DEX*X + EPAIR*SWFDX*XGRP
         VIR(2)    =VIR(2)     + DEY*Y + EPAIR*SWFDY*YGRP
         VIR(3)    =VIR(3)     + DEZ*Z + EPAIR*SWFDZ*ZGRP
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK CHGRXN
      SUBROUTINE CHGRXN(CORD,FFGRD,CHARG,XTS,YTS,ZTS,
     *                  CMAT1,POT1,QRXN1,NTS)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, ONE=1.0D+00, TWO=2.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),POT1(NTS),QRXN1(NTS),
     *          CMAT1(NTS,NTS)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, FEB 2011, LINCOLN
C
C     --  CONTINUUM SOLVATION ENERGY --
C
      ENRXN =ZERO
      IF(IDOCHG.EQ.0) RETURN
      IF(RXNRAD.GE.1.0D+30) RETURN
C
      R     = RXNRAD
      R2    = R*R
      IF(IRXNFLD.EQ.1) THEN
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 200 IFFAT = 1, NFFAT
            IF(CHARG(IFFAT).EQ.ZERO) GOTO 200
            QI    = CHARG(IFFAT)
            XI    = CORD(1,IFFAT) - CENTX
            YI    = CORD(2,IFFAT) - CENTY
            ZI    = CORD(3,IFFAT) - CENTZ
            RI2   = XI*XI+YI*YI+ZI*ZI
            IF(RI2.GT.(R-1.0D+00)**2) GOTO 200
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 200
            END IF
            FAC   = R - RI2/R
            FAC2  = FAC*FAC
            RFAC2 = R*FAC2
            DUM   = -SCALE*QI*QI/RFAC2
            ENRXN = ENRXN - PT5*QI*QI/FAC
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*XI
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*YI
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*ZI
            VIR(1)        =VIR(1)         + DUM*XI*CORD(1,IFFAT)
            VIR(2)        =VIR(2)         + DUM*YI*CORD(2,IFFAT)
            VIR(3)        =VIR(3)         + DUM*ZI*CORD(3,IFFAT)
            DO 210 JFFAT = IFFAT+1, NFFAT
               IF(CHARG(JFFAT).EQ.ZERO) GOTO 210
               QJ    = CHARG(JFFAT)
               XJ    = CORD(1,JFFAT) - CENTX
               YJ    = CORD(2,JFFAT) - CENTY
               ZJ    = CORD(3,JFFAT) - CENTZ
               RJ2   = XJ*XJ+YJ*YJ+ZJ*ZJ
               IF(RJ2.GT.(R-1.0D+00)**2) GOTO 210
               RIRJ  = XI*XJ+YI*YJ+ZI*ZJ
               FAC   = RI2*RJ2/R2 + R2 - TWO*RIRJ
               FACRT = SQRT(FAC)
               DUM   = SCALE*QI*QJ/(FAC*FACRT)
               ENRXN = ENRXN - QI*QJ/FACRT
               FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*(XI*RJ2/R2-XJ)
               FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*(YI*RJ2/R2-YJ)
               FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*(ZI*RJ2/R2-ZJ)
               FFGRD(1,JFFAT)=FFGRD(1,JFFAT) + DUM*(XJ*RI2/R2-XI)
               FFGRD(2,JFFAT)=FFGRD(2,JFFAT) + DUM*(YJ*RI2/R2-YI)
               FFGRD(3,JFFAT)=FFGRD(3,JFFAT) + DUM*(ZJ*RI2/R2-ZI)
               VIR(1) =VIR(1) + DUM*(XI*RJ2/R2-XJ)*CORD(1,IFFAT)
               VIR(2) =VIR(2) + DUM*(YI*RJ2/R2-YJ)*CORD(2,IFFAT)
               VIR(3) =VIR(3) + DUM*(ZI*RJ2/R2-ZJ)*CORD(3,IFFAT)
               VIR(1) =VIR(1) + DUM*(XJ*RI2/R2-XI)*CORD(1,JFFAT)
               VIR(2) =VIR(2) + DUM*(YJ*RI2/R2-YI)*CORD(2,JFFAT)
               VIR(3) =VIR(3) + DUM*(ZJ*RI2/R2-ZI)*CORD(3,JFFAT)
 210        CONTINUE
 200     CONTINUE
         ENRXN = ENRXN*SCALE
      END IF
C
      IF(IRXNFLD.GE.60) THEN
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 300 ITS=1, NTS
            POT1(ITS) = ZERO
            DO 310 JFFAT=1,NFFAT
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 310
               END IF
               R2 =  (XTS(ITS)-CORD(1,JFFAT))**2
     *              +(YTS(ITS)-CORD(2,JFFAT))**2
     *              +(ZTS(ITS)-CORD(3,JFFAT))**2
               R  = SQRT(R2)
               POT1(ITS) = POT1(ITS)+CHARG(JFFAT)/R
 310        CONTINUE
 300     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2405,POT1,NTS)
         IPCOUNT = ME - 1
         DO 320 ITS = 1, NTS
            QRXN1(ITS) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 320
            END IF
            DO JTS = 1, NTS
               QRXN1(ITS) = QRXN1(ITS)-CMAT1(ITS,JTS)*POT1(JTS)
            ENDDO
            QRXN1(ITS) = QRXN1(ITS)*SCALE
            ENRXN      = ENRXN + QRXN1(ITS)*POT1(ITS)
 320     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2406,QRXN1,NTS)
         ENRXN = PT5*ENRXN
      END IF
      IF(IRXNFLD.GE.60 .AND. IDOPOL.EQ.0) THEN
         IPCOUNT = ME - 1
         DO IFFAT=1,NFFAT
            QIFFAT = CHARG(IFFAT)
            XI     = CORD(1,IFFAT)
            YI     = CORD(2,IFFAT)
            ZI     = CORD(3,IFFAT)
            RI2    = (XI-CENTX)**2 + (YI-CENTY)**2 + (ZI-CENTZ)**2
            DO 340 JTS=1, NTS
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 340
               END IF
               XJ   = XTS(JTS)
               YJ   = YTS(JTS)
               ZJ   = ZTS(JTS)
               QJTS = QRXN1(JTS)
               X    = XI - XJ
               Y    = YI - YJ
               Z    = ZI - ZJ
               R2   = X*X + Y*Y + Z*Z
               R    = SQRT(R2)
               R3   = R*R2
               DUM  = -QIFFAT*QJTS/R3
               FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + DUM*X
               FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + DUM*Y
               FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + DUM*Z
               VIR(1)         = VIR(1)         + DUM*X*CORD(1,IFFAT)
               VIR(2)         = VIR(2)         + DUM*Y*CORD(2,IFFAT)
               VIR(3)         = VIR(3)         + DUM*Z*CORD(3,IFFAT)
 340        CONTINUE
         ENDDO
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK POLRXN
      SUBROUTINE POLRXN(CORD,FFGRD,CHARG,POL,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLST,IDGROUP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00, PT5=0.5D+00,
     *           TWO=2.0D+00, THREE=3.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),
     *          POL(*),DIP(3,*),FIELD1(3,*),FIELD2(3,*),
     *          FIELD3(3,*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),QRXN1(NTS),QRXN2(NTS),
     *          POT1(NTS),POT2(NTS),CMAT1(NTS,NTS),NONLST(2,*),
     *          IDGROUP(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, DEJUN SI, JAN 2011, LINCOLN
C
      ENPOL    = ZERO
      ENRXNPOL = ZERO
      IF(IDOCHG.EQ.0) RETURN
      IF(IDOPOL.EQ.0) RETURN
C
C
C     -- FIELD1: FIELD AT POL DUE TO MM CHARGE --
C
      CALL VCLR(FIELD1,1,3*NFFAT)
C
      DO 100 III=1, NTODO
         IFFAT = NONLST(1,III)
         JFFAT = NONLST(2,III)
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 100
         IF(CHARG(IFFAT).EQ.ZERO.AND.  POL(IFFAT).EQ.ZERO) GOTO 100
         IF(CHARG(JFFAT).EQ.ZERO.AND.  POL(JFFAT).EQ.ZERO) GOTO 100
         IF(  POL(IFFAT).EQ.ZERO.AND.  POL(JFFAT).EQ.ZERO) GOTO 100
         IF(CHARG(IFFAT).EQ.ZERO.AND.CHARG(JFFAT).EQ.ZERO) GOTO 100
         QI    = CHARG(IFFAT)
         QJ    = CHARG(JFFAT)
C
         XGRP  = CORD(1,IDGROUP(IFFAT)) - CORD(1,IDGROUP(JFFAT))
         YGRP  = CORD(2,IDGROUP(IFFAT)) - CORD(2,IDGROUP(JFFAT))
         ZGRP  = CORD(3,IDGROUP(IFFAT)) - CORD(3,IDGROUP(JFFAT))
         PBCX  = XBOX * ANINT(XGRP/XBOX)
         PBCY  = YBOX * ANINT(YGRP/YBOX)
         PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.RRCUT) GOTO 100
         IF(R2.GT.SWRR2) GOTO 100
         CALL SWFUNC(R2,XGRP,YGRP,ZGRP)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         ONER2 = ONE/R2
         ONER  = SQRT(ONER2)
         ONER3 = ONER2*ONER
         DUMI  = QJ*ONER3*SWF
         DUMJ  = QI*ONER3*SWF
         FIELD1(1,IFFAT)=FIELD1(1,IFFAT)+DUMI*X
         FIELD1(2,IFFAT)=FIELD1(2,IFFAT)+DUMI*Y
         FIELD1(3,IFFAT)=FIELD1(3,IFFAT)+DUMI*Z
         FIELD1(1,JFFAT)=FIELD1(1,JFFAT)-DUMJ*X
         FIELD1(2,JFFAT)=FIELD1(2,JFFAT)-DUMJ*Y
         FIELD1(3,JFFAT)=FIELD1(3,JFFAT)-DUMJ*Z
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2405,FIELD1,3*NFFAT)
C
C     -- FIELD2: FIELD AT POL DUE TO REACTION FIELD OF MM CHARGE --
C
      CALL VCLR(FIELD2,1,3*NFFAT)
C
      IF(IRXNFLD.EQ.1 .AND. RXNRAD.LT.1.0D+30) THEN
      SCALE = (RXNEPS-ONE)/RXNEPS
      R     = RXNRAD
      R2    = R*R
      R3    = R*R2
      R4    = R*R3
      IPCOUNT = ME - 1
      DO 200 IFFAT = 1, NFFAT
         IF(CHARG(IFFAT).EQ.ZERO.AND.POL(IFFAT).EQ.ZERO) GOTO 200
         QI    = CHARG(IFFAT)
         XI    = CORD(1,IFFAT) - CENTX
         YI    = CORD(2,IFFAT) - CENTY
         ZI    = CORD(3,IFFAT) - CENTZ
         RI2   = XI*XI+YI*YI+ZI*ZI
         IF(RI2.GT.(R-1.0D+00)**2) GOTO 200
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 200
         END IF
         FAC   = R - RI2/R
         FAC2  = FAC*FAC
         RFAC2 = R*FAC2
         DUM   = SCALE*QI/RFAC2
         FIELD2(1,IFFAT) = FIELD2(1,IFFAT) + DUM*XI
         FIELD2(2,IFFAT) = FIELD2(2,IFFAT) + DUM*YI
         FIELD2(3,IFFAT) = FIELD2(3,IFFAT) + DUM*ZI
         DO 210 JFFAT = IFFAT+1, NFFAT
            IF(CHARG(JFFAT).EQ.ZERO.AND.POL(JFFAT).EQ.ZERO) GOTO 210
            QJ    = CHARG(JFFAT)
            XJ    = CORD(1,JFFAT) - CENTX
            YJ    = CORD(2,JFFAT) - CENTY
            ZJ    = CORD(3,JFFAT) - CENTZ
            RJ2   = XJ*XJ+YJ*YJ+ZJ*ZJ
            IF(RJ2.GT.(R-1.0D+00)**2) GOTO 210
            RIRJ  = XI*XJ+YI*YJ+ZI*ZJ
            FAC   = RI2*RJ2/R2 + R2 - TWO*RIRJ
            FACRT = SQRT(FAC)
            DUM   = -SCALE/(FAC*FACRT)
            DUMI  = DUM*QJ
            DUMJ  = DUM*QI
            FIELD2(1,IFFAT)=FIELD2(1,IFFAT) + DUMI*(XI*RJ2/R2-XJ)
            FIELD2(2,IFFAT)=FIELD2(2,IFFAT) + DUMI*(YI*RJ2/R2-YJ)
            FIELD2(3,IFFAT)=FIELD2(3,IFFAT) + DUMI*(ZI*RJ2/R2-ZJ)
            FIELD2(1,JFFAT)=FIELD2(1,JFFAT) + DUMJ*(XJ*RI2/R2-XI)
            FIELD2(2,JFFAT)=FIELD2(2,JFFAT) + DUMJ*(YJ*RI2/R2-YI)
            FIELD2(3,JFFAT)=FIELD2(3,JFFAT) + DUMJ*(ZJ*RI2/R2-ZI)
 210     CONTINUE
 200  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD2,3*NFFAT)
      END IF
C
C     -- SOLVE INDUCED DIPOLES --
      CALL SOLVEDIP(CORD,POL,DIP,ENPOL,
     *              FIELD1,FIELD2,FIELD3,
     *              NONLST,IDGROUP,
     *              XTS,YTS,ZTS,CMAT1,POT2,QRXN1,QRXN2,NTS)
C
      ENRXNPOL = ZERO
      IF(IRXNFLD.EQ.1 .AND. RXNRAD.LT.1.0D+30) THEN
         DO IFFAT=1,NFFAT
            ENRXNPOL = ENRXNPOL - FIELD2(1,IFFAT)*DIP(1,IFFAT)
     *                          - FIELD2(2,IFFAT)*DIP(2,IFFAT)
     *                          - FIELD2(3,IFFAT)*DIP(3,IFFAT)
         ENDDO
      ELSE IF(IRXNFLD.GE.60 .AND. RXNRAD.LT.1.0D+30) THEN
         DO ITS = 1, NTS
            ENRXNPOL = ENRXNPOL + POT1(ITS)*QRXN2(ITS)
         ENDDO
      END IF
      ENRXNPOL = PT5*ENRXNPOL
C
C     -- COMPUTE GRADIENTS --
C
      DO 400 III=1, NTODO
         IFFAT = NONLST(1,III)
         JFFAT = NONLST(2,III)
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 400
         IF(POL(IFFAT).EQ.ZERO.AND.CHARG(IFFAT).EQ.ZERO) GOTO 400
         QI    = CHARG(IFFAT)
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         IF(POL(JFFAT).EQ.ZERO.AND.CHARG(JFFAT).EQ.ZERO) GOTO 400
         QJ    = CHARG(JFFAT)
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
C
         XGRP  = CORD(1,IDGROUP(IFFAT)) - CORD(1,IDGROUP(JFFAT))
         YGRP  = CORD(2,IDGROUP(IFFAT)) - CORD(2,IDGROUP(JFFAT))
         ZGRP  = CORD(3,IDGROUP(IFFAT)) - CORD(3,IDGROUP(JFFAT))
         PBCX  = XBOX * ANINT(XGRP/XBOX)
         PBCY  = YBOX * ANINT(YGRP/YBOX)
         PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.RRCUT) GOTO 400
         IF(R2.GT.SWRR2) GOTO 400
         CALL SWFUNC(R2,XGRP,YGRP,ZGRP)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         XX    = X*X
         YY    = Y*Y
         ZZ    = Z*Z
         XY    = X*Y
         XZ    = X*Z
         YZ    = Y*Z
         R2    = XX+YY+ZZ
         ONER2 = ONE/R2
         ONER  = SQRT(ONER2)
         ONER3 = ONER2*ONER
         ONER5 = ONER2*ONER3
         ONER7 = ONER2*ONER5
C
C        - FORCES BETWEEN CHARGE AND DIPOLE
C
         QIDOT = THREE*ONER5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)*QI
         QJDOT = THREE*ONER5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)*QJ
         QIONER3= QI*ONER3
         QJONER3= QJ*ONER3
C              NEGATIVE FORCE ON QI BY DIPJ
         DXI   = DIPJX*QIONER3 - QIDOT*X
         DYI   = DIPJY*QIONER3 - QIDOT*Y
         DZI   = DIPJZ*QIONER3 - QIDOT*Z
C              NEGATIVE FORCE ON QJ BY DIPI
C                       FORCE ON DIPI BY QJ
         DXJ   = DIPIX*QJONER3 - QJDOT*X
         DYJ   = DIPIY*QJONER3 - QJDOT*Y
         DZJ   = DIPIZ*QJONER3 - QJDOT*Z
C              NEGATIVE FORCE ON IFFAT
         DX    = DXI - DXJ
         DY    = DYI - DYJ
         DZ    = DZI - DZJ
C
C        - FORCES BETWEEN DIPOLE AND DIPOLE -
C
         DOTM  = DIPJX*DIPIX + DIPJY*DIPIY + DIPJZ*DIPIZ
         DOTXY = DIPJY*DIPIX + DIPIY*DIPJX
         DOTXZ = DIPJZ*DIPIX + DIPIZ*DIPJX
         DOTYZ = DIPJY*DIPIZ + DIPIY*DIPJZ
         DOTX  = TWO*DIPJX*DIPIX*X + DOTXY*Y + DOTXZ*Z
         DOTY  = TWO*DIPJY*DIPIY*Y + DOTXY*X + DOTYZ*Z
         DOTZ  = TWO*DIPJZ*DIPIZ*Z + DOTXZ*X + DOTYZ*Y
         DUM   = THREE*ONER5
         TEMP  = DIPIX*DIPJX*XX
     *          +DIPIY*DIPJY*YY
     *          +DIPIZ*DIPJZ*ZZ
     *          +(DIPIX*DIPJY+DIPIY*DIPJX)*XY
     *          +(DIPIX*DIPJZ+DIPIZ*DIPJX)*XZ
     *          +(DIPIY*DIPJZ+DIPIZ*DIPJY)*YZ
         DUM7  = 15.0D+00*TEMP*ONER7
C        - NEGATIVE FORCE ON IFFAT
         DX    = DX - DUM*(DOTM*X+DOTX) + DUM7*X
         DY    = DY - DUM*(DOTM*Y+DOTY) + DUM7*Y
         DZ    = DZ - DUM*(DOTM*Z+DOTZ) + DUM7*Z
C
C        - ENERGY-SWFDX TERMS
C
         FLDIX = QJONER3*X      ! FIELD AT DIPI DUE TO QJ
         FLDIY = QJONER3*Y
         FLDIZ = QJONER3*Z
         FLDJX = QIONER3*(-X)   ! FIELD AT DIPJ DUE TO QI
         FLDJY = QIONER3*(-Y)
         FLDJZ = QIONER3*(-Z)
         EDIQJ = -(FLDIX*DIPIX+FLDIY*DIPIY+FLDIZ*DIPIZ) ! E = -F*D
         EDJQI = -(FLDJX*DIPJX+FLDJY*DIPJY+FLDJZ*DIPJZ)
C
         DOTJ  = THREE*ONER5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)
         FLDIX = -DIPJX*ONER3 + DOTJ*X  ! FIELD AT DIPI DUE TO DIPJ
         FLDIY = -DIPJY*ONER3 + DOTJ*Y
         FLDIZ = -DIPJZ*ONER3 + DOTJ*Z
         EDIDJ = -(DIPIX*FLDIX + DIPIY*FLDIY + DIPIZ*FLDIZ) ! E = -F*D
         EPAIR = EDIQJ + EDJQI + EDIDJ
C
         DEX   = DX*SWF
         DEY   = DY*SWF
         DEZ   = DZ*SWF
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEX
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEY
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEZ
         FFGRD(1,IDGROUP(IFFAT))=FFGRD(1,IDGROUP(IFFAT))+EPAIR*SWFDX
         FFGRD(2,IDGROUP(IFFAT))=FFGRD(2,IDGROUP(IFFAT))+EPAIR*SWFDY
         FFGRD(3,IDGROUP(IFFAT))=FFGRD(3,IDGROUP(IFFAT))+EPAIR*SWFDZ
         FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DEX
         FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DEY
         FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DEZ
         FFGRD(1,IDGROUP(JFFAT))=FFGRD(1,IDGROUP(JFFAT))-EPAIR*SWFDX
         FFGRD(2,IDGROUP(JFFAT))=FFGRD(2,IDGROUP(JFFAT))-EPAIR*SWFDY
         FFGRD(3,IDGROUP(JFFAT))=FFGRD(3,IDGROUP(JFFAT))-EPAIR*SWFDZ
         VIR(1)    =VIR(1)     + DEX*X + EPAIR*SWFDX*XGRP
         VIR(2)    =VIR(2)     + DEY*Y + EPAIR*SWFDY*YGRP
         VIR(3)    =VIR(3)     + DEZ*Z + EPAIR*SWFDZ*ZGRP
 400  CONTINUE
C
C     -- FORCE CORRECTION DUE TO REACTION FIELD DIRECT METHOD --
C        (IMAGE CHARGE METHOD)
C
      IF(IRXNFLD.EQ.1 .AND. RXNRAD.LT.1.0D+30) THEN
      R    = RXNRAD
      R2   = R*R
      R3   = R*R2
      R4   = R2*R2
      IPCOUNT = ME - 1
      DO 500 IFFAT=1,NFFAT
         IF(POL(IFFAT).EQ.ZERO.AND.CHARG(IFFAT).EQ.ZERO) GOTO 500
         QI     = CHARG(IFFAT)
         XI     = CORD(1,IFFAT) - CENTX
         YI     = CORD(2,IFFAT) - CENTY
         ZI     = CORD(3,IFFAT) - CENTZ
         RI2    = XI*XI+YI*YI+ZI*ZI
         IF(RI2.GT.(R-1.0D+00)**2) GOTO 500
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 500
         END IF
         DIX    = DIP(1,IFFAT)
         DIY    = DIP(2,IFFAT)
         DIZ    = DIP(3,IFFAT)
C
         DEDX1 = ZERO
         DEDY1 = ZERO
         DEDZ1 = ZERO
         DEDX2 = ZERO
         DEDY2 = ZERO
         DEDZ2 = ZERO
         DEDX3 = ZERO
         DEDY3 = ZERO
         DEDZ3 = ZERO
         DO 510 JFFAT=1,NFFAT
            QJ     = CHARG(JFFAT)
            XJ     = CORD(1,JFFAT) - CENTX
            YJ     = CORD(2,JFFAT) - CENTY
            ZJ     = CORD(3,JFFAT) - CENTZ
            RJ2    = XJ*XJ+YJ*YJ+ZJ*ZJ
            IF(RJ2.GT.(R-1.0D+00)**2) GOTO 510
            DJX    = DIP(1,JFFAT)
            DJY    = DIP(2,JFFAT)
            DJZ    = DIP(3,JFFAT)
            DJRJ   = DJX*XJ + DJY*YJ + DJZ*ZJ
            DJRI   = DJX*XI + DJY*YI + DJZ*ZI
            RIRJ   = XI*XJ+YI*YJ+ZI*ZJ
            FAC2   = ONE/(RI2*RJ2 + R4 -TWO*R2*RIRJ)
            FAC    = SQRT(FAC2)
            FAC3   = FAC*FAC2
            FAC5   = FAC3*FAC2
            FAC7   = FAC5*FAC2
C
C         (A) FORCE ON CHARGE(IFFAT) BY REACTION FIELD OF DIPOLE(JFFAT)
C
            FDIMGX = - (TWO*R*DJRJ*XI - R3*DJX)*FAC3
     *               + (R*RI2*DJRJ - R3*DJRI)*FAC5
     *                      *THREE*(RJ2*XI - R2*XJ)
            FDIMGY = - (TWO*R*DJRJ*YI - R3*DJY)*FAC3
     *               + (R*RI2*DJRJ - R3*DJRI)*FAC5
     *                      *THREE*(RJ2*YI - R2*YJ)
            FDIMGZ = - (TWO*R*DJRJ*ZI - R3*DJZ)*FAC3
     *               + (R*RI2*DJRJ - R3*DJRI)*FAC5
     *                      *THREE*(RJ2*ZI - R2*ZJ)
            DEDX1 = DEDX1 - SCALE*QI*FDIMGX
            DEDY1 = DEDY1 - SCALE*QI*FDIMGY
            DEDZ1 = DEDZ1 - SCALE*QI*FDIMGZ
C
C         (B) FORCE ON DIPOLE(IFFAT) BY REACTION FIELD OF CHARGE(JFFAT)
C
            DUM2   = FAC2*R2
            DUM    = FAC*R
            DUM3   = DUM2*DUM
            DUM5   = DUM2*DUM3
            FDXDX  = DUM5*QJ*THREE*(RJ2/R2*XI-XJ)*(RJ2/R2*XI-XJ)
     *              -DUM3*QJ*(RJ2/R2)
            FDXDY  = DUM5*QJ*THREE*(RJ2/R2*XI-XJ)*(RJ2/R2*YI-YJ)
            FDXDZ  = DUM5*QJ*THREE*(RJ2/R2*XI-XJ)*(RJ2/R2*ZI-ZJ)
            FDYDX  = DUM5*QJ*THREE*(RJ2/R2*YI-YJ)*(RJ2/R2*XI-XJ)
            FDYDY  = DUM5*QJ*THREE*(RJ2/R2*YI-YJ)*(RJ2/R2*YI-YJ)
     *              -DUM3*QJ*(RJ2/R2)
            FDYDZ  = DUM5*QJ*THREE*(RJ2/R2*YI-YJ)*(RJ2/R2*ZI-ZJ)
            FDZDX  = DUM5*QJ*THREE*(RJ2/R2*ZI-ZJ)*(RJ2/R2*XI-XJ)
            FDZDY  = DUM5*QJ*THREE*(RJ2/R2*ZI-ZJ)*(RJ2/R2*YI-YJ)
            FDZDZ  = DUM5*QJ*THREE*(RJ2/R2*ZI-ZJ)*(RJ2/R2*ZI-ZJ)
     *              -DUM3*QJ*(RJ2/R2)
C
            DEDX2 = DEDX2 - SCALE*(DIX*FDXDX+DIY*FDYDX+DIZ*FDZDX)
            DEDY2 = DEDY2 - SCALE*(DIX*FDXDY+DIY*FDYDY+DIZ*FDZDY)
            DEDZ2 = DEDZ2 - SCALE*(DIX*FDXDZ+DIY*FDYDZ+DIZ*FDZDZ)
C
C         (C) FORCE ON DIPOLE(IFFAT) BY REACTION FIELD OF DIPOLE(JFFAT)
C
            FDXDX  =-FAC3*TWO*R*DJRJ
     *              +FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*XI-R2*XJ)
     *              +FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*XI-R2*XJ)
     *              +FAC5*(R*RI2*DJRJ-R3*DJRI)*THREE*RJ2
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*XI-R2*XJ)*(RJ2*XI-R2*XJ)
            FDXDY  =+FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*YI-R2*YJ)
     *              +FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*XI-R2*XJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*XI-R2*XJ)*(RJ2*YI-R2*YJ)
            FDXDZ  =+FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*ZI-R2*ZJ)
     *              +FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*XI-R2*XJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*XI-R2*XJ)*(RJ2*ZI-R2*ZJ)
            FDYDX  =+FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*XI-R2*XJ)
     *              +FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*YI-R2*YJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*YI-R2*YJ)*(RJ2*XI-R2*XJ)
            FDYDY  =-FAC3*TWO*R*DJRJ
     *              +FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*YI-R2*YJ)
     *              +FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*YI-R2*YJ)
     *              +FAC5*(R*RI2*DJRJ-R3*DJRI)*THREE*RJ2
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*YI-R2*YJ)*(RJ2*YI-R2*YJ)
            FDYDZ  =+FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*ZI-R2*ZJ)
     *              +FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*YI-R2*YJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*YI-R2*YJ)*(RJ2*ZI-R2*ZJ)
            FDZDX  =+FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*XI-R2*XJ)
     *              +FAC5*(TWO*R*DJRJ*XI-R3*DJX)*THREE*(RJ2*ZI-R2*ZJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*ZI-R2*ZJ)*(RJ2*XI-R2*XJ)
            FDZDY  =+FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*YI-R2*YJ)
     *              +FAC5*(TWO*R*DJRJ*YI-R3*DJY)*THREE*(RJ2*ZI-R2*ZJ)
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*ZI-R2*ZJ)*(RJ2*YI-R2*YJ)
            FDZDZ  =-FAC3*TWO*R*DJRJ
     *              +FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*ZI-R2*ZJ)
     *              +FAC5*(TWO*R*DJRJ*ZI-R3*DJZ)*THREE*(RJ2*ZI-R2*ZJ)
     *              +FAC5*(R*RI2*DJRJ-R3*DJRI)*THREE*RJ2
     *              -FAC7*(R*RI2*DJRJ-R3*DJRI)*15.0D+00
     *                   *(RJ2*ZI-R2*ZJ)*(RJ2*ZI-R2*ZJ)
C
            DEDX3 = DEDX3 - SCALE*(DIX*FDXDX+DIY*FDYDX+DIZ*FDZDX)
            DEDY3 = DEDY3 - SCALE*(DIX*FDXDY+DIY*FDYDY+DIZ*FDZDY)
            DEDZ3 = DEDZ3 - SCALE*(DIX*FDXDZ+DIY*FDYDZ+DIZ*FDZDZ)
C
 510     CONTINUE
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEDX1 + DEDX2 + DEDX3
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEDY1 + DEDY2 + DEDY3
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEDZ1 + DEDZ2 + DEDZ3
         VIR(1) =VIR(1) + (DEDX1 + DEDX2 + DEDX3)*CORD(1,IFFAT)
         VIR(2) =VIR(2) + (DEDY1 + DEDY2 + DEDY3)*CORD(2,IFFAT)
         VIR(3) =VIR(3) + (DEDZ1 + DEDZ2 + DEDZ3)*CORD(3,IFFAT)
 500  CONTINUE
      END IF
C
C
C     -- FORCE DUE TO REACTION FIELD SURFACE CHARGE --
C        (CPCM OR COSMO STYLE)
C
      IF(IRXNFLD.GE.60 .AND. RXNRAD.LT.1.0D+30) THEN
         IPCOUNT = ME - 1 
         DO 600 IFFAT=1,NFFAT
            QIFFAT= CHARG(IFFAT)
            DIX   = DIP(1,IFFAT)
            DIY   = DIP(2,IFFAT)
            DIZ   = DIP(3,IFFAT)
            XI    = CORD(1,IFFAT)
            YI    = CORD(2,IFFAT)
            ZI    = CORD(3,IFFAT)
            RI2   = (XI-CENTX)**2 + (YI-CENTY)**2 + (ZI-CENTZ)**2
            DO 610 JTS = 1, NTS
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 610
               END IF
               QJ    = QRXN1(JTS) + QRXN2(JTS)
               XJ    = XTS(JTS)
               YJ    = YTS(JTS)
               ZJ    = ZTS(JTS)
               X     = XI - XJ
               Y     = YI - YJ
               Z     = ZI - ZJ
               R2    = X*X + Y*Y + Z*Z
               ONER2 = ONE/R2
               ONER  = SQRT(ONER2)
               ONER3 = ONER2*ONER
               ONER5 = ONER3*ONER2
               DUM   = -QIFFAT*QJ*ONER3
               DXA   = DUM*X
               DYA   = DUM*Y
               DZA   = DUM*Z
               QJONER3= QJ*ONER3
               QJDOT = THREE*ONER5*(DIX*X+DIY*Y+DIZ*Z)*QJ
               DXB   = -DIX*QJONER3 + QJDOT*X
               DYB   = -DIY*QJONER3 + QJDOT*Y
               DZB   = -DIZ*QJONER3 + QJDOT*Z
               FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DXA + DXB
               FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DYA + DYB
               FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DZA + DZB
               VIR(1) =VIR(1) + (DXA + DXB)*CORD(1,IFFAT)
               VIR(2) =VIR(2) + (DYA + DYB)*CORD(2,IFFAT)
               VIR(3) =VIR(3) + (DZA + DZB)*CORD(3,IFFAT)
 610        CONTINUE
 600     CONTINUE
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK SOLVEDIP
      SUBROUTINE SOLVEDIP(CORD,POL,DIP,ENPOL,FIELD1,FIELD2,
     *                    FIELD3,NONLST,IDGROUP,
     *                    XTS,YTS,ZTS,CMAT1,POT2,QRXN1,QRXN2,NTS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00, PT5=0.5D+00,
     *           TWO=2.0D+00, THREE=3.0D+00)
C
      DIMENSION CORD(3,*),POL(*),DIP(3,*),FIELD1(3,*),FIELD2(3,*),
     *          FIELD3(3,*),NONLST(2,*),IDGROUP(*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),POT2(NTS),
     *          QRXN1(NTS),QRXN2(NTS),CMAT1(NTS,NTS)
C
      COMMON /FMCOM / XX(1)
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, DEJUN SI, JAN 2011, LINCOLN
C
C     -- ITERATIVE METHODS ARE EQUIVALENT TO MATRIX INVERSION
C
C
      IF(IDOPOL.EQ.0) THEN
         ENPOL = ZERO
         CALL VCLR(DIP,1,3*NFFAT)
         CALL VCLR(QRXN2,1,NTS)
         RETURN
      END IF
C
      SUMOLD=ZERO
      DO 305 ITER = 1, MXITER
      SUM = ZERO
      CALL VCLR(FIELD3,1,3*NFFAT)
C
C     -- FIELD3: FIELD AT POL DUE TO INDUCED DIPOLES --
C
      DO 300 III = 1, NTODO
         IFFAT = NONLST(1,III)
         JFFAT = NONLST(2,III)
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 300
         IF(POL(IFFAT).EQ.ZERO) GOTO 300
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         IF(POL(JFFAT).EQ.ZERO) GOTO 300
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
C
         XGRP  = CORD(1,IDGROUP(IFFAT)) - CORD(1,IDGROUP(JFFAT))
         YGRP  = CORD(2,IDGROUP(IFFAT)) - CORD(2,IDGROUP(JFFAT))
         ZGRP  = CORD(3,IDGROUP(IFFAT)) - CORD(3,IDGROUP(JFFAT))
         PBCX  = XBOX * ANINT(XGRP/XBOX)
         PBCY  = YBOX * ANINT(YGRP/YBOX)
         PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.RRCUT) GOTO 300
         IF(R2.GT.SWRR2) GOTO 300
         CALL SWFUNC(R2,XGRP,YGRP,ZGRP)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         ONER2 = ONE/R2
         ONER  = SQRT(ONER2)
         ONER3 = ONER2*ONER
         ONER5 = ONER2*ONER3
         DOTJ  = THREE*ONER5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)
         DOTI  = THREE*ONER5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)
         FIELD3(1,IFFAT)=FIELD3(1,IFFAT)+(-DIPJX*ONER3+DOTJ*X)*SWF
         FIELD3(2,IFFAT)=FIELD3(2,IFFAT)+(-DIPJY*ONER3+DOTJ*Y)*SWF
         FIELD3(3,IFFAT)=FIELD3(3,IFFAT)+(-DIPJZ*ONER3+DOTJ*Z)*SWF
         FIELD3(1,JFFAT)=FIELD3(1,JFFAT)+(-DIPIX*ONER3+DOTI*X)*SWF
         FIELD3(2,JFFAT)=FIELD3(2,JFFAT)+(-DIPIY*ONER3+DOTI*Y)*SWF
         FIELD3(3,JFFAT)=FIELD3(3,JFFAT)+(-DIPIZ*ONER3+DOTI*Z)*SWF
 300  CONTINUE
C
C
C     -- FIELD3: FIELD AT POL DUE TO REACTION FIELD OF INDUCED DIPOLES
C                DIRECT METHOD (IMAGE CHARGE)
C
      IF(IRXNFLD.EQ.1 .AND. RXNRAD.LT.1.0D+30) THEN
         SCALE = (RXNEPS-ONE)/RXNEPS
         R     = RXNRAD
         R2    = R*R
         R3    = R*R2
         R4    = R2*R2
         IPCOUNT = ME - 1
         DO 400 IFFAT = 1, NFFAT
            FDIMGX = ZERO
            FDIMGY = ZERO
            FDIMGZ = ZERO
            XI     = CORD(1,IFFAT) - CENTX
            YI     = CORD(2,IFFAT) - CENTY
            ZI     = CORD(3,IFFAT) - CENTZ
            RI2    = XI*XI+YI*YI+ZI*ZI
            IF(RI2.GT.(R-1.0D+00)**2) GOTO 400
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 400
            END IF
            DIPIX  = DIP(1,IFFAT)
            DIPIY  = DIP(2,IFFAT)
            DIPIZ  = DIP(3,IFFAT)
            DO 410 JFFAT = 1,NFFAT
               XJ     = CORD(1,JFFAT) - CENTX
               YJ     = CORD(2,JFFAT) - CENTY
               ZJ     = CORD(3,JFFAT) - CENTZ
               RJ2    = XJ*XJ+YJ*YJ+ZJ*ZJ
               IF(RJ2.GT.(R-1.0D+00)**2) GOTO 410
               DIPJX  = DIP(1,JFFAT)
               DIPJY  = DIP(2,JFFAT)
               DIPJZ  = DIP(3,JFFAT)
               DJRJ   = DIPJX*XJ+DIPJY*YJ+DIPJZ*ZJ
               DJRI   = DIPJX*XI+DIPJY*YI+DIPJZ*ZI
               RIRJ   = XI*XJ+YI*YJ+ZI*ZJ
               FAC2   = ONE/(RI2*RJ2 + R4 - TWO*R2*RIRJ)
               FAC    = SQRT(FAC2)
               FAC3   = FAC*FAC2
               FAC5   = FAC3*FAC2
               FDIMGX = FDIMGX-SCALE*(TWO*R*DJRJ*XI-R3*DIPJX)*FAC3
     *                        +SCALE*(R*RI2*DJRJ - R3*DJRI)*FAC5
     *                                     *THREE*(RJ2*XI - R2*XJ)
               FDIMGY = FDIMGY-SCALE*(TWO*R*DJRJ*YI-R3*DIPJY)*FAC3
     *                        +SCALE*(R*RI2*DJRJ - R3*DJRI)*FAC5
     *                                     *THREE*(RJ2*YI - R2*YJ)
               FDIMGZ = FDIMGZ-SCALE*(TWO*R*DJRJ*ZI-R3*DIPJZ)*FAC3
     *                        +SCALE*(R*RI2*DJRJ - R3*DJRI)*FAC5
     *                                     *THREE*(RJ2*ZI - R2*ZJ)
 410        CONTINUE
            FIELD3(1,IFFAT) = FIELD3(1,IFFAT) + FDIMGX
            FIELD3(2,IFFAT) = FIELD3(2,IFFAT) + FDIMGY
            FIELD3(3,IFFAT) = FIELD3(3,IFFAT) + FDIMGZ
 400     CONTINUE
      END IF
C
C     -- FIELD3: FIELD AT POL DUE TO REACTION FIELD OF INDUCED DIPOLES
C                (SURFACE CHARGE METHOD, CPCM OR COSMO)
C        POT2  : POTENTIAL AT SURFACE DUE TO INDUCED DIPOLES
C        QRXN2 : SURFACE CHARGE DUE TO INDUCED DIPOLES
C
      IF(IRXNFLD.GE.60 .AND. RXNRAD.LT.1.0D+30) THEN
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 500 ITS = 1, NTS
            POT2(ITS) = ZERO
            XI     = XTS(ITS)
            YI     = YTS(ITS)
            ZI     = ZTS(ITS)
            DO 510 JFFAT = 1, NFFAT
               IF(GOPARR) THEN 
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 510
               END IF
               XJ    = CORD(1,JFFAT)
               YJ    = CORD(2,JFFAT)
               ZJ    = CORD(3,JFFAT)
               QJ    = XX(LFFCHARG+JFFAT-1)
               DIPJX = DIP(1,JFFAT)         
               DIPJY = DIP(2,JFFAT)
               DIPJZ = DIP(3,JFFAT)
               X     = XI - XJ              
               Y     = YI - YJ
               Z     = ZI - ZJ
               R2    = X*X + Y*Y + Z*Z
               ONER2 = ONE/R2
               ONER  = SQRT(ONER2)
               ONER3 = ONER2*ONER
               POT2(ITS)=POT2(ITS)+(DIPJX*X+DIPJY*Y+DIPJZ*Z)*ONER3
 510        CONTINUE
 500     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2405,POT2,NTS)
         IPCOUNT = ME - 1
         DO 520 ITS = 1, NTS
            QRXN2(ITS) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 520
            END IF
            DO JTS = 1, NTS
               QRXN2(ITS) = QRXN2(ITS) - CMAT1(ITS,JTS)*POT2(JTS)
            ENDDO
            QRXN2(ITS) = QRXN2(ITS)*SCALE
 520     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2404,QRXN2,NTS)
         IPCOUNT = ME - 1
         DO 600 IFFAT=1,NFFAT
            XI = CORD(1,IFFAT)
            YI = CORD(2,IFFAT)
            ZI = CORD(3,IFFAT)
            DO 610 JTS=1, NTS
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 610
               END IF
               XJ   = XTS(JTS)
               YJ   = YTS(JTS)
               ZJ   = ZTS(JTS)
               QJ   = QRXN1(JTS) + QRXN2(JTS)
               X    = XI - XJ
               Y    = YI - YJ
               Z    = ZI - ZJ
               R2   = X*X + Y*Y + Z*Z
               ONER2= ONE/R2
               ONER = SQRT(ONER2)
               ONER3= ONER2*ONER
               DUM  = QJ*ONER3
               FIELD3(1,IFFAT)=FIELD3(1,IFFAT)+DUM*X
               FIELD3(2,IFFAT)=FIELD3(2,IFFAT)+DUM*Y
               FIELD3(3,IFFAT)=FIELD3(3,IFFAT)+DUM*Z
 610        CONTINUE
 600     CONTINUE
      END IF
C
      IF(GOPARR) CALL DDI_GSUMF(2406,FIELD3,3*NFFAT)
C
C     - UPDATE DIPOLES AND COMPUTE POLARIZATION ENERGY -
      ENPOL = ZERO
      DO IFFAT=1,NFFAT
         DIP(1,IFFAT)=POL(IFFAT)*(FIELD1(1,IFFAT)
     *                           +FIELD2(1,IFFAT)
     *                           +FIELD3(1,IFFAT))
         DIP(2,IFFAT)=POL(IFFAT)*(FIELD1(2,IFFAT)
     *                           +FIELD2(2,IFFAT)
     *                           +FIELD3(2,IFFAT))
         DIP(3,IFFAT)=POL(IFFAT)*(FIELD1(3,IFFAT)
     *                           +FIELD2(3,IFFAT)
     *                           +FIELD3(3,IFFAT))
         SUM=SUM+ABS(DIP(1,IFFAT))+ABS(DIP(2,IFFAT))+ABS(DIP(3,IFFAT))
C        -- ONLY EXTRENAL FIELD SHOULD BE USED
         ENPOL = ENPOL - FIELD1(1,IFFAT)*DIP(1,IFFAT)
     *                 - FIELD1(2,IFFAT)*DIP(2,IFFAT)
     *                 - FIELD1(3,IFFAT)*DIP(3,IFFAT)
      ENDDO
      ENPOL    = PT5*ENPOL
C
      IF(ITER.GT.2) THEN
         DIFF = ABS(SUM - SUMOLD)
         IF(DIFF.LT.POLTOL)THEN
C           IF(MASWRK) WRITE(IW,'(A,F16.14,A,I4,A)')
C    *      'INDUCED DIPOLE CONVERGED TO ',POLTOL,' IN ',ITER,' STEPS.'
            GOTO 306
         END IF
      END IF
      SUMOLD=SUM
 305  CONTINUE
      IF(MASWRK) WRITE(IW,'(A,F16.14,A,I4,A)')
     *'INDUCED DIPOLE NOT CONVERGED TO ',POLTOL,' IN ',MXITER,' STEPS.'
      IF(MASWRK) WRITE(IW,'(1X,A,F20.16)')'DIFF=',DIFF
      IF(MASWRK) WRITE(IW,*)'THIS IS A PROBLEM ONLY WHEN THIS MESSAGE',
     *                      ' APPEARS FREQUENTLY'
 306  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK INIVEL
      SUBROUTINE INIVEL(VEL,QMVEL,ONEMAS,QM1MAS,CORD,ZMAS,QMZMAS,
     *                  SET,DX,DY,DZ,LISTQM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION VEL(3,*),QMVEL(3,*),ONEMAS(*),QM1MAS(*),SET(*),
     *          DX(*),DY(*),DZ(*),ZMAS(*),QMZMAS(*),CORD(3,*),
     *          TIMAT(3,3),LISTQM(*)
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOKELVIN=3.15774646D+05, BOLTZK=1.0D+00/TOKELVIN,
     *           PT5=0.50D+00,
     *           TWOTHIRD=2.0D+00/3.0D+00, ZERO=0.0D+00)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
C     -- FOR U1,U2 UNIFORMLY DISTRIB ON (0,1)
C        X = SQRT(-2*LN(U1)) * COS(2*PI*U2)
C        GIVES NORMALLY DISTRIB X ON (-INF,+INF)
C
      NLESS  = 2                    ! OPEN SYSTEM TRANS = ROT = 0
      IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) NLESS  = NLESS - 1
      NLESS  = NLESS + LISTQM(NFFAT+NAT+1)      ! QM-MM COMMON ATOMS
C
      PI     = 3.14159265358979323846264338D+00
      DO IDIM = 1, (NFFAT+NAT)*3
         CALL FFRAND(U1)
         CALL FFRAND(U2)
         SET(IDIM) = SQRT(-2.0D+00*LOG(U1)) * COS(2.0D+00*PI*U2)
      ENDDO
C
C     -- CALCULATE COM --
C
      COMX =ZERO
      COMY =ZERO
      COMZ =ZERO
      SMAS =ZERO
      DO IAT=1,NAT
         IF(LISTQM(NFFAT+IAT).EQ.0)THEN
            COMX =COMX +C(1,IAT)*QMZMAS(IAT)
            COMY =COMY +C(2,IAT)*QMZMAS(IAT)
            COMZ =COMZ +C(3,IAT)*QMZMAS(IAT)
            SMAS =SMAS +QMZMAS(IAT)
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         COMX =COMX +CORD(1,IFFAT)*ZMAS(IFFAT)
         COMY =COMY +CORD(2,IFFAT)*ZMAS(IFFAT)
         COMZ =COMZ +CORD(3,IFFAT)*ZMAS(IFFAT)
         SMAS =SMAS +ZMAS(IFFAT)
      ENDDO
      ONESMAS=1.0D+00/SMAS
      COMX = COMX*ONESMAS
      COMY = COMY*ONESMAS
      COMZ = COMZ*ONESMAS
C
C     -- FIRST ASSIGNMENT --
C
      SUMTX = ZERO
      SUMTY = ZERO
      SUMTZ = ZERO
      SUMAX = ZERO
      SUMAY = ZERO
      SUMAZ = ZERO
      J=0
      DO IAT=1,NAT
         IF(LISTQM(NFFAT+IAT).EQ.0)THEN
            SIGMA=SQRT(BOLTZK*TEMP0*QM1MAS(IAT))
            QMVEL(1,IAT)=SIGMA*SET(J+1)
            QMVEL(2,IAT)=SIGMA*SET(J+2)
            QMVEL(3,IAT)=SIGMA*SET(J+3)
            J=J+3
            DX(IAT) = C(1,IAT)-COMX
            DY(IAT) = C(2,IAT)-COMY
            DZ(IAT) = C(3,IAT)-COMZ
            SUMTX=SUMTX+QMVEL(1,IAT)*QMZMAS(IAT)
            SUMTY=SUMTY+QMVEL(2,IAT)*QMZMAS(IAT)
            SUMTZ=SUMTZ+QMVEL(3,IAT)*QMZMAS(IAT)
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         SIGMA=SQRT(BOLTZK*TEMP0*ONEMAS(IFFAT))
         VEL(1,IFFAT)=SIGMA*SET(J+1)
         VEL(2,IFFAT)=SIGMA*SET(J+2)
         VEL(3,IFFAT)=SIGMA*SET(J+3)
         J=J+3
         DX(IFFAT+NAT) = CORD(1,IFFAT)-COMX
         DY(IFFAT+NAT) = CORD(2,IFFAT)-COMY
         DZ(IFFAT+NAT) = CORD(3,IFFAT)-COMZ
         SUMTX=SUMTX+VEL(1,IFFAT)*ZMAS(IFFAT)
         SUMTY=SUMTY+VEL(2,IFFAT)*ZMAS(IFFAT)
         SUMTZ=SUMTZ+VEL(3,IFFAT)*ZMAS(IFFAT)
      ENDDO
C
C     -- MAKE TRANS AND ROT MOMENTA = ZERO --
C        (ZHOU ET AL BIOPHYSICAL JOURNAL,79,2902-2908)
C
C     -- VELOCITY OF COM --
      SUMTX=SUMTX*ONESMAS
      SUMTY=SUMTY*ONESMAS
      SUMTZ=SUMTZ*ONESMAS
C
      SUMAX = ZERO
      SUMAY = ZERO
      SUMAZ = ZERO
      TXX   = ZERO
      TYY   = ZERO
      TZZ   = ZERO
      TXY   = ZERO
      TXZ   = ZERO
      TYZ   = ZERO
      DO IAT=1,NAT
         IF(LISTQM(NFFAT+IAT).EQ.0)THEN
            QMVEL(1,IAT)=QMVEL(1,IAT)-SUMTX
            QMVEL(2,IAT)=QMVEL(2,IAT)-SUMTY
            QMVEL(3,IAT)=QMVEL(3,IAT)-SUMTZ
C           -- FIND ANGULAR MOMENTUM AROUND COM
            ANGVX=DY(IAT)*QMVEL(3,IAT)-DZ(IAT)*QMVEL(2,IAT)
            ANGVY=DZ(IAT)*QMVEL(1,IAT)-DX(IAT)*QMVEL(3,IAT)
            ANGVZ=DX(IAT)*QMVEL(2,IAT)-DY(IAT)*QMVEL(1,IAT)
            SUMAX=SUMAX+ANGVX*QMZMAS(IAT)
            SUMAY=SUMAY+ANGVY*QMZMAS(IAT)
            SUMAZ=SUMAZ+ANGVZ*QMZMAS(IAT)
C           -- CALCULATE MOMENT OF INTERTIA AROUND COM
            TXX = TXX + QMZMAS(IAT)*(DY(IAT)*DY(IAT)+DZ(IAT)*DZ(IAT))
            TYY = TYY + QMZMAS(IAT)*(DX(IAT)*DX(IAT)+DZ(IAT)*DZ(IAT))
            TZZ = TZZ + QMZMAS(IAT)*(DX(IAT)*DX(IAT)+DY(IAT)*DY(IAT))
            TXY = TXY - QMZMAS(IAT)* DX(IAT)*DY(IAT)
            TXZ = TXZ - QMZMAS(IAT)* DX(IAT)*DZ(IAT)
            TYZ = TYZ - QMZMAS(IAT)* DY(IAT)*DZ(IAT)
         END IF
      END DO
      DO IFFAT=1,NFFAT
         VEL(1,IFFAT)=VEL(1,IFFAT)-SUMTX
         VEL(2,IFFAT)=VEL(2,IFFAT)-SUMTY
         VEL(3,IFFAT)=VEL(3,IFFAT)-SUMTZ
C        --- FIND ANGULAR MOMENTUM AROUND COM ---
         ANGVX=DY(IFFAT+NAT)*VEL(3,IFFAT)-DZ(IFFAT+NAT)*VEL(2,IFFAT)
         ANGVY=DZ(IFFAT+NAT)*VEL(1,IFFAT)-DX(IFFAT+NAT)*VEL(3,IFFAT)
         ANGVZ=DX(IFFAT+NAT)*VEL(2,IFFAT)-DY(IFFAT+NAT)*VEL(1,IFFAT)
         SUMAX=SUMAX+ANGVX*ZMAS(IFFAT)
         SUMAY=SUMAY+ANGVY*ZMAS(IFFAT)
         SUMAZ=SUMAZ+ANGVZ*ZMAS(IFFAT)
C        --- CALCULATE MOMENT OF INTERTIA AROUND COM ---
         TXX = TXX + ZMAS(IFFAT)*(DY(IFFAT+NAT)*DY(IFFAT+NAT)
     *                           +DZ(IFFAT+NAT)*DZ(IFFAT+NAT))
         TYY = TYY + ZMAS(IFFAT)*(DX(IFFAT+NAT)*DX(IFFAT+NAT)
     *                           +DZ(IFFAT+NAT)*DZ(IFFAT+NAT))
         TZZ = TZZ + ZMAS(IFFAT)*(DX(IFFAT+NAT)*DX(IFFAT+NAT)
     *                           +DY(IFFAT+NAT)*DY(IFFAT+NAT))
         TXY = TXY - ZMAS(IFFAT)* DX(IFFAT+NAT)*DY(IFFAT+NAT)
         TXZ = TXZ - ZMAS(IFFAT)* DX(IFFAT+NAT)*DZ(IFFAT+NAT)
         TYZ = TYZ - ZMAS(IFFAT)* DY(IFFAT+NAT)*DZ(IFFAT+NAT)
      END DO
C
C     --- CALCULATE INVERSE INERTIA TENSOR ---
      CALL TINV(TXX,TYY,TZZ,TXY,TXZ,TYZ,TIMAT)
C     --- MULTIPLY INVERSE INERTIA TENSOR WITH ANGULAR MOMENTUM ---
      PRODX = SUMAX*TIMAT(1,1) + SUMAY*TIMAT(1,2) + SUMAZ*TIMAT(1,3)
      PRODY = SUMAX*TIMAT(2,1) + SUMAY*TIMAT(2,2) + SUMAZ*TIMAT(2,3)
      PRODZ = SUMAX*TIMAT(3,1) + SUMAY*TIMAT(3,2) + SUMAZ*TIMAT(3,3)
C
C     -- SECOND ASSIGNMENT --
C
      ENKIN = ZERO
      DO IAT =1 ,NAT
         IF(LISTQM(NFFAT+IAT).EQ.0)THEN
C           -- GET THE CROSS PRODUCT WITH THE DISTANCES --
            CROSX = PRODY*DZ(IAT) - PRODZ*DY(IAT)
            CROSY = PRODZ*DX(IAT) - PRODX*DZ(IAT)
            CROSZ = PRODX*DY(IAT) - PRODY*DX(IAT)
C           -- MAKE IT (3N-6) --
            QMVEL(1,IAT)=QMVEL(1,IAT)-CROSX
            QMVEL(2,IAT)=QMVEL(2,IAT)-CROSY
            QMVEL(3,IAT)=QMVEL(3,IAT)-CROSZ
C           -- CALCULATE CURRENT TEMPERATURE --
            DUMY = ZERO
            DO III = 1, 3
               DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
            ENDDO
            ENKIN = ENKIN + DUMY*QMZMAS(IAT)
         END IF
      ENDDO
      DO IFFAT =1 ,NFFAT
C        -- GET THE CROSS PRODUCT WITH THE DISTANCES --
         CROSX = PRODY*DZ(IFFAT+NAT) - PRODZ*DY(IFFAT+NAT)
         CROSY = PRODZ*DX(IFFAT+NAT) - PRODX*DZ(IFFAT+NAT)
         CROSZ = PRODX*DY(IFFAT+NAT) - PRODY*DX(IFFAT+NAT)
C        -- MAKE IT (3N-6) --
         VEL(1,IFFAT)=VEL(1,IFFAT)-CROSX
         VEL(2,IFFAT)=VEL(2,IFFAT)-CROSY
         VEL(3,IFFAT)=VEL(3,IFFAT)-CROSZ
C        -- CALCULATE CURRENT TEMPERATURE --
         DUMY = ZERO
         DO III = 1, 3
            DUMY = DUMY + VEL(III,IFFAT)*VEL(III,IFFAT)
         ENDDO
         ENKIN = ENKIN + DUMY*ZMAS(IFFAT)
      ENDDO
      ENKIN = PT5*ENKIN
      TEMP  = TOKELVIN*TWOTHIRD*ENKIN/DBLE(NFFAT+NAT-NLESS)
C
C     -- THIRD ASSIGNMENT --
C        RESCALING VELOCITIES TO GIVE TEMPERATURE AS TEMP0
C
      TFACT =SQRT(TEMP0/TEMP)
      TMOMX = ZERO
      TMOMY = ZERO
      TMOMZ = ZERO
      AMOMX = ZERO
      AMOMY = ZERO
      AMOMZ = ZERO
      ENKIN = ZERO
      DO IAT=1,NAT
         IF(LISTQM(NFFAT+IAT).EQ.0)THEN
            QMVEL(1,IAT)=QMVEL(1,IAT)*TFACT
            QMVEL(2,IAT)=QMVEL(2,IAT)*TFACT
            QMVEL(3,IAT)=QMVEL(3,IAT)*TFACT
            TMOMX= TMOMX+ QMVEL(1,IAT)*QMZMAS(IAT)
            TMOMY= TMOMY+ QMVEL(2,IAT)*QMZMAS(IAT)
            TMOMZ= TMOMZ+ QMVEL(3,IAT)*QMZMAS(IAT)
            AMOMX= AMOMX+ QMVEL(3,IAT)*DY(IAT)*QMZMAS(IAT)
     *                  - QMVEL(2,IAT)*DZ(IAT)*QMZMAS(IAT)
            AMOMY= AMOMY+ QMVEL(1,IAT)*DZ(IAT)*QMZMAS(IAT)
     *                  - QMVEL(3,IAT)*DX(IAT)*QMZMAS(IAT)
            AMOMZ= AMOMZ+ QMVEL(2,IAT)*DX(IAT)*QMZMAS(IAT)
     *                  - QMVEL(1,IAT)*DY(IAT)*QMZMAS(IAT)
            DUMY = ZERO
            DO III = 1, 3
               DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
            ENDDO
            ENKIN = ENKIN + DUMY*QMZMAS(IAT)
         END IF
      ENDDO
      DO IFFAT=1,NFFAT
         VEL(1,IFFAT)=VEL(1,IFFAT)*TFACT
         VEL(2,IFFAT)=VEL(2,IFFAT)*TFACT
         VEL(3,IFFAT)=VEL(3,IFFAT)*TFACT
         TMOMX= TMOMX+ VEL(1,IFFAT)*ZMAS(IFFAT)
         TMOMY= TMOMY+ VEL(2,IFFAT)*ZMAS(IFFAT)
         TMOMZ= TMOMZ+ VEL(3,IFFAT)*ZMAS(IFFAT)
         AMOMX= AMOMX+ VEL(3,IFFAT)*DY(IFFAT+NAT)*ZMAS(IFFAT)
     *               - VEL(2,IFFAT)*DZ(IFFAT+NAT)*ZMAS(IFFAT)
         AMOMY= AMOMY+ VEL(1,IFFAT)*DZ(IFFAT+NAT)*ZMAS(IFFAT)
     *               - VEL(3,IFFAT)*DX(IFFAT+NAT)*ZMAS(IFFAT)
         AMOMZ= AMOMZ+ VEL(2,IFFAT)*DX(IFFAT+NAT)*ZMAS(IFFAT)
     *               - VEL(1,IFFAT)*DY(IFFAT+NAT)*ZMAS(IFFAT)
         DUMY = ZERO
         DO III = 1, 3
            DUMY = DUMY + VEL(III,IFFAT)*VEL(III,IFFAT)
         ENDDO
         ENKIN = ENKIN + DUMY*ZMAS(IFFAT)
      ENDDO
      ENKIN = PT5*ENKIN
      TEMP  = TOKELVIN*TWOTHIRD*ENKIN/DBLE(NFFAT+NAT-NLESS)
C     WRITE(IW,*)'TMOMX=',TMOMX,TMOMY,TMOMZ
C     WRITE(IW,*)'AMOMX=',AMOMX,AMOMY,AMOMZ
C
      RETURN
      END
C*MODULE QUANPO  *DECK TINV
      SUBROUTINE TINV(TXX,TYY,TZZ,TXY,TXZ,TYZ,TIMAT)
C     
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION TEMP(3,3),AUGMAT(3,6),TIMAT(3,3)
C
C     NANDUN THELLAMUREGE, JAN 2011, LINCOLN
C
C     --- STORE INPUT MATRIX ---
      TEMP(1,1) = TXX
      TEMP(2,2) = TYY
      TEMP(3,3) = TZZ
      TEMP(1,2) = TXY
      TEMP(1,3) = TXZ
      TEMP(2,3) = TYZ
      TEMP(2,1) = TEMP(1,2)
      TEMP(2,3) = TEMP(2,3)
      TEMP(3,1) = TEMP(1,3)
      TEMP(3,2) = TEMP(2,3)
C     --- AUGMENT INPUT MATRIX WITH AN IDENTITY MATRIX ---
      DO I = 1,3
         DO J = 1,6
            IF (J.LE.3) THEN
               AUGMAT(I,J) = TEMP(I,J)
            ELSE
               IF (I+3.EQ.J) THEN
                  AUGMAT(I,J) = 1.0D+00
               ELSE
                  AUGMAT(I,J) = 0.0D+00
               END IF
            END IF
         END DO
      END DO
C     --- REDUCE AUGMENTED MATRIX TO UPPER TRIANGULAR FORM ---
      DO K=1,2
         IF(AUGMAT(K,K).EQ.0.0D+00) THEN
            DO I = K+1,3
               IF(AUGMAT(I,K).NE.0.0D+00) THEN
                  DO J=1,6
                     AUGMAT(K,J)=AUGMAT(K,J)+AUGMAT(I,J)
                  END DO
               END IF
             END DO
         END IF
         DO J=K+1,3
            VAR = AUGMAT(J,K)/AUGMAT(K,K)
            DO I=K,6
               AUGMAT(J,I)=AUGMAT(J,I) - VAR*AUGMAT(K,I)
            END DO
         END DO
      END DO
C     --- MAKE DIAGONAL ELEMENTS 1.0D+00 ---
      DO I=1,3
         VAR = AUGMAT(I,I)
         DO J= I,6
            AUGMAT(I,J)=AUGMAT(I,J)/VAR
         END DO
      END DO
C     -- REDUCE RIGHT HALF OF THE AUGMENTED MATRIX TO IDENTITY MATRIX --
      DO K = -1,2
      DO I = 1,K
         VAR = AUGMAT(I,K+1)
         DO J = K,6
            AUGMAT(I,J) = AUGMAT(I,J) - AUGMAT(K+1,J)*VAR
         END DO
      END DO
      END DO
C     --- STORE THE INVERTED MATRIX ---
      DO I = 1,3
         DO J=1,3
            TIMAT(I,J) = AUGMAT(I,J+3)
         END DO
      END DO
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFMDX
      SUBROUTINE FFMDX
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
C
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSC0,LFFDFSA,LFFDFSN
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(NRDF.GT.0) CALL INIRDF(X(LFFATMNAM),X(LFFFRAG1),X(LFFFRAG2),
     *                   X(LFFNFRAG1),X(LFFNFRAG2),X(LFFGOFR))
      IF(NDFS.GT.0) CALL INIDFS(X(LFFATMNAM),X(LFFDFSA),
     *                   X(LFFDFSC),X(LFFDFSN))
      NTS = IRXNFLD
      IF(NAT.EQ.0 .AND. NFFAT.GT.0) THEN
        CALL FFMD1(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFZMAS),X(LFFONEMAS),X(LFFQMZMAS),X(LFFQM1MAS),
     *             X(LFFCHARG),X(LFFPOL),X(LFFDIP),
     *             X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *             X(LFFSIG),X(LFFEPS),X(LFFSIG2),X(LFFEPS2),
     *             X(LFFBOND0),X(LFFFCBOND),
     *             X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *             X(LFFDIHB0),X(LFFFCDIHB),
     *             X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *             X(LFFKLIST),X(LFFLLIST),
     *             X(LFFMLIST),X(LFFNLIST),
     *             X(LFFL1213J),X(LFFL14J),
     *             X(LFFVEL),X(LFFQMVEL),
     *             X(LFFFFGRD0),X(LFFFFGRD1),X(LFFFFGRD2),
     *             X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *             X(LFFPOT1),X(LFFPOT2),X(LFFQRXN1),X(LFFQRXN2),NTS,
     *             X(LFFLISTQM),X(LFFNONLST),X(LFFNONLSTQ),
     *             X(LFFMAPLST),X(LFFCMAPCO),X(LFFIDGROUP))
      ELSE IF (NAT.GT.0 .AND. NFFAT.GT.0) THEN
        CALL FFMD2(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFZMAS),X(LFFONEMAS),X(LFFQMZMAS),X(LFFQM1MAS),
     *             X(LFFVEL),X(LFFQMVEL),
     *             X(LFFFFGRD0),X(LFFFFGRD1),X(LFFFFGRD2),
     *             X(LFFQMGRD0),X(LFFQMGRD1),X(LFFQMGRD2),
     *             X(LFFLISTQM),X(LFFNONLST),X(LFFNONLSTQ),
     *             X(LFFL1213J),X(LFFIDGROUP))
      END IF
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL MD SIMULATION SUCCESSFULLY COMPLETED.'
         WRITE(IW,*)' '
      END IF
      CALL TIMIT(1)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFMD1
      SUBROUTINE FFMD1(ATMNAM,CORD,CORDSV,ZANF,
     *                 ZMAS,ONEMAS,QMZMAS,QM1MAS,
     *                 CHARG,POL,DIP,
     *                 FIELD1,FIELD2,FIELD3,
     *                 SIG,EPS,SIG2,EPS2,
     *                 BOND0,FCBOND,
     *                 ANGL0,FCANGL,FCWAGG,
     *                 DIHB0,FCDIHB,
     *                 VROT,NNN,GAMA,IPAIR,
     *                 KLIST,LLIST,MLIST,NLIST,
     *                 L1213J,L14J,
     *                 VEL,QMVEL,
     *                 FFGRD0,FFGRD1,FFGRD2,
     *                 XTS,YTS,ZTS,CMAT1,
     *                 POT1,POT2,QRXN1,QRXN2,NTS,
     *                 LISTQM,NONLST,NONLSTQ,MAPLST,CMAPCO,
     *                 IDGROUP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, TWOTHIRD=2.0D+00/3.0D+00,
     *           ONETHIRD=1.0D+00/3.0D+00, ONESIX=1.0D+00/6.0D+00,
     *           FIVESIX=5.0D+00/6.0D+00)
C
      CHARACTER*100 WD100
      CHARACTER*3   AAA,A3
      CHARACTER*2   SYMBOL
      CHARACTER*1   ALTLOC,A1,CHNID,ICODE
      CHARACTER*4   NAME4
      CHARACTER*6   NAME6
      CHARACTER*10  ATMNAM
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          ZMAS(NFFAT),ONEMAS(NFFAT),QMZMAS(*),QM1MAS(*),
     *          CHARG(NFFAT),POL(NFFAT),DIP(3,NFFAT),
     *          FIELD1(3,NFFAT),FIELD2(3,NFFAT),FIELD3(3,NFFAT),
     *          SIG(NFFAT),EPS(NFFAT),SIG2(NFFAT),EPS2(NFFAT),
     *          BOND0(NBOND),FCBOND(NBOND),
     *          ANGL0(NANGL),FCANGL(NANGL),
     *          FCWAGG(NWAGG),FCDIHB(NDIHB),
     *          VROT(NDIHR),NNN(NDIHR),GAMA(NDIHR),IPAIR(2,NBOND),
     *          KLIST(3,NANGL),
     *          LLIST(4,NDIHR),MLIST(4,NWAGG),
     *          L1213J(2,NBOND+NANGL),L14J(2,NDIHR),
     *          VEL(3,NFFAT),QMVEL(3,*),
     *          FFGRD0(3,NFFAT),FFGRD1(3,NFFAT),FFGRD2(3,NFFAT),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),
     *          POT1(NTS),POT2(NTS),QRXN1(NTS),QRXN2(NTS),NONLST(2,*),
     *          NONLSTQ(*),MAPLST(6,*),CMAPCO(4,4,24,24,5),IDGROUP(*)
      DIMENSION TIMSTR(3)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
      IF(NSTEPS.LE.0) RETURN
      ISTEP = 0
      IF(IADDWAT.EQ.2 .AND. IRXNFLD.GT.0) RXNRAD=RXNRAD*1.0D+40
C
C     -- ENERGY AND GRADIENT AT X(T0)
C        NOTE FFGRD2 MUST BE USED AS THE ARGUMENT
C
      CALL VCLR(FFGRD2,1,3*NFFAT)
      CALL VCLR(VIR   ,1,3)
      CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR)
      CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST)
      CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST)
      CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST)
      CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST)
      CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO)
      CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLST,
     *            IDGROUP)
      CALL ESPHER(CORD,FFGRD2)
      CALL ECHARG(CORD,FFGRD2,CHARG,NONLST,IDGROUP)
      CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                        CMAT1,POT1,QRXN1,NTS)
      CALL POLRXN(CORD,FFGRD2,CHARG,POL,DIP,
     *            FIELD1,FIELD2,FIELD3,
     *            XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *            NONLST,IDGROUP)
      IF(GOPARR) THEN
         CALL DDI_GSUMF(2410,EN12   ,1)
         CALL DDI_GSUMF(2411,EN123  ,1)
         CALL DDI_GSUMF(2412,EN123R4,1)
         CALL DDI_GSUMF(2413,EN123B4,1)
         CALL DDI_GSUMF(2414,EN234W1,1)
         CALL DDI_GSUMF(2415,ENCHAR,1)
         CALL DDI_GSUMF(2416,ENLJR ,1)
         CALL DDI_GSUMF(2417,ENLJD ,1)
         CALL DDI_GSUMF(2418,VIR   ,3)
         CALL DDI_GSUMF(2419,FFGRD2,3*NFFAT)
         CALL DDI_GSUMF(2420,ENUCCH,1)
         CALL DDI_GSUMF(2421,ENRXN ,1)
         CALL DDI_GSUMF(2422,ENRXNR,1)
         CALL DDI_GSUMF(2423,ENCENT,1)
         CALL DDI_GSUMF(2424,ENCMAP,1)
      END IF
      CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD1,1)
      CALL MDPROP(CORD,VEL,QMVEL,ZMAS,QMZMAS,ONEMAS,QM1MAS,0,
     *            LISTQM)
C
      IF(MASWRK) THEN
         WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *   '$FFDATA          !    MD STEP',ISTEP,
     *   'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
         IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30.AND.IPSTAT.GT.0) THEN
         WRITE(IW,'(A,3(F15.10,2X)," >",/1X,3(A,F15.10,2X)," ")')
     *   ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *   'XBOX=',XBOX*TOANGS,' YBOX=',YBOX*TOANGS,' ZBOX=',ZBOX*TOANGS
         ELSE IF(SPHRAD.LT.1.0D+30.AND.IPSTAT.GT.0) THEN
         WRITE(IW,'(A,3(F15.10,2X)," >",/1X,2(A,F15.10,2X)," ")')
     *   ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *   'SPHRAD=',SPHRAD*TOANGS,' RXNRAD=',RXNRAD*TOANGS
         ELSE
         WRITE(IW,'(A,3(F15.10,2X)," ")')
     *   ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
         END IF
         WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
         DO IFFAT = 1, NFFAT
            WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                   CORD(1,IFFAT)*TOANGS,
     *                   CORD(2,IFFAT)*TOANGS,
     *                   CORD(3,IFFAT)*TOANGS
         ENDDO
         WRITE(IW,*)'STOP'
         WRITE(IW,*)'MMVELOCITY                    VX',
     *          '                    VY                    VZ'
         DO IFFAT = 1, NFFAT
            WRITE(IW,1001) ATMNAM(IFFAT),
     *                    VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
         ENDDO
         WRITE(IW,*)'STOP'
         WRITE(IW,*)' '
      END IF
C
C     -- BEEMAN'S ALGORITHM NEEDS ONE STEP BACK --
C
      IF(INTALG.EQ.1) THEN
C        - CALCULATE X(T0-DT)
         DO IFFAT = 1, NFFAT
            DUM  = PT5*ONEMAS(IFFAT)*DT2
            DO III = 1, 3
               CHANGE = -VEL(III,IFFAT)*DT+FFGRD1(III,IFFAT)*DUM
               IF(CHANGE.GT. PT5) CHANGE = PT5
               IF(CHANGE.LT.-PT5) CHANGE =-PT5
               CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
            ENDDO
         ENDDO
C        - CALCULATE ENERGY AND GRADIENT AT X(T0-DT)
C          BUT ENERGY IS USELESS
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL VCLR(VIR   ,1,3)
         CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR)
         CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST)
         CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST)
         CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST)
         CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST)
         CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO)
         CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLST,
     *               IDGROUP)
         CALL ESPHER(CORD,FFGRD2)
         CALL ECHARG(CORD,FFGRD2,CHARG,NONLST,IDGROUP)
         CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                           CMAT1,POT1,QRXN1,NTS)
         CALL POLRXN(CORD,FFGRD2,CHARG,POL,DIP,
     *               FIELD1,FIELD2,FIELD3,
     *               XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *               NONLST,IDGROUP)
         IF(GOPARR) THEN
            CALL DDI_GSUMF(2410,EN12   ,1)
            CALL DDI_GSUMF(2411,EN123  ,1)
            CALL DDI_GSUMF(2412,EN123R4,1)
            CALL DDI_GSUMF(2413,EN123B4,1)
            CALL DDI_GSUMF(2414,EN234W1,1)
            CALL DDI_GSUMF(2415,ENCHAR,1)
            CALL DDI_GSUMF(2416,ENLJR ,1)
            CALL DDI_GSUMF(2417,ENLJD ,1)
            CALL DDI_GSUMF(2418,VIR   ,3)
            CALL DDI_GSUMF(2419,FFGRD2,3*NFFAT)
            CALL DDI_GSUMF(2420,ENUCCH,1)
            CALL DDI_GSUMF(2421,ENRXN ,1)
            CALL DDI_GSUMF(2422,ENRXNR,1)
            CALL DDI_GSUMF(2423,ENCENT,1)
            CALL DDI_GSUMF(2424,ENCMAP,1)
         END IF
         CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD0,1)
C        - RESTORE X(T0) IMMEDIATELY
         DO IFFAT = 1, NFFAT
            DUM  = PT5*ONEMAS(IFFAT)*DT2
            DO III = 1, 3
               CHANGE = +VEL(III,IFFAT)*DT-FFGRD1(III,IFFAT)*DUM
               IF(CHANGE.GT. PT5) CHANGE = PT5
               IF(CHANGE.LT.-PT5) CHANGE =-PT5
               CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
            ENDDO
         ENDDO
      END IF
C
C     -- READY TO TAKE OFF ?
C
      MDSTEP = 0 
      DO ISTEP = 1, NSTEPS
         MDSTEP = MDSTEP + 1
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. IRXNFLD.GT.0)
     *   RXNRAD = RXNRAD*1.0D-40
C        - UPDATE NONBOND LIST
         CALL NONBOND(MDSTEP,CORD,CORDSV,NONLST,NONLSTQ,L1213J,IDGROUP)
C        - CALCULATE X(T+DT)
         DO 20 IFFAT = 1, NFFAT
            IF(IFFAT.LE.NATPDB.AND.ISTEP.LT.NFIXPDB) GOTO 20
            DUM  = ONEMAS(IFFAT)*DT2
            DO III = 1, 3
               IF(INTALG.EQ.1) THEN
                  CHANGE = +VEL(III,IFFAT)*DT
     *                     -TWOTHIRD*FFGRD1(III,IFFAT)*DUM
     *                     +ONESIX*FFGRD0(III,IFFAT)*DUM
               ELSE IF(INTALG.EQ.2) THEN
                  CHANGE = +VEL(III,IFFAT)*DT
     *                     -PT5*FFGRD1(III,IFFAT)*DUM
               END IF
               IF(CHANGE.GT. PT5) CHANGE = PT5
               IF(CHANGE.LT.-PT5) CHANGE =-PT5
               CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
            ENDDO
 20      CONTINUE
         IF(GOPARR) CALL DDI_BCAST(462,'F',CORD,3*NFFAT,MASTER)
C
C        -- CALCULATE ENERGY AND GRADIENT AT X(T+DT)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL VCLR(VIR   ,1,3)
         CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR)
         CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST)
         CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST)
         CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST)
         CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST)
         CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO)
         CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLST,
     *               IDGROUP)
         CALL ESPHER(CORD,FFGRD2)
         CALL ECHARG(CORD,FFGRD2,CHARG,NONLST,IDGROUP)
         CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                           CMAT1,POT1,QRXN1,NTS)
         CALL POLRXN(CORD,FFGRD2,CHARG,POL,DIP,
     *               FIELD1,FIELD2,FIELD3,
     *               XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *               NONLST,IDGROUP)
         IF(GOPARR) THEN
            CALL DDI_GSUMF(2410,EN12   ,1)
            CALL DDI_GSUMF(2411,EN123  ,1)
            CALL DDI_GSUMF(2412,EN123R4,1)
            CALL DDI_GSUMF(2413,EN123B4,1)
            CALL DDI_GSUMF(2414,EN234W1,1)
            CALL DDI_GSUMF(2415,ENCHAR,1)
            CALL DDI_GSUMF(2416,ENLJR ,1)
            CALL DDI_GSUMF(2417,ENLJD ,1)
            CALL DDI_GSUMF(2418,VIR   ,3)
            CALL DDI_GSUMF(2419,FFGRD2,3*NFFAT)
            CALL DDI_GSUMF(2420,ENUCCH,1)
            CALL DDI_GSUMF(2421,ENRXN ,1)
            CALL DDI_GSUMF(2422,ENRXNR,1)
            CALL DDI_GSUMF(2423,ENCENT,1)
            CALL DDI_GSUMF(2424,ENCMAP,1)
         END IF
C
C        -- CALCULATE V(T+DT)
         DO IFFAT = 1, NFFAT
            DUM  = ONEMAS(IFFAT)*DT
            IF(IFFAT.LE.NATPDB.AND.ISTEP.LT.NFIXPDB) DUM = ZERO
            DO III = 1, 3
               IF(INTALG.EQ.1) THEN
                  VEL(III,IFFAT)=VEL(III,IFFAT)
     *                         -(ONETHIRD*FFGRD2(III,IFFAT)
     *                           +FIVESIX*FFGRD1(III,IFFAT)
     *                            -ONESIX*FFGRD0(III,IFFAT))*DUM
                  FFGRD0(III,IFFAT)=FFGRD1(III,IFFAT)
                  FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
               ELSE IF(INTALG.EQ.2) THEN
                  VEL(III,IFFAT)=VEL(III,IFFAT)
     *                         -PT5*(FFGRD1(III,IFFAT)
     *                              +FFGRD2(III,IFFAT))*DUM
                  FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
               END IF
               IF(ISTEP.LT.NFIXPDB) THEN
                  IF(VEL(III,IFFAT).GT. 2.0D-03)VEL(III,IFFAT)= 2.0D-03
                  IF(VEL(III,IFFAT).LT.-2.0D-03)VEL(III,IFFAT)=-2.0D-03
               END IF
            ENDDO
         ENDDO
         IF(GOPARR) CALL DDI_BCAST(464,'F',VEL,3*NFFAT,MASTER)
C
C        -- CALCULATE PROPERTIES
         CALL MDPROP(CORD,VEL,QMVEL,ZMAS,QMZMAS,ONEMAS,QM1MAS,MDSTEP,
     *               LISTQM)
C
         KKKPDB = 1
         CALL SEQREW(IR)
         IEOF = 0
         CALL FNDGRP(IR,' $FFPDB ',IEOF)
         IF(IEOF.EQ.1) KKKPDB = 0
         CALL TMDATE(TIMSTR)
         IF(MOD(ISTEP,KOUT).EQ.0) CALL TIMIT(1)
         IF(MASWRK .AND. (MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEPS))THEN
C
C           -- PRINT OUT PDB FILE --
            IF(KKKPDB.EQ.0) GOTO 110
            IFFAT = 0
            WRITE(IW,*)'====== PDB FILE ======'
            WRITE(IW,'(2A,3A8)')'REMARK   1  ',
     *              'GENERATED BY QUANPOL SIMULATION ON ',TIMSTR
            WRITE(IW,'(A,I10,10X,A,F19.2,A)') 
     *               'REMARK   1  MD STEP=',ISTEP,'TIME=',
     *                ISTEP*DT*2.418884326505D-02,' FS'
  100       CONTINUE
            READ(IR,'(6A,100A)')NAME6,WD100
            IF(NAME6.EQ.'ATOM  '.OR. NAME6.EQ.'HETATM') THEN
               IFFAT = IFFAT + 1
               READ(WD100,1010)NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,ZZZ,ZZZ,ZZZ,OCC,TEMFAC,
     *                    SYMBOL,ICHARG
               ZZZ = ZZZ*0.0D+00
               WRITE(IW,1011)NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,CORD(1,IFFAT)*TOANGS,
     *                    CORD(2,IFFAT)*TOANGS,CORD(3,IFFAT)*TOANGS,
     *                    OCC,TEMFAC,SYMBOL,ICHARG
            END IF
            IF(NAME6.EQ.' $END ') THEN
               WRITE(IW,'(A,/1X)')'END'
               WRITE(IW,*)' '
               GOTO 110
            END IF
            GOTO 100
 1010       FORMAT(I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
 1011       FORMAT(A6,I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
  110       CONTINUE
C
C           -- PRINT OUT PBC COORDINATES --
C              ONLY WHEN PBC APPLIES
C
            IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) THEN
               WRITE(IW,*)'==== PBC MASTER BOX ===='
               WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$PBCFFDATA       !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30.AND.IPSTAT.GT.0) THEN
               WRITE(IW,'(A,3(F15.10,2X)," >",/1X,3(A,F15.10,2X)," ")')
     *         ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *         'XBOX=',XBOX*TOANGS,' YBOX=',YBOX*TOANGS,
     *         ' ZBOX=',ZBOX*TOANGS
               ELSE IF(SPHRAD.LT.1.0D+30.AND.IPSTAT.GT.0) THEN
               WRITE(IW,'(A,3(F15.10,2X)," >",/1X,2(A,F15.10,2X)," ")')
     *         ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *         'SPHRAD=',SPHRAD*TOANGS,' RXNRAD=',RXNRAD*TOANGS
               ELSE
               WRITE(IW,'(A,3(F15.10,2X)," ")')
     *         ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
               END IF
               WRITE(IW,*)'COORDINATES  NUC                   X',
     *         '                   Y                   Z'
               DO IFFAT = 1, NFFAT
                  CXGRP = CORD(1,IDGROUP(IFFAT)) - CENTX
                  CYGRP = CORD(2,IDGROUP(IFFAT)) - CENTY
                  CZGRP = CORD(3,IDGROUP(IFFAT)) - CENTZ
                  PBCX  = XBOX*ANINT(CXGRP/XBOX)
                  PBCY  = YBOX*ANINT(CYGRP/YBOX)
                  PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
                  CX    = CORD(1,IFFAT) - PBCX
                  CY    = CORD(2,IFFAT) - PBCY
                  CZ    = CORD(3,IFFAT) - PBCZ
                  WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                          CX*TOANGS,CY*TOANGS,CZ*TOANGS
               ENDDO
               WRITE(IW,*)'STOP'
               WRITE(IW,*)' '
            END IF
C
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !    MD STEP',ISTEP,
     *      'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30.AND.IPSTAT.GT.0) THEN
            WRITE(IW,'(A,3(F15.10,2X)," >",/1X,3(A,F15.10,2X)," ")')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *      'XBOX=',XBOX*TOANGS,' YBOX=',YBOX*TOANGS,
     *      ' ZBOX=',ZBOX*TOANGS
            ELSE IF(SPHRAD.LT.1.0D+30.AND.IPSTAT.GT.0) THEN
            WRITE(IW,'(A,3(F15.10,2X)," >",/1X,2(A,F15.10,2X)," ")')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *      'SPHRAD=',SPHRAD*TOANGS,' RXNRAD=',RXNRAD*TOANGS
            ELSE
            WRITE(IW,'(A,3(F15.10,2X)," ")')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
            END IF
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            WRITE(IW,*)'MMVELOCITY                    VX',
     *          '                    VY                    VZ'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1001) ATMNAM(IFFAT),
     *                       VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
            ENDDO
            WRITE(IW,*)'STOP'
            WRITE(IW,*)' '
            CALL TIMIT(1)
         END IF
      END DO
C
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1001 FORMAT(1X,A10,1X,F21.18,1X,F21.18,1X,F21.18)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFMD2
      SUBROUTINE FFMD2(ATMNAM,CORD,CORDSV,ZANF,
     *                 ZMAS,ONEMAS,QMZMAS,QM1MAS,
     *                 VEL,QMVEL,
     *                 FFGRD0,FFGRD1,FFGRD2,
     *                 QMGRD0,QMGRD1,QMGRD2,
     *                 LISTQM,NONLST,NONLSTQ,L1213J,IDGROUP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000, MXAO=8192)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, TWOTHIRD=2.0D+00/3.0D+00,
     *           ONETHIRD=1.0D+00/3.0D+00, ONESIX=1.0D+00/6.0D+00,
     *           FIVESIX=5.0D+00/6.0D+00)
C
      CHARACTER*100 WD100
      CHARACTER*3   AAA,A3
      CHARACTER*2   SYMBOL
      CHARACTER*1   ALTLOC,A1,CHNID,ICODE
      CHARACTER*4   NAME4
      CHARACTER*6   NAME6
      CHARACTER*10  ATMNAM
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          ZMAS(NFFAT),ONEMAS(NFFAT),QMZMAS(NAT),QM1MAS(NAT),
     *          VEL(3,NFFAT),QMVEL(3,NAT),
     *          FFGRD0(3,NFFAT),FFGRD1(3,NFFAT),FFGRD2(3,NFFAT),
     *          QMGRD0(3,NAT),QMGRD1(3,NAT),QMGRD2(3,NAT),LISTQM(*),
     *          NONLSTQ(*),IDGROUP(*)
      DIMENSION TIMSTR(3)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FUNCT / E,EG(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
C
C     NANDUN THELLAMUREGE, HUI LI, JAN 2011, LINCOLN
C
      IF(NSTEPS.LE.0) RETURN
C
C     -- ENERGY AND GRADIENT AT X(T0)
C
      ISTEP  =  0
      NPRINT = -5
      IF(IADDWAT.EQ.2 .AND. IRXNFLD.GT.0) RXNRAD=RXNRAD*1.0D+40
      CALL VCLR(QMGRD2,1,3*NAT  )
      CALL VCLR(FFGRD2,1,3*NFFAT)
      CALL VCLR(VIR   ,1,3)
      CALL GRADX
      CALL DCOPY(3*NAT  ,EG,1,QMGRD2,1)
      CALL DCOPY(3*NAT  ,QMGRD2,1,QMGRD1,1)
      CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD1,1)
C     - SYNCHRONIZ QM(MM) GRADIENTS AND VELOCITIES -
      IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
         DO IAT = 1, NAT
            KFFAT = LISTQM(NFFAT+IAT)
            IF(KFFAT.GT.0) THEN
               QMGRD1(1,IAT)   = QMGRD1(1,IAT) + FFGRD1(1,KFFAT)
               QMGRD1(2,IAT)   = QMGRD1(2,IAT) + FFGRD1(2,KFFAT)
               QMGRD1(3,IAT)   = QMGRD1(3,IAT) + FFGRD1(3,KFFAT)
               FFGRD1(1,KFFAT) = QMGRD1(1,IAT)
               FFGRD1(2,KFFAT) = QMGRD1(2,IAT)
               FFGRD1(3,KFFAT) = QMGRD1(3,IAT)
               QMVEL(1,IAT)    = VEL(1,KFFAT)
               QMVEL(2,IAT)    = VEL(2,KFFAT)
               QMVEL(3,IAT)    = VEL(3,KFFAT)
            END IF
         ENDDO
      END IF
      CALL MDPROP(CORD,VEL,QMVEL,ZMAS,QMZMAS,ONEMAS,QM1MAS,0,
     *            LISTQM)
C
      IF(MASWRK) THEN
         WRITE(IW,*)'$DATA'
         WRITE(IW,'(A,3(F8.3,1X),A,I3,A,I10)')
     *   ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *   'NEAR ATOM',LQMCT,'     AT MD STEP',ISTEP
         WRITE(IW,*)'C1'
         DO IAT = 1, NAT
            WRITE(IW,1000)ANAM(IAT),ZAN(IAT),
     *                   C(1,IAT)*TOANGS,
     *                   C(2,IAT)*TOANGS,
     *                   C(3,IAT)*TOANGS
         ENDDO
         WRITE(IW,*)'$END'
         WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *   '$FFDATA          !    MD STEP',ISTEP,
     *   'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
         IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30.AND.IPSTAT.GT.0) THEN
         WRITE(IW,'(A,3(F15.10,2X)," >",/1X,3(A,F15.10,2X)," ")')
     *   ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *   'XBOX=',XBOX*TOANGS,' YBOX=',YBOX*TOANGS,' ZBOX=',ZBOX*TOANGS
         ELSE IF(SPHRAD.LT.1.0D+30.AND.IPSTAT.GT.0) THEN
         WRITE(IW,'(A,3(F15.10,2X)," >",/1X,2(A,F15.10,2X)," ")')
     *   ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *   'SPHRAD=',SPHRAD*TOANGS,' RXNRAD=',RXNRAD*TOANGS
         ELSE
         WRITE(IW,'(A,3(F15.10,2X)," ")')
     *   ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
         END IF
         WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
         DO IFFAT = 1, NFFAT
            WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                   CORD(1,IFFAT)*TOANGS,
     *                   CORD(2,IFFAT)*TOANGS,
     *                   CORD(3,IFFAT)*TOANGS
         ENDDO
         WRITE(IW,*)'STOP'
         WRITE(IW,*)'QMVELOCITY                    VX',
     *          '                    VY                    VZ'
         DO IAT = 1, NAT
            WRITE(IW,1001) ANAM(IAT),
     *                    QMVEL(1,IAT),QMVEL(2,IAT),QMVEL(3,IAT)
         ENDDO
         WRITE(IW,*)'STOP'
         WRITE(IW,*)'MMVELOCITY                    VX',
     *          '                    VY                    VZ'
         DO IFFAT = 1, NFFAT
            WRITE(IW,1001) ATMNAM(IFFAT),
     *                    VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
         ENDDO
         WRITE(IW,*)'STOP'
         WRITE(IW,*)' '
      END IF
C
C     -- BEEMAN'S ALGORITHM NEEDS ONE STEP BACK --
C
      IF(INTALG.EQ.1) THEN
C        - CALCULATE X(T0-DT)
         DO IAT = 1, NAT
            DUM  = PT5*QM1MAS(IAT)*DT2
            DO III = 1, 3
               C(III,IAT)=C(III,IAT)
     *                       -QMVEL(III,IAT)*DT+QMGRD1(III,IAT)*DUM
            ENDDO
         ENDDO
         DO IFFAT = 1, NFFAT
            DUM  = PT5*ONEMAS(IFFAT)*DT2
            DO III = 1, 3
               CHANGE = -VEL(III,IFFAT)*DT+FFGRD1(III,IFFAT)*DUM
               IF(CHANGE.GT. PT5) CHANGE = PT5
               IF(CHANGE.LT.-PT5) CHANGE =-PT5
               CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
            ENDDO
         ENDDO
C        - SYNCHRONIZ QM(MM) COORDINATES -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  C(1,IAT) = CORD(1,KFFAT)
                  C(2,IAT) = CORD(2,KFFAT)
                  C(3,IAT) = CORD(3,KFFAT)
               END IF
            ENDDO
         END IF
C        - CALCULATE ENERGY AND GRADIENT AT X(T0-DT)
C          BUT ENERGY IS USELESS
         CALL VCLR(QMGRD2,1,3*NAT  )
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL VCLR(VIR   ,1,3)
         CALL GRADX
         CALL DCOPY(3*NAT  ,EG,1,QMGRD2,1)
         CALL DCOPY(3*NAT  ,QMGRD2,1,QMGRD0,1)
         CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD0,1)
C        - SYNCHRONIZ QM(MM) GRADIENTS -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMGRD0(1,IAT)   = QMGRD0(1,IAT) + FFGRD0(1,KFFAT)
                  QMGRD0(2,IAT)   = QMGRD0(2,IAT) + FFGRD0(2,KFFAT)
                  QMGRD0(3,IAT)   = QMGRD0(3,IAT) + FFGRD0(3,KFFAT)
                  FFGRD0(1,KFFAT) = QMGRD0(1,IAT)
                  FFGRD0(2,KFFAT) = QMGRD0(2,IAT)
                  FFGRD0(3,KFFAT) = QMGRD0(3,IAT)
               END IF
            ENDDO
         END IF
C        - RESTORE X(T0) IMMEDIATELY
         DO IAT = 1, NAT
            DUM  = PT5*QM1MAS(IAT)*DT2
            DO III = 1, 3
               C(III,IAT)=C(III,IAT)
     *                       +QMVEL(III,IAT)*DT-QMGRD1(III,IAT)*DUM
            ENDDO
         ENDDO
         DO IFFAT = 1, NFFAT
            DUM  = PT5*ONEMAS(IFFAT)*DT2
            DO III = 1, 3
               CHANGE = +VEL(III,IFFAT)*DT-FFGRD1(III,IFFAT)*DUM
               IF(CHANGE.GT. PT5) CHANGE = PT5
               IF(CHANGE.LT.-PT5) CHANGE =-PT5
               CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
            ENDDO
         ENDDO
C        - SYNCHRONIZ QM(MM) COORDINATES -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  C(1,IAT) = CORD(1,KFFAT)
                  C(2,IAT) = CORD(2,KFFAT)
                  C(3,IAT) = CORD(3,KFFAT)
               END IF
            ENDDO
         END IF
      END IF
C
C     -- READY TO TAKE OFF ?
C
      MDSTEP = 0
      DO ISTEP = 1, NSTEPS
         MDSTEP = MDSTEP + 1
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. IRXNFLD.GT.0) 
     *   RXNRAD = RXNRAD*1.0D-40
C        - UPDATE NONBOND LIST
         CALL NONBOND(MDSTEP,CORD,CORDSV,NONLST,NONLSTQ,L1213J,IDGROUP)
C        - CALCULATE X(T+DT)
         DO IAT = 1, NAT
            DUM  = QM1MAS(IAT)*DT2
            DO III = 1, 3
               IF(INTALG.EQ.1) THEN
                  C(III,IAT)=C(III,IAT)
     *                      +QMVEL(III,IAT)*DT
     *                      -TWOTHIRD*QMGRD1(III,IAT)*DUM
     *                      +ONESIX*QMGRD0(III,IAT)*DUM
               ELSE IF(INTALG.EQ.2) THEN
                  C(III,IAT)=C(III,IAT)
     *                      +QMVEL(III,IAT)*DT
     *                      -PT5*QMGRD1(III,IAT)*DUM
               END IF
            ENDDO
         ENDDO
         DO 20 IFFAT = 1, NFFAT
            IF(IFFAT.LE.NATPDB.AND.ISTEP.LT.NFIXPDB) GOTO 20
            DUM  = ONEMAS(IFFAT)*DT2
            DO III = 1, 3
               IF(INTALG.EQ.1) THEN
                  CHANGE = +VEL(III,IFFAT)*DT
     *                     -TWOTHIRD*FFGRD1(III,IFFAT)*DUM
     *                     +ONESIX*FFGRD0(III,IFFAT)*DUM
               ELSE IF(INTALG.EQ.2) THEN
                  CHANGE = +VEL(III,IFFAT)*DT
     *                     -PT5*FFGRD1(III,IFFAT)*DUM
               END IF
               IF(CHANGE.GT. PT5) CHANGE = PT5
               IF(CHANGE.LT.-PT5) CHANGE =-PT5
               CORD(III,IFFAT)=CORD(III,IFFAT) + CHANGE
            ENDDO
 20      CONTINUE
C
C        - SYNCHRONIZ QM(MM) COORDINATES -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  C(1,IAT) = CORD(1,KFFAT)
                  C(2,IAT) = CORD(2,KFFAT)
                  C(3,IAT) = CORD(3,KFFAT)
               END IF
            ENDDO
         END IF
         IF(GOPARR) CALL DDI_BCAST(461,'F',C,3*NAT,MASTER)
         IF(GOPARR) CALL DDI_BCAST(462,'F',CORD,3*NFFAT,MASTER)
C
C        -- CALCULATE ENERGY AND GRADIENT AT X(T+DT)
         CALL VCLR(QMGRD2,1,3*NAT  )
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL VCLR(VIR   ,1,3)
         CALL GRADX
         CALL DCOPY(3*NAT  ,EG,1,QMGRD2,1)
C        - SYNCHRONIZ QM(MM) GRADIENTS -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMGRD2(1,IAT)   = QMGRD2(1,IAT) + FFGRD2(1,KFFAT)
                  QMGRD2(2,IAT)   = QMGRD2(2,IAT) + FFGRD2(2,KFFAT)
                  QMGRD2(3,IAT)   = QMGRD2(3,IAT) + FFGRD2(3,KFFAT)
                  FFGRD2(1,KFFAT) = QMGRD2(1,IAT)
                  FFGRD2(2,KFFAT) = QMGRD2(2,IAT)
                  FFGRD2(3,KFFAT) = QMGRD2(3,IAT)
               END IF
            ENDDO
         END IF
C
C        -- CALCULATE V(T+DT)
         DO IAT = 1, NAT
            DUM  = QM1MAS(IAT)*DT
            DO III = 1, 3
               IF(INTALG.EQ.1) THEN
                  QMVEL(III,IAT)=QMVEL(III,IAT)
     *                        -(ONETHIRD*QMGRD2(III,IAT)
     *                          +FIVESIX*QMGRD1(III,IAT)
     *                           -ONESIX*QMGRD0(III,IAT))*DUM
                  QMGRD0(III,IAT)=QMGRD1(III,IAT)
                  QMGRD1(III,IAT)=QMGRD2(III,IAT)
               ELSE IF(INTALG.EQ.2) THEN
                  QMVEL(III,IAT)=QMVEL(III,IAT)
     *                         -PT5*(QMGRD1(III,IAT)
     *                              +QMGRD2(III,IAT))*DUM
                  QMGRD1(III,IAT)=QMGRD2(III,IAT)
               END IF
            ENDDO
         ENDDO
         DO IFFAT = 1, NFFAT
            DUM  = ONEMAS(IFFAT)*DT
            IF(IFFAT.LE.NATPDB.AND.ISTEP.LT.NFIXPDB) DUM = ZERO
            DO III = 1, 3
               IF(INTALG.EQ.1) THEN
                  VEL(III,IFFAT)=VEL(III,IFFAT)
     *                         -(ONETHIRD*FFGRD2(III,IFFAT)
     *                           +FIVESIX*FFGRD1(III,IFFAT)
     *                            -ONESIX*FFGRD0(III,IFFAT))*DUM
                  FFGRD0(III,IFFAT)=FFGRD1(III,IFFAT)
                  FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
               ELSE IF(INTALG.EQ.2) THEN
                  VEL(III,IFFAT)=VEL(III,IFFAT)
     *                         -PT5*(FFGRD1(III,IFFAT)
     *                              +FFGRD2(III,IFFAT))*DUM
                  FFGRD1(III,IFFAT)=FFGRD2(III,IFFAT)
               END IF
               IF(ISTEP.LT.NFIXPDB) THEN
                  IF(VEL(III,IFFAT).GT. 2.0D-03)VEL(III,IFFAT)= 2.0D-03
                  IF(VEL(III,IFFAT).LT.-2.0D-03)VEL(III,IFFAT)=-2.0D-03
               END IF
            ENDDO
         ENDDO
C        - SYNCHRONIZ QM(MM) VELOCITIES -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMVEL(1,IAT)   = VEL(1,KFFAT)
                  QMVEL(2,IAT)   = VEL(2,KFFAT)
                  QMVEL(3,IAT)   = VEL(3,KFFAT)
               END IF
            ENDDO
         END IF
         IF(GOPARR) CALL DDI_BCAST(463,'F',QMVEL,3*NAT,MASTER)
         IF(GOPARR) CALL DDI_BCAST(464,'F',VEL,3*NFFAT,MASTER)
C
C        -- CALCULATE PROPERTIES
         CALL MDPROP(CORD,VEL,QMVEL,ZMAS,QMZMAS,ONEMAS,QM1MAS,MDSTEP,
     *               LISTQM)
C        - SYNCHRONIZ QM(MM) VELOCITIES -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMVEL(1,IAT)   = VEL(1,KFFAT)
                  QMVEL(2,IAT)   = VEL(2,KFFAT)
                  QMVEL(3,IAT)   = VEL(3,KFFAT)
               END IF
            ENDDO
         END IF
C
         KKKPDB = 1
         CALL SEQREW(IR)
         IEOF = 0
         CALL FNDGRP(IR,' $FFPDB ',IEOF)
         IF(IEOF.EQ.1) KKKPDB = 0
         CALL TMDATE(TIMSTR)
         IF(MOD(ISTEP,KOUT).EQ.0) CALL TIMIT(1)
         IF(MASWRK .AND. (MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEPS))THEN
C
C           -- PRINT OUT PDB FILE --
            IF(KKKPDB.EQ.0) GOTO 110
            IFFAT = 0
            WRITE(IW,*)'====== PDB FILE ======'
            WRITE(IW,'(2A,3A8)')'REMARK   1  ',
     *              'GENERATED BY QUANPOL SIMULATION ON ',TIMSTR
            WRITE(IW,'(A,I10,10X,A,F19.2,A)') 
     *               'REMARK   1  MD STEP=',ISTEP,'TIME=',
     *                ISTEP*DT*2.418884326505D-02,' FS'
  100       CONTINUE
            READ(IR,'(6A,100A)')NAME6,WD100
            IF(NAME6.EQ.'ATOM  '.OR. NAME6.EQ.'HETATM') THEN
               IFFAT = IFFAT + 1
               READ(WD100,1010)NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,ZZZ,ZZZ,ZZZ,OCC,TEMFAC,
     *                    SYMBOL,ICHARG
               ZZZ = ZZZ*0.0D+00
               WRITE(IW,1011)NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,CORD(1,IFFAT)*TOANGS,
     *                    CORD(2,IFFAT)*TOANGS,CORD(3,IFFAT)*TOANGS,
     *                    OCC,TEMFAC,SYMBOL,ICHARG
            END IF
            IF(NAME6.EQ.' $END ') THEN
               WRITE(IW,'(A,/1X)')'END'
               WRITE(IW,*)' '
               GOTO 110
            END IF
            GOTO 100
 1010       FORMAT(I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
 1011       FORMAT(A6,I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
  110       CONTINUE
C
C           -- PRINT OUT PBC COORDINATES --
C              ONLY WHEN PBC APPLIES
C
            IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) THEN
               WRITE(IW,*)'==== PBC MASTER BOX ===='
               WRITE(IW,*)'$PBCDATA'
               WRITE(IW,'(A,3(F8.3,1X),A,I3,A,I10)')
     *         ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *         'NEAR ATOM',LQMCT,'     AT MD STEP',ISTEP
               WRITE(IW,*)'C1'
               DO IAT = 1, NAT
                  CX    = C(1,IAT) - CENTX
                  CY    = C(2,IAT) - CENTY
                  CZ    = C(3,IAT) - CENTZ
                  PBCX  = XBOX*ANINT(CX/XBOX)
                  PBCY  = YBOX*ANINT(CY/YBOX)
                  PBCZ  = ZBOX*ANINT(CZ/ZBOX)
                  CX   = CX - PBCX + CENTX
                  CY   = CY - PBCY + CENTY
                  CZ   = CZ - PBCZ + CENTZ
                  WRITE(IW,1000)ANAM(IAT),ZAN(IAT),
     *            CX*TOANGS,CY*TOANGS,CZ*TOANGS
               END DO
               WRITE(IW,*)'$END'
               WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *         '$PBCFFDATA       !    MD STEP',ISTEP,
     *         'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
               IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30.AND.IPSTAT.GT.0) THEN
               WRITE(IW,'(A,3(F15.10,2X)," >",/1X,3(A,F15.10,2X)," ")')
     *         ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *         'XBOX=',XBOX*TOANGS,' YBOX=',YBOX*TOANGS,
     *         ' ZBOX=',ZBOX*TOANGS
               ELSE IF(SPHRAD.LT.1.0D+30.AND.IPSTAT.GT.0) THEN
               WRITE(IW,'(A,3(F15.10,2X)," >",/1X,2(A,F15.10,2X)," ")')
     *         ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *         'SPHRAD=',SPHRAD*TOANGS,' RXNRAD=',RXNRAD*TOANGS
               ELSE
               WRITE(IW,'(A,3(F15.10,2X)," ")')
     *         ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
               END IF
               WRITE(IW,*)'COORDINATES  NUC                   X',
     *         '                   Y                   Z'
               DO IFFAT = 1, NFFAT
                  CXGRP = CORD(1,IDGROUP(IFFAT)) - CENTX
                  CYGRP = CORD(2,IDGROUP(IFFAT)) - CENTY
                  CZGRP = CORD(3,IDGROUP(IFFAT)) - CENTZ
                  PBCX  = XBOX*ANINT(CXGRP/XBOX)
                  PBCY  = YBOX*ANINT(CYGRP/YBOX)
                  PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
                  CX    = CORD(1,IFFAT) - PBCX 
                  CY    = CORD(2,IFFAT) - PBCY
                  CZ    = CORD(3,IFFAT) - PBCZ
                  WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *                          CX*TOANGS,CY*TOANGS,CZ*TOANGS
               ENDDO
               WRITE(IW,*)'STOP'
               WRITE(IW,*)' '
            END IF
C
            WRITE(IW,*)'$DATA'
            WRITE(IW,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT MD STEP',ISTEP
            WRITE(IW,*)'C1'
            DO IAT = 1, NAT
               WRITE(IW,1000)ANAM(IAT),ZAN(IAT),
     *         C(1,IAT)*TOANGS,
     *         C(2,IAT)*TOANGS,
     *         C(3,IAT)*TOANGS
            ENDDO
            WRITE(IW,*)'$END'
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !    MD STEP',ISTEP,
     *      'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30.AND.IPSTAT.GT.0) THEN
            WRITE(IW,'(A,3(F15.10,2X)," >",/1X,3(A,F15.10,2X)," ")')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *      'XBOX=',XBOX*TOANGS,' YBOX=',YBOX*TOANGS,
     *      ' ZBOX=',ZBOX*TOANGS
            ELSE IF(SPHRAD.LT.1.0D+30.AND.IPSTAT.GT.0) THEN
            WRITE(IW,'(A,3(F15.10,2X)," >",/1X,2(A,F15.10,2X)," ")')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS,
     *      'SPHRAD=',SPHRAD*TOANGS,' RXNRAD=',RXNRAD*TOANGS
            ELSE
            WRITE(IW,'(A,3(F15.10,2X)," ")')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
            END IF
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            WRITE(IW,*)'QMVELOCITY                    VX',
     *          '                    VY                    VZ'
            DO IAT = 1, NAT
               WRITE(IW,1001) ANAM(IAT),
     *                       QMVEL(1,IAT),QMVEL(2,IAT),QMVEL(3,IAT)
            ENDDO
            WRITE(IW,*)'STOP'
            WRITE(IW,*)'MMVELOCITY                    VX',
     *          '                    VY                    VZ'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1001) ATMNAM(IFFAT),
     *                       VEL(1,IFFAT),VEL(2,IFFAT),VEL(3,IFFAT)
            ENDDO
            WRITE(IW,*)'STOP'
            WRITE(IW,*)' '
            CALL TIMIT(1)
         END IF
      END DO
C
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
 1001 FORMAT(1X,A10,1X,F21.18,1X,F21.18,1X,F21.18)
C
      RETURN
      END
C*MODULE QUANPO  *DECK MDPROP
      SUBROUTINE MDPROP(CORD,VEL,QMVEL,ZMAS,QMZMAS,ONEMAS,QM1MAS,ISTEP,
     *                  LISTQM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (TOKELVIN=3.15774646D+05, BOLTZK=1.0D+00/TOKELVIN)
      PARAMETER (ZERO=0.0D+00, PT5=0.50D+00, TWOTHIRD=2.0D+00/3.0D+00)
      PARAMETER (FOURTHIRD=4.0D+00/3.0D+00)
      PARAMETER (ONETHIRD=1.0D+00/3.0D+00, TOBAR=2.942191219D+08)
      PARAMETER (MXATM=2000, MXRT=100)
C
      DIMENSION CORD(3,*),VEL(3,*),QMVEL(3,*),ZMAS(*),QMZMAS(*),
     *          ONEMAS(*),QM1MAS(*),LISTQM(*)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSC0,LFFDFSA,LFFDFSN
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,TRIPLET,SG1T,JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,NONEQR,
     *                ITDPRP,TAMMD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     NANDUN THELLAMUREGE, HUI LI, MAR 2011, LINCOLN
C
      NLESS  = 2                    ! OPEN SYSTEM TRANS = ROT = 0
      IF(MIN(XBOX,YBOX,ZBOX).LT.1.0D+30) NLESS  = NLESS - 1    
      NLESS  = NLESS + LISTQM(NFFAT+NAT+1)      ! QM-MM COMMON ATOMS
C
      AMU2 = ZERO
      DO IAT =1, NAT
         IF(LISTQM(NFFAT+IAT).EQ.0) THEN
            DUMY = ZERO
            DO III = 1, 3
               DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
            END DO
            AMU2 = AMU2 + DUMY*QMZMAS(IAT)
         END IF
      END DO
      DO IFFAT = 1, NFFAT
         DUMY = ZERO
         DO III = 1, 3
            DUMY = DUMY + VEL(III,IFFAT)*VEL(III,IFFAT)
         ENDDO
         AMU2 = AMU2 + DUMY*ZMAS(IFFAT)
      ENDDO
C
      VOL   = MIN(XBOX*YBOX*ZBOX, FOURTHIRD*PI*SPHRAD**3)
      ENKIN = PT5*AMU2
      TEMP  = TOKELVIN*ONETHIRD*AMU2/DBLE(NFFAT+NAT-NLESS)
      IF(VOL.LT.1.0D+24) THEN
         PRES  = (AMU2 - (VIR(1)+VIR(2)+VIR(3)))*ONETHIRD/VOL*TOBAR
      ELSE
         PRES  = ZERO
      END IF
      IF(GOPARR) THEN
         CALL DDI_BCAST(465,'F',TEMP,1,MASTER)
         CALL DDI_BCAST(466,'F',PRES,1,MASTER)
      END IF
C
      IF(ISTEP.GT.NPROP) THEN
         PMEAN = (PRES +(PMEAN *(ISTEP-NPROP-1)))/(ISTEP-NPROP)
         VOLAV = (VOL  +(VOLAV *(ISTEP-NPROP-1)))/(ISTEP-NPROP)
         ENKAV = (ENKIN+(ENKAV *(ISTEP-NPROP-1)))/(ISTEP-NPROP)
         TEMPAV= (TEMP +(TEMPAV*(ISTEP-NPROP-1)))/(ISTEP-NPROP)
      ELSE
         PMEAN = PRES
         VOLAV = VOL
         ENKAV = ENKIN
         TEMPAV= TEMP
      END IF
C
      IF(NAT.LE.0) THEN
         ENPOT = EN12 + EN123 + EN123R4 + EN234W1 + EN123B4 + ENCHAR
     *         + ENPOL  + ENRXN  + ENRXNPOL+ENRXNR + ENLJR + ENLJD
     *         + ENCMAP
         ENTOT = ENPOT  + ENKIN
         IF(ISTEP.GT.NPROP) THEN
            ENPAV = (ENPOT+(ENPAV*(ISTEP-NPROP-1)))/(ISTEP-NPROP)
         ELSE
            ENPAV = ENPOT
         END IF
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEPS)) THEN
            WRITE(IW,*)' '
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')'MD STEP',ISTEP,
     *        'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            WRITE(IW,9000)'BOND STRETCH     ENERGY =', EN12*TOKCAL
            WRITE(IW,9000)'BOND ANGLE BEND  ENERGY =', EN123*TOKCAL
            WRITE(IW,9000)'DIHEDRAL ROT     ENERGY =', EN123R4*TOKCAL
            WRITE(IW,9000)'DIHEDRAL BEND    ENERGY =', EN123B4*TOKCAL
            WRITE(IW,9000)'CMAP             ENERGY =', ENCMAP*TOKCAL
            WRITE(IW,9000)'WAGGING          ENERGY =', EN234W1*TOKCAL
            WRITE(IW,9000)'LJ REPULSION     ENERGY =', ENLJR*TOKCAL
            WRITE(IW,9000)'LJ DISPERSION    ENERGY =', ENLJD*TOKCAL
            WRITE(IW,9000)'CHARGE           ENERGY =', ENCHAR*TOKCAL
            WRITE(IW,9000)'POL              ENERGY =', ENPOL*TOKCAL
            WRITE(IW,9000)'CHARGE RXNFLD    ENERGY =', ENRXN*TOKCAL
            WRITE(IW,9000)'POL RXNFLD       ENERGY =', ENRXNPOL*TOKCAL
            WRITE(IW,9000)'SPHERE           ENERGY =', ENRXNR*TOKCAL
            WRITE(IW,9000)'POTENTIAL        ENERGY =', ENPOT*TOKCAL
            WRITE(IW,9000)'KINETIC          ENERGY =', ENKIN*TOKCAL
            WRITE(IW,9000)'TOTAL            ENERGY =', ENTOT*TOKCAL
            WRITE(IW,9001)'TEMPERATURE             =', TEMP
            WRITE(IW,9002)'PRESSURE                =', PRES
            IF(VOL.LE.1.0D+24)
     *      WRITE(IW,9003)'VOLUME                  =', VOL*TOANGS**3
            IF(VOL.GT.1.0D+24)
     *      WRITE(IW,9004)'VOLUME                  ='
C
            IF(ISTEP.GT.NPROP) THEN
              WRITE(IW,*)' '
              WRITE(IW,9000)'AVERAGE POTENTIAL ENERGY=',ENPAV*TOKCAL
              WRITE(IW,9000)'AVERAGE KINETIC   ENERGY=',ENKAV*TOKCAL
              WRITE(IW,9000)'AVERAGE TOTAL     ENERGY=',(ENPAV+ENKAV)
     *                                                        *TOKCAL
              WRITE(IW,9001)'AVERAGE TEMPERATURE     =',TEMPAV
              WRITE(IW,9002)'AVERAGE PRESSURE        =',PMEAN
              IF(VOL.LE.1.0D+24)
     *        WRITE(IW,9003)'AVERAGE VOLUME          =',VOLAV*TOANGS**3
            END IF
            WRITE(IW,*)' '
         END IF
C
      ELSE IF(NAT.GT.0.AND.NFFAT.GT.0) THEN
         ENPOT = ETOT
         IF(MPLEVL.EQ.2) ENPOT = EMP2
         IF(TDDFTYP.NE.RNONE) ENPOT = ESTATE(NTHST)
         ENTOT = ENPOT  + ENKIN
         IF(ISTEP.GT.NPROP) THEN
            ENPAV = (ENPOT+(ENPAV*(ISTEP-NPROP-1)))/(ISTEP-NPROP)
         ELSE
            ENPAV = ENPOT
         END IF
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEPS)) THEN
            WRITE(IW,*)' '
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')'MD STEP',ISTEP,
     *        'TIME=',ISTEP*DT*2.418884326505D-02,' FS'
            WRITE(IW,9000)'BOND STRETCH     ENERGY =', EN12*TOKCAL
            WRITE(IW,9000)'BOND ANGLE BEND  ENERGY =', EN123*TOKCAL
            WRITE(IW,9000)'DIHEDRAL ROT     ENERGY =', EN123R4*TOKCAL
            WRITE(IW,9000)'DIHEDRAL BEND    ENERGY =', EN123B4*TOKCAL
            WRITE(IW,9000)'CMAP             ENERGY =', ENCMAP*TOKCAL
            WRITE(IW,9000)'WAGGING          ENERGY =', EN234W1*TOKCAL
            WRITE(IW,9000)'LJ REPULSION     ENERGY =', ENLJR*TOKCAL
            WRITE(IW,9000)'LJ DISPERSION    ENERGY =', ENLJD*TOKCAL
            WRITE(IW,9000)'CHARGE           ENERGY =', ENCHAR*TOKCAL
            WRITE(IW,9000)'POL              ENERGY =', ENPOL*TOKCAL
            WRITE(IW,9000)'QM+CHARG RXNFLD  ENERGY =', ENRXN*TOKCAL
            WRITE(IW,9000)'POL RXNFLD       ENERGY =', ENRXNPOL*TOKCAL
            WRITE(IW,9000)'QM CENTER        ENERGY =', ENCENT*TOKCAL
            WRITE(IW,9000)'SPHERE           ENERGY =', ENRXNR*TOKCAL
            WRITE(IW,9000)'POTENTIAL        ENERGY =', ENPOT*TOKCAL
            WRITE(IW,9000)'KINETIC          ENERGY =', ENKIN*TOKCAL
            WRITE(IW,9000)'TOTAL            ENERGY =', ENTOT*TOKCAL
            WRITE(IW,9001)'TEMPERATURE             =', TEMP
            WRITE(IW,9002)'PRESSURE                =', PRES
            IF(VOL.LE.1.0D+24)
     *      WRITE(IW,9003)'VOLUME                  =', VOL*TOANGS**3
            IF(VOL.GT.1.0D+24)
     *      WRITE(IW,9004)'VOLUME                  ='
            IF(ISTEP.GT.NPROP) THEN
              WRITE(IW,*)' '
              WRITE(IW,9000)'AVERAGE POTENTIAL ENERGY=',ENPAV*TOKCAL
              WRITE(IW,9000)'AVERAGE KINETIC   ENERGY=',ENKAV*TOKCAL
              WRITE(IW,9000)'AVERAGE TOTAL     ENERGY=',(ENPAV+ENKAV)
     *                                                        *TOKCAL
              WRITE(IW,9001)'AVERAGE TEMPERATURE     =',TEMPAV
              WRITE(IW,9002)'AVERAGE PRESSURE        =',PMEAN
              IF(VOL.LE.1.0D+24)
     *        WRITE(IW,9003)'AVERAGE VOLUME          =',VOLAV*TOANGS**3
            END IF
            WRITE(IW,*)' '
         END IF      
      END IF
C
C     -- VELOCITY SCALING --
C
      IF(ITSTAT.GT.0 .AND. ISTEP.GT.0) THEN
C
C        -- (1) SIMPLE VELOCITY SCALING METHOD --
         IF (ITSTAT.EQ.1.AND.TEMP.GT.ZERO) TFACT = SQRT(TEMP0/TEMP)
C
C        -- (2) BERENDSEN THERMOSTAT --
         IF (ITSTAT.EQ.2) THEN
            DUM1  = ZERO
            IF(TEMP.GT.ZERO) DUM1  = TEMP0/TEMP
            DUM2  = DUM1 - 1.0D+00
            TFACT = SQRT(1.0D+00 + 0.10D+00*DUM2)
         END IF
C
         IF(ITSTAT.EQ.1 .OR. ITSTAT.EQ.2) THEN
            DO IAT = 1, NAT
               IF(LISTQM(NFFAT+IAT).EQ.0)THEN
                  QMVEL(1,IAT) = QMVEL(1,IAT)*TFACT
                  QMVEL(2,IAT) = QMVEL(2,IAT)*TFACT
                  QMVEL(3,IAT) = QMVEL(3,IAT)*TFACT
               END IF
            ENDDO
            DO IFFAT = 1, NFFAT
               VEL(1,IFFAT) = VEL(1,IFFAT)*TFACT
               VEL(2,IFFAT) = VEL(2,IFFAT)*TFACT
               VEL(3,IFFAT) = VEL(3,IFFAT)*TFACT
            ENDDO
         END IF
C
C        -- (3) ANDERSEN THERMOSTAT --
C
         IF (ITSTAT.EQ.3) THEN
            FREQ   = 0.2D+00
            FACT   = SQRT(DBLE(NFFAT+NAT-NLESS-1)/
     *                    DBLE(NFFAT+NAT-LISTQM(NFFAT+NAT+1)))
            DO IAT = 1,NAT
               IF(LISTQM(NFFAT+IAT).EQ.0)THEN
                  CALL FFRAND(TEST)
                  IF(TEST.LT.FREQ) THEN
                     SIGMA=FACT*SQRT(BOLTZK*TEMP0*QM1MAS(IAT))
                     DO IDIM = 1,3
                        CALL FFRAND(U1)
                        CALL FFRAND(U2)
                        SET=SQRT(-2.0D+00*LOG(U1))*COS(2.0D+00*PI*U2)
                        QMVEL(IDIM,IAT)=SIGMA*SET
                     ENDDO
                  END IF
               END IF
            ENDDO
            DO IFFAT = 1,NFFAT
               CALL FFRAND(TEST)
               IF(TEST.LT.FREQ) THEN
                  SIGMA=FACT*SQRT(BOLTZK*TEMP0*ONEMAS(IFFAT))
                  DO IDIM = 1,3
                     CALL FFRAND(U1)
                     CALL FFRAND(U2)
                     SET=SQRT(-2.0D+00*LOG(U1))*COS(2.0D+00*PI*U2)
                     VEL(IDIM,IFFAT)=SIGMA*SET
                  ENDDO
               END IF
            ENDDO
         END IF
C
         ENKIN = ZERO
         DO IAT =1, NAT
            IF(LISTQM(NFFAT+IAT).EQ.0)THEN
               DUMY = ZERO
               DO III = 1, 3
                  DUMY = DUMY + QMVEL(III,IAT)*QMVEL(III,IAT)
               END DO
               ENKIN = ENKIN + DUMY*QMZMAS(IAT)
            END IF
         ENDDO
         DO IFFAT = 1, NFFAT
            DUMY = ZERO
            DO III = 1,3
               DUMY = DUMY + VEL(III,IFFAT)*VEL(III,IFFAT)
            ENDDO
            ENKIN = ENKIN + DUMY*ZMAS(IFFAT)
         ENDDO
         ENKIN = PT5*ENKIN
         TEMP  = TOKELVIN*TWOTHIRD*ENKIN/DBLE(NFFAT+NAT-NLESS)
C
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEPS)) THEN
            WRITE(IW,9001) 'RESCALED TEMPERATURE    =', TEMP
            WRITE(IW,*)' '
         END IF
      END IF
C
C     -- VOLUME SCALING --
C        START TO SCALE VOLUME AFTER MIN(NPROP,1000)
C
      IF(IPSTAT.GT.0 .AND. ISTEP.GT.MIN(NPROP,1000) .AND.
     *   VOL.LE.1.0D+24.AND.MIN(XBOX,YBOX,ZBOX).LT.1.0D+24) THEN
         IF(IPSTAT.EQ.1)THEN
            BETA = 4.9D-05  ! ISOTHERMAL COMPRESSIBILITY OF WATER, BAR-1
            TP   = 2.0D-13/2.418884326505D-17     ! RISE TIME, 200 FS
            DUM1 = (PRES - PRES0)*BETA*(DT/TP)
            CALL FFRAND(ABC)
            DUM1 = DUM1*ABC*2.0D+00
            SFAC = (1.0D+00+DUM1)**ONETHIRD
            IF(SFAC.GT.1.00001D+00) SFAC=1.00001D+00
            IF(SFAC.LT.0.99999D+00) SFAC=0.99999D+00
            IF(NAT.GT.0)   CALL DSCAL(3*NAT  ,SFAC,C   ,1)
            IF(NFFAT.GT.0) CALL DSCAL(3*NFFAT,SFAC,CORD,1)
            XBOX   = XBOX*SFAC
            YBOX   = YBOX*SFAC
            ZBOX   = ZBOX*SFAC
         END IF
         IF(GOPARR) THEN
            CALL DDI_BCAST(467,'F',XBOX,1,MASTER)
            CALL DDI_BCAST(468,'F',YBOX,1,MASTER)
            CALL DDI_BCAST(469,'F',ZBOX,1,MASTER)
         END IF
      END IF
C
C     -- ADJUST QMCX,Y,Z WHEN T OR V ARE ADJUSTED --
C        ALSO UPDATE LQMCT
C
      IF((ITSTAT.GT.0 .OR. IPSTAT.GT.0) .AND. ISTEP.GT.0) THEN
         IF(NAT.GT.0 .AND. NFFAT.GT.0 .AND. SWRR2.LT.1.0D+08) THEN
            XMAX = -1.0D+30
            YMAX = -1.0D+30
            ZMAX = -1.0D+30
            XMIN =  1.0D+30
            YMIN =  1.0D+30
            ZMIN =  1.0D+30
            DO IAT = 1,NAT
               XMAX = MAX(XMAX,C(1,IAT))
               YMAX = MAX(YMAX,C(2,IAT))
               ZMAX = MAX(ZMAX,C(3,IAT))
               XMIN = MIN(XMIN,C(1,IAT))
               YMIN = MIN(YMIN,C(2,IAT))
               ZMIN = MIN(ZMIN,C(3,IAT))
            ENDDO
            QMCX= (XMAX+XMIN)*PT5
            QMCY= (YMAX+YMIN)*PT5
            QMCZ= (ZMAX+ZMIN)*PT5
            R2NEAR = 100.0D+00
            NEAR   = 0
            DO IAT = 1,NAT
               XI = C(1,IAT) - QMCX
               YI = C(2,IAT) - QMCY
               ZI = C(3,IAT) - QMCZ
               R2 = XI**2 + YI**2 + ZI**2
               IF(R2.LT.R2NEAR) THEN
                  R2NEAR = R2
                  NEAR   = IAT
               END IF
            ENDDO
            LQMCT = NEAR
         END IF
      END IF
C
C     -- CALCULATE DIELECTRIC CONSTANT --
C
      IF(NDIEL.GT.0) THEN
         CALL DIELECT(CORD,X(LFFCHARG),X(LFFPOL),X(LFFDIP),ISTEP)
      END IF
C
C     -- CALCULATE RDF EVERY JOUT STEPS --
C
      IF(NRDF.GT.0) THEN
         IF(ISTEP.GE.NPROP .AND. MOD(ISTEP,JOUT).EQ.0) THEN
            CALL RDF(CORD,ISTEP,X(LFFATMNAM),X(LFFFRAG1),X(LFFFRAG2),
     *           X(LFFNFRAG1),X(LFFNFRAG2),X(LFFGOFR),X(LFFIDGROUP))
         END IF
      END IF
C
C     -- CALCULATE DIFFUSION COEFFICIENT --
C
      IF(NDFS.GT.0) THEN
         IF(MOD(ISTEP,INT(TIMDFS/DT)).EQ.0) THEN 
            CALL DFS(CORD,ISTEP,X(LFFATMNAM),X(LFFDFSC0),
     *           X(LFFDFSA),X(LFFDFSC),X(LFFDFSN))
         END IF
      END IF
C
C     -- CALCULATE RMSD EVERY JOUT STEPS --
C
      IF(NRMSD.EQ.1) THEN
         IF(MOD(ISTEP,JOUT).EQ.0) THEN
            CALL RMSD(CORD,ISTEP,X(LFFZANF),X(LFFRMSD0))
         END IF
      END IF
C
C     -- CALCULATE RADIUS OF GYRATION --
C
      IF(NGYRA.GT.0) THEN
         IF(MOD(ISTEP,INT(TIMGYRA/DT)).EQ.0) THEN
            CALL GYRA(CORD,X(LFFZANF),ZMAS)
         END IF
      END IF
C
C     -- CALCULATE RALL --
C
      IF(NRALL.EQ.1) THEN
         IF(MOD(ISTEP,INT(TIMRALL/DT)).EQ.0) THEN
            CALL RALL(X(LFFRALL0),CORD,ISTEP)
         END IF
      END IF
C
C     -- CALCULATE SELECT DISTANCES EVERY JOUT STEPS --
C
      IF((NRIJ.GT.0) .AND. MOD(ISTEP,JOUT).EQ.0) CALL DISIJ(CORD)
C
 9000 FORMAT(1X,A,F30.10,4X,'KCAL/MOL')
 9001 FORMAT(1X,A,F30.10,4X,'K')
 9002 FORMAT(1X,A,F30.10,4X,'BAR')
 9003 FORMAT(1X,A,F30.10,4X,'A**3')
 9004 FORMAT(1X,A,30X,   4X,'OPEN SYSTEM')
      RETURN
      END
C*MODULE QUANPO  *DECK FFOPTX
      SUBROUTINE FFOPTX
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
C     NANDUN THELLAMUREGE, HUI LI, MAY 2011, LINCOLN
C
      NTS = IRXNFLD
      IHESS = 0
      IF(NFFAT.LE.1800)IHESS = 1
      IF(NAT.EQ.0 .AND. NFFAT.GT.0 .AND. IHESS.EQ.0) THEN
         CALL FFOPT1(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFCHARG),X(LFFPOL),X(LFFDIP),
     *             X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *             X(LFFSIG),X(LFFEPS),X(LFFSIG2),X(LFFEPS2),
     *             X(LFFBOND0),X(LFFFCBOND),
     *             X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *             X(LFFDIHB0),X(LFFFCDIHB),
     *             X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *             X(LFFKLIST),X(LFFLLIST),
     *             X(LFFMLIST),X(LFFNLIST),
     *             X(LFFL1213J),X(LFFL14J),
     *             X(LFFFFGRD0),X(LFFFFGRD1),X(LFFFFGRD2),
     *             X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *             X(LFFPOT1),X(LFFPOT2),X(LFFQRXN1),X(LFFQRXN2),NTS,
     *             X(LFFNONLST),X(LFFNONLSTQ),
     *             X(LFFMAPLST),X(LFFCMAPCO),X(LFFIDGROUP))
      ELSE IF (NAT.GT.0 .AND. NFFAT.GT.0 .AND. IHESS.EQ.0) THEN
         CALL FFOPT2(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFFFGRD0),X(LFFFFGRD1),X(LFFFFGRD2),
     *             X(LFFQMGRD0),X(LFFQMGRD1),X(LFFQMGRD2),
     *             X(LFFLISTQM),X(LFFNONLST),X(LFFNONLSTQ),
     *             X(LFFL1213J),X(LFFIDGROUP))
      ELSE IF (NAT.EQ.0 .AND. NFFAT.GT.0 .AND. IHESS.EQ.1) THEN
         CALL VALFM(LOADFM)
         LHESS   = LOADFM + 1
         LXOLD   = LHESS  + 3*NFFAT*3*NFFAT
         LXNEW   = LXOLD  + 3*NFFAT
         LAST    = LXNEW  + 3*NFFAT
         NEED    = LAST   - LOADFM -1
         CALL GETFM(NEED)
         CALL FFOPT3(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFCHARG),X(LFFPOL),X(LFFDIP),
     *             X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *             X(LFFSIG),X(LFFEPS),X(LFFSIG2),X(LFFEPS2),
     *             X(LFFBOND0),X(LFFFCBOND),
     *             X(LFFANGL0),X(LFFFCANGL),X(LFFFCWAGG),
     *             X(LFFDIHB0),X(LFFFCDIHB),
     *             X(LFFVROT),X(LFFNNN),X(LFFGAMA),X(LFFIPAIR),
     *             X(LFFKLIST),X(LFFLLIST),
     *             X(LFFMLIST),X(LFFNLIST),
     *             X(LFFL1213J),X(LFFL14J),
     *             X(LFFFFGRD2),
     *             X(LFFXTS),X(LFFYTS),X(LFFZTS),X(LFFCMAT1),
     *             X(LFFPOT1),X(LFFPOT2),X(LFFQRXN1),X(LFFQRXN2),NTS,
     *             X(LFFNONLST),X(LFFNONLSTQ),
     *             X(LFFMAPLST),X(LFFCMAPCO),X(LFFIDGROUP),
     *             X(LXNEW),X(LXOLD),X(LHESS))
         CALL RETFM(NEED)
      ELSE IF (NAT.GT.0 .AND. NFFAT.GT.0 .AND. IHESS.EQ.1) THEN
         CALL VALFM(LOADFM)
         LHESS   = LOADFM + 1
         LXOLD   = LHESS  + 3*(NFFAT+NAT)*3*(NFFAT+NAT)
         LXNEW   = LXOLD  + 3*(NFFAT+NAT)
         LAST    = LXNEW  + 3*(NFFAT+NAT)
         NEED    = LAST   - LOADFM -1
         CALL GETFM(NEED)
         CALL FFOPT4(X(LFFATMNAM),X(LFFCORD),X(LFFCORDSV),X(LFFZANF),
     *             X(LFFFFGRD2),X(LFFQMGRD2),
     *             X(LFFLISTQM),X(LFFNONLST),X(LFFNONLSTQ),
     *             X(LFFL1213J),X(LFFIDGROUP),
     *             X(LXNEW),X(LXOLD),X(LHESS))
         CALL RETFM(NEED)
      END IF
C
      CALL TIMIT(1)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFOPT1
      SUBROUTINE FFOPT1(ATMNAM,CORD,CORDSV,ZANF,
     *                  CHARG,POL,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  SIG,EPS,SIG2,EPS2,
     *                  BOND0,FCBOND,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,
     *                  VROT,NNN,GAMA,IPAIR,
     *                  KLIST,LLIST,MLIST,NLIST,
     *                  L1213J,L14J,
     *                  FFGRD0,FFGRD1,FFGRD2,
     *                  XTS,YTS,ZTS,CMAT1,
     *                  POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLST,NONLSTQ,MAPLST,CMAPCO,
     *                  IDGROUP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, THREE=3.0D+00)
C
      CHARACTER*100 WD100
      CHARACTER*3   AAA,A3
      CHARACTER*2   SYMBOL
      CHARACTER*1   ALTLOC,A1,CHNID,ICODE
      CHARACTER*4   NAME4
      CHARACTER*6   NAME6
      CHARACTER*10  ATMNAM
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          CHARG(NFFAT),POL(NFFAT),DIP(3,NFFAT),
     *          FIELD1(3,NFFAT),FIELD2(3,NFFAT),FIELD3(3,NFFAT),
     *          SIG(NFFAT),EPS(NFFAT),SIG2(NFFAT),EPS2(NFFAT),
     *          BOND0(NBOND),FCBOND(NBOND),
     *          ANGL0(NANGL),FCANGL(NANGL),
     *          FCWAGG(NWAGG),FCDIHB(NDIHB),
     *          VROT(NDIHR),NNN(NDIHR),GAMA(NDIHR),IPAIR(2,NBOND),
     *          KLIST(3,NANGL),
     *          LLIST(4,NDIHR),MLIST(4,NWAGG),
     *          L1213J(2,NBOND+NANGL),L14J(2,NDIHR),
     *          FFGRD0(3,NFFAT),FFGRD1(3,NFFAT),FFGRD2(3,NFFAT),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),
     *          POT1(NTS),POT2(NTS),QRXN1(NTS),QRXN2(NTS),NONLST(2,*),
     *          NONLSTQ(*),MAPLST(6,*),CMAPCO(4,4,24,24,5),IDGROUP(*)
      DIMENSION TIMSTR(3)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, APR 2011, LINCOLN
C
      IF(NSTEPS.LE.0) RETURN
C
      IF(IADDWAT.EQ.2 .AND. IRXNFLD.GT.0) RXNRAD=RXNRAD*1.0D+40
      CALL VCLR(FFGRD2,1,3*NFFAT)
      CALL VCLR(FFGRD1,1,3*NFFAT)
      CALL VCLR(FFGRD0,1,3*NFFAT)
      ENTOTSV = 1.0D+30
      ICONV   = 0
C
      DO ISTEP = 0, NSTEPS
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. IRXNFLD.GT.0)
     *   RXNRAD = RXNRAD*1.0D-40
C        - UPDATE NONBOND LIST
         CALL NONBOND(ISTEP,CORD,CORDSV,NONLST,NONLSTQ,L1213J,IDGROUP)
C
C        -- CALCULATE ENERGY AND GRADIENT
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR)
         CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST)
         CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST)
         CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST)
         CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST)
         CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO)
         CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLST,
     *               IDGROUP)
         CALL ESPHER(CORD,FFGRD2)
         CALL ECHARG(CORD,FFGRD2,CHARG,NONLST,IDGROUP)
         CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                           CMAT1,POT1,QRXN1,NTS)
         CALL POLRXN(CORD,FFGRD2,CHARG,POL,DIP,
     *               FIELD1,FIELD2,FIELD3,
     *               XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *               NONLST,IDGROUP)
         IF(GOPARR) THEN
            CALL DDI_GSUMF(2410,EN12   ,1)
            CALL DDI_GSUMF(2411,EN123  ,1)
            CALL DDI_GSUMF(2412,EN123R4,1)
            CALL DDI_GSUMF(2413,EN123B4,1)
            CALL DDI_GSUMF(2414,EN234W1,1)
            CALL DDI_GSUMF(2415,ENCHAR,1)
            CALL DDI_GSUMF(2416,ENLJR ,1)
            CALL DDI_GSUMF(2417,ENLJD ,1)
            CALL DDI_GSUMF(2419,FFGRD2,3*NFFAT)
            CALL DDI_GSUMF(2420,ENUCCH,1)
            CALL DDI_GSUMF(2421,ENRXN ,1)
            CALL DDI_GSUMF(2422,ENRXNR,1)
            CALL DDI_GSUMF(2423,ENCENT,1)
            CALL DDI_GSUMF(2424,ENCMAP,1)
         END IF
C
C        - TEST CONVERGENCE
C              
         GRDMAX = ZERO    
         GRDRMS = ZERO    
         DO IFFAT=1, NFFAT
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(1,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(2,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(3,IFFAT)))
            GRDRMS=GRDRMS + FFGRD2(1,IFFAT)**2
     *                    + FFGRD2(2,IFFAT)**2
     *                    + FFGRD2(3,IFFAT)**2
         ENDDO
         GRDRMS = SQRT(GRDRMS/(3*NFFAT))
         IF(GRDMAX.LT.OPTTOL.AND.GRDRMS.LT.(OPTTOL/THREE)) ICONV = 1
C
C        -- CALCULATE PROPERTIES
         CALL OPTPROP(ISTEP,ICONV)
         IF(MASWRK) WRITE(IW,'(A,I6,A,F12.9,A,F12.9,A,F24.10,A)')
     *              ' OPT STEP=',ISTEP,
     *              '  MAX GRAD=',GRDMAX,
     *              '  RMS GRAD=',GRDRMS,
     *              '  E=',ENTOT*TOKCAL,' KCAL/MOL'
C
         KKKPDB = 1
         CALL SEQREW(IR)
         IEOF = 0
         CALL FNDGRP(IR,' $FFPDB ',IEOF)
         IF(IEOF.EQ.1) KKKPDB = 0
         CALL TMDATE(TIMSTR)
         IF(MOD(ISTEP,KOUT).EQ.0) CALL TIMIT(1)
         IF(MASWRK .AND. (MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEPS.OR.
     *      ICONV.EQ.1))THEN
C
C           -- PRINT OUT PDB FILE --
            IF(KKKPDB.EQ.0) GOTO 110
            IFFAT = 0
            WRITE(IW,*)'====== PDB FILE ======'
            WRITE(IW,'(2A,3A8)')'REMARK   1  ',
     *              'GENERATED BY QUANPOL OPTIMIZATION ON ',TIMSTR
            WRITE(IW,'(A,I10,10X,A,F19.2,A)') 
     *               'REMARK   1 OPT STEP=',ISTEP
  100       CONTINUE
            READ(IR,'(6A,100A)')NAME6,WD100
            IF(NAME6.EQ.'ATOM  '.OR. NAME6.EQ.'HETATM') THEN
               IFFAT = IFFAT + 1
               READ(WD100,1010)NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,ZZZ,ZZZ,ZZZ,OCC,TEMFAC,
     *                    SYMBOL,ICHARG
               ZZZ = ZZZ*0.0D+00
               WRITE(IW,1011)NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,CORD(1,IFFAT)*TOANGS,
     *                    CORD(2,IFFAT)*TOANGS,CORD(3,IFFAT)*TOANGS,
     *                    OCC,TEMFAC,SYMBOL,ICHARG
            END IF
            IF(NAME6.EQ.' $END ') THEN
               WRITE(IW,'(A,/1X)')'END'
               WRITE(IW,*)' '
               GOTO 110
            END IF
            GOTO 100
 1010       FORMAT(I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
 1011       FORMAT(A6,I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
  110       CONTINUE
C
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            WRITE(IW,'(A,3(F15.10,2X)," ")')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            WRITE(IW,*)' '
            CALL TIMIT(1)
         END IF
C
         IF(ICONV.EQ.1) GOTO 500
C
C        - CALCULATE NEW COORDINATES
C
         FACTOR=1.5D+00
         IF(ENTOT.GT.ENTOTSV) FACTOR=1.2D+00
         DO 200 IFFAT = 1, NFFAT
            IF(IFFAT.LE.NATPDB.AND.ISTEP.LT.NFIXPDB) GOTO 200
            DO II = 1, 3
               DISPLC =  FACTOR*FFGRD2(II,IFFAT)
     *                 +0.1D+00*FFGRD1(II,IFFAT)
     *                 -0.1D+00*FFGRD0(II,IFFAT)
               IF(DISPLC.GT. 0.10D+00) DISPLC = 0.10D+00
               IF(DISPLC.LT.-0.10D+00) DISPLC =-0.10D+00
               CORD(II,IFFAT) = CORD(II,IFFAT) - DISPLC
            ENDDO
 200     CONTINUE
         CALL DCOPY(3*NFFAT,FFGRD1,1,FFGRD0,1)
         CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD1,1)
         ENTOTSV = ENTOT
C
      END DO
C
C     -- NOT LOCATED --
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION FAILED. ',
     *              'PLEASE RESTART THE JOB USING THE LAST GEOMETRY.'
         WRITE(IW,*)' '
      END IF
      RETURN
C
C     -- LOCATED --
C
 500  CONTINUE
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION SUCCESSFULLY COMPLETED.'
         WRITE(IW,*)' '
      END IF
C
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFOPT2
      SUBROUTINE FFOPT2(ATMNAM,CORD,CORDSV,ZANF,
     *                  FFGRD0,FFGRD1,FFGRD2,
     *                  QMGRD0,QMGRD1,QMGRD2,
     *                  LISTQM,NONLST,NONLSTQ,L1213J,IDGROUP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000, MXAO=8192)
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, THREE=3.0D+00)
C
      CHARACTER*100 WD100
      CHARACTER*3   AAA,A3
      CHARACTER*2   SYMBOL
      CHARACTER*1   ALTLOC,A1,CHNID,ICODE
      CHARACTER*4   NAME4
      CHARACTER*6   NAME6
      CHARACTER*10  ATMNAM
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          FFGRD0(3,NFFAT),FFGRD1(3,NFFAT),FFGRD2(3,NFFAT),
     *          QMGRD0(3,NAT),QMGRD1(3,NAT),QMGRD2(3,NAT),LISTQM(*),
     *          NONLSTQ(*)
      DIMENSION TIMSTR(3)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FUNCT / E,EG(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
C
C     HUI LI, APR 2011, LINCOLN
C
      IF(NSTEPS.LE.0) RETURN
C
      IF(IADDWAT.EQ.2 .AND. IRXNFLD.GT.0) RXNRAD=RXNRAD*1.0D+40
      NPRINT = -5
      CALL VCLR(QMGRD2,1,3*NAT  )
      CALL VCLR(QMGRD1,1,3*NAT  )
      CALL VCLR(QMGRD0,1,3*NAT  )
      CALL VCLR(FFGRD2,1,3*NFFAT)
      CALL VCLR(FFGRD1,1,3*NFFAT)
      CALL VCLR(FFGRD0,1,3*NFFAT)
      ENTOTSV = 1.0D+30
      ICONV   = 0
C
C     -- READY TO TAKE OFF ?
C
      DO ISTEP = 0, NSTEPS
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. IRXNFLD.GT.0)
     *   RXNRAD = RXNRAD*1.0D-40
C
C        - UPDATE NONBOND LIST
         CALL NONBOND(ISTEP,CORD,CORDSV,NONLST,NONLSTQ,L1213J,IDGROUP)
C
C        - CALCULATE ENERGY AND GRADIENT AT NEW COORDINATES
         CALL VCLR(QMGRD2,1,3*NAT  )
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL GRADX
         CALL DCOPY(3*NAT  ,EG,1,QMGRD2,1)
C        - SYNCHRONIZ QM(MM) GRADIENTS -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMGRD2(1,IAT)   = QMGRD2(1,IAT) + FFGRD2(1,KFFAT)
                  QMGRD2(2,IAT)   = QMGRD2(2,IAT) + FFGRD2(2,KFFAT)
                  QMGRD2(3,IAT)   = QMGRD2(3,IAT) + FFGRD2(3,KFFAT)
                  FFGRD2(1,KFFAT) = QMGRD2(1,IAT)
                  FFGRD2(2,KFFAT) = QMGRD2(2,IAT)
                  FFGRD2(3,KFFAT) = QMGRD2(3,IAT)
               END IF
            ENDDO
         END IF
C
C        - TEST CONVERGENCE
C
         GRDMAX = ZERO
         GRDRMS = ZERO
         DO IAT=1, NAT
            GRDMAX=MAX(GRDMAX,ABS(QMGRD2(1,IAT)))
            GRDMAX=MAX(GRDMAX,ABS(QMGRD2(2,IAT)))
            GRDMAX=MAX(GRDMAX,ABS(QMGRD2(3,IAT)))
            GRDRMS=GRDRMS + QMGRD2(1,IAT)**2
     *                    + QMGRD2(2,IAT)**2
     *                    + QMGRD2(3,IAT)**2
         ENDDO
         DO IFFAT=1, NFFAT
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(1,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(2,IFFAT)))
            GRDMAX=MAX(GRDMAX,ABS(FFGRD2(3,IFFAT)))
            GRDRMS=GRDRMS + FFGRD2(1,IFFAT)**2
     *                    + FFGRD2(2,IFFAT)**2
     *                    + FFGRD2(3,IFFAT)**2
         ENDDO
         GRDRMS = SQRT(GRDRMS/(3*(NAT+NFFAT)))
         IF(GRDMAX.LT.OPTTOL.AND.GRDRMS.LT.(OPTTOL/THREE)) ICONV = 1
C
C        -- CALCULATE PROPERTIES
         CALL OPTPROP(ISTEP,ICONV)
         IF(MASWRK) WRITE(IW,'(A,I6,A,F12.9,A,F12.9,A,F24.10,A)')
     *              ' OPT STEP=',ISTEP,
     *              '  MAX GRAD=',GRDMAX,
     *              '  RMS GRAD=',GRDRMS,
     *              '  E=',ENTOT*TOKCAL,' KCAL/MOL'
C
         KKKPDB = 1
         CALL SEQREW(IR)
         IEOF = 0
         CALL FNDGRP(IR,' $FFPDB ',IEOF)
         IF(IEOF.EQ.1) KKKPDB = 0
         CALL TMDATE(TIMSTR)
         IF(MOD(ISTEP,KOUT).EQ.0) CALL TIMIT(1)
         IF(MASWRK .AND. (MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEPS))THEN
C
C           -- PRINT OUT PDB FILE --
            IF(KKKPDB.EQ.0) GOTO 110
            IFFAT = 0
            WRITE(IW,*)'====== PDB FILE ======'
            WRITE(IW,'(2A,3A8)')'REMARK   1  ',
     *              'GENERATED BY QUANPOL OPTIMIZATION ON ',TIMSTR
            WRITE(IW,'(A,I10,10X,A,F19.2,A)') 
     *               'REMARK   1 OPT STEP=',ISTEP
  100       CONTINUE
            READ(IR,'(6A,100A)')NAME6,WD100
            IF(NAME6.EQ.'ATOM  '.OR. NAME6.EQ.'HETATM') THEN
               IFFAT = IFFAT + 1
               READ(WD100,1010)NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,ZZZ,ZZZ,ZZZ,OCC,TEMFAC,
     *                    SYMBOL,ICHARG
               ZZZ = ZZZ*0.0D+00
               WRITE(IW,1011)NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,CORD(1,IFFAT)*TOANGS,
     *                    CORD(2,IFFAT)*TOANGS,CORD(3,IFFAT)*TOANGS,
     *                    OCC,TEMFAC,SYMBOL,ICHARG
            END IF
            IF(NAME6.EQ.' $END ') THEN
               WRITE(IW,'(A,/1X)')'END'
               WRITE(IW,*)' '
               GOTO 110
            END IF
            GOTO 100
 1010       FORMAT(I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
 1011       FORMAT(A6,I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
  110       CONTINUE
C
            WRITE(IW,*)'$DATA'
            WRITE(IW,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT OPT STEP',ISTEP
            WRITE(IW,*)'C1'
            DO IAT = 1, NAT
               WRITE(IW,1000)ANAM(IAT),ZAN(IAT),
     *         C(1,IAT)*TOANGS,
     *         C(2,IAT)*TOANGS,
     *         C(3,IAT)*TOANGS
            ENDDO
            WRITE(IW,*)'$END'
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            WRITE(IW,'(A,3(F15.10,2X)," ")')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            WRITE(IW,*)' '
            CALL TIMIT(1)
         END IF
C
         IF(ICONV.EQ.1) GOTO 500
C
C        - CALCULATE NEW COORDINATES
C
         FACTOR=1.5D+00
         IF(ENTOT.GT.ENTOTSV) FACTOR=1.2D+00
         DO IAT = 1, NAT
            DO II = 1, 3
               DISPLC =  FACTOR*QMGRD2(II,IAT)
     *                 +0.1D+00*QMGRD1(II,IAT)
     *                 -0.1D+00*QMGRD0(II,IAT)
               IF(DISPLC.GT. 0.10D+00) DISPLC = 0.10D+00
               IF(DISPLC.LT.-0.10D+00) DISPLC =-0.10D+00
               C(II,IAT) = C(II,IAT) - DISPLC
            ENDDO
         ENDDO
         DO 200 IFFAT = 1, NFFAT
            IF(IFFAT.LE.NATPDB.AND.ISTEP.LT.NFIXPDB) GOTO 200
            DO II = 1, 3
               DISPLC =  FACTOR*FFGRD2(II,IFFAT)
     *                 +0.1D+00*FFGRD1(II,IFFAT)
     *                 -0.1D+00*FFGRD0(II,IFFAT)
               IF(DISPLC.GT. 0.10D+00) DISPLC = 0.10D+00
               IF(DISPLC.LT.-0.10D+00) DISPLC =-0.10D+00
               CORD(II,IFFAT) = CORD(II,IFFAT) - DISPLC
            ENDDO
 200     CONTINUE
C        - SYNCHRONIZ QM(MM) COORDINATES -
         IF(LISTQM(NFFAT+NAT+1).GT.0)THEN
            DO IAT = 1, NAT
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  C(1,IAT) = CORD(1,KFFAT)
                  C(2,IAT) = CORD(2,KFFAT)
                  C(3,IAT) = CORD(3,KFFAT)
               END IF
            ENDDO
         END IF
         CALL DCOPY(  3*NAT,QMGRD1,1,QMGRD0,1)
         CALL DCOPY(  3*NAT,QMGRD2,1,QMGRD1,1)
         CALL DCOPY(3*NFFAT,FFGRD1,1,FFGRD0,1)
         CALL DCOPY(3*NFFAT,FFGRD2,1,FFGRD1,1)
         ENTOTSV = ENTOT
C
      END DO
C
C     -- NOT LOCATED --
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION FAILED. ',
     *              'PLEASE RESTART THE JOB USING THE LAST GEOMETRY.'
         WRITE(IW,*)' '
      END IF
      RETURN
C
C     -- LOCATED --
C
 500  CONTINUE
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION SUCCESSFULLY COMPLETED.'
         WRITE(IW,*)' '
      END IF
C
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFOPT3
      SUBROUTINE FFOPT3(ATMNAM,CORD,CORDSV,ZANF,
     *                  CHARG,POL,DIP,
     *                  FIELD1,FIELD2,FIELD3,
     *                  SIG,EPS,SIG2,EPS2,
     *                  BOND0,FCBOND,
     *                  ANGL0,FCANGL,FCWAGG,
     *                  DIHB0,FCDIHB,
     *                  VROT,NNN,GAMA,IPAIR,
     *                  KLIST,LLIST,MLIST,NLIST,
     *                  L1213J,L14J,
     *                  FFGRD2,
     *                  XTS,YTS,ZTS,CMAT1,
     *                  POT1,POT2,QRXN1,QRXN2,NTS,
     *                  NONLST,NONLSTQ,MAPLST,CMAPCO,
     *                  IDGROUP,CRDNEW,CRDOLD,HESS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL CVGED,OUT,STPT,PROJCT
C
      PARAMETER (MXATM=2000, MXAO=8192, MXFRG=1050)
      PARAMETER (TOANGS=0.52917724924D+00)
C
      CHARACTER*100 WD100
      CHARACTER*3   AAA,A3
      CHARACTER*2   SYMBOL
      CHARACTER*1   ALTLOC,A1,CHNID,ICODE
      CHARACTER*4   NAME4
      CHARACTER*6   NAME6
      CHARACTER*10  ATMNAM
C
      DOUBLE PRECISION METHOD
      LOGICAL LINEAR
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          CHARG(NFFAT),POL(NFFAT),DIP(3,NFFAT),
     *          FIELD1(3,NFFAT),FIELD2(3,NFFAT),FIELD3(3,NFFAT),
     *          SIG(NFFAT),EPS(NFFAT),SIG2(NFFAT),EPS2(NFFAT),
     *          BOND0(NBOND),FCBOND(NBOND),
     *          ANGL0(NANGL),FCANGL(NANGL),
     *          FCWAGG(NWAGG),FCDIHB(NDIHB),
     *          VROT(NDIHR),NNN(NDIHR),GAMA(NDIHR),IPAIR(2,NBOND),
     *          KLIST(3,NANGL),
     *          LLIST(4,NDIHR),MLIST(4,NWAGG),
     *          L1213J(2,NBOND+NANGL),L14J(2,NDIHR),
     *          FFGRD2(3,NFFAT),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),CMAT1(NTS,NTS),
     *          POT1(NTS),POT2(NTS),QRXN1(NTS),QRXN2(NTS),NONLST(2,*),
     *          NONLSTQ(*),MAPLST(6,*),CMAPCO(4,4,24,24,5),IDGROUP(*),
     *          CRDNEW(*)
      DIMENSION TIMSTR(3)
C
      COMMON /DLCFRZ/ FVALUE(50),ITABLE(50),IFTYPE(50),NCONST
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FUNCT / ENERGY,EG(3*MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /OPTGRD/ XX(3*MXATM),ES,FE(20),
     *                CONVF,FMAXT,DXMAXT,RMAX,RMIN,RLIM,
     *                EIGMAX,EIGMIN,GRDERR,FRMS,FMAX,TRMAX,TRMIN,
     *                IC(20),NSTEP,NSERCH,NPMAX,NP,IFOLOW,
     *                NNEG,IUPHSS,IEXIT,ITRUPD,IPAD,KDIAGH
      COMMON /ZMAT  / NZMAT,NZVAR,NVAR,NSYMC,LINEAR
      COMMON /ZMTALT/ NZMAT2,NZVAR2,NVAR2,NZMTRD,ICOORD
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /FROZNC/ IFREEZ(3*MXATM),NFRZ
      COMMON /OPTEF / D(3*MXATM+6*MXFRG),OLDF(3*MXATM+6*MXFRG),
     *                VMODE(3*MXATM+6*MXFRG),RADIUS
C
      DATA  SQA   /8HQA      /
      DATA GUESS/8HGUESS   /
      DATA BLANK/8H        /
C
C     NANDUN THELLAMUREGE, MAY 2011, LINCOLN
C
      IF(NSTEPS.LE.0) RETURN
C
      IF(IADDWAT.EQ.2 .AND. IRXNFLD.GT.0) RXNRAD=RXNRAD*1.0D+40
C
C     -- DEFINE INFOA VARIABLES --
      NAT    = NFFAT
      NCOORD = 3*NFFAT
      NCVAL  = NCOORD
      CALL DCOPY(3*NFFAT,CORD,1,C,1)
      CALL DCOPY(NFFAT,ZANF,1,ZAN,1)
      DO IFFAT =1,NFFAT
         READ(UNIT=ATMNAM(IFFAT)(1:8),FMT='(A8)') ANAM(IFFAT)
         BNAM(IFFAT)=BLANK
      ENDDO
C
C     -- SET SOME CONTROL VARIABLES --
      NSTEP  = NSTEPS
      NZMAT  = 0
      NFRZ   = 0
      NCONST = 0
      ICOORD = 8
      IUPHSS = 2
      FMAXT  = 1.0D+01
      EIGMAX = 25.0D+00
      EIGMIN = 0.001D+00
      GRDERR = 1.0D-06
      DXMAXT = 0.3D+00
      RMIN   = 0.0015D+00
      RMAX   = 0.1D+00
      RLIM   = 0.07D+00
      CVGED  = .FALSE.
      NPUN   = -2
      OUT    = .FALSE.
      METHOD = SQA
      ITBMAT = 5
      STPT   = .FALSE.
      STSTEP = 0.01D+00
      PROJCT = .TRUE.
      CONVF  = OPTTOL
      TRMIN  = 0.05D+00
      TRMAX  = 0.5D+00
      CALL HESGES(GUESS,HESS,NCOORD,0,DUMY,0,DUMY,0,DUMY,NFFAT)
      CALL DAWRIT(IDAF,IODA,HESS,NCOORD*NCOORD,4,0)
C
      DO ISTEP = 0, NSTEPS
         NSERCH= ISTEP
         IF(ISTEP.EQ.100.AND.IADDWAT.EQ.2 .AND. IRXNFLD.GT.0)
     *   RXNRAD = RXNRAD*1.0D-40
C
C        -- UPDATE NONBOND LIST --
         CALL NONBOND(ISTEP,CORD,CORDSV,NONLST,NONLSTQ,L1213J,IDGROUP)
C
C        -- CALCULATE ENERGY AND GRADIENT
         CALL VCLR(FFGRD2,1,3*NFFAT)
         CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR)
         CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST)
         CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST)
         CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST)
         CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST)
         CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO)
         CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLST,
     *               IDGROUP)
         CALL ESPHER(CORD,FFGRD2)
         CALL ECHARG(CORD,FFGRD2,CHARG,NONLST,IDGROUP)
         CALL CHGRXN(CORD,FFGRD2,CHARG,XTS,YTS,ZTS,
     *                           CMAT1,POT1,QRXN1,NTS)
         CALL POLRXN(CORD,FFGRD2,CHARG,POL,DIP,
     *               FIELD1,FIELD2,FIELD3,
     *               XTS,YTS,ZTS,CMAT1,POT1,POT2,QRXN1,QRXN2,NTS,
     *               NONLST,IDGROUP)
         IF(GOPARR) THEN
            CALL DDI_GSUMF(2410,EN12   ,1)
            CALL DDI_GSUMF(2411,EN123  ,1)
            CALL DDI_GSUMF(2412,EN123R4,1)
            CALL DDI_GSUMF(2413,EN123B4,1)
            CALL DDI_GSUMF(2414,EN234W1,1)
            CALL DDI_GSUMF(2415,ENCHAR,1)
            CALL DDI_GSUMF(2416,ENLJR ,1)
            CALL DDI_GSUMF(2417,ENLJD ,1)
            CALL DDI_GSUMF(2419,FFGRD2,3*NFFAT)
            CALL DDI_GSUMF(2420,ENUCCH,1)
            CALL DDI_GSUMF(2421,ENRXN ,1)
            CALL DDI_GSUMF(2422,ENRXNR,1)
            CALL DDI_GSUMF(2423,ENCENT,1)
            CALL DDI_GSUMF(2424,ENCMAP,1)
         END IF
C
C        -- PRINT COORDINATES --
         KKKPDB = 1
         CALL SEQREW(IR)
         IEOF = 0
         CALL FNDGRP(IR,' $FFPDB ',IEOF)
         IF(IEOF.EQ.1) KKKPDB = 0
         CALL TMDATE(TIMSTR)
         IF(MASWRK) THEN
C
C           -- PRINT OUT PDB FILE --
            IF(KKKPDB.EQ.0) GOTO 110
            IFFAT = 0
            WRITE(IW,*)'====== PDB FILE ======'
            WRITE(IW,'(2A,3A8)')'REMARK   1  ',
     *              'GENERATED BY QUANPOL OPTIMIZATION ON ',TIMSTR
            WRITE(IW,'(A,I10,10X,A,F19.2,A)')
     *               'REMARK   1 OPT STEP=',ISTEP
  100       CONTINUE
            READ(IR,'(6A,100A)')NAME6,WD100
            IF(NAME6.EQ.'ATOM  '.OR. NAME6.EQ.'HETATM') THEN
               IFFAT = IFFAT + 1
               READ(WD100,1010)NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,ZZZ,ZZZ,ZZZ,OCC,TEMFAC,
     *                    SYMBOL,ICHARG
               ZZZ = ZZZ*0.0D+00
               WRITE(IW,1011)NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,CORD(1,IFFAT)*TOANGS,
     *                    CORD(2,IFFAT)*TOANGS,CORD(3,IFFAT)*TOANGS,
     *                    OCC,TEMFAC,SYMBOL,ICHARG
            END IF
            IF(NAME6.EQ.' $END ') THEN
               WRITE(IW,'(A,/1X)')'END'
               WRITE(IW,*)' '
               GOTO 110
            END IF
            GOTO 100
 1010       FORMAT(I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
 1011       FORMAT(A6,I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
  110       CONTINUE
C
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            WRITE(IW,'(A,3(F15.10,2X)," ")')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            WRITE(IW,*)' '
            CALL TIMIT(1)
         END IF
C
C        -- CALCULATE PROPERTIES
         NAT = 0
         CALL OPTPROP(ISTEP,1)
         NAT = NFFAT
         ENERGY= ENPOT
C
         CALL DCOPY(3*NFFAT,CORD,1,C,1)
         CALL DCOPY(3*NFFAT,FFGRD2,1,EG,1)
         CALL DCOPY(3*NFFAT,C,1,XX,1)
         CALL DISPLC(CVGED,CRDOLD,CRDNEW,NCVAL,NCOORD,
     *               NPUN,OUT,METHOD,ITBMAT,STPT,STSTEP,PROJCT,RUNTYP)
         IF(CVGED) GOTO 500
C
C        -- UPDATE THE NUCLEAR COORDINATES --
C
         CALL EGMOVE(OLDF,EG,DUMY,DUMY,NCVAL,0)
         CALL SYMDR(CRDNEW)
         DO 200 IFFAT =1,NFFAT
            IF(IFFAT.LE.NATPDB.AND.ISTEP.LT.NFIXPDB) GOTO 200
            C(1,IFFAT)=C(1,IFFAT) + CRDNEW(IFFAT*3-2)
            C(2,IFFAT)=C(2,IFFAT) + CRDNEW(IFFAT*3-1)
            C(3,IFFAT)=C(3,IFFAT) + CRDNEW(IFFAT*3)
            CORD(1,IFFAT)=C(1,IFFAT)
            CORD(2,IFFAT)=C(2,IFFAT)
            CORD(3,IFFAT)=C(3,IFFAT)
 200     CONTINUE
C
      END DO
C    
C     -- NOT LOCATED --
C    
      IF(MASWRK) THEN
         WRITE(IW,*)' '             
         WRITE(IW,*)'QUANPOL OPTIMIZATION FAILED. ',
     *              'PLEASE RESTART THE JOB USING THE LAST GEOMETRY.'
         WRITE(IW,*)' '
      END IF
      RETURN
C
C     -- LOCATED --
C
 500  CONTINUE
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION SUCCESSFULLY COMPLETED.'
         WRITE(IW,*)' '
      END IF
C
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
C
      END
C*MODULE QUANPO  *DECK FFOPT4
      SUBROUTINE FFOPT4(ATMNAM,CORD,CORDSV,ZANF,
     *                  FFGRD2,QMGRD2,
     *                  LISTQM,NONLST,NONLSTQ,L1213J,IDGROUP,
     *                  CRDNEW,CRDOLD,HESS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL CVGED,OUT,STPT,PROJCT
C
      PARAMETER (MXATM=2000, MXAO=8192, MXFRG=1050)
      PARAMETER (TOANGS=0.52917724924D+00)
C
      CHARACTER*100 WD100
      CHARACTER*3   AAA,A3
      CHARACTER*2   SYMBOL
      CHARACTER*1   ALTLOC,A1,CHNID,ICODE
      CHARACTER*4   NAME4
      CHARACTER*6   NAME6
      CHARACTER*10  ATMNAM
C
      DOUBLE PRECISION METHOD
      LOGICAL LINEAR
C
      DIMENSION ATMNAM(NFFAT),CORD(3,NFFAT),CORDSV(3,NFFAT),ZANF(NFFAT),
     *          FFGRD2(3,NFFAT),QMGRD2(3,NAT),
     *          LISTQM(*),NONLSTQ(*),CRDNEW(*)
      DIMENSION TIMSTR(3)
C
      COMMON /DLCFRZ/ FVALUE(50),ITABLE(50),IFTYPE(50),NCONST
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /FUNCT / E,EG(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),ANAM(MXATM),BNAM(MXATM),BFLAB(MXAO)
      COMMON /OPTGRD/ XX(3*MXATM),ES,FE(20),
     *                CONVF,FMAXT,DXMAXT,RMAX,RMIN,RLIM,
     *                EIGMAX,EIGMIN,GRDERR,FRMS,FMAX,TRMAX,TRMIN,
     *                IC(20),NSTEP,NSERCH,NPMAX,NP,IFOLOW,
     *                NNEG,IUPHSS,IEXIT,ITRUPD,IPAD,KDIAGH
      COMMON /ZMAT  / NZMAT,NZVAR,NVAR,NSYMC,LINEAR
      COMMON /ZMTALT/ NZMAT2,NZVAR2,NVAR2,NZMTRD,ICOORD
      COMMON /FROZNC/ IFREEZ(3*MXATM),NFRZ
      COMMON /OPTEF / D(3*MXATM+6*MXFRG),OLDF(3*MXATM+6*MXFRG),
     *                VMODE(3*MXATM+6*MXFRG),RADIUS
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
C
      DATA  SQA   /8HQA      /
      DATA GUESS/8HGUESS   /
      DATA BLANK/8H        /
C
C     NANDUN THELLAMUREGE, MAY 2011, LINCOLN
C
      IF(NSTEPS.LE.0) RETURN
C
      IF(IADDWAT.EQ.2 .AND. IRXNFLD.GT.0) RXNRAD=RXNRAD*1.0D+40
C
      NPRINT  = -5
      NATSV   = NAT
      DO IFFAT =1,NFFAT
         IF(LISTQM(IFFAT).EQ.0) THEN
            NAT = NAT + 1
            C(1,NAT)=CORD(1,IFFAT)
            C(2,NAT)=CORD(2,IFFAT)
            C(3,NAT)=CORD(3,IFFAT)
            ZAN(NAT)=ZANF(IFFAT)
            READ(UNIT=ATMNAM(IFFAT)(1:8),FMT='(A8)') ANAM(NAT)
            BNAM(NAT)=BLANK
         END IF
      ENDDO
      NATTOT=NAT
      NCOORD=NATTOT*3
      NCVAL =NCOORD
C
C     -- SET SOME CONTROL VARIABLES --
C
      NSTEP  = NSTEPS
      NSERCH = 0
      NZMAT  = 0
      NFRZ   = 0
      NCONST = 0
      ICOORD = 8
      IUPHSS = 2
      FMAXT  = 1.0D+01
      EIGMAX = 25.0D+00
      EIGMIN = 0.001D+00
      GRDERR = 1.0D-06
      DXMAXT = 0.3D+00
      RMIN   = 0.0015D+00
      RMAX   = 0.1D+00
      RLIM   = 0.07D+00
      CVGED  = .FALSE.
      NPUN   = -2
      OUT    = .FALSE.
      METHOD = SQA
      ITBMAT = 5
      PROJCT = .TRUE.
      CONVF  = OPTTOL
      TRMIN  = 0.05D+00
      TRMAX  = 0.5D+00
      CALL HESGES(GUESS,HESS,NCOORD,0,DUMY,0,DUMY,0,DUMY,NATTOT)
      CALL DAWRIT(IDAF,IODA,HESS,NCOORD*NCOORD,4,0)
C
C     -- READY TO TAKE OFF ?
C    
      DO ISTEP = 0, NSTEPS
         NSERCH = ISTEP
         IF(ISTEP.EQ.50.AND.IADDWAT.EQ.2 .AND. IRXNFLD.GT.0)
     *   RXNRAD = RXNRAD*1.0D-40
C
C        - UPDATE NONBOND LIST -
         CALL NONBOND(ISTEP,CORD,CORDSV,NONLST,NONLSTQ,L1213J,IDGROUP)
C
C        - CALCULATE ENERGY AND GRADIENT -
         CALL VCLR(QMGRD2,1,3*NATSV)
         CALL VCLR(FFGRD2,1,3*NFFAT)
         NAT = NATSV
         CALL GRADX
         CALL DCOPY(3*NATSV,EG,1,QMGRD2,1)
         NAT = NATTOT
C
C        -- PRINT COORDINATES --
C
         KKKPDB = 1
         CALL SEQREW(IR)
         IEOF = 0
         CALL FNDGRP(IR,' $FFPDB ',IEOF)
         IF(IEOF.EQ.1) KKKPDB = 0
         CALL TMDATE(TIMSTR)
         IF(MASWRK)THEN
C
C           -- PRINT OUT PDB FILE --
            IF(KKKPDB.EQ.0) GOTO 110
            IFFAT = 0
            WRITE(IW,*)'====== PDB FILE ======'
            WRITE(IW,'(2A,3A8)')'REMARK   1  ',
     *              'GENERATED BY QUANPOL OPTIMIZATION ON ',TIMSTR
            WRITE(IW,'(A,I10,10X,A,F19.2,A)')
     *               'REMARK   1 OPT STEP=',ISTEP
  100       CONTINUE
            READ(IR,'(6A,100A)')NAME6,WD100
            IF(NAME6.EQ.'ATOM  '.OR. NAME6.EQ.'HETATM') THEN
               IFFAT = IFFAT + 1
               READ(WD100,1010)NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,ZZZ,ZZZ,ZZZ,OCC,TEMFAC,
     *                    SYMBOL,ICHARG
               ZZZ = ZZZ*0.0D+00
               WRITE(IW,1011)NAME6,NATOM,A1,NAME4,ALTLOC,AAA,A1,CHNID,
     *                    NUMAAA,ICODE,A3,CORD(1,IFFAT)*TOANGS,
     *                    CORD(2,IFFAT)*TOANGS,CORD(3,IFFAT)*TOANGS,
     *                    OCC,TEMFAC,SYMBOL,ICHARG
            END IF
            IF(NAME6.EQ.' $END ') THEN
               WRITE(IW,'(A,/1X)')'END'
               WRITE(IW,*)' '
               GOTO 110
            END IF
            GOTO 100
 1010       FORMAT(I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
 1011       FORMAT(A6,I5,A1,A4,A1,A3,2A1,I4,A1,A3,3F8.3,2F6.2,A13,A2,I2)
  110       CONTINUE
C
            WRITE(IW,*)'$DATA'
            WRITE(IW,'(A,3(F8.3,1X),A,I3,A,I10)')
     *      ' QM CENTER = ',QMCX*TOANGS,QMCY*TOANGS,QMCZ*TOANGS,
     *      'NEAR ATOM',LQMCT,'     AT OPT STEP',ISTEP
            WRITE(IW,*)'C1'
            DO IAT = 1, NATSV
               WRITE(IW,1000)ANAM(IAT),ZAN(IAT),
     *         C(1,IAT)*TOANGS,
     *         C(2,IAT)*TOANGS,
     *         C(3,IAT)*TOANGS
            ENDDO
            WRITE(IW,*)'$END'
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')
     *      '$FFDATA          !   OPT STEP',ISTEP
            WRITE(IW,'(A,3(F10.4,2X))')
     *      ' CENTER= ',CENTX*TOANGS,CENTY*TOANGS,CENTZ*TOANGS
            WRITE(IW,*)'COORDINATES  NUC                   X',
     *          '                   Y                   Z'
            DO IFFAT = 1, NFFAT
               WRITE(IW,1000)ATMNAM(IFFAT),ZANF(IFFAT),
     *         CORD(1,IFFAT)*TOANGS,
     *         CORD(2,IFFAT)*TOANGS,
     *         CORD(3,IFFAT)*TOANGS
            ENDDO
            WRITE(IW,*)'STOP'
            WRITE(IW,*)' '
            CALL TIMIT(1)
         END IF
C
C        - SYNCHRONIZ QM(MM) GRADIENTS -
         IF(LISTQM(NFFAT+NATSV+1).GT.0)THEN
            DO IAT = 1, NATSV
               KFFAT = LISTQM(NFFAT+IAT)
               IF(KFFAT.GT.0) THEN
                  QMGRD2(1,IAT)   = QMGRD2(1,IAT) + FFGRD2(1,KFFAT)
                  QMGRD2(2,IAT)   = QMGRD2(2,IAT) + FFGRD2(2,KFFAT)
                  QMGRD2(3,IAT)   = QMGRD2(3,IAT) + FFGRD2(3,KFFAT)
                  EG(1,IAT)       = QMGRD2(1,IAT) 
                  EG(2,IAT)       = QMGRD2(2,IAT)
                  EG(3,IAT)       = QMGRD2(3,IAT)
                  FFGRD2(1,KFFAT) = QMGRD2(1,IAT)
                  FFGRD2(2,KFFAT) = QMGRD2(2,IAT)
                  FFGRD2(3,KFFAT) = QMGRD2(3,IAT)
               END IF
            ENDDO
         END IF
C        
C        - EXPAND EG(3,*) TO INCLUDE MM ATOMS -
         IAT = NATSV
         DO IFFAT = 1, NFFAT
            IF(LISTQM(IFFAT).EQ.0)THEN
               IAT = IAT + 1
               EG(1,IAT)     = FFGRD2(1,IFFAT)
               EG(2,IAT)     = FFGRD2(2,IFFAT)
               EG(3,IAT)     = FFGRD2(3,IFFAT)
            END IF
         ENDDO
C
C        - CALCULATE PROPERTIES -
         CALL OPTPROP(ISTEP,1)
         CALL DCOPY(3*NATTOT,C,1,XX,1)
         STPT=.FALSE.
         CALL DISPLC(CVGED,CRDOLD,CRDNEW,NCVAL,NCOORD,
     *               NPUN,OUT,METHOD,ITBMAT,STPT,STSTEP,PROJCT,RUNTYP)
         IF(CVGED) GOTO 500
C
C        - CALCULATE DISPLACEMENT -
         CALL EGMOVE(OLDF,EG,DUMY,DUMY,NCVAL,0)
         CALL SYMDR(CRDNEW)
         DO IAT =1,NATTOT
            C(1,IAT)=C(1,IAT) + CRDNEW(IAT*3-2)
            C(2,IAT)=C(2,IAT) + CRDNEW(IAT*3-1)
            C(3,IAT)=C(3,IAT) + CRDNEW(IAT*3)
         ENDDO
         CALL DAWRIT(IDAF,IODA,C,NATSV*3,1,0)
C
C        - COPY SOME C(3,*) TO BE CORD(3,*) -
         IAT = NATSV 
         DO 200 IFFAT =1,NFFAT
            IF(IFFAT.LE.NATPDB.AND.ISTEP.LT.NFIXPDB) GOTO 200
            IF(LISTQM(IFFAT).EQ.0)THEN
               IAT=IAT+1
               CORD(1,IFFAT) = C(1,IAT)
               CORD(2,IFFAT) = C(2,IAT)
               CORD(3,IFFAT) = C(3,IAT)
            ELSE IF(LISTQM(IFFAT).GT.0)THEN
               CORD(1,IFFAT) = C(1,LISTQM(IFFAT))
               CORD(2,IFFAT) = C(2,LISTQM(IFFAT))
               CORD(3,IFFAT) = C(3,LISTQM(IFFAT))
            END IF
 200     CONTINUE
      END DO
C
C     -- NOT LOCATED --
C
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION FAILED. ',
     *              'PLEASE RESTART THE JOB USING THE LAST GEOMETRY.'
         WRITE(IW,*)' '
      END IF
      RETURN
C
C     -- LOCATED --
C
 500  CONTINUE
      IF(MASWRK) THEN
         WRITE(IW,*)' '
         WRITE(IW,*)'QUANPOL OPTIMIZATION SUCCESSFULLY COMPLETED.'
         WRITE(IW,*)' '
      END IF
C
 1000 FORMAT(1X,A10,1X,F5.1,1X,F19.13,1X,F19.13,1X,F19.13)
C
      RETURN
      END
C*MODULE QUANPO  *DECK OPTPROP
      SUBROUTINE OPTPROP(ISTEP,ICONV)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (TOKCAL=627.509469D+00)
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (FOURTHIRD=4.0D+00/3.0D+00)
      PARAMETER (MXATM=2000, MXRT=100)
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,TRIPLET,SG1T,JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,NONEQR,
     *                ITDPRP,TAMMD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     HUI LI, APR 2011, LINCOLN
C
      VOL   = MIN(XBOX*YBOX*ZBOX, FOURTHIRD*PI*SPHRAD**3)
C
      IF(NAT.LE.0) THEN
         ENPOT = EN12 + EN123 + EN123R4 + EN234W1 + EN123B4 + ENCHAR
     *         + ENPOL  + ENRXN  + ENRXNPOL+ENRXNR + ENLJR + ENLJD
     *         + ENCMAP
         ENTOT = ENPOT
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEPS.OR.
     *      ICONV.EQ.1)) THEN
            WRITE(IW,*)' '
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')'OPT STEP',ISTEP
            WRITE(IW,9000)'BOND STRETCH     ENERGY =', EN12*TOKCAL
            WRITE(IW,9000)'BOND ANGLE BEND  ENERGY =', EN123*TOKCAL
            WRITE(IW,9000)'DIHEDRAL ROT     ENERGY =', EN123R4*TOKCAL
            WRITE(IW,9000)'DIHEDRAL BEND    ENERGY =', EN123B4*TOKCAL
            WRITE(IW,9000)'CMAP             ENERGY =', ENCMAP*TOKCAL
            WRITE(IW,9000)'WAGGING          ENERGY =', EN234W1*TOKCAL
            WRITE(IW,9000)'LJ REPULSION     ENERGY =', ENLJR*TOKCAL
            WRITE(IW,9000)'LJ DISPERSION    ENERGY =', ENLJD*TOKCAL
            WRITE(IW,9000)'CHARGE           ENERGY =', ENCHAR*TOKCAL
            WRITE(IW,9000)'POL              ENERGY =', ENPOL*TOKCAL
            WRITE(IW,9000)'CHARGE RXNFLD    ENERGY =', ENRXN*TOKCAL
            WRITE(IW,9000)'POL RXNFLD       ENERGY =', ENRXNPOL*TOKCAL
            WRITE(IW,9000)'SPHERE           ENERGY =', ENRXNR*TOKCAL
            WRITE(IW,9000)'POTENTIAL        ENERGY =', ENPOT*TOKCAL
            WRITE(IW,9000)'TOTAL            ENERGY =', ENTOT*TOKCAL
            IF(VOL.LE.1.0D+24)
     *      WRITE(IW,9003)'VOLUME                  =', VOL*TOANGS**3
            IF(VOL.GT.1.0D+24)
     *      WRITE(IW,9004)'VOLUME                  ='
            WRITE(IW,*)' '
         END IF
C
      ELSE IF(NAT.GT.0.AND.NFFAT.GT.0) THEN
         ENPOT = ETOT
         IF(MPLEVL.EQ.2) ENPOT = EMP2
         IF(TDDFTYP.NE.RNONE) ENPOT = ESTATE(NTHST)
         ENTOT = ENPOT
         IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEPS.OR.
     *      ICONV.EQ.1)) THEN
            WRITE(IW,*)' '
            WRITE(IW,'(1X,A,I10,10X,A,F19.2,A)')'OPT STEP',ISTEP
            WRITE(IW,9000)'BOND STRETCH     ENERGY =', EN12*TOKCAL
            WRITE(IW,9000)'BOND ANGLE BEND  ENERGY =', EN123*TOKCAL
            WRITE(IW,9000)'DIHEDRAL ROT     ENERGY =', EN123R4*TOKCAL
            WRITE(IW,9000)'DIHEDRAL BEND    ENERGY =', EN123B4*TOKCAL
            WRITE(IW,9000)'CMAP             ENERGY =', ENCMAP*TOKCAL
            WRITE(IW,9000)'WAGGING          ENERGY =', EN234W1*TOKCAL
            WRITE(IW,9000)'LJ REPULSION     ENERGY =', ENLJR*TOKCAL
            WRITE(IW,9000)'LJ DISPERSION    ENERGY =', ENLJD*TOKCAL
            WRITE(IW,9000)'CHARGE           ENERGY =', ENCHAR*TOKCAL
            WRITE(IW,9000)'POL              ENERGY =', ENPOL*TOKCAL
            WRITE(IW,9000)'QM+CHARG RXNFLD  ENERGY =', ENRXN*TOKCAL
            WRITE(IW,9000)'POL RXNFLD       ENERGY =', ENRXNPOL*TOKCAL
            WRITE(IW,9000)'QM CENTER        ENERGY =', ENCENT*TOKCAL
            WRITE(IW,9000)'SPHERE           ENERGY =', ENRXNR*TOKCAL
            WRITE(IW,9000)'POTENTIAL        ENERGY =', ENPOT*TOKCAL
            WRITE(IW,9000)'TOTAL            ENERGY =', ENTOT*TOKCAL
            IF(VOL.LE.1.0D+24)
     *      WRITE(IW,9003)'VOLUME                  =', VOL*TOANGS**3
            IF(VOL.GT.1.0D+24)
     *      WRITE(IW,9004)'VOLUME                  ='
            WRITE(IW,*)' '
            WRITE(IW,*)' '
         END IF      
      END IF
C
 9000 FORMAT(1X,A,F30.10,4X,'KCAL/MOL')
 9003 FORMAT(1X,A,F30.10,4X,'A**3')
 9004 FORMAT(1X,A,30X,   4X,'OPEN SYSTEM')
      RETURN
      END
C*MODULE QUANPO  *DECK SWFUNC
      SUBROUTINE SWFUNC(R2,CX,CY,CZ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00) 
C
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(R2.LE.SWRR1) THEN
         SWF   = ONE
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
      ELSE IF(R2.LE.SWRR2) THEN
         VUMY1 = R2 - SWRR1
         VUMY2 = VUMY1*VUMY1
         VUMY3 = VUMY2*VUMY1
         VUMY4 = VUMY2*VUMY2
         VUMY5 = VUMY2*VUMY3
         DSWF  = -30.0D+00*SWFDUM3*VUMY2
     *           +60.0D+00*SWFDUM4*VUMY3
     *           -30.0D+00*SWFDUM5*VUMY4
         DSWF  = 2.0D+00*DSWF
         SWF   = ONE - 10.0D+00*SWFDUM3*VUMY3
     *               + 15.0D+00*SWFDUM4*VUMY4
     *               -  6.0D+00*SWFDUM5*VUMY5
         SWFDX = DSWF*CX
         SWFDY = DSWF*CY
         SWFDZ = DSWF*CZ
      ELSE
         SWF   = ZERO
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK SWFUNCQ
      SUBROUTINE SWFUNCQ(R2,CX,CY,CZ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(R2.LE.SWRR1Q) THEN
         SWF   = ONE
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
      ELSE IF(R2.LE.SWRR2Q) THEN
         VUMY1 = R2 - SWRR1Q
         VUMY2 = VUMY1*VUMY1
         VUMY3 = VUMY2*VUMY1
         VUMY4 = VUMY2*VUMY2
         VUMY5 = VUMY2*VUMY3
         DSWF  = -30.0D+00*SWFDUM3Q*VUMY2
     *           +60.0D+00*SWFDUM4Q*VUMY3
     *           -30.0D+00*SWFDUM5Q*VUMY4
         DSWF  = 2.0D+00*DSWF
         SWF   = ONE - 10.0D+00*SWFDUM3Q*VUMY3
     *               + 15.0D+00*SWFDUM4Q*VUMY4
     *               -  6.0D+00*SWFDUM5Q*VUMY5
         SWFDX = DSWF*CX
         SWFDY = DSWF*CY
         SWFDZ = DSWF*CZ
      ELSE
         SWF   = ZERO
         SWFDX = ZERO
         SWFDY = ZERO
         SWFDZ = ZERO
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMM1EINT
      SUBROUTINE QMMM1EINT(WRK,H,L2,CORD,CHARG,
     *                     LKQMMM,NONLSTQ,
     *                     CLPR,ZLPR,NLPR,POL,
     *                     FIELD1,IDGROUP,NONLST,
     *                     XTS,YTS,ZTS,POT1,
     *                     FFGRD2,BOND0,FCBOND,
     *                     IPAIR,
     *                     ANGL0,FCANGL,KLIST,
     *                     DIHB0,FCDIHB,NLIST,
     *                     FCWAGG,MLIST,
     *                     VROT,GAMA,NNN,LLIST,
     *                     MAPLST,CMAPCO,
     *                     SIG,EPS,
     *                     SIG2,EPS2,L14J,
     *                     DETMP,LISTQM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, APR 2011, LINCOLN
C
      CALL VCLR(WRK,1,L2)
      CALL VCLR(H,1,L2)
      CALL DAWRIT(IDAF,IODA,H,L2,89,0)
      CALL QMMMCHGINT(WRK,CORD,CHARG,LKQMMM,NONLSTQ,IDGROUP)
      CALL QMMMREPINT(WRK,CORD,CLPR,ZLPR,NLPR,LKQMMM,NONLSTQ,IDGROUP)
      IF (GOPARR) CALL DDI_GSUMF(920,WRK,L2)
C
      CALL DAREAD(IDAF,IODA,H,L2,11,0)
      CALL VADD(H,1,WRK,1,H,1,L2)
      CALL DAWRIT(IDAF,IODA,H,L2,11,0)
C
      CALL DAREAD(IDAF,IODA,H,L2,89,0)
      CALL VADD(H,1,WRK,1,H,1,L2)
      CALL DAWRIT(IDAF,IODA,H,L2,89,0)
C
C     - PREPARE FOR MM POLARIZATION FIELD -
C
      CALL QMMMPOLFLDNUCMM(CORD,CHARG,POL,FIELD1,
     *                     LKQMMM,NONLST,NONLSTQ,IDGROUP)
      CALL QMMMRXNPOTNUCMM(CORD,CHARG,XTS,YTS,ZTS,POT1,IRXNFLD)
C     
C     - FORCE FIELD TERMS -
C         MM GRADIENT CAN BE DONE HERE, BUT NO DDI_GSUMF
C         QM GRADIENT MUST WAIT FOR STVDER
C
      CALL VCLR(FFGRD2,1,3*NFFAT)
      CALL VCLR(VIR   ,1,3)
      CALL E00012(CORD,FFGRD2,BOND0,FCBOND,IPAIR)
      CALL E00123(CORD,FFGRD2,ANGL0,FCANGL,KLIST)
      CALL E123B4(CORD,FFGRD2,DIHB0,FCDIHB,NLIST)
      CALL E234W1(CORD,FFGRD2,      FCWAGG,MLIST)
      CALL E123R4(CORD,FFGRD2,VROT,GAMA,NNN,LLIST)
      CALL ECMAP (CORD,FFGRD2,MAPLST,CMAPCO)
      CALL ELJ126(CORD,FFGRD2,SIG,EPS,SIG2,EPS2,L14J,NONLST,
     *            IDGROUP)
      CALL ESPHER(CORD,FFGRD2)
      CALL ECHARG(CORD,FFGRD2,CHARG,NONLST,IDGROUP)
      CALL QMMMCHGNUC(CORD,FFGRD2,DETMP,CHARG,LKQMMM,NONLSTQ,
     *                IDGROUP)
      CALL ESPHQM(DETMP,LISTQM)
      IF(GOPARR) THEN
         CALL DDI_GSUMF(2410,EN12   ,1)
         CALL DDI_GSUMF(2411,EN123  ,1)
         CALL DDI_GSUMF(2412,EN123R4,1)
         CALL DDI_GSUMF(2413,EN123B4,1)
         CALL DDI_GSUMF(2414,EN234W1,1)
         CALL DDI_GSUMF(2415,ENCHAR,1)
         CALL DDI_GSUMF(2416,ENLJR ,1)
         CALL DDI_GSUMF(2417,ENLJD ,1)
C        CALL DDI_GSUMF(2418,VIR   ,3)        ! NOT HERE
C        CALL DDI_GSUMF(2419,FFGRD2,3*NFFAT)  ! NOT HERE
         CALL DDI_GSUMF(2420,ENUCCH,1)
         CALL DDI_GSUMF(2421,ENRXN ,1)
         CALL DDI_GSUMF(2422,ENRXNR,1)
         CALL DDI_GSUMF(2423,ENCENT,1)
         CALL DDI_GSUMF(2424,ENCMAP,1)
      END IF
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMGRD
      SUBROUTINE QMMMGRD(DTOT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL TRIPLET,SG1T,TAMMD
C
      PARAMETER (MXATM=2000)
C
      DIMENSION DTOT(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FMCOM / X(1)
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,TRIPLET,SG1T,JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,NONEQR,
     *                ITDPRP,TAMMD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA CHECK/8HCHECK   /
      DATA RHF,UHF,ROHF/8HRHF     ,8HUHF     ,8HROHF    /
      DATA RNONE/8HNONE    /
C
C     HUI LI, DEJUN SI, MAR 2011, LINCOLN
C
C     ----- GRADIENT FOR QMMM RUNS -----
C           NOTE: FOR MP2,   DTOT = DHF  + P(2)
C                 FOR TDDFT, DTOT = DDFT + DTA
C
      L1 = NUM
      L2 = (NUM*NUM+NUM)/2
      L3 = NUM*NUM
      CALL VALFM(LOADFM)
      LCH    = LOADFM   + 1
      LCH2   = LCH      + 1200*10  ! GIVE 10 TIMES TO OVER KILL
      LCH3   = LCH2     + 300*10
      LDHFA  = LCH3     + 300*10
      LDHFB  = LDHFA    + L2
      LDXY   = LDHFB    + L2
      LDTEMP = LDXY     + L2
      LAST   = LDTEMP   + L3
      NEED   = LAST     - LOADFM -1
      CALL GETFM(NEED)
C     - GET -DHF-
      IF(MPLEVL.EQ.2) THEN
         IF(SCFTYP.EQ.RHF .OR. SCFTYP.EQ.ROHF) THEN
            CALL DAREAD(IDAF,IODA,X(LDHFA),L2,308,0)
         ELSE IF (SCFTYP.EQ.UHF) THEN
            CALL DAREAD(IDAF,IODA,X(LDHFA),L2,418,0)
            CALL DAREAD(IDAF,IODA,X(LDHFB),L2,428,0)
            CALL VADD(X(LDHFA),1,X(LDHFB),1,X(LDHFA),1,L2)
         END IF
      END IF
      IF(TDDFTYP.NE.RNONE) THEN
         IF(SCFTYP.EQ.RHF) THEN
            CALL DAREAD(IDAF,IODA,X(LDHFA),L2,308,0)
            CALL DAREAD(IDAF,IODA,X(LDTEMP),L3,IRECTD+2,0)
            CALL VCLR(X(LDXY),1,L2)
            CALL TDPCMDEN(X(LDXY),X(LDTEMP),L1)
            CALL DSCAL(L2,2.0D+00,X(LDXY),1)
         END IF
      END IF
C
      IF(EXETYP.EQ.CHECK) GO TO 100
C
C     ----- GRADIENT WITH RESPECT TO QM COORDINATES -----
C           FORCES ON QM ELECTRONS BY MM CHARGE, REP, DIP
C           FORCES ON QM NUCLEI BY MM CHARGE (ALREADY IN DETMP)
C
      CALL QMMMCHGFQM(DTOT,X(LFFCORD),X(LFFCHARG),
     *                X(LFFLKQMMM),X(LFFNONLSTQ),X(LFFIDGROUP))
      CALL QMMMREPFQM(DTOT,X(LFFCORD),X(LFFCLPR),
     *                X(LFFZLPR),X(LFFNLPR),X(LFFLKQMMM),X(LFFNONLSTQ),
     *                X(LFFIDGROUP))
      CALL QMMMPOLFQM(DTOT,X(LFFDIP),X(LFFCORD),X(LFFNONLSTQ),
     *                X(LFFLKQMMM),X(LFFIDGROUP))
C
      IF(IRXNFLD.GE.60 .AND. RXNRAD.LT.1.0D+30) THEN
         CALL VADD(X(LFFQRXN2),1,X(LFFQRXN1),1,X(LFFQRXN1),1,IRXNFLD)
         CALL QMMMRXNFQM(DTOT,X(LFFQRXN1),IRXNFLD)
         CALL VSUB(X(LFFQRXN2),1,X(LFFQRXN1),1,X(LFFQRXN1),1,IRXNFLD)
      END IF
C
      IF(MPLEVL.EQ.2) THEN
         CALL QMMMPOLFQM(X(LDHFA),X(LFFDIPMP),X(LFFCORD),X(LFFNONLSTQ),
     *                   X(LFFLKQMMM),X(LFFIDGROUP))
      END IF
C
      IF(MPLEVL.EQ.2 .AND. IRXNFLD.GE.60 .AND. RXNRAD.LT.1.0D+30) THEN
         CALL QMMMRXNFQM(X(LDHFA),X(LFFQRXNMP),IRXNFLD)
      ENDIF
C
      IF(TDDFTYP.NE.RNONE) THEN
         CALL QMMMPOLFQM(X(LDHFA),X(LFFDIPTA),X(LFFCORD),X(LFFNONLSTQ),
     *                   X(LFFLKQMMM),X(LFFIDGROUP))
C        -- LDXY HAS BEEN SCALED BY 2.0 --
         CALL QMMMPOLFQM(X(LDXY),X(LFFDIPXY),X(LFFCORD),X(LFFNONLSTQ),
     *                   X(LFFLKQMMM),X(LFFIDGROUP))
      END IF
C
      IF(TDDFTYP.NE.RNONE.AND.IRXNFLD.GE.60.AND.RXNRAD.LT.1.0D+30)THEN
         CALL QMMMRXNFQM(X(LDHFA),X(LFFQRXNTA),IRXNFLD)
C        -- LDXY HAS BEEN SCALED BY 2.0 --
         CALL QMMMRXNFQM(X(LDXY), X(LFFQRXNXY),IRXNFLD)
      END IF
C
      CALL VADD(X(LFFDETMP),1,DE,1,DE,1,3*NAT)
C
C     ----- GRADIENT WITH RESPECT TO MM COORDINATES -----
C           FORCES ON MM ATOMS(CHARGE, REP, DIP) BY QM ELECTRONS
C           SOME FORCES ON MM ATOMS HAVE BEEN DONE IN ROUTINE ONEEI
C
      CALL QMMMCHGFMM(DTOT,X(LCH),X(LFFCORD),X(LFFCHARG),
     *                X(LFFFFGRD2),X(LFFLKQMMM),X(LFFNONLSTQ),
     *                X(LFFIDGROUP))
      CALL QMMMREPFMM(DTOT,X(LCH),X(LFFCORD),X(LFFCLPR),
     *                X(LFFZLPR),X(LFFNLPR),
     *                X(LFFFFGRD2),X(LFFLKQMMM),X(LFFNONLSTQ),
     *                X(LFFIDGROUP))
      CALL QMMMPOLFMM(DTOT,X(LDHFA),X(LDXY),X(LCH),X(LCH2),X(LCH3),
     *                X(LFFCORD),X(LFFFFGRD2),X(LFFLKQMMM),
     *                X(LFFNONLSTQ),X(LFFIDGROUP))
C
C     ----- FORCE BETWEEN MM POL AND QM NUC
C                 BETWEEN MM POL AND MM CHARGE
C                 BETWEEN MM POL AND MM POL
      IF(MPLEVL.EQ.2)
     *   CALL VADD(X(LFFDIPMP),1,X(LFFDIP),1,X(LFFDIP),1,3*NFFAT)
      IF(TDDFTYP.NE.RNONE)
     *   CALL VADD(X(LFFDIPTA),1,X(LFFDIP),1,X(LFFDIP),1,3*NFFAT)
      CALL QMMMPOLFMMNUCMM(X(LFFCORD),X(LFFFFGRD2),X(LFFCHARG),
     *                     X(LFFPOL),X(LFFDIP),
     *                     X(LFFLKQMMM),
     *                     X(LFFNONLST),X(LFFNONLSTQ),X(LFFIDGROUP))
C
      IF(MPLEVL.EQ.2)
     *   CALL VSUB(X(LFFDIPMP),1,X(LFFDIP),1,X(LFFDIP),1,3*NFFAT)
      IF(TDDFTYP.NE.RNONE)
     *   CALL VSUB(X(LFFDIPTA),1,X(LFFDIP),1,X(LFFDIP),1,3*NFFAT)
      IF(IRXNFLD.GE.60 .AND. RXNRAD.LT.1.0D+30) THEN
         CALL VADD(X(LFFQRXN2),1,X(LFFQRXN1),1,X(LFFQRXN1),1,IRXNFLD)
         IF(MPLEVL.EQ.2) THEN 
            CALL VADD(X(LFFQRXNMP),1,X(LFFQRXN1),1,X(LFFQRXN1),
     *                1,IRXNFLD)
C    
            CALL QMMMRXNFMMNUCMM(X(LFFCORD),X(LFFFFGRD2),X(LFFCHARG),
     *                           X(LFFDIP),X(LFFQRXN1),IRXNFLD)
            CALL VSUB(X(LFFQRXNMP),1,X(LFFQRXN1),1,X(LFFQRXN1),
     *                1,IRXNFLD)
C     
            CALL QMMMRXNDIPMP2(X(LFFCORD),X(LFFFFGRD2),
     *                         X(LFFDIPMP),X(LFFQRXN1),IRXNFLD)
C     
         ELSE IF(TDDFTYP.NE.RNONE) THEN 
            CALL VADD(X(LFFQRXNTA),1,X(LFFQRXN1),1,X(LFFQRXN1),
     *                1,IRXNFLD)
C    
            CALL QMMMRXNFMMNUCMM(X(LFFCORD),X(LFFFFGRD2),X(LFFCHARG),
     *                           X(LFFDIP),X(LFFQRXN1),IRXNFLD)
C    
            CALL VSUB(X(LFFQRXNTA),1,X(LFFQRXN1),1,X(LFFQRXN1),
     *                1,IRXNFLD)
C
            CALL QMMMRXNDIPMP2(X(LFFCORD),X(LFFFFGRD2),
     *                         X(LFFDIPTA),X(LFFQRXN1),IRXNFLD)
            CALL QMMMRXNDIPMP2(X(LFFCORD),X(LFFFFGRD2),
     *                         X(LFFDIPXY),X(LFFQRXNXY),IRXNFLD)
            CALL QMMMRXNDIPMP2(X(LFFCORD),X(LFFFFGRD2),
     *                         X(LFFDIPXY),X(LFFQRXNXY),IRXNFLD)
         ELSE
            CALL QMMMRXNFMMNUCMM(X(LFFCORD),X(LFFFFGRD2),X(LFFCHARG),
     *                           X(LFFDIP),X(LFFQRXN1),IRXNFLD)
         END IF
         CALL VSUB(X(LFFQRXN2),1,X(LFFQRXN1),1,X(LFFQRXN1),1,IRXNFLD)
      END IF
C
      IF(MPLEVL.EQ.2) THEN
         CALL QMMMPOLFMMPOL(X(LFFCORD),X(LFFFFGRD2),X(LFFPOL),
     *                      X(LFFDIPMP),
     *                      -1.0D+00,X(LFFNONLST),X(LFFIDGROUP))
      END IF
      IF(TDDFTYP.NE.RNONE) THEN
         CALL QMMMPOLFMMPOL(X(LFFCORD),X(LFFFFGRD2),X(LFFPOL),
     *                      X(LFFDIPTA),
     *                      -1.0D+00,X(LFFNONLST),X(LFFIDGROUP))
         CALL QMMMPOLFMMPOL(X(LFFCORD),X(LFFFFGRD2),X(LFFPOL),
     *                      X(LFFDIPXY),
     *                      2.0D+00,X(LFFNONLST),X(LFFIDGROUP))
      END IF
C
C     ----- GLOBAL SUM OF FORCES ON MM ATOMS ----
C           -VIR- AND -FFGRD2- WERE ZEROED IN ONEEI
C           QM FORCES ARE IN -DE-, TO BE SUMMED IN STVDER
      CALL DDI_GSUMF(2418,VIR   ,3)
      CALL DDI_GSUMF(2419,X(LFFFFGRD2),3*NFFAT)
C
  100 CONTINUE
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMCHGINT
      SUBROUTINE QMMMCHGINT(QQ,CORD,CHARG,LKQMMM,NONLSTQ,IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM,DOUBLE
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION QQ(*),CHARG(*),CORD(3,*),LKQMMM(100,*),NONLSTQ(*),
     *          IDGROUP(*)
C
      DIMENSION DIJ(225),XIN(125),YIN(125),ZIN(125),
     *          IX(35),IY(35),IZ(35),JX(35),JY(35),JZ(35),
     *          IJX(225),IJY(225),IJZ(225)
      DIMENSION CHCINT(225)
      DIMENSION FIJ(225)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /SYMIND/ TOL,II,JJ,LIT,LJT,MINI,MINJ,MAXI,MAXJ,IANDJ
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00,
     *           PI212=1.1283791670955D+00, SQRT3=1.73205080756888D+00,
     *           SQRT5=2.23606797749979D+00, SQRT7=2.64575131106459D+00,
     *           RLN10=2.30258D+00)
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     *          3, 0, 0, 2, 2, 1, 0, 1, 0, 1,
     *          4, 0, 0, 3, 3, 1, 0, 1, 0, 2,
     *          2, 0, 2, 1, 1/
      DATA IX / 1, 6, 1, 1,11, 1, 1, 6, 6, 1,
     *         16, 1, 1,11,11, 6, 1, 6, 1, 6,
     *         21, 1, 1,16,16, 6, 1, 6, 1,11,
     *         11, 1,11, 6, 6/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     *          0, 3, 0, 1, 0, 2, 2, 0, 1, 1,
     *          0, 4, 0, 1, 0, 3, 3, 0, 1, 2,
     *          0, 2, 1, 2, 1/
      DATA IY / 1, 1, 6, 1, 1,11, 1, 6, 1, 6,
     *          1,16, 1, 6, 1,11,11, 1, 6, 6,
     *          1,21, 1, 6, 1,16,16, 1, 6,11,
     *          1,11, 6,11, 6/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     *          0, 0, 3, 0, 1, 0, 1, 2, 2, 1,
     *          0, 0, 4, 0, 1, 0, 1, 3, 3, 0,
     *          2, 2, 1, 1, 2/
      DATA IZ / 1, 1, 1, 6, 1, 1,11, 1, 6, 6,
     *          1, 1,16, 1, 6, 1, 6,11,11, 6,
     *          1, 1,21, 1, 6, 1, 6,16,16, 1,
     *         11,11, 6, 6,11/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     CALCULATE MM CHARGE CONTRIBUTION TO QM 1-E INTEGRALS
C
      IF(IDOCHG.EQ.0) RETURN
C
      IPCOUNT = ME - 1
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
C       HERE (AND SIMILAR PLACES) INTENTIONALLY DEACTIVATES SOME LOOPS,
C       WHILE ALLOWING THEM TO REMAIN PRESENT FOR FUTURE USE.
      IIITOP = 0
C
      L2 = (NUM*NUM+NUM)/2
      CALL VCLR(QQ,1,L2)
C
C     -- ISHELL
C
      DO 720 II = 1,NSHELL
         I = KATOM(II)
         IAT= KATOM(II)
         XI = C(1,I)
         YI = C(2,I)
         ZI = C(3,I)
         I1 = KSTART(II)
         I2 = I1+KNG(II)-1
         LIT = KTYPE(II)
         MINI = KMIN(II)
         MAXI = KMAX(II)
         LOCI = KLOC(II)-MINI
C
C        -- JSHELL
C
         DO 700 JJ = 1,II
            IF (GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 690
            END IF
            J = KATOM(JJ)
            JAT=KATOM(JJ)
            XJ = C(1,J)
            YJ = C(2,J)
            ZJ = C(3,J)
            J1 = KSTART(JJ)
            J2 = J1+KNG(JJ)-1
            LJT = KTYPE(JJ)
            MINJ = KMIN(JJ)
            MAXJ = KMAX(JJ)
            LOCJ = KLOC(JJ)-MINJ
            NROOTS = (LIT+LJT-2)/2+1
            RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
            IANDJ = II .EQ. JJ
C
C           -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
            IJ = 0
            MAX = MAXJ
            DO 160 I = MINI,MAXI
               NX = IX(I)
               NY = IY(I)
               NZ = IZ(I)
               IF (IANDJ) MAX = I
               DO 140 J = MINJ,MAX
                  IJ = IJ+1
                  IJX(IJ) = NX+JX(J)
                  IJY(IJ) = NY+JY(J)
                  IJZ(IJ) = NZ+JZ(J)
  140          CONTINUE
  160       CONTINUE
            DO 180 I = 1,IJ
               CHCINT(I) = ZERO
  180       CONTINUE
C
C           -- I PRIMITIVE
C
            JGMAX = J2
            DO 520 IG = I1,I2
               AI = EX(IG)
               ARRI = AI*RR
               AXI = AI*XI
               AYI = AI*YI
               AZI = AI*ZI
               CSI = CS(IG)
               CPI = CP(IG)
               CDI = CD(IG)
               CFI = CF(IG)
               CGI = CG(IG)
C
C              -- J PRIMITIVE
C
               IF (IANDJ) JGMAX = IG
               DO 500 JG = J1,JGMAX
                  AJ = EX(JG)
                  AA = AI+AJ
                  AA1 = ONE/AA
                  DUM = AJ*ARRI*AA1
                  IF (DUM .GT. TOL) GO TO 500
                  FAC = EXP(-DUM)
                  CSJ = CS(JG)
                  CPJ = CP(JG)
                  CDJ = CD(JG)
                  CFJ = CF(JG)
                  CGJ = CG(JG)
                  AX = (AXI+AJ*XJ)*AA1
                  AY = (AYI+AJ*YJ)*AA1
                  AZ = (AZI+AJ*ZJ)*AA1
C
C                 -- DENSITY FACTOR
C
                  DOUBLE=IANDJ.AND.IG.NE.JG
                  MAX = MAXJ
                  NN = 0
                  DUM1 = ZERO
                  DUM2 = ZERO
                  DO 220 I = MINI,MAXI
                     IF (I.EQ.1) DUM1=CSI*FAC
                     IF (I.EQ.2) DUM1=CPI*FAC
                     IF (I.EQ.5) DUM1=CDI*FAC
                     IF ((I.EQ.8).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.11) DUM1=CFI*FAC
                     IF ((I.EQ.14).AND.NORM) DUM1=DUM1*SQRT5
                     IF ((I.EQ.20).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.21) DUM1=CGI*FAC
                     IF ((I.EQ.24).AND.NORM) DUM1=DUM1*SQRT7
                     IF ((I.EQ.30).AND.NORM) DUM1=DUM1*SQRT5/SQRT3
                     IF ((I.EQ.33).AND.NORM) DUM1=DUM1*SQRT3
                     IF (IANDJ) MAX = I
                     DO 200 J = MINJ,MAX
                        IF (J.EQ.1) THEN
                           DUM2=DUM1*CSJ
                           IF (DOUBLE) THEN
                              IF (I.LE.1) THEN
                                 DUM2=DUM2+DUM2
                              ELSE
                                 DUM2=DUM2+CSI*CPJ*FAC
                              END IF
                           END IF
                        ELSE IF (J.EQ.2) THEN
                           DUM2=DUM1*CPJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF (J.EQ.5) THEN
                           DUM2=DUM1*CDJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.8).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.11) THEN
                           DUM2=DUM1*CFJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.14).AND.NORM) THEN
                           DUM2=DUM2*SQRT5
                        ELSE IF ((J.EQ.20).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.21) THEN
                           DUM2=DUM1*CGJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.24).AND.NORM) THEN
                           DUM2=DUM2*SQRT7
                        ELSE IF ((J.EQ.30).AND.NORM) THEN
                           DUM2=DUM2*SQRT5/SQRT3
                        ELSE IF ((J.EQ.33).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        END IF
                        NN = NN+1
                        DIJ(NN) = DUM2
  200                CONTINUE
  220             CONTINUE
C
C                 -- MM POINT-CHARGE INTEGRALS.
C
                  DUM = PI212*AA1
                  DO 400 I=1,IJ
                     FIJ(I) = DIJ(I)*DUM
  400             CONTINUE
                  AAX = AA*AX
                  AAY = AA*AY
                  AAZ = AA*AZ
C
                  DO 495 IIQ = 1, NTODOQ
                     IFFAT = NONLSTQ(IIQ)
C
C                    - SKIP MM THAT FORM BONDS/ANGLES TO IAT OR JAT
                     DO III = 1, IIITOP
                        DO JJJ = 1, 99, 2
                           KK1 = LKQMMM(JJJ  ,III)
                           KK2 = LKQMMM(JJJ+1,III)
                           IF(IAT.EQ.KK1.AND.IFFAT.EQ.KK2) GOTO 495
                           IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2) GOTO 495
                        ENDDO
                     ENDDO
C
                     CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
                     CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
                     CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
                     PBCX  = XBOX*ANINT(CXGRP/XBOX)
                     PBCY  = YBOX*ANINT(CYGRP/YBOX)
                     PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
                     CXGRP = CXGRP - PBCX
                     CYGRP = CYGRP - PBCY
                     CZGRP = CZGRP - PBCZ
                     R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
                     IF(R2.GT.RRCUTQ) GOTO 495
                     IF(R2.GT.SWRR2Q) GOTO 495
                     CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
C
                     CX    = CORD(1,IFFAT) - PBCX
                     CY    = CORD(2,IFFAT) - PBCY
                     CZ    = CORD(3,IFFAT) - PBCZ
                     ZNUC = -CHARG(IFFAT)
                     IF(ZNUC.EQ.ZERO) GOTO 495
                     XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                     IF (NROOTS.LE.3) CALL RT123
                     IF (NROOTS.EQ.4) CALL ROOT4
                     IF (NROOTS.EQ.5) CALL ROOT5
                     MM = 0
                     DO 477 K = 1,NROOTS
                        UU = AA*U(K)
                        WW = W(K)*ZNUC
                        TT = ONE/(AA+UU)
                        T = SQRT(TT)
                        X0 = (AAX+UU*CX)*TT
                        Y0 = (AAY+UU*CY)*TT
                        Z0 = (AAZ+UU*CZ)*TT
                        IN = -5+MM
                        DO 476 I = 1,LIT
                           IN = IN+5
                           NI = I
                           DO 475 J = 1,LJT
                              JN = IN+J
                              NJ = J
                              CALL STVINT
                              XIN(JN) = XINT
                              YIN(JN) = YINT
                              ZIN(JN) = ZINT*WW
  475                      CONTINUE
  476                   CONTINUE
                        MM = MM+25
  477                CONTINUE
                     DO 481 I = 1,IJ
                        NX = IJX(I)
                        NY = IJY(I)
                        NZ = IJZ(I)
                        DUM = ZERO
                        MM = 0
                        DO 479 K = 1,NROOTS
                           DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
                           MM = MM+25
  479                   CONTINUE
                        CHCINT(I) = CHCINT(I)+DUM*FIJ(I)*SWF
  481                CONTINUE
  495             CONTINUE
  500          CONTINUE
  520       CONTINUE
C
            MAX = MAXJ
            NN = 0
            DO 620 I = MINI,MAXI
               LI = LOCI+I
               IN = (LI*(LI-1))/2
               IF (IANDJ) MAX = I
               DO 600 J = MINJ,MAX
                  LJ = LOCJ+J
                  JN = LJ+IN
                  NN = NN+1
                  QQ(JN) = QQ(JN) + CHCINT(NN)
  600          CONTINUE
  620       CONTINUE
  690    CONTINUE
  700    CONTINUE
  720 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMCHGFMMSWF
      SUBROUTINE QMMMCHGFMMSWF(DM,CHARG,CORD,FFGRD,LKQMMM,NONLSTQ,
     *                         IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION DM(*),CHARG(*),CORD(3,*),FFGRD(3,*),
     *          LKQMMM(100,*),NONLSTQ(*),IDGROUP(*)
C
      DIMENSION DIJ(225),XIN(125),YIN(125),ZIN(125),
     *          IX(35),IY(35),IZ(35),JX(35),JY(35),JZ(35),
     *          IJX(225),IJY(225),IJZ(225)
      DIMENSION FIJ(225)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /SYMIND/ TOL,II,JJ,LIT,LJT,MINI,MINJ,MAXI,MAXJ,IANDJ
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00,
     *           PI212=1.1283791670955D+00, SQRT3=1.73205080756888D+00,
     *           SQRT5=2.23606797749979D+00, SQRT7=2.64575131106459D+00,
     *           RLN10=2.30258D+00)
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     *          3, 0, 0, 2, 2, 1, 0, 1, 0, 1,
     *          4, 0, 0, 3, 3, 1, 0, 1, 0, 2,
     *          2, 0, 2, 1, 1/
      DATA IX / 1, 6, 1, 1,11, 1, 1, 6, 6, 1,
     *         16, 1, 1,11,11, 6, 1, 6, 1, 6,
     *         21, 1, 1,16,16, 6, 1, 6, 1,11,
     *         11, 1,11, 6, 6/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     *          0, 3, 0, 1, 0, 2, 2, 0, 1, 1,
     *          0, 4, 0, 1, 0, 3, 3, 0, 1, 2,
     *          0, 2, 1, 2, 1/
      DATA IY / 1, 1, 6, 1, 1,11, 1, 6, 1, 6,
     *          1,16, 1, 6, 1,11,11, 1, 6, 6,
     *          1,21, 1, 6, 1,16,16, 1, 6,11,
     *          1,11, 6,11, 6/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     *          0, 0, 3, 0, 1, 0, 1, 2, 2, 1,
     *          0, 0, 4, 0, 1, 0, 1, 3, 3, 0,
     *          2, 2, 1, 1, 2/
      DATA IZ / 1, 1, 1, 6, 1, 1,11, 1, 6, 6,
     *          1, 1,16, 1, 6, 1, 6,11,11, 6,
     *          1, 1,21, 1, 6, 1, 6,16,16, 1,
     *         11,11, 6, 6,11/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     MM CHARGE - QM ELECTRON INTERACTION ENERGY
C     THIS ENERGY IS ONLY USED WITH SWFDX TO PRODUCE GRADIENT
C
      IF(IDOCHG.EQ.0) RETURN
C
      CALL VALFM(LOADFM)
      LSWF    = LOADFM + 1
      LAST    = LSWF   + 3*225*NFFAT
      NEED    = LAST   - LOADFM
      CALL GETFM(NEED)
      CALL VCLR(X(LSWF),1,3*225*NFFAT)
C
      IPCOUNT = ME - 1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
      IIITOP = 0  
C
C     -- ISHELL
C
      DO 720 II = 1,NSHELL
         I = KATOM(II)
         IAT=KATOM(II)
         XI = C(1,I)
         YI = C(2,I)
         ZI = C(3,I)
         I1 = KSTART(II)
         I2 = I1+KNG(II)-1
         LIT = KTYPE(II)
         MINI = KMIN(II)
         MAXI = KMAX(II)
         LOCI = KLOC(II)-MINI
C
C        -- JSHELL
C
         DO 700 JJ = 1,NSHELL
            IF (GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 700
            END IF
            J = KATOM(JJ)
            JAT=KATOM(JJ)
            XJ = C(1,J)
            YJ = C(2,J)
            ZJ = C(3,J)
            J1 = KSTART(JJ)
            J2 = J1+KNG(JJ)-1
            LJT = KTYPE(JJ)
            MINJ = KMIN(JJ)
            MAXJ = KMAX(JJ)
            LOCJ = KLOC(JJ)-MINJ
            NROOTS = (LIT+LJT-2)/2+1
            RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C           -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
            IJ = 0
            MAX = MAXJ
            DO 160 I = MINI,MAXI
               NX = IX(I)
               NY = IY(I)
               NZ = IZ(I)
               DO 140 J = MINJ,MAX
                  IJ = IJ+1
                  IJX(IJ) = NX+JX(J)
                  IJY(IJ) = NY+JY(J)
                  IJZ(IJ) = NZ+JZ(J)
  140          CONTINUE
  160       CONTINUE
            CALL VCLR(X(LSWF),1,3*225*NFFAT)
C
C           -- I PRIMITIVE
C
            DO 520 IG = I1,I2
               AI = EX(IG)
               ARRI = AI*RR
               AXI = AI*XI
               AYI = AI*YI
               AZI = AI*ZI
               CSI = CS(IG)
               CPI = CP(IG)
               CDI = CD(IG)
               CFI = CF(IG)
               CGI = CG(IG)
C
C              -- J PRIMITIVE
C
               DO 500 JG = J1,J2
                  AJ = EX(JG)
                  AA = AI+AJ
                  AA1 = ONE/AA
                  DUM = AJ*ARRI*AA1
                  IF (DUM .GT. TOL) GO TO 500
                  FAC = EXP(-DUM)
                  CSJ = CS(JG)
                  CPJ = CP(JG)
                  CDJ = CD(JG)
                  CFJ = CF(JG)
                  CGJ = CG(JG)
                  AX = (AXI+AJ*XJ)*AA1
                  AY = (AYI+AJ*YJ)*AA1
                  AZ = (AZI+AJ*ZJ)*AA1
C
C                 -- DENSITY FACTOR
C
                  MAX = MAXJ
                  NN = 0
                  DUM1 = ZERO
                  DUM2 = ZERO
                  DO 220 I = MINI,MAXI
                     IF (I.EQ.1) DUM1=CSI*FAC
                     IF (I.EQ.2) DUM1=CPI*FAC
                     IF (I.EQ.5) DUM1=CDI*FAC
                     IF ((I.EQ.8).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.11) DUM1=CFI*FAC
                     IF ((I.EQ.14).AND.NORM) DUM1=DUM1*SQRT5
                     IF ((I.EQ.20).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.21) DUM1=CGI*FAC
                     IF ((I.EQ.24).AND.NORM) DUM1=DUM1*SQRT7
                     IF ((I.EQ.30).AND.NORM) DUM1=DUM1*SQRT5/SQRT3
                     IF ((I.EQ.33).AND.NORM) DUM1=DUM1*SQRT3
                     DO 200 J = MINJ,MAX
                        IF (J.EQ.1) THEN
                           DUM2=DUM1*CSJ
                        ELSE IF (J.EQ.2) THEN
                           DUM2=DUM1*CPJ
                        ELSE IF (J.EQ.5) THEN
                           DUM2=DUM1*CDJ
                        ELSE IF ((J.EQ.8).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.11) THEN
                           DUM2=DUM1*CFJ
                        ELSE IF ((J.EQ.14).AND.NORM) THEN
                           DUM2=DUM2*SQRT5
                        ELSE IF ((J.EQ.20).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.21) THEN
                           DUM2=DUM1*CGJ
                        ELSE IF ((J.EQ.24).AND.NORM) THEN
                           DUM2=DUM2*SQRT7
                        ELSE IF ((J.EQ.30).AND.NORM) THEN
                           DUM2=DUM2*SQRT5/SQRT3
                        ELSE IF ((J.EQ.33).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        END IF
                        NN = NN+1
                        DIJ(NN) = DUM2
  200                CONTINUE
  220             CONTINUE
C
C                 -- CHARGES INTEGRALS.
C
                  DUM = PI212*AA1
                  DO 400 I=1,IJ
                     FIJ(I) = DIJ(I)*DUM
  400             CONTINUE
                  AAX = AA*AX
                  AAY = AA*AY
                  AAZ = AA*AZ
C
                  DO 495 IIQ = 1, NTODOQ
                     IFFAT = NONLSTQ(IIQ)
C
C                    - SKIP MM THAT FORM BONDS/ANGLES TO IAT OR JAT
                     DO III = 1, IIITOP
                        DO JJJ = 1, 99, 2
                           KK1 = LKQMMM(JJJ  ,III)
                           KK2 = LKQMMM(JJJ+1,III)
                           IF(IAT.EQ.KK1.AND.IFFAT.EQ.KK2)GOTO 495
                           IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2)GOTO 495
                        ENDDO
                     ENDDO
C
                     CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
                     CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
                     CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
                     PBCX  = XBOX*ANINT(CXGRP/XBOX)
                     PBCY  = YBOX*ANINT(CYGRP/YBOX)
                     PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
                     CXGRP = CXGRP - PBCX
                     CYGRP = CYGRP - PBCY
                     CZGRP = CZGRP - PBCZ
                     R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
                     IF(R2.GT.RRCUTQ) GOTO 495
                     IF(R2.GT.SWRR2Q) GOTO 495
                     CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
                     CX    = CORD(1,IFFAT) - PBCX
                     CY    = CORD(2,IFFAT) - PBCY
                     CZ    = CORD(3,IFFAT) - PBCZ
                     ZNUC = -CHARG(IFFAT)
                     XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                     IF (NROOTS.LE.3) CALL RT123
                     IF (NROOTS.EQ.4) CALL ROOT4
                     IF (NROOTS.EQ.5) CALL ROOT5
                     MM = 0
                     DO 477 K = 1,NROOTS
                        UU = AA*U(K)
                        WW = W(K)*ZNUC
                        TT = ONE/(AA+UU)
                        T = SQRT(TT)
                        X0 = (AAX+UU*CX)*TT
                        Y0 = (AAY+UU*CY)*TT
                        Z0 = (AAZ+UU*CZ)*TT
                        IN = -5+MM
                        DO 476 I = 1,LIT
                           IN = IN+5
                           NI = I
                           DO 475 J = 1,LJT
                              JN = IN+J
                              NJ = J
                              CALL STVINT
                              XIN(JN) = XINT
                              YIN(JN) = YINT
                              ZIN(JN) = ZINT*WW
  475                      CONTINUE
  476                   CONTINUE
                        MM = MM+25
  477                CONTINUE
                     DO 481 I = 1,IJ
                        NX = IJX(I)
                        NY = IJY(I)
                        NZ = IJZ(I)
                        DUM = ZERO
                        MM = 0
                        DO 479 K = 1,NROOTS
                           DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
                           MM = MM+25
  479                   CONTINUE
                        DUMFIJ = DUM*FIJ(I)
                        X(LSWF+(IFFAT-1)*3*225+(I-1)*3  )=
     *                  X(LSWF+(IFFAT-1)*3*225+(I-1)*3  )+DUMFIJ*SWFDX
                        X(LSWF+(IFFAT-1)*3*225+(I-1)*3+1)=
     *                  X(LSWF+(IFFAT-1)*3*225+(I-1)*3+1)+DUMFIJ*SWFDY
                        X(LSWF+(IFFAT-1)*3*225+(I-1)*3+2)=
     *                  X(LSWF+(IFFAT-1)*3*225+(I-1)*3+2)+DUMFIJ*SWFDZ
  481                CONTINUE
  495             CONTINUE
  500          CONTINUE
  520       CONTINUE
C
C
            MAX = MAXJ
            KK = 0
            DO 620 I = MINI,MAXI
               LI = LOCI+I
               DO 600 J = MINJ,MAX
                  KK = KK + 1 
                  LJ = LOCJ+J
                  IF(LI-LJ) 920,940,940
  920             ID = LJ
                  JD = LI
                  GO TO 960
  940             ID = LI
                  JD = LJ
  960             NN = (ID*(ID-1))/2+JD
                  DUM = DM(NN)
                  DO IIQ = 1, NTODOQ
                     IFFAT = NONLSTQ(IIQ)
                     CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
                     CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
                     CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
                     PBCX  = XBOX*ANINT(CXGRP/XBOX)
                     PBCY  = YBOX*ANINT(CYGRP/YBOX)
                     PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
                     CXGRP = CXGRP - PBCX
                     CYGRP = CYGRP - PBCY
                     CZGRP = CZGRP - PBCZ
                     FFGRD(1,IDGROUP(IFFAT))=FFGRD(1,IDGROUP(IFFAT))+
     *                  DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3  )
                     FFGRD(2,IDGROUP(IFFAT))=FFGRD(2,IDGROUP(IFFAT))+
     *                  DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3+1)
                     FFGRD(3,IDGROUP(IFFAT))=FFGRD(3,IDGROUP(IFFAT))+
     *                  DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3+2)
                     VIR(1)=VIR(1)+
     *                  DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3  )*CXGRP
                     VIR(2)=VIR(2)+
     *                  DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3+1)*CYGRP
                     VIR(3)=VIR(3)+
     *                  DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3+2)*CZGRP
                  ENDDO
  600          CONTINUE
  620       CONTINUE
  700    CONTINUE
  720 CONTINUE
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMCHGFMM
      SUBROUTINE QMMMCHGFMM(DM,CHGINT,CORD,CHARG,FFGRD,LKQMMM,NONLSTQ,
     *                      IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      DIMENSION DM(*),CHGINT(*),CORD(3,*),CHARG(*),FFGRD(3,*),
     *          LKQMMM(100,*),NONLSTQ(*),IDGROUP(*)
C
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA RLN10 /2.30258D+00/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     FORCES ON MM CHARGES BY QM ELECTRONS
C
      IF(IDOCHG.EQ.0) RETURN
C
      CALL QMMMCHGFMMSWF(DM,CHARG,CORD,FFGRD,LKQMMM,NONLSTQ,
     *                   IDGROUP)
C
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
      IIITOP=0
C
      DO 100 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
      CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
      CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
      CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP/XBOX)
      PBCY  = YBOX*ANINT(CYGRP/YBOX)
      PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.RRCUTQ) GOTO 100
      IF(R2.GT.SWRR2Q) GOTO 100
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
      ZNUC = CHARG(IFFAT)
      IF(ZNUC.EQ.ZERO) GOTO 100
C
C     -- ISHELL
C
      DO 600 II = 1,NSHELL
C
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GO TO 600
      END IF
      IAT= KATOM(II)
C
C     - SKIP MM THAT FORM BONDS/ANGLES TO IAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(IAT.EQ.KK1.AND.IFFAT.EQ.KK2) GOTO 600
         ENDDO
      ENDDO
C
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     -- JSHELL
C
      DO 580 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 580
        END IF
      JAT= KATOM(JJ)
C
C     - SKIP MM THAT FORM BONDS/ANGLES TO JAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2) GOTO 580
         ENDDO
      ENDDO
C
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      CALL VCLR(CHGINT,1,3*IJ)
C
C     -- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     -- J PRIMITIVE
C
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     -- DENSITY FACTOR
C
      MAX = MAXJ
      NN = 0
      DUM1=ZERO
      DUM2=DUM1
      DO 170 I=MINI,MAXI
      GO TO (70,80,110,110,90,110,110,95,110,110,
     1       102,110,110,104,110,110,110,110,110,108),I
  70  DUM1=CSI*FAC
      GO TO 110
  80  DUM1=CPI*FAC
      GO TO 110
  90  DUM1=CDI*FAC
      GO TO 110
  95  IF(NORM) DUM1=DUM1*SQRT3
      GO TO 110
 102  DUM1=CFI*FAC
      GO TO 110
 104  DUM1 = DUM1 *SQRT5
      GO TO 110
 108  DUM1 = DUM1 * SQRT3
 110  CONTINUE
      DO 170 J=MINJ,MAX
      GO TO (125,130,160,160,140,160,160,150,160,160,
     1       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      GO TO 160
  130 DUM2=DUM1*CPJ
      GO TO 160
  140 DUM2=DUM1*CDJ
      GO TO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 160
  152 DUM2 = DUM1 * CFJ
      GO TO 160
  154 DUM2 = DUM2 *SQRT5
      GO TO 160
  156 DUM2 = DUM2 * SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
C
C     ..... HELLMANN-FEYNMAN TERM .....
C
      DUM = PI212*AA1
      DUM=DUM+DUM
      DO 380 I = 1,IJ
      FIJ(I) = DIJ(I)*DUM
  380 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      ICC=1
C
      XX   = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      IF(NROOTS.EQ.5) CALL ROOT5
      IF(NROOTS.EQ.6) CALL ROOT6
      IF(NROOTS.GE.7) THEN
         WRITE(IW,9008)
         CALL ABRT
      END IF
      MM = 0
      DO 401 K = 1,NROOTS
      UU = AA*U(K)
      WW = W(K)*ZNUC
      WW = WW*UU
      TT = ONE/(AA+UU)
      T  = SQRT(TT)
      X0 = (AAX+UU*CX)*TT
      Y0 = (AAY+UU*CY)*TT
      Z0 = (AAZ+UU*CZ)*TT
      IN = -4+MM
      DO 400 I = 1,LIT
      IN = IN+4
      NI = I
      DO 400 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL STVINT
      XIN(JN   ) = XINT
      YIN(JN   ) = YINT
      ZIN(JN   ) = ZINT*WW
      CALL POLXYZ
      XIN(JN+125) = XINT
      YIN(JN+125) = YINT
      ZIN(JN+125) = ZINT*WW
  400 CONTINUE
  401 MM = MM+16
      DO 403 I = 1,IJ
      NX    = IJX(I)
      NY    = IJY(I)
      NZ    = IJZ(I)
      DUMX  = ZERO
      DUMY  = ZERO
      DUMZ  = ZERO
      MM    = 0
      DO 402 K = 1,NROOTS
      DUMX= DUMX+XIN(NX+MM+125)*YIN(NY+MM    )*ZIN(NZ+MM    )
      DUMY= DUMY+XIN(NX+MM    )*YIN(NY+MM+125)*ZIN(NZ+MM    )
      DUMZ= DUMZ+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM+125)
  402 MM  = MM+16
      DUM = FIJ(I)*SWF
      CHGINT(ICC  )=CHGINT(ICC  )-DUM*DUMX
      CHGINT(ICC+1)=CHGINT(ICC+1)-DUM*DUMY
      CHGINT(ICC+2)=CHGINT(ICC+2)-DUM*DUMZ
      ICC=ICC+3
 403  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C
      MAX=MAXJ
      ICC=1
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      IF (LI-LJ) 920,940,940
  920 ID = LJ
      JD = LI
      GO TO 960
  940 ID = LI
      JD = LJ
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT(ICC  )
      FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT(ICC+1)
      FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT(ICC+2)
      VIR(1)        =VIR(1)         + DUM*CHGINT(ICC  )*CX
      VIR(2)        =VIR(2)         + DUM*CHGINT(ICC+1)*CY
      VIR(3)        =VIR(3)         + DUM*CHGINT(ICC+2)*CZ
      ICC=ICC+3
  550 CONTINUE
C
  580 CONTINUE
  600 CONTINUE
  100 CONTINUE
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN EFDINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMCHGFQM
      SUBROUTINE QMMMCHGFQM(DM,CORD,CHARG,LKQMMM,NONLSTQ,IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL ISKIP
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      DIMENSION DM(*),CORD(3,*),CHARG(*),LKQMMM(100,*),NONLSTQ(*),
     *          IDGROUP(*)
C
      DIMENSION ISKIP(35),INDX(70)
      DIMENSION IX(35),IY(35),IZ(35),JX(20),JY(20),JZ(20)
      DIMENSION IJG(210),IJX(210),IJY(210),IJZ(210)
      DIMENSION XIN(200),YIN(200),ZIN(200),G(210),DIJ(210)
      DIMENSION FIJ(210)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
      PARAMETER (PI212=1.1283791670955D+00)
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00)
C
      DATA CHECK/8HCHECK   /
      DATA INDX / 1, 2, 3, 4, 5, 6, 7, 8, 9,10,
     1           11,12,13,14,15,16,17,18,19,20,
     2           -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
     3           -0,-0,-0,-0,-0,
     4           -0, 1, 2, 3, 1, 2, 3, 4, 5, 6,
     5            4, 5, 6, 7, 8, 9,10,11,12,13,
     6            7, 8, 9,10,11,12,13,14,15,16,
     7           17,18,19,20,21/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5,
     2         17, 1, 1,13,13, 5, 1, 5, 1, 9,
     3          9, 1, 9, 5, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5,
     2          1,17, 1, 5, 1,13,13, 1, 5, 9,
     3          1, 9, 5, 9, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5,
     2          1, 1,17, 1, 5, 1, 5,13,13, 1,
     3          9, 9, 5, 5, 9/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     FORCES ON QM ELECTRONS BY MM CHARGES
C
      IF(IDOCHG.EQ.0) RETURN
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IF (EXETYP .EQ. CHECK) GO TO 1120
C
C     -- I SHELL
C
      DO 1060 II = 1,NSHELL
C
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GO TO 1060
      END IF
      IAT = KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)+1
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      DO 100 I=1,35
 100  ISKIP(I)=.TRUE.
      DO 260 I=MINI,MAXI
      GO TO (110,140,260,260,180,260,260,260,260,260,
     *       220,260,260,260,260,260,260,260,260,260),I
 110  DO 120 K=2,4
 120  ISKIP(K)=.FALSE.
      GO TO 260
 140  DO 160 K=5,10
 160  ISKIP(K)=.FALSE.
      ISKIP(1)=.FALSE.
      GO TO 260
 180  DO 200 K=2,4
 200  ISKIP(K)=.FALSE.
      DO 210 K=11,20
 210  ISKIP(K)=.FALSE.
      GO TO 260
 220  DO 240 K=5,10
 240  ISKIP(K)=.FALSE.
      DO 250 K=21,35
 250  ISKIP(K)=.FALSE.
 260  CONTINUE
C
C     -- J SHELL
C
      DO 1040 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 1040
        END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      N0 = 0
      IF (LIT .GE. 4) N0 = 35
      IJ = 0
      DO 340 I = 1,35
      IF (ISKIP(I)) GO TO 340
      IN = INDX(I+N0)
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 320 J = MINJ,MAXJ
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IJG(IJ) = IN+21*(J-MINJ)
  320 CONTINUE
  340 CONTINUE
      DO 360 I = 1,IJ
      N = IJG(I)
  360 G(N) = ZERO
C
C     -- I PRIMITIVE
C
      DO 840 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
      CSI = CP(IG)
      CPI = CS(IG)*DUM
      IF (LIT .EQ. 4) CPI = CD(IG)
      CDI = CP(IG)*DUM
      IF (LIT .EQ. 5) CDI = CF(IG)
      CFI = CD(IG)*DUM
      CGI = CF(IG)*DUM
C
C     -- J PRIMITIVE
C
      DO 820 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 820
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     -- DENSITY FACTOR
C
      NN = 0
      DUM1 = ZERO
      DUM2 = DUM1
      DO 600 I=1,35
      IF(ISKIP(I)) GO TO 600
      GO TO (370,380,420,420,390,420,420,420,420,420,
     *       400,420,420,420,420,420,420,420,420,420,
     *       410,420,420,420,420,420,420,420,420,420,
     *       420,420,420,420,420),I
 370  DUM1=CSI*FAC
      GO TO 420
 380  DUM1=CPI*FAC
      GO TO 420
 390  DUM1=CDI*FAC
      GO TO 420
 400  DUM1=CFI*FAC
      GO TO 420
 410  DUM1 = CGI*FAC
 420  CONTINUE
      DO 580 J=MINJ,MAXJ
      GO TO (430,440,560,560,460,560,560,480,560,560,
     *       500,560,560,520,560,560,560,560,560,540),J
  430 DUM2=DUM1*CSJ
      GO TO 560
  440 DUM2=DUM1*CPJ
      GO TO 560
  460 DUM2=DUM1*CDJ
      GO TO 560
  480 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 560
  500 DUM2 = DUM1 * CFJ
      GO TO 560
  520 DUM2 = DUM2 *SQRT5
      GO TO 560
  540 DUM2 = DUM2 * SQRT3
  560 NN=NN+1
  580 DIJ(NN)=DUM2
  600 CONTINUE
C
C     ....BASIC CHARGE TERM
C
      DUM = PI212*AA1
      DO 700 I=1,IJ
 700  FIJ(I)=DIJ(I)*DUM
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
C
      IIITOP=0
      DO 710 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
C
C     - SKIP MM THAT FORM BONDS/ANGLES TO IAT OR JAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(IAT.EQ.KK1.AND.IFFAT.EQ.KK2)GOTO 710
            IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2)GOTO 710
         ENDDO
      ENDDO
C
      CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
      CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
      CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP/XBOX)
      PBCY  = YBOX*ANINT(CYGRP/YBOX)
      PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.RRCUTQ) GOTO 710
      IF(R2.GT.SWRR2Q) GOTO 710
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
      ZNUC = -CHARG(IFFAT)
      IF(ZNUC.EQ.ZERO) GOTO 710
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3)CALL RT123
      IF(NROOTS.EQ.4)CALL ROOT4
      IF(NROOTS.EQ.5)CALL ROOT5
      MM=0
      DO 806 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)*ZNUC
      TT=ONE/(AA+UU)
      T =SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 804 I=1,LIT
      IN=IN+4
      NI=I
      DO 804 J=1,LJT
      JN=IN+J
      NJ=J
      CALL VINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
 804  CONTINUE
 806  MM=MM+20
      DO 810 I=1,IJ
      N=IJG(I)
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUM=ZERO
      MM=0
      DO 808 K=1,NROOTS
      DUM=DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
 808  MM=MM+20
 810  G(N)=G(N)+DUM*FIJ(I)*SWF
 710  CONTINUE
C
C     -- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     -- FORM INTEGRALS OVER DERIVATIVES -----
C
      NN = 0
      N = 1
      DO 900 J = MINJ,MAXJ
      IF (MINI .GT. 1) GO TO 860
      NN = NN+1
      XIN(NN) = G(N+ 1)
      YIN(NN) = G(N+ 2)
      ZIN(NN) = G(N+ 3)
      IF (MAXI .EQ. 1) GO TO 900
  860 IF (MINI .GT. 2) GO TO 880
      NN = NN+1
      XIN(NN) = (G(N+ 4)-G(N ))
      YIN(NN) = G(N+ 7)
      ZIN(NN) = G(N+ 8)
      NN = NN+1
      XIN(NN) = G(N+ 7)
      YIN(NN) = (G(N+ 5)-G(N ))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = G(N+ 9)
      ZIN(NN) = (G(N+ 6)-G(N ))
      IF (MAXI .EQ. 4) GO TO 900
  880 CONTINUE
      IF (MINI .GT. 5) GO TO 890
      NN = NN+1
      XIN(NN) = (G(N+ 3)-G(N )-G(N ))
      YIN(NN) = G(N+ 6)
      ZIN(NN) = G(N+ 7)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = (G(N+ 4)-G(N+ 1)-G(N+ 1))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+10)
      YIN(NN) = G(N+11)
      ZIN(NN) = (G(N+ 5)-G(N+ 2)-G(N+ 2))
      NN = NN+1
      DUM = ONE
      IF (NORM) DUM = SQRT3
      XIN(NN) = DUM*(G(N+ 6)-G(N+ 1))
      YIN(NN) = DUM*(G(N+ 8)-G(N ))
      ZIN(NN) = DUM* G(N+12)
      NN = NN+1
      XIN(NN) = DUM*(G(N+ 7)-G(N+ 2))
      YIN(NN) = DUM* G(N+12)
      ZIN(NN) = DUM*(G(N+10)-G(N ))
      NN = NN+1
      XIN(NN) = DUM* G(N+12)
      YIN(NN) = DUM*(G(N+ 9)-G(N+ 2))
      ZIN(NN) = DUM*(G(N+11)-G(N+ 1))
      IF(MAXI.EQ.10) GO TO 900
 890  CONTINUE
      NN=NN+1
      XIN(NN)=(G(N+ 6)-G(N   )-G(N   )-G(N   ))
      YIN(NN)= G(N+ 9)
      ZIN(NN)= G(N+10)
      NN=NN+1
      XIN(NN)= G(N+11)
      YIN(NN)=(G(N+ 7)-G(N+ 1)-G(N+ 1)-G(N+ 1))
      ZIN(NN)= G(N+12)
      NN=NN+1
      XIN(NN)= G(N+13)
      YIN(NN)= G(N+14)
      ZIN(NN)=(G(N+ 8)-G(N+ 2)-G(N+ 2)-G(N+ 2))
      NN=NN+1
      DUM=ONE
      IF(NORM) DUM=SQRT5
      XIN(NN)=DUM* (G(N+ 9)-G(N+ 3)-G(N+ 3))
      YIN(NN)=DUM* (G(N+15)-G(N  ))
      ZIN(NN)=DUM* G(N+18)
      NN=NN+1
      XIN(NN)=DUM* (G(N+10)-G(N+ 4)-G(N+ 4))
      YIN(NN)=DUM* G(N+18)
      ZIN(NN)=DUM* (G(N+16)-G(N  ))
      NN=NN+1
      XIN(NN)=DUM* (G(N+15)-G(N+ 1))
      YIN(NN)=DUM* (G(N+11)-G(N+ 3)-G(N+ 3))
      ZIN(NN)=DUM*  G(N+19)
      NN=NN+1
      XIN(NN)=DUM* G(N+19)
      YIN(NN)=DUM* (G(N+12)-G(N+ 5)-G(N+ 5))
      ZIN(NN)=DUM* (G(N+17)-G(N+ 1))
      NN=NN+1
      XIN(NN)=DUM* (G(N+16)-G(N+ 2))
      YIN(NN)=DUM*  G(N+20)
      ZIN(NN)=DUM* (G(N+13)-G(N+ 4)-G(N+ 4))
      NN=NN+1
      XIN(NN)=DUM*  G(N+20)
      YIN(NN)=DUM* (G(N+17)-G(N+ 2))
      ZIN(NN)=DUM* (G(N+14)-G(N+ 5)-G(N+ 5))
      NN=NN+1
      IF(NORM) DUM=DUM*SQRT3
      XIN(NN)=DUM* (G(N+18)-G(N+ 5))
      YIN(NN)=DUM* (G(N+19)-G(N+ 4))
      ZIN(NN)=DUM* (G(N+20)-G(N+ 3))
  900 N = N+21
C
C     -- CALCULATE CONTRIBUTION TO GRADIENT -----
C
      N = 0
      DO 980 J = MINJ,MAXJ
      JN = LOCJ+J
      DO 980 I = MINI,MAXI
      N = N+1
      IN = LOCI+I
      IF (IN-JN) 920,940,940
  920 ID = JN
      JD = IN
      GO TO 960
  940 ID = IN
      JD = JN
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      DUM = DUM+DUM
      DE(1,IAT) = DE(1,IAT)+DUM*XIN(N)
      DE(2,IAT) = DE(2,IAT)+DUM*YIN(N)
      DE(3,IAT) = DE(3,IAT)+DUM*ZIN(N)
  980 CONTINUE
 1040 CONTINUE
 1060 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
 1120 CONTINUE
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMCHGNUC
      SUBROUTINE QMMMCHGNUC(CORD,FFGRD,DETMP,CHARG,LKQMMM,NONLSTQ,
     *                      IDGROUP)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),DETMP(3,*),
     *          LKQMMM(100,*),NONLSTQ(*),IDGROUP(*)
C
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
C     MM CHARGE - QM NUC INTERACTION
C
      CALL VCLR(DETMP,1,3*MXATM)
      ENUCCH =ZERO
      IF(IDOCHG.EQ.0) RETURN
C
      IIITOP=0
      IPCOUNT = ME - 1
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         QI = CHARG(IFFAT)
         IF(QI.EQ.ZERO) GOTO 200
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
         CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
         CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
         PBCX  = XBOX*ANINT(CXGRP/XBOX)
         PBCY  = YBOX*ANINT(CYGRP/YBOX)
         PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
         CXGRP = CXGRP - PBCX
         CYGRP = CYGRP - PBCY
         CZGRP = CZGRP - PBCZ
         R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
         IF(R2.GT.RRCUTQ) GOTO 200
         IF(R2.GT.SWRR2Q) GOTO 200
         CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
         CX    = CORD(1,IFFAT) - PBCX
         CY    = CORD(2,IFFAT) - PBCY
         CZ    = CORD(3,IFFAT) - PBCZ
         DO 210 JAT=1,NAT
C
C           - SKIP MM THAT FORM BONDS/ANGLES TO JAT
            DO III = 1, IIITOP
               DO JJJ = 1, 99, 2
                  KK1 = LKQMMM(JJJ  ,III)
                  KK2 = LKQMMM(JJJ+1,III)
                  IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2)GOTO 210
               ENDDO
            ENDDO
C
            IF(ZAN(JAT).EQ.ZERO) GOTO 210
            X     = CX - C(1,JAT)
            Y     = CY - C(2,JAT)
            Z     = CZ - C(3,JAT)
            R2    = X*X+Y*Y+Z*Z
            IF(R2.LT.1.0D-10) GOTO 210
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            EPAIR = CHARG(IFFAT)*ZAN(JAT)*ONER
            ENUCCH= ENUCCH + EPAIR*SWF
            DUM   = -EPAIR*ONER2*SWF
            DEX   = DUM*X
            DEY   = DUM*Y
            DEZ   = DUM*Z
            FFGRD(1,IFFAT) = FFGRD(1,IFFAT) + DEX
            FFGRD(2,IFFAT) = FFGRD(2,IFFAT) + DEY
            FFGRD(3,IFFAT) = FFGRD(3,IFFAT) + DEZ
            FFGRD(1,IDGROUP(IFFAT))=FFGRD(1,IDGROUP(IFFAT))+EPAIR*SWFDX
            FFGRD(2,IDGROUP(IFFAT))=FFGRD(2,IDGROUP(IFFAT))+EPAIR*SWFDY
            FFGRD(3,IDGROUP(IFFAT))=FFGRD(3,IDGROUP(IFFAT))+EPAIR*SWFDZ
            DETMP(1,JAT )  = DETMP(1,JAT )  - DEX
            DETMP(2,JAT )  = DETMP(2,JAT )  - DEY
            DETMP(3,JAT )  = DETMP(3,JAT )  - DEZ
            VIR(1)         = VIR(1) + DEX*X + EPAIR*SWFDX*CXGRP
            VIR(2)         = VIR(2) + DEY*Y + EPAIR*SWFDY*CYGRP
            VIR(3)         = VIR(3) + DEZ*Z + EPAIR*SWFDZ*CZGRP
  210    CONTINUE
  200 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMREPINT
      SUBROUTINE QMMMREPINT(QQ,CORD,CLPR,ZLPR,NLPR,LKQMMM,NONLSTQ,
     *                      IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM,DOUBLE
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION QQ(*),CORD(3,*),CLPR(4,*),ZLPR(4,*),NLPR(*),
     *          LKQMMM(100,*),NONLSTQ(*),IDGROUP(*)
C
      DIMENSION RINT(100)
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION GIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA RLN10 /2.30258D+00/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     --- CHARGE-REPULSIVE POTENTIAL INTEGRALS FOR POWERS 0 AND -1 OF R.
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IIITOP=0
      IPCOUNT = ME - 1
C
C     ----- ISHELL
C
      DO 600 II = 1,NSHELL
      IAT= KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 580 JJ = 1,II
            IF (GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 570
            END IF
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ = II .EQ. JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      IF (IANDJ) MAX = I
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      DO 60 I=1,IJ
  60  RINT(I) = ZERO
C
C     ----- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI  = EX(IG)
      ARRI= AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     ----- J PRIMITIVE
C
      IF (IANDJ) JGMAX = IG
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX = MAXJ
      NN = 0
      DO 170 I=MINI,MAXI
      GO TO (70,80,110,110,90,110,110,100,110,110,
     *       102,110,110,104,110,110,110,110,110,106),I
   70 DUM1=CSI*FAC
      GO TO 110
   80 DUM1=CPI*FAC
      GO TO 110
   90 DUM1=CDI*FAC
      GO TO 110
  100 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 110
  102 DUM1=CFI*FAC
      GO TO 110
  104 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 110
  106 IF(NORM) DUM1=DUM1*SQRT3
  110 IF(IANDJ) MAX=I
      DO 170 J=MINJ,MAX
      GO TO (125,130,160,160,140,160,160,150,160,160,
     1       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      IF(.NOT.DOUBLE) GO TO 160
      IF(I.GT.1) GO TO 126
      DUM2=DUM2+DUM2
      GO TO 160
  126 DUM2=DUM2+CSI*CPJ*FAC
      GO TO 160
  130 DUM2=DUM1*CPJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 160
  140 DUM2=DUM1*CDJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 160
  152 DUM2=DUM1*CFJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 160
  154 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 160
  156 IF(NORM) DUM2=DUM2*SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 481 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
C
C     - SKIP MM POINTS THAT FORM BONDS/ANGLES TO IAT OR JAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(IAT.EQ.KK1 .AND. IFFAT.EQ.KK2) GOTO 481
            IF(JAT.EQ.KK1 .AND. IFFAT.EQ.KK2) GOTO 481
         ENDDO
      ENDDO
C
      CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
      CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
      CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP/XBOX)
      PBCY  = YBOX*ANINT(CYGRP/YBOX)
      PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.RRCUTQ) GOTO 481
      IF(R2.GT.SWRR2Q) GOTO 481
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
      PCSQ = (AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2
      DO 479 LTERM=1,4
      ALFA = ZLPR(LTERM,IFFAT)
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 479
      PREI = EXP(-AA*ALFA*PCSQ/(AA+ALFA))
      IF(NLPR(IFFAT).EQ.2) THEN
       TT = ONE/(AA+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+ALFA*CX)*TT
       Y0 = (AAY+ALFA*CY)*TT
       Z0 = (AAZ+ALFA*CZ)*TT
       IN = -4
       DO 206 I = 1,LIT
       IN = IN+4
       NI = I
       DO 206 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT*T
       YIN(JN   ) = YINT*T
       ZIN(JN   ) = ZINT*T
  206  CONTINUE
       DO 266 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       RINT(I)=RINT(I)+DIJ(I)*PREI*BETA*XIN(NX)*YIN(NY)*ZIN(NZ)*SWF
 266   CONTINUE
      ELSE
C      ONE OVER R.
       DUM = PI212/(AA+ALFA)
       DO 385 I = 1,IJ
       GIJ(I) = DIJ(I)*DUM
  385  CONTINUE
       XX=AA*AA*PCSQ/(AA+ALFA)
       IF(NROOTS .LE. 3) CALL RT123
       IF(NROOTS .EQ. 4) CALL ROOT4
       IF(NROOTS.EQ.5) CALL ROOT5
       IF(NROOTS.EQ.6) CALL ROOT6
       IF(NROOTS.GE.7) THEN
          IF (MASWRK) WRITE(IW,9008)
          CALL ABRT
       END IF
       MM = 0
       DO 425 K = 1,NROOTS
       UU = (ALFA+AA)*U(K)
       WW = W(K)
       TT = ONE/(AA+UU+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+(UU+ALFA)*CX)*TT
       Y0 = (AAY+(UU+ALFA)*CY)*TT
       Z0 = (AAZ+(UU+ALFA)*CZ)*TT
       IN = -4+MM
       DO 405 I = 1,LIT
       IN = IN+4
       NI = I
       DO 405 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT
       YIN(JN   ) = YINT
       ZIN(JN   ) = ZINT*WW
  405  CONTINUE
  425  MM = MM+16
       DO 465 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       DUM = ZERO
       MM    = 0
       DO 445 K = 1,NROOTS
       DUM= DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
  445  MM  = MM+16
       RINT(I)=RINT(I)+GIJ(I)*PREI*BETA*DUM*SWF
 465   CONTINUE
      END IF
 479  CONTINUE
 481  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C     ----- SET QQ MATRIX
C
      MAX=MAXJ
      NN=0
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      IN = (LI*(LI-1))/2
      IF(IANDJ) MAX=I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      JN=LJ+IN
      NN=NN+1
      QQ(JN)=QQ(JN) + RINT(NN)
  550 CONTINUE
  570 CONTINUE
  580 CONTINUE
  600 CONTINUE
C
      RETURN
C
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN REPINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMREPFMMSWF
      SUBROUTINE QMMMREPFMMSWF(DM,CORD,CLPR,ZLPR,NLPR,FFGRD,LKQMMM,
     *                         NONLSTQ,IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL NORM
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION DM(*),CORD(3,*),FFGRD(3,*),CLPR(4,*),ZLPR(4,*),NLPR(*),
     *          LKQMMM(100,*),NONLSTQ(*),IDGROUP(*)
C
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION GIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA RLN10 /2.30258D+00/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     ---CHARGE-REPULSIVE POTENTIAL INTEGRALS FOR POWERS 0 AND -1 OF R.
C
      CALL VALFM(LOADFM)
      LSWF    = LOADFM + 1
      LAST    = LSWF   + 3*225*NFFAT
      NEED    = LAST   - LOADFM
      CALL GETFM(NEED)
      CALL VCLR(X(LSWF),1,3*225*NFFAT)
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
C     ----- INTIALIZE PARALLEL -----
C
      IPCOUNT = ME - 1
      IIITOP=0
C
C     ----- ISHELL
C
      DO 600 II = 1,NSHELL
      IAT= KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 580 JJ = 1,NSHELL
C
C     ----- GO PARALLEL! -----
C
            IF (GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 580
            END IF
      JAT= KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      CALL VCLR(X(LSWF),1,3*225*NFFAT)
C
C     ----- I PRIMITIVE
C
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     ----- J PRIMITIVE
C
      DO 500 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      MAX = MAXJ
      NN = 0
      DO 170 I=MINI,MAXI
      GO TO (70,80,110,110,90,110,110,100,110,110,
     *       102,110,110,104,110,110,110,110,110,106),I
   70 DUM1=CSI*FAC
      GO TO 110
   80 DUM1=CPI*FAC
      GO TO 110
   90 DUM1=CDI*FAC
      GO TO 110
  100 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 110
  102 DUM1=CFI*FAC
      GO TO 110
  104 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 110
  106 IF(NORM) DUM1=DUM1*SQRT3
  110 CONTINUE
      DO 170 J=MINJ,MAX
      GO TO (125,130,160,160,140,160,160,150,160,160,
     *       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      GO TO 160
  130 DUM2=DUM1*CPJ
      GO TO 160
  140 DUM2=DUM1*CDJ
      GO TO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 160
  152 DUM2=DUM1*CFJ
      GO TO 160
  154 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 160
  156 IF(NORM) DUM2=DUM2*SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 481 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
C
C     - SKIP MM POINTS THAT FORM BONDS/ANGLES TO IAT OR JAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(IAT.EQ.KK1 .AND. IFFAT.EQ.KK2) GOTO 481
            IF(JAT.EQ.KK1 .AND. IFFAT.EQ.KK2) GOTO 481
         ENDDO
      ENDDO
C
      CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
      CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
      CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP/XBOX)
      PBCY  = YBOX*ANINT(CYGRP/YBOX)
      PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.RRCUTQ) GOTO 481
      IF(R2.GT.SWRR2Q) GOTO 481
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
      PCSQ = (AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2
      DO 479 LTERM=1,4
      ALFA = ZLPR(LTERM,IFFAT)
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 479
      PREI = EXP(-AA*ALFA*PCSQ/(AA+ALFA))
      IF(NLPR(IFFAT).EQ.2) THEN
       TT = ONE/(AA+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+ALFA*CX)*TT
       Y0 = (AAY+ALFA*CY)*TT
       Z0 = (AAZ+ALFA*CZ)*TT
       IN = -4
       DO 206 I = 1,LIT
       IN = IN+4
       NI = I
       DO 206 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT*T
       YIN(JN   ) = YINT*T
       ZIN(JN   ) = ZINT*T
  206  CONTINUE
       DO 266 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       DUMDIJ= DIJ(I)*PREI*BETA*XIN(NX)*YIN(NY)*ZIN(NZ)
C      RINT(I)=RINT(I)+DUMDIJ*SWF
       X(LSWF+(IFFAT-1)*3*225+(I-1)*3  )=
     * X(LSWF+(IFFAT-1)*3*225+(I-1)*3  )+DUMDIJ*SWFDX
       X(LSWF+(IFFAT-1)*3*225+(I-1)*3+1)=
     * X(LSWF+(IFFAT-1)*3*225+(I-1)*3+1)+DUMDIJ*SWFDY
       X(LSWF+(IFFAT-1)*3*225+(I-1)*3+2)=
     * X(LSWF+(IFFAT-1)*3*225+(I-1)*3+2)+DUMDIJ*SWFDZ
 266   CONTINUE
      ELSE
C      ONE OVER R.
       DUM = PI212/(AA+ALFA)
       DO 385 I = 1,IJ
       GIJ(I) = DIJ(I)*DUM
  385  CONTINUE
       XX=AA*AA*PCSQ/(AA+ALFA)
       IF(NROOTS .LE. 3) CALL RT123
       IF(NROOTS .EQ. 4) CALL ROOT4
       IF(NROOTS.EQ.5) CALL ROOT5
       IF(NROOTS.EQ.6) CALL ROOT6
       IF(NROOTS.GE.7) THEN
        CALL ABRT
       END IF
       MM = 0
       DO 425 K = 1,NROOTS
       UU = (ALFA+AA)*U(K)
       WW = W(K)
       TT = ONE/(AA+UU+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+(UU+ALFA)*CX)*TT
       Y0 = (AAY+(UU+ALFA)*CY)*TT
       Z0 = (AAZ+(UU+ALFA)*CZ)*TT
       IN = -4+MM
       DO 405 I = 1,LIT
       IN = IN+4
       NI = I
       DO 405 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT
       YIN(JN   ) = YINT
       ZIN(JN   ) = ZINT*WW
  405  CONTINUE
  425  MM = MM+16
       DO 465 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       DUM = ZERO
       MM    = 0
       DO 445 K = 1,NROOTS
       DUM= DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
  445  MM  = MM+16
       DUMGIJ = GIJ(I)*PREI*BETA*DUM
C      RINT(I)=RINT(I)+DUMGIJ*SWF
       X(LSWF+(IFFAT-1)*3*225+(I-1)*3  )=
     * X(LSWF+(IFFAT-1)*3*225+(I-1)*3  )+DUMGIJ*SWFDX
       X(LSWF+(IFFAT-1)*3*225+(I-1)*3+1)=
     * X(LSWF+(IFFAT-1)*3*225+(I-1)*3+1)+DUMGIJ*SWFDY
       X(LSWF+(IFFAT-1)*3*225+(I-1)*3+2)=
     * X(LSWF+(IFFAT-1)*3*225+(I-1)*3+2)+DUMGIJ*SWFDZ
 465   CONTINUE
      END IF
 479  CONTINUE
 481  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
      MAX = MAXJ     
      KK = 0            
      DO 550 I = MINI,MAXI 
         LI = LOCI+I    
         DO 560 J = MINJ,MAX
            KK = KK + 1 
            LJ = LOCJ+J 
            IF(LI-LJ) 920,940,940
  920       ID = LJ
            JD = LI
            GO TO 960
  940       ID = LI
            JD = LJ
  960       NN = (ID*(ID-1))/2+JD
            DUM = DM(NN)
            DO IIQ = 1, NTODOQ
               IFFAT = NONLSTQ(IIQ)
C
               CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
               CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
               CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
               PBCX  = XBOX*ANINT(CXGRP/XBOX)
               PBCY  = YBOX*ANINT(CYGRP/YBOX)
               PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
               CXGRP = CXGRP - PBCX
               CYGRP = CYGRP - PBCY
               CZGRP = CZGRP - PBCZ
C
               FFGRD(1,IDGROUP(IFFAT))=FFGRD(1,IDGROUP(IFFAT))+
     *            DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3  )
               FFGRD(2,IDGROUP(IFFAT))=FFGRD(2,IDGROUP(IFFAT))+
     *            DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3+1)
               FFGRD(3,IDGROUP(IFFAT))=FFGRD(3,IDGROUP(IFFAT))+
     *            DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3+2)
               VIR(1)=VIR(1)+
     *                DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3  )*CXGRP
               VIR(2)=VIR(2)+
     *                DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3+1)*CYGRP
               VIR(3)=VIR(3)+
     *                DUM*X(LSWF+(IFFAT-1)*3*225+(KK-1)*3+2)*CZGRP
            ENDDO 
  560    CONTINUE 
  550 CONTINUE
C
  580 CONTINUE
  600 CONTINUE
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMREPFMM
      SUBROUTINE QMMMREPFMM(DM,CHGINT,CORD,CLPR,ZLPR,NLPR,FFGRD,LKQMMM,
     *                      NONLSTQ,IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      DIMENSION DM(*),CHGINT(*),CORD(3,*),CLPR(4,*),ZLPR(4,*),
     *          NLPR(*),FFGRD(3,*),LKQMMM(100,*),NONLSTQ(*),
     *          IDGROUP(*)
C
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION GIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA ZERO,ONE,TWO/0.0D+00,1.0D+00,2.0D+00/
      DATA RLN10 /2.30258D+00/
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
C
C     HUI LI, JAN 2011, LINCOLN
C
C     ---CHARGE-REPULSIVE POTENTIAL INTEGRALS FOR POWERS 0 AND -1 OF R.
C
      CALL QMMMREPFMMSWF(DM,CORD,CLPR,ZLPR,NLPR,FFGRD,LKQMMM,NONLSTQ,
     *                   IDGROUP)
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
      IIITOP=0
C
      DO 100 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
C
      CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
      CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
      CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP/XBOX)
      PBCY  = YBOX*ANINT(CYGRP/YBOX)
      PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.RRCUTQ) GOTO 100
      IF(R2.GT.SWRR2Q) GOTO 100
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
C     ----- ISHELL
C
      DO 600 II = 1,NSHELL
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GO TO 600
      END IF
      IAT= KATOM(II)
C
C     - SKIP MM POINTS THAT FORM BONDS/ANGLES TO IAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(IAT.EQ.KK1 .AND. IFFAT.EQ.KK2) GOTO 600
         ENDDO
      ENDDO
C
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 580 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 580
        END IF
      JAT= KATOM(JJ)
C
C     - SKIP MM POINTS THAT FORM BONDS/ANGLES TO JAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(JAT.EQ.KK1 .AND. IFFAT.EQ.KK2) GOTO 580
         ENDDO
      ENDDO
C
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 50 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 50 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  50  CONTINUE
      CALL VCLR(CHGINT,1,3*IJ*4)
C
C     ----- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     ----- J PRIMITIVE
C
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      MAX = MAXJ
      NN = 0
      DUM1=ZERO
      DUM2=DUM1
      DO 170 I=MINI,MAXI
      GO TO (70,80,110,110,90,110,110,95,110,110,
     1       102,110,110,104,110,110,110,110,110,108),I
  70  DUM1=CSI*FAC
      GO TO 110
  80  DUM1=CPI*FAC
      GO TO 110
  90  DUM1=CDI*FAC
      GO TO 110
  95  IF(NORM) DUM1=DUM1*SQRT3
      GO TO 110
 102  DUM1=CFI*FAC
      GO TO 110
 104  DUM1 = DUM1 *SQRT5
      GO TO 110
 108  DUM1 = DUM1 * SQRT3
 110  CONTINUE
      DO 170 J=MINJ,MAX
      GO TO (125,130,160,160,140,160,160,150,160,160,
     1       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      GO TO 160
  130 DUM2=DUM1*CPJ
      GO TO 160
  140 DUM2=DUM1*CDJ
      GO TO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 160
  152 DUM2 = DUM1 * CFJ
      GO TO 160
  154 DUM2 = DUM2 *SQRT5
      GO TO 160
  156 DUM2 = DUM2 * SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
C
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      ICC=1
C
      PCSQ = (AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2
      DO 480 LTERM=1,4
      ALFA = ZLPR(LTERM,IFFAT)
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 480
      PREI = EXP(-AA*ALFA*PCSQ/(AA+ALFA))
      IF(NLPR(IFFAT).EQ.2) THEN
C      R TO THE ZERO POWER.
       TT = ONE/(AA+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+ALFA*CX)*TT
       Y0 = (AAY+ALFA*CY)*TT
       Z0 = (AAZ+ALFA*CZ)*TT
       IN = -4
       DO 206 I = 1,LIT
       IN = IN+4
       NI = I
       DO 206 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT*T
       YIN(JN   ) = YINT*T
       ZIN(JN   ) = ZINT*T
      CALL POLXYZ
      XIN(JN+125) = XINT*T
      YIN(JN+125) = YINT*T
      ZIN(JN+125) = ZINT*T
  206  CONTINUE
       DO 266 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
      DUMX= XIN(NX+125)*YIN(NY    )*ZIN(NZ    )
      DUMY= XIN(NX    )*YIN(NY+125)*ZIN(NZ    )
      DUMZ= XIN(NX    )*YIN(NY    )*ZIN(NZ+125)
      DUM = TWO*DIJ(I)*ALFA*PREI*BETA*SWF
      CHGINT(ICC  )=CHGINT(ICC  )+DUM*DUMX
      CHGINT(ICC+1)=CHGINT(ICC+1)+DUM*DUMY
      CHGINT(ICC+2)=CHGINT(ICC+2)+DUM*DUMZ
      ICC=ICC+3
 266   CONTINUE
      ELSE
C      ONE OVER R.
       DUM = PI212/(AA+ALFA)
       DO 385 I = 1,IJ
       GIJ(I) = DIJ(I)*DUM*TWO
  385  CONTINUE
       XX=AA*AA*PCSQ/(AA+ALFA)
       IF(NROOTS.LE.3) CALL RT123
       IF(NROOTS.EQ.4) CALL ROOT4
       IF(NROOTS.EQ.5) CALL ROOT5
       IF(NROOTS.EQ.6) CALL ROOT6
       IF(NROOTS.GE.7) THEN
          IF (MASWRK) WRITE(IW,9008)
          CALL ABRT
       END IF
       MM = 0
       DO 425 K = 1,NROOTS
       UU = (ALFA+AA)*U(K)
       WW = W(K)
       WW = WW*(UU+ALFA)
       TT = ONE/(AA+UU+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+(UU+ALFA)*CX)*TT
       Y0 = (AAY+(UU+ALFA)*CY)*TT
       Z0 = (AAZ+(UU+ALFA)*CZ)*TT
       IN = -4+MM
       DO 405 I = 1,LIT
       IN = IN+4
       NI = I
       DO 405 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL STVINT
       XIN(JN   ) = XINT
       YIN(JN   ) = YINT
       ZIN(JN   ) = ZINT*WW
      CALL POLXYZ
      XIN(JN+125) = XINT
      YIN(JN+125) = YINT
      ZIN(JN+125) = ZINT*WW
  405  CONTINUE
  425  MM = MM+16
       DO 403 I = 1,IJ
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       MM    = 0
      DUMX = ZERO
      DUMY = ZERO
      DUMZ = ZERO
      DO 402 K = 1,NROOTS
      DUMX= DUMX+XIN(NX+MM+125)*YIN(NY+MM    )*ZIN(NZ+MM    )
      DUMY= DUMY+XIN(NX+MM    )*YIN(NY+MM+125)*ZIN(NZ+MM    )
      DUMZ= DUMZ+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM+125)
  402 MM  = MM+16
      DUM = GIJ(I)*PREI*BETA*SWF
      CHGINT(ICC  )=CHGINT(ICC  )+DUM*DUMX
      CHGINT(ICC+1)=CHGINT(ICC+1)+DUM*DUMY
      CHGINT(ICC+2)=CHGINT(ICC+2)+DUM*DUMZ
      ICC=ICC+3
 403  CONTINUE
      END IF
C
 480  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
C     ----- SET GRADIENT MATRIX
C
      MAX=MAXJ
      NN=0
      ICC=1
C
      DO 551 LTERM =1,4
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 551
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      IF (LI-LJ) 920,940,940
  920 ID = LJ
      JD = LI
      GO TO 960
  940 ID = LI
      JD = LJ
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT(ICC  )
      FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT(ICC+1)
      FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT(ICC+2)
      VIR(1)        =VIR(1)         + DUM*CHGINT(ICC  )*CX
      VIR(2)        =VIR(2)         + DUM*CHGINT(ICC+1)*CY
      VIR(3)        =VIR(3)         + DUM*CHGINT(ICC+2)*CZ
      ICC=ICC+3
  550 CONTINUE
  551 CONTINUE
C
  580 CONTINUE
  600 CONTINUE
  100 CONTINUE
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN REPINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMREPFQM
      SUBROUTINE QMMMREPFQM(DM,CORD,CLPR,ZLPR,NLPR,LKQMMM,NONLSTQ,
     *                      IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL ISKIP
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      DIMENSION CORD(3,*),CLPR(4,*),ZLPR(4,*),NLPR(*),
     *          LKQMMM(100,*),NONLSTQ(*),IDGROUP(*)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
      PARAMETER (PI212=1.1283791670955D+00)
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00)
C
      DIMENSION DM(*)
      DIMENSION ISKIP(35),INDX(70)
      DIMENSION IX(35),IY(35),IZ(35),JX(20),JY(20),JZ(20)
      DIMENSION IJG(210),IJX(210),IJY(210),IJZ(210)
      DIMENSION XIN(200),YIN(200),ZIN(200),G(210),DIJ(210)
      DIMENSION GIJ(210)
C
      DATA CHECK/8HCHECK   /
      DATA INDX / 1, 2, 3, 4, 5, 6, 7, 8, 9,10,
     1           11,12,13,14,15,16,17,18,19,20,
     2           -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
     3           -0,-0,-0,-0,-0,
     4           -0, 1, 2, 3, 1, 2, 3, 4, 5, 6,
     5            4, 5, 6, 7, 8, 9,10,11,12,13,
     6            7, 8, 9,10,11,12,13,14,15,16,
     7           17,18,19,20,21/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5,
     2         17, 1, 1,13,13, 5, 1, 5, 1, 9,
     3          9, 1, 9, 5, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5,
     2          1,17, 1, 5, 1,13,13, 1, 5, 9,
     3          1, 9, 5, 9, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5,
     2          1, 1,17, 1, 5, 1, 5,13,13, 1,
     3          9, 9, 5, 5, 9/
C
C     HUI LI, JAN 2011, LINCOLN
C
C
C     INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
      IIITOP=0
C
      IF (EXETYP .EQ. CHECK) GO TO 1120
C
C     GRADIENT CONTRIBUTION FROM REPULSIVE POTENTIALS FOR POWERS 0
C     AND -1 OF R.
C
C     ----- I SHELL
C
      DO 1060 II = 1,NSHELL
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GO TO 1060
      END IF
      IAT = KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)+1
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      DO 100 I=1,35
 100  ISKIP(I)=.TRUE.
      DO 260 I=MINI,MAXI
      GO TO (110,140,260,260,180,260,260,260,260,260,
     1       220,260,260,260,260,260,260,260,260,260),I
 110  DO 120 K=2,4
 120  ISKIP(K)=.FALSE.
      GO TO 260
 140  DO 160 K=5,10
 160  ISKIP(K)=.FALSE.
      ISKIP(1)=.FALSE.
      GO TO 260
 180  DO 200 K=2,4
 200  ISKIP(K)=.FALSE.
      DO 210 K=11,20
 210  ISKIP(K)=.FALSE.
      GO TO 260
 220  DO 240 K=5,10
 240  ISKIP(K)=.FALSE.
      DO 250 K=21,35
 250  ISKIP(K)=.FALSE.
 260  CONTINUE
C
C     ----- J SHELL
C
      DO 1040 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 1040
        END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      N0 = 0
      IF (LIT .GE. 4) N0 = 35
      IJ = 0
      DO 340 I = 1,35
      IF (ISKIP(I)) GO TO 340
      IN = INDX(I+N0)
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 320 J = MINJ,MAXJ
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IJG(IJ) = IN+21*(J-MINJ)
  320 CONTINUE
  340 CONTINUE
      DO 360 I = 1,IJ
      N = IJG(I)
  360 G(N) = ZERO
C
C     ----- I PRIMITIVE
C
      DO 840 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
      CSI = CP(IG)
      CPI = CS(IG)*DUM
      IF (LIT .EQ. 4) CPI = CD(IG)
      CDI = CP(IG)*DUM
      IF (LIT .EQ. 5) CDI = CF(IG)
      CFI = CD(IG)*DUM
      CGI = CF(IG)*DUM
C
C     ----- J PRIMITIVE
C
      DO 820 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 820
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      NN = 0
      DUM1 = ZERO
      DUM2 = DUM1
      DO 600 I=1,35
      IF(ISKIP(I)) GO TO 600
      GO TO (370,380,420,420,390,420,420,420,420,420,
     1       400,420,420,420,420,420,420,420,420,420,
     2       410,420,420,420,420,420,420,420,420,420,
     3       420,420,420,420,420),I
 370  DUM1=CSI*FAC
      GO TO 420
 380  DUM1=CPI*FAC
      GO TO 420
 390  DUM1=CDI*FAC
      GO TO 420
 400  DUM1=CFI*FAC
      GO TO 420
 410  DUM1 = CGI*FAC
 420  CONTINUE
      DO 580 J=MINJ,MAXJ
      GO TO (430,440,560,560,460,560,560,480,560,560,
     1       500,560,560,520,560,560,560,560,560,540),J
  430 DUM2=DUM1*CSJ
      GO TO 560
  440 DUM2=DUM1*CPJ
      GO TO 560
  460 DUM2=DUM1*CDJ
      GO TO 560
  480 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 560
  500 DUM2 = DUM1 * CFJ
      GO TO 560
  520 DUM2 = DUM2 *SQRT5
      GO TO 560
  540 DUM2 = DUM2 * SQRT3
  560 NN=NN+1
  580 DIJ(NN)=DUM2
  600 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 781 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
C
C     - SKIP MM POINTS THAT FORM BONDS/ANGLES TO IAT OR JAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(IAT.EQ.KK1 .AND. IFFAT.EQ.KK2) GOTO 781
            IF(JAT.EQ.KK1 .AND. IFFAT.EQ.KK2) GOTO 781
         ENDDO
      ENDDO
C
      CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
      CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
      CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP/XBOX)
      PBCY  = YBOX*ANINT(CYGRP/YBOX)
      PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.RRCUTQ) GOTO 781
      IF(R2.GT.SWRR2Q) GOTO 781
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
      PCSQ = (AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2
      DO 780 LTERM=1,4
      ALFA = ZLPR(LTERM,IFFAT)
      BETA = CLPR(LTERM,IFFAT)
      IF(BETA.EQ.ZERO) GOTO 780
      PREI = EXP(-AA*ALFA*PCSQ/(AA+ALFA))
      IF(NLPR(IFFAT).EQ.2)THEN
C      R TO THE ZERO POWER.
       TT = ONE/(AA+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+ALFA*CX)*TT
       Y0 = (AAY+ALFA*CY)*TT
       Z0 = (AAZ+ALFA*CZ)*TT
       IN = -4
       DO 606 I = 1,LIT
       IN = IN+4
       NI = I
       DO 606 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL VINT
       XIN(JN   ) = XINT*T
       YIN(JN   ) = YINT*T
       ZIN(JN   ) = ZINT*T
  606  CONTINUE
       DO 666 I = 1,IJ
       N = IJG(I)
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       G(N)=G(N)+DIJ(I)*PREI*BETA*XIN(NX)*YIN(NY)*ZIN(NZ)*SWF
 666   CONTINUE
      ELSE
C      ONE OVER R.
       DUM = PI212/(AA+ALFA)
       DO 685 I = 1,IJ
       GIJ(I) = DIJ(I)*DUM
  685  CONTINUE
       XX=AA*AA*PCSQ/(AA+ALFA)
       IF(NROOTS .LE. 3) CALL RT123
       IF(NROOTS .EQ. 4) CALL ROOT4
       IF(NROOTS.EQ.5) CALL ROOT5
       IF(NROOTS.EQ.6) CALL ROOT6
       IF(NROOTS.GE.7)THEN
          IF (MASWRK) WRITE(IW,9008)
          CALL ABRT
       END IF
       MM = 0
       DO 725 K = 1,NROOTS
       UU = (ALFA+AA)*U(K)
       WW = W(K)
       TT = ONE/(AA+UU+ALFA)
       T  =  SQRT(TT)
       X0 = (AAX+(UU+ALFA)*CX)*TT
       Y0 = (AAY+(UU+ALFA)*CY)*TT
       Z0 = (AAZ+(UU+ALFA)*CZ)*TT
       IN = -4+MM
       DO 705 I = 1,LIT
       IN = IN+4
       NI = I
       DO 705 J = 1,LJT
       JN = IN+J
       NJ = J
       CALL VINT
       XIN(JN   ) = XINT
       YIN(JN   ) = YINT
       ZIN(JN   ) = ZINT*WW
  705  CONTINUE
  725  MM = MM+16
       DO 765 I = 1,IJ
       N = IJG(I)
       NX    = IJX(I)
       NY    = IJY(I)
       NZ    = IJZ(I)
       DUM = ZERO
       MM    = 0
       DO 745 K = 1,NROOTS
       DUM= DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
  745  MM  = MM+16
       G(N)=G(N)+GIJ(I)*PREI*BETA*DUM*SWF
 765   CONTINUE
      END IF
 780  CONTINUE
 781  CONTINUE
C
C     ----- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     ----- FORM INTEGRALS OVER DERIVATIVES -----
C
      NN = 0
      N = 1
      DO 900 J = MINJ,MAXJ
      IF (MINI .GT. 1) GO TO 860
      NN = NN+1
      XIN(NN) = G(N+ 1)
      YIN(NN) = G(N+ 2)
      ZIN(NN) = G(N+ 3)
      IF (MAXI .EQ. 1) GO TO 900
  860 IF (MINI .GT. 2) GO TO 880
      NN = NN+1
      XIN(NN) = (G(N+ 4)-G(N ))
      YIN(NN) = G(N+ 7)
      ZIN(NN) = G(N+ 8)
      NN = NN+1
      XIN(NN) = G(N+ 7)
      YIN(NN) = (G(N+ 5)-G(N ))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = G(N+ 9)
      ZIN(NN) = (G(N+ 6)-G(N ))
      IF (MAXI .EQ. 4) GO TO 900
  880 CONTINUE
      IF (MINI .GT. 5) GO TO 890
      NN = NN+1
      XIN(NN) = (G(N+ 3)-G(N )-G(N ))
      YIN(NN) = G(N+ 6)
      ZIN(NN) = G(N+ 7)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = (G(N+ 4)-G(N+ 1)-G(N+ 1))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+10)
      YIN(NN) = G(N+11)
      ZIN(NN) = (G(N+ 5)-G(N+ 2)-G(N+ 2))
      NN = NN+1
      DUM = ONE
      IF (NORM) DUM = SQRT3
      XIN(NN) = DUM*(G(N+ 6)-G(N+ 1))
      YIN(NN) = DUM*(G(N+ 8)-G(N ))
      ZIN(NN) = DUM* G(N+12)
      NN = NN+1
      XIN(NN) = DUM*(G(N+ 7)-G(N+ 2))
      YIN(NN) = DUM* G(N+12)
      ZIN(NN) = DUM*(G(N+10)-G(N ))
      NN = NN+1
      XIN(NN) = DUM* G(N+12)
      YIN(NN) = DUM*(G(N+ 9)-G(N+ 2))
      ZIN(NN) = DUM*(G(N+11)-G(N+ 1))
      IF(MAXI.EQ.10) GO TO 900
 890  CONTINUE
      NN=NN+1
      XIN(NN)=(G(N+ 6)-G(N   )-G(N   )-G(N   ))
      YIN(NN)= G(N+ 9)
      ZIN(NN)= G(N+10)
      NN=NN+1
      XIN(NN)= G(N+11)
      YIN(NN)=(G(N+ 7)-G(N+ 1)-G(N+ 1)-G(N+ 1))
      ZIN(NN)= G(N+12)
      NN=NN+1
      XIN(NN)= G(N+13)
      YIN(NN)= G(N+14)
      ZIN(NN)=(G(N+ 8)-G(N+ 2)-G(N+ 2)-G(N+ 2))
      NN=NN+1
      DUM=ONE
      IF(NORM) DUM=SQRT5
      XIN(NN)=DUM* (G(N+ 9)-G(N+ 3)-G(N+ 3))
      YIN(NN)=DUM* (G(N+15)-G(N  ))
      ZIN(NN)=DUM* G(N+18)
      NN=NN+1
      XIN(NN)=DUM* (G(N+10)-G(N+ 4)-G(N+ 4))
      YIN(NN)=DUM* G(N+18)
      ZIN(NN)=DUM* (G(N+16)-G(N  ))
      NN=NN+1
      XIN(NN)=DUM* (G(N+15)-G(N+ 1))
      YIN(NN)=DUM* (G(N+11)-G(N+ 3)-G(N+ 3))
      ZIN(NN)=DUM*  G(N+19)
      NN=NN+1
      XIN(NN)=DUM* G(N+19)
      YIN(NN)=DUM* (G(N+12)-G(N+ 5)-G(N+ 5))
      ZIN(NN)=DUM* (G(N+17)-G(N+ 1))
      NN=NN+1
      XIN(NN)=DUM* (G(N+16)-G(N+ 2))
      YIN(NN)=DUM*  G(N+20)
      ZIN(NN)=DUM* (G(N+13)-G(N+ 4)-G(N+ 4))
      NN=NN+1
      XIN(NN)=DUM*  G(N+20)
      YIN(NN)=DUM* (G(N+17)-G(N+ 2))
      ZIN(NN)=DUM* (G(N+14)-G(N+ 5)-G(N+ 5))
      NN=NN+1
      IF(NORM) DUM=DUM*SQRT3
      XIN(NN)=DUM* (G(N+18)-G(N+ 5))
      YIN(NN)=DUM* (G(N+19)-G(N+ 4))
      ZIN(NN)=DUM* (G(N+20)-G(N+ 3))
  900 N = N+21
C
C     ----- CALCULATE CONTRIBUTION TO GRADIENT -----
C
      N = 0
      DO 980 J = MINJ,MAXJ
      JN = LOCJ+J
      DO 980 I = MINI,MAXI
      N = N+1
      IN = LOCI+I
      IF (IN-JN) 920,940,940
  920 ID = JN
      JD = IN
      GO TO 960
  940 ID = IN
      JD = JN
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      DUM = DUM+DUM
      DE(1,IAT) = DE(1,IAT)+DUM*XIN(N)
      DE(2,IAT) = DE(2,IAT)+DUM*YIN(N)
      DE(3,IAT) = DE(3,IAT)+DUM*ZIN(N)
  980 CONTINUE
 1040 CONTINUE
 1060 CONTINUE
C
C
 1120 CONTINUE
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN REPINT.  CALL A PROGRAMMER/QUANTUM CHEMIST.')
C
      END
C*MODULE QUANPO  *DECK QMMMPOLFLDINT
      SUBROUTINE QMMMPOLFLDINT(IFFAT,CORD,IDGROUP,PEX,PEY,PEZ,
     *                         LKQMMM,NUM2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM,DOUBLE
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000)
C
      DIMENSION CORD(3,*),IDGROUP(*),PEX(NUM2),PEY(NUM2),PEZ(NUM2),
     *          LKQMMM(100,*)
C
      DIMENSION XIN(128),YIN(128),ZIN(128),PLX(100),PLY(100),PLZ(100)
      DIMENSION DIJ(100),FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA RLN10 /2.30258D+00/
C
C     HUI LI, MAR 2011, LINCOLN
C
      IF(IDOPOL.EQ.0) RETURN
C
      TOL=RLN10*ITOL
      NORM=NORMF.NE.1.OR.NORMP.NE.1
      IIITOP=0
C
C     -- FIELD INTEGRALS AT MM POL DUE TO QM BASIS FUNC
C
      CALL VCLR(PEX,1,NUM2)
      CALL VCLR(PEY,1,NUM2)
      CALL VCLR(PEZ,1,NUM2)
C
      CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
      CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
      CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP/XBOX)
      PBCY  = YBOX*ANINT(CYGRP/YBOX)
      PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.RRCUTQ) GOTO 9199
      IF(R2.GT.SWRR2Q) GOTO 9199
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
C     ----- ISHELL
C
      DO 9000 II=1,NSHELL
      I=KATOM(II)
      IAT=KATOM(II)
C
C     - SKIP MM THAT FORM BONDS/ANGLES TO IAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(IAT.EQ.KK1.AND.IFFAT.EQ.KK2)GOTO 9000
         ENDDO
      ENDDO
C
      XI=C(1,I)
      YI=C(2,I)
      ZI=C(3,I)
      I1=KSTART(II)
      I2=I1+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 8000 JJ=1,II
C
      J=KATOM(JJ)
      JAT = KATOM(JJ)
C
C     - SKIP MM THAT FORM BONDS/ANGLES TO JAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2)GOTO 8000
         ENDDO
      ENDDO
C
      XJ=C(1,J)
      YJ=C(2,J)
      ZJ=C(3,J)
      J1=KSTART(JJ)
      J2=J1+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
      NROOTS=(LIT+LJT+1-2)/2 + 1
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ=II.EQ.JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ=0
      MAX=MAXJ
      DO 50 I=MINI,MAXI
      NX=IX(I)
      NY=IY(I)
      NZ=IZ(I)
      IF(IANDJ) MAX=I
      DO 50 J=MINJ,MAX
      IJ=IJ+1
      IJX(IJ)=NX+JX(J)
      IJY(IJ)=NY+JY(J)
      IJZ(IJ)=NZ+JZ(J)
   50 CONTINUE
      DO 60 I=1,IJ
      PLX(I) = ZERO
      PLY(I) = ZERO
  60  PLZ(I) = ZERO
C
C     ----- I PRIMITIVE
C
      JGMAX=J2
      DO 7000 IG=I1,I2
      AI=EX(IG)
      ARRI=AI*RR
      AXI=AI*XI
      AYI=AI*YI
      AZI=AI*ZI
      CSI=CS(IG)
      CPI=CP(IG)
      CDI=CD(IG)
      CFI=CF(IG)
C
C     ----- J PRIMITIVE
C
      IF(IANDJ) JGMAX=IG
      DO 6000 JG=J1,JGMAX
      AJ=EX(JG)
      AA=AI+AJ
      AA1=ONE/AA
      DUM=AJ*ARRI*AA1
      IF(DUM.GT.TOL) GO TO 6000
      FAC=EXP(-DUM)
      CSJ=CS(JG)
      CPJ=CP(JG)
      CDJ=CD(JG)
      CFJ=CF(JG)
      AX=(AXI+AJ*XJ)*AA1
      AY=(AYI+AJ*YJ)*AA1
      AZ=(AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX=MAXJ
      NN=0
      DO 310 I=MINI,MAXI
      GO TO ( 70, 80,180,180, 90,180,180,100,180,180,
     *       110,180,180,120,180,180,180,180,180,130),I
   70 DUM1=CSI*FAC
      GO TO 180
   80 DUM1=CPI*FAC
      GO TO 180
   90 DUM1=CDI*FAC
      GO TO 180
  100 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 180
  110 DUM1=CFI*FAC
      GO TO 180
  120 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 180
  130 IF(NORM) DUM1=DUM1*SQRT3
  180 IF(IANDJ) MAX=I
      DO 310 J=MINJ,MAX
      GO TO (190,200,300,300,210,300,300,220,300,300,
     *       230,300,300,240,300,300,300,300,300,250),J
  190 DUM2=DUM1*CSJ
      IF(.NOT.DOUBLE) GO TO 300
      IF(I.GT.1) GO TO 195
      DUM2=DUM2+DUM2
      GO TO 300
  195 DUM2=DUM2+CSI*CPJ*FAC
      GO TO 300
  200 DUM2=DUM1*CPJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  210 DUM2=DUM1*CDJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  220 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 300
  230 DUM2=DUM1*CFJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  240 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 300
  250 IF(NORM) DUM2=DUM2*SQRT3
  300 NN=NN+1
  310 DIJ(NN)=DUM2
C
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
      DUM=PI212*AA1
      DUM=DUM+DUM
      DO 800 I=1,IJ
  800 FIJ(I)=DIJ(I)*DUM
C
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      MM=0
      DO 830 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)
      WW=WW*UU
      TT=ONE/(AA+UU)
      T=SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 820 I=1,LIT
      IN=IN+4
      NI=I
      DO 820 J=1,LJT
      JN=IN+J
      NJ=J
      CALL STVINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
      CALL POLXYZ
      XIN(JN+64)=XINT
      YIN(JN+64)=YINT
      ZIN(JN+64)=ZINT*WW
  820 CONTINUE
  830 MM=MM+16
      DO 850 I=1,IJ
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUMX=ZERO
      DUMY=ZERO
      DUMZ=ZERO
      MM=0
      DO 840 K=1,NROOTS
      DUMX=DUMX+XIN(NX+MM+64)*YIN(NY+MM   )*ZIN(NZ+MM   )
      DUMY=DUMY+XIN(NX+MM   )*YIN(NY+MM+64)*ZIN(NZ+MM   )
      DUMZ=DUMZ+XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+64)
  840 MM=MM+16
      DUM=FIJ(I)
      PLX(I) = PLX(I) + DUM*DUMX
      PLY(I) = PLY(I) + DUM*DUMY
      PLZ(I) = PLZ(I) + DUM*DUMZ
  850 CONTINUE
C
 6000 CONTINUE
 7000 CONTINUE
C
C
      MAX=MAXJ
      NN=0
      DO 7500 I=MINI,MAXI
      LI=LOCI+I
      IN = (LI*(LI-1))/2
      IF(IANDJ) MAX=I
      DO 7500 J=MINJ,MAX
      LJ=LOCJ+J
      JN=LJ+IN
      NN=NN+1
      PEX(JN)=PLX(NN)
      PEY(JN)=PLY(NN)
      PEZ(JN)=PLZ(NN)
 7500 CONTINUE
 8000 CONTINUE
 9000 CONTINUE
C
      DO KKK=1,NUM2
         PEX(KKK) = PEX(KKK)*SWF
         PEY(KKK) = PEY(KKK)*SWF
         PEZ(KKK) = PEZ(KKK)*SWF
      ENDDO
C
 9199 CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMPOLFLDNUCMM
      SUBROUTINE QMMMPOLFLDNUCMM(CORD,CHARG,POL,FIELD1,LKQMMM,
     *                           NONLST,NONLSTQ,IDGROUP)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00)
C
      DIMENSION CORD(3,*),CHARG(*),POL(*),FIELD1(3,*),
     *          LKQMMM(100,*),NONLST(2,*),NONLSTQ(*),IDGROUP(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
      IF(IDOPOL.EQ.0) RETURN
C
C     -- FIELD1: FIELD AT POL DUE TO MM CHARGE --
C
      CALL VCLR(FIELD1,1,3*NFFAT)
C
      DO 100 III = 1, NTODO
         IFFAT = NONLST(1,III)
         JFFAT = NONLST(2,III)
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 100
         IF(CHARG(IFFAT).EQ.ZERO.AND.  POL(IFFAT).EQ.ZERO) GOTO 100
         IF(CHARG(JFFAT).EQ.ZERO.AND.  POL(JFFAT).EQ.ZERO) GOTO 100
         IF(  POL(IFFAT).EQ.ZERO.AND.  POL(JFFAT).EQ.ZERO) GOTO 100
         IF(CHARG(IFFAT).EQ.ZERO.AND.CHARG(JFFAT).EQ.ZERO) GOTO 100
         QI    = CHARG(IFFAT)
         QJ    = CHARG(JFFAT)
C
         XGRP  = CORD(1,IDGROUP(IFFAT)) - CORD(1,IDGROUP(JFFAT))
         YGRP  = CORD(2,IDGROUP(IFFAT)) - CORD(2,IDGROUP(JFFAT))
         ZGRP  = CORD(3,IDGROUP(IFFAT)) - CORD(3,IDGROUP(JFFAT))
         PBCX  = XBOX * ANINT(XGRP/XBOX)
         PBCY  = YBOX * ANINT(YGRP/YBOX)
         PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.RRCUT) GOTO 100
         IF(R2.GT.SWRR2) GOTO 100
         CALL SWFUNC(R2,XGRP,YGRP,ZGRP)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         R2    = X*X+Y*Y+Z*Z
         ONER2 = ONE/R2
         ONER  = SQRT(ONER2)
         ONER3 = ONER2*ONER
         DUMI  = QJ*ONER3*SWF
         DUMJ  = QI*ONER3*SWF
         FIELD1(1,IFFAT)=FIELD1(1,IFFAT)+DUMI*X
         FIELD1(2,IFFAT)=FIELD1(2,IFFAT)+DUMI*Y
         FIELD1(3,IFFAT)=FIELD1(3,IFFAT)+DUMI*Z
         FIELD1(1,JFFAT)=FIELD1(1,JFFAT)-DUMJ*X
         FIELD1(2,JFFAT)=FIELD1(2,JFFAT)-DUMJ*Y
         FIELD1(3,JFFAT)=FIELD1(3,JFFAT)-DUMJ*Z
 100  CONTINUE
C
C     -- FIELD1: FIELD AT POL DUE TO QM NUC --
C        NOTE THE SPECIAL WAY TO USE SWF
C
      IF(NAT.LE.0) GOTO 330
      IPCOUNT = ME - 1
      IIITOP=0
      DO 300 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 300
         END IF
         IF(POL(IFFAT).EQ.ZERO) GOTO 300
C
         CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
         CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
         CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
         PBCX  = XBOX*ANINT(CXGRP/XBOX)
         PBCY  = YBOX*ANINT(CYGRP/YBOX)
         PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
         CXGRP = CXGRP - PBCX
         CYGRP = CYGRP - PBCY
         CZGRP = CZGRP - PBCZ
         R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
         IF(R2.GT.RRCUTQ) GOTO 300
         IF(R2.GT.SWRR2Q) GOTO 300
         CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
         CX    = CORD(1,IFFAT) - PBCX
         CY    = CORD(2,IFFAT) - PBCY
         CZ    = CORD(3,IFFAT) - PBCZ
         DO 310 JAT=1,NAT
C 
C           - SKIP MM THAT FORM BONDS/ANGLES TO JAT
            DO III = 1, IIITOP
               DO JJJ = 1, 99, 2
                  KK1 = LKQMMM(JJJ  ,III)
                  KK2 = LKQMMM(JJJ+1,III)
                  IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2)GOTO 310
               ENDDO
            ENDDO
C
            QJ    = ZAN(JAT)
            X     = CX - C(1,JAT)
            Y     = CY - C(2,JAT)
            Z     = CZ - C(3,JAT)
            R2    = X*X+Y*Y+Z*Z
            IF(R2.LT.1.0D-10) GOTO 310
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            DUMI  = QJ*ONER3*SWF
            FIELD1(1,IFFAT)=FIELD1(1,IFFAT)+DUMI*X
            FIELD1(2,IFFAT)=FIELD1(2,IFFAT)+DUMI*Y
            FIELD1(3,IFFAT)=FIELD1(3,IFFAT)+DUMI*Z
 310     CONTINUE
 300  CONTINUE
 330  CONTINUE
C
      IF(GOPARR) THEN
         CALL DDI_GSUMF(2405,FIELD1,3*NFFAT)
      END IF
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMPOLINT
      SUBROUTINE QMMMPOLINT(H1,FA,FB,DENTOT,HADD,OLDADD,DIP,
     *                      XTS,YTS,ZTS,QRXN1,QRXN2,
     *                      CMAT1,L2,L1,MCITER,NTS,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00,PT5=0.5D+00)
C
      DIMENSION H1(L2),FA(L2),FB(L2),DENTOT(L2),HADD(L2),OLDADD(L2),
     *          DIP(3,*),
     *          XTS(NTS),YTS(NTS),ZTS(NTS),QRXN1(NTS),QRXN2(NTS),
     *          CMAT1(NTS,NTS),NONLSTQ(*)
C
      LOGICAL GOPARR,MASWRK,DSKWRK,DIRSCF,FDIFF,DIRDIF
C
      COMMON /CONV  / ACURCY,ENUCR,AJUNK(3),DIFF,ITER,ICALCP,ICBET
      COMMON /FFENGY/ EN12,EN123,EN123R4,EN123B4,EN234W1,ENCHAR,ENLJR,
     *                ENLJD,ENPOL,XENPOL,ENRXN,XENRXN,ENRXNPOL,ENRXNR,
     *                ENCENT,ENUCCH,ENCMAP,ENPOT,ENKIN,ENTOT
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FMCOM / X(1)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /OPTSCF/ DIRSCF,FDIFF
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RHF,GVB/8HRHF     ,8HGVB     /
      DATA RMC/8HMCSCF   /
C
C     HUI LI, DEJUN SI, FEB 2011, LINCOLN
C
C     CAUTION, GVB ITERATIONS START AT 1, BUT RHF,UHF,ROHF AT 0!
C
      IF(SCFTYP.EQ.RMC) THEN
         ITER=MCITER
      END IF
      DIRDIF = DIRSCF  .AND.  FDIFF  .AND.  SCFTYP.NE.GVB
C
C     -- ELECTRONIC FIELDS AT MM POL
C
      CALL VALFM(LOADFM)
      LXEFI    = LOADFM   + 1
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LABFLD   = LZEFI    + L2
      LABPOT   = LABFLD   + 3*NFFAT
      LSCR     = LABPOT   + NTS
      LAST     = LSCR     + L2
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      IF(IDOPOL.EQ.0) THEN
         CALL VCLR(X(LABFLD),1,3*NFFAT)
         GOTO 101
      END IF
C
      IPCOUNT = ME - 1
      DO 100 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            X(LABFLD+3*(IFFAT-1)  )=ZERO
            X(LABFLD+3*(IFFAT-1)+1)=ZERO
            X(LABFLD+3*(IFFAT-1)+2)=ZERO
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),X(LFFIDGROUP),
     *             X(LXEFI),X(LYEFI),X(LZEFI),X(LFFLKQMMM),L2)
         X(LABFLD+3*(IFFAT-1)  )=TRACEP(DENTOT,X(LXEFI),L1)
         X(LABFLD+3*(IFFAT-1)+1)=TRACEP(DENTOT,X(LYEFI),L1)
         X(LABFLD+3*(IFFAT-1)+2)=TRACEP(DENTOT,X(LZEFI),L1)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,X(LABFLD),3*NFFAT)
 101  CONTINUE
C
C     -- TOTAL FIELD AT MM POL
C        NOTE: QM NUC AND MM CHARGE DONE IN QMMMPOLFLDNUCMM
C              HERE 'FIELD' BECOMES THE TOTAL, MUST GO BACK
C              TO NUC+CHG
C
      CALL VADD(X(LABFLD),1,X(LFFFIELD1),1,X(LFFFIELD1),1,3*NFFAT)
C
C     -- TOTAL POTENTIAL AT SURFACE --
C        NOTE: XLABPOT = - POT_ELE,
C              HERE POT1 = POT_NUC + POT_MMCHG + POT_ELE,
C              MUST GO BACK TO POT_NUC + POT_MMCHG
C
      CALL VCLR (X(LABPOT),1,NTS)
      CALL EPOTEN(ONE,XTS,YTS,ZTS,X(LABPOT),DENTOT,NTS,L2)
      IF(GOPARR) CALL DDI_GSUMF(2668,X(LABPOT),NTS)
      CALL VSUB(X(LABPOT),1,X(LFFPOT1),1,X(LFFPOT1),1,NTS)
C
C     -- SURFACE CHARGE INDUCED BY NUC, ELE AND CHG
C
      SCALE = (RXNEPS-ONE)/RXNEPS
      IPCOUNT = ME - 1
      DO 320 ITS = 1, NTS
         QRXN1(ITS) = ZERO
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 320
         END IF
         DO JTS = 1, NTS
            QRXN1(ITS) = QRXN1(ITS)-CMAT1(ITS,JTS)*X(LFFPOT1+JTS-1)
         ENDDO
         QRXN1(ITS) = QRXN1(ITS)*SCALE
 320  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,QRXN1,NTS)
C
C     -- SOLVE INDUCED DIPOLES
C
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),DIP,ENPOL,
     *              X(LFFFIELD1),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLST),X(LFFIDGROUP),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),QRXN1,
     *              QRXN2,NTS)
C
C     -- COMPUTE POLARIZATION ENERGY CORRECTION --
C        NOTE BY HUI LI:
C        ENPOL = -(1/2)*FIELD*DIPOLE
C              = -(1/2)*(F_NUC + F_MM + F_ELE)*DIPOLE
C        HOWEVER, A FULL TERM OF [-(1.0)*F_ELE*DIPOLE] IS INCLUDED IN
C        THE SCF ENERGY VIA 1-E INTEGRALS, SO WE NEED TO REMOVE IT:
C             XENPOL = (F_ELE)*DIPOLE
C
      XENPOL = ZERO
      DO IFFAT=1,NFFAT
         FLDX   = X(LABFLD+3*(IFFAT-1)  )
         FLDY   = X(LABFLD+3*(IFFAT-1)+1)
         FLDZ   = X(LABFLD+3*(IFFAT-1)+2)
         XENPOL = XENPOL + (FLDX*DIP(1,IFFAT)
     *                     +FLDY*DIP(2,IFFAT)
     *                     +FLDZ*DIP(3,IFFAT))
      ENDDO
C
      ENRXN    = ZERO
      ENRXNPOL = ZERO
      XENRXN   = ZERO
      IF(IRXNFLD.GE.60 .AND. RXNRAD.LT.1.0D+30) THEN
         DO ITS=1,NTS
            ENRXN    = ENRXN + X(LFFPOT1+ITS-1)*QRXN1(ITS)
            ENRXNPOL = ENRXNPOL + X(LFFPOT1+ITS-1)*QRXN2(ITS)
            XENRXN = XENRXN 
     *              + X(LABPOT+ITS-1)*(QRXN1(ITS)+QRXN2(ITS))
         ENDDO
         ENRXNPOL = PT5*ENRXNPOL
         ENRXN    = PT5*ENRXN
      END IF
C
      CALL VSUB(X(LABFLD),1,X(LFFFIELD1),1,X(LFFFIELD1),1,3*NFFAT)
      CALL VADD(X(LABPOT),1,X(LFFPOT1),1,X(LFFPOT1),1,NTS)
C
C     -- CALCULATE INTEGRALS --
C
      IF(GOPARR) THEN
         IF(.NOT.DIRDIF) CALL DSCAL(L2,ONE/NPROC,H1,1)
      END IF
      IF(DIRDIF) CALL VCLR(HADD,1,L2)
C
      IF(IDOPOL.EQ.0) GOTO 201
      IPCOUNT = ME - 1
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 200
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 200
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),X(LFFIDGROUP),
     *             X(LXEFI),X(LYEFI),X(LZEFI),X(LFFLKQMMM),L2)
         IF(DIRDIF) THEN
            DO K=1,L2
               HADD(K)=HADD(K)
     *                -X(LXEFI+K-1)*DIP(1,IFFAT)
     *                -X(LYEFI+K-1)*DIP(2,IFFAT)
     *                -X(LZEFI+K-1)*DIP(3,IFFAT)
            ENDDO
         ELSE
            DO K=1,L2
               H1(K)=H1(K)
     *                -X(LXEFI+K-1)*DIP(1,IFFAT)
     *                -X(LYEFI+K-1)*DIP(2,IFFAT)
     *                -X(LZEFI+K-1)*DIP(3,IFFAT)
            ENDDO
         END IF
 200  CONTINUE
 201  CONTINUE
C
      IPCOUNT = ME - 1
      DO 300 ITS=1,NTS
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 300
         END IF
         CALL INTMEP(X(LSCR),XTS(ITS),YTS(ITS),ZTS(ITS))
         IF(DIRDIF) THEN
            DO K=1,L2
               HADD(K)= HADD(K)-X(LSCR+K-1)*(QRXN1(ITS)+QRXN2(ITS))
            ENDDO
         ELSE
            DO K=1,L2
               H1(K)  = H1(K)-X(LSCR+K-1)*(QRXN1(ITS)+QRXN2(ITS))
            ENDDO
        END IF
 300  CONTINUE
C
      IF(GOPARR) THEN
         IF(DIRDIF) THEN
            CALL DDI_GSUMF(686,HADD,L2)
         ELSE
            CALL DDI_GSUMF(687, H1,L2)
         END IF
      END IF
C
C     ----- ADD DIFFERENCE IN PERTURBATION WHEN DIRSCF AND FDIFF -----
C
      IF(SCFTYP.EQ.RHF) THEN
         IF(DIRSCF  .AND.  FDIFF) THEN
            IF(ITER.EQ.1) CALL VCLR(OLDADD,1,L2)
            CALL VADD(  H1,1, HADD,1,  H1,1,L2)
            CALL VSUB(OLDADD,1, HADD,1,OLDADD,1,L2)
            CALL VADD(  FA,1,OLDADD,1,  FA,1,L2)
            CALL DCOPY(L2,HADD,1,OLDADD,1)
         END IF
      ELSE
         IF(DIRDIF) THEN
            IF(ITER .EQ. 1) CALL VCLR(OLDADD,1,L2)
            CALL VADD(  H1,1, HADD,1,  H1,1,L2)
            CALL VSUB(OLDADD,1, HADD,1,OLDADD,1,L2)
            CALL VADD(  FA,1,OLDADD,1,  FA,1,L2)
            CALL VADD(  FB,1,OLDADD,1,  FB,1,L2)
            CALL DCOPY(L2,HADD,1,OLDADD,1)
         END IF
      END IF
C
C     --- FOR MCSCF/GVB H1 MUST BE WRITTEN TO DAF ---
C
      CALL DAWRIT(IDAF,IODA,H1,L2,80,0)
      IF (SCFTYP.EQ.GVB .OR. SCFTYP.EQ.RMC) THEN
         CALL DAWRIT(IDAF,IODA,H1,L2,11,0)
      END IF
C
      CALL RETFM(NEED)
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMPOLINT2
      SUBROUTINE QMMMPOLINT2(H1,DENTOT,DIPTMP,L2,L1,NONLSTQ)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      DIMENSION H1(L2),DENTOT(L2),DIPTMP(3,*),NONLSTQ(*)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FMCOM / X(1)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     HUI LI, JAN 2011, LINCOLN
C     DEJUN SI, MAR 2011, LINCOLN
C
C     -- ELECTRONIC FIELDS AT MM POL
C
      NTS = IRXNFLD
      CALL VALFM(LOADFM)
      LXEFI    = LOADFM   + 1
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LABFLD   = LZEFI    + L2
      LABPOT   = LABFLD   + 3*NFFAT
      LQTMP1   = LABPOT   + NTS
      LQTMP2   = LQTMP1   + NTS
      LSCR     = LQTMP2   + NTS
      LAST     = LSCR     + L2
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      IPCOUNT = ME - 1
      DO 100 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            X(LABFLD+3*(IFFAT-1)  )=ZERO
            X(LABFLD+3*(IFFAT-1)+1)=ZERO
            X(LABFLD+3*(IFFAT-1)+2)=ZERO
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),X(LFFIDGROUP),
     *             X(LXEFI),X(LYEFI),X(LZEFI),X(LFFLKQMMM),L2)
         X(LABFLD+3*(IFFAT-1)  )=TRACEP(DENTOT,X(LXEFI),L1)
         X(LABFLD+3*(IFFAT-1)+1)=TRACEP(DENTOT,X(LYEFI),L1)
         X(LABFLD+3*(IFFAT-1)+2)=TRACEP(DENTOT,X(LZEFI),L1)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,X(LABFLD),3*NFFAT)
C
      CALL VCLR (X(LABPOT),1,NTS)
      CALL EPOTEN(ONE,X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *            X(LABPOT),DENTOT,NTS,L2)
      IF(GOPARR) CALL DDI_GSUMF(2668,X(LABPOT),NTS)
C
C     -- SURFACE CHARGE INDUCED BY ABPOT --
C
      SCALE = (RXNEPS-ONE)/RXNEPS
      IPCOUNT = ME - 1
      DO 320 ITS = 1, NTS
         X(LQTMP1+ITS-1) = ZERO
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 320
         END IF
         DO JTS = 1, NTS
            X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)
     *        +X(LFFCMAT1+(JTS-1)*NTS+ITS-1)*X(LABPOT+JTS-1)
         ENDDO
         X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)*SCALE
 320  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2406,X(LQTMP1),NTS)
C
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),DIPTMP,DUM,
     *              X(LABFLD),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLST),X(LFFIDGROUP),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),X(LQTMP1),
     *              X(LQTMP2),NTS)
C
      CALL VADD(X(LQTMP1),1,X(LQTMP2),1,X(LQTMP2),1,NTS)
C
C     -- CALCULATE INTEGRALS --
C
      IF(GOPARR) CALL DSCAL(L2,ONE/NPROC,H1,1)
      IPCOUNT = ME - 1
      FACTOR=1.0D+00
      IF(TDDFTYP.NE.RNONE) FACTOR=2.0D+00
      DO 200 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 200
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 200
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),X(LFFIDGROUP),
     *             X(LXEFI),X(LYEFI),X(LZEFI),X(LFFLKQMMM),L2)
         DO K=1,L2
            H1(K)=H1(K)
     *           -X(LXEFI+K-1)*DIPTMP(1,IFFAT)*FACTOR
     *           -X(LYEFI+K-1)*DIPTMP(2,IFFAT)*FACTOR
     *           -X(LZEFI+K-1)*DIPTMP(3,IFFAT)*FACTOR
         ENDDO
 200  CONTINUE
      IPCOUNT = ME - 1
      DO 300 ITS=1,NTS
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 300
         END IF
         CALL INTMEP(X(LSCR),X(LFFXTS+ITS-1),X(LFFYTS+ITS-1),
     *               X(LFFZTS+ITS-1))
C
         DO K=1,L2
            H1(K)  = H1(K)
     *              -X(LSCR+K-1)*X(LQTMP2+ITS-1)*FACTOR
         ENDDO
 300  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(687,H1,L2)
C
      CALL RETFM(NEED)
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMPOLFMMNUCMM
      SUBROUTINE QMMMPOLFMMNUCMM(CORD,FFGRD,CHARG,POL,DIP,
     *                           LKQMMM,NONLST,NONLSTQ,IDGROUP)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00, TWO=2.0D+00, THREE=3.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),POL(*),DIP(3,*),
     *          LKQMMM(100,*),NONLST(2,*),NONLSTQ(*),IDGROUP(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C
C     -- FORCE BETWEEN INDUCED DIPOLES AND MM CHARGES
C        FORCE BETWEEN INDUCED DIPOLES AND QM NUC
C        FORCE BETWEEN INDUCED DIPOLES AND INDUCED DIPOLES
C
      IF(IDOPOL.EQ.0) RETURN
C
      DO 100 III = 1, NTODO
         IFFAT = NONLST(1,III)
         JFFAT = NONLST(2,III)
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 100
         IF(CHARG(IFFAT).EQ.ZERO.AND.POL(IFFAT).EQ.ZERO) GOTO 100
         IF(CHARG(JFFAT).EQ.ZERO.AND.POL(JFFAT).EQ.ZERO) GOTO 100
         IF(  POL(IFFAT).EQ.ZERO.AND.POL(JFFAT).EQ.ZERO) GOTO 100
         QI    = CHARG(IFFAT)
         QJ    = CHARG(JFFAT)
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
C
         XGRP  = CORD(1,IDGROUP(IFFAT)) - CORD(1,IDGROUP(JFFAT))
         YGRP  = CORD(2,IDGROUP(IFFAT)) - CORD(2,IDGROUP(JFFAT))
         ZGRP  = CORD(3,IDGROUP(IFFAT)) - CORD(3,IDGROUP(JFFAT))
         PBCX  = XBOX * ANINT(XGRP/XBOX)
         PBCY  = YBOX * ANINT(YGRP/YBOX)
         PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.RRCUT) GOTO 100
         IF(R2.GT.SWRR2) GOTO 100
         CALL SWFUNC(R2,XGRP,YGRP,ZGRP)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         XX    = X*X
         YY    = Y*Y
         ZZ    = Z*Z
         XY    = X*Y
         XZ    = X*Z
         YZ    = Y*Z
         R2    = XX+YY+ZZ
         ONER2 = ONE/R2
         ONER  = SQRT(ONER2)
         ONER3 = ONER2*ONER
         ONER5 = ONER2*ONER3
         ONER7 = ONER2*ONER5
C
C        - FORCES BETWEEN MM CHARGE AND DIPOLE
C
         QIDOT = THREE*ONER5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)*QI
         QJDOT = THREE*ONER5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)*QJ
         QIONER3= QI*ONER3
         QJONER3= QJ*ONER3
C              NEGATIVE FORCE ON QI BY DIPJ
         DXI   = DIPJX*QIONER3 - QIDOT*X
         DYI   = DIPJY*QIONER3 - QIDOT*Y
         DZI   = DIPJZ*QIONER3 - QIDOT*Z
C              NEGATIVE FORCE ON QJ BY DIPI
C                       FORCE ON DIPI BY QJ
         DXJ   = DIPIX*QJONER3 - QJDOT*X
         DYJ   = DIPIY*QJONER3 - QJDOT*Y
         DZJ   = DIPIZ*QJONER3 - QJDOT*Z
C              NEGATIVE FORCE ON IFFAT
         DX    = DXI - DXJ
         DY    = DYI - DYJ
         DZ    = DZI - DZJ
C
C        - FORCES BETWEEN DIPOLE AND DIPOLE -
C
         DOTM  = DIPJX*DIPIX + DIPJY*DIPIY + DIPJZ*DIPIZ
         DOTXY = DIPJY*DIPIX + DIPIY*DIPJX
         DOTXZ = DIPJZ*DIPIX + DIPIZ*DIPJX
         DOTYZ = DIPJY*DIPIZ + DIPIY*DIPJZ
         DOTX  = TWO*DIPJX*DIPIX*X + DOTXY*Y + DOTXZ*Z
         DOTY  = TWO*DIPJY*DIPIY*Y + DOTXY*X + DOTYZ*Z
         DOTZ  = TWO*DIPJZ*DIPIZ*Z + DOTXZ*X + DOTYZ*Y
         DUM   = THREE*ONER5
         TEMP  = DIPIX*DIPJX*XX
     *          +DIPIY*DIPJY*YY
     *          +DIPIZ*DIPJZ*ZZ
     *          +(DIPIX*DIPJY+DIPIY*DIPJX)*XY
     *          +(DIPIX*DIPJZ+DIPIZ*DIPJX)*XZ
     *          +(DIPIY*DIPJZ+DIPIZ*DIPJY)*YZ
         DUM7  = 15.0D+00*TEMP*ONER7
C        - NEGATIVE FORCE ON IFFAT
         DX    = DX - DUM*(DOTM*X+DOTX) + DUM7*X
         DY    = DY - DUM*(DOTM*Y+DOTY) + DUM7*Y
         DZ    = DZ - DUM*(DOTM*Z+DOTZ) + DUM7*Z
C
C        - ENERGY-SWFDX TERMS
C
         FLDIX = QJONER3*X      ! FIELD AT DIPI DUE TO QJ
         FLDIY = QJONER3*Y
         FLDIZ = QJONER3*Z
         FLDJX = QIONER3*(-X)   ! FIELD AT DIPJ DUE TO QI
         FLDJY = QIONER3*(-Y)
         FLDJZ = QIONER3*(-Z)
         EDIQJ = -(FLDIX*DIPIX+FLDIY*DIPIY+FLDIZ*DIPIZ) ! E = -F*D
         EDJQI = -(FLDJX*DIPJX+FLDJY*DIPJY+FLDJZ*DIPJZ)
C
         DOTJ  = THREE*ONER5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)
         FLDIX = -DIPJX*ONER3 + DOTJ*X  ! FIELD AT DIPI DUE TO DIPJ
         FLDIY = -DIPJY*ONER3 + DOTJ*Y
         FLDIZ = -DIPJZ*ONER3 + DOTJ*Z
         EDIDJ = -(DIPIX*FLDIX + DIPIY*FLDIY + DIPIZ*FLDIZ) ! E = -F*D
         EPAIR = EDIQJ + EDJQI + EDIDJ
C
         DEX   = DX*SWF
         DEY   = DY*SWF
         DEZ   = DZ*SWF
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEX
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEY
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEZ
         FFGRD(1,IDGROUP(IFFAT))=FFGRD(1,IDGROUP(IFFAT))+EPAIR*SWFDX
         FFGRD(2,IDGROUP(IFFAT))=FFGRD(2,IDGROUP(IFFAT))+EPAIR*SWFDY
         FFGRD(3,IDGROUP(IFFAT))=FFGRD(3,IDGROUP(IFFAT))+EPAIR*SWFDZ
         FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DEX
         FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DEY
         FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DEZ
         FFGRD(1,IDGROUP(JFFAT))=FFGRD(1,IDGROUP(JFFAT))-EPAIR*SWFDX
         FFGRD(2,IDGROUP(JFFAT))=FFGRD(2,IDGROUP(JFFAT))-EPAIR*SWFDY
         FFGRD(3,IDGROUP(JFFAT))=FFGRD(3,IDGROUP(JFFAT))-EPAIR*SWFDZ
         VIR(1)    =VIR(1)     + DEX*X + EPAIR*SWFDX*XGRP
         VIR(2)    =VIR(2)     + DEY*Y + EPAIR*SWFDY*YGRP
         VIR(3)    =VIR(3)     + DEZ*Z + EPAIR*SWFDZ*ZGRP
 100  CONTINUE
C
C     - FORCES BETWEEN QM NUCLEI AND INDUCED DIPOLE
C
      IF(NAT.LE.0) GOTO 330
C
      IPCOUNT = ME - 1
      IIITOP=0
      DO 300 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(POL(IFFAT).EQ.ZERO) GOTO 300
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 300
         END IF
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
         CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
         CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
         PBCX  = XBOX * ANINT(CXGRP/XBOX)
         PBCY  = YBOX * ANINT(CYGRP/YBOX)
         PBCZ  = ZBOX * ANINT(CZGRP/ZBOX)
         CXGRP = CXGRP - PBCX
         CYGRP = CYGRP - PBCY
         CZGRP = CZGRP - PBCZ
         R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
         IF(R2.GT.RRCUTQ) GOTO 300
         IF(R2.GT.SWRR2Q) GOTO 300
         CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
         CX    = CORD(1,IFFAT) - PBCX
         CY    = CORD(2,IFFAT) - PBCY
         CZ    = CORD(3,IFFAT) - PBCZ
         DO 310 JAT=1,NAT
C
C           - SKIP MM THAT FORM BONDS/ANGLES TO JAT
            DO III = 1, IIITOP
               DO JJJ = 1, 99, 2
                  KK1 = LKQMMM(JJJ  ,III)
                  KK2 = LKQMMM(JJJ+1,III)
                  IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2)GOTO 310
               ENDDO
            ENDDO
C
            QJ    = ZAN(JAT)
            X     = CX - C(1,JAT)
            Y     = CY - C(2,JAT)
            Z     = CZ - C(3,JAT)
            R2    = X*X+Y*Y+Z*Z
            IF(R2.LT.1.0D-10) GOTO 310
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            ONER5 = ONER2*ONER3
C
            QJDOT = THREE*ONER5*(DIPIX*X+DIPIY*Y+DIPIZ*Z)*QJ
            QJONER3= QJ*ONER3
C                 NEGATIVE FORCE ON QJ BY DIPI
C                          FORCE ON DIPI BY QJ
            DXJ   = DIPIX*QJONER3 - QJDOT*X
            DYJ   = DIPIY*QJONER3 - QJDOT*Y
            DZJ   = DIPIZ*QJONER3 - QJDOT*Z
C                 NEGATIVE FORCE ON IFFAT
            DX    = - DXJ
            DY    = - DYJ
            DZ    = - DZJ
C
C           - ENERGY-SWFDX TERMS
C
            FLDIX = QJONER3*X      ! FIELD AT DIPI DUE TO QJ
            FLDIY = QJONER3*Y
            FLDIZ = QJONER3*Z
            EPAIR = -(FLDIX*DIPIX+FLDIY*DIPIY+FLDIZ*DIPIZ) ! E = -F*D
C
            DEX   = DX*SWF
            DEY   = DY*SWF
            DEZ   = DZ*SWF
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEX
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEY
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEZ
            FFGRD(1,IDGROUP(IFFAT))=FFGRD(1,IDGROUP(IFFAT))+EPAIR*SWFDX
            FFGRD(2,IDGROUP(IFFAT))=FFGRD(2,IDGROUP(IFFAT))+EPAIR*SWFDY
            FFGRD(3,IDGROUP(IFFAT))=FFGRD(3,IDGROUP(IFFAT))+EPAIR*SWFDZ
            DE(1,JAT)     =DE(1,JAT)      - DEX
            DE(2,JAT)     =DE(2,JAT)      - DEY
            DE(3,JAT)     =DE(3,JAT)      - DEZ
            VIR(1)        =VIR(1) + DEX*X + EPAIR*SWFDX*XGRP
            VIR(2)        =VIR(2) + DEY*Y + EPAIR*SWFDX*XGRP
            VIR(3)        =VIR(3) + DEZ*Z + EPAIR*SWFDX*XGRP
 310     CONTINUE
 300  CONTINUE
C
 330  CONTINUE
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMPOLFMMPOL
      SUBROUTINE QMMMPOLFMMPOL(CORD,FFGRD,POL,DIP,SIGN,
     *                         NONLST,IDGROUP)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ONE=1.0D+00, ZERO=0.0D+00, TWO=2.0D+00, THREE=3.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),POL(*),DIP(3,*),
     *          NONLST(2,*),IDGROUP(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
C
C     HUI LI, JAN 2011, LINCOLN
C
C     -- FORCE BETWEEN INDUCED DIPOLES AND INDUCED DIPOLES --
C
      IF(IDOPOL.EQ.0) RETURN
C
      DO 100 III = 1, NTODO
         IFFAT = NONLST(1,III)
         JFFAT = NONLST(2,III)
         IF(IFFAT.EQ.0.OR.JFFAT.EQ.0) GOTO 100
         IF(POL(IFFAT).EQ.ZERO) GOTO 100
         DIPIX = DIP(1,IFFAT)
         DIPIY = DIP(2,IFFAT)
         DIPIZ = DIP(3,IFFAT)
         IF(POL(JFFAT).EQ.ZERO) GOTO 100
         DIPJX = DIP(1,JFFAT)
         DIPJY = DIP(2,JFFAT)
         DIPJZ = DIP(3,JFFAT)
C
         XGRP  = CORD(1,IDGROUP(IFFAT)) - CORD(1,IDGROUP(JFFAT))
         YGRP  = CORD(2,IDGROUP(IFFAT)) - CORD(2,IDGROUP(JFFAT))
         ZGRP  = CORD(3,IDGROUP(IFFAT)) - CORD(3,IDGROUP(JFFAT))
         PBCX  = XBOX * ANINT(XGRP/XBOX)
         PBCY  = YBOX * ANINT(YGRP/YBOX)
         PBCZ  = ZBOX * ANINT(ZGRP/ZBOX)
         XGRP  = XGRP - PBCX
         YGRP  = YGRP - PBCY
         ZGRP  = ZGRP - PBCZ
         R2    = XGRP*XGRP+YGRP*YGRP+ZGRP*ZGRP
         IF(R2.GT.RRCUT) GOTO 100
         IF(R2.GT.SWRR2) GOTO 100
         CALL SWFUNC(R2,XGRP,YGRP,ZGRP)
C
         X     = CORD(1,IFFAT) - CORD(1,JFFAT)
         Y     = CORD(2,IFFAT) - CORD(2,JFFAT)
         Z     = CORD(3,IFFAT) - CORD(3,JFFAT)
         X     = X - PBCX
         Y     = Y - PBCY
         Z     = Z - PBCZ
         XX    = X*X
         YY    = Y*Y
         ZZ    = Z*Z
         XY    = X*Y
         XZ    = X*Z
         YZ    = Y*Z
         R2    = XX+YY+ZZ
         ONER2 = ONE/R2
         ONER  = SQRT(ONER2)
         ONER3 = ONER2*ONER
         ONER5 = ONER2*ONER3
         ONER7 = ONER2*ONER5
C
C        - FORCES BETWEEN DIPOLE AND DIPOLE -
C
         DOTM  = DIPJX*DIPIX + DIPJY*DIPIY + DIPJZ*DIPIZ
         DOTXY = DIPJY*DIPIX + DIPIY*DIPJX
         DOTXZ = DIPJZ*DIPIX + DIPIZ*DIPJX
         DOTYZ = DIPJY*DIPIZ + DIPIY*DIPJZ
         DOTX  = TWO*DIPJX*DIPIX*X + DOTXY*Y + DOTXZ*Z
         DOTY  = TWO*DIPJY*DIPIY*Y + DOTXY*X + DOTYZ*Z
         DOTZ  = TWO*DIPJZ*DIPIZ*Z + DOTXZ*X + DOTYZ*Y
         DUM   = THREE*ONER5
         TEMP  = DIPIX*DIPJX*XX
     *          +DIPIY*DIPJY*YY
     *          +DIPIZ*DIPJZ*ZZ
     *          +(DIPIX*DIPJY+DIPIY*DIPJX)*XY
     *          +(DIPIX*DIPJZ+DIPIZ*DIPJX)*XZ
     *          +(DIPIY*DIPJZ+DIPIZ*DIPJY)*YZ
         DUM7  = 15.0D+00*TEMP*ONER7
C        - NEGATIVE FORCE ON IFFAT
         DX    =    - DUM*(DOTM*X+DOTX) + DUM7*X
         DY    =    - DUM*(DOTM*Y+DOTY) + DUM7*Y
         DZ    =    - DUM*(DOTM*Z+DOTZ) + DUM7*Z
C
C        - ENERGY-SWFDX TERMS
C
         DOTJ  = THREE*ONER5*(DIPJX*X+DIPJY*Y+DIPJZ*Z)
         FLDIX = -DIPJX*ONER3 + DOTJ*X  ! FIELD AT DIPI DUE TO DIPJ
         FLDIY = -DIPJY*ONER3 + DOTJ*Y
         FLDIZ = -DIPJZ*ONER3 + DOTJ*Z
         EPAIR = -(DIPIX*FLDIX + DIPIY*FLDIY + DIPIZ*FLDIZ) ! E = -F*D
C
         DEX   = DX*SWF*SIGN
         DEY   = DY*SWF*SIGN
         DEZ   = DZ*SWF*SIGN
         DEXGRP= EPAIR*SWFDX*SIGN
         DEYGRP= EPAIR*SWFDY*SIGN
         DEZGRP= EPAIR*SWFDZ*SIGN
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DEX
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DEY
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DEZ
         FFGRD(1,IDGROUP(IFFAT))=FFGRD(1,IDGROUP(IFFAT))+DEXGRP
         FFGRD(2,IDGROUP(IFFAT))=FFGRD(2,IDGROUP(IFFAT))+DEYGRP
         FFGRD(3,IDGROUP(IFFAT))=FFGRD(3,IDGROUP(IFFAT))+DEZGRP
         FFGRD(1,JFFAT)=FFGRD(1,JFFAT) - DEX
         FFGRD(2,JFFAT)=FFGRD(2,JFFAT) - DEY
         FFGRD(3,JFFAT)=FFGRD(3,JFFAT) - DEZ
         FFGRD(1,IDGROUP(JFFAT))=FFGRD(1,IDGROUP(JFFAT))-DEXGRP
         FFGRD(2,IDGROUP(JFFAT))=FFGRD(2,IDGROUP(JFFAT))-DEYGRP
         FFGRD(3,IDGROUP(JFFAT))=FFGRD(3,IDGROUP(JFFAT))-DEZGRP
         VIR(1)    =VIR(1)     + DEX*X + DEXGRP*XGRP
         VIR(2)    =VIR(2)     + DEY*Y + DEYGRP*YGRP
         VIR(3)    =VIR(3)     + DEZ*Z + DEZGRP*ZGRP
 100  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMPOLFMMSWF
      SUBROUTINE QMMMPOLFMMSWF(DENTOT,DHF,DXY,FFGRD,CORD,NONLSTQ,
     *                         IDGROUP)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00)
C
      DIMENSION DENTOT(*),DHF(*),DXY(*),FFGRD(3,*),CORD(3,*),
     *          NONLSTQ(*),IDGROUP(*)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA RNONE/8HNONE    /
C
C     HUI LI, JAN 2011, LINCOLN
C
C     INTERACTION ENERGY BETWEEN QM ELE AND MM INDUCED DIPOLES -
C     THIS ENERGY IS NOT NECESSARY WHEN COMPUTING THE TOTAL
C     ENERGY OF THE SYSTEM, BUT IS REQUIRED WHEN SWF IS USED (ONLY) FOR
C     MM INDUCED DIPOLES (TO CALCULATE THE FORCES ON INDUCED DIPOLES)
C
      IF(IDOPOL.EQ.0) RETURN
C
      L1 = NUM
      L2 = NUM*(NUM+1)/2
      CALL VALFM(LOADFM)
      LXEFI    = LOADFM   + 1
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LAST     = LZEFI    + L2
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      IPCOUNT = ME-1
      DO 100 IIQ = 1, NTODOQ
         IFFAT = NONLSTQ(IIQ)
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),X(LFFIDGROUP),
     *             X(LXEFI),X(LYEFI),X(LZEFI),X(LFFLKQMMM),L2)
         DUM =-X(LFFDIP+3*(IFFAT-1)  )*TRACEP(DENTOT,X(LXEFI),L1)
     *        -X(LFFDIP+3*(IFFAT-1)+1)*TRACEP(DENTOT,X(LYEFI),L1)
     *        -X(LFFDIP+3*(IFFAT-1)+2)*TRACEP(DENTOT,X(LZEFI),L1)
         IF(MPLEVL.EQ.2) THEN
            DUM=DUM
     *         -X(LFFDIPMP+3*(IFFAT-1)  )*TRACEP(DHF,X(LXEFI),L1)
     *         -X(LFFDIPMP+3*(IFFAT-1)+1)*TRACEP(DHF,X(LYEFI),L1)
     *         -X(LFFDIPMP+3*(IFFAT-1)+2)*TRACEP(DHF,X(LZEFI),L1)
         END IF
         IF(TDDFTYP.NE.RNONE) THEN
            DUM=DUM
     *         -X(LFFDIPTA+3*(IFFAT-1)  )*TRACEP(DHF,X(LXEFI),L1)
     *         -X(LFFDIPTA+3*(IFFAT-1)+1)*TRACEP(DHF,X(LYEFI),L1)
     *         -X(LFFDIPTA+3*(IFFAT-1)+2)*TRACEP(DHF,X(LZEFI),L1)
     *         -X(LFFDIPXY+3*(IFFAT-1)  )*TRACEP(DXY,X(LXEFI),L1)
     *         -X(LFFDIPXY+3*(IFFAT-1)+1)*TRACEP(DXY,X(LYEFI),L1)
     *         -X(LFFDIPXY+3*(IFFAT-1)+2)*TRACEP(DXY,X(LZEFI),L1)
         END IF
C
C        - ELE FIELDS WERE SCALED BY SWF
C          SCALE THEM BACK. NOTE SFW CAN BE ZERO
C          (SWF, SWFDX ARE AVAILABLE FROM ROUTINE QMMMPOLFLDINT)
C
         CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
         CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
         CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
         PBCX  = XBOX*ANINT(CXGRP/XBOX)
         PBCY  = YBOX*ANINT(CYGRP/YBOX)
         PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
         CXGRP = CXGRP - PBCX
         CYGRP = CYGRP - PBCY
         CZGRP = CZGRP - PBCZ
C
         IF(SWF .LT. 1.0D-14) SWF = 1.0D-14
         DUM = DUM/SWF
         FFGRD(1,IDGROUP(IFFAT))=FFGRD(1,IDGROUP(IFFAT)) + DUM*SWFDX
         FFGRD(2,IDGROUP(IFFAT))=FFGRD(2,IDGROUP(IFFAT)) + DUM*SWFDY
         FFGRD(3,IDGROUP(IFFAT))=FFGRD(3,IDGROUP(IFFAT)) + DUM*SWFDZ
         VIR(1)        =VIR(1)         + DUM*SWFDX*CXGRP
         VIR(2)        =VIR(2)         + DUM*SWFDY*CYGRP
         VIR(3)        =VIR(3)         + DUM*SWFDZ*CZGRP
 100  CONTINUE
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMPOLFMM
      SUBROUTINE QMMMPOLFMM(DM,DHF,DXY,CHGINT,CHGINT2,CHGINT3,
     *                      CORD,FFGRD,LKQMMM,NONLSTQ,IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      DIMENSION DM(*),DHF(*),DXY(*),CHGINT(*),
     *          CHGINT2(*),CHGINT3(*),FFGRD(3,*),CORD(3,*),
     *          LKQMMM(100,*),NONLSTQ(*),IDGROUP(*)
C
      DIMENSION DIJ(100),XIN(432),YIN(432),ZIN(432)
      DIMENSION FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100),W2(5),W4(5)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA ZERO,ONE,TWO,FOUR/0.0D+00,1.0D+00,2.0D+00,4.0D+00/
      DATA RLN10 /2.30258D+00/
      DATA RNONE/8HNONE    /
C
C     HUI LI, JAN 2011, LINCOLN
C
C     FORCES ON INDUCED DIPOLES BY QM ELECTRONS
C
      IF(IDOPOL.EQ.0) RETURN
C
      CALL QMMMPOLFMMSWF(DM,DHF,DXY,FFGRD,CORD,NONLSTQ,IDGROUP)
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
      IIITOP=0
C
      DO 100 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
      IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
      CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
      CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
      CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP/XBOX)
      PBCY  = YBOX*ANINT(CYGRP/YBOX)
      PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.RRCUTQ) GOTO 100
      IF(R2.GT.SWRR2Q) GOTO 100
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
C
C     ----- ISHELL
C
      DO 600 II = 1,NSHELL
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GO TO 600
      END IF
      IAT= KATOM(II)
C           
C     - SKIP MM THAT FORM BONDS/ANGLES TO IAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(IAT.EQ.KK1.AND.IFFAT.EQ.KK2) GOTO 600
         ENDDO
      ENDDO
C
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 580 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 580
        END IF
      JAT= KATOM(JJ)
C
C     - SKIP MM THAT FORM BONDS/ANGLES TO JAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2) GOTO 580
         ENDDO
      ENDDO
C
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+2-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ = 0
      MAX = MAXJ
      DO 30 I = MINI,MAXI
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 30 J = MINJ,MAX
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
  30  CONTINUE
      CALL VCLR(CHGINT ,1,3*IJ)
      CALL VCLR(CHGINT2,1,3*IJ)
      CALL VCLR(CHGINT3,1,3*IJ)
C
C     ----- I PRIMITIVE
C
      JGMAX = J2
      DO 520 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      CSI = CS(IG)
      CPI = CP(IG)
      CDI = CD(IG)
      CFI = CF(IG)
C
C     ----- J PRIMITIVE
C
      DO 500 JG = J1,JGMAX
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 500
      FAC =  EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      MAX = MAXJ
      NN = 0
      DUM1=ZERO
      DUM2=DUM1
      DO 170 I=MINI,MAXI
      GO TO (70,80,110,110,90,110,110,95,110,110,
     *       102,110,110,104,110,110,110,110,110,108),I
  70  DUM1=CSI*FAC
      GO TO 110
  80  DUM1=CPI*FAC
      GO TO 110
  90  DUM1=CDI*FAC
      GO TO 110
  95  IF(NORM) DUM1=DUM1*SQRT3
      GO TO 110
 102  DUM1=CFI*FAC
      GO TO 110
 104  DUM1 = DUM1 *SQRT5
      GO TO 110
 108  DUM1 = DUM1 * SQRT3
 110  CONTINUE
      DO 170 J=MINJ,MAX
      GO TO (125,130,160,160,140,160,160,150,160,160,
     *       152,160,160,154,160,160,160,160,160,156),J
  125 DUM2=DUM1*CSJ
      GO TO 160
  130 DUM2=DUM1*CPJ
      GO TO 160
  140 DUM2=DUM1*CDJ
      GO TO 160
  150 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 160
  152 DUM2 = DUM1 * CFJ
      GO TO 160
  154 DUM2 = DUM2 *SQRT5
      GO TO 160
  156 DUM2 = DUM2 * SQRT3
  160 NN=NN+1
  170 DIJ(NN)=DUM2
C
C     ..... HELLMANN-FEYNMAN TERM .....
C
C     DUM = PI212*AA1/THREE
      DUM = PI212*AA1
      DO 380 I = 1,IJ
      FIJ(I) = DIJ(I)*DUM
  380 CONTINUE
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      ICC=1
C
      XX   = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      IF(NROOTS.EQ.5) CALL ROOT5
      IF(NROOTS.EQ.6) CALL ROOT6
      IF(NROOTS.GE.7) THEN
         IF(MASWRK) WRITE(IW,9008)
         CALL ABRT
      END IF
      MM = 0
      DO 401 K = 1,NROOTS
      U2 = AA*U(K)
      U4 = U2*U2
      WW = W(K)
      W2(K) = TWO *WW*U2
      W4(K) = FOUR*WW*U4
      TT = ONE/(AA+U2)
      T  =  SQRT(TT)
      X0 = (AAX+U2*CX)*TT
      Y0 = (AAY+U2*CY)*TT
      Z0 = (AAZ+U2*CZ)*TT
      IN = -4+MM
      DO 400 I = 1,LIT
      IN = IN+4
      NI = I
      DO 400 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL STVINT
      XIN(JN   ) = XINT
      YIN(JN   ) = YINT
      ZIN(JN   ) = ZINT
      CALL POLXYZ
      XIN(JN+144) = XINT
      YIN(JN+144) = YINT
      ZIN(JN+144) = ZINT
      CALL EFQXYZ
      XIN(JN+288) = XINT
      YIN(JN+288) = YINT
      ZIN(JN+288) = ZINT
  400 CONTINUE
  401 MM = MM+16
      DO 403 I = 1,IJ
      NX    = IJX(I)
      NY    = IJY(I)
      NZ    = IJZ(I)
      DUMXX = ZERO
      DUMYY = ZERO
      DUMZZ = ZERO
      DUMXY = ZERO
      DUMXZ = ZERO
      DUMYZ = ZERO
      MM    = 0
      DO 402 K = 1,NROOTS
      DUMXX= DUMXX+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM    )*W2(K)
     *            -XIN(NX+MM+288)*YIN(NY+MM    )*ZIN(NZ+MM    )*W4(K)
      DUMYY= DUMYY+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM    )*W2(K)
     *            -XIN(NX+MM    )*YIN(NY+MM+288)*ZIN(NZ+MM    )*W4(K)
      DUMZZ= DUMZZ+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM    )*W2(K)
     *            -XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM+288)*W4(K)
      DUMXY= DUMXY-XIN(NX+MM+144)*YIN(NY+MM+144)*ZIN(NZ+MM    )*W4(K)
      DUMXZ= DUMXZ-XIN(NX+MM+144)*YIN(NY+MM    )*ZIN(NZ+MM+144)*W4(K)
      DUMYZ= DUMYZ-XIN(NX+MM    )*YIN(NY+MM+144)*ZIN(NZ+MM+144)*W4(K)
  402 MM  = MM+16
      DUM = FIJ(I)*SWF
      CHGINT(ICC  ) = CHGINT(ICC  ) +
     * DUM * ( DUMXX*X(LFFDIP+3*(IFFAT-1)  )
     *       + DUMXY*X(LFFDIP+3*(IFFAT-1)+1)
     *       + DUMXZ*X(LFFDIP+3*(IFFAT-1)+2))
      CHGINT(ICC+1) = CHGINT(ICC+1) +
     * DUM * ( DUMXY*X(LFFDIP+3*(IFFAT-1)  )
     *       + DUMYY*X(LFFDIP+3*(IFFAT-1)+1)
     *       + DUMYZ*X(LFFDIP+3*(IFFAT-1)+2))
      CHGINT(ICC+2) = CHGINT(ICC+2) +
     * DUM * ( DUMXZ*X(LFFDIP+3*(IFFAT-1)  )
     *       + DUMYZ*X(LFFDIP+3*(IFFAT-1)+1)
     *       + DUMZZ*X(LFFDIP+3*(IFFAT-1)+2))
      IF(MPLEVL.EQ.2) THEN
         CHGINT2(ICC  ) = CHGINT2(ICC  ) +
     *    DUM * ( DUMXX*X(LFFDIPMP+3*(IFFAT-1)  )
     *          + DUMXY*X(LFFDIPMP+3*(IFFAT-1)+1)
     *          + DUMXZ*X(LFFDIPMP+3*(IFFAT-1)+2))
         CHGINT2(ICC+1) = CHGINT2(ICC+1) +
     *    DUM * ( DUMXY*X(LFFDIPMP+3*(IFFAT-1)  )
     *          + DUMYY*X(LFFDIPMP+3*(IFFAT-1)+1)
     *          + DUMYZ*X(LFFDIPMP+3*(IFFAT-1)+2))
         CHGINT2(ICC+2) = CHGINT2(ICC+2) +
     *    DUM * ( DUMXZ*X(LFFDIPMP+3*(IFFAT-1)  )
     *          + DUMYZ*X(LFFDIPMP+3*(IFFAT-1)+1)
     *          + DUMZZ*X(LFFDIPMP+3*(IFFAT-1)+2))
      END IF
      IF(TDDFTYP.NE.RNONE) THEN
         CHGINT2(ICC  ) = CHGINT2(ICC  ) +
     *    DUM * ( DUMXX*X(LFFDIPTA+3*(IFFAT-1)  )
     *          + DUMXY*X(LFFDIPTA+3*(IFFAT-1)+1)
     *          + DUMXZ*X(LFFDIPTA+3*(IFFAT-1)+2))
         CHGINT2(ICC+1) = CHGINT2(ICC+1) +
     *    DUM * ( DUMXY*X(LFFDIPTA+3*(IFFAT-1)  )
     *          + DUMYY*X(LFFDIPTA+3*(IFFAT-1)+1)
     *          + DUMYZ*X(LFFDIPTA+3*(IFFAT-1)+2))
         CHGINT2(ICC+2) = CHGINT2(ICC+2) +
     *    DUM * ( DUMXZ*X(LFFDIPTA+3*(IFFAT-1)  )
     *          + DUMYZ*X(LFFDIPTA+3*(IFFAT-1)+1)
     *          + DUMZZ*X(LFFDIPTA+3*(IFFAT-1)+2))
C
         CHGINT3(ICC  ) = CHGINT3(ICC  ) +
     *    DUM * ( DUMXX*X(LFFDIPXY+3*(IFFAT-1)  )
     *          + DUMXY*X(LFFDIPXY+3*(IFFAT-1)+1)
     *          + DUMXZ*X(LFFDIPXY+3*(IFFAT-1)+2))
         CHGINT3(ICC+1) = CHGINT3(ICC+1) +
     *    DUM * ( DUMXY*X(LFFDIPXY+3*(IFFAT-1)  )
     *          + DUMYY*X(LFFDIPXY+3*(IFFAT-1)+1)
     *          + DUMYZ*X(LFFDIPXY+3*(IFFAT-1)+2))
         CHGINT3(ICC+2) = CHGINT3(ICC+2) +
     *    DUM * ( DUMXZ*X(LFFDIPXY+3*(IFFAT-1)  )
     *          + DUMYZ*X(LFFDIPXY+3*(IFFAT-1)+1)
     *          + DUMZZ*X(LFFDIPXY+3*(IFFAT-1)+2))
      END IF
      ICC=ICC+3
 403  CONTINUE
 500  CONTINUE
 520  CONTINUE
C
C     ----- END OF *PRIMITIVE* LOOPS -----
C
      MAX=MAXJ
      NN=0
      ICC=1
C
      DO 550 I=MINI,MAXI
      LI=LOCI+I
      DO 550 J=MINJ,MAX
      LJ=LOCJ+J
      IF (LI-LJ) 920,940,940
  920 ID = LJ
      JD = LI
      GO TO 960
  940 ID = LI
      JD = LJ
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT(ICC  )
      FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT(ICC+1)
      FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT(ICC+2)
      VIR(1)        =VIR(1)         + DUM*CHGINT(ICC  )*CX
      VIR(2)        =VIR(2)         + DUM*CHGINT(ICC+1)*CY
      VIR(3)        =VIR(3)         + DUM*CHGINT(ICC+2)*CZ
      IF(MPLEVL.EQ.2 .OR. TDDFTYP.NE.RNONE) THEN
         DUM = DHF(NN)
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT2(ICC  )
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT2(ICC+1)
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT2(ICC+2)
         VIR(1)        =VIR(1)         + DUM*CHGINT2(ICC  )*CX
         VIR(2)        =VIR(2)         + DUM*CHGINT2(ICC+1)*CY
         VIR(3)        =VIR(3)         + DUM*CHGINT2(ICC+2)*CZ
      END IF
      IF(TDDFTYP.NE.RNONE) THEN
         DUM = DXY(NN)
         FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DUM*CHGINT3(ICC  )
         FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DUM*CHGINT3(ICC+1)
         FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DUM*CHGINT3(ICC+2)
         VIR(1)        =VIR(1)         + DUM*CHGINT2(ICC  )*CX
         VIR(2)        =VIR(2)         + DUM*CHGINT2(ICC+1)*CY
         VIR(3)        =VIR(3)         + DUM*CHGINT2(ICC+2)*CZ
      END IF
      ICC=ICC+3
  550 CONTINUE
  580 CONTINUE
  600 CONTINUE
  100 CONTINUE
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN QMMMPOLFMM.  CALL A PROGRAMMER/
     *          QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMPOLFQM
      SUBROUTINE QMMMPOLFQM(DM,DIP,CORD,NONLSTQ,LKQMMM,IDGROUP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL ISKIP
      LOGICAL DBG,NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      DIMENSION DM(*),DIP(3,*),CORD(3,*),NONLSTQ(*),LKQMMM(100,*),
     *          IDGROUP(*)
      DIMENSION ISKIP(35),INDX(70)
      DIMENSION IX(35),IY(35),IZ(35),JX(20),JY(20),JZ(20)
      DIMENSION IJG(210),IJX(210),IJY(210),IJZ(210)
      DIMENSION XIN(200),YIN(200),ZIN(200),G(210),DIJ(210)
      DIMENSION FIJ(210)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
      PARAMETER (PI212=1.1283791670955D+00)
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00)
C
      DATA CHECK/8HCHECK   /, DEBUG/8HDEBUG   /, DBUGME/8HTVDER   /
C
      DATA INDX / 1, 2, 3, 4, 5, 6, 7, 8, 9,10,
     1           11,12,13,14,15,16,17,18,19,20,
     2           -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
     3           -0,-0,-0,-0,-0,
     4           -0, 1, 2, 3, 1, 2, 3, 4, 5, 6,
     5            4, 5, 6, 7, 8, 9,10,11,12,13,
     6            7, 8, 9,10,11,12,13,14,15,16,
     7           17,18,19,20,21/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5,
     2         17, 1, 1,13,13, 5, 1, 5, 1, 9,
     3          9, 1, 9, 5, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5,
     2          1,17, 1, 5, 1,13,13, 1, 5, 9,
     3          1, 9, 5, 9, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5,
     2          1, 1,17, 1, 5, 1, 5,13,13, 1,
     3          9, 9, 5, 5, 9/
C
C
C     HUI LI, JAN 2011, LINCOLN
C
C     FORCES ON ELECTRONS BY INDUCED DIPOLES
C
      IF(IDOPOL.EQ.0) RETURN
C
C     INITIALIZATION FOR PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      DBG = .FALSE.
      IF (EXETYP.EQ.DEBUG  .OR. EXETYP.EQ.DBUGME  .OR.
     *    NPRINT.EQ.-3) THEN
         DBG = .TRUE.
      END IF
      IF (DBG .AND. MASWRK) WRITE (IW,9008)
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
      IIITOP=0
C
      IF (EXETYP .EQ. CHECK) GO TO 1120
C
C     ----- I SHELL
C
      DO 1060 II = 1,NSHELL
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GO TO 1060
      END IF
      IAT = KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)+1
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      DO 100 I=1,35
 100  ISKIP(I)=.TRUE.
      DO 260 I=MINI,MAXI
      GO TO (110,140,260,260,180,260,260,260,260,260,
     *       220,260,260,260,260,260,260,260,260,260),I
 110  DO 120 K=2,4
 120  ISKIP(K)=.FALSE.
      GO TO 260
 140  DO 160 K=5,10
 160  ISKIP(K)=.FALSE.
      ISKIP(1)=.FALSE.
      GO TO 260
 180  DO 200 K=2,4
 200  ISKIP(K)=.FALSE.
      DO 210 K=11,20
 210  ISKIP(K)=.FALSE.
      GO TO 260
 220  DO 240 K=5,10
 240  ISKIP(K)=.FALSE.
      DO 250 K=21,35
 250  ISKIP(K)=.FALSE.
 260  CONTINUE
C
C     ----- J SHELL
C
      DO 1040 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 1040
        END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      N0 = 0
      IF (LIT .GE. 4) N0 = 35
      IJ = 0
      DO 340 I = 1,35
      IF (ISKIP(I)) GO TO 340
      IN = INDX(I+N0)
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 320 J = MINJ,MAXJ
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IJG(IJ) = IN+21*(J-MINJ)
  320 CONTINUE
  340 CONTINUE
      DO 360 I = 1,IJ
      N = IJG(I)
  360 G(N) = ZERO
C
C     ----- I PRIMITIVE
C
      DO 840 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
      CSI = CP(IG)
      CPI = CS(IG)*DUM
      IF (LIT .EQ. 4) CPI = CD(IG)
      CDI = CP(IG)*DUM
      IF (LIT .EQ. 5) CDI = CF(IG)
      CFI = CD(IG)*DUM
      CGI = CF(IG)*DUM
C
C     ----- J PRIMITIVE
C
      DO 820 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 820
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      NN = 0
      DUM1 = ZERO
      DUM2 = DUM1
      DO 600 I=1,35
      IF(ISKIP(I)) GO TO 600
      GO TO (370,380,420,420,390,420,420,420,420,420,
     1       400,420,420,420,420,420,420,420,420,420,
     2       410,420,420,420,420,420,420,420,420,420,
     3       420,420,420,420,420),I
 370  DUM1=CSI*FAC
      GO TO 420
 380  DUM1=CPI*FAC
      GO TO 420
 390  DUM1=CDI*FAC
      GO TO 420
 400  DUM1=CFI*FAC
      GO TO 420
 410  DUM1 = CGI*FAC
 420  CONTINUE
      DO 580 J=MINJ,MAXJ
      GO TO (430,440,560,560,460,560,560,480,560,560,
     1       500,560,560,520,560,560,560,560,560,540),J
  430 DUM2=DUM1*CSJ
      GO TO 560
  440 DUM2=DUM1*CPJ
      GO TO 560
  460 DUM2=DUM1*CDJ
      GO TO 560
  480 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 560
  500 DUM2 = DUM1 * CFJ
      GO TO 560
  520 DUM2 = DUM2 *SQRT5
      GO TO 560
  540 DUM2 = DUM2 * SQRT3
  560 NN=NN+1
  580 DIJ(NN)=DUM2
  600 CONTINUE
C
C     ..... BASIC DIPOLE TERM
C
      DUM = 2*PI212*AA1
      DO 700 I = 1,IJ
  700 FIJ(I) = DIJ(I)*DUM
      AAX = AA*AX
      AAY = AA*AY
      AAZ = AA*AZ
C
      DO 818 IIQ = 1, NTODOQ
      IFFAT = NONLSTQ(IIQ)
C
C     - SKIP MM THAT FORM BONDS/ANGLES TO IAT OR JAT
      DO III = 1, IIITOP
         DO JJJ = 1, 99, 2
            KK1 = LKQMMM(JJJ  ,III)
            KK2 = LKQMMM(JJJ+1,III)
            IF(IAT.EQ.KK1.AND.IFFAT.EQ.KK2) GOTO 818
            IF(JAT.EQ.KK1.AND.IFFAT.EQ.KK2) GOTO 818
         ENDDO
      ENDDO
C
      CXGRP = CORD(1,IDGROUP(IFFAT)) - QMCX
      CYGRP = CORD(2,IDGROUP(IFFAT)) - QMCY
      CZGRP = CORD(3,IDGROUP(IFFAT)) - QMCZ
      PBCX  = XBOX*ANINT(CXGRP/XBOX)
      PBCY  = YBOX*ANINT(CYGRP/YBOX)
      PBCZ  = ZBOX*ANINT(CZGRP/ZBOX)
      CXGRP = CXGRP - PBCX
      CYGRP = CYGRP - PBCY
      CZGRP = CZGRP - PBCZ
      R2    = CXGRP*CXGRP+CYGRP*CYGRP+CZGRP*CZGRP
      IF(R2.GT.RRCUTQ) GOTO 818
      IF(R2.GT.SWRR2Q) GOTO 818
      CALL SWFUNCQ(R2,CXGRP,CYGRP,CZGRP)
      CX    = CORD(1,IFFAT) - PBCX
      CY    = CORD(2,IFFAT) - PBCY
      CZ    = CORD(3,IFFAT) - PBCZ
      XMU = DIP(1,IFFAT)
      YMU = DIP(2,IFFAT)
      ZMU = DIP(3,IFFAT)
      XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3)CALL RT123
      IF(NROOTS.EQ.4)CALL ROOT4
      IF(NROOTS.EQ.5)CALL ROOT5
      MM = 0
      DO 740 K = 1,NROOTS
      UU = AA*U(K)
      WW = W(K)
      WW = WW*UU
      TT = ONE/(AA+UU)
      T = SQRT(TT)
      X0 = (AAX+UU*CX)*TT
      Y0 = (AAY+UU*CY)*TT
      Z0 = (AAZ+UU*CZ)*TT
      IN = -4+MM
      DO 720 I = 1,LIT
      IN = IN+4
      NI = I
      DO 720 J = 1,LJT
      JN = IN+J
      NJ = J
      CALL VINT
      XIN(JN) = XINT
      YIN(JN) = YINT
      ZIN(JN) = ZINT*WW
      CALL PDXYZ
      XIN(JN+100) = XINT
      YIN(JN+100) = YINT
      ZIN(JN+100) = ZINT*WW
  720 CONTINUE
  740 MM = MM+20
      DO 780 I = 1,IJ
      N = IJG(I)
      NX = IJX(I)
      NY = IJY(I)
      NZ = IJZ(I)
      DUMX = ZERO
      DUMY = ZERO
      DUMZ = ZERO
      MM = 0
      DO 760 K = 1,NROOTS
      DUMX = DUMX+XIN(NX+MM+100)*YIN(NY+MM    )*ZIN(NZ+MM    )
      DUMY = DUMY+XIN(NX+MM    )*YIN(NY+MM+100)*ZIN(NZ+MM    )
      DUMZ = DUMZ+XIN(NX+MM    )*YIN(NY+MM    )*ZIN(NZ+MM+100)
  760 MM = MM+20
      DUM = FIJ(I)*SWF
  780 G(N) = G(N)-DUM*(DUMX*XMU+DUMY*YMU+DUMZ*ZMU)
  818 CONTINUE
  820 CONTINUE
  840 CONTINUE
C
C     ----- FORM INTEGRALS OVER DERIVATIVES -----
C
      NN = 0
      N = 1
      DO 900 J = MINJ,MAXJ
      IF (MINI .GT. 1) GO TO 860
      NN = NN+1
      XIN(NN) = G(N+ 1)
      YIN(NN) = G(N+ 2)
      ZIN(NN) = G(N+ 3)
      IF (MAXI .EQ. 1) GO TO 900
  860 IF (MINI .GT. 2) GO TO 880
      NN = NN+1
      XIN(NN) = (G(N+ 4)-G(N ))
      YIN(NN) = G(N+ 7)
      ZIN(NN) = G(N+ 8)
      NN = NN+1
      XIN(NN) = G(N+ 7)
      YIN(NN) = (G(N+ 5)-G(N ))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = G(N+ 9)
      ZIN(NN) = (G(N+ 6)-G(N ))
      IF (MAXI .EQ. 4) GO TO 900
  880 CONTINUE
      IF (MINI .GT. 5) GO TO 890
      NN = NN+1
      XIN(NN) = (G(N+ 3)-G(N )-G(N ))
      YIN(NN) = G(N+ 6)
      ZIN(NN) = G(N+ 7)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = (G(N+ 4)-G(N+ 1)-G(N+ 1))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+10)
      YIN(NN) = G(N+11)
      ZIN(NN) = (G(N+ 5)-G(N+ 2)-G(N+ 2))
      NN = NN+1
      DUM = ONE
      IF (NORM) DUM = SQRT3
      XIN(NN) = DUM*(G(N+ 6)-G(N+ 1))
      YIN(NN) = DUM*(G(N+ 8)-G(N ))
      ZIN(NN) = DUM* G(N+12)
      NN = NN+1
      XIN(NN) = DUM*(G(N+ 7)-G(N+ 2))
      YIN(NN) = DUM* G(N+12)
      ZIN(NN) = DUM*(G(N+10)-G(N ))
      NN = NN+1
      XIN(NN) = DUM* G(N+12)
      YIN(NN) = DUM*(G(N+ 9)-G(N+ 2))
      ZIN(NN) = DUM*(G(N+11)-G(N+ 1))
      IF(MAXI.EQ.10) GO TO 900
 890  CONTINUE
      NN=NN+1
      XIN(NN)=(G(N+ 6)-G(N   )-G(N   )-G(N   ))
      YIN(NN)= G(N+ 9)
      ZIN(NN)= G(N+10)
      NN=NN+1
      XIN(NN)= G(N+11)
      YIN(NN)=(G(N+ 7)-G(N+ 1)-G(N+ 1)-G(N+ 1))
      ZIN(NN)= G(N+12)
      NN=NN+1
      XIN(NN)= G(N+13)
      YIN(NN)= G(N+14)
      ZIN(NN)=(G(N+ 8)-G(N+ 2)-G(N+ 2)-G(N+ 2))
      NN=NN+1
      DUM=ONE
      IF(NORM) DUM=SQRT5
      XIN(NN)=DUM* (G(N+ 9)-G(N+ 3)-G(N+ 3))
      YIN(NN)=DUM* (G(N+15)-G(N  ))
      ZIN(NN)=DUM* G(N+18)
      NN=NN+1
      XIN(NN)=DUM* (G(N+10)-G(N+ 4)-G(N+ 4))
      YIN(NN)=DUM* G(N+18)
      ZIN(NN)=DUM* (G(N+16)-G(N  ))
      NN=NN+1
      XIN(NN)=DUM* (G(N+15)-G(N+ 1))
      YIN(NN)=DUM* (G(N+11)-G(N+ 3)-G(N+ 3))
      ZIN(NN)=DUM*  G(N+19)
      NN=NN+1
      XIN(NN)=DUM* G(N+19)
      YIN(NN)=DUM* (G(N+12)-G(N+ 5)-G(N+ 5))
      ZIN(NN)=DUM* (G(N+17)-G(N+ 1))
      NN=NN+1
      XIN(NN)=DUM* (G(N+16)-G(N+ 2))
      YIN(NN)=DUM*  G(N+20)
      ZIN(NN)=DUM* (G(N+13)-G(N+ 4)-G(N+ 4))
      NN=NN+1
      XIN(NN)=DUM*  G(N+20)
      YIN(NN)=DUM* (G(N+17)-G(N+ 2))
      ZIN(NN)=DUM* (G(N+14)-G(N+ 5)-G(N+ 5))
      NN=NN+1
      IF(NORM) DUM=DUM*SQRT3
      XIN(NN)=DUM* (G(N+18)-G(N+ 5))
      YIN(NN)=DUM* (G(N+19)-G(N+ 4))
      ZIN(NN)=DUM* (G(N+20)-G(N+ 3))
  900 N = N+21
C
C     ----- CALCULATE CONTRIBUTION TO GRADIENT -----
C
      N = 0
      DO 980 J = MINJ,MAXJ
      JN = LOCJ+J
      DO 980 I = MINI,MAXI
      N = N+1
      IN = LOCI+I
      IF (IN-JN) 920,940,940
  920 ID = JN
      JD = IN
      GO TO 960
  940 ID = IN
      JD = JN
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      DUM = DUM+DUM
      DE(1,IAT) = DE(1,IAT)+DUM*XIN(N)
      DE(2,IAT) = DE(2,IAT)+DUM*YIN(N)
      DE(3,IAT) = DE(3,IAT)+DUM*ZIN(N)
C     - NO VIR(3) ON QM ATOMS. ALL ARE DONE ON MM ATOMS -
  980 CONTINUE
 1040 CONTINUE
 1060 CONTINUE
 1120 CONTINUE
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
 9008 FORMAT(/' NUMBER OF POLYNOMIAL ROOTS NEEDED (NROOTS) IS GREATER',
     *        ' THAN 6 IN QMMMPOLFQM.  CALL A PROGRAMMER/
     *          QUANTUM CHEMIST.')
      END
C*MODULE QUANPO  *DECK QMMMRXNFQM
      SUBROUTINE QMMMRXNFQM(DM,QRXN,NTS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL ISKIP
      LOGICAL NORM,GOPARR,DSKWRK,MASWRK,NXT
C
      DIMENSION DM(*),QRXN(NTS)
C
      DIMENSION ISKIP(35),INDX(70)
      DIMENSION IX(35),IY(35),IZ(35),JX(20),JY(20),JZ(20)
      DIMENSION IJG(210),IJX(210),IJY(210),IJZ(210)
      DIMENSION XIN(200),YIN(200),ZIN(200),G(210),DIJ(210)
      DIMENSION FIJ(210)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / X(1)
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
      PARAMETER (PI212=1.1283791670955D+00)
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00)
C
      DATA CHECK/8HCHECK   /
      DATA INDX / 1, 2, 3, 4, 5, 6, 7, 8, 9,10,
     1           11,12,13,14,15,16,17,18,19,20,
     2           -0,-0,-0,-0,-0,-0,-0,-0,-0,-0,
     3           -0,-0,-0,-0,-0,
     4           -0, 1, 2, 3, 1, 2, 3, 4, 5, 6,
     5            4, 5, 6, 7, 8, 9,10,11,12,13,
     6            7, 8, 9,10,11,12,13,14,15,16,
     7           17,18,19,20,21/
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5,
     2         17, 1, 1,13,13, 5, 1, 5, 1, 9,
     3          9, 1, 9, 5, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5,
     2          1,17, 1, 5, 1,13,13, 1, 5, 9,
     3          1, 9, 5, 9, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5,
     2          1, 1,17, 1, 5, 1, 5,13,13, 1,
     3          9, 9, 5, 5, 9/
C
C     DEJUN SI, FEB 2011, LINCOLN
C
C     --- FORCE ON QM ELECTRONS BY SURFACE CHARGE ---
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      LCNT = -1
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
      IF (EXETYP .EQ. CHECK) GO TO 1120
C
C     -- I SHELL
C
      DO 1060 II = 1,NSHELL
C
      IF(NXT .AND. GOPARR) THEN
         LCNT = LCNT + 1
         IF(LCNT.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.LCNT) GO TO 1060
      END IF
      IAT = KATOM(II)
      XI = C(1,IAT)
      YI = C(2,IAT)
      ZI = C(3,IAT)
      I1 = KSTART(II)
      I2 = I1+KNG(II)-1
      LIT = KTYPE(II)+1
      MINI = KMIN(II)
      MAXI = KMAX(II)
      LOCI = KLOC(II)-MINI
      DO 100 I=1,35
 100  ISKIP(I)=.TRUE.
      DO 260 I=MINI,MAXI
      GO TO (110,140,260,260,180,260,260,260,260,260,
     *       220,260,260,260,260,260,260,260,260,260),I
 110  DO 120 K=2,4
 120  ISKIP(K)=.FALSE.
      GO TO 260
 140  DO 160 K=5,10
 160  ISKIP(K)=.FALSE.
      ISKIP(1)=.FALSE.
      GO TO 260
 180  DO 200 K=2,4
 200  ISKIP(K)=.FALSE.
      DO 210 K=11,20
 210  ISKIP(K)=.FALSE.
      GO TO 260
 220  DO 240 K=5,10
 240  ISKIP(K)=.FALSE.
      DO 250 K=21,35
 250  ISKIP(K)=.FALSE.
 260  CONTINUE
C
C     -- J SHELL
C
      DO 1040 JJ = 1,NSHELL
        IF((.NOT.NXT) .AND. GOPARR) THEN
           IPCOUNT = IPCOUNT + 1
           IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 1040
        END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      NROOTS = (LIT+LJT+1-2)/2 + 1
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     -- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      N0 = 0
      IF (LIT .GE. 4) N0 = 35
      IJ = 0
      DO 340 I = 1,35
      IF (ISKIP(I)) GO TO 340
      IN = INDX(I+N0)
      NX = IX(I)
      NY = IY(I)
      NZ = IZ(I)
      DO 320 J = MINJ,MAXJ
      IJ = IJ+1
      IJX(IJ) = NX+JX(J)
      IJY(IJ) = NY+JY(J)
      IJZ(IJ) = NZ+JZ(J)
      IJG(IJ) = IN+21*(J-MINJ)
  320 CONTINUE
  340 CONTINUE
      DO 360 I = 1,IJ
      N = IJG(I)
  360 G(N) = ZERO
C
C     -- I PRIMITIVE
C
      DO 840 IG = I1,I2
      AI = EX(IG)
      ARRI = AI*RR
      AXI = AI*XI
      AYI = AI*YI
      AZI = AI*ZI
      DUM = AI+AI
      CSI = CP(IG)
      CPI = CS(IG)*DUM
      IF (LIT .EQ. 4) CPI = CD(IG)
      CDI = CP(IG)*DUM
      IF (LIT .EQ. 5) CDI = CF(IG)
      CFI = CD(IG)*DUM
      CGI = CF(IG)*DUM
C
C     -- J PRIMITIVE
C
      DO 820 JG = J1,J2
      AJ = EX(JG)
      AA = AI+AJ
      AA1 = ONE/AA
      DUM = AJ*ARRI*AA1
      IF (DUM .GT. TOL) GO TO 820
      FAC = EXP(-DUM)
      CSJ = CS(JG)
      CPJ = CP(JG)
      CDJ = CD(JG)
      CFJ = CF(JG)
      AX = (AXI+AJ*XJ)*AA1
      AY = (AYI+AJ*YJ)*AA1
      AZ = (AZI+AJ*ZJ)*AA1
C
C     -- DENSITY FACTOR
C
      NN = 0
      DUM1 = ZERO
      DUM2 = DUM1
      DO 600 I=1,35
      IF(ISKIP(I)) GO TO 600
      GO TO (370,380,420,420,390,420,420,420,420,420,
     *       400,420,420,420,420,420,420,420,420,420,
     *       410,420,420,420,420,420,420,420,420,420,
     *       420,420,420,420,420),I
 370  DUM1=CSI*FAC
      GO TO 420
 380  DUM1=CPI*FAC
      GO TO 420
 390  DUM1=CDI*FAC
      GO TO 420
 400  DUM1=CFI*FAC
      GO TO 420
 410  DUM1 = CGI*FAC
 420  CONTINUE
      DO 580 J=MINJ,MAXJ
      GO TO (430,440,560,560,460,560,560,480,560,560,
     *       500,560,560,520,560,560,560,560,560,540),J
  430 DUM2=DUM1*CSJ
      GO TO 560
  440 DUM2=DUM1*CPJ
      GO TO 560
  460 DUM2=DUM1*CDJ
      GO TO 560
  480 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 560
  500 DUM2 = DUM1 * CFJ
      GO TO 560
  520 DUM2 = DUM2 *SQRT5
      GO TO 560
  540 DUM2 = DUM2 * SQRT3
  560 NN=NN+1
  580 DIJ(NN)=DUM2
  600 CONTINUE
C
C     ....BASIC CHARGE TERM
C
      DUM = PI212*AA1
      DO 700 I=1,IJ
 700  FIJ(I)=DIJ(I)*DUM
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
C
      DO 710 ITS = 1,NTS
      CX    = X(LFFXTS+ITS-1) - ZERO
      CY    = X(LFFYTS+ITS-1) - ZERO
      CZ    = X(LFFZTS+ITS-1) - ZERO
      ZNUC = -QRXN(ITS)
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3)CALL RT123
      IF(NROOTS.EQ.4)CALL ROOT4
      IF(NROOTS.EQ.5)CALL ROOT5
      MM=0
      DO 806 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)*ZNUC
      TT=ONE/(AA+UU)
      T =SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 804 I=1,LIT
      IN=IN+4
      NI=I
      DO 804 J=1,LJT
      JN=IN+J
      NJ=J
      CALL VINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
 804  CONTINUE
 806  MM=MM+20
      DO 810 I=1,IJ
      N=IJG(I)
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUM=ZERO
      MM=0
      DO 808 K=1,NROOTS
      DUM=DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
 808  MM=MM+20
C810  G(N)=G(N)+DUM*FIJ(I)*SWF
 810  G(N)=G(N)+DUM*FIJ(I)
 710  CONTINUE
C
C     -- END OF PRIMITIVE LOOPS -----
C
  820 CONTINUE
  840 CONTINUE
C
C     -- FORM INTEGRALS OVER DERIVATIVES -----
C
      NN = 0
      N = 1
      DO 900 J = MINJ,MAXJ
      IF (MINI .GT. 1) GO TO 860
      NN = NN+1
      XIN(NN) = G(N+ 1)
      YIN(NN) = G(N+ 2)
      ZIN(NN) = G(N+ 3)
      IF (MAXI .EQ. 1) GO TO 900
  860 IF (MINI .GT. 2) GO TO 880
      NN = NN+1
      XIN(NN) = (G(N+ 4)-G(N ))
      YIN(NN) = G(N+ 7)
      ZIN(NN) = G(N+ 8)
      NN = NN+1
      XIN(NN) = G(N+ 7)
      YIN(NN) = (G(N+ 5)-G(N ))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = G(N+ 9)
      ZIN(NN) = (G(N+ 6)-G(N ))
      IF (MAXI .EQ. 4) GO TO 900
  880 CONTINUE
      IF (MINI .GT. 5) GO TO 890
      NN = NN+1
      XIN(NN) = (G(N+ 3)-G(N )-G(N ))
      YIN(NN) = G(N+ 6)
      ZIN(NN) = G(N+ 7)
      NN = NN+1
      XIN(NN) = G(N+ 8)
      YIN(NN) = (G(N+ 4)-G(N+ 1)-G(N+ 1))
      ZIN(NN) = G(N+ 9)
      NN = NN+1
      XIN(NN) = G(N+10)
      YIN(NN) = G(N+11)
      ZIN(NN) = (G(N+ 5)-G(N+ 2)-G(N+ 2))
      NN = NN+1
      DUM = ONE
      IF (NORM) DUM = SQRT3
      XIN(NN) = DUM*(G(N+ 6)-G(N+ 1))
      YIN(NN) = DUM*(G(N+ 8)-G(N ))
      ZIN(NN) = DUM* G(N+12)
      NN = NN+1
      XIN(NN) = DUM*(G(N+ 7)-G(N+ 2))
      YIN(NN) = DUM* G(N+12)
      ZIN(NN) = DUM*(G(N+10)-G(N ))
      NN = NN+1
      XIN(NN) = DUM* G(N+12)
      YIN(NN) = DUM*(G(N+ 9)-G(N+ 2))
      ZIN(NN) = DUM*(G(N+11)-G(N+ 1))
      IF(MAXI.EQ.10) GO TO 900
 890  CONTINUE
      NN=NN+1
      XIN(NN)=(G(N+ 6)-G(N   )-G(N   )-G(N   ))
      YIN(NN)= G(N+ 9)
      ZIN(NN)= G(N+10)
      NN=NN+1
      XIN(NN)= G(N+11)
      YIN(NN)=(G(N+ 7)-G(N+ 1)-G(N+ 1)-G(N+ 1))
      ZIN(NN)= G(N+12)
      NN=NN+1
      XIN(NN)= G(N+13)
      YIN(NN)= G(N+14)
      ZIN(NN)=(G(N+ 8)-G(N+ 2)-G(N+ 2)-G(N+ 2))
      NN=NN+1
      DUM=ONE
      IF(NORM) DUM=SQRT5
      XIN(NN)=DUM* (G(N+ 9)-G(N+ 3)-G(N+ 3))
      YIN(NN)=DUM* (G(N+15)-G(N  ))
      ZIN(NN)=DUM* G(N+18)
      NN=NN+1
      XIN(NN)=DUM* (G(N+10)-G(N+ 4)-G(N+ 4))
      YIN(NN)=DUM* G(N+18)
      ZIN(NN)=DUM* (G(N+16)-G(N  ))
      NN=NN+1
      XIN(NN)=DUM* (G(N+15)-G(N+ 1))
      YIN(NN)=DUM* (G(N+11)-G(N+ 3)-G(N+ 3))
      ZIN(NN)=DUM*  G(N+19)
      NN=NN+1
      XIN(NN)=DUM* G(N+19)
      YIN(NN)=DUM* (G(N+12)-G(N+ 5)-G(N+ 5))
      ZIN(NN)=DUM* (G(N+17)-G(N+ 1))
      NN=NN+1
      XIN(NN)=DUM* (G(N+16)-G(N+ 2))
      YIN(NN)=DUM*  G(N+20)
      ZIN(NN)=DUM* (G(N+13)-G(N+ 4)-G(N+ 4))
      NN=NN+1
      XIN(NN)=DUM*  G(N+20)
      YIN(NN)=DUM* (G(N+17)-G(N+ 2))
      ZIN(NN)=DUM* (G(N+14)-G(N+ 5)-G(N+ 5))
      NN=NN+1
      IF(NORM) DUM=DUM*SQRT3
      XIN(NN)=DUM* (G(N+18)-G(N+ 5))
      YIN(NN)=DUM* (G(N+19)-G(N+ 4))
      ZIN(NN)=DUM* (G(N+20)-G(N+ 3))
  900 N = N+21
C
C     -- CALCULATE CONTRIBUTION TO GRADIENT -----
C
      N = 0
      DO 980 J = MINJ,MAXJ
      JN = LOCJ+J
      DO 980 I = MINI,MAXI
      N = N+1
      IN = LOCI+I
      IF (IN-JN) 920,940,940
  920 ID = JN
      JD = IN
      GO TO 960
  940 ID = IN
      JD = JN
  960 NN = (ID*(ID-1))/2+JD
      DUM = DM(NN)
      DUM = DUM+DUM
      DE(1,IAT) = DE(1,IAT)+DUM*XIN(N)
      DE(2,IAT) = DE(2,IAT)+DUM*YIN(N)
      DE(3,IAT) = DE(3,IAT)+DUM*ZIN(N)
      VIR(1) =VIR(1) + (DUM*XIN(N))*C(1,IAT)
      VIR(2) =VIR(2) + (DUM*YIN(N))*C(2,IAT)
      VIR(3) =VIR(3) + (DUM*ZIN(N))*C(3,IAT)
  980 CONTINUE
 1040 CONTINUE
 1060 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
 1120 CONTINUE
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
C
      END
C*MODULE QUANPO  *DECK QMMMRXNFMMNUCMM
      SUBROUTINE QMMMRXNFMMNUCMM(CORD,FFGRD,CHARG,DIP,QRXN,NTS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
      PARAMETER (ONE=1.0D+00, THREE=3.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),CHARG(*),DIP(3,*),QRXN(NTS)
C
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, FEB 2011, LINCOLN
C
C     FORCE ON MM CHARGE AND DIPOLE DUE TO REACTION FIELD SURFACE CHARGE
C
      IPCOUNT = ME - 1 
      DO 600 IFFAT=1,NFFAT
         QIFFAT= CHARG(IFFAT)
         DIX   = DIP(1,IFFAT)
         DIY   = DIP(2,IFFAT)
         DIZ   = DIP(3,IFFAT)
         XI    = CORD(1,IFFAT)
         YI    = CORD(2,IFFAT)
         ZI    = CORD(3,IFFAT)
         DO 610 JTS = 1, NTS
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 610
            END IF
            QJ    = QRXN(JTS)
            XJ    = XX(LFFXTS+JTS-1)
            YJ    = XX(LFFYTS+JTS-1)
            ZJ    = XX(LFFZTS+JTS-1)
            X     = XI-XJ
            Y     = YI-YJ
            Z     = ZI-ZJ
            R2    = X*X + Y*Y + Z*Z
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            ONER5 = ONER3*ONER2
            DUM   = -QIFFAT*QJ*ONER3
            DXA   = DUM*X
            DYA   = DUM*Y
            DZA   = DUM*Z
            QJONER3= QJ*ONER3
            QJDOT = THREE*ONER5*(DIX*X+DIY*Y+DIZ*Z)*QJ
            DXB   = -DIX*QJONER3 + QJDOT*X
            DYB   = -DIY*QJONER3 + QJDOT*Y
            DZB   = -DIZ*QJONER3 + QJDOT*Z
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) + DXA + DXB
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) + DYA + DYB
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) + DZA + DZB
            VIR(1) =VIR(1) + (DXA + DXB)*CORD(1,IFFAT)
            VIR(2) =VIR(2) + (DYA + DYB)*CORD(2,IFFAT)
            VIR(3) =VIR(3) + (DZA + DZB)*CORD(3,IFFAT)
 610     CONTINUE
 600  CONTINUE
C
C     - FORCES ON QM NUCLEI AND REACTION FIELD SURFACE CHARGE --
C
      IPCOUNT = ME - 1
      DO 700 IAT=1,NAT
         QIAT  = ZAN(IAT)
         XI    = C(1,IAT)
         YI    = C(2,IAT)
         ZI    = C(3,IAT)
         DO 710 JTS = 1, NTS
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 710
            END IF
            QJ    = QRXN(JTS)
            XJ    = XX(LFFXTS+JTS-1)
            YJ    = XX(LFFYTS+JTS-1)
            ZJ    = XX(LFFZTS+JTS-1)
            X     = XI - XJ
            Y     = YI - YJ
            Z     = ZI - ZJ
            R2    = (XI-XJ)**2 + (YI-YJ)**2 + (ZI-ZJ)**2
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            DUM   = -QIAT*QJ*ONER3
            DX    = DUM*X
            DY    = DUM*Y
            DZ    = DUM*Z
            DE(1,IAT) = DE(1,IAT) + DX 
            DE(2,IAT) = DE(2,IAT) + DY
            DE(3,IAT) = DE(3,IAT) + DZ
            VIR(1)    =VIR(1) + DX*C(1,IAT)
            VIR(2)    =VIR(2) + DY*C(2,IAT)
            VIR(3)    =VIR(3) + DZ*C(3,IAT)
 710     CONTINUE
 700  CONTINUE
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMRXNDIPMP2
      SUBROUTINE QMMMRXNDIPMP2(CORD,FFGRD,DIPMP,QRXN,NTS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ONE=1.0D+00, THREE=3.0D+00)
C
      DIMENSION CORD(3,*),FFGRD(3,*),DIPMP(3,*),QRXN(NTS)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, MAR 2011, LINCOLN
C
C     FORCE ON P(2) INDUCED DIPOLE BY HF REACTION FIELD SURFACE CHARGE
C
      IPCOUNT = ME - 1
      DO 600 IFFAT=1,NFFAT
         DIX   = DIPMP(1,IFFAT)
         DIY   = DIPMP(2,IFFAT)
         DIZ   = DIPMP(3,IFFAT)
         XI    = CORD(1,IFFAT)
         YI    = CORD(2,IFFAT)
         ZI    = CORD(3,IFFAT)
         DO 610 JTS = 1, NTS
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 610
            END IF
            QJ    = QRXN(JTS)
            XJ    = XX(LFFXTS+JTS-1)
            YJ    = XX(LFFYTS+JTS-1)
            ZJ    = XX(LFFZTS+JTS-1)
            X     = XI-XJ
            Y     = YI-YJ
            Z     = ZI-ZJ
            R2    = X*X + Y*Y + Z*Z
            ONER2 = ONE/R2
            ONER  = SQRT(ONER2)
            ONER3 = ONER2*ONER
            ONER5 = ONER3*ONER2
            QJONER3= QJ*ONER3
            QJDOT = THREE*ONER5*(DIX*X+DIY*Y+DIZ*Z)*QJ
            DXB   = -DIX*QJONER3 + QJDOT*X
            DYB   = -DIY*QJONER3 + QJDOT*Y
            DZB   = -DIZ*QJONER3 + QJDOT*Z
            FFGRD(1,IFFAT)=FFGRD(1,IFFAT) +  DXB
            FFGRD(2,IFFAT)=FFGRD(2,IFFAT) +  DYB
            FFGRD(3,IFFAT)=FFGRD(3,IFFAT) +  DZB
            VIR(1)    =VIR(1) + DXB*CORD(1,IFFAT)
            VIR(2)    =VIR(2) + DYB*CORD(2,IFFAT)
            VIR(3)    =VIR(3) + DZB*CORD(3,IFFAT)
 610     CONTINUE
 600  CONTINUE
C
      RETURN
      END
C*MODULE QUANPO  *DECK QMMMRXNPOTNUCMM
      SUBROUTINE QMMMRXNPOTNUCMM(CORD,CHARG,XTS,YTS,ZTS,POT1,NTS)
C        
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000)
C
      DIMENSION CORD(3,*),CHARG(*),XTS(NTS),YTS(NTS),ZTS(NTS),POT1(NTS)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, FEB 2011, LINCOLN
C
C
C     --  POT1: POTENTIAL AT SURFACE DUE TO NUC AND CHG --
C
      CALL VCLR(POT1,1,NTS)
      IF(IRXNFLD.LT.60) RETURN
      IF(RXNRAD.GE.1.0D+30) RETURN
C
      IPCOUNT = ME - 1
      DO 300 ITS=1, NTS
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 300
         END IF
         DO JAT=1,NAT
            R2 =  (XTS(ITS)-C(1,JAT))**2
     *           +(YTS(ITS)-C(2,JAT))**2
     *           +(ZTS(ITS)-C(3,JAT))**2
            R  = SQRT(R2)
            POT1(ITS) = POT1(ITS)+ZAN(JAT)/R
         ENDDO
         DO JFFAT=1,NFFAT
            R2 =  (XTS(ITS) - CORD(1,JFFAT))**2
     *           +(YTS(ITS) - CORD(2,JFFAT))**2
     *           +(ZTS(ITS) - CORD(3,JFFAT))**2
            R  = SQRT(R2)
            POT1(ITS) = POT1(ITS)+CHARG(JFFAT)/R
         ENDDO
 300  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2405,POT1,NTS)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLZVEC
      SUBROUTINE FFPOLZVEC(U,UNXT,CMO)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00,FOUR=4.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD,ZAPTGD
      DOUBLE PRECISION U(*),UNXT(*),CMO(NBF,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /ZAPTGR/ NOCD,NOCD1,NOCS,NOCSTR,IXYEXC,ICHIX,ITIA,IZVEC
     *,               ZAPTGD
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      NUM  = NBF
      L1   = NUM
      L2   = (NUM*(NUM+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NBSQ
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
      IF(ZAPTGD) THEN
C        - YJ BLOCK = NOCD*NOCS
         CALL MRARTR(U,NOCD,NOCD,NOCS,CMO(1,NOCD+1),NBF,NBF,XX(LXT),NBF)
         CALL DGEMM('N','N',NBF,NBF,NOCD,ONE,CMO,NBF,XX(LXT),
     *              NBF,ZERO,XX(LPAO),NBF)
C        - BJ BLOCK = NVIR*NOCD
         CALL MRARTR(U(NOCS*NOCD+1),NVIR,NVIR,NOCD,CMO,NBF,NBF,
     *               XX(LXT),NBF)
         CALL DGEMM('N','N',NBF,NBF,NVIR,TWO,CMO(1,NOCD+NOCS+1),
     *              NBF,XX(LXT),
     *              NBF,ONE,XX(LPAO),NBF)
C        - BY BLOCK = NVIR*NOCS
         CALL MRARTR(U(NOCS*NOCD+NVIR*NOCD+1),NVIR,NVIR,NOCS,
     *               CMO(1,NOCD+1),NBF,NBF,XX(LXT),NBF)
         CALL DGEMM('N','N',NBF,NBF,NVIR,ONE,CMO(1,NOCD+NOCS+1),
     *              NBF,XX(LXT),
     *              NBF,ONE,XX(LPAO),NBF)
      ELSE
         CALL MRARTR(U,NVIR,NVIR,NOCC,CMO,NBF,NBF,XX(LXT),NBF)
         CALL DGEMM('N','N',NBF,NBF,NVIR,ONE,CMO(1,NOP1),NBF,XX(LXT),
     *              NBF,ZERO,XX(LPAO),NBF)
      END IF
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,FOUR,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
      IF(ZAPTGD) THEN
         IV2=0
         IF(NOCS.GT.0)THEN
C        - XI BLOCK = NOCD*NOCS
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO(1,NOCD+1),NBF,
     *               NOCS,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCD,NOCS,NBF,ONE,CMO,NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NOCD)
         KKK = 0
         DO II = 1,NOCS
            DO JJ = 1,NOCD
               IV2 = IV2+1
               KKK = KKK+1
               UNXT(IV2)=UNXT(IV2)+0.25D+00*XX(LPMO+KKK-1)
            ENDDO
         ENDDO
         END IF
C        - AI BLOCK = NVIR*NOCD
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCD,NBF,ONE,CMO(1,NOCD+NOCS+1),NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
         KKK = 0
         DO II = 1,NOCD
            DO JJ = 1,NVIR
               IV2 = IV2+1
               KKK = KKK+1
               UNXT(IV2)=UNXT(IV2)+0.50D+00*XX(LPMO+KKK-1)
            ENDDO
         ENDDO
C        - AX BLOCK = NVIR*NOCS
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO(1,NOCD+1),
     *               NBF,NOCS,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCS,NBF,ONE,CMO(1,NOCD+NOCS+1),NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
         KKK = 0
         DO II = 1,NOCS
            DO JJ = 1,NVIR
               IV2 = IV2+1
               KKK = KKK+1
               UNXT(IV2)=UNXT(IV2)+0.25D+00*XX(LPMO+KKK-1)
            ENDDO
         ENDDO
      ELSE
C        ---- TRANSFORM BMN3 TO MO BASIS ----
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMO(1,NOP1),NBF,
     *              XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
C
         IV2 = 0
         DO II = 1,NOCC
            DO JJ = 1,NVIR
               IV2 = IV2 + 1
               UNXT(IV2)=UNXT(IV2) + XX(LPMO+IV2-1)
            ENDDO
         ENDDO
      END IF
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOL1PDM
      SUBROUTINE FFPOL1PDM(PMAT,WMAT,CMO)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00, TWO=2.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD,ZAPTGD
      DOUBLE PRECISION CMO(NBF,*),PMAT(NBF,*),WMAT(NBF,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /ZAPTGR/ NOCD,NOCD1,NOCS,NOCSTR,IXYEXC,ICHIX,ITIA,IZ
     *,               ZAPTGD
C
C     HUI LI, JAN 2011, LINCOLN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NBSQ
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     -- CONVERT MO DENSITY MATRIX TO AO --
      CALL CACT(NBF,NMOS,
     *          PMAT,NBF,
     *          CMO,NBF,
     *          XX(LPAO),NBF,XX(LXT))
C     -- SYMMETRIZE P(AO) ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
      IF(ZAPTGD) THEN
C        - XI BLOCK = NOCS*NOCD
         IF(NOCS.GT.0)THEN
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCS,NOCD,NBF,ONE,CMO(1,NOCD+1),
     *              NBF,XX(LXT),NBF,ZERO,XX(LPMO),NOCS)
         DO II = 1,NOCS
            DO JJ = 1,NOCD
               WMAT(JJ,II+NOCD)=WMAT(JJ,II+NOCD)
     *            + 0.50D+00*XX(LPMO+(JJ-1)*NOCS+II-1)
C                   HERE SHOULD BE 0.5    EQ (64)
            ENDDO
         ENDDO
         END IF
C        - AI BLOCK = NVIR*NOCD
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCD,NBF,ONE,CMO(1,NOCD+NOCS+1),
     *              NBF,XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
         DO II = 1,NVIR
            DO JJ = 1,NOCD
               WMAT(JJ,II+NOCD+NOCS)=WMAT(JJ,II+NOCD+NOCS)
     *            + XX(LPMO+(JJ-1)*NVIR+II-1)
C                   HERE SHOULD BE 1.0   EQ (65)
            ENDDO
         ENDDO
C        - AX BLOCK = NVIR*NOCS
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO(1,NOCD+1),NBF,
     *               NOCS,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCS,NBF,ONE,CMO(1,NOCD+NOCS+1),
     *              NBF,XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
         DO II = 1,NVIR
            DO JJ = 1,NOCS
               WMAT(NOCD+JJ,II+NOCD+NOCS)=WMAT(NOCD+JJ,II+NOCD+NOCS)
     *            + 0.50D+00*XX(LPMO+(JJ-1)*NVIR+II-1)
C                   HERE SHOULD BE 0.5    EQ (66)
            ENDDO
         ENDDO
      ELSE
C        -- TRANSFORM TO MO --
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
         CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMO(1,NOP1),NBF,XX(LXT)
     *              ,NBF,ZERO,XX(LPMO),NVIR)
         DO II = 1,NVIR
            DO JJ = 1,NOCC
               WMAT(II+NOCC,JJ)=WMAT(II+NOCC,JJ)
     *                         +XX(LPMO+(JJ-1)*NVIR+II-1)
            ENDDO
         ENDDO
      END IF
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLWOV
      SUBROUTINE FFPOLWOV(PMAT,WMAT,CMO)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD,ZAPTGD
      DOUBLE PRECISION PMAT(NBF,*),WMAT(NBF,*),CMO(NBF,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /FMCOM / XX(1)
      COMMON /ZAPTGR/ NOCD,NOCD1,NOCS,NOCSTR,IXYEXC,ICHIX,ITIA,IZ
     *,               ZAPTGD
C
C     HUI LI, JAN 2011, LINCOLN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NOCC*NOCC
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARTR(PMAT,NBF,NBF,NBF,CMO,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NBF,ONE,CMO,NBF,XX(LXT),
     *           NBF,ZERO,XX(LPAO),NBF)
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
      IF(ZAPTGD) THEN
C        - IJ BLOCK = NOCD*NOCD
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCD,NOCD,NBF,ONE,CMO,NBF,
     *              XX(LXT),NBF,ZERO,XX(LPMO),NOCD)
         DO I = 1, NOCD
            DO J = 1, NOCD
               WMAT(J,I) = WMAT(J,I)-XX(LPMO+(J-1)*NOCD+I-1)
C                    HERE SHOULD BE 1.00     EQ(57)
            END DO
         END DO
C        - XI BLOCK = NOCS*NOCD
         IF(NOCS.GT.0)THEN
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCD,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCS,NOCD,NBF,ONE,CMO(1,NOCD+1),NBF,
     *              XX(LXT),NBF,ZERO,XX(LPMO),NOCS)
         DO I = 1, NOCS
            DO J = 1, NOCD
               WMAT(J,NOCD+I) = WMAT(J,NOCD+I)
     *                  -0.50D+00*XX(LPMO+(J-1)*NOCS+I-1)
               WMAT(NOCD+I,J) = WMAT(J,NOCD+I)
C                    HERE SHOULD BE 0.50    BUT EQ(60) SAYS 1.0. ??
            END DO
         END DO
C        - XX BLOCK = NOCS*NOCS
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO(1,NOCD+1),
     *               NBF,NOCS,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCS,NOCS,NBF,ONE,CMO(1,NOCD+1),NBF,
     *              XX(LXT),NBF,ZERO,XX(LPMO),NOCS)
         DO I = 1, NOCS
            DO J = 1, NOCS
               WMAT(NOCD+J,NOCD+I) = WMAT(NOCD+J,NOCD+I)
     *                  -0.50D+00*XX(LPMO+(J-1)*NOCS+I-1)
C                    HERE SHOULD BE 0.50     EQ(58)
            END DO
         END DO
         END IF
      ELSE
C        ---- TRANSFORM BMN3 TO MO BASIS ----
         CALL VCLR(XX(LXT),1,NBSQ)
         CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
         CALL DGEMM('T','N',NOCC,NOCC,NBF,ONE,CMO,NBF,XX(LXT),NBF,
     *              ZERO,XX(LPMO),NOCC)
C
         DO J = 1, NOCC
            DO I = 1, NOCC
               WMAT(I,J) = WMAT(I,J) - XX(LPMO+(J-1)*NOCC+I-1)
            END DO
         END DO
      END IF
C
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOL1IMS
      SUBROUTINE FFPOL1IMS(PMN,LAI,CMO,NOCC,NVIR,NBF)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,FOUR=4.0D+00)
C
      DOUBLE PRECISION CMO(NBF,*),PMN(*),LAI(NOCC,NVIR)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      NOP1 = NOCC+1
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPMN     = LBMN     + L2
      LPAO     = LPMN     + L2
      LPMO     = LPAO     + L3
      LXT      = LPMO     + NVIR*NOCC
      LDIPTMP  = LXT      + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     -- SYMMETRIZE PMN ---
      CALL SQTR(PMN,XX(LPMN),NBF)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     -- TRANSFORM PAO TO MO BASIS --
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMO(1,NOP1),NBF,XX(LXT)
     *           ,NBF,ZERO,XX(LPMO),NVIR)
C
      DO II = 1,NVIR
         DO JJ = 1,NOCC
            LAI(JJ,II)=LAI(JJ,II)+FOUR*XX(LPMO+(JJ-1)*NVIR+II-1)
         ENDDO
      ENDDO
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLZIMS
      SUBROUTINE FFPOLZIMS(GMVEC0,GMVEC1,NOCC,NVIR,NBF,CMO,ENG,FACTOR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,FOUR=4.0D+00)
C
      DOUBLE PRECISION CMO(NBF,NBF),ENG(*),
     *                 GMVEC0(NOCC,NVIR),GMVEC1(NOCC,NVIR)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      NOP1 = NOCC+1
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPMN     = LBMN     + L2
      LPAO     = LPMN     + L2
      LPMO     = LPAO     + L3
      LXT      = LPMO     + NVIR*NOCC
      LDIPTMP  = LXT      + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     -- TRANSPOSE GMVEC0 TO LPMO --
      DO IA=1,NVIR
         DO II=1,NOCC
            XX(LPMO+(II-1)*NVIR+IA-1)=GMVEC0(II,IA)
         ENDDO
      ENDDO
C
      CALL MRARTR(XX(LPMO),NVIR,NVIR,NOCC,CMO,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NVIR,ONE,CMO(1,NOP1),NBF,XX(LXT),
     *           NBF,ZERO,XX(LPAO),NBF)
C
C     -- SYMMETRIZE PAO ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(L2,FOUR,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     -- TRANSFORM PAO TO MO BASIS --
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMO(1,NOP1),NBF,XX(LXT)
     *           ,NBF,ZERO,XX(LPMO),NVIR)
C
      IV2 = 0
      DO II = 1,NOCC
         DO JJ = 1,NVIR
            IV2 = IV2 + 1
            ENGA= ENG(JJ+NOCC)
            GMVEC1(II,JJ)=GMVEC1(II,JJ)
     *                    +FACTOR*XX(LPMO+IV2-1)/(ENGA-ENG(II))
         ENDDO
      ENDDO
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLWIMS
      SUBROUTINE FFPOLWIMS(PMN,WIJ,NOCC,NBF,CMO)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00)
C
      DOUBLE PRECISION CMO(NBF*NBF),WIJ(NOCC,*),PMN(NBF,NBF)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPMN     = LBMN     + L2
      LPAO     = LPMN     + L2
      LPMO     = LPAO     + L3
      LXT      = LPMO     + NOCC*NOCC
      LDIPTMP  = LXT      + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(PMN,XX(LPMN),NBF)
      CALL DSCAL(L2,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     ---- TRANSFORM PAO TO MO BASIS ----
      CALL VCLR(XX(LXT),1,L3)
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMO,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NOCC,NOCC,NBF,ONE,CMO,NBF,XX(LXT),NBF,
     *           ZERO,XX(LPMO),NOCC)
C
      DO J = 1, NOCC
         DO I = 1, NOCC
            WIJ(I,J) = WIJ(I,J) - XX(LPMO+(J-1)*NOCC+I-1)
         END DO
      END DO
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLBMN
      SUBROUTINE FFPOLBMN(PMN,Y,NBF)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ONE=1.0D+00)
C
      DIMENSION PMN(*),Y(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / X(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LDIPTMP  = LPAO     + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      CALL VCLR(X(LBMN),1,L2)
      CALL QMMMPOLINT2(X(LBMN),PMN,X(LDIPTMP),L2,L1,
     *                 X(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(X(LBMN),X(LPAO),L1,1)
C
C     -- ADD X(LPAO) TO Y --
      CALL DAXPY(L3,ONE,X(LPAO),1,Y,1)
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLBMNAB
      SUBROUTINE FFPOLBMNAB(PMNA,YA,PMNB,YB,NBF)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ONE=1.0D+00)
C
      DIMENSION PMNA(*),YA(*),PMNB(*),YB(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / X(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      L3   = NBF*NBF
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LDIPTMP  = LPAO     + L3
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
      CALL VCLR(X(LBMN),1,L2)
      CALL VADD(PMNA,1,PMNB,1,PMNB,1,L2)
      CALL QMMMPOLINT2(X(LBMN),PMNB,X(LDIPTMP),L2,L1,
     *                 X(LFFNONLSTQ))
      CALL VSUB(PMNA,1,PMNB,1,PMNB,1,L2)
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(X(LBMN),X(LPAO),L1,1)
C
C     -- ADD X(LPAO) TO YA AND YB --
      CALL DAXPY(L3,ONE,X(LPAO),1,YA,1)
      CALL DAXPY(L3,ONE,X(LPAO),1,YB,1)
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLZVECAB
      SUBROUTINE FFPOLZVECAB(UA,UB,UNXTA,UNXTB,CMOA,CMOB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,FOUR=4.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD
      DOUBLE PRECISION UA(*),UNXTA(*),CMOA(NBF,*),
     *                 UB(*),UNXTB(*),CMOB(NBF,*)
C
      COMMON /MP2PAR/ OSPT,CODEMP,SCSPT,TOL,METHOD,NWORD,MEMPRI,MPPROP,
     *                NACORE_MP2PAR,NBCORE_MP2PAR,NOA,NOB,NO,NBF_MP2PAR,
     *                NOMIT,MOCPHF,MAXITC
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /UMP2XB/ NBCORE,NACTB,NOCCB,NVIRB,NOVB,NOSB,NVSB,NOTB,
     *                NVTB,NCP1B,NOP1B,NATB,IOSTB,NOCCBLD
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      NUM  = NBF
      L1   = NUM
      L2   = (NUM*(NUM+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NVIR*NOCC
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
      CALL MRARTR(UB,NVIRB,NVIRB,NOB,CMOB,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NVIRB,ONE,CMOB(1,NOP1B),NBF,XX(LXT),
     *           NBF,ZERO,XX(LPAO),NBF)
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARTR(UA,NVIR,NVIR,NOCC,CMOA,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NVIR,ONE,CMOA(1,NOP1),NBF,XX(LXT),
     *           NBF,ONE,XX(LPAO),NBF)
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,FOUR,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     ---- TRANSFORM BMN3 TO MO BASIS ----
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOA,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMOA(1,NOP1),NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NVIR)
      IV2 = 0
      DO II = 1,NOCC
         DO JJ = 1,NVIR
            IV2 = IV2 + 1
            UNXTA(IV2)=UNXTA(IV2) + 0.5D+00*XX(LPMO+IV2-1)
         ENDDO
      ENDDO
C
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOB,NBF,NOB,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIRB,NOB,NBF,ONE,CMOB(1,NOP1B),NBF,
     *           XX(LXT),NBF,ZERO,XX(LPMO),NVIRB)
      IV2 = 0
      DO II = 1,NOB
         DO JJ = 1,NVIRB
            IV2 = IV2 + 1
            UNXTB(IV2)=UNXTB(IV2) + 0.5D+00*XX(LPMO+IV2-1)
         ENDDO    
      ENDDO       
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOL1PDMAB
      SUBROUTINE FFPOL1PDMAB(PMATA,PMATB,WMATA,WMATB,CMOA,CMOB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00, TWO=2.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD
      DOUBLE PRECISION CMOA(NBF,*),PMATA(NBF,*),WMATA(NBF,*)
     *,                CMOB(NBF,*),PMATB(NBF,*),WMATB(NBF,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
      COMMON /MP2PAR/ OSPT,CODEMP,SCSPT,TOL,METHOD,NWORD,MEMPRI,MPPROP,
     *                NACORE_MP2PAR,NBCORE_MP2PAR,NOA,NOB,NO,NBF_MP2PAR,
     *                NOMIT,MOCPHF,MAXITC
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /UMP2XB/ NBCORE,NACTB,NOCCB,NVIRB,NOVB,NOSB,NVSB,NOTB,
     *                NVTB,NCP1B,NOP1B,NATB,IOSTB,NOCCBLD
C
C     HUI LI, JAN 2011, LINCOLN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LPAO2    = LPAO     + NBSQ
      LXT      = LPAO2    + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NVIR*NOCC
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
C     -- CONVERT MO DENSITY MATRIX TO AO --
      CALL CACT(NBF,NMOS,
     *          PMATB,NBF,
     *          CMOB,NBF,
     *          XX(LPAO2),NBF,XX(LXT))
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL CACT(NBF,NMOS,
     *          PMATA,NBF,
     *          CMOA,NBF,
     *          XX(LPAO),NBF,XX(LXT))
      CALL VADD(XX(LPAO2),1,XX(LPAO),1,XX(LPAO),1,NBSQ)
C     -- SYMMETRIZE P(AO) ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     -- TRANSFORM TO MO --
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOA,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIR,NOCC,NBF,ONE,CMOA(1,NOP1),NBF,XX(LXT)
     *           ,NBF,ZERO,XX(LPMO),NVIR)
      DO II = 1,NVIR
         DO JJ = 1,NOCC
            WMATA(II+NOCC,JJ)=WMATA(II+NOCC,JJ)
     *         +0.5D+00*XX(LPMO+(JJ-1)*NVIR+II-1)
         ENDDO
      ENDDO
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOB,NBF,NOB,XX(LXT),NBF)
      CALL DGEMM('T','N',NVIRB,NOB,NBF,ONE,CMOB(1,NOP1B),NBF,XX(LXT)
     *           ,NBF,ZERO,XX(LPMO),NVIRB)
      DO II = 1,NVIRB
         DO JJ = 1,NOB
            WMATB(II+NOB,JJ)=WMATB(II+NOB,JJ)
     *         +0.5D+00*XX(LPMO+(JJ-1)*NVIRB+II-1)
         ENDDO
      ENDDO
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE QUANPO  *DECK FFPOLWOVAB
      SUBROUTINE FFPOLWOVAB(PMATA,PMATB,WMATA,WMATB,CMOA,CMOB)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00)
      LOGICAL OUTPUT,MP2ENG,UMP2GD
      DOUBLE PRECISION PMATA(NBF,*),PMATB(NBF,*),
     *                 WMATA(NBF,*),WMATB(NBF,*),
     *                 CMOA(NBF,*),CMOB(NBF,*)
C
      COMMON /MP2PAR/ OSPT,CODEMP,SCSPT,TOL,METHOD,NWORD,MEMPRI,MPPROP,
     *                NACORE_MP2PAR,NBCORE_MP2PAR,NOA,NOB,NO,NBF_MP2PAR,
     *                NOMIT,MOCPHF,MAXITC
      COMMON /MP2XTR/ NBF,NACORE,NBSQ,NBTR,NSTR,MXSHL,NACT,NOCC
     *,               NVIR,NOV,NOSQ,NVSQ,NOTR,NVTR,NCP1,NOP1
     *,               NATR,ICHANL,OUTPUT,MP2ENG,IOST,NMOS,UMP2GD
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FMCOM / XX(1)
C
C     HUI LI, JAN 2011, LINCOLN
C
      L1   = NBF
      L2   = (NBF*(NBF+1))/2
      CALL VALFM(LOADFM)
      LBMN     = LOADFM   + 1
      LPAO     = LBMN     + L2
      LXT      = LPAO     + NBSQ
      LPMN     = LXT      + NBSQ
      LPMO     = LPMN     + NBTR
      LDIPTMP  = LPMO     + NOCC*NOCC
      LAST     = LDIPTMP  + 3*NFFAT
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARTR(PMATB,NBF,NBF,NBF,CMOB,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NBF,ONE,CMOB,NBF,XX(LXT),
     *           NBF,ZERO,XX(LPAO),NBF)
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARTR(PMATA,NBF,NBF,NBF,CMOA,NBF,NBF,XX(LXT),NBF)
      CALL DGEMM('N','N',NBF,NBF,NBF,ONE,CMOA,NBF,XX(LXT),
     *           NBF,ONE,XX(LPAO),NBF)
C
C     -- MAKE SQUARE MATRIX INTO TRIANGLE ---
      CALL SQTR(XX(LPAO),XX(LPMN),NBF)
      CALL DSCAL(NBTR,TWO,XX(LPMN),1)
C
      CALL VCLR(XX(LBMN),1,L2)
      CALL QMMMPOLINT2(XX(LBMN),XX(LPMN),XX(LDIPTMP),L2,L1,
     *                 XX(LFFNONLSTQ))
C
C     -- MAKE TRIANGLE INTO SQUARE MATRIX---
      CALL CPYTSQ(XX(LBMN),XX(LPAO),NBF,1)
C
C     ---- TRANSFORM BMN3 TO MO BASIS ----
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOA,NBF,NOCC,XX(LXT),NBF)
      CALL DGEMM('T','N',NOCC,NOCC,NBF,ONE,CMOA,NBF,XX(LXT),NBF,
     *           ZERO,XX(LPMO),NOCC)
      DO J = 1, NOCC
         DO I = 1, NOCC
            WMATA(I,J) = WMATA(I,J)-0.5D+00*XX(LPMO+(J-1)*NOCC+I-1)
         END DO
      END DO
C
      CALL VCLR(XX(LXT),1,NBSQ)
      CALL MRARBR(XX(LPAO),NBF,NBF,NBF,CMOB,NBF,NOB,XX(LXT),NBF)
      CALL DGEMM('T','N',NOB,NOB,NBF,ONE,CMOB,NBF,XX(LXT),NBF,
     *           ZERO,XX(LPMO),NOB)
      DO J = 1, NOB
         DO I = 1, NOB
            WMATB(I,J) = WMATB(I,J)-0.5D+00*XX(LPMO+(J-1)*NOB+I-1)
         END DO
      END DO
C
      CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE QUANPO  *DECK FFMP2DIP
      SUBROUTINE FFMP2DIP
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA ROHF,UHF,RHF/8HROHF    ,8HUHF     ,8HRHF     /
C
C     HUI LI, JAN 2011, LINCOLN
C     DEJUN SI, MAR 2011, LINCOLN
C
C     -- SOLVE MM INDUCED DIPOLES/CHARGES DUE TO P(2)
C
      NTS = IRXNFLD
      L1 = NUM
      L2 = (NUM*NUM+NUM)/2
      CALL VALFM(LOADFM)
      LABFLD   = LOADFM   + 1
      LMP      = LABFLD   + 3*NFFAT
      LXEFI    = LMP      + L2
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LABPOT   = LZEFI    + L2
      LQTMP1   = LABPOT   + NTS
      LQTMP2   = LQTMP1   + NTS
      LAST     = LQTMP2   + NTS
      NEED     = LAST     - LOADFM - 1
      CALL GETFM(NEED)
C
      IF(SCFTYP.EQ.UHF) THEN
C        - BORROW LXEFI AND LYEFI FOR 0.001 SECONDS
         CALL DAREAD(IDAF,IODA,X(LXEFI),L2,417,0)
         CALL DAREAD(IDAF,IODA,X(LYEFI),L2,427,0)
         CALL VADD(X(LXEFI),1,X(LYEFI),1,X(LMP),1,L2)
      ELSE IF(SCFTYP.EQ.RHF .OR. SCFTYP.EQ.ROHF) THEN
         KREC7 = 307
         CALL DAREAD(IDAF,IODA,X(LMP),L2,KREC7,0)
      END IF
C
C     -- ELECTRONIC FIELDS AT MM POL DUE TO P(2)
C
      IPCOUNT = ME - 1
      DO 100 IIQ = 1, NTODOQ
         CALL GETIFFAT(X(LFFNONLSTQ),IIQ,IFFAT)
         IF(GOPARR) THEN
            X(LABFLD+3*(IFFAT-1)  )=ZERO
            X(LABFLD+3*(IFFAT-1)+1)=ZERO
            X(LABFLD+3*(IFFAT-1)+2)=ZERO
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),X(LFFIDGROUP),
     *             X(LXEFI),X(LYEFI),X(LZEFI),X(LFFLKQMMM),L2)
         X(LABFLD+3*(IFFAT-1)  )=TRACEP(X(LMP),X(LXEFI),L1)
         X(LABFLD+3*(IFFAT-1)+1)=TRACEP(X(LMP),X(LYEFI),L1)
         X(LABFLD+3*(IFFAT-1)+2)=TRACEP(X(LMP),X(LZEFI),L1)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,X(LABFLD),3*NFFAT)
C
      CALL VCLR (X(LABPOT),1,NTS)
      CALL VCLR (X(LQTMP1),1,NTS)
      CALL VCLR (X(LQTMP2),1,NTS)
      CALL VCLR (X(LFFQRXNMP),1,NTS)
      IF(IRXNFLD.GE.60) THEN
         CALL EPOTEN(ONE,X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *               X(LABPOT),X(LMP),NTS,L2)
         IF(GOPARR) CALL DDI_GSUMF(2668,X(LABPOT),NTS)
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 200 ITS = 1, NTS
            X(LQTMP1+ITS-1) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
            END IF
            DO JTS = 1, NTS
               X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)
     *           +X(LFFCMAT1+(JTS-1)*NTS+ITS-1)*X(LABPOT+JTS-1)
            ENDDO
            X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)*SCALE
 200     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2406,X(LQTMP1),NTS)
      END IF
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),X(LFFDIPMP),DUM,
     *              X(LABFLD),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLST),X(LFFIDGROUP),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),X(LQTMP1),
     *              X(LQTMP2),NTS)
      IF(IRXNFLD.GE.60) THEN
         CALL VADD(X(LQTMP1),1,X(LQTMP2),1,X(LFFQRXNMP),1,NTS)
      END IF
C
      E2RXN = 0.0D+00
      DO ITS = 1, NTS
         E2RXN = E2RXN + X(LABPOT+ITS-1)*
     *                   (X(LFFQRXN1+ITS-1) +
     *                    X(LFFQRXN2+ITS-1) +
     *           0.50D+00*X(LFFQRXNMP+ITS-1))
      ENDDO
      E2POL = 0.0D+00
      DO IFFAT = 1, NFFAT
         DIPX  =          X(LFFDIP  +3*(IFFAT-1)  )
     *         + 0.50D+00*X(LFFDIPMP+3*(IFFAT-1)  )
         DIPY  =          X(LFFDIP  +3*(IFFAT-1)+1)
     *         + 0.50D+00*X(LFFDIPMP+3*(IFFAT-1)+1)
         DIPZ  =          X(LFFDIP  +3*(IFFAT-1)+2)
     *         + 0.50D+00*X(LFFDIPMP+3*(IFFAT-1)+2)
         E2POL = E2POL - X(LABFLD+3*(IFFAT-1)  )*DIPX
     *                 - X(LABFLD+3*(IFFAT-1)+1)*DIPY
     *                 - X(LABFLD+3*(IFFAT-1)+2)*DIPZ
      ENDDO
      IF(MASWRK.AND.IRXNFLD.LT.60) THEN
         WRITE(IW,900)' '
         WRITE(IW,900)' ---------------------------------'
         WRITE(IW,900)' THE P(2) CORRECTED MP2-POL ENERGY'
         WRITE(IW,900)'  (CURRENTLY NO ANALYTIC GRADIENT)'
         WRITE(IW,900)' EMP2        =', EMP2
         WRITE(IW,900)' EPOL(2)     =', E2POL
         WRITE(IW,900)' EMP2+EPOL(2)=', EMP2+E2POL
         WRITE(IW,900)' ---------------------------------'
         WRITE(IW,900)' '
      END IF
      IF(MASWRK.AND.IRXNFLD.GE.60) THEN
       WRITE(IW,900)' ------------------------------------------'
       WRITE(IW,900)' THE P(2) CORRECTED MP2-POLARIZATION ENERGY'
       WRITE(IW,900)'   INCLUDING INDUCED DIPOLES AND CHARGES'
       WRITE(IW,900)'      (CURRENTLY NO ANALYTIC GRADIENT)'
       WRITE(IW,900)' EMP2                =', EMP2
       WRITE(IW,900)' EPOL(2)             =', E2POL
       WRITE(IW,900)' ERXN(2)             =', E2RXN
       WRITE(IW,900)' EMP2+EPOL(2)+ERXN(2)=', EMP2+E2POL+E2RXN
       WRITE(IW,900)' ------------------------------------------'
      END IF
C
      CALL RETFM(NEED)
 900  FORMAT(A,F20.10)
      RETURN
C
      END
C*MODULE QUANPO  *DECK FFTDDFTDIP
      SUBROUTINE FFTDDFTDIP
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL TRIPLET,SG1T,TAMMD
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMPNT/ LFFATMNAM,LFFCORD,LFFZANF,
     *                LFFZMAS,LFFONEMAS,LFFQMZMAS,LFFQM1MAS,
     *                LFFCHARG,LFFPOL,LFFDIP,
     *                LFFFIELD1,LFFFIELD2,LFFFIELD3,
     *                LFFSIG,LFFEPS,LFFSIG2,LFFEPS2,
     *                LFFBOND0,LFFFCBOND,
     *                LFFANGL0,LFFFCANGL,LFFFCWAGG,
     *                LFFDIHB0,LFFFCDIHB,
     *                LFFVROT,LFFNNN,LFFGAMA,LFFIPAIR,
     *                LFFKLIST,LFFLLIST,LFFL1213J,LFFL14J,
     *                LFFMLIST,LFFNLIST,LFFLKQMMM,
     *                LFFVEL,LFFQMVEL,
     *                LFFFFGRD0,LFFFFGRD1,LFFFFGRD2,
     *                LFFQMGRD0,LFFQMGRD1,LFFQMGRD2,LFFDETMP,
     *                LFFCLPR,LFFZLPR,LFFNLPR,
     *                LFFXTS,LFFYTS,LFFZTS,LFFCMAT1,
     *                LFFQRXN1,LFFQRXN2,LFFPOT1,LFFPOT2,LFFQRXNMP,
     *                LFFQRXNTA,LFFQRXNXY,LFFNONLSTQ,
     *                LFFDIPMP,LFFDIPTA,LFFDIPXY,LFFLISTQM,LFFNONLST,
     *                LFFMAPLST,LFFCMAPCO
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRXN / RXNEPS,RXNRAD,IRXNFLD
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,TRIPLET,SG1T,JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,NONEQR,
     *                ITDPRP,TAMMD
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011, LINCOLN
C     DEJUN SI, MAR 2011, LINCOLN
C
C     -- SOLVE INDUCED DIPOLES/CHARGES DUE TO TDDFT DENSITY TA AND XY
C
      NTS = IRXNFLD
      L1 = NUM
      L2 = (NUM*NUM+NUM)/2
      L3 = NUM*NUM
      CALL VALFM(LOADFM)
      LXEFI    = LOADFM   + 1
      LYEFI    = LXEFI    + L2
      LZEFI    = LYEFI    + L2
      LDTEMP   = LZEFI    + L2
      LTA      = LDTEMP   + L3
      LXY      = LTA      + L2
      LFLDTA   = LXY      + L2
      LFLDXY   = LFLDTA   + 3*NFFAT
      LPOTTA   = LFLDXY   + 3*NFFAT
      LPOTXY   = LPOTTA   + NTS
      LQTMP1   = LPOTXY   + NTS
      LQTMP2   = LQTMP1   + NTS
      LAST     = LQTMP2   + NTS
      NEED     = LAST     - LOADFM
      CALL GETFM(NEED)
C
C     TA = EXCITATION DIFFERENCE DENSITY
      CALL DAREAD(IDAF,IODA,X(LDTEMP),L3,IRECTD+4,0)
      CALL TDPCMDEN(X(LTA),X(LDTEMP),L1)
C
C     XY = X + Y = TRANSITION STATE DENSITY
      CALL DAREAD(IDAF,IODA,X(LDTEMP),L3,IRECTD+2,0)
      CALL TDPCMDEN(X(LXY),X(LDTEMP),L1)
C
      IPCOUNT = ME - 1
      DO 100 IIQ = 1, NTODOQ
         CALL GETIFFAT(X(LFFNONLSTQ),IIQ,IFFAT)
         IF(GOPARR) THEN
            X(LFLDTA+3*(IFFAT-1)  )=ZERO
            X(LFLDTA+3*(IFFAT-1)+1)=ZERO
            X(LFLDTA+3*(IFFAT-1)+2)=ZERO
            X(LFLDXY+3*(IFFAT-1)  )=ZERO
            X(LFLDXY+3*(IFFAT-1)+1)=ZERO
            X(LFLDXY+3*(IFFAT-1)+2)=ZERO
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 100
         END IF
         IF(X(LFFPOL+IFFAT-1).EQ.ZERO) GOTO 100
         CALL QMMMPOLFLDINT(IFFAT,X(LFFCORD),X(LFFIDGROUP),
     *             X(LXEFI),X(LYEFI),X(LZEFI),X(LFFLKQMMM),L2)
         X(LFLDTA+3*(IFFAT-1)  )=TRACEP(X(LTA),X(LXEFI),L1)
         X(LFLDTA+3*(IFFAT-1)+1)=TRACEP(X(LTA),X(LYEFI),L1)
         X(LFLDTA+3*(IFFAT-1)+2)=TRACEP(X(LTA),X(LZEFI),L1)
         X(LFLDXY+3*(IFFAT-1)  )=TRACEP(X(LXY),X(LXEFI),L1)
         X(LFLDXY+3*(IFFAT-1)+1)=TRACEP(X(LXY),X(LYEFI),L1)
         X(LFLDXY+3*(IFFAT-1)+2)=TRACEP(X(LXY),X(LZEFI),L1)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(668,X(LFLDTA),6*NFFAT)
C
C     -- TA --
      CALL VCLR (X(LPOTTA),1,NTS)
      CALL VCLR (X(LQTMP1),1,NTS)
      CALL VCLR (X(LQTMP2),1,NTS)
      CALL VCLR (X(LFFQRXNTA),1,NTS)
      IF(IRXNFLD.GE.60) THEN
         CALL EPOTEN(ONE,X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *               X(LPOTTA),X(LTA),NTS,L2)
         IF(GOPARR) CALL DDI_GSUMF(2668,X(LPOTTA),NTS)
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 200 ITS = 1, NTS
            X(LQTMP1+ITS-1) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
            END IF
            DO JTS = 1, NTS
               X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)
     *           +X(LFFCMAT1+(JTS-1)*NTS+ITS-1)*X(LPOTTA+JTS-1)
            ENDDO
            X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)*SCALE
 200     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2406,X(LQTMP1),NTS)
      END IF
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),X(LFFDIPTA),DUM,
     *              X(LFLDTA),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLST),X(LFFIDGROUP),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),X(LQTMP1),
     *              X(LQTMP2),NTS)
      IF(IRXNFLD.GE.60) THEN
         CALL VADD(X(LQTMP1),1,X(LQTMP2),1,X(LFFQRXNTA),1,NTS)
      END IF
C
C     -- XY --
      CALL VCLR (X(LPOTXY),1,NTS)
      CALL VCLR (X(LQTMP1),1,NTS)
      CALL VCLR (X(LQTMP2),1,NTS)
      CALL VCLR (X(LFFQRXNXY),1,NTS)
      IF(IRXNFLD.GE.60) THEN
         CALL EPOTEN(ONE,X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *               X(LPOTXY),X(LXY),NTS,L2)
         IF(GOPARR) CALL DDI_GSUMF(2668,X(LPOTXY),NTS)
         SCALE = (RXNEPS-ONE)/RXNEPS
         IPCOUNT = ME - 1
         DO 300 ITS = 1, NTS
            X(LQTMP1+ITS-1) = ZERO
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 300
            END IF
            DO JTS = 1, NTS
               X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)
     *           +X(LFFCMAT1+(JTS-1)*NTS+ITS-1)*X(LPOTXY+JTS-1)
            ENDDO
            X(LQTMP1+ITS-1) =  X(LQTMP1+ITS-1)*SCALE
 300     CONTINUE
         IF(GOPARR) CALL DDI_GSUMF(2406,X(LQTMP1),NTS)
      END IF
      CALL SOLVEDIP(X(LFFCORD),X(LFFPOL),X(LFFDIPXY),DUM,
     *              X(LFLDXY),X(LFFFIELD2),X(LFFFIELD3),
     *              X(LFFNONLST),X(LFFIDGROUP),
     *              X(LFFXTS),X(LFFYTS),X(LFFZTS),
     *              X(LFFCMAT1),X(LFFPOT2),X(LQTMP1),
     *              X(LQTMP2),NTS)
      IF(IRXNFLD.GE.60) THEN
         CALL VADD(X(LQTMP1),1,X(LQTMP2),1,X(LFFQRXNXY),1,NTS)
      END IF
C
      CALL RETFM(NEED)
      RETURN
C
      END
C*MODULE QUANPO  *DECK FFEGOUT
      SUBROUTINE FFEGOUT(ATMNAM,FFGRD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 ATMNAM
      DIMENSION ATMNAM(*),FFGRD(3,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     HUI LI, JAN 2011
C
C     ----- PRINT ENERGY GRADIENT VECTOR FOR MM ATOMS -----
C
      IF (MASWRK.AND.NFFAT.GT.0) THEN
         DO IFFAT=1,NFFAT
            WRITE(IW,9000)ATMNAM(IFFAT),
     *                 FFGRD(1,IFFAT),FFGRD(2,IFFAT),FFGRD(3,IFFAT)
         ENDDO
      END IF
      RETURN
C
 9000 FORMAT(1X,A10,5X,3F18.9)
      END
C*MODULE QUANPO  *DECK FFRAND
      SUBROUTINE FFRAND(RNUM)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*24 TIMSTR
C
      COMMON /FFRNUM/ JJRAND(3),NRANDOM,NRANDOM0
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     WICHMANN AND HILL
C     "AN EFFICIENT AND PORTABLE PSEUDO-RANDOM NUMBER GENERATOR"
C     APPLIED STATISTICS, 31, 188-190 (1982)
C
C     CYCLE LENGTH = ((30269-1)*(30307-1)*(30323-1))/4 = 6953607871644
C
C     -- GIVE SEEDS IF NRANDOM=0 OR 1 --
      IF(NRANDOM.EQ.0)THEN
         JJRAND(1)=103
         JJRAND(2)=817
         JJRAND(3)=910
         NRANDOM = 1000
      ELSE IF (NRANDOM.EQ.1) THEN
         IF(MASWRK)THEN
            CALL TMDATE(TIMSTR)
            JJRAND(1)=ICHAR(TIMSTR( 1: 1))*ICHAR(TIMSTR(24:24))
     *               +ICHAR(TIMSTR( 3: 3))*ICHAR(TIMSTR( 4: 4))
     *               +ICHAR(TIMSTR( 5: 5))*ICHAR(TIMSTR(16:16))
     *               +ICHAR(TIMSTR(17:17))*ICHAR(TIMSTR( 8: 8))
            JJRAND(2)=ICHAR(TIMSTR(19:19))*ICHAR(TIMSTR(23:23))
     *               +ICHAR(TIMSTR(11:11))*ICHAR(TIMSTR(22:22))
     *               +ICHAR(TIMSTR(13:13))*ICHAR(TIMSTR(14:14))
     *               +ICHAR(TIMSTR(15:15))*ICHAR(TIMSTR( 6: 6))
            JJRAND(3)=ICHAR(TIMSTR( 7: 7))*ICHAR(TIMSTR(18:18))
     *               +ICHAR(TIMSTR( 9: 9))*ICHAR(TIMSTR(20:20))
     *               +ICHAR(TIMSTR(21:21))*ICHAR(TIMSTR(12:12))
     *               +ICHAR(TIMSTR(10:10))*ICHAR(TIMSTR( 2: 2))
            JJRAND(1)=MOD(JJRAND(1),30000)
            JJRAND(2)=MOD(JJRAND(2),30000)
            JJRAND(3)=MOD(JJRAND(3),30000)
            IF(JJRAND(1).EQ.0) JJRAND(1) = 103
            IF(JJRAND(2).EQ.0) JJRAND(2) = 817
            IF(JJRAND(3).EQ.0) JJRAND(3) = 910
         END IF
         IF(GOPARR) CALL DDI_BCAST(460,'I',JJRAND,3,MASTER)
         NRANDOM = 1000
      END IF
C
      JJRAND(1) = 171*MOD(JJRAND(1),177) -  2*(JJRAND(1)/177)
      JJRAND(2) = 172*MOD(JJRAND(2),176) - 35*(JJRAND(2)/176)
      JJRAND(3) = 170*MOD(JJRAND(3),178) - 63*(JJRAND(3)/178)
      IF(JJRAND(1).LT.0) JJRAND(1) = JJRAND(1) + 30269
      IF(JJRAND(2).LT.0) JJRAND(2) = JJRAND(2) + 30307
      IF(JJRAND(3).LT.0) JJRAND(3) = JJRAND(3) + 30323
      V = JJRAND(1)/30269.0D+00
     *  + JJRAND(2)/30307.0D+00
     *  + JJRAND(3)/30323.0D+00
      RNUM=V-INT(V)
C
      RETURN
      END
C*MODULE QUANPO  *DECK INIRDF
      SUBROUTINE INIRDF(ATMNAM,FRAG1,FRAG2,NFRAG1,NFRAG2,GOFR)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 FRAG1(10),FRAG2(10),ATMNAM(NFFAT)
      DIMENSION NFRAG1(10),NFRAG2(10),GOFR(1000,10)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, APR 2011, LINCOLN
C
      IF(NRDF.EQ.0) RETURN
C
      NUMSUM = 0
      BOX     = MIN(XBOX,YBOX,ZBOX)
      NUMGRD  = INT(BOX*0.5D+00/DELRDF) + 1
      IF(NUMGRD .GT. 1000) NUMGRD = 1000
C
      CALL VCLR(GOFR,1,1000*10)
      CALL VICLR(NFRAG1,1,10)
      CALL VICLR(NFRAG2,1,10)
      DO IRDF = 1, NRDF
         K1   = 0
         K2   = 0
         DO I = 1, NFFAT
            IF (ATMNAM(I) .EQ. FRAG1(IRDF)) K1 = K1 + 1
            IF (ATMNAM(I) .EQ. FRAG2(IRDF)) K2 = K2 + 1
         END DO
         IF(K1.EQ.0 .OR. K2.EQ.0) THEN
            IF(MASWRK) WRITE(IW,*)'ERROR: PLEASE CHECK RDF ='
            CALL ABRT
         END IF
         NFRAG1(IRDF)=K1
         NFRAG2(IRDF)=K2
      ENDDO
C
      RETURN
      END
C
C*MODULE QUANPO  *DECK RDF
      SUBROUTINE RDF(CORD,ISTEP,ATMNAM,FRAG1,FRAG2,NFRAG1,NFRAG2,GOFR,
     *               IDGROUP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ONE=1.0D+00, PI=3.14159265358979323846264338D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      CHARACTER*10 FRAG1(10),FRAG2(10),ATMNAM(NFFAT)
      DIMENSION CORD(3,NFFAT),GOFR(1000,10),NFRAG1(10),NFRAG2(10),
     *          IDGROUP(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRDF / DELRDF,NUMGRD,NUMSUM,NRDF,LFFGOFR,
     *                LFFNFRAG1,LFFNFRAG2,LFFFRAG1,LFFFRAG2
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, APR 2011, LINCOLN
C
      IPCOUNT = ME - 1
      DO 200 IRDF = 1, NRDF
         DO 210 I = 1, NFFAT
            DO 220 J = I+1, NFFAT
               IF(GOPARR) THEN
                  IPCOUNT = IPCOUNT + 1
                  IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 220
               END IF
               IF(((ATMNAM(I).EQ.FRAG1(IRDF)).AND.
     *             (ATMNAM(J).EQ.FRAG2(IRDF)))    .OR.
     *            ((ATMNAM(I).EQ.FRAG2(IRDF)).AND.
     *             (ATMNAM(J).EQ.FRAG1(IRDF)))) THEN
                  GRXGRP = CORD(1,IDGROUP(I)) - CORD(1,IDGROUP(J))
                  GRYGRP = CORD(2,IDGROUP(I)) - CORD(2,IDGROUP(J))
                  GRZGRP = CORD(3,IDGROUP(I)) - CORD(3,IDGROUP(J))
                  PBCX   = XBOX * ANINT(GRXGRP/XBOX)
                  PBCY   = YBOX * ANINT(GRYGRP/YBOX)
                  PBCZ   = ZBOX * ANINT(GRZGRP/ZBOX)
                  GRX    = CORD(1,I) - CORD(1,J)
                  GRY    = CORD(2,I) - CORD(2,J)
                  GRZ    = CORD(3,I) - CORD(3,J)
                  GRX    = GRX - PBCX
                  GRY    = GRY - PBCY
                  GRZ    = GRZ - PBCZ
                  GRL    = SQRT(GRX*GRX+GRY*GRY+GRZ*GRZ)
                  IBIN   = INT(GRL/DELRDF) + 1
                  IF(IBIN.LE.NUMGRD)GOFR(IBIN,IRDF)=GOFR(IBIN,IRDF)+ONE
               END IF
 220        CONTINUE
 210     CONTINUE
 200  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2406,GOFR,1000*10)
      NUMSUM  = NUMSUM + 1
C
      IF(MASWRK.AND.(MOD(ISTEP,KOUT).EQ.0.OR.ISTEP.EQ.NSTEPS)) THEN
         PREFAC  = TOANGS*TOANGS*TOANGS/NUMSUM
         PREFAC2 = PREFAC*XBOX*YBOX*ZBOX/(2.0D+00*PI/3.0D+00)
         DO IRDF = 1, NRDF
            FAC1 = NFRAG1(IRDF)*NFRAG2(IRDF)
            FAC2 = PREFAC2/FAC1
            WRITE(IW,4000) FRAG1(IRDF),FRAG2(IRDF)
            R = 0.0D+00
            RUPPER = R + DELRDF*TOANGS
            DO J = 1, NUMGRD
               DIFF = RUPPER**3 - R**3
               WRITE(IW,4030) R+DELRDF*0.5D+00*TOANGS,
     *                        GOFR(J,IRDF)*FAC2/DIFF
               R = RUPPER
               RUPPER = RUPPER + DELRDF*TOANGS
            ENDDO
            WRITE(IW,*)' '
         ENDDO
      END IF
      CALL FLSHBF(IW)
      IF(GOPARR) CALL DSCAL(1000*10,ONE/NPROC,GOFR,1)
C
      RETURN
 4000 FORMAT(/1X,'RDF FOR ATOM "',A10,'" AND ATOM "',A10,'"')
 4030 FORMAT(1X,F10.3,5X,F12.8)
      END
C
C*MODULE QUANPO  *DECK INIDFS
      SUBROUTINE INIDFS(ATMNAM,DFSA,DFSC,DFSN)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 DFSA(10),ATMNAM(NFFAT)
C
      DIMENSION DFSC(3,10),DFSN(10)
C
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSC0,LFFDFSA,LFFDFSN
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, APR 2011, LINCOLN
C
      CALL VCLR(DFSC,1,30)
      CALL VCLR(DFSN,1,10)
C
      DO IDFS =1, NDFS
         KKK  = 0
         DO I=1, NFFAT
            IF(ATMNAM(I).EQ.DFSA(IDFS)) KKK = KKK + 1
         ENDDO
         IF(KKK.EQ.0) THEN
            IF(MASWRK) WRITE(IW,*)'ERROR: PLEASE CHECK DIFFUSE ='
            CALL ABRT
         END IF
         DFSN(IDFS)=DBLE(KKK)
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK DFS
      SUBROUTINE DFS(CORD,ISTEP,ATMNAM,CORD0,DFSA,DFSC,DFSN)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (THIRD=1.0D+00/3.0D+00, PT5=0.5D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      CHARACTER*10 DFSA(10),ATMNAM(NFFAT)
C
      DIMENSION CORD0(3,*),CORD(3,*),DFSC(3,*),DFSN(10)
C
      COMMON /FFDFS / TIMDFS,NDFS,LFFDFSC,LFFDFSC0,LFFDFSA,LFFDFSN
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, APR 2011, LINCOLN
C
      IF(ISTEP.EQ.0) THEN
         CALL DCOPY(3*NFFAT,CORD,1,CORD0,1)
         RETURN
      END IF
C
      CALL VCLR(DFSC,1,30)
      IPCOUNT = ME - 1
      DO 200 IDFS = 1, NDFS
         DO 210 IFFAT = 1, NFFAT
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 210
            END IF
            IF(ATMNAM(IFFAT).EQ.DFSA(IDFS)) THEN
               DFSC(1,IDFS) = DFSC(1,IDFS) + 
     *                        (CORD(1,IFFAT)-CORD0(1,IFFAT))**2
               DFSC(2,IDFS) = DFSC(2,IDFS) + 
     *                        (CORD(2,IFFAT)-CORD0(2,IFFAT))**2
               DFSC(3,IDFS) = DFSC(3,IDFS) + 
     *                        (CORD(3,IFFAT)-CORD0(3,IFFAT))**2
            END IF
 210     CONTINUE
 200  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2408,DFSC,30)
C
      IF(MASWRK) THEN
         FAC1=PT5*(TOANGS**2)/(TIMDFS*2.418884326505D-08)
         DO IDFS= 1, NDFS
            FAC2 = FAC1/DFSN(IDFS)
            WRITE(IW,9000) 
     *           (ISTEP*DT-TIMDFS)*2.418884326505D-02,
     *                    ISTEP*DT*2.418884326505D-02
            WRITE(IW,9010) DFSA(IDFS),
     *                     DFSC(1,IDFS)*FAC2,
     *                     DFSC(2,IDFS)*FAC2,
     *                     DFSC(3,IDFS)*FAC2,
     *      (DFSC(1,IDFS)+DFSC(2,IDFS)+DFSC(3,IDFS))*FAC2*THIRD
            WRITE(IW,*)' '
         ENDDO
      END IF
      CALL DCOPY(3*NFFAT,CORD,1,CORD0,1)
C
      RETURN
 9000 FORMAT(/1X,'DIFFUSION COEFFICIENT OBTAINED USING STRUCTURES ',
     *       'AT TIME ', F10.2,' AND ',F10.2,' FS',
     *       /1X,'ATOM',19X,'X',11X,'Y',11X,'Z',10X,'3D')
 9010 FORMAT(1X,A,'D=',4F12.2,'   A**2/NS')
      END
C*MODULE QUANPO  *DECK RMSD
      SUBROUTINE RMSD(CORD,ISTEP,ZANF,CORD0)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ONE=1.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD0(3,*),CORD(3,*),RMSDF(2,2),RMSDN(2),ZANF(*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, MAY 2011, LINCOLN
C
      IF(ISTEP.EQ.0) THEN
         CALL DCOPY(3*NFFAT,CORD,1,CORD0,1)
         RETURN
      END IF
C
      CALL VCLR(RMSDF,1,4)
      CALL VCLR(RMSDN,1,2)
      IPCOUNT = ME - 1
      DO 100 IFFAT = 1, NATPDB
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         X  = CORD(1,IFFAT)-CORD0(1,IFFAT)
         Y  = CORD(2,IFFAT)-CORD0(2,IFFAT)
         Z  = CORD(3,IFFAT)-CORD0(3,IFFAT)
         R2 = X*X+Y*Y+Z*Z
         R  = SQRT(R2)
         IF(ZANF(IFFAT).NE.ONE) THEN
            RMSDF(1,1) = RMSDF(1,1) + R
            RMSDF(2,1) = RMSDF(2,1) + R2
            RMSDN(1)   = RMSDN(1)   + ONE
         END IF
         RMSDF(1,2) = RMSDF(1,2) + R
         RMSDF(2,2) = RMSDF(2,2) + R2
         RMSDN(2)   = RMSDN(2)   + ONE
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2409,RMSDF,4)
      IF(GOPARR) CALL DDI_GSUMF(2410,RMSDN,2)
C
      IF(MASWRK) THEN
         WRITE(IW,9000) RMSDF(1,1)/RMSDN(1)*TOANGS,
     *                  RMSDF(1,2)/RMSDN(2)*TOANGS,
     *                  SQRT(RMSDF(2,1)/RMSDN(1))*TOANGS,
     *                  SQRT(RMSDF(2,2)/RMSDN(2))*TOANGS
      END IF
C
      RETURN
 9000 FORMAT(/1X,55X,'HEAVY-ATOM',4X,'ALL-ATOM'
     *       /1X,'AVERAGE UNSIGNED DISPLACEMENT FROM',
     *          ' INITIAL STRUCTURE  ',F8.2,5X,F8.2,'   ANGSTROM',
     *       /1X,'ROOT MEAN SQUARE DISPLACEMENT FROM',
     *          ' INITIAL STRUCTURE  ',F8.2,5X,F8.2,'   ANGSTROM')
      END
C*MODULE QUANPO  *DECK GYRA 
      SUBROUTINE GYRA(CORD,ZANF,ZMAS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*),ZANF(*),ZMAS(*),COM(3),GYRAF(2)
C
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, MAY 2011, LINCOLN
C
      COM(1)  = ZERO
      COM(2)  = ZERO
      COM(3)  = ZERO
      TOTMS1  = ZERO
      TOTMS2  = ZERO
      GYRAF(1)= ZERO
      GYRAF(2)= ZERO
C
      IPCOUNT = ME - 1
      DO 100 IFFAT = 1, NATPDB
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         COM(1) = COM(1) + ZMAS(IFFAT)*CORD(1,IFFAT)
         COM(2) = COM(2) + ZMAS(IFFAT)*CORD(2,IFFAT)
         COM(3) = COM(3) + ZMAS(IFFAT)*CORD(3,IFFAT)
         IF(ZANF(IFFAT).NE.ONE) TOTMS1 = TOTMS1+ ZMAS(IFFAT)
                                TOTMS2 = TOTMS2+ ZMAS(IFFAT)
 100  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2411,   COM,3)
      IF(GOPARR) CALL DDI_GSUMF(2412,TOTMS1,1)
      IF(GOPARR) CALL DDI_GSUMF(2413,TOTMS2,1)
C
      ONETOTMS1= ONE/TOTMS1
      ONETOTMS2= ONE/TOTMS2
      COM(1)   = COM(1)*ONETOTMS2
      COM(2)   = COM(2)*ONETOTMS2
      COM(3)   = COM(3)*ONETOTMS2
C
      IPCOUNT = ME - 1
      DO 200 IFFAT = 1, NATPDB
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         X    = CORD(1,IFFAT) - COM(1)
         Y    = CORD(2,IFFAT) - COM(2)
         Z    = CORD(3,IFFAT) - COM(3)
         DUM  = (X*X + Y*Y + Z*Z)*ZMAS(IFFAT)
         IF(ZANF(IFFAT).NE.ONE) GYRAF(1) = GYRAF(1) + DUM
                                GYRAF(2) = GYRAF(2) + DUM
 200  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2414,GYRAF,2)
      GYRAF(1) = SQRT(GYRAF(1)*ONETOTMS1)
      GYRAF(2) = SQRT(GYRAF(2)*ONETOTMS2)
C
      IF(MASWRK) THEN
         WRITE(IW,9000) GYRAF(1)*TOANGS,GYRAF(2)*TOANGS
      END IF
C
      RETURN
 9000 FORMAT(1X,'RADIUS OF GYRATION AT CURRENT STEP',20X,F8.2,
     *          5X,F8.2,'   ANGSTROM')
      END
C*MODULE QUANPO  *DECK RALL
      SUBROUTINE RALL(CORD0,CORD,ISTEP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
      PARAMETER (ZERO=0.0D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD0(3,*),CORD(3,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, MAY 2011, LINCOLN
C
      IF(ISTEP.EQ.0) THEN
         CALL DCOPY(3*NFFAT,CORD,1,CORD0,1)
         RETURN
      END IF
C
      DIFF = ZERO
C
      IPCOUNT = ME - 1
      DO 210 IFFAT = 1, NATPDB-1
         DO 220 JFFAT = IFFAT+1, NATPDB
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 220
            END IF
            X    = CORD(1,IFFAT)-CORD(1,JFFAT)
            Y    = CORD(2,IFFAT)-CORD(2,JFFAT)
            Z    = CORD(3,IFFAT)-CORD(3,JFFAT)
            R    = SQRT(X*X+Y*Y+Z*Z)
            X    = CORD0(1,IFFAT)-CORD0(1,JFFAT)
            Y    = CORD0(2,IFFAT)-CORD0(2,JFFAT)
            Z    = CORD0(3,IFFAT)-CORD0(3,JFFAT)
            R0   = SQRT(X*X+Y*Y+Z*Z)
            DIFF = DIFF + (R-R0)*(R-R0)
 220     CONTINUE
 210  CONTINUE
      IF(GOPARR) CALL DDI_GSUMF(2415,DIFF,1)
C
      NPAIR = NATPDB*(NATPDB-1)/2
      IF(MASWRK) THEN
         WRITE(IW,9000) SQRT(DIFF/NPAIR)*TOANGS
      END IF
C
      RETURN
 9000 FORMAT(1X,'RMSD OF INTERNUCLEAR DISTANCE FROM INITIAL',
     *       ' STRUCTURE  ',13X,F8.2,'   ANGSTROM')
      END
C*MODULE QUANPO  *DECK DISIJ
      SUBROUTINE DISIJ(CORD)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TOANGS=0.52917724924D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*)
C
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, MAY 2011, LINCOLN
C
      IF(MASWRK) THEN
         DO I =1, NRIJ
            IFFAT = IJRIJ(1,I)
            JFFAT = IJRIJ(2,I)
            XX    = CORD(1,IFFAT)-CORD(1,JFFAT)
            YY    = CORD(2,IFFAT)-CORD(2,JFFAT)
            ZZ    = CORD(3,IFFAT)-CORD(3,JFFAT)
            DUM   = SQRT(XX*XX+YY*YY+ZZ*ZZ)
            WRITE (IW,9000) IFFAT,JFFAT,DUM*TOANGS
         ENDDO
      END IF
      RETURN
C
 9000 FORMAT(1X,'DISTANCE BETWEEN ATOMS ',I8,' AND',I8,' = ',
     *       21X,F8.2,'   ANGSTROM')
      END
C*MODULE QUANPO  *DECK DIELECT
      SUBROUTINE DIELECT(CORD,CHARG,POL,DIP,ISTEP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (PI=3.14159265358979323846264338D+00)
      PARAMETER (TOKELVIN=3.15774646D+05, BOLTZK=1.0D+00/TOKELVIN)
      PARAMETER (ONE=1.0D+00, THREE=3.0D+00, FOUR3RD=4.0D+00/3.0D+00)
      PARAMETER (ZERO=0.0D+00, FOUR=4.0D+00, THIRD=1.0D+00/3.0D+00)
      PARAMETER (PT5=0.5D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION CORD(3,*),CHARG(*),POL(*),DIP(3,*),DIPSTEP(3)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFMDPA/ DT,DT2,TEMP0,PRES0,POLTOL,VIR(3),PMEAN,VOLAV,
     *                ENPAV,ENKAV,TEMPAV,OPTTOL,NSTEPS,NPROP,
     *                MXITER,INTALG,ITSTAT,IPSTAT,JOUT,KOUT,LOUT
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
      COMMON /FFRMSD/ DIPT(4),TIMGYRA,TIMRALL,
     *                NATPDB,NFIXPDB,NGYRA,NDIEL,NRALL,
     *                LFFRALL0,NRMSD,LFFRMSD0,NRIJ,IJRIJ(2,20)
      COMMON /FFSPH / SPHRAD,SPHSIG,SPHEPS,IADDWAT
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     DEJUN SI, HUI LI, MAY 2011, LINCOLN
C
      IF(ISTEP.EQ.0) THEN
         CALL VCLR(DIPT,1,4)
         RETURN
      END IF
C
      SPHDIEL2 = (SPHRAD - SPHSIG)**2
      CALL VCLR(DIPSTEP,1,3)
      IPCOUNT = ME - 1
      DO 100 IFFAT = 1, NFFAT
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 100
         END IF
         CXGRP      = CORD(1,IFFAT) - CENTX
         CYGRP      = CORD(2,IFFAT) - CENTY
         CZGRP      = CORD(3,IFFAT) - CENTZ
         PBCX       = XBOX*ANINT(CXGRP/XBOX)
         PBCY       = YBOX*ANINT(CYGRP/YBOX)
         PBCZ       = ZBOX*ANINT(CZGRP/ZBOX)
         CX         = CORD(1,IFFAT) - PBCX - CENTX
         CY         = CORD(2,IFFAT) - PBCY - CENTY
         CZ         = CORD(3,IFFAT) - PBCZ - CENTZ
         R2         = CX*CX+CY*CY+CZ*CZ
         IF(R2.GT.SPHDIEL2) GOTO 100
         DIPSTEP(1) = DIPSTEP(1) + CHARG(IFFAT)*CX
         DIPSTEP(2) = DIPSTEP(2) + CHARG(IFFAT)*CY
         DIPSTEP(3) = DIPSTEP(3) + CHARG(IFFAT)*CZ
 100  CONTINUE
C
      IF(IDOPOL.EQ.0) GOTO 210
      RFAC = (THREE/(FOUR*PI))**THIRD
      IPCOUNT = ME - 1
      DO 200 IFFAT = 1, NFFAT
         IF(POL(IFFAT).EQ.ZERO) GOTO 200
         IF(GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF(MOD(IPCOUNT,NPROC).NE.0) GOTO 200
         END IF
         RPOL = RFAC*POL(IFFAT)**THIRD
         RPOL2= FOUR*RPOL*RPOL
         DIP2 = DIP(1,IFFAT)**2+DIP(2,IFFAT)**2+DIP(3,IFFAT)**2
         DIPQ = SQRT(DIP2/RPOL2)
         DIPCX= DIP(1,IFFAT)/DIPQ
         DIPCY= DIP(2,IFFAT)/DIPQ
         DIPCZ= DIP(3,IFFAT)/DIPQ
         DO 201 II=1,2
            IF(II.EQ.1) FAC =  PT5
            IF(II.EQ.2) FAC = -PT5
            CXGRP      = CORD(1,IFFAT) + FAC*DIPCX - CENTX
            CYGRP      = CORD(2,IFFAT) + FAC*DIPCY - CENTY
            CZGRP      = CORD(3,IFFAT) + FAC*DIPCZ - CENTZ
            PBCX       = XBOX*ANINT(CXGRP/XBOX)
            PBCY       = YBOX*ANINT(CYGRP/YBOX)
            PBCZ       = ZBOX*ANINT(CZGRP/ZBOX)
            CX         = CORD(1,IFFAT) + FAC*DIPCX - PBCX - CENTX
            CY         = CORD(2,IFFAT) + FAC*DIPCY - PBCY - CENTY
            CZ         = CORD(3,IFFAT) + FAC*DIPCZ - PBCZ - CENTZ
            R2         = CX*CX+CY*CY+CZ*CZ
            IF(R2.GT.SPHDIEL2) GOTO 201
            IF(II.EQ.2) DIPQ = -DIPQ
            DIPSTEP(1) = DIPSTEP(1) + DIPQ*CX
            DIPSTEP(2) = DIPSTEP(2) + DIPQ*CY
            DIPSTEP(3) = DIPSTEP(3) + DIPQ*CZ
 201     CONTINUE
 200  CONTINUE
C
 210  CONTINUE
C
      IF(GOPARR) CALL DDI_GSUMF(2416,DIPSTEP,3)
C
      DIPT(1)= DIPT(1) + DIPSTEP(1)
      DIPT(2)= DIPT(2) + DIPSTEP(2)
      DIPT(3)= DIPT(3) + DIPSTEP(3)
      DIPT(4)= DIPT(4) + DIPSTEP(1)**2+DIPSTEP(2)**2+DIPSTEP(3)**2
C
      VOLUME = VOLAV
      IF(SPHRAD.LT.1.0D+24)VOLUME=FOUR3RD*PI*(SPHRAD-SPHSIG)**3
      IF(MASWRK.AND.(MOD(ISTEP,JOUT).EQ.0.OR.ISTEP.EQ.NSTEPS)) THEN
         D2MEAN  = DIPT(4)/ISTEP
         DMEAN2  = (DIPT(1)**2+DIPT(2)**2+DIPT(3)**2)/ISTEP/ISTEP
         DIECONST= ONE+(D2MEAN-DMEAN2)/(THREE*BOLTZK*TEMPAV*VOLUME)
         WRITE(IW,9000) DIECONST,D2MEAN,DMEAN2
      END IF
C
      RETURN
 9000 FORMAT(1X,'DIELECTRIC CONSTANT =',E12.5,
     *       1X,'<M**2> =',E12.5,' <M>**2 =',E12.5,' (E*BOHR)**2')
      END
C*MODULE QUANPO  *DECK GROUPID
      SUBROUTINE GROUPID(IDGROUP,KLIST)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION IDGROUP(*),KLIST(3,*)
C
      COMMON /FFPARM/ NFFAT,NBOND,NANGL,NDIHR,NDIHB,NCMAP,NWAGG,
     *                N1213J,N14J,NLKQMM,IDOCHG,IDOPOL,IDOLJ,IDOCMAP
      COMMON /FFPBSW/ XBOX,YBOX,ZBOX,SWF,SWFDX,SWFDY,SWFDZ,
     *                SWRR1,SWRR2,RRCUT,SWFDUM3,SWFDUM4,SWFDUM5,
     *                SWRR1Q,SWRR2Q,RRCUTQ,SWFDUM3Q,SWFDUM4Q,SWFDUM5Q,
     *                QMCX,QMCY,QMCZ,QMCXSV,QMCYSV,QMCZSV,
     *                CENTX,CENTY,CENTZ,BUFLIST,
     *                LQMCT,MXLIST,NTODO,NTODOQ,MODESW,
     *                LFFIDGROUP,LFFCORDSV
C
C     HUI LI, APR 2011, LINCOLN
C
      CALL VICLR(IDGROUP,1,NFFAT)
C
C     -- ATOM-ATOM SWITCHING --
C
      IF(MODESW.EQ.1) THEN
         DO IFFAT = 1, NFFAT
            IDGROUP(IFFAT) = IFFAT
         ENDDO
         RETURN
      END IF
C
C     -- GROUP-GROUP SWITCHING --
C
      DO IANGL = 1, NANGL
         IDGROUP(KLIST(2,IANGL)) = KLIST(2,IANGL)
      ENDDO
      DO IANGL = 1, NANGL
         IF(IDGROUP(KLIST(1,IANGL)).EQ.0) 
     *      IDGROUP(KLIST(1,IANGL)) = KLIST(2,IANGL)
         IF(IDGROUP(KLIST(3,IANGL)).EQ.0) 
     *      IDGROUP(KLIST(3,IANGL)) = KLIST(2,IANGL)
      ENDDO
      DO IFFAT = 1, NFFAT
         IF(IDGROUP(IFFAT).EQ.0) IDGROUP(IFFAT) = IFFAT
      ENDDO
C
      RETURN
      END
C*MODULE QUANPO  *DECK GETIFFAT
      SUBROUTINE GETIFFAT(NONLSTQ,IIQ,IFFAT)
      DIMENSION NONLSTQ(*)
      IFFAT = NONLSTQ(IIQ)
      RETURN
      END
C*MODULE QUANPO  *DECK GENQPFILE
      SUBROUTINE GENQPFILE(FILE,QPFILE,KOLMAXQF)
      CHARACTER*64 FILE
      CHARACTER*256 QPFILE
      CHARACTER*256 QPPATH
      CHARACTER*1 NULL
      NULL = CHAR(0)
C
C          BUILD A TOTAL UNIX FILE NAME, INCLUDING A STROKE BETWEEN THE
C          PATHNAME FROM THE ENVIROMENT, AND THE DATA FILE -QPFILE- FROM
C          THE ARGUMENT LIST.  THE DATA FILE ARGUMENT SHOULD BE PROVIDED
C          WITH A TRAILING BLANK DELIMITER.
C          THE 3RD ARGUMENT RETURNS THE LENGTH OF TOTAL PATH+FILE NAME.
C
      CALL GMS_GETENV('QUANPOL',QPPATH)
      DO KOL = 1,256
         IF (QPPATH(KOL:KOL) .EQ. ' ' .OR.
     *       QPPATH(KOL:KOL) .EQ. NULL) GO TO 100
         KOLMAXQP = KOL
      END DO
      KOLMAXQP = 256
C
  100 CONTINUE
      DO KOL = 1,64
         IF (FILE(KOL:KOL) .EQ. ' ' .OR.
     *       FILE(KOL:KOL) .EQ. NULL) GO TO 200
         KOLMAXF = KOL
      END DO
      KOLMAXF = 64
C
  200 CONTINUE
      KOLMAXQF = KOLMAXQP + KOLMAXF + 1
      IF(KOLMAXQF+1.GT.256) THEN
         WRITE(6,*) 'GENQPFILE: MORE THAN 256 BYTES'
         CALL ABRT
      END IF
C
      QPFILE(         1:KOLMAXQP          ) = QPPATH(1:KOLMAXQP)
      QPFILE(KOLMAXQP+1:KOLMAXQP+1        ) = '/'
      QPFILE(KOLMAXQP+2:KOLMAXQP+1+KOLMAXF) = FILE(1:KOLMAXF)
C
      QPFILE(KOLMAXQF+1:KOLMAXQF+1)         = NULL
      RETURN
      END
