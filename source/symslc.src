C 19 DEC 12 - JI,GDF - Add h/i functionality. Whole module extensively modifed
C 11 AUG 10 - DGF - FMO SALC CALL
C 10 MAY 10 - RMO - SPHBCK: PARALLELIZATION
C 19 SEP 05 - MWS - ADD TRUE NUCLEAR CHARGE ARRAY TO INFOA COMMON
C  5 JUL 05 - MWS - SELECT NEW ATOM,BASIS,EFP,PCM,DAF DIMENSIONS
C 30 APR 05 - DGF - SYNCHRONISE SYMBLK COMMON BLOCK
C 13 FEB 05 - MWS - PAD COMMON BLOCK NSHEL
C 19 MAY 04 - DGF - CIPA: SUPPRESS SOME OUTPUT
C  9 DEC 03 - MWS - SPHSET: ADDED SAVE FOR SUN COMPILER
C  5 NOV 03 - DGF - ADD UNCONTRACTED BACK TRANSFORMATION, SPHBCKU
C 24 JAN 02 - DGF - PASS NECESSARY STORAGE INTO SPHBCK
C 25 JUN 01 - MWS - COMPLETELY DEACTIVATE BLKTYP OPTION
C 11 JUN 00 - MWS - SALCPR: PRINT SIZE OF VARIATION SPACE
C 21 DEC 99 - DGF - REHABILITATE F AND G TRANSFORMATION MATRICES
C 31 DEC 98 - MAF - SPHMAT: SUBROUTINE ADDED FROM HONDO
C 12 NOV 98 - GDF - REMOVE ALL BIT PACKING USAGE
C 27 OCT 98 - MAF - CIPA,SPHTRF: ALLOW FOR USE OF SPHERICAL HARMONICS;
C                   ACTIVATE SPHMAK; ADD MICHEL'S SPHPRT FOR DEBUGGING
C 14 AUG 97 - MD  - SPHSET,SPHMAK: CHANGES TO NORMALIZATIONS
C 13 JUN 96 - VAG - ADD VARIABLE FOR CI TYPE TO SCFOPT COMMON
C  6 MAR 96 - MWS - CHANGES FOR SHELL SYMMETRY PACKING
C 12 NOV 94 - MWS - REMOVE MOST FTNCHEK WARNINGS
C 10 AUG 94 - MWS - INCREASE NUMBER OF DAF RECORDS
C  5 NOV 92 - MWS - CHANGE TO 16 BIT PACKING FOR SALC INDICES
C  3 NOV 92 - MWS - CIPA: INCLUDE MICHEL'S COMPLEX GROUP FIX
C 20 MAR 92 - MWS - NEW CODE FROM MICHEL
C
c> @file  Some explanations of dimensions are relevant here.
c>
c>   The 108 that occurs below in P,PR,PI,PNORM,CA,MXSALC is a result of:
c>       108 = 3 (triply degenerate irreps) x 36 (No. of Cartesians for K,L=7).
c>   The 108 used to be 45 = 3 x 15 (No. of Cartesians for G,L=4).
c>   I have purposely used K,L=7 because 84 = 3 x 28 (No. of Carts for I,L=6) 
c>   where 84 is by pure chance another magic number. Best to avoid confusion.
c>
c>                                        S P D  F  G  H  I
c>   The 84 that occurs below is for 84 = 1+3+6+10+15+21+28, i.e., the sum of  
c>   number of Cartesians up to I,L=6. This used to be 35 (G,L=4).
c>
c>   7 (and 8) occurs frequently, this is for loops/storage up to I,L=6. 
C>   7 used to be 5 for loops/storage up to G,L=4.
c>
c>   Other DATA arrays and dimensions can be inferred from numbers shown above.

C
C*MODULE SYMSLC  *DECK CIPA
C
C> @brief : Routine and module to compute SALC coefficients. This essentially 
C>          transforms the AO basis so that it corresponds to the point 
C>          group/symmetry, i.e., makes symmetrical combinations of the AO 
C>          basis functions.
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Major upgrade to include for h,i functions in basis
C>          All routines in this module have been significantly modified
C
      SUBROUTINE CIPA(P,PR,PI,PNORM,ISGRP,CA,SAO,TWRK,UWRK,ISB,IPB,
     *                CCHAR,CC,LAB,SHELL,LOC1,LOC2,IWRK1,IWRK2,KLASS,
     *                IRPBAS,IDLAB,DIJPQ,LDIJPQ,GAM,CHARR,
     *                TRACEP,TRACED,TRACEF,TRACEG,traceh,tracei,
     *                DD,SS,VV,TT,PP,ROT,
     *                BUFF,PSPH,DSPH,FSPH,GSPH, hsph,aisph,
     *                NATM,L1,L3,NSH,MXCIPA,DBG,SOME)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL SKIP,DBG,SOME,ABEL
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000)
C
      DIMENSION P(108,108),PR(108,108),PI(108,108),PNORM(108),
     *          isgrp(natm,8),ca(natm,108),sao(l3),twrk(l3),uwrk(l1),
     *          isb(nsh,14),ipb(nsh,14),cchar(7,48),cc(mxcipa),
     *          lab(mxcipa,4),shell(natm,8),loc1(nat,7),loc2(nat,7),
     *          IWRK1(NATM),IWRK2(NATM),KLASS(NATM),IRPBAS(*),
     *          DIJPQ(1000),LDIJPQ(1000),GAM(48,48),CHARR(48,14),
     *          TRACEP(48),TRACED(48),TRACEF(48),TRACEG(48),
     *          traceh(48),tracei(48),
     *          DD(84),ROT(28,28),BUFF(28,28),IDLAB(*),
     *          ss(84,84),vv(84,84),tt(84,84),pp(84,84),
     *          PSPH(3,3),DSPH(6,6),FSPH(10,10),GSPH(15,15),
     *          hsph(21,21),aisph(28,28)
      dimension isg(8),kbb(7),kcc(7),skip(7),mp(7),mf(7),mirp(7,14)
C
      COMMON /BASSPH/ QMTTOL,ISPHER
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SYMBLK/ NIRRED,NSALC,NSALC2,NSALC3,NSAFMO
      COMMON /SYMMOL/ GROUP,COMPLX,IGROUP,NAXIS,ILABMO,ABEL
      COMMON /SYMREP/ IRPNAM(14),IPA(14),LAMBDA(14),LAMBD0(14),
     *                IADDR1(14),IADDR2(14),IADDR3(14)
      COMMON /SYMSPD/ PTR(3,144),DTR(6,288),FTR(10,480),GTR(15,720)
      common /symhi / htr(21,1008),aitr(28,1344)
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
C
      DATA CMPLX    /8HCOMPLEX /
      DATA MXSALC   /108/
      data mf       /0,1,4,10,20,35,56/
      data mp       /1,3,6,10,15,21,28/
      DATA TOL      /1.0D-10/
      DATA ZERO,HALF,ONE /0.0D+00,0.5D+00,1.0D+00/
      DATA BLOCKI   /8HBLOCKI  /, BLANK/8HBLANK   /
C
C     ----- CIPA GENERATES COEFFICIENTS OF -----
C        SYMMETRY ADAPTED LINEAR COMBINATIONS
C
C     -----------------------------------------------
C     ----- BEWARE THAT THE -CIPA- COEFFICIENTS -----
C     ----- REFER TO THE SPHERICAL HARMONICS    -----
C     ----- BASIS, NOT TO THE CARTESIAN BASIS.  -----
C     -----------------------------------------------
C
      DO 5 IRP=1,NIRRED
      DO 5 ISH=1,NSHELL
      ISB(ISH,IRP)=0
    5 IPB(ISH,IRP)=0
      do 10 i=1,7
      DO 10 IAT=1,NAT
      LOC1(IAT,I)=-1
   10 LOC2(IAT,I)=-1
C
C     ----- READ -PTR, DTR, FTR, GTR- MATRICES -----
C
      CALL DAREAD(IDAF,IODA,PTR,  432, 7,0)
      CALL DAREAD(IDAF,IODA,DTR, 1728, 8,0)
      CALL DAREAD(IDAF,IODA,FTR, 4800, 9,0)
      CALL DAREAD(IDAF,IODA,GTR,10800,10,0)
C
      call daread(idaf,ioda, htr,21168,911,0) 
      call daread(idaf,ioda,aitr,37632,912,0) 
C
      IF(ISPHER.GE.0) THEN
C
C     -----  TRANSFORM TO SPHERICAL HARMONICS BASIS.    -----
C
         CALL SPHSET(DBG,DD,SS,VV,TT,PP,ROT,BUFF,
     *               psph,dsph,fsph,gsph,hsph,aisph)
         CALL SPHTRF(DBG)
         IF(DBG) CALL SPHPRT
C
C     ----- IF REQUESTED, ELIMINATE UNWANTED FUNCTIONS. -----
C
         IF(ISPHER.GT.0) THEN
            CALL SPHCUT(DBG)
            IF(SOME  .AND.  NFG.EQ.0) WRITE(IW,9980)
         END IF
      END IF
C
C     ----- GET TRACE OF -PTR, DTR, FTR, GTR- FOR EACH OPERATION -----
C
      DO 15 IT=1,NT
      N= 3*(IT-1)
      TRACEP(IT)=PTR(1,N+1)+PTR(2,N+2)+PTR(3,N+3)
      N= 6*(IT-1)
      TRACED(IT)=DTR(1,N+1)+DTR(2,N+2)+DTR(3,N+3)+
     1           DTR(4,N+4)+DTR(5,N+5)+DTR(6,N+6)
      N=10*(IT-1)
      TRACEF(IT)=FTR(1,N+1)+FTR(2,N+2)+FTR(3,N+3)+
     1           FTR(4,N+4)+FTR(5,N+5)+FTR(6,N+6)+
     1           FTR(7,N+7)+FTR(8,N+8)+FTR(9,N+9)+
     1           FTR(10,N+10)
      N=15*(IT-1)
      TRACEG(IT)=GTR(1,N+1)+GTR(2,N+2)+GTR(3,N+3)+
     1           GTR(4,N+4)+GTR(5,N+5)+GTR(6,N+6)+
     1           GTR(7,N+7)+GTR(8,N+8)+GTR(9,N+9)+
     1           GTR(10,N+10)+GTR(11,N+11)+GTR(12,N+12)+
     1           GTR(13,N+13)+GTR(14,N+14)+GTR(15,N+15)
c h
      n=21*(it-1)
      traceh(it)=htr( 1,n+ 1)+htr( 2,n+ 2)+htr( 3,n+ 3)+
     1           htr( 4,n+ 4)+htr( 5,n+ 5)+htr( 6,n+ 6)+
     1           htr( 7,n+ 7)+htr( 8,n+ 8)+htr( 9,n+ 9)+
     1           htr(10,n+10)+htr(11,n+11)+htr(12,n+12)+
     1           htr(13,n+13)+htr(14,n+14)+htr(15,n+15)+
     1           htr(16,n+16)+htr(17,n+17)+htr(18,n+18)+
     1           htr(19,n+19)+htr(20,n+20)+htr(21,n+21)
c i
      n=28*(it-1)
      tracei(it)=aitr( 1,n+ 1)+aitr( 2,n+ 2)+aitr( 3,n+ 3)+
     1           aitr( 4,n+ 4)+aitr( 5,n+ 5)+aitr( 6,n+ 6)+
     1           aitr( 7,n+ 7)+aitr( 8,n+ 8)+aitr( 9,n+ 9)+
     1           aitr(10,n+10)+aitr(11,n+11)+aitr(12,n+12)+
     1           aitr(13,n+13)+aitr(14,n+14)+aitr(15,n+15)+
     1           aitr(16,n+16)+aitr(17,n+17)+aitr(18,n+18)+
     1           aitr(19,n+19)+aitr(20,n+20)+aitr(21,n+21)+
     1           aitr(22,n+22)+aitr(23,n+23)+aitr(24,n+24)+
     1           aitr(25,n+25)+aitr(26,n+26)+aitr(27,n+27)+
     1           aitr(28,n+28)
C
   15 CONTINUE
      IF(DBG) THEN
         WRITE(IW,9019) (TRACEP(IT),IT=1,NT)
         WRITE(IW,9018) (TRACED(IT),IT=1,NT)
         WRITE(IW,9017) (TRACEF(IT),IT=1,NT)
         WRITE(IW,9016) (TRACEG(IT),IT=1,NT)
      END IF
C
C     ---- FOR EACH CENTER FIND SUBGROUP WHICH MAPS IT INTO ITSELF ----
C
      DO 66 IAT=1,NAT
C
      K1=1
      K2=1
      K3=1
      K4=1
      K5=1
      K6=1
      J1=0
      J2=0
      J3=0
      J4=0
      J5=0
      J6=0
      DO 64 IT=1,NT
C
C     ----- BUILD FIRST WORD -----
C
      IF(IT-24) 32,32,36
   32 IF(MAPCTR(IAT,IT).NE.IAT) GO TO 34
      J1=J1+K1
   34 K1=K1+K1
      GO TO 64
C
C     ----- BUILD SECOND WORD IF NEEDED -----
C
   36 IF(IT-48) 38,38,42
   38 IF(MAPCTR(IAT,IT).NE.IAT) GO TO 40
      J2=J2+K2
   40 K2=K2+K2
      GO TO 64
C
C     ----- BUILD THIRD WORD IF NEEDED -----
C
   42 IF(IT-72) 44,44,48
   44 IF(MAPCTR(IAT,IT).NE.IAT) GO TO 46
      J3=J3+K3
   46 K3=K3+K3
      GO TO 64
C
C     ----- BUILD FOURTH WORD IF NEEDED -----
C
   48 IF(IT-96) 50,50,54
   50 IF(MAPCTR(IAT,IT).NE.IAT) GO TO 52
      J4=J4+K4
   52 K4=K4+K4
      GO TO 64
C
C     ----- BUILD FIFTH WORD IF NEEDED -----
C
   54 IF(IT-120) 56,56,60
   56 IF(MAPCTR(IAT,IT).NE.IAT) GO TO 58
      J5=J5+K5
   58 K5=K5+K5
      GO TO 64
C
C     ----- BUILD SIXTH WORD IF NEEDED -----
C
   60 CONTINUE
      IF(MAPCTR(IAT,IT).NE.IAT) GO TO 62
      J6=J6+K6
   62 K6=K6+K6
C
   64 CONTINUE
C
C     ----- THESE SIX WORDS DESCRIBE THE ATOM CLASSES -----
C
      ISGRP(IAT,1)=J1
      ISGRP(IAT,2)=J2
      ISGRP(IAT,3)=J3
      ISGRP(IAT,4)=J4
      ISGRP(IAT,5)=J5
      ISGRP(IAT,6)=J6
   66 CONTINUE
C
      IC=0
      ICLASS=0
      DO 70 IAT=1,NAT
   70 KLASS(IAT)=0
      DO 80 IRP=1,NIRRED
   80 IPA(IRP)=0
C
C     ----- PICK CENTER IN -P1- LIST -----
C
      DO 1000 IAT=1,NAT
C
      DO 110 IT=1,NT
      IF(MAPCTR(IAT,IT).GT.IAT) GO TO 1000
  110 CONTINUE
      IF(KLASS(IAT).NE.0) GO TO 1000
      ICLASS=ICLASS+1
      KLASS(IAT)=ICLASS
      DO 120 NQ=1,6
  120 ISG(NQ)=ISGRP(IAT,NQ)
      IF(DBG) WRITE(IW,9985) IAT
C
C     ----- DETERMINE OTHER -P1- CENTERS IN SAME CLASS -----
C
      MIN=IAT+1
      IF(MIN.GT.NAT) GO TO 240
      DO 230 JAT=MIN,NAT
      DO 210 NQ=1,6
      IF(ISGRP(JAT,NQ).NE.ISG(NQ)) GO TO 230
  210 CONTINUE
      DO 220 IT=1,NT
      IF(MAPCTR(JAT,IT).GT.JAT) GO TO 230
  220 CONTINUE
      KLASS(JAT)=ICLASS
  230 CONTINUE
  240 CONTINUE
C
C     ----- CHECK WHICH ANGULAR MOMENTA ARE PRESENT ON THAT CENTER -----
C
      do 250 kt=1,7
  250 SKIP(KT)=.TRUE.
      DO 260 ISH=1,NSHELL
      JAT=KATOM(ISH)
      IF(KLASS(JAT).NE.ICLASS) GO TO 260
      KT=KTYPE(ISH)
      SKIP(KT)=.FALSE.
      IF(KMIN(ISH).EQ.1) SKIP(1)=.FALSE.
  260 CONTINUE
C
C     ----- FIND CHARACTERS OF REDUCIBLE REPRESENTATION.     -----
C     ----- EQUIVALENT CENTER IATOM WILL CONTRIBUTE ONLY TO  -----
C           CHARACTER OF OPERATIONS WHICH MAP IT INTO ITSELF.
C
      DO 310 IT=1,NT
      do 310 kt=1,7
  310 CCHAR(KT,IT)=ZERO
C
      DO 350 JAT=1,NAT
      DO 320 IT=1,NT
      IF(MAPCTR(IAT,IT).EQ.JAT) GO TO 330
  320 CONTINUE
      GO TO 350
  330 CONTINUE
      DO 340 IT=1,NT
      IF(MAPCTR(JAT,IT).NE.JAT) GO TO 340
      CCHAR(1,IT)=CCHAR(1,IT)+ONE
      CCHAR(2,IT)=CCHAR(2,IT)+TRACEP(IT)
      CCHAR(3,IT)=CCHAR(3,IT)+TRACED(IT)
      CCHAR(4,IT)=CCHAR(4,IT)+TRACEF(IT)
      CCHAR(5,IT)=CCHAR(5,IT)+TRACEG(IT)
      CCHAR(6,IT)=CCHAR(6,IT)+TRACEh(IT)
      CCHAR(7,IT)=CCHAR(7,IT)+TRACEi(IT)
  340 CONTINUE
  350 CONTINUE
C
      IF(DBG) THEN
         DO 360 IT=1,NT
            write(iw,9997) it,(cchar(kt,it),kt=1,7)
  360    CONTINUE
      END IF
C
C     ----- DECOMPOSE REDUCIBLE REPRESENTATION -----
C           INTO IRREDUCIBLE REPRESENTATIONS.
C
C      -LOC1(ICLASS,ITYP)- = FIRST ADDRESS OF COEFFICIENTS FOR
C                            -ICLASS- AND -S,P,D,F,G- FUNCTIONS .
C      -LOC2(ICLASS,ITYP)- =  LAST ADDRESS OF COEFFICIENTS FOR
C                            -ICLASS- AND -S,P,D,F,G- FUNCTIONS .
C
C     ----- LOOP OVER ANGULAR MOMENTA -----
C
      do 800 kt=1,7
C
      IF(SKIP(KT)) GO TO 800
      NF=MF(KT)
      NP=MP(KT)
      LOC1(ICLASS,KT)=IC
C
C     ----- LOOP OVER IRREPS. -----
C
      IRP0=0
      DO 750 IRP=1,NIRRED
      LL=LAMBDA(IRP)
      MIRP(KT,IRP)=0
C
      DUM=ZERO
      DO 570 IT=1,NT
  570 DUM=DUM+CCHAR(KT,IT)*CHARR(IT,IRP)
      DUM=DUM/NT

      IF(DUM.LT.TOL) GO TO 750
      NIRP=NINT(DUM)
      IF(COMPLX.EQ.CMPLX.AND.LL.EQ.2) NIRP=NIRP/2
      MIRP(KT,IRP)=NIRP
      IF(DBG) WRITE(IW,9981) KT,IRP,LL,NIRP,NINT(DUM),DUM
C
C     ----- IRREDUCIBLE REPRESENTATION IRP OCCURS -NIRP- TIMES. -----
C     ----- FORM PROJECTION MATRICES -P-                        -----
C
      DO 580 J=1,NP*LL
      DO 580 I=1,NP*LL
  580 P(I,J)=ZERO
C
      DO 610 IT=1,NT
      IF(MAPCTR(IAT,IT).NE.IAT) GO TO 610
      DO 600 LL1=1,LL
      DO 600 LL2=1,LL
      GM=(LL*GAM(IT,LL2+LL*(LL1-1)+IRP0))/NT
      DO 590 J=1,NP
      DO 590 I=1,NP
      IF(KT.EQ.1) DUM=GM
      IF(KT.EQ.2) DUM=GM*PTR(I,J+NP*(IT-1))
      IF(KT.EQ.3) DUM=GM*DTR(I,J+NP*(IT-1))
      IF(KT.EQ.4) DUM=GM*FTR(I,J+NP*(IT-1))
      IF(KT.EQ.5) DUM=GM*GTR(I,J+NP*(IT-1))
      if(kt.eq.6) dum=gm*htr(i,j+np*(it-1))
      if(kt.eq.7) dum=gm*aitr(i,j+np*(it-1))
  590 P(I+NP*(LL1-1),J+NP*(LL2-1))=P(I+NP*(LL1-1),J+NP*(LL2-1))+DUM
  600 CONTINUE
  610 CONTINUE
C
C     ----- ORTHOGONALIZE COLUMNS OF -P- -----
C
      IF(COMPLX.EQ.CMPLX.AND.LL.EQ.2) THEN
         DO 620 J=1,NP
         DO 620 I=1,NP
            PR(I   ,J   )= P(I   ,J   )
            PI(I   ,J   )=-P(I+NP,J   )
            PR(I+NP,J   )= ZERO
            PI(I+NP,J   )= ZERO
            PR(I+NP,J+NP)= P(I+NP,J+NP)
            PI(I+NP,J+NP)=-P(I   ,J+NP)
            PR(I   ,J+NP)=ZERO
            PI(I   ,J+NP)=ZERO
  620       CONTINUE
         IF(DBG) CALL SYMPRP(PR,NP*LL,NP*LL,MXSALC)
         IF(DBG) CALL SYMPRP(PI,NP*LL,NP*LL,MXSALC)
                 CALL SYMSMC(PR,PI,PNORM,NP*LL,MXSALC)
         IF(DBG) CALL SYMPRP(PR,NP*LL,NP*LL,MXSALC)
         IF(DBG) CALL SYMPRP(PI,NP*LL,NP*LL,MXSALC)
         DO 630 J=1,NP
         DO 630 I=1,NP
            P(I   ,J   )= HALF * ( PR(I   ,J   ) + PR(I+NP,J+NP))
            P(I+NP,J   )= HALF * (-PI(I   ,J   ) + PI(I+NP,J+NP))
            P(I   ,J+NP)=ZERO
  630       P(I+NP,J+NP)=ZERO
      ELSE
         IF(DBG) CALL SYMPRP(P ,NP*LL,NP*LL,MXSALC)
                 CALL SYMSMD(P ,PNORM,NP*LL,MXSALC)
         IF(DBG) CALL SYMPRV(P ,PNORM,NP*LL,NP*LL,MXSALC)
      END IF
C
C     ----- EXTRACT -NIRP- SYMMETRY ADAPTED VECTOR COMPONENTS -----
C
      IPA0=0
      DO 690 J=1,NP*LL
      IF(PNORM(J).LT.TOL.OR.IPA0.GE.NIRP) GO TO 690
      IPA0    =IPA0    +1
      IPA(IRP)=IPA(IRP)+1
C
C     ----- LOOP OVER PARTNERS IN -IRREP- -----
C
      DO 680 L=1,LL
C
C     ----- PACK AND STORE COMPONENTS -----
C
      DO 670 I=1,NP
      IC=IC+1
      IF(IC.GT.MXCIPA) THEN
         IF(SOME) WRITE(IW,9986) MXCIPA
         CALL ABRT
         STOP
      END IF
C
C     -I1- SERIAL NUMBER OF FUNCTION WITHIN SHELL WHICH HAS THIS COEF.
C     -I2- SERIAL NUMBER OF -REP- WITHIN -IRREP- SET
C     -I3- -IRREP-
C     -I4- PARTNER IN -IRREP-
C     NOTE THAT -I2- CAN EXCEED 8 BITS WITH LARGE BASIS SETS
C
      I1=NF+I
      I2=IPA(IRP)
      I3=IRP
      I4=L
      LAB(IC,1)=I1
      LAB(IC,2)=I2
      LAB(IC,3)=I3
      LAB(IC,4)=I4
C
      DUM=P(I+NP*(L-1),J)
      IF( ABS(DUM).LT.TOL) DUM=ZERO
      CC(IC)=DUM
      IF(DBG) WRITE(IW,9992) IC,(LAB(IC,II),II=1,4),CC(IC)
  670 CONTINUE
  680 CONTINUE
C
  690 CONTINUE
C
C     ----- ACCOUNT FOR OTHER SHELLS WHICH HAVE -----
C           THE EXACT SAME CONTRIBUTIONS.
C
      NIPA= NIRP
      NIPB=-NIPA
      DO 740 ISH=1,NSHELL
      IF(KLASS(KATOM(ISH)).NE.KLASS(IAT)               ) GO TO 740
      IF(KTYPE(ISH).EQ.KT                              ) GO TO 700
      IF(KTYPE(ISH).EQ.2.AND.KMIN(ISH).EQ.1.AND.KT.EQ.1) GO TO 720
      GO TO 740
  700 NIPB=NIPB+NIPA
      IPB(ISH,IRP)=NIPB
      DO 710 IT=1,NT
      JSH=MAPSHL(ISH,IT)
  710 IPB(JSH,IRP)=NIPB
      GO TO 740
  720 NIPB=NIPB+NIPA
      ISB(ISH,IRP)=NIPB
      DO 730 IT=1,NT
      JSH=MAPSHL(ISH,IT)
  730 ISB(JSH,IRP)=NIPB
  740 CONTINUE
C
      IPA(IRP)=IPA(IRP)+NIPB
C
C     ----- END LOOP OVER IRREPS -----
C
  750 IRP0=IRP0+LL*LL
      LOC2(ICLASS,KT)=IC
C
C     ----- END OF LOOP OVER ANGULAR MOMENTUM TYPES -----
C
  800 CONTINUE
C
      do 810 kt=1,7
      KBB(KT)=LOC1(ICLASS,KT)
  810 KCC(KT)=LOC2(ICLASS,KT)
      JCLASS=ICLASS
C
C     ----- ROTATE COEFFICIENTS ONTO EQUIVALENT CENTERS -----
C
      DO 950 IT=1,NT
C
C     ----- FIND EQUIVALENT CENTER -----
C
      JAT=MAPCTR(IAT,IT)
      IF(DBG) WRITE(IW,9995) JAT
      IF(KLASS(JAT).NE.0) GO TO 950
      ICLASS=ICLASS+1
      KLASS(JAT)=ICLASS
C
C     ----- FIND OTHER CENTERS IN SAME CLASS -----
C
      DO 820 I=1,NAT
      IF(KLASS(I).NE.JCLASS) GO TO 820
      J=MAPCTR(I,IT)
      KLASS(J)=ICLASS
  820 CONTINUE
C
      do 900 kt=1,7
      IF(SKIP(KT)) GO TO 900
      NP=MP(KT)
      LOC1(ICLASS,KT)=IC
      KB=KBB(KT)
      KC=KCC(KT)
      IF(DBG) WRITE(IW,9994) KT,KB,KC,IC,NP
C
      IRP0=0
      DO 890 IRP=1,NIRRED
      LL=LAMBDA(IRP)
      NIRP=MIRP(KT,IRP)
      IF(NIRP.EQ.0) GO TO 890
      DO 880 J=1,NIRP
C
      DO 870 L=1,LL
      DO 860 I=1,NP
C
      IC=IC+1
      IF(IC.GT.MXCIPA) THEN
         WRITE(IW,9986) MXCIPA
         CALL ABRT
         STOP
      END IF
C
      DUM=ZERO
      D=ZERO
      DO 850 M=1,LL
      DO 850 K=1,NP
      IF(KT.EQ.1) D=ONE
      IF(KT.EQ.2) D=PTR(I,K+NP*(IT-1))
      IF(KT.EQ.3) D=DTR(I,K+NP*(IT-1))
      IF(KT.EQ.4) D=FTR(I,K+NP*(IT-1))
      IF(KT.EQ.5) D=GTR(I,K+NP*(IT-1))
      if(kt.eq.6) d=htr(i,k+np*(it-1))
      if(kt.eq.7) d=aitr(i,k+np*(it-1))
      DUM=DUM+D*CC(K+NP*(M-1)+KB)*GAM(IT,M+LL*(L-1)+IRP0)
  850 CONTINUE
      IF( ABS(DUM).LT.TOL) DUM=ZERO
C
      CC(IC)=DUM
      LAB(IC,1)=LAB(I+NP*(L-1)+KB,1)
      LAB(IC,2)=LAB(I+NP*(L-1)+KB,2)
      LAB(IC,3)=LAB(I+NP*(L-1)+KB,3)
      LAB(IC,4)=LAB(I+NP*(L-1)+KB,4)
      IF(DBG) WRITE(IW,9992) IC,(LAB(IC,II),II=1,4),CC(IC)
  860 CONTINUE
  870 CONTINUE
C
      KB=KB+NP*LL
  880 CONTINUE
C
  890 IRP0=IRP0+LL*LL
C
      LOC2(ICLASS,KT)=IC
C
C     ----- END LOOP OVER ANGULAR MOMENTA -----
C
  900 CONTINUE
C
C     ----- END LOOP OVER EQUIVALENT CENTERS -----
C
  950 CONTINUE
C
C     ----- END OF LOOP OVER UNIQUE CENTERS -----
C
 1000 CONTINUE
      NCC=IC
C
      IF(DBG) THEN
         WRITE(IW,9993)
         DO 1010 I=1,NCC
            WRITE(IW,9992) I,(LAB(I,II),II=1,4),CC(I)
 1010    CONTINUE
         DO 1020 I=1,NSHELL
            WRITE(IW,9991) (ISB(I,J) ,J=1,NIRRED)
            WRITE(IW,9990) (IPB(I,J) ,J=1,NIRRED)
 1020    CONTINUE
      END IF
C
      DO 1040 I=1,NSHELL
      DO 1040 J=1,NIRRED
      ISB(I,J)=ISB(I,J)+1
 1040 IPB(I,J)=IPB(I,J)+1
C
      IF(DBG) THEN
         WRITE(IW,9983) (KLASS(IAT),
     1                  (loc1(klass(iat),kt),kt=1,7),
     2                  (loc2(klass(iat),kt),kt=1,7),iat=1,nat)
      END IF
C
C     ----- GENERATE INITIAL ADDRESS OF SYMMETRY BLOCKS -----
C          ( THIS MAY GET MODIFIED IN -SALCAO- )
C
      J=0
      K=0
      L=0
      DO 1050 I=1,NIRRED
      LL=LAMBDA(I)
      N =IPA(I)*LL
      IADDR1(I)=J
      IADDR2(I)=K
      IADDR3(I)=L
      J=J+N
      K=K+N*(N+1)/2
      L=L+N*N
 1050 CONTINUE
      NSALC =J
      NSALC2=K
      NSALC3=L
      NSAFMO=NSALC
      IF(DBG) THEN
         WRITE(IW,9989) (IPA(J)   ,J=1,NIRRED)
         WRITE(IW,9988) (IADDR1(J),J=1,NIRRED)
         WRITE(IW,9987) (IADDR2(J),J=1,NIRRED)
         WRITE(IW,9982) (IADDR3(J),J=1,NIRRED)
      END IF
C
C     ----- PRINT -SALC- BASIS FUNCTIONS -----
C
      CALL SALCPR(CA,ISB,IPB,CC,LAB,LOC1,LOC2,IWRK1,KLASS,
     *            NATM,NSH,NCC,MXCIPA,DBG,SOME)
C
C     ----- SET UP -SALC- MATRIX -----
C
      CALL SALCAO(CA,SAO,TWRK,UWRK,ISB,IPB,CC,LAB,LOC1,LOC2,IWRK1,IWRK2,
     *            KLASS,IRPBAS,NATM,L1,L3,NSH,NCC,MXCIPA,DBG)
C
C     ----- CREATE -SALC- CHARGE DISTRIBUTIONS -----
C     INTEGRAL BLOCKING IS A DEFUNCT OPTION IN GAMESS
C
      BLKTYP=BLANK
      IF(BLKTYP.EQ.BLOCKI) CALL DIJGEN(KLASS,IDLAB,
     *                                 CC,LAB,SHELL,LOC1,LOC2,
     *                                 IWRK1,IWRK2,DIJPQ,LDIJPQ,
     *                                 NCC,MXCIPA,NAT,SOME)
C
C     ----- READ -PTR, DTR, FTR, GTR- MATRICES -----
C
      IF(ISPHER.GE.0) THEN
         CALL DAREAD(IDAF,IODA,PTR,  432, 7,0)
         CALL DAREAD(IDAF,IODA,DTR, 1728, 8,0)
         CALL DAREAD(IDAF,IODA,FTR, 4800, 9,0)
         CALL DAREAD(IDAF,IODA,GTR,10800,10,0)
C
         call daread(idaf,ioda, htr,21168,911,0)
         call daread(idaf,ioda,aitr,37632,912,0)
      END IF
C
      RETURN
 9019 FORMAT(/,16H TRACE OF -PTR- ,/,(12F10.5))
 9018 FORMAT(/,16H TRACE OF -DTR- ,/,(12F10.5))
 9017 FORMAT(/,16H TRACE OF -FTR- ,/,(12F10.5))
 9016 FORMAT(/,16H TRACE OF -GTR- ,/,(12F10.5))
 9997 FORMAT(' CHAR. OF REDUCIBLE REP. FOR -IT- AND -S,P,D,F,G,H,I- = ',
     1 I5,7F10.5)
 9995 FORMAT(21H EQUIVALENT CENTER = ,I5)
 9994 FORMAT(18H KT,KB,KC,IC,NP = ,5I5)
 9993 FORMAT(/,24H LABELS AND COEFFICIENTS,/,
     1 38H          NF IPA(IRP) IRP  L         C)
 9992 FORMAT(1X,I5,2X,4Z4,E20.12)
 9991 FORMAT(21H ISB(ISHELL,IRREP) = ,/,(14I5))
 9990 FORMAT(21H IPB(ISHELL,IRREP) = ,/,(14I5))
 9989 FORMAT(21H        IPA(IRREP) = ,/,(14I5))
 9988 FORMAT(21H     IADDR1(IRREP) = ,/,(14I5))
 9987 FORMAT(21H     IADDR2(IRREP) = ,/,(14I5))
 9986 FORMAT(23H TOO MANY CIPAS. MAX = ,I5)
 9985 FORMAT(//,14H ----- ATOM = ,I2)
 9983 FORMAT(35H KLASS(IAT) LOC1(KLASS(IAT),KT) AND,
     1                  20H LOC2(KLASS(IAT),KT),
     2  I7,5X,7I5,10X,7I5)
 9982 FORMAT(21H     IADDR3(IRREP) = ,/,(14I5))
 9981 FORMAT(' .... ANG.MOM., IRREP., DEG., NIRP = ',4I5,I5,F10.5)
 9980 FORMAT(/1X,'-- VARIATIONAL SPACE WILL BE RESTRICTED TO PURE',
     *           ' SPHERICAL HARMONICS ONLY --')
      END
C*MODULE SYMSLC  *DECK DIJGEN
C
C> @brief : Routine is for symmetry integral blocking
C>          However, this is a defunct option in GAMESS
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Upgrade to include for h,i functions in basis
C
      SUBROUTINE DIJGEN(KLASS,IDLAB,CC,LAB,SHELL,
     *                  LOC1,LOC2,ISG,JSG,DIJPQ,LDIJPQ,
     *                  NCC,MXCIPA,NAT,SOME)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL SHELL,SOME,ABEL
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000)
C
      DIMENSION KLASS(NAT),IDLAB(*),
     *          cc(ncc),lab(mxcipa,4),shell(nat,8),
     *          loc1(nat,7),loc2(nat,7),isg(nat),jsg(nat),
     *          DIJPQ(1000),LDIJPQ(1000)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SYMMOL/ GROUP,COMPLX,IGROUP,NAXIS,ILABMO,ABEL
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                TDMY(432),INVT(48),NT
C
      DATA CMPLX  /8HCOMPLEX /
C
      IF(COMPLX.EQ.CMPLX) THEN
         IF(SOME) WRITE(IW,9999)
         CALL ABRT
         STOP
      END IF
C
      do 5 j=1,7
c
      DO 5 I=1,NAT
    5 SHELL(I,J)=.TRUE.
      DO 6 II=1,NSHELL
      LIT=KTYPE(II)
      ICEN=KATOM(II)
c
      if(lit.eq.2.and.kmin(ii).eq.1) lit=8
c
      SHELL(KLASS(ICEN),LIT)=.FALSE.
    6 CONTINUE
C
C     ----- LOOP OVER -IATOM- FROM -P1- LIST -----
C
      DO 300 IATOM=1,NAT
      DO 10 IT=1,NT
      IF(MAPCTR(IATOM,IT).GT.IATOM) GO TO 300
   10 CONTINUE
      DO 20 I=1,NAT
   20 ISG(I)=0
      DO 30 IT=1,NT
      ICEN=MAPCTR(IATOM,IT)
   30 ISG(ICEN)=KLASS(ICEN)
C
C     ----- LOOP OVER -JATOM- FROM -P1- LIST -----
C
      DO 200 JATOM=1,NAT
      DO 110 IT=1,NT
      IF(MAPCTR(JATOM,IT).GT.JATOM) GO TO 200
  110 CONTINUE
      DO 120 I=1,NAT
  120 JSG(I)=0
      DO 130 IT=1,NT
      JCEN=MAPCTR(JATOM,IT)
  130 JSG(JCEN)=KLASS(JCEN)
C
C     ----- LOOP OVER TYPES OF SHELLS ON -IATOM- -----
C
c
      do 180 kt1=1,8
c
      IF(SHELL(IATOM,KT1)) GO TO 180
C
C     ----- LOOP OVER TYPES OF SHELLS ON -JATOM- -----
C
c
      do 170 kt2=1,8
c
      IF(SHELL(JATOM,KT2)) GO TO 170
      NUMPQA=0
C
C     ----- LOOP OVER ATOMS EQUIVALENT TO -IATOM- -----
C
      DO 160 I=1,NAT
      II=ISG(I)
      IF(II.EQ.0) GO TO 160
C
C     ----- LOOP OVER ATOMS EQUIVALENT TO -JATOM- -----
C
      DO 150 J=1,NAT
      JJ=JSG(J)
      IF(JJ.EQ.0) GO TO 150
      IF(JJ.GT.II) GO TO 150
      IF(JJ.EQ.II.AND.KT2.GT.KT1) GO TO 150
      CALL DIJPQA(CC,LAB,LOC1,LOC2,DIJPQ,LDIJPQ,IDLAB,
     *            NCC,MXCIPA,NAT,II,KT1,JJ,KT2,NUMPQA,SOME)
  150 CONTINUE
  160 CONTINUE
  170 CONTINUE
  180 CONTINUE
  200 CONTINUE
  300 CONTINUE
      RETURN
 9999 FORMAT(' -DIJGEN- CAN NOT HANDLE SYMMETRY GROUPS WITH',
     1       ' COMPLEX REPRESENTATIONS. STOP               ')
      END
C*MODULE SYMSLC  *DECK DIJPQA
C
C> @brief : Routine is used as part of symmetry integral blocking
C>          However, this is a defunct option in GAMESS
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Upgrade to include for h,i functions in basis
C
      SUBROUTINE DIJPQA(CC,LAB,LOC1,LOC2,DIJPQ,LDIJPQ,IDLAB,
     *                  NCC,MXCIPA,NAT,ISG,LIT1,JSG,LJT1,
     *                  NUMPQA,SOME)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL SPI,SPJ,SOME
C
      dimension cc(ncc),lab(mxcipa,4), idlab(4,784,2),
     *          loc1(nat,7),loc2(nat,7),dijpq(1000),ldijpq(1000)
      dimension kmin(8),kmax(8),nf(8),locd(784),locmin(784),locmax(784)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /SYMREP/ IRPNAM(14),IPA(14),LAMBDA(14),LAMBD0(14),
     *                IADDR1(14),IADDR2(14),IADDR3(14)
C
      data kmin /1,2, 5,11,21,36,57,1/
      data kmax /1,4,10,20,35,56,84,4/
      data nf   /1,3, 6,10,15,21,28,4/
      DATA TOL  /1.0D-10/
      data maxpqa,ndmax /784,1000/
C
C           IDLAB IS USED BEFORE IT IS INITIALIZED
C           HONDO-8 HAS IDLAB IN STATIC COMMON /IJPQA/,
C           WHERE IT IS NOT INITIALIZED BY SYM.F
C
      CIPA2=0.0D+00
      CIPA3=0.0D+00
C
      LIT=LIT1
      LJT=LJT1
c
      i1s=8*(isg-1)+lit
      i2s=8*(jsg-1)+ljt
c
      IF(I1S.GE.I2S) GO TO 20
      I3=I1S
      I1S=I2S
      I2S=I3
   20 CONTINUE
      MINI=KMIN(LIT)
      MINJ=KMIN(LJT)
      MAXI=KMAX(LIT)
      MAXJ=KMAX(LJT)
      MINPI=MINI
      MINPJ=MINJ
c
      if(lit.eq.8) lit=2
      if(ljt.eq.8) ljt=2
c
      NF1=NF(LIT)
      NF2=NF(LJT)
C
C     ----- LOOP OVER -I- FUNCTIONS -----
C
      KOUNT=0
      IJ=0
      DO 1000 I=MINI,MAXI
      SPI=I.EQ.1.AND.LIT.EQ.2
      LT=LIT
      IF(SPI) LT=1
      LOCIA=LOC1(ISG,LT)
      LOCIB=LOC2(ISG,LT)
      NFI=NF1
      IF(SPI) NFI=1
      ID=MINI
      IF(LIT.EQ.2.AND.MINPI.EQ.1.AND.I.GT.1) ID=2
C
C     ----- LOOP OVER -J- FUNCTIONS -----
C
      DO 900 J=MINJ,MAXJ
      SPJ=J.EQ.1.AND.LJT.EQ.2
      LT=LJT
      IF(SPJ) LT=1
      LOCJA=LOC1(JSG,LT)
      LOCJB=LOC2(JSG,LT)
      NFJ=NF2
      IF(SPJ) NFJ=1
      JD=MINJ
      IF(LJT.EQ.2.AND.MINPJ.EQ.1.AND.J.GT.1) JD=2
      IJ=IJ+1
      LOCMIN(IJ)=KOUNT+1
      I1=LOCIA+I-ID+1
  100 IF(I1.GT.LOCIB) GO TO 800
C
C     -I4-     PARTNER IN -IRREP-
C     -I3-     -IRREP-
C     -I2-     SERIAL NUMBER AMONG -IRREP- SET
C     -I1-     COEFFICIENT LOCATION
C
      ILAB=I1
      I1=LAB(ILAB,1)
      I2=LAB(ILAB,2)
      I3=LAB(ILAB,3)
      I4=LAB(ILAB,4)
C
      IP=I2
      IA=I3
      IALPHA=I4
      LL=LAMBDA(IA)
      CIPA1=CC(I1)
      IF(LL.EQ.1) GO TO 120
      I1=I1+NFI
      CIPA2=CC(I1)
      IF(LL.EQ.2) GO TO 120
      I1=I1+NFI
      CIPA3=CC(I1)
  120 CONTINUE
      J1=LOCJA+J-JD+1
  300 IF(J1.GT.LOCJB) GO TO 750
C
      I1=LAB(J1,1)
      I2=LAB(J1,2)
      I3=LAB(J1,3)
      I4=LAB(J1,4)
C
      JA=I3
      IF(JA.NE.IA) GO TO 700
      IF(I4.NE.IALPHA) GO TO 650
      IQ=I2
      DUM=CIPA1*CC(J1)
      IF(LL.EQ.1) GO TO 340
      J1=J1+NFJ
      DUM=DUM+CIPA2*CC(J1)
      IF(LL.EQ.2) GO TO 320
      J1=J1+NFJ
      DUM=DUM+CIPA3*CC(J1)
  320 DUM=DUM/LL
  340 CONTINUE
      IF( ABS(DUM).LT.TOL) GO TO 650
      KOUNT=KOUNT+1
C
      IF(KOUNT.GT.NDMAX) THEN
         IF(SOME) WRITE(IW,9004) NDMAX
         CALL ABRT
         STOP
      END IF
C
      IF(NUMPQA.EQ.0) GO TO 380
      DO 360 M=1,NUMPQA
         N3=IDLAB(1,M,1)
         N4=IDLAB(1,M,2)
         N5=IDLAB(2,M,2)
         IF(N3.EQ.IP.AND.N4.EQ.IQ.AND.N5.EQ.IA) GO TO 400
  360 CONTINUE
  380 NUMPQA=NUMPQA+1
C
      IF(NUMPQA.GT.MAXPQA) THEN
         IF(SOME) WRITE(IW,9006)
         CALL ABRT
         STOP
      END IF
C
      IDUM=0
      IB=0
      IC=0
C
C     ----- THESE LABELS NEEDED FOR -CI- INTEGRALS -----
C     -IB- AND -IC-
C
      IDLAB(1,NUMPQA,1)=IDUM
      IDLAB(2,NUMPQA,1)=IC
      IDLAB(3,NUMPQA,1)=IB
      IDLAB(4,NUMPQA,1)=IA
C
      IDLAB(1,NUMPQA,2)=IQ
      IDLAB(2,NUMPQA,2)=IP
      IDLAB(3,NUMPQA,2)=J
      IDLAB(4,NUMPQA,2)=I
C
      LOCD(NUMPQA)=NUMPQA
      M=NUMPQA
  400 LDIJPQ(KOUNT)=M
      DIJPQ(KOUNT)=DUM
      IF(SOME) WRITE(IW,9001) ISG,LIT,JSG,LJT,I,J,IP,IQ,IA,DUM,M
  650 J1=J1+NFJ
      GO TO 300
  700 J1=J1+NFJ*LAMBDA(JA)
      GO TO 300
  750 I1=I1+NFI
      GO TO 100
  800 CONTINUE
      LOCMAX(IJ)=KOUNT
  900 CONTINUE
 1000 CONTINUE
      IF(SOME) THEN
         WRITE(IW,9002) (LOCD(I),I=1,NUMPQA)
         WRITE(IW,9002) (LOCMIN(I),I=1,IJ)
         WRITE(IW,9002) (LOCMAX(I),I=1,IJ)
         WRITE(IW,9003) ((IDLAB(J,I,1),J=1,4),I=1,NUMPQA)
         WRITE(IW,9003) ((IDLAB(J,I,2),J=1,4),I=1,NUMPQA)
      END IF
C
      IF(SOME) WRITE(IW,9000) I1S,I2S,KOUNT
      RETURN
C
 9000 FORMAT(4H I1=,I5,6H   I2=,I5,9H   KOUNT=,I5/1X,90(1H.)/)
 9001 FORMAT(1X,9I4,E25.14,I10)
 9002 FORMAT(36I3)
 9003 FORMAT(6(1X,4Z4))
 9004 FORMAT(47H TOO MANY CHARGE DENSITY COEFFICIENTS. NDMAX = ,I10)
 9006 FORMAT(' -NUMPQA- IS TOO LARGE. STOP')
      END
C*MODULE SYMSLC  *DECK SALCAO
C
C> @brief : Routine sets up matrix of SALC orbitals
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Upgrade to include for h,i functions in basis
C
      SUBROUTINE SALCAO(CA,SAO,TWRK,UWRK,ISB,IPB,CC,LAB,LOC1,LOC2,
     *                  MAPC,MAPS,KLASS,IRPBAS,NATM,L1,L3,NSH,NCC,
     *                  MXCIPA,DBG)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL DBG,ABEL
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000)
C
      DIMENSION CA(NATM,108),SAO(L3),TWRK(L3),UWRK(L1),
     *          ISB(NSH,14),IPB(NSH,14),
     *          cc(mxcipa),lab(mxcipa,4),loc1(natm,7),loc2(natm,7),
     *          MAPC(NATM),MAPS(NATM),KLASS(NATM),IRPBAS(L1,3)
      dimension mp(7)
C
      COMMON /BASSPH/ QMTTOL,ISPHER
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SYMBLK/ NIRRED,NSALC,NSALC2,NSALC3,NSAFMO
      COMMON /SYMMOL/ GROUP,COMPLX,IGROUP,NAXIS,ILABMO,ABEL
      COMMON /SYMREP/ IRPNAM(14),IPP(14),LAMBDA(14),LAMBD0(14),
     *                IADDR1(14),IADDR2(14),IADDR3(14)
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
C
      DATA CMPLX /8HCOMPLEX /
      DATA ZERO  /0.0D+00/
      data mp    /1,3,6,10,15,21,28/
C
C     ----- ROUTINE SETS UP MATRIX OF -SALC- ORBITALS -----
C
      IF(DBG) WRITE(IW,9999)
      DO 10 I=1,NUM*NUM
   10 SAO(I)=ZERO
      IPA0=0
C
C     ----- LOOP OVER -P1- CENTERS -----
C
      DO 210 IAT=1,NAT
      DO 20 IT=1,NT
      IF(MAPCTR(IAT,IT).GT.IAT) GO TO 210
   20 CONTINUE
C
      DO 30 JAT=1,NAT
   30 MAPC(JAT)=0
      DO 40 IT=1,NT
      JAT=MAPCTR(IAT,IT)
   40 MAPC(JAT)=1
      ICLASS=KLASS(IAT)
C
C     ----- LOOP OVER SHELL TYPES ON -P1- CENTER -----
C
      do 200 kt=1,7
      NP=MP(KT)
C
      ISH=0
   50 ISH=ISH+1
      IF(ISH.GT.NSHELL) GO TO 200
      IF(KATOM(ISH).NE.IAT) GO TO 50
      IF(KTYPE(ISH).EQ.KT ) GO TO 60
      IF(KT.EQ.1.AND.KTYPE(ISH).EQ.2.AND.KMIN(ISH).EQ.1) GO TO 60
      GO TO 50
C
   60 CONTINUE
      DO 70 IT=1,NT
      JSH=MAPSHL(ISH,IT)
      JAT=KATOM(JSH)
   70 MAPS(JAT)=JSH
C
      KA=LOC1(ICLASS,KT)
      KAA=KA
      KB=LOC2(ICLASS,KT)
  100 CONTINUE
C
      I1=LAB(KA+1,1)
      I2=LAB(KA+1,2)
      I3=LAB(KA+1,3)
      I4=LAB(KA+1,4)
C
      IRP=I3
      IF(            KTYPE(ISH).EQ.KT                   )
     1 IPA0=IPB(ISH,IRP)
      IF(KT.EQ.1.AND.KTYPE(ISH).EQ. 2.AND.KMIN(ISH).EQ.1)
     1 IPA0=ISB(ISH,IRP)
      IPA=I2+IPA0-1
      LL=LAMBDA(IRP)
C
C     ----- GET -SALC- FOR SHELL ON -P1- CENTER -----
C
      MAX=NP*LL
      DO 110 I=1,MAX
  110 CA(IAT,I)=CC(KA+I)
      LOCI=KLOC(ISH)
      IF(KT.EQ.2.AND.KTYPE(ISH).EQ.2.AND.KMIN(ISH).EQ.1) LOCI=LOCI+1
      IC=0
      DO 115 L=1,LL
      DO 115 I=1,NP
      IC=IC+1
      IROW=(LOCI+I-1)
      LCOL=(IADDR1(IRP)+IPP(IRP)*(L-1)+IPA-1)
      IL=IROW+NUM*LCOL
      DUM=CC(KA+IC)
      IF(DBG) WRITE(IW,9991) IROW,LCOL,DUM
  115 SAO(IL)=DUM
C
C     ----- NOW GET -SALC- FOR EQUIVALENT SHELLS AND CENTERS -----
C
      DO 130 JAT=1,NAT
      IF(MAPC(JAT).EQ.0) GO TO 130
      IF(JAT.EQ.IAT) GO TO 130
      JCLASS=KLASS(JAT)
      KC=LOC1(JCLASS,KT)+KA-KAA
      MAX=NP*LL
      DO 120 I=1,MAX
  120 CA(JAT,I)=CC(KC+I)
      JSH=MAPS(JAT)
      LOCJ=KLOC(JSH)
      IF(KT.EQ.2.AND.KTYPE(JSH).EQ.2.AND.KMIN(JSH).EQ.1) LOCJ=LOCJ+1
      JC=0
      DO 125 L=1,LL
      DO 125 J=1,NP
      JC=JC+1
      JROW=(LOCJ+J-1)
      LCOL=(IADDR1(IRP)+IPP(IRP)*(L-1)+IPA-1)
      JL=JROW+NUM*LCOL
      DUM=CC(KC+JC)
      IF(DBG) WRITE(IW,9991) JROW,LCOL,DUM
  125 SAO(JL)=DUM
  130 CONTINUE
C
C     ----- CREATE SYMMETRY LABEL OF THE -SALC- BASIS FUNCTIONS -----
C
      DO 135 L=1,LL
         IRDEX=IADDR1(IRP)+IPP(IRP)*(L-1)+IPA
         IRPBAS(IRDEX,1)=IRP
         IRPBAS(IRDEX,2)=LL
         IRPBAS(IRDEX,3)=L
  135 CONTINUE
C
C     ----- NOW PRINT -SALC- COMBINATIONS -----
C
      IF(DBG) THEN
         IF(ISPHER.GE.0) THEN
            CALL SLCSPH(IPA,IRPNAM(IRP),MAPC,NP,LL,KT,CA,NATM)
            CALL SPHXYZ(IPA,IRPNAM(IRP),MAPC,NP,LL,KT,CA,NATM)
         ELSE
            CALL SLCXYZ(IPA,IRPNAM(IRP),MAPC,NP,LL,KT,CA,NATM)
         END IF
      END IF
C
      KA=KA+MAX
      IF(KA.LT.KB) GO TO 100
C
      GO TO 50
C
C     ----- END LOOP OVER SHELL TYPES ON -P1- CENTER -----
C     ----- END LOOP OVER -P1- CENTERS -----
C
  200 CONTINUE
  210 CONTINUE
C
      IF(DBG) THEN
         WRITE(IW,9996) (IRPNAM(I),IPP(I),I=1,NIRRED)
         DO 220 I=1,NSALC
            IRP = IRPBAS(I,1)
            LL  = IRPBAS(I,2)
            L   = IRPBAS(I,3)
            WRITE(IW,9995) I,IRP,IRPNAM(IRP),LL,L
  220    CONTINUE
      END IF
C
C     ----- AT THIS POINT THE -SALC- COEFFICIENTS MAY BE -----
C            EXPRESSED IN THE SPHERICAL HARMONICS BASIS.
C            BACKTRANSFORM TO CARTESIAN GAUSSIAN BASIS.
C
      IF(ISPHER.GE.0) CALL SPHBCK(SAO(1),TWRK,UWRK,NUM,DBG)
C     IF(NFG.NE.0) CALL FMOSALC(SAO,NSALC)
C
      IF(DBG) THEN
         WRITE(IW,*) 'SALC MATRIX IS'
         CALL SYMPRP(SAO,NUM,NUM,NUM)
      END IF
C
C     ----- SAVE -SALC- MATRIX ON DAF -----
C
      NDUM=NUM*NUM
      CALL DAWRIT(IDAF,IODA,SAO,NDUM,44,0)
C
C     ----- SAVE TRUE -IRREP- DEGENERACY -----
C           -LAMBDA- MAY BE CHANGED ( SEE BELOW )
C
      DO 225 IRP=1,NIRRED
  225 LAMBD0(IRP)=LAMBDA(IRP)
C
C     ----- SPECIAL CODE FOR COMPLEX REPRESENTATIONS:     -----
C           COMPLEX -E- (2D) OF DIMENSION - N- IS TREATED
C           AS REAL -E- (1D) OF DIMENSION -2N- .
C
      IF(COMPLX.NE.CMPLX) GO TO 300
C
      IF(DBG) WRITE(IW,9994)
      IF(DBG) WRITE(IW,9993)
      DO 230 IC=1,NCC
C
      I1=LAB(IC,1)
      I2=LAB(IC,2)
      I3=LAB(IC,3)
      I4=LAB(IC,4)
C
      IRP=I3
      IF(LAMBDA(IRP).NE.2.OR.I4.NE.2) GO TO 230
      I2=I2+IPP(IRP)
      I4=1
C
      LAB(IC,1)=I1
      LAB(IC,2)=I2
      LAB(IC,3)=I3
      LAB(IC,4)=I4
  230 IF(DBG) WRITE(IW,9992) IC,(LAB(IC,J),J=1,4),CC(IC)
C
      DO 240 IRP=1,NIRRED
         IF(LAMBDA(IRP).NE.2) GO TO 240
         LAMBDA(IRP)=1
         IPP(IRP)=IPP(IRP)*2
  240 CONTINUE
C
      IF(DBG) WRITE(IW,9990)
      IF(DBG) WRITE(IW,9996) (IRPNAM(I),IPP(I),I=1,NIRRED)
C
C     ----- DETERMINE INITIAL ADDRESS OF SYMMETRY BLOCKS -----
C
  300 CONTINUE
      J=0
      K=0
      L=0
      DO 400 I=1,NIRRED
         LL=LAMBDA(I)
         N =IPP(I)*LL
         IADDR1(I)=J
         IADDR2(I)=K
         IADDR3(I)=L
         J=J+N
         K=K+N*(N+1)/2
         L=L+N*N
  400 CONTINUE
C
      NSALC =J
      NSALC2=K
      NSALC3=L
      IF(DBG) THEN
         WRITE(IW,9989) (IPP(J)   ,J=1,NIRRED)
         WRITE(IW,9988) (IADDR1(J),J=1,NIRRED)
         WRITE(IW,9987) (IADDR2(J),J=1,NIRRED)
         WRITE(IW,9986) (IADDR3(J),J=1,NIRRED)
      END IF
      RETURN
C
 9999 FORMAT(/,' -- -SALC- MATRIX -- ',/)
 9996 FORMAT(/,35H DIMENSION OF SYMMETRY SUBSPACES = ,
     1       /,8(1X,A4,I4),/,6(1X,A4,I4))
 9995 FORMAT(' BF = ',I5,' LABEL = ',Z16,
     1       ' IRREP, DEG, PARTNER = ',1X,A4,I3,I3)
 9994 FORMAT(' ADJUSTMENT FOR COMPLEX REPRESENTATIONS ')
 9993 FORMAT(/1X,' PACKED LABELS AND COEFFICIENTS'/
     *        1X,'    NF       IPA(IRP) IRP L         C')
 9992 FORMAT(1X,I5,2X,4Z4,F20.10)
 9991 FORMAT(' SALC ELEMENT , I,J,C = ',2I6,F15.8)
 9990 FORMAT(' FOR GROUPS WITH COMPLEX REPRESENTATIONS',
     1       ' THE -E- REPRESENTATIONS ARE NOW TREATED',/,
     2       ' AS -1D- REPRESENTATIONS WITH DOUBLED DIMENSION')
 9989 FORMAT(21H        IPA(IRREP) = ,/,(14I5))
 9988 FORMAT(21H     IADDR1(IRREP) = ,/,(14I5))
 9987 FORMAT(21H     IADDR2(IRREP) = ,/,(14I5))
 9986 FORMAT(21H     IADDR3(IRREP) = ,/,(14I5))
      END
C*MODULE SYMSLC  *DECK SALCPR
C
C> @brief : Routine prints symmetry adapted linear combinations
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Upgrade to include for h,i functions in basis
C
      SUBROUTINE SALCPR(CA,ISB,IPB,CC,LAB,LOC1,LOC2,MAPC,KLASS,
     *                  NATM,NSH,NCC,MXCIPA,DBG,SOME)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL DBG,SOME
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000)
C
      DIMENSION CA(NATM,108),ISB(NSH,14),IPB(NSH,14),CC(NCC),
     *          lab(mxcipa,4),loc1(natm,7),loc2(natm,7),mapc(natm),
     *          KLASS(NATM)
      dimension mp(7)
C
      COMMON /BASSPH/ QMTTOL,ISPHER
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SYMBLK/ NIRRED,NSALC,NSALC2,NSALC3,NSAFMO
      COMMON /SYMREP/ IRPNAM(14),IPP(14),LAMBDA(14),LAMBD0(14),
     *                IADDR1(14),IADDR2(14),IADDR3(14)
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
C
      data mp  /1,3,6,10,15,21,28/
C
C     ----- ROUTINE PRINTS SYMMETRY ADAPTED LINEAR COMBINATIONS -----
C
      IF(DBG) WRITE(IW,9999)
      IPA0=0
C
C     ----- LOOP OVER -P1- CENTERS -----
C
      DO 210 IAT=1,NAT
      DO 10 IT=1,NT
      IF(MAPCTR(IAT,IT).GT.IAT) GO TO 210
   10 CONTINUE
C
      DO 20 JAT=1,NAT
   20 MAPC(JAT)=0
      DO 30 IT=1,NT
      JAT=MAPCTR(IAT,IT)
   30 MAPC(JAT)=1
      ICLASS=KLASS(IAT)
C
C     ----- LOOP OVER SHELL TYPES ON -P1- CENTER -----
C
      do 200 kt=1,7
      NP=MP(KT)
C
      ISH=0
   40 ISH=ISH+1
      IF(ISH.GT.NSHELL) GO TO 200
      IF(KATOM(ISH).NE.IAT) GO TO 40
      IF(KTYPE(ISH).EQ.KT ) GO TO 50
      IF(KT.EQ.1.AND.KTYPE(ISH).EQ.2.AND.KMIN(ISH).EQ.1) GO TO 50
      GO TO 40
C
   50 CONTINUE
C
      KA=LOC1(ICLASS,KT)
      KAA=KA
      KB=LOC2(ICLASS,KT)
  100 CONTINUE
C
      I2=LAB(KA+1,2)
      I3=LAB(KA+1,3)
C
      IRP=I3
      IF(            KTYPE(ISH).EQ.KT                  )
     1 IPA0=IPB(ISH,IRP)
      IF(KT.EQ.1.AND.KTYPE(ISH).EQ.2.AND.KMIN(ISH).EQ.1)
     1 IPA0=ISB(ISH,IRP)
      IPA=I2+IPA0-1
      LL=LAMBDA(IRP)
C
C     ----- GET -SALC- FOR SHELL ON -P1- CENTER -----
C
      MAX=NP*LL
      DO 110 I=1,MAX
  110 CA(IAT,I)=CC(KA+I)
C
C     ----- NOW GET -SALC- FOR EQUIVALENT SHELLS AND CENTERS -----
C
      DO 130 JAT=1,NAT
      IF(MAPC(JAT).EQ.0) GO TO 130
      IF(JAT.EQ.IAT) GO TO 130
      JCLASS=KLASS(JAT)
      KC=LOC1(JCLASS,KT)+KA-KAA
      MAX=NP*LL
      DO 120 I=1,MAX
  120 CA(JAT,I)=CC(KC+I)
  130 CONTINUE
C
C     ----- NOW PRINT -SALC- COMBINATION -----
C
      IF(DBG) THEN
         IF(ISPHER.GE.0) THEN
            CALL SLCSPH(IPA,IRPNAM(IRP),MAPC,NP,LL,KT,CA,NATM)
            CALL SPHXYZ(IPA,IRPNAM(IRP),MAPC,NP,LL,KT,CA,NATM)
         ELSE
            CALL SLCXYZ(IPA,IRPNAM(IRP),MAPC,NP,LL,KT,CA,NATM)
         END IF
      END IF
C
      KA=KA+MAX
      IF(KA.LT.KB) GO TO 100
C
C     ----- END LOOP OVER SHELL TYPES ON -P1- CENTER -----
C
  200 CONTINUE
C
C     ----- END LOOP OVER -P1- CENTERS -----
C
  210 CONTINUE
C
      IF(SOME) THEN
         IF(ISPHER.EQ.1   .AND.  NFG.EQ.0) WRITE(IW,9998) NSALC
         WRITE(IW,9997)
         WRITE(IW,9996) (IRPNAM(I),IPP(I),I=1,NIRRED)
      END IF
      RETURN
C
 9999 FORMAT(/43H -- SYMMETRY ADAPTED LINEAR COMBINATIONS --/)
 9998 FORMAT(1X,'AFTER EXCLUDING CONTAMINANT COMBINATIONS FROM THE',
     *          ' CARTESIAN GAUSSIAN BASIS'/
     *       1X,'SET, THE NUMBER OF SPHERICAL HARMONICS KEPT IN',
     *          ' THE VARIATION SPACE IS',I5)
 9997 FORMAT(/5X,'DIMENSIONS OF THE SYMMETRY SUBSPACES ARE')
 9996 FORMAT(5(1X,A4,'=',I5,4X))
      END
C
C*MODULE SYMSLC  *DECK SPHBCK
C
C> @brief : Routine transforms SALC coefficients expressed in spherical
C>          harmonics space back into cartesian space.
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Significant upgrade to include for h,i functions in basis
C
      SUBROUTINE SPHBCK(V,T,U,NBF,DBG)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION V(NBF,NBF),T(NBF,NBF),U(NBF)
C
      LOGICAL DBG,PARALL3,GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000)
C
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /SPHERI/ PSHELL(3,3),DSHELL(6,6),
     *                FSHELL(10,10),GSHELL(15,15),
     *                PIHELL(3,3),DIHELL(6,6),
     *                FIHELL(10,10),GIHELL(15,15)
      common /sphehi/ hshell(21,21),aishell(28,28),
     *                hihell(21,21),aiihell(28,28)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
C     ----- TRANSFORM -SALC- IN SPHERICAL HARMONIC SPACE -----
C           BACK TO -SALC- IN CARTESIAN GUASSIAN SPACE.
C
C     ----- SET BACK-TRANSFORMATION MATRIX -----
C
      DO 20 J=1,NUM
      DO 10 I=1,NUM
   10 T(I,J)=ZERO
   20 T(J,J)=ONE
C
      DO 1000 ISH=1,NSHELL
      IT =KTYPE(ISH)
      MIN=KMIN(ISH)
      MAX=KMAX(ISH)
      LOC=KLOC(ISH)-MIN
      go to (100,200,300,400,500,600,700),it
C
  100 CONTINUE
      GO TO 1000
  200 IF(MIN.EQ.1) THEN
      DO 210 I=MIN+1,MAX
      DO 210 J=MIN+1,MAX
      LOCI=LOC+I
      LOCJ=LOC+J
  210 T(LOCJ,LOCI)=PSHELL(I-MIN  ,J-MIN  )
      ELSE
      DO 220 I=MIN,MAX
      DO 220 J=MIN,MAX
      LOCI=LOC+I
      LOCJ=LOC+J
  220 T(LOCJ,LOCI)=PSHELL(I-MIN+1,J-MIN+1)
      END IF
      GO TO 1000
  300 DO 310 I=MIN,MAX
      DO 310 J=MIN,MAX
      LOCI=LOC+I
      LOCJ=LOC+J
  310 T(LOCJ,LOCI)=DSHELL(I-MIN+1,J-MIN+1)
      GO TO 1000
  400 DO 410 I=MIN,MAX
      DO 410 J=MIN,MAX
      LOCI=LOC+I
      LOCJ=LOC+J
  410 T(LOCJ,LOCI)=FSHELL(I-MIN+1,J-MIN+1)
      GO TO 1000
  500 DO 510 I=MIN,MAX
      DO 510 J=MIN,MAX
      LOCI=LOC+I
      LOCJ=LOC+J
  510 T(LOCJ,LOCI)=GSHELL(I-MIN+1,J-MIN+1)
c
      go to 1000
  600 do 610 i=min,max
      do 610 j=min,max
      loci=loc+i
      locj=loc+j
  610 t(locj,loci)=hshell(i-min+1,j-min+1)
      go to 1000
  700 do 710 i=min,max
      do 710 j=min,max
      loci=loc+i
      locj=loc+j
  710 t(locj,loci)=aishell(i-min+1,j-min+1)
c
 1000 CONTINUE
C
      IF(DBG) CALL SYMPRP(T,NUM,NUM,NUM)
      IF(DBG) CALL SYMPRP(V,NUM,NUM,NUM)
C
C     ----- BACK-TRANSFORM -----
C
C             V <-- T*V
C
      PARALL3 = GOPARR  .AND.  NUM.GT.MXSQN3()
      IPCOUNT = ME - 1
C
      NBSQ = NUM*NUM
      DO 2000 J=1,NUM
         IF(PARALL3) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) THEN
               CALL VCLR(V(1,J),1,NUM)
               GO TO 2000
            END IF
         END IF
         CALL DCOPY(NUM,V(1,J),1,U,1)
         DO I=1,NUM
            DUM=ZERO
            DO K=1,NUM
               DUM=DUM+T(K,I)*U(K)
            END DO
            V(I,J)=DUM
         END DO
 2000 CONTINUE
C
      IF(PARALL3) CALL DDI_GSUMF(1201,V,NBSQ)
C
      IF(DBG) CALL SYMPRP(V,NUM,NUM,NUM)
C
      RETURN
      END
C
C*MODULE SYMSLC  *DECK SPHBCKU
C
C> @brief : Routine transforms SALC coefficients expressed in cartesian 
C>          space into spherical harmonic space. This is a clone
C>          of SPHBCK
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Significant upgrade to include for h,i functions in basis
C
      SUBROUTINE SPHBCKU(T,L1,NBF,NSPH)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION T(NBF,*)
C
      PARAMETER (MXSH=5000, MXGTOT=20000)
C
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SPHERI/ PSHELL(3,3),DSHELL(6,6),
     *                FSHELL(10,10),GSHELL(15,15),
     *                PIHELL(3,3),DIHELL(6,6),
     *                FIHELL(10,10),GIHELL(15,15)
      common /sphehi/ hshell(21,21),aishell(28,28),
     *                hihell(21,21),aiihell(28,28)
C
C     ----- CREATE TRANSFORMATION MATRIX CARTESIAN->SPHERICAL
C           A CLONE OF SPHBCK.
C     T WILL CONTAIN THE TRANSFORMATION MATRIX, NSPH - THE NUMBER OF
C     SPHERICAL HARMONICS IN THE BASIS SET, T(L1,NSPH).
C     NOTE THAT T IS NOT UNITARY, IT IS DEVISED SO THAT T^T * S * T = 1
C     (FOR S - BLOCK OF OVERLAPS FOR A FIXED SHELL).
C
      NSPH=0
      NEL=0
      CALL VCLR(T,1,L1*L1)
C
      DO 1000 ISH=1,NSHELL
         IT =KTYPE(ISH)
         MIN=KMIN(ISH)
         MAX=KMAX(ISH)
         LOC=KLOC(ISH)-MIN
C
         NSPH=NSPH+(2*IT-1)
C                                     L-SHELLS
         IF(IT.EQ.2.AND.MIN.EQ.1) NSPH=NSPH+1
C
         go to (100,200,300,400,500,600,700),it
C
  100    CONTINUE
         LOCI=LOC+1
         LOCJ=LOC+1-NEL
         T(LOCI,LOCJ)=1.0D+00
         GO TO 1000
C
  200    CONTINUE
         IF(MIN.EQ.1) THEN
            LOCI=LOC+1
            LOCJ=LOC+1-NEL
            T(LOCI,LOCJ)=1.0D+00
            DO I=MIN+1,MAX
               DO J=MIN+1,MAX
                  LOCI=LOC+I
                  LOCJ=LOC+J-NEL
                  T(LOCI,LOCJ)=PSHELL(I-MIN  ,J-MIN  )
               ENDDO
            ENDDO
         ELSE
            DO I=MIN,MAX
               DO J=MIN,MAX
                  LOCI=LOC+I
                  LOCJ=LOC+J-NEL
                  T(LOCI,LOCJ)=PSHELL(I-MIN+1,J-MIN+1)
               ENDDO
            ENDDO
         END IF
         GO TO 1000
C
  300    CONTINUE
         DO I=MIN,MAX
            DO J=MIN,MIN+4
               LOCI=LOC+I
               LOCJ=LOC+J-NEL
               T(LOCI,LOCJ)=DSHELL(I-MIN+1,J-MIN+1)
            ENDDO
         ENDDO
         NEL=NEL+1
         GO TO 1000
C
  400    CONTINUE
         DO I=MIN,MAX
            DO J=MIN,MIN+6
               LOCI=LOC+I
               LOCJ=LOC+J-NEL
               T(LOCI,LOCJ)=FSHELL(I-MIN+1,J-MIN+1)
            ENDDO
         ENDDO
         NEL=NEL+3
         GO TO 1000
C
  500    CONTINUE
         DO I=MIN,MAX
            DO J=MIN,MIN+8
               LOCI=LOC+I
               LOCJ=LOC+J-NEL
               T(LOCI,LOCJ)=GSHELL(I-MIN+1,J-MIN+1)
            ENDDO
         ENDDO
         NEL=NEL+6
C
         go to 1000
  600    continue
         do i=min,max
            do j=min,min+10
               loci=loc+i
               locj=loc+j-nel
               t(loci,locj)=hshell(i-min+1,j-min+1)
            enddo
         enddo
         nel=nel+10
         go to 1000
  700    continue
         do i=min,max
            do j=min,min+12
               loci=loc+i
               locj=loc+j-nel
               t(loci,locj)=aishell(i-min+1,j-min+1)
            enddo
         enddo
         nel=nel+15
C
 1000 CONTINUE
C
      RETURN
      END
C*MODULE SYMSLC  *DECK SPHCUT
C
C> @brief : Routine eliminates unwanted (contaminant) functions from 
C>          spherical harmonic space. 
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Significant upgrade to include for h,i functions in basis
C
      SUBROUTINE SPHCUT(DBG)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL DBG
C
      dimension mf(7),nam(84),indsr(35)
C
      PARAMETER (MXSH=5000, MXATM=2000)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /SPHERI/ PSHELL(3,3),DSHELL(6,6),
     *                FSHELL(10,10),GSHELL(15,15),
     *                PIHELL(3,3),DIHELL(6,6),
     *                FIHELL(10,10),GIHELL(15,15)
      common /sphehi/ hshell(21,21),aishell(28,28),
     *                hihell(21,21),aiihell(28,28)
      COMMON /SYMSPD/ PTR(3,144),DTR(6,288),FTR(10,480),GTR(15,720)
      common /symhi / htr(21,1008),aitr(28,1344)
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
C
      PARAMETER (ZERO=0.0D+00)
C
      data mf  /0,1,4,10,20,35,56/
      data nam /6h    s ,6h    x ,6h    y ,6h    z ,6h    xx,6h    yy,
     1          6h    zz,6h    xy,6h    xz,6h    yz,6h   xxx,6h   yyy,
     2          6h   zzz,6h   xxy,6h   xxz,6h   yyx,6h   yyz,6h   zzx,
     3          6h   zzy,6h   xyz,6h  xxxx,6h  yyyy,6h  zzzz,6h  xxxy,
     4          6h  xxxz,6h  yyyx,6h  yyyz,6h  zzzx,6h  zzzy,6h  xxyy,
     5          6h  xxzz,6h  yyzz,6h  xxyz,6h  yyxz,6h  zzxy,6h xxxxx,
     6          6h yyyyy,6h zzzzz,6h xxxxy,6h xxxxz,6h yyyyx,6h yyyyz,
     7          6h zzzzx,6h zzzzy,6h xxxyy,6h xxxzz,6h yyyxx,6h yyyzz,
     8          6h zzzxx,6h zzzyy,6h xxxyz,6h yyyxz,6h zzzxy,6h xxyyz,
     9          6h xxzzy,6h yyzzx,6h    x6,6h    y6,6h    z6,6h   x5y,
     1          6h   x5z,6h   y5x,6h   y5z,6h   z5x,6h   z5y,6h  x4y2,
     2          6h  x4z2,6h  y4x2,6h  y4z2,6h  z4x2,6h  z4y2,6h  x4yz,
     3          6h  y4xz,6h  z4xy,6h  x3y3,6h  x3z3,6h  y3z3,6h x3y2z,
     4          6h x3z2y,6h y3x2z,6h y3z2x,6h z3x2y,6h z3y2x,6hx2y2z2/
c
      DATA INDSR /4HD S ,4HF P1,4HF P2,4HF P3,4HG S ,
     1            4hg d1,4hg d2,4hg d3,4hg d4,4hg d5,
     1            4hh p1,4hh p2,4hh p3,4hh f1,4hh f2,
     1            4hh f3,4hh f4,4hh f5,4hh f6,4hh f7,
     1            4hi  s,4hi d1,4hi d2,4hi d3,4hi d4,
     1            4hi d5,4hi g1,4hi g2,4hi g3,4hi g4,
     1            4hi g5,4hi g6,4hi g7,4hi g8,4hi g9/
C
C     ----- SET UNDESIRED BLOCKS IN THE ROTATION MATRIX TO ZERO -----
C
C     ---- LOOP OVER SYMMETRY OPERATIONS -----
C
      DO 60 IT=1,NT
      ND= 6*(IT-1)
      NF=10*(IT-1)
      NG=15*(IT-1)
      nh=21*(it-1)
      ni=28*(it-1)
C
C     ----- LOOP OVER S,P,D,F,G,H,I CLASSES -----
C
      do 20 iper=1,5
C
      N=6
      IF(IPER.EQ.2) N=10
      IF(IPER.EQ.3) N=15
      if(iper.eq.4) n=21
      if(iper.eq.5) n=28
C
      go to (21,22,23,24,25),iper
C
 21   DO 31 I=1,N
      DTR(I,ND+6)=ZERO
      DTR(6,ND+I)=ZERO
 31   CONTINUE
      GO TO 20
C
 22   DO 32 I=8,10
      DO 32 J=1,N
      FTR(I,NF+J)=ZERO
      FTR(J,NF+I)=ZERO
 32   CONTINUE
      GO TO 20
C
 23   DO 33 I=10,15
      DO 33 J=1,N
      GTR(I,NG+J)=ZERO
      GTR(J,NG+I)=ZERO
 33   CONTINUE
      go to 20
c
 24   do 34 i=12,21
      do 34 j=1,n
      htr(i,nh+j)=zero
      htr(j,nh+i)=zero
 34   continue
      go to 20
c
 25   do 35 i=14,28
      do 35 j=1,n
      aitr(i,ni+j)=zero
      aitr(j,ni+i)=zero
 35   continue
C
 20   CONTINUE
 60   CONTINUE
C
C     ----- ELIMINATION DONE -----
C
      IF(DBG) THEN
C
C     ----  PRINTING  ----
C
      WRITE(IW,9996)
C
      do 120 iper=1,5
C
      N=6
      IF(IPER.EQ.2) N=10
      IF(IPER.EQ.3) N=15
      if(iper.eq.4) n=21
      if(iper.eq.5) n=28
      ID=MF(IPER+2)
      go to (121,122,123,124,125),iper
C
C     ---- D S ----
C
 121  DO 131 J=6,6
      WRITE(IW,9998) J,INDSR(J-6+1)
      MAXNP=0
 141  MINNP=MAXNP+1
      MAXNP=MAXNP+6
      IF(MAXNP.GT.N) MAXNP=N
      WRITE(IW,9997) (DSHELL(I,6),NAM(ID+I),I=MINNP,MAXNP)
      IF(MAXNP.LT.N) GO TO 141
 131  CONTINUE
      GO TO 120
C
C     ---- F P ----
C
 122  DO 132 J=8,10
      WRITE(IW,9998) J,INDSR(J-8+2)
      MAXNP=0
 142  MINNP=MAXNP+1
      MAXNP=MAXNP+6
      IF(MAXNP.GT.N) MAXNP=N
      WRITE(IW,9997) (FSHELL(I,J),NAM(ID+I),I=MINNP,MAXNP)
      IF(MAXNP.LT.N) GO TO 142
 132  CONTINUE
      GO TO 120
C
C     ---- G S AND G D ----
C
 123  DO 133 J=10,15
      WRITE(IW,9998) J,INDSR(J-10+5)
      MAXNP=0
 143  MINNP=MAXNP+1
      MAXNP=MAXNP+6
      IF(MAXNP.GT.N) MAXNP=N
      WRITE(IW,9997) (GSHELL(I,J),NAM(ID+I),I=MINNP,MAXNP)
      IF(MAXNP.LT.N) GO TO 143
 133  CONTINUE
      go to 120
c
c     ---- h p and h f ----
c
 124  do 134 j=12,21
      write(iw,9998) j,indsr(j-12+11)
      maxnp=0
 144  minnp=maxnp+1
      maxnp=maxnp+6
      if(maxnp.gt.n) maxnp=n
      write(iw,9997) (hshell(i,j),nam(id+i),i=minnp,maxnp)
      if(maxnp.lt.n) go to 144
 134  continue
      go to 120
c
c     ---- i s, i d and i g ----
c
 125  do 135 j=14,28
      write(iw,9998) j,indsr(j-14+21)
      maxnp=0
 145  minnp=maxnp+1
      maxnp=maxnp+6
      if(maxnp.gt.n) maxnp=n
      write(iw,9997) (aishell(i,j),nam(id+i),i=minnp,maxnp)
      if(maxnp.lt.n) go to 145
 135  continue
C
 120  CONTINUE
C
      END IF
C
      RETURN
 9998 FORMAT(/,5H CHI(,I4,2X,A4,2H)=)
 9997 FORMAT(12X,6(F8.4,1X,A4))
 9996 FORMAT(/,10X,30(1H-),/,10X,'ELIMINATED VECTORS IN -SPHCUT-',/,
     1         10X,30(1H-))
      END
C
C*MODULE SYMSLC  *DECK SPHMAK
C
C> @brief : Routine makes spherical harmonic functions
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Significant upgrade to include for h,i functions in basis
C
      subroutine sphmak(dbg,dd,ss,vv,tt,pp,ssph,psph,dsph,fsph,gsph,
     *                  hsph,aisph)
C
      IMPLICIT   DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL    NORM,DBG
C
      DIMENSION DD(84),SS(84,84),VV(84,84),TT(84,84),PP(84,84),
     *          SSPH(1,1),PSPH(3,3),DSPH(6,6),FSPH(10,10),GSPH(15,15)
     *,         hsph(21,21),aisph(28,28)
      dimension bc(7),nx(84),ny(84),nz(84),
     *          ISSPH(1,1),IPSPH(3,3),IDSPH(6,6),IFSPH(10,10),
     *          igsph(15,15),ihsph(21,21),iisph(28,28)
C
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
C
      DATA ISSPH/
     1  1/
C
      DATA IPSPH/
     1  1,  0,  0,
     2  0,  1,  0,
     3  0,  0,  1/
C
      DATA IDSPH/
     1 -1, -1,  2,  0,  0,  0,
     2  1, -1,  0,  0,  0,  0,
     3  0,  0,  0,  1,  0,  0,
     4  0,  0,  0,  0,  1,  0,
     5  0,  0,  0,  0,  0,  1,
     6  1,  1,  1,  0,  0,  0/
C
      DATA IFSPH/
     1   1,  0,  0,  0,  0, -3,  0,  0,  0,  0,
     2   0,  0,  0,  0,  1,  0, -1,  0,  0,  0,
     3  -1,  0,  0,  0,  0, -1,  0,  4,  0,  0,
     4   0,  0,  2,  0, -3,  0, -3,  0,  0,  0,
     5   0, -1,  0, -1,  0,  0,  0,  0,  4,  0,
     6   0,  0,  0,  0,  0,  0,  0,  0,  0,  1,
     7   0, -1,  0,  3,  0,  0,  0,  0,  0,  0,
     8   1,  0,  0,  0,  0,  1,  0,  1,  0,  0,
     9   0,  1,  0,  1,  0,  0,  0,  0,  1,  0,
     1   0,  0,  1,  0,  1,  0,  1,  0,  0,  0/
C
      DATA IGSPH/
     1  1,  1,  0,  0,  0,  0,  0,  0,  0, -6,  0,  0,  0,  0,  0,
     2  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0, -3,  0,
     3 -1,  1,  0,  0,  0,  0,  0,  0,  0,  0,  6, -6,  0,  0,  0,
     4  0,  0,  0,  0, -3,  0,  0,  4,  0,  0,  0,  0,  0, -3,  0,
     5  3,  3,  8,  0,  0,  0,  0,  0,  0,  6,-24,-24,  0,  0,  0,
     6  0,  0,  0,  0,  0,  0, -3,  0,  4,  0,  0,  0, -3,  0,  0,
     7  0,  0,  0, -1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  6,
     8  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0, -3,  0,  0,
     9  0,  0,  0,  1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     1  1,  1,  1,  0,  0,  0,  0,  0,  0,  2,  2,  2,  0,  0,  0,
     2 -1, -1,  2,  0,  0,  0,  0,  0,  0, -2,  1,  1,  0,  0,  0,
     3  1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1, -1,  0,  0,  0,
     4  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  1,
     5  0,  0,  0,  0,  1,  0,  0,  1,  0,  0,  0,  0,  0,  1,  0,
     6  0,  0,  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  1,  0,  0/
C
      data ihsph/
     1  1,  0,  0,  0,  0,  5,  0,  0,  0,-10,  0,  0,  0,  0,  0,    !  +5
     1  0,  0,  0,  0,  0,  0,
     2  0,  0,  0,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,    !  +4
     2  0,  0,  0, -6,  0,  0,
     3 -1,  0,  0,  0,  0,  3,  0,  0,  0,  2,  8,  0,  0,  0,  0,    !  +3
     3  0,  0,  0,  0,  0,-24,
     4  0,  0,  0,  0, -1,  0,  1,  0,  0,  0,  0,  0,  0,  2, -2,    !  +2
     4  0,  0,  0,  0,  0,  0,
     5  1,  0,  0,  0,  0,  1,  0,  8,  0,  2,-12,  0,  0,  0,  0,    !  +1
     5  0,  0,  0,  0,  0,-12,
     6  0,  0,  8,  0, 15,  0, 15,  0,  0,  0,  0,  0,  0,-40,-40,    !   0
     6  0,  0,  0, 30,  0,  0,
     7  0,  1,  0,  1,  0,  0,  0,  0,  8,  0,  0,  2,-12,  0,  0,    !  -1
     7  0,  0,  0,  0,-12,  0,
     8  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    !  -2
     8 -1, -1,  2,  0,  0,  0,
     9  0,  1,  0, -3,  0,  0,  0,  0,  0,  0,  0, -2, -8,  0,  0,    !  -3
     9  0,  0,  0,  0, 24,  0,
     *  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    !  -4
     *  1, -1,  0,  0,  0,  0,
     1  0,  1,  0,  5,  0,  0,  0,  0,  0,  0,  0,-10,  0,  0,  0,    !  -5
     1  0,  0,  0,  0,  0,  0,
c
     2  1,  0,  0,  0,  0,  1,  0,  1,  0,  2,  2,  0,  0,  0,  0,    !   1
     2  0,  0,  0,  0,  0,  2,
     3  0,  1,  0,  1,  0,  0,  0,  0,  1,  0,  0,  2,  2,  0,  0,    !   1
     3  0,  0,  0,  0,  2,  0,
     4  0,  0,  1,  0,  1,  0,  1,  0,  0,  0,  0,  0,  0,  2,  2,    !   0
     4  0,  0,  0,  2,  0,  0, 
c
     5  1,  0,  0,  0,  0, -3,  0,  0,  0, -2,  1,  0,  0,  0,  0,    !   3
     5  0,  0,  0,  0,  0, -3,
     6  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,    !   2
     6  1,  1,  1,  0,  0,  0,
     7 -1,  0,  0,  0,  0, -1,  0,  4,  0, -2,  3,  0,  0,  0,  0,    !   1
     7  0,  0,  0,  0,  0,  3,
     8  0,  0,  2,  0, -3,  0, -3,  0,  0,  0,  0,  0,  0, -1, -1,    !   0
     8  0,  0,  0, -6,  0,  0,
     9  0, -1,  0, -1,  0,  0,  0,  0,  4,  0,  0, -2,  3,  0,  0,    !   1
     9  0,  0,  0,  0,  3,  0,
     *  0,  0,  0,  0,  1,  0, -1,  0,  0,  0,  0,  0,  0,  1, -1,    !   2
     *  0,  0,  0,  0,  0,  0,
     1  0, -1,  0,  3,  0,  0,  0,  0,  0,  0,  0,  2, -1,  0,  0,    !   3
     1  0,  0,  0,  0,  3,  0/
C
      data iisph/
     1   1,  -1,   0,   0,   0,   0,   0,   0,   0, -15,    !  +6
     1   0,  15,   0,   0,   0,   0,   0,   0,   0,   0,
     1   0,   0,   0,   0,   0,   0,   0,   0,
     2   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,    !  +5
     2   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,
     2   0, -10,   0,   0,   0,   0,   0,   0,
     3  -1,  -1,   0,   0,   0,   0,   0,   0,   0,   5,    !  +4
     3  10,   5,  10,   0,   0,   0,   0,   0,   0,   0,
     3   0,   0,   0,   0,   0,   0,   0, -60,
     4   0,   0,   0,   0,  -3,   0,   0,   0,   0,   0,    !  +3
     4   0,   0,   0,   0,   0,   0,   9,   0,   0,   8,
     4   0,   6,   0,   0,   0,   0, -24,   0,
     5   1,  -1,   0,   0,   0,   0,   0,   0,   0,   1,    !  +2
     5 -16,  -1,  16,  16, -16,   0,   0,   0,   0,   0,
     5   0,   0,   0,   0,   0,   0,   0,   0,
     6   0,   0,   0,   0,  10,   0,   0,  16,   0,   0,    !  +1
     6   0,   0,   0,   0,   0,   0,  10,   0,   0, -40,
     6   0,  20,   0,   0,   0,   0, -40,   0,
     7  -5,  -5,  16,   0,   0,   0,   0,   0,   0, -15,    !   0
     7  90, -15,  90,-120,-120,   0,   0,   0,   0,   0,
     7   0,   0,   0,   0,   0,   0,   0, 180,
     8   0,   0,   0,   0,   0,   0,  10,   0,  16,   0,    !  -1
     8   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,
     8 -40,   0,   0,  20,   0, -40,   0,   0,
     9   0,   0,   0,   1,   0,   1,   0,   0,   0,   0,    !  -2
     9   0,   0,   0,   0,   0,   0,   0,  16,   2,   0,
     9   0,   0, -16,   0, -16,   0,   0,   0,
     *   0,   0,   0,   0,   0,   0,   3,   0,   0,   0,    !  -3
     *   0,   0,   0,   0,   0,  -9,   0,   0,   0,   0,
     *  -8,   0,   0,  -6,   0,  24,   0,   0,
     1   0,   0,   0,  -4,   0,   4,   0,   0,   0,   0,    !  -4
     1   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     1   0,   0,  40,   0, -40,   0,   0,   0,
     2   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,    !  -5
     2   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
     2   0,   0,   0, -10,   0,   0,   0,   0,
     3   0,   0,   0,   6,   0,   6,   0,   0,   0,   0,    !  -6
     3   0,   0,   0,   0,   0,   0,   0,   0, -20,   0,
     3   0,   0,   0,   0,   0,   0,   0,   0,
c
     4   1,   1,   1,   0,   0,   0,   0,   0,   0,   3,    !   0
     4   3,   3,   3,   3,   3,   0,   0,   0,   0,   0,
     4   0,   0,   0,   0,   0,   0,   0,   6,
c
     5  -1,  -1,   2,   0,   0,   0,   0,   0,   0,  -3,    !   0
     5   0,  -3,   0,   3,   3,   0,   0,   0,   0,   0,
     5   0,   0,   0,   0,   0,   0,   0,   0,
     6   0,   0,   0,   1,   0,   1,   0,   0,   0,   0,    !   2
     6   0,   0,   0,   0,   0,   0,   0,   1,   2,   0,
     6   0,   0,   2,   0,   2,   0,   0,   0,
     7   1,  -1,   0,   0,   0,   0,   0,   0,   0,   1,    !   2
     7   2,  -1,  -2,   1,  -1,   0,   0,   0,   0,   0,
     7   0,   0,   0,   0,   0,   0,   0,   0,
     8   0,   0,   0,   0,   1,   0,   0,   1,   0,   0,    !   1
     8   0,   0,   0,   0,   0,   0,   1,   0,   0,   2,
     8   0,   2,   0,   0,   0,   0,   2,   0,
     9   0,   0,   0,   0,   0,   0,   1,   0,   1,   0,    !   1
     9   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,
     9   2,   0,   0,   2,   0,   2,   0,   0,
c
     *   1,   1,   0,   0,   0,   0,   0,   0,   0,  -5,    !   4
     *   1,  -5,   1,   0,   0,   0,   0,   0,   0,   0,
     *   0,   0,   0,   0,   0,   0,   0,  -6,
     1   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,    !   3
     1   0,   0,   0,   0,   0,   0,  -3,   0,   0,   1,
     1   0,  -2,   0,   0,   0,   0,  -3,   0,
     2  -1,   1,   0,   0,   0,   0,   0,   0,   0,  -1,    !   2
     2   5,   1,  -5,   6,  -6,   0,   0,   0,   0,   0,
     2   0,   0,   0,   0,   0,   0,   0,   0,
     3   0,   0,   0,   0,  -3,   0,   0,   4,   0,   0,    !   1
     3   0,   0,   0,   0,   0,   0,  -3,   0,   0,   1,
     3   0,  -6,   0,   0,   0,   0,   1,   0,
     4   3,   3,   8,   0,   0,   0,   0,   0,   0,   9,    !   0
     4 -21,   9, -21, -16, -16,   0,   0,   0,   0,   0,
     4   0,   0,   0,   0,   0,   0,   0, -42,
     5   0,   0,   0,   0,   0,   0,  -3,   0,   4,   0,    !   1
     5   0,   0,   0,   0,   0,  -3,   0,   0,   0,   0,
     5   1,   0,   0,  -6,   0,   1,   0,   0,
     6   0,   0,   0,  -1,   0,  -1,   0,   0,   0,   0,    !   2
     6   0,   0,   0,   0,   0,   0,   0,   6,  -2,   0,
     6   0,   0,   5,   0,   5,   0,   0,   0,
     7   0,   0,   0,   0,   0,   0,  -1,   0,   0,   0,    !   3
     7   0,   0,   0,   0,   0,   3,   0,   0,   0,   0,
     7  -1,   0,   0,   2,   0,   3,   0,   0,
     8   0,   0,   0,   1,   0,  -1,   0,   0,   0,   0,    !   4
     8   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
     8   0,   0,   1,   0,  -1,   0,   0,   0/
C
      DATA  NX    / 1, 2, 1, 1, 3, 1, 1, 2, 2, 1,
     1              4, 1, 1, 3, 3, 2, 1, 2, 1, 2,
     2              5, 1, 1, 4, 4, 2, 1, 2, 1, 3,
     3              3, 1, 3, 2, 2,
     4              6, 1, 1, 5, 5, 2, 1, 2, 1, 4,
     5              4, 3, 1, 3, 1, 4, 2, 2, 3, 3,
     6              2,
     7              7, 1, 1, 6, 6, 2, 1, 2, 1, 5,
     8              5, 3, 1, 3, 1, 5, 2, 2, 4, 4,
     9              1, 4, 4, 3, 2, 3, 2, 3/
C
      DATA  NY    / 1, 1, 2, 1, 1, 3, 1, 2, 1, 2,
     1              1, 4, 1, 2, 1, 3, 3, 1, 2, 2,
     2              1, 5, 1, 2, 1, 4, 4, 1, 2, 3,
     3              1, 3, 2, 3, 2,
     4              1, 6, 1, 2, 1, 5, 5, 1, 2, 3,
     5              1, 4, 4, 1, 3, 2, 4, 2, 3, 2,
     6              3, 
     7              1, 7, 1, 2, 1, 6, 6, 1, 2, 3,
     8              1, 5, 5, 1, 3, 2, 5, 2, 4, 1,
     9              4, 3, 2, 4, 4, 2, 3, 3/
C
      DATA  NZ    / 1, 1, 1, 2, 1, 1, 3, 1, 2, 2,
     1              1, 1, 4, 1, 2, 1, 2, 3, 3, 2,
     2              1, 1, 5, 1, 2, 1, 2, 4, 4, 1,
     3              3, 3, 2, 2, 3,
     4              1, 1, 6, 1, 2, 1, 2, 5, 5, 1,
     5              3, 1, 3, 4, 4, 2, 2, 4, 2, 3,
     6              3,
     7              1, 1, 7, 1, 2, 1, 2, 6, 6, 1,
     8              3, 1, 3, 5, 5, 2, 2, 5, 1, 4,
     9              4, 2, 3, 2, 3, 4, 4, 3/
C
      DATA ZERO   /  0.0D+00/
      data bc     /7*0.0D+00/
C
      DBG=.FALSE.
C
      BC(1)=1
      BC(2)=1
      BC(3)=1*3
      BC(4)=1*3*5
      BC(5)=1*3*5*7
      bc(6)=1*3*5*7*9
      bc(7)=1*3*5*7*9*11
C
      NORM =NORMF.EQ.0.OR.NORMP.EQ.0
C
      nbf = 84
      DO J=1,NBF
         DO I=1,NBF
            IJX=NX(I)+NX(J)-2
            IJY=NY(I)+NY(J)-2
            IJZ=NZ(I)+NZ(J)-2
            IF(((IJX/2)*2.NE.IJX).OR.((IJY/2)*2.NE.IJY)
     1                           .OR.((IJZ/2)*2.NE.IJZ)
     2                                                 ) THEN
               SS(I,J)=ZERO
            ELSE
               MX=IJX/2
               MY=IJY/2
               MZ=IJZ/2
               IF(DBG) THEN
                  WRITE(IW,9997) I,J,MX,MY,MZ,
     *               INT(BC(MX+1)),INT(BC(MY+1)),INT(BC(MZ+1))
               END IF
               SIJ =(BC(MX+1)*BC(MY+1)*BC(MZ+1))/(2**MX*2**MY*2**MZ)
               SS(I,J)=SIJ
            END IF
         ENDDO
      ENDDO
C
C     ----- DEAL WITH NORMALIZATION OF -AO- BASIS -----
C
      IF(NORM) THEN
         DO I=1,NBF
            DD(I)=SQRT(SS(I,I))
         ENDDO
         DO J=1,NBF
            DO I=1,NBF
               SS(I,J)=SS(I,J)/(DD(I)*DD(J))
            ENDDO
         ENDDO
      END IF
C
C     ----- PRINT NORMALIZATION -----
C
      IF(DBG) THEN
         WRITE(IW,*) '-AO- NORMALIZATION'
         JMAX=0
   10    JMIN=JMAX+1
         JMAX=JMAX+10
         IF(JMAX.GT.NBF) JMAX=NBF
         WRITE(IW,9999)
            WRITE(IW,9998) (DD(J),J=JMIN,JMAX)
         IF(JMAX.LT.NBF) GO TO 10
         WRITE(IW,9999)
      END IF
C
C     ----- PRINT -----
C
      IF(DBG) THEN
         WRITE(IW,*) '- AO- BASIS OVERLAP'
         JMAX=0
   20    JMIN=JMAX+1
         JMAX=JMAX+10
         IF(JMAX.GT.NBF) JMAX=NBF
         WRITE(IW,9999)
         DO I=1,NBF
            WRITE(IW,9998) (SS(I,J),J=JMIN,JMAX)
         ENDDO
         IF(JMAX.LT.NBF) GO TO 20
         WRITE(IW,9999)
      END IF
C
C     ----- BUILD SPHERICAL HARMONICS -----
C
      do j=1,84
         do i=1,84
            VV(I,J)=ZERO
         ENDDO
      ENDDO
C
      DO J=1,1
         DO I=1,1
            VV(I   ,J   )=ISSPH(I,J)
         ENDDO
      ENDDO
      DO J=1,3
         DO I=1,3
            VV(I+ 1,J+ 1)=IPSPH(I,J)
         ENDDO
      ENDDO
      DO J=1,6
         DO I=1,6
            VV(I+ 4,J+ 4)=IDSPH(I,J)
         ENDDO
      ENDDO
      DO J=1,10
         DO I=1,10
            VV(I+10,J+10)=IFSPH(I,J)
         ENDDO
      ENDDO
      DO J=1,15
         DO I=1,15
            VV(I+20,J+20)=IGSPH(I,J)
         ENDDO
      ENDDO
C
      do j=1,21
         do i=1,21
            vv(i+35,j+35)=ihsph(i,j)
         enddo
      enddo
      do j=1,28
         do i=1,28
            vv(i+56,j+56)=iisph(i,j)
         enddo
      enddo
C
C     ----- DEAL WITH NORMALIZATION OF -AO- BASIS -----
C
      IF(NORM) THEN
         DO J=1,NBF
            DO I=1,NBF
               VV(I,J)=VV(I,J)*DD(I)
            ENDDO
         ENDDO
      END IF
C
C     ----- PRINT -----
C
      IF(DBG) THEN
         WRITE(IW,*) '-SPH- DEFINITION'
         JMAX=0
   30    JMIN=JMAX+1
         JMAX=JMAX+10
         IF(JMAX.GT.NBF) JMAX=NBF
         WRITE(IW,9999)
         DO I=1,NBF
            WRITE(IW,9998) (VV(I,J),J=JMIN,JMAX)
         ENDDO
         IF(JMAX.LT.NBF) GO TO 30
         WRITE(IW,9999)
      END IF
C
C     ----- TRANSFORM OVERLAP MATRIX -----
C
      DO I=1,NBF
         DO J=1,NBF
            DUM=ZERO
            DO K=1,NBF
               DUM=DUM+SS(I,K)*VV(K,J)
            ENDDO
            TT(I,J)=DUM
         ENDDO
      ENDDO
      DO I=1,NBF
         DO J=1,NBF
            DUM=ZERO
            DO K=1,NBF
               DUM=DUM+VV(K,I)*TT(K,J)
            ENDDO
            PP(I,J)=DUM
         ENDDO
      ENDDO
C
C     ----- PRINT -----
C
      IF(DBG) THEN
         WRITE(IW,*) '-SPH- BASIS OVERLAP'
         JMAX=0
   40    JMIN=JMAX+1
         JMAX=JMAX+10
         IF(JMAX.GT.NBF) JMAX=NBF
         WRITE(IW,9999)
         DO I=1,NBF
            WRITE(IW,9998) (PP(I,J),J=JMIN,JMAX)
         ENDDO
         IF(JMAX.LT.NBF) GO TO 40
         WRITE(IW,9999)
      END IF
C
C     ----- NORMALIZE FURTHER -----
C
      DO J=1,NBF
         DUM=SQRT(PP(J,J))
         DO I=1,NBF
            VV(I,J)=VV(I,J)/DUM
         ENDDO
      ENDDO
C
C     ----- PRINT -----
C
      IF(DBG) THEN
         WRITE(IW,*) '-SPH- NORMALIZED'
         JMAX=0
   50    JMIN=JMAX+1
         JMAX=JMAX+10
         IF(JMAX.GT.NBF) JMAX=NBF
         WRITE(IW,9999)
         DO I=1,NBF
            WRITE(IW,9998) (VV(I,J),J=JMIN,JMAX)
         ENDDO
         IF(JMAX.LT.NBF) GO TO 50
         WRITE(IW,9999)
      END IF
C
C     ----- TRANSFORM OVERLAP MATRIX -----
C
      DO I=1,NBF
         DO J=1,NBF
            DUM=ZERO
            DO K=1,NBF
               DUM=DUM+SS(I,K)*VV(K,J)
            ENDDO
            TT(I,J)=DUM
         ENDDO
      ENDDO
      DO I=1,NBF
         DO J=1,NBF
            DUM=ZERO
            DO K=1,NBF
               DUM=DUM+VV(K,I)*TT(K,J)
            ENDDO
            PP(I,J)=DUM
         ENDDO
      ENDDO
C
C     ----- PRINT -----
C
      IF(DBG) THEN
         WRITE(IW,*) '-SPH- BASIS OVERLAP'
         JMAX=0
   60    JMIN=JMAX+1
         JMAX=JMAX+10
         IF(JMAX.GT.NBF) JMAX=NBF
         WRITE(IW,9999)
         DO I=1,NBF
            WRITE(IW,9998) (PP(I,J),J=JMIN,JMAX)
         ENDDO
         IF(JMAX.LT.NBF) GO TO 60
         WRITE(IW,9999)
      END IF
C
C     ----- BUILD -SSPH- -PSPH- -DSPH- -FSPH- -GSPH- -HSPH- -ISPH- -----
C
      DO J=1,1
         DO I=1,1
            SSPH(I,J)=VV(I   ,J   )
         ENDDO
      ENDDO
      DO J=1,3
         DO I=1,3
            PSPH(I,J)=VV(I+ 1,J+ 1)
         ENDDO
      ENDDO
      DO J=1,6
         DO I=1,6
            DSPH(I,J)=VV(I+ 4,J+ 4)
         ENDDO
      ENDDO
      DO J=1,10
         DO I=1,10
            FSPH(I,J)=VV(I+10,J+10)
         ENDDO
      ENDDO
      DO J=1,15
         DO I=1,15
            GSPH(I,J)=VV(I+20,J+20)
         ENDDO
      ENDDO
C
      do j=1,21
         do i=1,21
            hsph(i,j)=vv(i+35,j+35)
         enddo
      enddo
      do j=1,28
         do i=1,28
            aisph(i,j)=vv(i+56,j+56)
         enddo
      enddo
C
      RETURN
C
 9999 FORMAT(/)
 9998 FORMAT(10F12.6)
 9997 FORMAT(5I3,3X,3I5)
      END
C*MODULE SYMSLC  *DECK SPHMAT
C
C> @brief : Make spherical harmonics transformation matrix
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Significant upgrade to include for h,i functions in basis
C
      SUBROUTINE SPHMAT(SP,NDIM,IFINV,IFTSP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00)
C
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SPHERI/ PSHELL(3,3),DSHELL(6,6),
     *                FSHELL(10,10),GSHELL(15,15),
     *                PIHELL(3,3),DIHELL(6,6),
     *                FIHELL(10,10),GIHELL(15,15)
      common /sphehi/ hshell(21,21),aishell(28,28),
     *                hihell(21,21),aiihell(28,28)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
C
      DIMENSION SP(NDIM,NDIM)
C
C
      DO J=1,NUM
         DO I=1,NUM
            SP(I,J)=ZERO
         ENDDO
         SP(J,J)=ONE
      ENDDO
C
C     ----- BRANCH ON -IFINV- AND -IFTSP- -----
C
      IF(IFINV.EQ.-1.AND.IFTSP.EQ.0) THEN
C
C     ----- INVERSE -----
C
         DO II=1,NSHELL
            LIT =KTYPE(II)
            MIN =KMIN(II)
            LOC =KLOC(II)
            IF(LIT.EQ.1) THEN
            ELSE IF(LIT.EQ.2) THEN
               IF(MIN.EQ.1) THEN
                  DO J=1,3
                     DO I=1,3
                        SP(I+LOC  ,J+LOC  )=PIHELL(I,J)
                     ENDDO
                  ENDDO
               ELSE
                  DO J=1,3
                     DO I=1,3
                        SP(I+LOC-1,J+LOC-1)=PIHELL(I,J)
                     ENDDO
                  ENDDO
               END IF
            ELSE IF(LIT.EQ.3) THEN
               DO J=1,6
                  DO I=1,6
                     SP(I+LOC-1,J+LOC-1)=DIHELL(I,J)
                  ENDDO
               ENDDO
            ELSE IF(LIT.EQ.4) THEN
               DO J=1,10
                  DO I=1,10
                     SP(I+LOC-1,J+LOC-1)=FIHELL(I,J)
                  ENDDO
               ENDDO
            ELSE IF(LIT.EQ.5) THEN
               DO J=1,15
                  DO I=1,15
                     SP(I+LOC-1,J+LOC-1)=GIHELL(I,J)
                  ENDDO
               ENDDO
C
            else if(lit.eq.6) then
               do j=1,21
                  do i=1,21
                     sp(i+loc-1,j+loc-1)=hihell(i,j)
                  enddo
               enddo
            else if(lit.eq.7) then
               do j=1,28
                  do i=1,28
                     sp(i+loc-1,j+loc-1)=aiihell(i,j)
                  enddo
               enddo
C
            ELSE
               WRITE(IW,9999)
               CALL ABRT
            END IF
         ENDDO
C
      ELSE IF(IFINV.EQ.-1.AND.IFTSP.NE.0) THEN
C
C     ----- INVERSE TRANSPOSE -----
C
         DO II=1,NSHELL
            LIT =KTYPE(II)
            MIN =KMIN(II)
            LOC =KLOC(II)
            IF(LIT.EQ.1) THEN
            ELSE IF(LIT.EQ.2) THEN
               IF(MIN.EQ.1) THEN
                  DO J=1,3
                     DO I=1,3
                        SP(J+LOC  ,I+LOC  )=PIHELL(I,J)
                     ENDDO
                  ENDDO
               ELSE
                  DO J=1,3
                     DO I=1,3
                        SP(J+LOC-1,I+LOC-1)=PIHELL(I,J)
                     ENDDO
                  ENDDO
               END IF
            ELSE IF(LIT.EQ.3) THEN
               DO J=1,6
                  DO I=1,6
                     SP(J+LOC-1,I+LOC-1)=DIHELL(I,J)
                  ENDDO
               ENDDO
            ELSE IF(LIT.EQ.4) THEN
               DO J=1,10
                  DO I=1,10
                     SP(J+LOC-1,I+LOC-1)=FIHELL(I,J)
                  ENDDO
               ENDDO
            ELSE IF(LIT.EQ.5) THEN
               DO J=1,15
                  DO I=1,15
                     SP(J+LOC-1,I+LOC-1)=GIHELL(I,J)
                  ENDDO
               ENDDO
C
            else if(lit.eq.6) then
               do j=1,21
                  do i=1,21
                     sp(j+loc-1,i+loc-1)=hihell(i,j)
                  enddo
               enddo
            else if(lit.eq.7) then
               do j=1,28
                  do i=1,28
                     sp(j+loc-1,i+loc-1)=aiihell(i,j)
                  enddo
               enddo
C
            ELSE
               WRITE(IW,9999)
               CALL ABRT
            END IF
         ENDDO
C
      ELSE IF(IFINV.NE.-1.AND.IFTSP.EQ.0) THEN
C
C     -----                   -----
C
         DO II=1,NSHELL
            LIT =KTYPE(II)
            MIN =KMIN(II)
            LOC =KLOC(II)
            IF(LIT.EQ.1) THEN
            ELSE IF(LIT.EQ.2) THEN
               IF(MIN.EQ.1) THEN
                  DO J=1,3
                     DO I=1,3
                        SP(I+LOC  ,J+LOC  )=PSHELL(I,J)
                     ENDDO
                  ENDDO
               ELSE
                  DO J=1,3
                     DO I=1,3
                        SP(I+LOC-1,J+LOC-1)=PSHELL(I,J)
                     ENDDO
                  ENDDO
               END IF
            ELSE IF(LIT.EQ.3) THEN
               DO J=1,6
                  DO I=1,6
                     SP(I+LOC-1,J+LOC-1)=DSHELL(I,J)
                  ENDDO
               ENDDO
            ELSE IF(LIT.EQ.4) THEN
               DO J=1,10
                  DO I=1,10
                     SP(I+LOC-1,J+LOC-1)=FSHELL(I,J)
                  ENDDO
               ENDDO
            ELSE IF(LIT.EQ.5) THEN
               DO J=1,15
                  DO I=1,15
                     SP(I+LOC-1,J+LOC-1)=GSHELL(I,J)
                  ENDDO
               ENDDO
C
            else if(lit.eq.6) then
               do j=1,21
                  do i=1,21
                     sp(i+loc-1,j+loc-1)=hshell(i,j)
                  enddo
               enddo
            else if(lit.eq.7) then
               do j=1,28
                  do i=1,28
                     sp(i+loc-1,j+loc-1)=aishell(i,j)
                  enddo
               enddo
C
            ELSE
               WRITE(IW,9999)
               CALL ABRT
            END IF
         ENDDO
C
      ELSE IF(IFINV.NE.-1.AND.IFTSP.NE.0) THEN
C
C     -----         TRANSPOSE -----
C
         DO II=1,NSHELL
            LIT =KTYPE(II)
            MIN =KMIN(II)
            LOC =KLOC(II)
            IF(LIT.EQ.1) THEN
            ELSE IF(LIT.EQ.2) THEN
               IF(MIN.EQ.1) THEN
                  DO J=1,3
                     DO I=1,3
                        SP(J+LOC  ,I+LOC  )=PSHELL(I,J)
                     ENDDO
                  ENDDO
               ELSE
                  DO J=1,3
                     DO I=1,3
                        SP(J+LOC-1,I+LOC-1)=PSHELL(I,J)
                     ENDDO
                  ENDDO
               END IF
            ELSE IF(LIT.EQ.3) THEN
               DO J=1,6
                  DO I=1,6
                     SP(J+LOC-1,I+LOC-1)=DSHELL(I,J)
                  ENDDO
               ENDDO
            ELSE IF(LIT.EQ.4) THEN
               DO J=1,10
                  DO I=1,10
                     SP(J+LOC-1,I+LOC-1)=FSHELL(I,J)
                  ENDDO
               ENDDO
            ELSE IF(LIT.EQ.5) THEN
               DO J=1,15
                  DO I=1,15
                     SP(J+LOC-1,I+LOC-1)=GSHELL(I,J)
                  ENDDO
               ENDDO
C
            else if(lit.eq.6) then
               do j=1,21
                  do i=1,21
                     sp(j+loc-1,i+loc-1)=hshell(i,j)
                  enddo
               enddo
            else if(lit.eq.7) then
               do j=1,28
                  do i=1,28
                     sp(j+loc-1,i+loc-1)=aishell(i,j)
                  enddo
               enddo
C
            ELSE
               WRITE(IW,9999)
               CALL ABRT
            END IF
         ENDDO
C
      END IF
C
      RETURN
 9999 FORMAT(' -SPHMAT- LIMITED TO -I- SHELLS . STOP .')
C 9998 FORMAT(/,1X,'SPHERICAL HARMONICS TRANSFORMATION MATRIX',
C     1            ' -IFINV- = ',I5,' -IFTSP- = ',I5,
C     2       /,1X,41(1H-))
      END
C*MODULE SYMSLC  *DECK SPHSET
C
C> @brief : Routine defines spherical harmonics and inverse transformations
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Significant upgrade to include for h,i functions in basis
C
      SUBROUTINE SPHSET(DBG,DD,SS,VV,TT,PP,ROT,BUFF,
     *                  psph,dsph,fsph,gsph,hsph,aisph)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      double precision dd(84),rot(28,28),buff(28,28),
     *          ss(84,84),vv(84,84),tt(84,84),pp(84,84),
     *          psph(3,3),dsph(6,6),fsph(10,10),gsph(15,15)
     *,         hsph(21,21),aisph(28,28)
      double precision indx(28),vwrk(28)
C
      LOGICAL DBG
C
      COMMON /FRAME / U1,U2,U3,V1,V2,V3,W1,W2,W3,X0,Y0,Z0
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /SPHERI/ PSHELL(3,3),DSHELL(6,6),
     *                FSHELL(10,10),GSHELL(15,15),
     *                PIHELL(3,3),DIHELL(6,6),
     *                FIHELL(10,10),GIHELL(15,15)
      common /sphehi/ hshell(21,21),aishell(28,28),
     *                hihell(21,21),aiihell(28,28)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
C         THE NEXT IS FOR SUN 32 BIT F77 COMPILER VERSION 4.2
      SAVE INDX,VWRK,SSPH,A,D,I,J,K,IERR
C
C     -----  THIS ROUTINE DEFINES THE SPHERICAL HARMONICS -----
C     -----  AND ITS INVERSE.                             -----
C
      IF(DBG) WRITE(IW,9999)
C
C     ----- INITIALIZATIONS -----
C
      DO 1 I=1,28
       INDX(I)=0
 1    CONTINUE
C
      DO 10 I=1,3
      DO  5 J=1,3
        PSPH(I,J)=ZERO
      PSHELL(I,J)=ZERO
  5   PIHELL(I,J)=ZERO
 10   PIHELL(I,I)=ONE
      DO 20 I=1,6
      DO 15 J=1,6
        DSPH(I,J)=ZERO
      DSHELL(I,J)=ZERO
 15   DIHELL(I,J)=ZERO
 20   DIHELL(I,I)=ONE
      DO 30 I=1,10
      DO 25 J=1,10
        FSPH(I,J)=ZERO
      FSHELL(I,J)=ZERO
 25   FIHELL(I,J)=ZERO
 30   FIHELL(I,I)=ONE
      DO 40 I=1,15
      DO 35 J=1,15
        GSPH(I,J)=ZERO
      GSHELL(I,J)=ZERO
 35   GIHELL(I,J)=ZERO
 40   GIHELL(I,I)=ONE
C
      do 50 i=1,21
      do 45 j=1,21
        hsph(i,j)=zero
      hshell(i,j)=zero
 45   hihell(i,j)=zero
 50   hihell(i,i)=one
      do 60 i=1,28
      do 55 j=1,28
       aisph(i,j)=zero
      aishell(i,j)=zero
 55   aiihell(i,j)=zero
 60   aiihell(i,i)=one
C
C     ----- GET SPHERICAL HARMONICS DEFINITIONS -----
C
      call sphmak(dbg,dd,ss,vv,tt,pp,ssph,psph,dsph,fsph,gsph,
     *            hsph,aisph)
C
CJI --------------------------------------------------------------------------
C   The complex formulas that appear below for rot for p,d,f,g are explained
C   using a specific example for a g element at the top of symhi.src.
C   The formulas for h,i are so complex that a PERL script was written to 
C   derive them and these are obtained via calls to gethrot,getirot that exist
C   in symhi.src. Note that there are 20,412 terms in rot(i)! If we want to
C   have k,L=7 or higher work in GAMESS we are going to have to figure out 
C   some sort of recursive derivation, but we leave this for another day.
CJI --------------------------------------------------------------------------
C
C     ----- P SPHERICAL HARMONICS -----
C
      IF(DBG) CALL SYMPRP(PSPH, 3, 3, 3)
C
C     ----- LOAD TRANSFORMATION OF FRAMES IN -ROT- -----
C
C     NEW X
      ROT(1,1)=U1
      ROT(2,1)=U2
      ROT(3,1)=U3
C     NEW Y
      ROT(1,2)=V1
      ROT(2,2)=V2
      ROT(3,2)=V3
C     NEW Z
      ROT(1,3)=W1
      ROT(2,3)=W2
      ROT(3,3)=W3
C
C     ----- EXPRESS SPHERICAL HARMONICS IN ABSOLUTE FRAME -----
C
      DO 80 I=1,3
      DO 80 J=1,3
      A=ZERO
      DO 70 K=1,3
      A=A+ROT(I,K)*PSPH(K,J)
  70  CONTINUE
        BUFF(I,J)=A
  80  PSHELL(I,J)=A
C
C     ----- DEFINE INVERSE TRANSFORMATION -----
C
      CALL LUDCMP(BUFF,28, 3,INDX,VWRK,D,IERR)
      DO I=1,3
         CALL LUBKSB(BUFF,28, 3,INDX,PIHELL(1,I))
      ENDDO
C
C     PRINT
C
      IF(DBG) CALL SYMPRP(PSHELL, 3, 3, 3)
      IF(DBG) CALL SYMPRP(PIHELL, 3, 3, 3)
C
C     ----- D SPHERICAL HARMONICS -----
C
      IF(DBG) CALL SYMPRP(DSPH, 6, 6, 6)
C
C     ----- LOAD TRANSFORMATION OF FRAMES IN -ROT- -----
C
C     NEW X2
      ROT(1,1)=U1*U1
      ROT(2,1)=U2*U2
      ROT(3,1)=U3*U3
      ROT(4,1)=U1*U2+U1*U2
      ROT(5,1)=U1*U3+U1*U3
      ROT(6,1)=U2*U3+U2*U3
C     NEW Y2
      ROT(1,2)=V1*V1
      ROT(2,2)=V2*V2
      ROT(3,2)=V3*V3
      ROT(4,2)=V1*V2+V1*V2
      ROT(5,2)=V1*V3+V1*V3
      ROT(6,2)=V2*V3+V2*V3
C     NEW Z2
      ROT(1,3)=W1*W1
      ROT(2,3)=W2*W2
      ROT(3,3)=W3*W3
      ROT(4,3)=W1*W2+W1*W2
      ROT(5,3)=W1*W3+W1*W3
      ROT(6,3)=W2*W3+W2*W3
C     NEW XY
      ROT(1,4)=U1*V1
      ROT(2,4)=U2*V2
      ROT(3,4)=U3*V3
      ROT(4,4)=U1*V2+U2*V1
      ROT(5,4)=U1*V3+U3*V1
      ROT(6,4)=U2*V3+U3*V2
C     NEW XZ
      ROT(1,5)=U1*W1
      ROT(2,5)=U2*W2
      ROT(3,5)=U3*W3
      ROT(4,5)=U1*W2+U2*W1
      ROT(5,5)=U1*W3+U3*W1
      ROT(6,5)=U2*W3+U3*W2
C     NEW YZ
      ROT(1,6)=V1*W1
      ROT(2,6)=V2*W2
      ROT(3,6)=V3*W3
      ROT(4,6)=V1*W2+V2*W1
      ROT(5,6)=V1*W3+V3*W1
      ROT(6,6)=V2*W3+V3*W2
C
C     ----- EXPRESS SPHERICAL HARMONICS IN ABSOLUTE FRAME -----
C
      DO 160 I=1,6
      DO 160 J=1,6
      A=ZERO
      DO 150 K=1,6
      A=A+ROT(I,K)*DSPH(K,J)
 150  CONTINUE
        BUFF(I,J)=A
 160  DSHELL(I,J)=A
C
C     ----- DEFINE INVERSE TRANSFORMATION -----
C
      CALL LUDCMP(BUFF,28, 6,INDX,VWRK,D,IERR)
      DO 180 I=1,6
      CALL LUBKSB(BUFF,28, 6,INDX,DIHELL(1,I))
 180  CONTINUE
C
C     PRINT
C
      IF(DBG) CALL SYMPRP(DSHELL,6,6,6)
      IF(DBG) CALL SYMPRP(DIHELL,6,6,6)
C
C     ----- F SPHERICAL HARMONICS -----
C
      IF(DBG) CALL SYMPRP(FSPH,10,10,10)
C
C     ----- LOAD TRANSFORMATION OF FRAMES IN -ROT- -----
C
C     NEW XXX
      ROT(1,1) =U1*U1*U1
      ROT(2,1) =U2*U2*U2
      ROT(3,1) =U3*U3*U3
      ROT(4,1) =U2*U1*U1+ U1*U2*U1+ U1*U1*U2
      ROT(5,1) =U3*U1*U1+ U1*U3*U1+ U1*U1*U3
      ROT(6,1) =U1*U2*U2+ U2*U1*U2+ U2*U2*U1
      ROT(7,1) =U3*U2*U2+ U2*U3*U2+ U2*U2*U3
      ROT(8,1) =U1*U3*U3+ U3*U1*U3+ U3*U3*U1
      ROT(9,1) =U2*U3*U3+ U3*U2*U3+ U3*U3*U2
      ROT(10,1)=U1*U2*U3+ U1*U3*U2+ U2*U1*U3+ U2*U3*U1+
     1            U3*U1*U2+ U3*U2*U1
C     NEW YYY
      ROT(1,2) =V1*V1*V1
      ROT(2,2) =V2*V2*V2
      ROT(3,2) =V3*V3*V3
      ROT(4,2) =V2*V1*V1+ V1*V2*V1+ V1*V1*V2
      ROT(5,2) =V3*V1*V1+ V1*V3*V1+ V1*V1*V3
      ROT(6,2) =V1*V2*V2+ V2*V1*V2+ V2*V2*V1
      ROT(7,2) =V3*V2*V2+ V2*V3*V2+ V2*V2*V3
      ROT(8,2) =V1*V3*V3+ V3*V1*V3+ V3*V3*V1
      ROT(9,2) =V2*V3*V3+ V3*V2*V3+ V3*V3*V2
      ROT(10,2)=V1*V2*V3+ V1*V3*V2+ V2*V1*V3+ V2*V3*V1+
     1            V3*V1*V2+ V3*V2*V1
C     NEW ZZZ
      ROT(1,3) =W1*W1*W1
      ROT(2,3) =W2*W2*W2
      ROT(3,3) =W3*W3*W3
      ROT(4,3) =W2*W1*W1+ W1*W2*W1+ W1*W1*W2
      ROT(5,3) =W3*W1*W1+ W1*W3*W1+ W1*W1*W3
      ROT(6,3) =W1*W2*W2+ W2*W1*W2+ W2*W2*W1
      ROT(7,3) =W3*W2*W2+ W2*W3*W2+ W2*W2*W3
      ROT(8,3) =W1*W3*W3+ W3*W1*W3+ W3*W3*W1
      ROT(9,3) =W2*W3*W3+ W3*W2*W3+ W3*W3*W2
      ROT(10,3)=W1*W2*W3+ W1*W3*W2+ W2*W1*W3+ W2*W3*W1+
     1            W3*W1*W2+ W3*W2*W1
C     NEW XXY
      ROT(1,4) =U1*U1*V1
      ROT(2,4) =U2*U2*V2
      ROT(3,4) =U3*U3*V3
      ROT(4,4) =U2*U1*V1+ U1*U2*V1+ U1*U1*V2
      ROT(5,4) =U3*U1*V1+ U1*U3*V1+ U1*U1*V3
      ROT(6,4) =U1*U2*V2+ U2*U1*V2+ U2*U2*V1
      ROT(7,4) =U3*U2*V2+ U2*U3*V2+ U2*U2*V3
      ROT(8,4) =U1*U3*V3+ U3*U1*V3+ U3*U3*V1
      ROT(9,4) =U2*U3*V3+ U3*U2*V3+ U3*U3*V2
      ROT(10,4)=U1*U2*V3+ U1*U3*V2+ U2*U1*V3+ U2*U3*V1+
     1            U3*U1*V2+ U3*U2*V1
C     NEW XXZ
      ROT(1,5) =U1*U1*W1
      ROT(2,5) =U2*U2*W2
      ROT(3,5) =U3*U3*W3
      ROT(4,5) =U2*U1*W1+ U1*U2*W1+ U1*U1*W2
      ROT(5,5) =U3*U1*W1+ U1*U3*W1+ U1*U1*W3
      ROT(6,5) =U1*U2*W2+ U2*U1*W2+ U2*U2*W1
      ROT(7,5) =U3*U2*W2+ U2*U3*W2+ U2*U2*W3
      ROT(8,5) =U1*U3*W3+ U3*U1*W3+ U3*U3*W1
      ROT(9,5) =U2*U3*W3+ U3*U2*W3+ U3*U3*W2
      ROT(10,5)=U1*U2*W3+ U1*U3*W2+ U2*U1*W3+ U2*U3*W1+
     1            U3*U1*W2+ U3*U2*W1
C     NEW YYX
      ROT(1,6) =V1*V1*U1
      ROT(2,6) =V2*V2*U2
      ROT(3,6) =V3*V3*U3
      ROT(4,6) =V2*V1*U1+ V1*V2*U1+ V1*V1*U2
      ROT(5,6) =V3*V1*U1+ V1*V3*U1+ V1*V1*U3
      ROT(6,6) =V1*V2*U2+ V2*V1*U2+ V2*V2*U1
      ROT(7,6) =V3*V2*U2+ V2*V3*U2+ V2*V2*U3
      ROT(8,6) =V1*V3*U3+ V3*V1*U3+ V3*V3*U1
      ROT(9,6) =V2*V3*U3+ V3*V2*U3+ V3*V3*U2
      ROT(10,6)=V1*V2*U3+ V1*V3*U2+ V2*V1*U3+ V2*V3*U1+
     1            V3*V1*U2+ V3*V2*U1
C     NEW YYZ
      ROT(1,7) =V1*V1*W1
      ROT(2,7) =V2*V2*W2
      ROT(3,7) =V3*V3*W3
      ROT(4,7) =V2*V1*W1+ V1*V2*W1+ V1*V1*W2
      ROT(5,7) =V3*V1*W1+ V1*V3*W1+ V1*V1*W3
      ROT(6,7) =V1*V2*W2+ V2*V1*W2+ V2*V2*W1
      ROT(7,7) =V3*V2*W2+ V2*V3*W2+ V2*V2*W3
      ROT(8,7) =V1*V3*W3+ V3*V1*W3+ V3*V3*W1
      ROT(9,7) =V2*V3*W3+ V3*V2*W3+ V3*V3*W2
      ROT(10,7)=V1*V2*W3+ V1*V3*W2+ V2*V1*W3+ V2*V3*W1+
     1            V3*V1*W2+ V3*V2*W1
C     NEW ZZX
      ROT(1,8) =W1*W1*U1
      ROT(2,8) =W2*W2*U2
      ROT(3,8) =W3*W3*U3
      ROT(4,8) =W2*W1*U1+ W1*W2*U1+ W1*W1*U2
      ROT(5,8) =W3*W1*U1+ W1*W3*U1+ W1*W1*U3
      ROT(6,8) =W1*W2*U2+ W2*W1*U2+ W2*W2*U1
      ROT(7,8) =W3*W2*U2+ W2*W3*U2+ W2*W2*U3
      ROT(8,8) =W1*W3*U3+ W3*W1*U3+ W3*W3*U1
      ROT(9,8) =W2*W3*U3+ W3*W2*U3+ W3*W3*U2
      ROT(10,8)=W1*W2*U3+ W1*W3*U2+ W2*W1*U3+ W2*W3*U1+
     1            W3*W1*U2+ W3*W2*U1
C     NEW ZZY
      ROT(1,9) =W1*W1*V1
      ROT(2,9) =W2*W2*V2
      ROT(3,9) =W3*W3*V3
      ROT(4,9) =W2*W1*V1+ W1*W2*V1+ W1*W1*V2
      ROT(5,9) =W3*W1*V1+ W1*W3*V1+ W1*W1*V3
      ROT(6,9) =W1*W2*V2+ W2*W1*V2+ W2*W2*V1
      ROT(7,9) =W3*W2*V2+ W2*W3*V2+ W2*W2*V3
      ROT(8,9) =W1*W3*V3+ W3*W1*V3+ W3*W3*V1
      ROT(9,9) =W2*W3*V3+ W3*W2*V3+ W3*W3*V2
      ROT(10,9)=W1*W2*V3+ W1*W3*V2+ W2*W1*V3+ W2*W3*V1+
     1            W3*W1*V2+ W3*W2*V1
C     NEW XYZ
      ROT(1,10) =U1*V1*W1
      ROT(2,10) =U2*V2*W2
      ROT(3,10) =U3*V3*W3
      ROT(4,10) =U2*V1*W1+ U1*V2*W1+ U1*V1*W2
      ROT(5,10) =U3*V1*W1+ U1*V3*W1+ U1*V1*W3
      ROT(6,10) =U1*V2*W2+ U2*V1*W2+ U2*V2*W1
      ROT(7,10) =U3*V2*W2+ U2*V3*W2+ U2*V2*W3
      ROT(8,10) =U1*V3*W3+ U3*V1*W3+ U3*V3*W1
      ROT(9,10) =U2*V3*W3+ U3*V2*W3+ U3*V3*W2
      ROT(10,10)=U1*V2*W3+ U1*V3*W2+ U2*V1*W3+ U2*V3*W1+
     1             U3*V1*W2+ U3*V2*W1
C
C     ----- EXPRESS SPHERICAL HARMONICS IN ABSOLUTE FRAME -----
C
      DO 260 I=1,10
      DO 260 J=1,10
      A=ZERO
      DO 250 K=1,10
      A=A+ROT(I,K)*FSPH(K,J)
 250  CONTINUE
        BUFF(I,J)=A
 260  FSHELL(I,J)=A
C
C     ----- DEFINE INVERSE TRANSFORMATION -----
C
      CALL LUDCMP(BUFF,28,10,INDX,VWRK,D,IERR)
      DO 280 I=1,10
      CALL LUBKSB(BUFF,28,10,INDX,FIHELL(1,I))
 280  CONTINUE
C
C     PRINT
C
      IF(DBG) CALL SYMPRP(FSHELL,10,10,10)
      IF(DBG) CALL SYMPRP(FIHELL,10,10,10)
C
C     ----- G SPHERICAL HARMONICS -----
C
      IF(DBG) CALL SYMPRP(GSPH,15,15,15)
C
C     ----- LOAD TRANSFORMATION OF FRAMES IN -ROT- -----
C
C     NEW XXXX
      ROT(1,1)  =U1*U1*U1*U1
      ROT(2,1)  =U2*U2*U2*U2
      ROT(3,1)  =U3*U3*U3*U3
      ROT(4,1)  =U2*U1*U1*U1+ U1*U2*U1*U1+ U1*U1*U2*U1+ U1*U1*U1*U2
      ROT(5,1)  =U3*U1*U1*U1+ U1*U3*U1*U1+ U1*U1*U3*U1+ U1*U1*U1*U3
      ROT(6,1)  =U1*U2*U2*U2+ U2*U1*U2*U2+ U2*U2*U1*U2+ U2*U2*U2*U1
      ROT(7,1)  =U3*U2*U2*U2+ U2*U3*U2*U2+ U2*U2*U3*U2+ U2*U2*U2*U3
      ROT(8,1)  =U1*U3*U3*U3+ U3*U1*U3*U3+ U3*U3*U1*U3+ U3*U3*U3*U1
      ROT(9,1)  =U2*U3*U3*U3+ U3*U2*U3*U3+ U3*U3*U2*U3+ U3*U3*U3*U2
      ROT(10,1) =U1*U1*U2*U2+ U2*U2*U1*U1+ U1*U2*U1*U2+ U1*U2*U2*U1
     1           + U2*U1*U1*U2+ U2*U1*U2*U1
      ROT(11,1) =U1*U1*U3*U3+ U3*U3*U1*U1+ U1*U3*U1*U3+ U1*U3*U3*U1
     1           + U3*U1*U1*U3+ U3*U1*U3*U1
      ROT(12,1) =U2*U2*U3*U3+ U3*U3*U2*U2+ U2*U3*U2*U3+ U2*U3*U3*U2
     1           + U3*U2*U2*U3+ U3*U2*U3*U2
      ROT(13,1) =U1*U1*U2*U3+ U1*U1*U3*U2+ U1*U2*U1*U3+ U1*U3*U1*U2
     1           + U1*U2*U3*U1+ U1*U3*U2*U1+ U2*U1*U1*U3+ U3*U1*U1*U2
     2           + U2*U1*U3*U1+ U3*U1*U2*U1+ U2*U3*U1*U1+ U3*U2*U1*U1
      ROT(14,1) =U2*U2*U1*U3+ U2*U2*U3*U1+ U2*U1*U2*U3+ U2*U3*U2*U1
     1           + U2*U1*U3*U2+ U2*U3*U1*U2+ U1*U2*U2*U3+ U3*U2*U2*U1
     2           + U1*U2*U3*U2+ U3*U2*U1*U2+ U1*U3*U2*U2+ U3*U1*U2*U2
      ROT(15,1) =U3*U3*U1*U2+ U3*U3*U2*U1+ U3*U1*U3*U2+ U3*U2*U3*U1
     1           + U3*U1*U2*U3+ U3*U2*U1*U3+ U1*U3*U3*U2+ U2*U3*U3*U1
     2           + U1*U3*U2*U3+ U2*U3*U1*U3+ U1*U2*U3*U3+ U2*U1*U3*U3
C     NEW YYYY
      ROT(1,2)  =V1*V1*V1*V1
      ROT(2,2)  =V2*V2*V2*V2
      ROT(3,2)  =V3*V3*V3*V3
      ROT(4,2)  =V2*V1*V1*V1+ V1*V2*V1*V1+ V1*V1*V2*V1+ V1*V1*V1*V2
      ROT(5,2)  =V3*V1*V1*V1+ V1*V3*V1*V1+ V1*V1*V3*V1+ V1*V1*V1*V3
      ROT(6,2)  =V1*V2*V2*V2+ V2*V1*V2*V2+ V2*V2*V1*V2+ V2*V2*V2*V1
      ROT(7,2)  =V3*V2*V2*V2+ V2*V3*V2*V2+ V2*V2*V3*V2+ V2*V2*V2*V3
      ROT(8,2)  =V1*V3*V3*V3+ V3*V1*V3*V3+ V3*V3*V1*V3+ V3*V3*V3*V1
      ROT(9,2)  =V2*V3*V3*V3+ V3*V2*V3*V3+ V3*V3*V2*V3+ V3*V3*V3*V2
      ROT(10,2) =V1*V1*V2*V2+ V2*V2*V1*V1+ V1*V2*V1*V2+ V1*V2*V2*V1
     1           + V2*V1*V1*V2+ V2*V1*V2*V1
      ROT(11,2) =V1*V1*V3*V3+ V3*V3*V1*V1+ V1*V3*V1*V3+ V1*V3*V3*V1
     1           + V3*V1*V1*V3+ V3*V1*V3*V1
      ROT(12,2) =V2*V2*V3*V3+ V3*V3*V2*V2+ V2*V3*V2*V3+ V2*V3*V3*V2
     1           + V3*V2*V2*V3+ V3*V2*V3*V2
      ROT(13,2) =V1*V1*V2*V3+ V1*V1*V3*V2+ V1*V2*V1*V3+ V1*V3*V1*V2
     1           + V1*V2*V3*V1+ V1*V3*V2*V1+ V2*V1*V1*V3+ V3*V1*V1*V2
     2           + V2*V1*V3*V1+ V3*V1*V2*V1+ V2*V3*V1*V1+ V3*V2*V1*V1
      ROT(14,2) =V2*V2*V1*V3+ V2*V2*V3*V1+ V2*V1*V2*V3+ V2*V3*V2*V1
     1           + V2*V1*V3*V2+ V2*V3*V1*V2+ V1*V2*V2*V3+ V3*V2*V2*V1
     2           + V1*V2*V3*V2+ V3*V2*V1*V2+ V1*V3*V2*V2+ V3*V1*V2*V2
      ROT(15,2) =V3*V3*V1*V2+ V3*V3*V2*V1+ V3*V1*V3*V2+ V3*V2*V3*V1
     1           + V3*V1*V2*V3+ V3*V2*V1*V3+ V1*V3*V3*V2+ V2*V3*V3*V1
     2           + V1*V3*V2*V3+ V2*V3*V1*V3+ V1*V2*V3*V3+ V2*V1*V3*V3
C     NEW ZZZZ
      ROT(1,3)  =W1*W1*W1*W1
      ROT(2,3)  =W2*W2*W2*W2
      ROT(3,3)  =W3*W3*W3*W3
      ROT(4,3)  =W2*W1*W1*W1+ W1*W2*W1*W1+ W1*W1*W2*W1+ W1*W1*W1*W2
      ROT(5,3)  =W3*W1*W1*W1+ W1*W3*W1*W1+ W1*W1*W3*W1+ W1*W1*W1*W3
      ROT(6,3)  =W1*W2*W2*W2+ W2*W1*W2*W2+ W2*W2*W1*W2+ W2*W2*W2*W1
      ROT(7,3)  =W3*W2*W2*W2+ W2*W3*W2*W2+ W2*W2*W3*W2+ W2*W2*W2*W3
      ROT(8,3)  =W1*W3*W3*W3+ W3*W1*W3*W3+ W3*W3*W1*W3+ W3*W3*W3*W1
      ROT(9,3)  =W2*W3*W3*W3+ W3*W2*W3*W3+ W3*W3*W2*W3+ W3*W3*W3*W2
      ROT(10,3) =W1*W1*W2*W2+ W2*W2*W1*W1+ W1*W2*W1*W2+ W1*W2*W2*W1
     1           + W2*W1*W1*W2+ W2*W1*W2*W1
      ROT(11,3) =W1*W1*W3*W3+ W3*W3*W1*W1+ W1*W3*W1*W3+ W1*W3*W3*W1
     1           + W3*W1*W1*W3+ W3*W1*W3*W1
      ROT(12,3) =W2*W2*W3*W3+ W3*W3*W2*W2+ W2*W3*W2*W3+ W2*W3*W3*W2
     1           + W3*W2*W2*W3+ W3*W2*W3*W2
      ROT(13,3) =W1*W1*W2*W3+ W1*W1*W3*W2+ W1*W2*W1*W3+ W1*W3*W1*W2
     1           + W1*W2*W3*W1+ W1*W3*W2*W1+ W2*W1*W1*W3+ W3*W1*W1*W2
     2           + W2*W1*W3*W1+ W3*W1*W2*W1+ W2*W3*W1*W1+ W3*W2*W1*W1
      ROT(14,3) =W2*W2*W1*W3+ W2*W2*W3*W1+ W2*W1*W2*W3+ W2*W3*W2*W1
     1           + W2*W1*W3*W2+ W2*W3*W1*W2+ W1*W2*W2*W3+ W3*W2*W2*W1
     2           + W1*W2*W3*W2+ W3*W2*W1*W2+ W1*W3*W2*W2+ W3*W1*W2*W2
      ROT(15,3) =W3*W3*W1*W2+ W3*W3*W2*W1+ W3*W1*W3*W2+ W3*W2*W3*W1
     1           + W3*W1*W2*W3+ W3*W2*W1*W3+ W1*W3*W3*W2+ W2*W3*W3*W1
     2           + W1*W3*W2*W3+ W2*W3*W1*W3+ W1*W2*W3*W3+ W2*W1*W3*W3
C     NEW XXXY
      ROT(1,4)  =U1*U1*U1*V1
      ROT(2,4)  =U2*U2*U2*V2
      ROT(3,4)  =U3*U3*U3*V3
      ROT(4,4)  =U2*U1*U1*V1+ U1*U2*U1*V1+ U1*U1*U2*V1+ U1*U1*U1*V2
      ROT(5,4)  =U3*U1*U1*V1+ U1*U3*U1*V1+ U1*U1*U3*V1+ U1*U1*U1*V3
      ROT(6,4)  =U1*U2*U2*V2+ U2*U1*U2*V2+ U2*U2*U1*V2+ U2*U2*U2*V1
      ROT(7,4)  =U3*U2*U2*V2+ U2*U3*U2*V2+ U2*U2*U3*V2+ U2*U2*U2*V3
      ROT(8,4)  =U1*U3*U3*V3+ U3*U1*U3*V3+ U3*U3*U1*V3+ U3*U3*U3*V1
      ROT(9,4)  =U2*U3*U3*V3+ U3*U2*U3*V3+ U3*U3*U2*V3+ U3*U3*U3*V2
      ROT(10,4) =U1*U1*U2*V2+ U2*U2*U1*V1+ U1*U2*U1*V2+ U1*U2*U2*V1
     1           + U2*U1*U1*V2+ U2*U1*U2*V1
      ROT(11,4) =U1*U1*U3*V3+ U3*U3*U1*V1+ U1*U3*U1*V3+ U1*U3*U3*V1
     1           + U3*U1*U1*V3+ U3*U1*U3*V1
      ROT(12,4) =U2*U2*U3*V3+ U3*U3*U2*V2+ U2*U3*U2*V3+ U2*U3*U3*V2
     1           + U3*U2*U2*V3+ U3*U2*U3*V2
      ROT(13,4) =U1*U1*U2*V3+ U1*U1*U3*V2+ U1*U2*U1*V3+ U1*U3*U1*V2
     1           + U1*U2*U3*V1+ U1*U3*U2*V1+ U2*U1*U1*V3+ U3*U1*U1*V2
     2           + U2*U1*U3*V1+ U3*U1*U2*V1+ U2*U3*U1*V1+ U3*U2*U1*V1
      ROT(14,4) =U2*U2*U1*V3+ U2*U2*U3*V1+ U2*U1*U2*V3+ U2*U3*U2*V1
     1           + U2*U1*U3*V2+ U2*U3*U1*V2+ U1*U2*U2*V3+ U3*U2*U2*V1
     2           + U1*U2*U3*V2+ U3*U2*U1*V2+ U1*U3*U2*V2+ U3*U1*U2*V2
      ROT(15,4) =U3*U3*U1*V2+ U3*U3*U2*V1+ U3*U1*U3*V2+ U3*U2*U3*V1
     1           + U3*U1*U2*V3+ U3*U2*U1*V3+ U1*U3*U3*V2+ U2*U3*U3*V1
     2           + U1*U3*U2*V3+ U2*U3*U1*V3+ U1*U2*U3*V3+ U2*U1*U3*V3
C     NEW XXXZ
      ROT(1,5)  =U1*U1*U1*W1
      ROT(2,5)  =U2*U2*U2*W2
      ROT(3,5)  =U3*U3*U3*W3
      ROT(4,5)  =U2*U1*U1*W1+ U1*U2*U1*W1+ U1*U1*U2*W1+ U1*U1*U1*W2
      ROT(5,5)  =U3*U1*U1*W1+ U1*U3*U1*W1+ U1*U1*U3*W1+ U1*U1*U1*W3
      ROT(6,5)  =U1*U2*U2*W2+ U2*U1*U2*W2+ U2*U2*U1*W2+ U2*U2*U2*W1
      ROT(7,5)  =U3*U2*U2*W2+ U2*U3*U2*W2+ U2*U2*U3*W2+ U2*U2*U2*W3
      ROT(8,5)  =U1*U3*U3*W3+ U3*U1*U3*W3+ U3*U3*U1*W3+ U3*U3*U3*W1
      ROT(9,5)  =U2*U3*U3*W3+ U3*U2*U3*W3+ U3*U3*U2*W3+ U3*U3*U3*W2
      ROT(10,5) =U1*U1*U2*W2+ U2*U2*U1*W1+ U1*U2*U1*W2+ U1*U2*U2*W1
     1           + U2*U1*U1*W2+ U2*U1*U2*W1
      ROT(11,5) =U1*U1*U3*W3+ U3*U3*U1*W1+ U1*U3*U1*W3+ U1*U3*U3*W1
     1           + U3*U1*U1*W3+ U3*U1*U3*W1
      ROT(12,5) =U2*U2*U3*W3+ U3*U3*U2*W2+ U2*U3*U2*W3+ U2*U3*U3*W2
     1           + U3*U2*U2*W3+ U3*U2*U3*W2
      ROT(13,5) =U1*U1*U2*W3+ U1*U1*U3*W2+ U1*U2*U1*W3+ U1*U3*U1*W2
     1           + U1*U2*U3*W1+ U1*U3*U2*W1+ U2*U1*U1*W3+ U3*U1*U1*W2
     2           + U2*U1*U3*W1+ U3*U1*U2*W1+ U2*U3*U1*W1+ U3*U2*U1*W1
      ROT(14,5) =U2*U2*U1*W3+ U2*U2*U3*W1+ U2*U1*U2*W3+ U2*U3*U2*W1
     1           + U2*U1*U3*W2+ U2*U3*U1*W2+ U1*U2*U2*W3+ U3*U2*U2*W1
     2           + U1*U2*U3*W2+ U3*U2*U1*W2+ U1*U3*U2*W2+ U3*U1*U2*W2
      ROT(15,5) =U3*U3*U1*W2+ U3*U3*U2*W1+ U3*U1*U3*W2+ U3*U2*U3*W1
     1           + U3*U1*U2*W3+ U3*U2*U1*W3+ U1*U3*U3*W2+ U2*U3*U3*W1
     2           + U1*U3*U2*W3+ U2*U3*U1*W3+ U1*U2*U3*W3+ U2*U1*U3*W3
C     NEW YYYX
      ROT(1,6)  =V1*V1*V1*U1
      ROT(2,6)  =V2*V2*V2*U2
      ROT(3,6)  =V3*V3*V3*U3
      ROT(4,6)  =V2*V1*V1*U1+ V1*V2*V1*U1+ V1*V1*V2*U1+ V1*V1*V1*U2
      ROT(5,6)  =V3*V1*V1*U1+ V1*V3*V1*U1+ V1*V1*V3*U1+ V1*V1*V1*U3
      ROT(6,6)  =V1*V2*V2*U2+ V2*V1*V2*U2+ V2*V2*V1*U2+ V2*V2*V2*U1
      ROT(7,6)  =V3*V2*V2*U2+ V2*V3*V2*U2+ V2*V2*V3*U2+ V2*V2*V2*U3
      ROT(8,6)  =V1*V3*V3*U3+ V3*V1*V3*U3+ V3*V3*V1*U3+ V3*V3*V3*U1
      ROT(9,6)  =V2*V3*V3*U3+ V3*V2*V3*U3+ V3*V3*V2*U3+ V3*V3*V3*U2
      ROT(10,6) =V1*V1*V2*U2+ V2*V2*V1*U1+ V1*V2*V1*U2+ V1*V2*V2*U1
     1           + V2*V1*V1*U2+ V2*V1*V2*U1
      ROT(11,6) =V1*V1*V3*U3+ V3*V3*V1*U1+ V1*V3*V1*U3+ V1*V3*V3*U1
     1           + V3*V1*V1*U3+ V3*V1*V3*U1
      ROT(12,6) =V2*V2*V3*U3+ V3*V3*V2*U2+ V2*V3*V2*U3+ V2*V3*V3*U2
     1           + V3*V2*V2*U3+ V3*V2*V3*U2
      ROT(13,6) =V1*V1*V2*U3+ V1*V1*V3*U2+ V1*V2*V1*U3+ V1*V3*V1*U2
     1           + V1*V2*V3*U1+ V1*V3*V2*U1+ V2*V1*V1*U3+ V3*V1*V1*U2
     2           + V2*V1*V3*U1+ V3*V1*V2*U1+ V2*V3*V1*U1+ V3*V2*V1*U1
      ROT(14,6) =V2*V2*V1*U3+ V2*V2*V3*U1+ V2*V1*V2*U3+ V2*V3*V2*U1
     1           + V2*V1*V3*U2+ V2*V3*V1*U1+ V1*V2*V2*U3+ V3*V2*V2*U1
     2           + V1*V2*V3*U2+ V3*V2*V1*U2+ V1*V3*V2*U2+ V3*V1*V2*U2
      ROT(15,6) =V3*V3*V1*U2+ V3*V3*V2*U1+ V3*V1*V3*U2+ V3*V2*V3*U1
     1           + V3*V1*V2*U3+ V3*V2*V1*U3+ V1*V3*V3*U2+ V2*V3*V3*U1
     2           + V1*V3*V2*U3+ V2*V3*V1*U3+ V1*V2*V3*U3+ V2*V1*V3*U3
C     NEW YYYZ
      ROT(1,7)  =V1*V1*V1*W1
      ROT(2,7)  =V2*V2*V2*W2
      ROT(3,7)  =V3*V3*V3*W3
      ROT(4,7)  =V2*V1*V1*W1+ V1*V2*V1*W1+ V1*V1*V2*W1+ V1*V1*V1*W2
      ROT(5,7)  =V3*V1*V1*W1+ V1*V3*V1*W1+ V1*V1*V3*W1+ V1*V1*V1*W3
      ROT(6,7)  =V1*V2*V2*W2+ V2*V1*V2*W2+ V2*V2*V1*W2+ V2*V2*V2*W1
      ROT(7,7)  =V3*V2*V2*W2+ V2*V3*V2*W2+ V2*V2*V3*W2+ V2*V2*V2*W3
      ROT(8,7)  =V1*V3*V3*W3+ V3*V1*V3*W3+ V3*V3*V1*W3+ V3*V3*V3*W1
      ROT(9,7)  =V2*V3*V3*W3+ V3*V2*V3*W3+ V3*V3*V2*W3+ V3*V3*V3*W2
      ROT(10,7) =V1*V1*V2*W2+ V2*V2*V1*W1+ V1*V2*V1*W2+ V1*V2*V2*W1
     1           + V2*V1*V1*W2+ V2*V1*V2*W1
      ROT(11,7) =V1*V1*V3*W3+ V3*V3*V1*W1+ V1*V3*V1*W3+ V1*V3*V3*W1
     1           + V3*V1*V1*W3+ V3*V1*V3*W1
      ROT(12,7) =V2*V2*V3*W3+ V3*V3*V2*W2+ V2*V3*V2*W3+ V2*V3*V3*W2
     1           + V3*V2*V2*W3+ V3*V2*V3*W2
      ROT(13,7) =V1*V1*V2*W3+ V1*V1*V3*W2+ V1*V2*V1*W3+ V1*V3*V1*W2
     1           + V1*V2*V3*W1+ V1*V3*V2*W1+ V2*V1*V1*W3+ V3*V1*V1*W2
     2           + V2*V1*V3*W1+ V3*V1*V2*W1+ V2*V3*V1*W1+ V3*V2*V1*W1
      ROT(14,7) =V2*V2*V1*W3+ V2*V2*V3*W1+ V2*V1*V2*W3+ V2*V3*V2*W1
     1           + V2*V1*V3*W2+ V2*V3*V1*W1+ V1*V2*V2*W3+ V3*V2*V2*W1
     2           + V1*V2*V3*W2+ V3*V2*V1*W2+ V1*V3*V2*W2+ V3*V1*V2*W2
      ROT(15,7) =V3*V3*V1*W2+ V3*V3*V2*W1+ V3*V1*V3*W2+ V3*V2*V3*W1
     1           + V3*V1*V2*W3+ V3*V2*V1*W3+ V1*V3*V3*W2+ V2*V3*V3*W1
     2           + V1*V3*V2*W3+ V2*V3*V1*W3+ V1*V2*V3*W3+ V2*V1*V3*W3
C     NEW ZZZX
      ROT(1,8)  =W1*W1*W1*U1
      ROT(2,8)  =W2*W2*W2*U2
      ROT(3,8)  =W3*W3*W3*U3
      ROT(4,8)  =W2*W1*W1*U1+ W1*W2*W1*U1+ W1*W1*W2*U1+ W1*W1*W1*U2
      ROT(5,8)  =W3*W1*W1*U1+ W1*W3*W1*U1+ W1*W1*W3*U1+ W1*W1*W1*U3
      ROT(6,8)  =W1*W2*W2*U2+ W2*W1*W2*U2+ W2*W2*W1*U2+ W2*W2*W2*U1
      ROT(7,8)  =W3*W2*W2*U2+ W2*W3*W2*U2+ W2*W2*W3*U2+ W2*W2*W2*U3
      ROT(8,8)  =W1*W3*W3*U3+ W3*W1*W3*U3+ W3*W3*W1*U3+ W3*W3*W3*U1
      ROT(9,8)  =W2*W3*W3*U3+ W3*W2*W3*U3+ W3*W3*W2*U3+ W3*W3*W3*U2
      ROT(10,8) =W1*W1*W2*U2+ W2*W2*W1*U1+ W1*W2*W1*U2+ W1*W2*W2*U1
     1           + W2*W1*W1*U2+ W2*W1*W2*U1
      ROT(11,8) =W1*W1*W3*U3+ W3*W3*W1*U1+ W1*W3*W1*U3+ W1*W3*W3*U1
     1           + W3*W1*W1*U3+ W3*W1*W3*U1
      ROT(12,8) =W2*W2*W3*U3+ W3*W3*W2*U2+ W2*W3*W2*U3+ W2*W3*W3*U2
     1           + W3*W2*W2*U3+ W3*W2*W3*U2
      ROT(13,8) =W1*W1*W2*U3+ W1*W1*W3*U2+ W1*W2*W1*U3+ W1*W3*W1*U2
     1           + W1*W2*W3*U1+ W1*W3*W2*U1+ W2*W1*W1*U3+ W3*W1*W1*U2
     2           + W2*W1*W3*U1+ W3*W1*W2*U1+ W2*W3*W1*U1+ W3*W2*W1*U1
      ROT(14,8) =W2*W2*W1*U3+ W2*W2*W3*U1+ W2*W1*W2*U3+ W2*W3*W2*U1
     1           + W2*W1*W3*U2+ W2*W3*W1*U2+ W1*W2*W2*U3+ W3*W2*W2*U1
     2           + W1*W2*W3*U2+ W3*W2*W1*U2+ W1*W3*W2*U2+ W3*W1*W2*U2
      ROT(15,8) =W3*W3*W1*U2+ W3*W3*W2*U1+ W3*W1*W3*U2+ W3*W2*W3*U1
     1           + W3*W1*W2*U3+ W3*W2*W1*U3+ W1*W3*W3*U2+ W2*W3*W3*U1
     2           + W1*W3*W2*U3+ W2*W3*W1*U3+ W1*W2*W3*U3+ W2*W1*W3*U3
C     NEW ZZZY
      ROT(1,9)  =W1*W1*W1*V1
      ROT(2,9)  =W2*W2*W2*V2
      ROT(3,9)  =W3*W3*W3*V3
      ROT(4,9)  =W2*W1*W1*V1+ W1*W2*W1*V1+ W1*W1*W2*V1+ W1*W1*W1*V2
      ROT(5,9)  =W3*W1*W1*V1+ W1*W3*W1*V1+ W1*W1*W3*V1+ W1*W1*W1*V3
      ROT(6,9)  =W1*W2*W2*V2+ W2*W1*W2*V2+ W2*W2*W1*V2+ W2*W2*W2*V1
      ROT(7,9)  =W3*W2*W2*V2+ W2*W3*W2*V2+ W2*W2*W3*V2+ W2*W2*W2*V3
      ROT(8,9)  =W1*W3*W3*V3+ W3*W1*W3*V3+ W3*W3*W1*V3+ W3*W3*W3*V1
      ROT(9,9)  =W2*W3*W3*V3+ W3*W2*W3*V3+ W3*W3*W2*V3+ W3*W3*W3*V2
      ROT(10,9) =W1*W1*W2*V2+ W2*W2*W1*V1+ W1*W2*W1*V2+ W1*W2*W2*V1
     1           + W2*W1*W1*V2+ W2*W1*W2*V1
      ROT(11,9) =W1*W1*W3*V3+ W3*W3*W1*V1+ W1*W3*W1*V3+ W1*W3*W3*V1
     1           + W3*W1*W1*V3+ W3*W1*W3*V1
      ROT(12,9) =W2*W2*W3*V3+ W3*W3*W2*V2+ W2*W3*W2*V3+ W2*W3*W3*V2
     1           + W3*W2*W2*V3+ W3*W2*W3*V2
      ROT(13,9) =W1*W1*W2*V3+ W1*W1*W3*V2+ W1*W2*W1*V3+ W1*W3*W1*V2
     1           + W1*W2*W3*V1+ W1*W3*W2*V1+ W2*W1*W1*V3+ W3*W1*W1*V2
     2           + W2*W1*W3*V1+ W3*W1*W2*V1+ W2*W3*W1*V1+ W3*W2*W1*V1
      ROT(14,9) =W2*W2*W1*V3+ W2*W2*W3*V1+ W2*W1*W2*V3+ W2*W3*W2*V1
     1           + W2*W1*W3*V2+ W2*W3*W1*V2+ W1*W2*W2*V3+ W3*W2*W2*V1
     2           + W1*W2*W3*V2+ W3*W2*W1*V2+ W1*W3*W2*V2+ W3*W1*W2*V2
      ROT(15,9) =W3*W3*W1*V2+ W3*W3*W2*V1+ W3*W1*W3*V2+ W3*W2*W3*V1
     1           + W3*W1*W2*V3+ W3*W2*W1*V3+ W1*W3*W3*V2+ W2*W3*W3*V1
     2           + W1*W3*W2*V3+ W2*W3*W1*V3+ W1*W2*W3*V3+ W2*W1*W3*V3
C     NEW XXYY
      ROT(1,10) =U1*U1*V1*V1
      ROT(2,10) =U2*U2*V2*V2
      ROT(3,10) =U3*U3*V3*V3
      ROT(4,10) =U2*U1*V1*V1+ U1*U2*V1*V1+ U1*U1*V2*V1+ U1*U1*V1*V2
      ROT(5,10) =U3*U1*V1*V1+ U1*U3*V1*V1+ U1*U1*V3*V1+ U1*U1*V1*V3
      ROT(6,10) =U1*U2*V2*V2+ U2*U1*V2*V2+ U2*U2*V1*V2+ U2*U2*V2*V1
      ROT(7,10) =U3*U2*V2*V2+ U2*U3*V2*V2+ U2*U2*V3*V2+ U2*U2*V2*V3
      ROT(8,10) =U1*U3*V3*V3+ U3*U1*V3*V3+ U3*U3*V1*V3+ U3*U3*V3*V1
      ROT(9,10) =U2*U3*V3*V3+ U3*U2*V3*V3+ U3*U3*V2*V3+ U3*U3*V3*V2
      ROT(10,10)=U1*U1*V2*V2+ U2*U2*V1*V1+ U1*U2*V1*V2+ U1*U2*V2*V1
     1           + U2*U1*V1*V2+ U2*U1*V2*V1
      ROT(11,10)=U1*U1*V3*V3+ U3*U3*V1*V1+ U1*U3*V1*V3+ U1*U3*V3*V1
     1           + U3*U1*V1*V3+ U3*U1*V3*V1
      ROT(12,10)=U2*U2*V3*V3+ U3*U3*V2*V2+ U2*U3*V2*V3+ U2*U3*V3*V2
     1           + U3*U2*V2*V3+ U3*U2*V3*V2
      ROT(13,10)=U1*U1*V2*V3+ U1*U1*V3*V2+ U1*U2*V1*V3+ U1*U3*V1*V2
     1           + U1*U2*V3*V1+ U1*U3*V2*V1+ U2*U1*V1*V3+ U3*U1*V1*V2
     2           + U2*U1*V3*V1+ U3*U1*V2*V1+ U2*U3*V1*V1+ U3*U2*V1*V1
      ROT(14,10)=U2*U2*V1*V3+ U2*U2*V3*V1+ U2*U1*V2*V3+ U2*U3*V2*V1
     1           + U2*U1*V3*V2+ U2*U3*V1*V2+ U1*U2*V2*V3+ U3*U2*V2*V1
     2           + U1*U2*V3*V2+ U3*U2*V1*V2+ U1*U3*V2*V2+ U3*U1*V2*V2
      ROT(15,10)=U3*U3*V1*V2+ U3*U3*V2*V1+ U3*U1*V3*V2+ U3*U2*V3*V1
     1           + U3*U1*V2*V3+ U3*U2*V1*V3+ U1*U3*V3*V2+ U2*U3*V3*V1
     2           + U1*U3*V2*V3+ U2*U3*V1*V3+ U1*U2*V3*V3+ U2*U1*V3*V3
C     NEW XXZZ
      ROT(1,11) =U1*U1*W1*W1
      ROT(2,11) =U2*U2*W2*W2
      ROT(3,11) =U3*U3*W3*W3
      ROT(4,11) =U2*U1*W1*W1+ U1*U2*W1*W1+ U1*U1*W2*W1+ U1*U1*W1*W2
      ROT(5,11) =U3*U1*W1*W1+ U1*U3*W1*W1+ U1*U1*W3*W1+ U1*U1*W1*W3
      ROT(6,11) =U1*U2*W2*W2+ U2*U1*W2*W2+ U2*U2*W1*W2+ U2*U2*W2*W1
      ROT(7,11) =U3*U2*W2*W2+ U2*U3*W2*W2+ U2*U2*W3*W2+ U2*U2*W2*W3
      ROT(8,11) =U1*U3*W3*W3+ U3*U1*W3*W3+ U3*U3*W1*W3+ U3*U3*W3*W1
      ROT(9,11) =U2*U3*W3*W3+ U3*U2*W3*W3+ U3*U3*W2*W3+ U3*U3*W3*W2
      ROT(10,11)=U1*U1*W2*W2+ U2*U2*W1*W1+ U1*U2*W1*W2+ U1*U2*W2*W1
     1           + U2*U1*W1*W2+ U2*U1*W2*W1
      ROT(11,11)=U1*U1*W3*W3+ U3*U3*W1*W1+ U1*U3*W1*W3+ U1*U3*W3*W1
     1           + U3*U1*W1*W3+ U3*U1*W3*W1
      ROT(12,11)=U2*U2*W3*W3+ U3*U3*W2*W2+ U2*U3*W2*W3+ U2*U3*W3*W2
     1           + U3*U2*W2*W3+ U3*U2*W3*W2
      ROT(13,11)=U1*U1*W2*W3+ U1*U1*W3*W2+ U1*U2*W1*W3+ U1*U3*W1*W2
     1           + U1*U2*W3*W1+ U1*U3*W2*W1+ U2*U1*W1*W3+ U3*U1*W1*W2
     2           + U2*U1*W3*W1+ U3*U1*W2*W1+ U2*U3*W1*W1+ U3*U2*W1*W1
      ROT(14,11)=U2*U2*W1*W3+ U2*U2*W3*W1+ U2*U1*W2*W3+ U2*U3*W2*W1
     1           + U2*U1*W3*W2+ U2*U3*W1*W2+ U1*U2*W2*W3+ U3*U2*W2*W1
     2           + U1*U2*W3*W2+ U3*U2*W1*W2+ U1*U3*W2*W2+ U3*U1*W2*W2
      ROT(15,11)=U3*U3*W1*W2+ U3*U3*W2*W1+ U3*U1*W3*W2+ U3*U2*W3*W1
     1           + U3*U1*W2*W3+ U3*U2*W1*W3+ U1*U3*W3*W2+ U2*U3*W3*W1
     2           + U1*U3*W2*W3+ U2*U3*W1*W3+ U1*U2*W3*W3+ U2*U1*W3*W3
C     NEW YYZZ
      ROT(1,12) =V1*V1*W1*W1
      ROT(2,12) =V2*V2*W2*W2
      ROT(3,12) =V3*V3*W3*W3
      ROT(4,12) =V2*V1*W1*W1+ V1*V2*W1*W1+ V1*V1*W2*W1+ V1*V1*W1*W2
      ROT(5,12) =V3*V1*W1*W1+ V1*V3*W1*W1+ V1*V1*W3*W1+ V1*V1*W1*W3
      ROT(6,12) =V1*V2*W2*W2+ V2*V1*W2*W2+ V2*V2*W1*W2+ V2*V2*W2*W1
      ROT(7,12) =V3*V2*W2*W2+ V2*V3*W2*W2+ V2*V2*W3*W2+ V2*V2*W2*W3
      ROT(8,12) =V1*V3*W3*W3+ V3*V1*W3*W3+ V3*V3*W1*W3+ V3*V3*W3*W1
      ROT(9,12) =V2*V3*W3*W3+ V3*V2*W3*W3+ V3*V3*W2*W3+ V3*V3*W3*W2
      ROT(10,12)=V1*V1*W2*W2+ V2*V2*W1*W1+ V1*V2*W1*W2+ V1*V2*W2*W1
     1           + V2*V1*W1*W2+ V2*V1*W2*W1
      ROT(11,12)=V1*V1*W3*W3+ V3*V3*W1*W1+ V1*V3*W1*W3+ V1*V3*W3*W1
     1           + V3*V1*W1*W3+ V3*V1*W3*W1
      ROT(12,12)=V2*V2*W3*W3+ V3*V3*W2*W2+ V2*V3*W2*W3+ V2*V3*W3*W2
     1           + V3*V2*W2*W3+ V3*V2*W3*W2
      ROT(13,12)=V1*V1*W2*W3+ V1*V1*W3*W2+ V1*V2*W1*W3+ V1*V3*W1*W2
     1           + V1*V2*W3*W1+ V1*V3*W2*W1+ V2*V1*W1*W3+ V3*V1*W1*W2
     2           + V2*V1*W3*W1+ V3*V1*W2*W1+ V2*V3*W1*W1+ V3*V2*W1*W1
      ROT(14,12)=V2*V2*W1*W3+ V2*V2*W3*W1+ V2*V1*W2*W3+ V2*V3*W2*W1
     1           + V2*V1*W3*W2+ V2*V3*W1*W2+ V1*V2*W2*W3+ V3*V2*W2*W1
     2           + V1*V2*W3*W2+ V3*V2*W1*W2+ V1*V3*W2*W2+ V3*V1*W2*W2
      ROT(15,12)=V3*V3*W1*W2+ V3*V3*W2*W1+ V3*V1*W3*W2+ V3*V2*W3*W1
     1           + V3*V1*W2*W3+ V3*V2*W1*W3+ V1*V3*W3*W2+ V2*V3*W3*W1
     2           + V1*V3*W2*W3+ V2*V3*W1*W3+ V1*V2*W3*W3+ V2*V1*W3*W3
C     NEW XXYZ
      ROT(1,13) =U1*U1*V1*W1
      ROT(2,13) =U2*U2*V2*W2
      ROT(3,13) =U3*U3*V3*W3
      ROT(4,13) =U2*U1*V1*W1+ U1*U2*V1*W1+ U1*U1*V2*W1+ U1*U1*V1*W2
      ROT(5,13) =U3*U1*V1*W1+ U1*U3*V1*W1+ U1*U1*V3*W1+ U1*U1*V1*W3
      ROT(6,13) =U1*U2*V2*W2+ U2*U1*V2*W2+ U2*U2*V1*W2+ U2*U2*V2*W1
      ROT(7,13) =U3*U2*V2*W2+ U2*U3*V2*W2+ U2*U2*V3*W2+ U2*U2*V2*W3
      ROT(8,13) =U1*U3*V3*W3+ U3*U1*V3*W3+ U3*U3*V1*W3+ U3*U3*V3*W1
      ROT(9,13) =U2*U3*V3*W3+ U3*U2*V3*W3+ U3*U3*V2*W3+ U3*U3*V3*W2
      ROT(10,13)=U1*U1*V2*W2+ U2*U2*V1*W1+ U1*U2*V1*W2+ U1*U2*V2*W1
     1           + U2*U1*V1*W2+ U2*U1*V2*W1
      ROT(11,13)=U1*U1*V3*W3+ U3*U3*V1*W1+ U1*U3*V1*W3+ U1*U3*V3*W1
     1           + U3*U1*V1*W3+ U3*U1*V3*W1
      ROT(12,13)=U2*U2*V3*W3+ U3*U3*V2*W2+ U2*U3*V2*W3+ U2*U3*V3*W2
     1           + U3*U2*V2*W3+ U3*U2*V3*W2
      ROT(13,13)=U1*U1*V2*W3+ U1*U1*V3*W2+ U1*U2*V1*W3+ U1*U3*V1*W2
     1           + U1*U2*V3*W1+ U1*U3*V2*W1+ U2*U1*V1*W3+ U3*U1*V1*W2
     2           + U2*U1*V3*W1+ U3*U1*V2*W1+ U2*U3*V1*W1+ U3*U2*V1*W1
      ROT(14,13)=U2*U2*V1*W3+ U2*U2*V3*W1+ U2*U1*V2*W3+ U2*U3*V2*W1
     1           + U2*U1*V3*W2+ U2*U3*V1*W2+ U1*U2*V2*W3+ U3*U2*V2*W1
     2           + U1*U2*V3*W2+ U3*U2*V1*W2+ U1*U3*V2*W2+ U3*U1*V2*W2
      ROT(15,13)=U3*U3*V1*W2+ U3*U3*V2*W1+ U3*U1*V3*W2+ U3*U2*V3*W1
     1           + U3*U1*V2*W3+ U3*U2*V1*W3+ U1*U3*V3*W2+ U2*U3*V3*W1
     2           + U1*U3*V2*W3+ U2*U3*V1*W3+ U1*U2*V3*W3+ U2*U1*V3*W3
C     NEW YYXZ
      ROT(1,14) =V1*V1*U1*W1
      ROT(2,14) =V2*V2*U2*W2
      ROT(3,14) =V3*V3*U3*W3
      ROT(4,14) =V2*V1*U1*W1+ V1*V2*U1*W1+ V1*V1*U2*W1+ V1*V1*U1*W2
      ROT(5,14) =V3*V1*U1*W1+ V1*V3*U1*W1+ V1*V1*U3*W1+ V1*V1*U1*W3
      ROT(6,14) =V1*V2*U2*W2+ V2*V1*U2*W2+ V2*V2*U1*W2+ V2*V2*U2*W1
      ROT(7,14) =V3*V2*U2*W2+ V2*V3*U2*W2+ V2*V2*U3*W2+ V2*V2*U2*W3
      ROT(8,14) =V1*V3*U3*W3+ V3*V1*U3*W3+ V3*V3*U1*W3+ V3*V3*U3*W1
      ROT(9,14) =V2*V3*U3*W3+ V3*V2*U3*W3+ V3*V3*U2*W3+ V3*V3*U3*W2
      ROT(10,14)=V1*V1*U2*W2+ V2*V2*U1*W1+ V1*V2*U1*W2+ V1*V2*U2*W1
     1           + V2*V1*U1*W2+ V2*V1*U2*W1
      ROT(11,14)=V1*V1*U3*W3+ V3*V3*U1*W1+ V1*V3*U1*W3+ V1*V3*U3*W1
     1           + V3*V1*U1*W3+ V3*V1*U3*W1
      ROT(12,14)=V2*V2*U3*W3+ V3*V3*U2*W2+ V2*V3*U2*W3+ V2*V3*U3*W2
     1           + V3*V2*U2*W3+ V3*V2*U3*W2
      ROT(13,14)=V1*V1*U2*W3+ V1*V1*U3*W2+ V1*V2*U1*W3+ V1*V3*U1*W2
     1           + V1*V2*U3*W1+ V1*V3*U2*W1+ V2*V1*U1*W3+ V3*V1*U1*W2
     2           + V2*V1*U3*W1+ V3*V1*U2*W1+ V2*V3*U1*W1+ V3*V2*U1*W1
      ROT(14,14)=V2*V2*U1*W3+ V2*V2*U3*W1+ V2*V1*U2*W3+ V2*V3*U2*W1
     1           + V2*V1*U3*W2+ V2*V3*U1*W2+ V1*V2*U2*W3+ V3*V2*U2*W1
     2           + V1*V2*U3*W2+ V3*V2*U1*W2+ V1*V3*U2*W2+ V3*V1*U2*W2
      ROT(15,14)=V3*V3*U1*W2+ V3*V3*U2*W1+ V3*V1*U3*W2+ V3*V2*U3*W1
     1           + V3*V1*U2*W3+ V3*V2*U1*W3+ V1*V3*U3*W2+ V2*V3*U3*W1
     2           + V1*V3*U2*W3+ V2*V3*U1*W3+ V1*V2*U3*W3+ V2*V1*U3*W3
C     NEW ZZXY
      ROT(1,15) =W1*W1*U1*V1
      ROT(2,15) =W2*W2*U2*V2
      ROT(3,15) =W3*W3*U3*V3
      ROT(4,15) =W2*W1*U1*V1+ W1*W2*U1*V1+ W1*W1*U2*V1+ W1*W1*U1*V2
      ROT(5,15) =W3*W1*U1*V1+ W1*W3*U1*V1+ W1*W1*U3*V1+ W1*W1*U1*V3
      ROT(6,15) =W1*W2*U2*V2+ W2*W1*U2*V2+ W2*W2*U1*V2+ W2*W2*U2*V1
      ROT(7,15) =W3*W2*U2*V2+ W2*W3*U2*V2+ W2*W2*U3*V2+ W2*W2*U2*V3
      ROT(8,15) =W1*W3*U3*V3+ W3*W1*U3*V3+ W3*W3*U1*V3+ W3*W3*U3*V1
      ROT(9,15) =W2*W3*U3*V3+ W3*W2*U3*V3+ W3*W3*U2*V3+ W3*W3*U3*V2
      ROT(10,15)=W1*W1*U2*V2+ W2*W2*U1*V1+ W1*W2*U1*V2+ W1*W2*U2*V1
     1           + W2*W1*U1*V2+ W2*W1*U2*V1
      ROT(11,15)=W1*W1*U3*V3+ W3*W3*U1*V1+ W1*W3*U1*V3+ W1*W3*U3*V1
     1           + W3*W1*U1*V3+ W3*W1*U3*V1
      ROT(12,15)=W2*W2*U3*V3+ W3*W3*U2*V2+ W2*W3*U2*V3+ W2*W3*U3*V2
     1           + W3*W2*U2*V3+ W3*W2*U3*V2
      ROT(13,15)=W1*W1*U2*V3+ W1*W1*U3*V2+ W1*W2*U1*V3+ W1*W3*U1*V2
     1           + W1*W2*U3*V1+ W1*W3*U2*V1+ W2*W1*U1*V3+ W3*W1*U1*V2
     2           + W2*W1*U3*V1+ W3*W1*U2*V1+ W2*W3*U1*V1+ W3*W2*U1*V1
      ROT(14,15)=W2*W2*U1*V3+ W2*W2*U3*V1+ W2*W1*U2*V3+ W2*W3*U2*V1
     1           + W2*W1*U3*V2+ W2*W3*U1*V2+ W1*W2*U2*V3+ W3*W2*U2*V1
     2           + W1*W2*U3*V2+ W3*W2*U1*V2+ W1*W3*U2*V2+ W3*W1*U2*V2
      ROT(15,15)=W3*W3*U1*V2+ W3*W3*U2*V1+ W3*W1*U3*V2+ W3*W2*U3*V1
     1           + W3*W1*U2*V3+ W3*W2*U1*V3+ W1*W3*U3*V2+ W2*W3*U3*V1
     2           + W1*W3*U2*V3+ W2*W3*U1*V3+ W1*W2*U3*V3+ W2*W1*U3*V3
C
C     ----- EXPRESS SPHERICAL HARMONICS IN ABSOLUTE FRAME -----
C
      DO 360 I=1,15
      DO 360 J=1,15
      A=ZERO
      DO 350 K=1,15
      A=A+ROT(I,K)*GSPH(K,J)
 350  CONTINUE
        BUFF(I,J)=A
 360  GSHELL(I,J)=A
C
C     ----- DEFINE INVERSE TRANSFORMATION -----
C
      CALL LUDCMP(BUFF,28,15,INDX,VWRK,D,IERR)
      DO 380 I=1,15
      CALL LUBKSB(BUFF,28,15,INDX,GIHELL(1,I))
  380 CONTINUE
C
C     PRINT
C
      IF(DBG) CALL SYMPRP(GSHELL,15,15,15)
      IF(DBG) CALL SYMPRP(GIHELL,15,15,15)
c
CJI Insert h and i formulas
c
c      As Graham said, the transformation for h/i can be done using an auto procedure. 
c      I have used a PERL script to generate the formulas and this is available.
c      The two relevant subroutines gethrot and getirot are in symhi.src
c
c     ----- h spherical harmonics -----
c
      if(dbg) call symprp(hsph,21,21,21)
c
c     ----- load h transformation of frames in -rot- -----
c
      call gethrot(rot,28)
c
c     ----- express spherical harmonics in absolute frame -----
c
      do 460 i=1,21
      do 460 j=1,21
      a=zero
      do 450 k=1,21
      a=a+rot(i,k)*hsph(k,j)
 450  continue
        buff(i,j)=a
 460  hshell(i,j)=a
c
c     ----- define inverse transformation -----
c
      call ludcmp(buff,28,21,indx,vwrk,d,ierr)
      do 480 i=1,21
      call lubksb(buff,28,21,indx,hihell(1,i))
  480 continue
c
c      print
c
      if(dbg) call symprp(hshell,21,21,21)
      if(dbg) call symprp(hihell,21,21,21)
c
c     ----- i spherical harmonics -----
c
      if(dbg) call symprp(aisph,28,28,28)
c
c     ----- load transformation of frames in -rot- -----
c
       call getirot(rot,28)
c
c     ----- express spherical harmonics in absolute frame -----
c
      do 560 i=1,28
      do 560 j=1,28
      a=zero
      do 550 k=1,28
      a=a+rot(i,k)*aisph(k,j)
 550  continue
        buff(i,j)=a
 560  aishell(i,j)=a
c
c     ----- define inverse transformation -----
c
      call ludcmp(buff,28,28,indx,vwrk,d,ierr)
      do 580 i=1,28
      call lubksb(buff,28,28,indx,aiihell(1,i))
  580 continue
c
c     print
c
      if(dbg) call symprp(aishell,28,28,28)
      if(dbg) call symprp(aiihell,28,28,28)
C
      RETURN
 9999 FORMAT(/,' DEFINITION OF SPHERICAL HARMONICS',/,
     1         ' ---------------------------------')
      END
C
C*MODULE SYMSLC  *DECK SPHTRF
C
C> @brief : Routine calculates the symmetry transformation matrices
C>          in the basis of spherical harmonics
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Significant upgrade to include for h,i functions in basis
C
      SUBROUTINE SPHTRF(DBG)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL DBG
C
      PARAMETER (MXSH=5000, MXATM=2000)
C
      dimension v(28,28),t(28,28),ti(28,28),buff(28,28),
     *          pname(3),dname(6),fname(10),gname(15),
     *          hname(21),ainame(28)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /SPHERI/ PSHELL(3,3),DSHELL(6,6),
     *                FSHELL(10,10),GSHELL(15,15),
     *                PIHELL(3,3),DIHELL(6,6),
     *                FIHELL(10,10),GIHELL(15,15)
      common /sphehi/ hshell(21,21),aishell(28,28),
     *                hihell(21,21),aiihell(28,28)
      COMMON /SYMSPD/ PTR(3,144),DTR(6,288),FTR(10,480),GTR(15,720)
      common /symhi / htr(21,1008),aitr(28,1344)
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                TSYM(432),INVT(48),NT
C
      PARAMETER (ZERO=0.0D+00)
C
      DATA PNAME /4HP1  ,4HP2  ,4HP3  /
      DATA DNAME /4HD1  ,4HD2  ,4HD3  ,4HD4  ,4HD5  ,4HD6  /
      DATA FNAME /4HF1  ,4HF2  ,4HF3  ,4HF4  ,4HF5  ,4HF6  ,4HF7  ,
     1            4HF8  ,4HF9  ,4HF10 /
      DATA GNAME /4HG1  ,4HG2  ,4HG3  ,4HG4  ,4HG5  ,4HG6  ,4HG7  ,
     1            4HG8  ,4HG9  ,4HG10 ,4HG11 ,4HG12 ,4HG13 ,4HG14 ,
     2            4HG15 /
      data hname /4hh1  ,4hh2  ,4hh3  ,4hh4  ,4hh5  ,4hh6  ,4hh7  ,
     1            4hh8  ,4hh9  ,4hh10 ,4hh11 ,4hh12 ,4hh13 ,4hh14 ,
     2            4hh15 ,4hh16 ,4hh17 ,4hh18 ,4hh19 ,4hh20 ,4hh21 /
      data ainame /4hi1  ,4hi2  ,4hi3  ,4hi4  ,4hi5  ,4hi6  ,4hi7  ,
     1             4hi8  ,4hi9  ,4hi10 ,4hi11 ,4hi12 ,4hi13 ,4hi14 ,
     2             4hi15 ,4hi16 ,4hi17 ,4hi18 ,4hi19 ,4hi20 ,4hi21 ,
     3             4hi22 ,4hi23 ,4hi24 ,4hi25 ,4hi26 ,4hi27 ,4hi28 /
C
C     ---- THIS ROUTINE CALCULATES THE SYMMETRY TRANSFORMATION -----
C          MATRICES IN THE BASIS OF SPHERICAL HARMONICS.
C
      IF(DBG) WRITE(IW,9999)
C
C     ----- LOOP OVER SYMMETRY OPERATIONS -----
C
      DO 60 IT=1,NT
      NP= 3*(IT-1)
      ND= 6*(IT-1)
      NF=10*(IT-1)
      NG=15*(IT-1)
      nh=21*(it-1)
      ni=28*(it-1)
C
      do 20 iper=1,6
C
      N=3
      IF(IPER.EQ.2) N=6
      IF(IPER.EQ.3) N=10
      IF(IPER.EQ.4) N=15
      if(iper.eq.5) n=21
      if(iper.eq.6) n=28
C
      go to (21,22,23,24,26,27),iper
C
 21   DO 31 I=1,N
      DO 31 J=1,N
      V(I,J)=PTR(I,NP+J)
      T(I,J)=PSHELL(I,J)
      TI(I,J)=PIHELL(I,J)
 31   CONTINUE
      GO TO 25
C
 22   DO 32 I=1,N
      DO 32 J=1,N
      V(I,J)=DTR(I,ND+J)
      T(I,J)=DSHELL(I,J)
      TI(I,J)=DIHELL(I,J)
 32   CONTINUE
      GO TO 25
C
 23   DO 33 I=1,N
      DO 33 J=1,N
      V(I,J)=FTR(I,NF+J)
      T(I,J)=FSHELL(I,J)
      TI(I,J)=FIHELL(I,J)
 33   CONTINUE
      GO TO 25
C
 24   DO 34 I=1,N
      DO 34 J=1,N
      V(I,J)=GTR(I,NG+J)
      T(I,J)=GSHELL(I,J)
      TI(I,J)=GIHELL(I,J)
 34   CONTINUE
      GO TO 25
C
 26   do 36 i=1,n
      do 36 j=1,n
      v(i,j)=htr(i,nh+j)
      t(i,j)=hshell(i,j)
      ti(i,j)=hihell(i,j)
 36   continue
      go to 25
c
 27   do 37 i=1,n
      do 37 j=1,n
      v(i,j)=aitr(i,ni+j)
      t(i,j)=aishell(i,j)
      ti(i,j)=aiihell(i,j)
 37   continue
C
C     ---- RIGHT-TRANSFORMATION ----
C
 25   DO 100 I=1,N
      DO 100 J=1,N
      A=ZERO
      DO 120 K=1,N
      A= A + V(I,K)*T(K,J)
 120  CONTINUE
 100  BUFF(I,J)=A
C
C     ---- LEFT-TRANSFORMATION ----
C
      DO 130 I=1,N
      DO 130 J=1,N
      A=ZERO
      DO 140 K=1,N
      A= A + TI(I,K)*BUFF(K,J)
 140  CONTINUE
 130  V(I,J)=A
C
C     ---- COPY BACK -----
C
      go to (41,42,43,44,45,46),iper
C
 41   DO 51 I=1,N
      DO 51 J=1,N
      PTR(I,NP+J)=V(I,J)
 51   CONTINUE
      GO TO 20
C
 42   DO 52 I=1,N
      DO 52 J=1,N
      DTR(I,ND+J)=V(I,J)
 52   CONTINUE
      GO TO 20
C
 43   DO 53 I=1,N
      DO 53 J=1,N
      FTR(I,NF+J)=V(I,J)
 53   CONTINUE
      GO TO 20
C
 44   DO 54 I=1,N
      DO 54 J=1,N
      GTR(I,NG+J)=V(I,J)
 54   CONTINUE
      GO TO 20
C
 45   do 55 i=1,n
      do 55 j=1,n
      htr(i,nh+j)=v(i,j)
 55   continue
      go to 20
c
 46   do 56 i=1,n
      do 56 j=1,n
      aitr(i,ni+j)=v(i,j)
 56   continue
C
C     DONE
C
 20   CONTINUE
 60   CONTINUE
C
C     ----- PRINT SECTION -----
C
      IF(.NOT.DBG) GO TO 300
C
      DO 255 IT=1,NT
      WRITE(IW,8860) IT
C
      NP=3*(IT-1)
      WRITE(IW,8862) (PNAME(J),J=1,3)
      WRITE(IW,8863)
      DO 250 I=1,3
  250 WRITE(IW,8861) PNAME(I),(PTR(I,NP+J),J=1,3)
      WRITE(IW,8863)
C
      ND=6*(IT-1)
      WRITE(IW,8862) (DNAME(J),J=1,6)
      WRITE(IW,8863)
      DO 251 I=1,6
  251 WRITE(IW,8861) DNAME(I),(DTR(I,ND+J),J=1,6)
      WRITE(IW,8863)
C
      NF=10*(IT-1)
      WRITE(IW,8862) (FNAME(J),J=1,10)
      WRITE(IW,8863)
      DO 252 I=1,10
  252 WRITE(IW,8861) FNAME(I),(FTR(I,NF+J),J=1,10)
      WRITE(IW,8863)
C
      NG=15*(IT-1)
      JMAX=0
  253 JMIN=JMAX+1
      JMAX=JMAX+10
      IF(JMAX.GT.15) JMAX=15
      WRITE(IW,8862) (GNAME(J),J=JMIN,JMAX)
      WRITE(IW,8863)
      DO 254 I=1,15
  254 WRITE(IW,8861) GNAME(I),(GTR(I,NG+J),J=JMIN,JMAX)
      WRITE(IW,8863)
      IF(JMAX.LT.15) GO TO 253
C
      nh=21*(it-1)
      jmax=0
  256 jmin=jmax+1
      jmax=jmax+10
      if(jmax.gt.21) jmax=21
      write(iw,8862) (hname(j),j=jmin,jmax)
      write(iw,8863)
      do 257 i=1,21
  257 write(iw,8861) hname(i),(htr(i,nh+j),j=jmin,jmax)
      write(iw,8863)
      if(jmax.lt.21) go to 256
c
      ni=28*(it-1)
      jmax=0
  258 jmin=jmax+1
      jmax=jmax+10
      if(jmax.gt.28) jmax=28
      write(iw,8862) (ainame(j),j=jmin,jmax)
      write(iw,8863)
      do 259 i=1,28
  259 write(iw,8861) ainame(i),(aitr(i,ni+j),j=jmin,jmax)
      write(iw,8863)
      if(jmax.lt.28) go to 258
C
  255 CONTINUE
C
  300 CONTINUE
      RETURN
C
 9999 FORMAT(/,5X,' SYMMETRY TRANSFORMATION MATRICES IN SPHERICAL',
     1            ' HARMONICS BASIS',/,5X,1X,61(1H-))
 8863 FORMAT(/)
 8862 FORMAT(8X,10(3X,A4,3X))
 8861 FORMAT(2X,A4,2X,10F10.6)
 8860 FORMAT(/,21X,'TRANSFORMATION NUMBER',I4,/)
      END
c
C*MODULE SYMSLC  *DECK SPHPRT
C
C> @brief : Routine prints definitions of the spherical harmonics
C>
C> @date  : December 21, 2012 - Joe Ivanic, Graham Fletcher
C>          Significant upgrade to include for h,i functions in basis
C
      SUBROUTINE SPHPRT
      IMPLICIT REAL*8 (A-H,O-Z)
      PARAMETER (MXGTOT=20000)
      PARAMETER (MXSH=5000)
c
      character*6 namxyz
      CHARACTER*4 NAMSPH
      CHARACTER*4 NAMLAB
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SPHERI/ PSHELL(3,3),DSHELL(6,6),
     *                FSHELL(10,10),GSHELL(15,15),
     *                PIHELL(3,3),DIHELL(6,6),
     *                FIHELL(10,10),GIHELL(15,15)
      common /sphehi/ hshell(21,21),aishell(28,28),
     *                hihell(21,21),aiihell(28,28)
C
      dimension nf(7),namxyz(84),namsph(84),namlab(84)
      data nf     /1,3,6,10,15,21,28/
      data namxyz 
     *         /'    s ','    x ','    y ','    z ','    xx','    yy',
     1          '    zz','    xy','    xz','    yz','   xxx','   yyy',
     2          '   zzz','   xxy','   xxz','   yyx','   yyz','   zzx',
     3          '   zzy','   xyz','  xxxx','  yyyy','  zzzz','  xxxy',
     4          '  xxxz','  yyyx','  yyyz','  zzzx','  zzzy','  xxyy',
     5          '  xxzz','  yyzz','  xxyz','  yyxz','  zzxy',' xxxxx',
     6          ' yyyyy',' zzzzz',' xxxxy',' xxxxz',' yyyyx',' yyyyz',
     7          ' zzzzx',' zzzzy',' xxxyy',' xxxzz',' yyyxx',' yyyzz',
     8          ' zzzxx',' zzzyy',' xxxyz',' yyyxz',' zzzxy',' xxyyz',
     9          ' xxzzy',' yyzzx','    x6','    y6','    z6','   x5y',
     1          '   x5z','   y5x','   y5z','   z5x','   z5y','  x4y2',
     2          '  x4z2','  y4x2','  y4z2','  z4x2','  z4y2','  x4yz',
     3          '  y4xz','  z4xy','  x3y3','  x3z3','  y3z3',' x3y2z',
     4          ' x3z2y',' y3x2z',' y3z2x',' z3x2y',' z3y2x','x2y2z2'/
      data namsph /'  s ','p x ','p y ','p z ','d z2','d x2','d xy',
     1             'd xz','d yz','d s ','  f1','  f2','  f3','  f4',
     2             '  f5','  f6','  f7','f p1','f p2','f p3','  g1',
     3             '  g2','  g3','  g4','  g5','  g6','  g7','  g8',
     4             '  g9','g s ','g d1','g d2','g d3','g d4','g d5',
     5             '  h1','  h2','  h3','  h4','  h5','  h6','  h7',
     6             '  h8','  h9',' h10',' h11','h p1','h p2','h p3',
     7             'h f1','h f2','h f3','h f4','h f5','h f6','h f7',
     8             '  i1','  i2','  i3','  i4','  i5','  i6','  i7',
     9             '  i8','  i9',' i10',' i11',' i12',' i13',' i s',
     *             'i d1','i d2','i d3','i d4','i d5','i g1','i g2',
     1             'i g3','i g4','i g5','i g6','i g7','i g8','i g9'/
      data namlab /'  s ','  p1','  p2','  p3','  d1','  d2','  d3',
     1             '  d4','  d5',' d s','  f1','  f2','  f3','  f4',
     2             '  f5','  f6','  f7','f p1','f p2','f p3','  g1',
     3             '  g2','  g3','  g4','  g5','  g6','  g7','  g8',
     4             '  g9',' g s','g d1','g d2','g d3','g d4','g d5',
     5             '  h1','  h2','  h3','  h4','  h5','  h6','  h7',
     6             '  h8','  h9',' h10',' h11','h p1','h p2','h p3',
     7             'h f1','h f2','h f3','h f4','h f5','h f6','h f7',
     8             '  i1','  i2','  i3','  i4','  i5','  i6','  i7',
     9             '  i8','  i9',' i10',' i11',' i12',' i13',' i s',
     *             'i d1','i d2','i d3','i d4','i d5','i g1','i g2',
     1             'i g3','i g4','i g5','i g6','i g7','i g8','i g9'/
      DATA ONE    /1.0D+00/
C
C     ----  PRINT SPHERICAL HARMONICS DEFINITION -----
C
      WRITE(IW,9999)
C
      MAXTYP=0
      DO ISH=1,NSHELL
         IF(KTYPE(ISH).GT.MAXTYP) MAXTYP=KTYPE(ISH)
      ENDDO
C
      DO 100 ISPH=1,MAXTYP
         N=NF(ISPH)
         go to (10,20,30,40,50,60,70),isph
C
C     ---- S ----
C
  10     J=1
            WRITE(IW,9998) J,NAMSPH(J   ),J,NAMLAB(J   ),
     1                     ONE,NAMXYZ(1)
         GO TO 100
C
C     ---- P ----
C
  20     DO J=1,N
            MAX=0
  21        MIN=MAX+1
            MAX=MAX+6
            IF(MAX.GT.N) MAX=N
            IF(MIN.LT.6) THEN
               WRITE(IW,9998) J,NAMSPH(J+ 1),J,NAMLAB(J+ 1),
     1                        (PSHELL(I,J),NAMXYZ(I+ 1),I=MIN,MAX)
            ELSE
               WRITE(IW,9997) (PSHELL(I,J),NAMXYZ(I+ 1),I=MIN,MAX)
            END IF
            IF(MAX.LT.N) GO TO 21
         ENDDO
         GO TO 100
C
C     ---- D ----
C
  30     DO J=1,N
            MAX=0
  31        MIN=MAX+1
            MAX=MAX+6
            IF(MAX.GT.N) MAX=N
            IF(MIN.LT.6) THEN
               WRITE(IW,9998) J,NAMSPH(J+4),J,NAMLAB(J+4),
     1                        (DSHELL(I,J),NAMXYZ(I+ 4),I=MIN,MAX)
            ELSE
               WRITE(IW,9997) (DSHELL(I,J),NAMXYZ(I+ 4),I=MIN,MAX)
            END IF
            IF(MAX.LT.N) GO TO 31
         ENDDO
         GO TO 100
C
C     ---- F ----
C
  40     DO J=1,N
            MAX=0
  41        MIN=MAX+1
            MAX=MAX+6
            IF(MAX.GT.N) MAX=N
            IF(MIN.LT.6) THEN
               WRITE(IW,9998) J,NAMSPH(J+10),J,NAMLAB(J+10),
     1                        (FSHELL(I,J),NAMXYZ(I+10),I=MIN,MAX)
            ELSE
               WRITE(IW,9997) (FSHELL(I,J),NAMXYZ(I+10),I=MIN,MAX)
            END IF
            IF(MAX.LT.N) GO TO 41
         ENDDO
         GO TO 100
C
C     ---- G ----
C
  50     DO J=1,N
            MAX=0
  51        MIN=MAX+1
            MAX=MAX+6
            IF(MAX.GT.N) MAX=N
            IF(MIN.LT.6) THEN
               WRITE(IW,9998) J,NAMSPH(J+20),J,NAMLAB(J+20),
     1                        (GSHELL(I,J),NAMXYZ(I+20),I=MIN,MAX)
            ELSE
               WRITE(IW,9997) (GSHELL(I,J),NAMXYZ(I+20),I=MIN,MAX)
            END IF
            IF(MAX.LT.N) GO TO 51
         ENDDO
         GO TO 100
c
c     ---- h ----
c
  60     do j=1,n
            max=0
  61        min=max+1
            max=max+6
            if(max.gt.n) max=n
            if(min.lt.6) then
               write(iw,9998) j,namsph(j+35),j,namlab(j+35),
     1                        (hshell(i,j),namxyz(i+35),i=min,max)
            else
               write(iw,9997) (hshell(i,j),namxyz(i+35),i=min,max)
            end if
            if(max.lt.n) go to 61
         enddo
         go to 100
c
c     ---- i ----
c
  70     do j=1,n
            max=0
  71        min=max+1
            max=max+6
            if(max.gt.n) max=n
            if(min.lt.6) then
               write(iw,9998) j,namsph(j+56),j,namlab(j+56),
     1                        (aishell(i,j),namxyz(i+56),i=min,max)
            else
               write(iw,9997) (aishell(i,j),namxyz(i+56),i=min,max)
            end if
            if(max.lt.n) go to 71
         enddo
C
  100 CONTINUE
C
      RETURN
 9999 FORMAT(/,1X,'SPHERICAL HARMONICS',/,1X,19(1H-))
 9998 FORMAT(5H CHI(,I4,2X,A4,3H) =,1X,5H CHI(,I4,2X,A4,3H) =,
     1           1X,6(F7.3,3H * ,A4))
 9997 FORMAT(37X,1X,6(F7.3,3H * ,A4))
      END
