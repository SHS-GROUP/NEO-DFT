C  4 Dec 12 - MWS - G3MP2X,RDINPF: fix C*8 data initializations
C 19 Oct 12 - MWS - synchronize FRGINF common
C  7 MAR 12 - MWS - INITIALIZE CNUTRL TO ZERO
C 30 JAN 12 - SAN - ADDED BASIS SETS FROM INPUTA.SRC, CHANGED LOOP OVER ALL
C                   ATOMS AND BASIS SETS, HEATS SUBROUTINE NOW CALCULATES
C                   IONS AND RADICALS, ATOM INFO (aTOMIZATION AND COMPOSITE
C                   METHOD ENERGIES) FOR G3(MP2,CCSD(T)), G3-RAD, G4MP2,
C                   G4MP2-6X, ccCA-S4, and ccCA-CC(2,3), CHANGED /CXTHRM/,
C                   ADDED /COMPBS/
C 28 DEC 11 - DGF - USE CLOSDA TO CLOSE DAF
C 11 AUG 10 - DGF - SYNCH COMMON BLOCK ENRGYS
C 14 OCT 09 - DGF - PAD ENRGMP
C 14 AUG 09 - MWS - RDINPF,FILATM: REVERT TO NEUTRAL ATOM HEATS/SOC DATA
C 22 MAY 09 - MWS - SYNCHRONIZE DFGRID COMMON
C 18 JUL 08 - SAN - RDINPF,FILATM: PROVIDE MORE ATOM DATA, FIX PRINTING
C 11 APR 08 - NM,SAN - NEW MODULE CALCULATING G3(MP2,CCSD(T))
C
C*MODULE G3  *DECK G3MP2X
C> @brief    G3(MP2,CCSD) thermochemistry
C> @details  CALCULATES G3(MP2,CCSD) AND G3(MP2,CCSD)//B3LYP
C>           MODEL THERMOCHEMISTRY.
C> @author   WRITTEN BY SEAN NEDD AND NIKITA MATSUNAGA,
C>           AT LONG ISLAND UNIVERSITY IN 2004-2006.
C
      SUBROUTINE G3MP2X
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C
      LOGICAL GOPARR,DSKWRK,MASWRK,MPTEST,SG1
      LOGICAL CNVR,G3MP2B3,SECONDD
      CHARACTER*8 CG3MP2
C
      PARAMETER (MXATM=2000, MXRT=100, MXGRID=10)
C
C     ----- ZPE PARAMETERS FOR G3(MP2,CCSD) AND G3(MP2,CCSD)//B3LYP
C
      PARAMETER (SCLZPE1=0.8929D+00,SCLZPE2=0.96D+00)
C
C     ----- G3(MP2,CCSD) PARAMETERS -----
C           CURTISS, ET AL., CPL 314 (1999) 101-107
C
      PARAMETER (HLCA=9.170D-03,HLCB=4.455D-03,
     *           HLCC=9.155D-03,HLCD=1.947D-03)
C
C     ----- PARAMETERS FOR G3(MP2,CCSD)//B3LYP ------
C
      PARAMETER (BHLCA=9.676D-03,BHLCB=4.907D-03,
     *           BHLCC=9.749D-03,BHLCD=2.134D-03)
C
C     ----- ORIGINAL G3(MP2) PARAMETERS -----
C     NOTABEAN: HLC IN CURTISS ET AL. PAPER (JCP, 110 (1999) 4703)
C               HAS ASSIGNED A AND B FOR ATOMS, AND C AND D FOR
C               MOLECULES.  THIS IS WRONG.
C
C     PARAMETER (HLCC=9.345D-03,HLCD=2.021D-03,
C    *           HLCA=9.279D-03,HLCB=4.471D-03)
C
      PARAMETER (TOKCAL=627.51D+00, BOLTZ=1.380662D-23,
     *           AVOGAD=6.022045D+23,
     *           TEMP=2.9815D+02,TOKJ=4.184D+03)
      PARAMETER (ONE5=1.5D+00,TWO5=2.5D+00)
C
      PARAMETER ( MAXA=103, MAXL=7)
C
      DIMENSION NCOR(103)
C
      COMMON /BASISC/ GBASIS,AEX(MAXA,MAXL),ABASIS(MAXA,MAXL),
     *                IAGAUS(MAXA,MAXL),IRDBAS
      COMMON /CCENGY/ ENRG,EREF,EMP,ECCN,ETOT(6),ECORR(6),
     *                DIAGS(3),AMPMX(5,2),IAMPMX(5,4,2),XO1,XO2,
     *                DIFMAX,DIFFENG,ITER,CNVR
      COMMON /CXTHRM/ CXTHERM(11),CXZPE,METHCX,ICXBAS,ICXPCM,SECONDD
      COMMON /DFGRID/ DFTTHR,DFTGTHR,SWOFF,SW0,BSLRD(137),NDFTFG,
     *                NRAD,NTHE,NPHI,NRAD0,NTHE0,NPHI0,
     *                NANGPT(MXGRID),NANGPT0(MXGRID),SG1,JANS
      COMMON /DFTPAR/ DFTTYP(20),EXENA,EXENB,EXENC,IDFT34,NAUXFUN,
     *                                                    NAUXSHL
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /ENRGYS/ ENUCR,EELCT,ETOTL,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RESTAR/ TIMLIM,IREST,NREC,INTLOC,IST,JST,KST,LST
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /SCFOPT/ CONVHF,MAXIT,MCONV,NPUNCH,NPREO(4)
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
      DATA NCOR /2*0,
     *             2*1,                  6*1,
     *             2*5,                  6*5,
     *             2*9,          10*9,   6*14,
     *             2*18,         10*18,  6*23,
     *             2*27,  14*27, 10*34,  6*39,
     *             2*43,  14*43,    50/
      DATA CCSDT,RNONE/8HCCSD(T) ,8HNONE    /
      DATA CG3MP2/'CG3MP2  '/
C
      ZPESCL=0.0D+00
C
C     ----- PRINT OUT G3(MP2) BANNER -----
C
      IF(MASWRK) THEN
         WRITE(IW,9000)
         IF(MUL.NE.1) THEN
            WRITE(IW,9005)
            CALL ABRT
         END IF
      END IF
      CALL G3INP
      CALL TIMIT(0)
C
C     ----- OPTIMIZATION AND HESSIAN WITH SCF FIRST -----
C
      ICXBAS=1
      MPLEVL=0
      METHCX=1
      IREST =0
      G3MP2B3=.FALSE.
C
      IF(MASWRK) WRITE(IW,9010)
      CALL BASISS
C
      IF(DFTYPE.NE.RNONE) THEN
         G3MP2B3 = .TRUE.
         CALL DFTINP(RNONE)
      END IF
C
      IF(NAT.EQ.1) THEN
         ICXBAS = 1
         MPLEVL = 2
         METHCX = 2
         MPTEST = .FALSE.
         IREST  = 0
         IF(MASWRK) WRITE(IW,9020)
         CALL MP2INP(MPTEST)
        CALL ENERGX
         ENMP2 = EMP2
        GOTO 5000
      ELSE
         CALL SIGX(.FALSE.)
      END IF
C
      CALL TIMIT(1)
      CALL TIMIT(0)
C
C     ----- DONE WITH DFT, SO RESET -----
C
      IF(DFTYPE.NE.RNONE) THEN
         DFTYPE = RNONE
         NDFTFG = 0
         NAUXSHL= 0
         NAUXFUN= 0
         IREST  = 0
         NEVALS = 0
         CALL VCLR(DFTTYP,1,20)
         METHCX = 2
         GOTO 5000
      END IF
C
C     ----- OPTIMIZE WITH MP2/6-31G(D) -----
C
      ICXBAS = 1
      MPLEVL = 2
      METHCX = 2
      MPTEST = .FALSE.
      IREST  = 0
      IF(MASWRK) WRITE(IW,9020)
      CALL MP2INP(MPTEST)
      CALL SIGX(.FALSE.)
      ENMP2= EMP2
      CALL TIMIT(1)
      CALL TIMIT(0)
C
C     ----- SINGLE POINT ENERGY WITH CCSD(T)/6-31G(D) -----
C
 5000 CONTINUE
      IF(MASWRK) WRITE(IW,9030)
      MPLEVL = 0
      CCTYP  = CCSDT
      IREST  = 0
      NEVALS = 0
      CALL CCINP
      CALL ENERGX
      ECCSD = ESCF + ENRG
      ENMP2 = ESCF + EMP
      CALL TIMIT(0)
C
C     ----- SINGLE POINT ENERGY WITH MP2/G3LARGE ------
C
      MPLEVL = 2
      ICXBAS = 2
      CALL BASISS
      IF(MASWRK) WRITE(IW,9500) GBASIS
C
C     ----- RESETTING BASIS SET -----
C
      CALL RESETB
      NPREO(2) = NQMT
C
      IREST  = 0
      NEVALS = 0
      CCTYP  = RNONE
      ICXBAS = 2
C
C     ----- SINGLE POINT ENERGY WITH BASIS G3MP2LARGE
C
      IF(MASWRK) WRITE(IW,9040)
      CALL MP2INP(MPTEST)
      CALL ENERGX
      ENMP2L = EMP2
      CALL TIMIT(1)
      CALL TIMIT(0)
C
C     ----- SUMMING UP CONTRIBUTIONS -----
C
      NCORT = 0
      DO I=1,NAT
         ITHAT = INT(ZAN(I))
         NCORT = NCORT + NCOR(ITHAT)
      END DO
      NAVAL = NA - NCORT
      NBVAL = NB - NCORT
C
C     ----- HIGH LEVEL CORRECTIONS -----
C
      IF(NAT.EQ.1) THEN
         FUDGE = -HLCC*NBVAL - HLCD*(NAVAL-NBVAL)
         ICHARG = ICH
         IZATM = INT(ZAN(1))
         CALL G3SPNORB(IZATM,ICHARG,SOVAL)
      ELSE
         FUDGE = -HLCA*NBVAL - HLCB*(NAVAL-NBVAL)
      END IF
C
      IF(G3MP2B3) THEN
         IF(NAT.EQ.1) THEN
            FUDGE = -BHLCC*NBVAL - BHLCD*(NAVAL-NBVAL)
            ICH   = ICHARG
            IZATM = INT(ZAN(1))
            CALL G3SPNORB(IZATM,ICHARG,SOVAL)
         ELSE
            FUDGE = -BHLCA*NBVAL - BHLCB*(NAVAL-NBVAL)
         END IF
      END IF
C
C     ----- THERMAL ENERGIES -----
C
      IF(NAT.EQ.1) THEN
         ETH = (ONE5)*AVOGAD*BOLTZ*TEMP/TOKJ/TOKCAL
         HTH = TWO5*BOLTZ*TEMP*AVOGAD/TOKJ/TOKCAL
      ELSE
         ETH    = CXTHERM(9)/TOKCAL
         HTH    = CXTHERM(10)/TOKCAL
         GTH    = CXTHERM(11)/TOKCAL
         IF(G3MP2B3) THEN
            ZPESCL = CXZPE*SCLZPE2
         ELSE
            ZPESCL = CXZPE*SCLZPE1
         END IF
      END IF
C
      DELCORR = ECCSD  - ENMP2
      DELBAS  = ENMP2L - ENMP2
C
C-----ZPE INCLUDED IN THERMAL ENERGIES, SO MUST BE REMOVED -----
C
      IF(NAT.EQ.1) THEN
C     ----- FOR ATOMS -----
         E0G3MP2= ENMP2 + DELCORR + DELBAS       + FUDGE + SOVAL
         EG3MP2 = ENMP2 + DELCORR + DELBAS + ETH + FUDGE + SOVAL
         HG3MP2 = ENMP2 + DELCORR + DELBAS + HTH + FUDGE + SOVAL
         GG3MP2 = ENMP2 + DELCORR + DELBAS + GTH + FUDGE + SOVAL
      ELSE
C     ----- FOR MOLECULES -----
         E0G3MP2= ENMP2 + DELCORR + DELBAS               + ZPESCL +FUDGE
         EG3MP2 = ENMP2 + DELCORR + DELBAS + ETH - CXZPE + ZPESCL +FUDGE
         HG3MP2 = ENMP2 + DELCORR + DELBAS + HTH - CXZPE + ZPESCL +FUDGE
         GG3MP2 = ENMP2 + DELCORR + DELBAS + GTH - CXZPE + ZPESCL +FUDGE
      END IF
C
      IF(MASWRK) THEN
         IF(G3MP2B3) THEN
            WRITE(IW,9700)
            WRITE(IW,9605)
            IF(NAT.EQ.1) THEN
               WRITE(IW,9710) BHLCC,BHLCD
            ELSE
               WRITE(IW,9710) BHLCA,BHLCB
            END IF
            WRITE(IW,9715) ENMP2,ECCSD,ENMP2L,DELBAS,ZPESCL,SCLZPE2,
     *                FUDGE,GTH,ETH,HTH,E0G3MP2,EG3MP2,HG3MP2,GG3MP2
         ELSE
            WRITE(IW,9600)
            WRITE(IW,9605)
            IF(NAT.EQ.1) THEN
               WRITE(IW,9610) HLCC,HLCD
            ELSE
               WRITE(IW,9610) HLCA,HLCB
            END IF
            WRITE(IW,9615) ENMP2,ECCSD,ENMP2L,DELBAS,ZPESCL,SCLZPE1,
     *                FUDGE,GTH,ETH,HTH,E0G3MP2,EG3MP2,HG3MP2,GG3MP2
         END IF
      END IF
C
C CALCULATION OF HEATS OF FORMATION
C
C     LET:
      E0G = E0G3MP2
      HG3 = HG3MP2
C
      IF(NAT.GT.1) THEN
        CNUTRL = 0.0D+00
        CALL HEATS(CG3MP2,CNUTRL,E0G,HG3,HFOR0,HFOR298)
        IF(MASWRK) WRITE(IW,9900) HFOR0,HFOR298
      END IF
      CALL TIMIT(1)
      RETURN
C
 9000 FORMAT(/5X,50(1H=),/5X,10(1H-),5X,'G3(MP2) CALCULATIONS',
     *       5X,10(1H-),/5X,50(1H=))
 9005 FORMAT(/5X,'***** ERROR:  G3(MP2) NOT IMPLEMENTED FOR OPEN-',
     *      'SHELLS ******'//,5X,'PLEASE WAIT FOR UCCSD(T)',/
     *      'WILL BE AVAILABLE FROM MICHIGAN',/)
 9010 FORMAT(/5X,50(1H-),/5X,5(1H-),5X,'G3(MP2) HF OPTIMIZATION',
     *      ' AND HESSIAN',/5X,50(1H-))
 9020 FORMAT(/5X,50(1H-),/5X,5(1H-),5X,'G3(MP2) MP2 OPTIMIZATION',
     *      /5X,50(1H-))
 9030 FORMAT(/5X,50(1H-),/5X,5(1H-),5X,'G3(MP2) CCSD(T)/6-31G(D)',
     *      /5X,50(1H-))
 9040 FORMAT(/5X,50(1H-),/5X,5(1H-),5X,'G3(MP2) MP2/G3MP2LARGE',
     *      /5X,50(1H-))
 9500 FORMAT(/1X,30(1H-),/1X,'SWAPPING BASIS SET TO ',A8,/1X,30(1H-))
 9600 FORMAT(/4X,64(1H-),/8X,'DETAILS OF G3(MP2) CALCULATIONS')
 9700 FORMAT(/4X,64(1H-),/8X,'DETAILS OF G3(MP2)//B3LYP CALCULATIONS')
 9605 FORMAT(4X,64(1H-),
     *       /4X,'E(G3(MP2))@0K   = E(CCSD(T))   + DE(BASIS)   + ',
     *       'ZPE(SCALED) + HLC',
     *       /4X,'E(G3(MP2))@298K = E(G3(MP2))@0K + (E(THERMAL) - ZPE)',
     *       /4X,'H(G3(MP2))      = E(G3(MP2))@298K + KT',
     *       /4X,'G(G3(MP2))      = H(G3(MP2)) - TDS',
     *      //8X,'E(CCSD(T))      = CCSD(T)/6-31G(D)//MP2/6-31G(D) ',
     *           'FROZEN CORE',
     *       /8X,'DE(BASIS)       = E(MP2/G3MP2LARGE) - ',
     *           'E(MP2/6-31G(D)) FROZEN CORE',
     *       /8X,'GEOMETRY MP2/6-31G(D) CORE CORRELATION INCLUDED')
 9710 FORMAT(8X,'ZPE AND OTHER THERMAL CALCULATIONS AT',
     *       ' B3LYP/6-31G(D)',
     *       /8X,'HLCS USED ARE:  A = ',F8.6,'     B = ',F8.6,
     *           ' HARTREE')
 9610 FORMAT(8X,'ZPE AND OTHER THERMAL CALCULATIONS AT HF/6-31G(D)',
     *       /8X,'HLCS USED ARE:  A = ',F8.6,'     B = ',F8.6,
     *           ' HARTREE')
C
 9615 FORMAT(/4X,64(1H-),/19X,'SUMMARY OF G3(MP2) CALCULATIONS',
     *   /4X,64(1H-),
     *   /4X,'MP2/6-31G(D)    =',F13.6,3X,'CCSD(T)/6-31G(D) =',F13.6,
     *   /4X,'MP2/G3MP2LARGE  =',F13.6,3X,'BASIS CONTRIBUT  =',F13.6,
     *   /4X,'ZPE(HF/6-31G(D))=',F13.6,3X,'ZPE SCALE FACTOR =',F13.6,
     *   /4X,'HLC             =',F13.6,3X,'FREE ENERGY      =',F13.6,
     *   /4X,'THERMAL ENERGY  =',F13.6,3X,'THERMAL ENTHALPY =',F13.6,
     *   /4X,64(1H-),
     *   /4X,'E(G3(MP2)) @ 0K =',F13.6,3X,'E(G3(MP2)) @298K =',F13.6,
     *   /4X,'H(G3(MP2))      =',F13.6,3X,'G(G3(MP2))       =',F13.6,
     *   /4X,64(1H-))
 9715 FORMAT(/4X,64(1H-),/19X,'SUMMARY OF G3(MP2) CALCULATIONS',
     *   /4X,64(1H-),
     *   /4X,'MP2/6-31G(D)    =',F13.6,3X,'CCSD(T)/6-31G(D) =',F13.6,
     *   /4X,'MP2/G3MP2LARGE  =',F13.6,3X,'BASIS CONTRIBUT. =',F13.6,
     *   /4X,'ZPE B3LYP/6-31GD=',F13.6,3X,'ZPE SCALE FACTOR =',F13.6,
     *   /4X,'HLC             =',F13.6,3X,'FREE ENERGY      =',F13.6,
     *   /4X,'THERMAL ENERGY  =',F13.6,3X,'THERMAL ENTHALPY =',F13.6,
     *   /4X,64(1H-),
     *   /4X,'E(G3(MP2)) @ 0K =',F13.6,3X,'E(G3(MP2)) @298K =',F13.6,
     *   /4X,'H(G3(MP2))      =',F13.6,3X,'G(G3(MP2))       =',F13.6,
     *   /4X,64(1H-))
C9800 FORMAT(/4X,64(1H-),/10X,'RESULTS ARE SUSPECT',
C    * /10X,'THERE IS NO OPEN SHELL CCSD(T) CODED CURRENTLY IN GAMESS',
C    *   /10X,'THE MULTIPLICITY IS NOT A SINGLET !!',/)
C9850 FORMAT(/4X,64(1H-),
C    *   /10X,'HEAT OF FORMATION     (0K): ',F10.2,' KCAL/MOL',
C    *   /10X,'HEAT OF FORMATION   (298K): ',F10.2,' KCAL/MOL',
C    *   /10X,'HEAT OF FORMATION (H/298K): ',F10.2,' KCAL/MOL',
C    *   /4X,64(1H-))
 9900 FORMAT(/4X,64(1H-),
     *   /10X,'HEAT OF FORMATION   (0K): ',F10.2,' KCAL/MOL',
     *   /10X,'HEAT OF FORMATION (298K): ',F10.2,' KCAL/MOL',
     *   /4X,64(1H-),
     *   /10X,'HEATS OF FORMATIONS BASED ON NIST DATABASE FROM ',
     */10X,'COMPUTATIONAL CHEMISTRY COMPARISON AND BENCHMARK DATABASE',
     *   /4X,64(1H-),/)
C
      END
C
C*MODULE G3       *DECK CHGBAS
      SUBROUTINE CHGBAS
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL DSTNCE,GOPARR,DSKWRK,MASWRK
      LOGICAL DZ,MIDI,RELNORM,DIFFSP,DIFFS
C
      PARAMETER (MXSH=5000,MXGSH=30,MXGTOT=20000,MXAO=8192,MXATM=2000,
     *           MXRT=100)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, HALF=0.5D+00, TWO=2.0D+00,
     *           PT75=0.75D+00, PT187=1.875D+00, PT6562=6.5625D+00,
     *           PT2953=29.53125D+00, PT1624=162.421875D+00,
     *           TM6=1.0D-06, TM10=1.0D-10)
C
      PARAMETER ( MAXA=103, MAXL=7)
C
      DOUBLE PRECISION LABEL(27)
C
      DIMENSION INTYP(MXSH)
C
      DIMENSION CSINP(MXGTOT),CPINP(MXGTOT),CDINP(MXGTOT),CFINP(MXGTOT)
      DIMENSION CGINP(MXGTOT),CHINP(MXGTOT),CIINP(MXGTOT)
      DIMENSION NS(MXATM),KS(MXATM),EXX(6),CSS(6),CPP(6),CDD(6),
     *          SCFAC(4),NBFS(27),MINF(27),MAXF(27),NANGM(27)
C
      COMMON /BASISC/ GBASIS,AEX(MAXA,MAXL),ABASIS(MAXA,MAXL),
     *                IAGAUS(MAXA,MAXL),IRDBAS
      COMMON /BASSPH/ QMTTOL,ISPHER
      COMMON /COMPBS/ IXGASS,NDFUNC,NFFUNC,NPFUNC,DIFFSP,DIFFS,
     *                POLAR
      COMMON /ELGPMT/ NELONG,NATM,NASPIN,NCT,NBNDAB,NTMLB,IPRI,LDOS
      COMMON /ENRGYS/ ENUCR,EELCT,ETOT,SZ,SZZ,ECORE,ESCF,EERD,E1,E2,
     *                VEN,VEE,EPOT,EKIN,ESTATE(MXRT),STATN,EDFT(2),EDISP
      COMMON /GEOMOP/ GEOM
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INTOPT/ ISCHWZ,IECP,NECP,IEXFLD
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),
     *                KNG(MXSH),KLOC(MXSH),KMIN(MXSH),
     *                KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNLAB/ TITLE(10),A(MXATM),B(MXATM),BFLAB(MXAO)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
      COMMON /TRANSF/ XSMAL,YSMAL,ZSMAL,XNEW,YNEW,ZNEW,XP,YP,ZP
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
      COMMON /ZMTALT/ NZMAT2,NZVAR2,NVAR2,NZMTRD,ICOORD
C
      DATA G3MP2/8HG3MP2   /
      DATA COMP /8HCOMP    /
      DATA RHF  /8HRHF     /
      DATA NONE /4HNONE/
C
      DATA BASSTO,BASN31,BASN21/8HSTO     ,8HN31     ,8HN21     /
      DATA BASDH, BASBC /8HDH      ,8HBC      /
      DATA BASMC, BAS311/8HMC      ,8HN311    /
      DATA BASDZV,BASTZV/8HDZV     ,8HTZV     /
      DATA BASMIN,BASMID/8HMINI    ,8HMIDI    /
      DATA BASSBK,BASSB2,BASHW /8HSBKJC     ,8HSBK     ,8HHW      /
      DATA BASPC0,BASPC1,BASPC2/8HPC0     ,8HPC1     ,8HPC2     /
      DATA BASPC3,BASPC4/8HPC3     ,8HPC4     /
      DATA BAAPC0,BAAPC1,BAAPC2/8HAPC0    ,8HAPC1    ,8HAPC2    /
      DATA BAAPC3,BAAPC4/8HAPC3    ,8HAPC4    /
      DATA BASCCD,BASCCT,BASCCQ/8HCCD     ,8HCCT     ,8HCCQ     /
      DATA BASCC5,BASCC6/8HCC5     ,8HCC6     /
      DATA BASNCD,BASNCT,BASNCQ/8HNCD     ,8HNCT     ,8HNCQ     /
      DATA BASNC5,BASNC6/8HNC5     ,8HNC6     /
      DATA BASACD,BASACT,BASACQ/8HACCD    ,8HACCT    ,8HACCQ    /
      DATA BASAC5,BASAC6/8HACC5    ,8HACC6    /
      DATA BACCCD,BACCCT,BACCCQ/8HCCDC    ,8HCCTC    ,8HCCQC    /
      DATA BACCC5,BACCC6/8HCC5C    ,8HCC6C    /
      DATA BACACD,BACACT,BACACQ/8HACCDC   ,8HACCTC   ,8HACCQC   /
      DATA BACAC5,BACAC6/8HACC5C   ,8HACC6C   /
      DATA BACWCD,BACWCT,BACWCQ/8HCCDWC   ,8HCCTWC   ,8HCCQWC   /
      DATA BACWC5,BACWC6/8HCC5WC   ,8HCC6WC   /
      DATA BACAWD,BACAWT,BACAWQ/8HACCDWC  ,8HACCTWC  ,8HACCQWC  /
      DATA BACAW5,BACAW6/8HACC5WC  ,8HACC6WC  /
      DATA BASETG/8HETGTO   /
      DATA BASG3L/8HG3L     /
      DATA BASG3LX/8HG3LX    /
      DATA BASKTZV,BASKTZVP/8HKTZV    ,8HKTZVP   /
      DATA BASKTZVPP/8HKTZVPP  /
      DATA BLANK/8H        /
C
C           THIS ROUTINE IS PARTIALLY SET TO READ M AND N SHELLS,
C           BUT THESE ARE NOT IMPLEMETED IN THE INTEGRAL PACKAGE.
C
      DATA LABEL/8HS       ,8HP       ,8HD       ,8HF       ,
     *           8HG       ,8HH       ,8HI       ,8HL       ,
     *           8H1S      ,8H2S      ,8H2P      ,8H2SP     ,
     *           8H3S      ,8H3P      ,8H3D      ,8H3SP     ,8H3SPD    ,
     *           8H4S      ,8H4P      ,8H4D      ,8H4SP     ,8H4SPD    ,
     *           8H5S      ,8H5P      ,8H5D      ,8H5SP     ,8H5SPD    /
C
      DATA NBFS/ 1, 3, 6,10,15,21,28,    4,
     *           1, 1, 3, 4,             1, 3, 6, 4,10,
     *           1, 3, 6, 4,10,          1, 3, 6, 4,10/
      DATA MINF/ 1, 2, 5,11,21,36,57,    1,
     *           1, 1, 2, 1,             1, 2, 5, 1, 1,
     *           1, 2, 5, 1, 1,          1, 2, 5, 1, 1/
      DATA MAXF/ 1, 4,10,20,35,56,84,    4,
     *           1, 1, 4, 4,             1, 4,10, 4,10,
     *           1, 4,10, 4,10,          1, 4,10, 4,10/
      DATA NANGM/1, 2, 3, 4, 5, 6, 7,    2,
     *           1, 1, 2, 2,             1, 2, 3, 2, 3,
     *           1, 2, 3, 2, 3,          1, 2, 3, 2, 3/
C
      DATA DAF/8HDAF     /
C
C     ----- USE SPHERICAL HARMONICS FOR MP2/G3MP2LARGE -----
C
      IF(RUNTYP.EQ.COMP) CALL DAWRIT(IDAF,IODA,C,3*NAT,1,0)
C
       IF(RUNTYP.EQ.COMP) ICOORD=-1
C
      IF(RUNTYP.EQ.G3MP2) THEN
       ISPHER = 1
       IGAUSS = 0
      END IF
C
      IERR1=0
      IERR2=0
C
      IGAUSS = 0
      ITYP = 0
C
C     ----- ZERO OUT BASIS SET ARRAYS -----
C
      DO 100 I = 1,MXGTOT
         EX(I) = ZERO
         CS(I) = ZERO
         CP(I) = ZERO
         CD(I) = ZERO
         CF(I) = ZERO
         CG(I) = ZERO
         CH(I) = ZERO
         CI(I) = ZERO
         CSINP(I) = ZERO
         CPINP(I) = ZERO
         CDINP(I) = ZERO
         CFINP(I) = ZERO
         CGINP(I) = ZERO
         CHINP(I) = ZERO
         CIINP(I) = ZERO
  100 CONTINUE
C
      ICNT   = 0
      NUCZ   = 0
      NFG    = 0
      NSHELL = 0
      NGAUSS = 0
      LOC    = 0
      ISH    = 0
      IG     = 0
      NAT1   = 0
      NAT1   = NAT
      NAT    = 0
      X      = ZERO
      Y      = ZERO
      Z      = ZERO
      BASIS  = BLANK
      PI     = ACOS(-ONE)
      PI32   = PI * SQRT(PI)
C
      J      = 0
      DO J=1,MXATM
       NS(J) = 0
       KS(J) = 0
      END DO
C
      SCFAC(1) = ZERO
      SCFAC(2) = ZERO
      SCFAC(3) = ZERO
      SCFAC(4) = ZERO
C
C     ------------------------------------------------------
C     ----- LOOP OVER ALL ATOMS AND GET BASIS SET -----
C     ------------------------------------------------------
C
      DO 860 ICNT=1,NAT1
      NAT      = NAT+1
      NS(ICNT) = 0
      KS(ICNT) = NSHELL+1
      NUCZ     = INT(ZAN(ICNT))
      IGAUSS   = IXGASS
      ICNT1    = 0
  200 CONTINUE
      ICNT1 = ICNT1 + 1
      NAT = ICNT
      IF(NUCZ.GT.0) THEN
         BASIS =ABASIS(NUCZ,ICNT1)
         IGAUSS=IAGAUS(NUCZ,ICNT1)
      END IF
      SCFAC(1) = ZERO
      SCFAC(2) = ZERO
      SCFAC(3) = ZERO
      SCFAC(4) = ZERO
C
      ITYP = 0
      DO I=1,27
         IF(BASIS.EQ.LABEL(I)) ITYP=I
      ENDDO
      IF(ITYP.GT.0) GO TO 500
C
      IF(IGAUSS .GT. MXGSH) THEN
         IF (MASWRK) WRITE (IW,9010) MXGSH
         CALL ABRT
      END IF
CSN
CSN   ----- FILL MOPAC PARAMETER ARRAYS -----
CSN   IN SPITE OF ITS NAME, 'CORE' CONTAINS VALENCE E- COUNT
CSN
CSN   IF(NAT.EQ.1) CALL MPCDAT
      MPCORE = 0
CSN   MPCORE = NUCZ - INT(CORE(NUCZ))
CSN   NE = NE - MPCORE
CSN   ITYP = 1
CSN   IF(NUCZ.GT.2) ITYP = 8
CSN   GO TO 500
C
C     --- FOR COMPOSITE METHODS WE NEED ALL BASIS SETS HERE ---
C
C     ----- SET UP AB INITIO BASIS SETS -----
C
CS220 CONTINUE
      CONTINUE
      IF(BASIS.EQ.BASN31) GO TO 300
      IF(BASIS.EQ.BASN21) GO TO 300
      IF(BASIS.EQ.BASDH)  GO TO 300
      IF(BASIS.EQ.BASBC)  GO TO 300
      IF(BASIS.EQ.BASMC)  GO TO 300
      IF(BASIS.EQ.BAS311) GO TO 300
      IF(BASIS.EQ.BASMIN) GO TO 300
      IF(BASIS.EQ.BASMID) GO TO 300
      IF(BASIS.EQ.BASSB2) BASIS=BASSBK  ! SBK FORCED TO CORRECT SBKJC
      IF(BASIS.EQ.BASSBK) GO TO 300
      IF(BASIS.EQ.BASHW)  GO TO 300
      IF(BASIS.EQ.BASDZV) GO TO 300
      IF(BASIS.EQ.BASTZV) GO TO 300
      IF(BASIS.EQ.BASSTO) GO TO 300
      IF(BASIS.EQ.BASPC0) GO TO 300
      IF(BASIS.EQ.BASPC1) GO TO 300
      IF(BASIS.EQ.BASPC2) GO TO 300
      IF(BASIS.EQ.BASPC3) GO TO 300
      IF(BASIS.EQ.BASPC4) GO TO 300
      IF(BASIS.EQ.BAAPC0) GO TO 300
      IF(BASIS.EQ.BAAPC1) GO TO 300
      IF(BASIS.EQ.BAAPC2) GO TO 300
      IF(BASIS.EQ.BAAPC3) GO TO 300
      IF(BASIS.EQ.BAAPC4) GO TO 300
      IF(BASIS.EQ.BASCCD) GO TO 300
      IF(BASIS.EQ.BASCCT) GO TO 300
      IF(BASIS.EQ.BASCCQ) GO TO 300
      IF(BASIS.EQ.BASCC5) GO TO 300
      IF(BASIS.EQ.BASCC6) GO TO 300
      IF(BASIS.EQ.BASACD) GO TO 300
      IF(BASIS.EQ.BASACT) GO TO 300
      IF(BASIS.EQ.BASACQ) GO TO 300
      IF(BASIS.EQ.BASAC5) GO TO 300
      IF(BASIS.EQ.BASAC6) GO TO 300
      IF(BASIS.EQ.BACCCD) GO TO 300
      IF(BASIS.EQ.BACCCT) GO TO 300
      IF(BASIS.EQ.BACCCQ) GO TO 300
      IF(BASIS.EQ.BACCC5) GO TO 300
      IF(BASIS.EQ.BACCC6) GO TO 300
      IF(BASIS.EQ.BACWCD) GO TO 300
      IF(BASIS.EQ.BACWCT) GO TO 300
      IF(BASIS.EQ.BACWCQ) GO TO 300
      IF(BASIS.EQ.BACWC5) GO TO 300
      IF(BASIS.EQ.BACWC6) GO TO 300
      IF(BASIS.EQ.BACACD) GO TO 300
      IF(BASIS.EQ.BACACT) GO TO 300
      IF(BASIS.EQ.BACACQ) GO TO 300
      IF(BASIS.EQ.BACAC5) GO TO 300
      IF(BASIS.EQ.BACAC6) GO TO 300
      IF(BASIS.EQ.BACAWD) GO TO 300
      IF(BASIS.EQ.BACAWT) GO TO 300
      IF(BASIS.EQ.BACAWQ) GO TO 300
      IF(BASIS.EQ.BACAW5) GO TO 300
      IF(BASIS.EQ.BACAW6) GO TO 300
      IF(BASIS.EQ.BASETG) GO TO 300
      IF(BASIS.EQ.BASG3L) GO TO 300
      IF(BASIS.EQ.BASG3LX) GO TO 300
      IF(BASIS.EQ.BASNCD) GO TO 300
      IF(BASIS.EQ.BASNCT) GO TO 300
      IF(BASIS.EQ.BASNCQ) GO TO 300
      IF(BASIS.EQ.BASNC5) GO TO 300
      IF(BASIS.EQ.BASNC6) GO TO 300
      IF(BASIS.EQ.BASKTZV) GO TO 300
      IF(BASIS.EQ.BASKTZVP) GO TO 300
      IF(BASIS.EQ.BASKTZVPP) GO TO 300
      IF(BASIS.EQ.BLANK)  GO TO 799
C
  300 CONTINUE
C
C     ----- STO-NG -----
C
      IF(BASIS .NE. BASSTO) GO TO 310
      CALL STONG(NUCZ,IGAUSS,CSINP,CPINP,CDINP,IERR1,IERR2,
     *           INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C     ----- N-21G -----
C
  310 CONTINUE
      IF(BASIS .NE. BASN21) GO TO 320
      CALL N21G(NUCZ,IGAUSS,CSINP,CPINP,CDINP,SCFAC,IERR1,IERR2,
     *          INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C     ----- N-31G BASIS SET -----
C
  320 CONTINUE
      IF(BASIS .NE. BASN31) GO TO 330
      CALL N31G(NUCZ,IGAUSS,CSINP,CPINP,CDINP,SCFAC,IERR1,IERR2,
     *          INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C     ----- N-311G BASIS SET -----
C
  330 CONTINUE
      IF(BASIS .NE. BAS311) GO TO 340
      CALL N311G(NUCZ,IGAUSS,CSINP,CPINP,IERR1,IERR2,
     *           INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C     ----- HUZINAGA GROUP MINI/MIDI BASIS SETS -----
C
  340 CONTINUE
      IF(BASIS.NE.BASMIN  .AND.  BASIS.NE.BASMID) GO TO 350
      MIDI=.FALSE.
      IF(BASIS.EQ.BASMID) MIDI=.TRUE.
      CALL BASHUZ(NUCZ,MIDI,CSINP,CPINP,CDINP,CFINP,SCFAC,IERR1,IERR2,
     *            INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS,
     *            EX,CS,CP,CD,CF,KSTART,KATOM,KTYPE,KNG,KLOC,
     *            KMIN,KMAX,NSHELL,MXGTOT,MXSH)
      IF(IERR1 .NE. 0) GO TO 1560
      IF(IERR2 .NE. 0) GO TO 1600
      GO TO 200
C
C     ----- "DOUBLE ZETA" BASIS SETS -----
C
  350 CONTINUE
      IF(BASIS.NE.BASDH  .AND.  BASIS.NE.BASDZV
     *      .AND.BASIS.NE.BASBC) GO TO 360
      CALL DZVBAS(NUCZ,CSINP,CPINP,CDINP,SCFAC,IERR1,IERR2,
     *            INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1 .NE. 0) GO TO 1560
      IF(IERR2 .NE. 0) GO TO 1600
      GO TO 200
C
C     ----- "TRIPLE ZETA" BASIS SETS -----
C
  360 CONTINUE
      IF(BASIS.NE.BASMC .AND. BASIS.NE.BASTZV) GO TO 361
      CALL TZVBAS(NUCZ,CSINP,CPINP,CDINP,SCFAC,IERR1,IERR2,
     *            INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS,.FALSE.)
      IF(IERR1 .NE. 0) GO TO 1560
      IF(IERR2 .NE. 0) GO TO 1600
      GO TO 200
C
C     ----- AHLRICHS TZV BASIS SETS -----
C
  361 CONTINUE
      IF(BASIS.NE.BASKTZV) GO TO 362
      CALL KTZVBAS(NUCZ,CSINP,CPINP,CDINP,IERR1,IERR2,
     *            INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1 .NE. 0) GO TO 1560
      IF(IERR2 .NE. 0) GO TO 1600
      GO TO 200
  362 CONTINUE
      IF(BASIS.NE.BASKTZVP) GO TO 363
      CALL KTZVPBAS(NUCZ,CSINP,CPINP,CDINP,IERR1,IERR2,
     *            INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1 .NE. 0) GO TO 1560
      IF(IERR2 .NE. 0) GO TO 1600
      GO TO 200
  363 CONTINUE
      IF(BASIS.NE.BASKTZVPP) GO TO 365
      CALL KTZVPPBAS(NUCZ,CSINP,CPINP,CDINP,CFINP,IERR1,IERR2,
     *            INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1 .NE. 0) GO TO 1560
      IF(IERR2 .NE. 0) GO TO 1600
      GO TO 200

C
C     ----- G3MP2-LARGE BASIS SET -----
C
  365 CONTINUE
      IF(BASIS.NE.BASG3L) GO TO 366
      CALL NG3L(NUCZ,ICNT,CSINP,CPINP,CDINP,CFINP,
     *          IERR1,IERR2,INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C     ----- G3MP2-LARGE-XP BASIS SET -----
C
  366 CONTINUE
      IF(BASIS.NE.BASG3LX) GO TO 370
      CALL NG3LX(NUCZ,ICNT,CSINP,CPINP,CDINP,CFINP,CGINP,
     *          IERR1,IERR2,INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C     ----- HAY AND WADT -ECP- BASIS SET -----
C
  370 CONTINUE
      IF(BASIS.NE.BASHW) GO TO 380
      IF(IECP.EQ.0) THEN
         IF (MASWRK) WRITE(IW,*)
     *      '*** ERROR, -HW- BASIS REQUIRES USE OF ECP'
         CALL ABRT
      END IF
C
C          AT PRESENT WE HAVE SEMI-CORE HW BASIS SETS BUILT IN,
C          BUT WE HAVE THE FULL CORE POTENTIALS BUILT IN.  THUS
C          ANY RUN MIXING THESE TWO SHOULD BE BOMBED HERE.  THIS
C          IS ALL TRANSITION METALS EXCEPT ZN,CD,HG.
C
      IMIX=0
      IF(NUCZ.GE.21  .AND.  NUCZ.LE.29) IMIX=1
      IF(NUCZ.GE.39  .AND.  NUCZ.LE.47) IMIX=1
      IF(NUCZ.EQ.57)                    IMIX=1
      IF(NUCZ.GE.72  .AND.  NUCZ.LE.79) IMIX=1
      IF(IMIX.EQ.1) THEN
         IF(MASWRK) WRITE(IW,*) '-HW- TM BASIS SETS ARE NOT BUILT IN'
         CALL ABRT
      END IF
C
      CALL HWBAS(2,NUCZ,CSINP,CPINP,CDINP,IERR1,IERR2,
     *           INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS,
     *           EX,CS,CP,CD,KSTART,KATOM,KTYPE,KNG,KLOC,
     *           KMIN,KMAX,NSHELL,MXGTOT,MXSH)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C     ----- STEVENS, BASCH, KRAUS, JASIEN, CUNDARI -ECP- BASIS SET -----
C
  380 CONTINUE
      IF(BASIS.NE.BASSBK) GO TO 390
      IF(IECP.EQ.0) THEN
         IF (MASWRK) WRITE(IW,*)
     *      '*** ERROR, -SBKJC- BASIS REQUIRES USE OF ECP IN $CONTRL'
         CALL ABRT
      END IF
      CALL SBKBAS(NUCZ,CSINP,CPINP,CDINP,CFINP,IERR1,IERR2,
     *            INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C     ----- PC-N BASIS SET -----
C
  390 CONTINUE
      IF(BASIS.NE.BASPC0 .AND. BASIS.NE.BASPC1 .AND.
     $   BASIS.NE.BASPC2 .AND. BASIS.NE.BASPC3 .AND.
     $   BASIS.NE.BASPC4 .AND. BASIS.NE.BAAPC0 .AND.
     $   BASIS.NE.BAAPC1 .AND. BASIS.NE.BAAPC2 .AND.
     $   BASIS.NE.BAAPC3 .AND. BASIS.NE.BAAPC4) GO TO 400
      NPOL = 999
      IF(BASIS.EQ.BASPC0) NPOL = 0
      IF(BASIS.EQ.BASPC1) NPOL = 1
      IF(BASIS.EQ.BASPC2) NPOL = 2
      IF(BASIS.EQ.BASPC3) NPOL = 3
      IF(BASIS.EQ.BASPC4) NPOL = 4
      IF(BASIS.EQ.BAAPC0) NPOL = 10
      IF(BASIS.EQ.BAAPC1) NPOL = 11
      IF(BASIS.EQ.BAAPC2) NPOL = 12
      IF(BASIS.EQ.BAAPC3) NPOL = 13
      IF(BASIS.EQ.BAAPC4) NPOL = 14
      CALL PCNBAS(NUCZ,CSINP,CPINP,CDINP,CFINP,CGINP,CHINP,CIINP,
     *            IERR1,IERR2,
     *            INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS,NPOL)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C     ----- CC-PVNZ BASIS SET -----
C
  400 CONTINUE
      IF(BASIS.NE.BASCCD .AND. BASIS.NE.BASCCT .AND.
     $   BASIS.NE.BASCCQ .AND. BASIS.NE.BASCC5 .AND.
     $   BASIS.NE.BASCC6 .AND. BASIS.NE.BASACD .AND.
     $   BASIS.NE.BASACT .AND. BASIS.NE.BASACQ .AND.
     $   BASIS.NE.BASAC5 .AND. BASIS.NE.BASAC6 .AND.
     $   BASIS.NE.BACCCD .AND. BASIS.NE.BACCCT .AND.
     $   BASIS.NE.BACCCQ .AND. BASIS.NE.BACCC5 .AND.
     $   BASIS.NE.BACCC6 .AND. BASIS.NE.BACACD .AND.
     $   BASIS.NE.BACACT .AND. BASIS.NE.BACACQ .AND.
     $   BASIS.NE.BACAC5 .AND. BASIS.NE.BACAC6 .AND.
     $   BASIS.NE.BACWCD .AND. BASIS.NE.BACWCT .AND.
     $   BASIS.NE.BACWCQ .AND. BASIS.NE.BACWC5 .AND.
     $   BASIS.NE.BACWC6 .AND. BASIS.NE.BACAWD .AND.
     $   BASIS.NE.BACAWT .AND. BASIS.NE.BACAWQ .AND.
     $   BASIS.NE.BACAW5 .AND. BASIS.NE.BACAW6 .AND.
     $   BASIS.NE.BASNCD .AND. BASIS.NE.BASNCT .AND.
     $   BASIS.NE.BASNCQ .AND. BASIS.NE.BASNC5 .AND.
     $   BASIS.NE.BASNC6) GO TO 410

      NPOL = 999
      IF(BASIS.EQ.BASCCD) NPOL = 1
      IF(BASIS.EQ.BASCCT) NPOL = 2
      IF(BASIS.EQ.BASCCQ) NPOL = 3
      IF(BASIS.EQ.BASCC5) NPOL = 4
      IF(BASIS.EQ.BASCC6) NPOL = 5
      IF(BASIS.EQ.BASACD) NPOL = 11
      IF(BASIS.EQ.BASACT) NPOL = 12
      IF(BASIS.EQ.BASACQ) NPOL = 13
      IF(BASIS.EQ.BASAC5) NPOL = 14
      IF(BASIS.EQ.BASAC6) NPOL = 15
      IF(BASIS.EQ.BACCCD) NPOL = 101
      IF(BASIS.EQ.BACCCT) NPOL = 102
      IF(BASIS.EQ.BACCCQ) NPOL = 103
      IF(BASIS.EQ.BACCC5) NPOL = 104
      IF(BASIS.EQ.BACCC6) NPOL = 105
      IF(BASIS.EQ.BACWCD) NPOL = 201
      IF(BASIS.EQ.BACWCT) NPOL = 202
      IF(BASIS.EQ.BACWCQ) NPOL = 203
      IF(BASIS.EQ.BACWC5) NPOL = 204
      IF(BASIS.EQ.BACWC6) NPOL = 205
      IF(BASIS.EQ.BACACD) NPOL = 111
      IF(BASIS.EQ.BACACT) NPOL = 112
      IF(BASIS.EQ.BACACQ) NPOL = 113
      IF(BASIS.EQ.BACAC5) NPOL = 114
      IF(BASIS.EQ.BACAC6) NPOL = 115
      IF(BASIS.EQ.BACAWD) NPOL = 211
      IF(BASIS.EQ.BACAWT) NPOL = 212
      IF(BASIS.EQ.BACAWQ) NPOL = 213
      IF(BASIS.EQ.BACAW5) NPOL = 214
      IF(BASIS.EQ.BACAW6) NPOL = 215
      IF(BASIS.EQ.BASNCD) NPOL = 21
      IF(BASIS.EQ.BASNCT) NPOL = 22
      IF(BASIS.EQ.BASNCQ) NPOL = 23
      IF(BASIS.EQ.BASNC5) NPOL = 24
      IF(BASIS.EQ.BASNC6) NPOL = 25
      CALL CCNBAS(NUCZ,CSINP,CPINP,CDINP,CFINP,CGINP,CHINP,CIINP,
     *            IERR1,IERR2,
     *            INTYP,NANGM,NBFS,MINF,MAXF,LOC,NGAUSS,NS,NPOL)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
C         SCHMIDT/RUEDENBERG EVEN-TEMPERED GTO BASIS SETS
C         NEAR SCF (I.E. < 0.001 HARTREE) GENERAL CONTRACTIONS
C         THESE BASIS SETS ARE NOT DOCUMENTED.
C         FOR ELEMENTS ABOVE ARGON, THESE WILL BE WELL-TEMPERED
C         BUT SORRY, MARIUSZ, THE KEYWORD IS STILL EVEN-TEMPERED.
C
  410 CONTINUE
      IF(BASIS.NE.BASETG) GO TO 420
      DZ=.TRUE.
      IF(NUCZ.GT.18) DZ=.FALSE.
      CALL ETGTO(NUCZ,DZ,CSINP,CPINP,CDINP,IERR1,IERR2,LOC,
     *           INTYP,NANGM,NBFS,MINF,MAXF,NS,
     *           EX,CS,CP,CD,KSTART,KATOM,KTYPE,
     *           KNG,KLOC,KMIN,KMAX,NGAUSS,NSHELL,MXGTOT,MXSH)
      IF(IERR1.NE.0) GO TO 1560
      IF(IERR2.NE.0) GO TO 1600
      GO TO 200
C
  420 CONTINUE
      IF (MASWRK) WRITE(IW,*) 'CHGBAS: IT IS NOT POSSIBLE TO GET HERE!'
      CALL ABRT
C
  500 CONTINUE
      NSHELL = NSHELL + 1
      IF(NSHELL.GT.MXSH) GO TO 1560
      KMIN(NSHELL) = MINF(ITYP)
      KMAX(NSHELL) = MAXF(ITYP)
      KSTART(NSHELL) = NGAUSS+1
      KATOM(NSHELL) = ICNT
CSN   KATOM(NSHELL) = NAT
      KTYPE(NSHELL) = NANGM(ITYP)
      INTYP(NSHELL) = ITYP
      KNG(NSHELL) = IGAUSS
      KLOC(NSHELL) = LOC+1
      NGAUSS = NGAUSS+IGAUSS
      IF(NGAUSS.GT.MXGTOT) GO TO 1600
      LOC = LOC+NBFS(ITYP)
      K1 = KSTART(NSHELL)
      K2 = K1+KNG(NSHELL)-1
      NS(NAT) = NS(NAT)+1
C
C        THIS BRANCH IS FOR THE EXPLICIT STO SHELL INPUT (UNDOCUMENTED)
C
      IF(ITYP.GT.8) GO TO 600
C
C        MOPAC USES STO BASIS SETS
C
      IF(MPCTYP.NE.NONE) GO TO 800
C
C     ----- GENERAL BASIS SET (S, P, D, F, G, H, I, OR L) -----
C
      IF(SCFAC(1) .LE. ZERO) SCFAC(1) = ONE
      IDUM=0
      DO 520 K = K1,K2
         C2 = ZERO
         C4 = ZERO
            IDUM = IDUM+1
            EX(K) = AEX(NUCZ,ICNT1)
            IF(EX(K).LE.ZERO) THEN
               IF (MASWRK) WRITE(IW,*)'CHECK ATOMNM,NUCZ,BASIS'
               CALL ABRT
         END IF
C
         RELNORM=.TRUE.
C
         IF(RELNORM) THEN
            IF(IGAUSS.EQ.1) C2=ONE
            IF(IGAUSS.EQ.1) C4=ONE
         END IF
C
         IF (MASWRK) THEN
            IF(ITYP.LE.7) WRITE (IP,8010) IDUM,EX(K),C2
            IF(ITYP.EQ.8) WRITE (IP,8010) IDUM,EX(K),C2,C4
         END IF
         EX(K) = EX(K) * SCFAC(1)**2
         IF(ITYP.EQ.1) CSINP(K) = C2
         IF(ITYP.EQ.2) CPINP(K) = C2
         IF(ITYP.EQ.3) CDINP(K) = C2
         IF(ITYP.EQ.4) CFINP(K) = C2
         IF(ITYP.EQ.5) CGINP(K) = C2
         IF(ITYP.EQ.6) CHINP(K) = C2
         IF(ITYP.EQ.7) CIINP(K) = C2
C            L SHELL HAS S AND P CONTRACTION COEFS
         IF(ITYP.EQ.8) CSINP(K) = C2
         IF(ITYP.EQ.8) CPINP(K) = C4
C
         CS(K) = CSINP(K)
         CP(K) = CPINP(K)
         CD(K) = CDINP(K)
         CF(K) = CFINP(K)
         CG(K) = CGINP(K)
         CH(K) = CHINP(K)
         CI(K) = CIINP(K)
  520 CONTINUE
      GO TO 700
C
C     ----- STO-NG BASIS SET -----
C     EXPLICITLY INPUT BY MEANS OF 1S, 2S, 2P, 2SP, ... SHELLS
C     THIS IS AN UNDOCUMENTED INPUT OPTION.
C
  600 CONTINUE
      IF(NUCZ .GT. 54) CALL BERROR(1)
      DO 630 I = 1,IGAUSS
         EXX(I) = ZERO
         CSS(I) = ZERO
         CPP(I) = ZERO
         CDD(I) = ZERO
  630 CONTINUE
      IBRNCH = ITYP-8
C
      GO TO (601,602,603,604,605,606,607,608,609,610,611,
     *       612,613,614,615,616,617,618,619), IBRNCH
C
  601 CALL S1S(EXX,CSS,IGAUSS)
      STOSC = STOSF(NUCZ,1,0)
      GO TO 640
C
  602 CALL S2S(EXX,CSS,IGAUSS)
      STOSC = STOSF(NUCZ,2,0)
      GO TO 640
C
  603 CALL S2P(EXX,CPP,IGAUSS)
      STOSC = STOSF(NUCZ,2,0)
      GO TO 640
C
  604 CALL S2SP(EXX,CSS,CPP,IGAUSS)
      STOSC = STOSF(NUCZ,2,0)
      GO TO 640
C
  605 CALL S3S(EXX,CSS,IGAUSS)
      STOSC = STOSF(NUCZ,3,0)
      GO TO 640
C
  606 CALL S3P(EXX,CPP,IGAUSS)
      STOSC = STOSF(NUCZ,3,0)
      GO TO 640
C
  607 CALL S3D(EXX,CDD,IGAUSS)
      STOSC = STOSF(NUCZ,3,1)
      GO TO 640
C
  608 CALL S3SP(EXX,CSS,CPP,IGAUSS)
      STOSC = STOSF(NUCZ,3,0)
      GO TO 640
C
  609 CALL S3SPD(EXX,CSS,CPP,CDD,IGAUSS)
      STOSC = STOSF(NUCZ,3,0)
      IF(MASWRK) WRITE(IW,*) 'STO -3M- SHELLS DO NOT EXIST'
      CALL ABRT
      GO TO 640
C
  610 CALL S4S(EXX,CSS,IGAUSS)
      STOSC = STOSF(NUCZ,4,0)
      GO TO 640
C
  611 CALL S4P(EXX,CPP,IGAUSS)
      STOSC = STOSF(NUCZ,4,0)
      GO TO 640
C
  612 CALL S4D(EXX,CDD,IGAUSS)
      STOSC = STOSF(NUCZ,4,1)
      GO TO 640
C
  613 CALL S4SP(EXX,CSS,CPP,IGAUSS)
      STOSC = STOSF(NUCZ,4,0)
      GO TO 640
C
  614 CALL S4SPD(EXX,CSS,CPP,CDD,IGAUSS)
      STOSC = STOSF(NUCZ,4,0)
      IF(MASWRK) WRITE(IW,*) 'STO -4M- SHELLS DO NOT EXIST'
      CALL ABRT
      GO TO 640
C
  615 CALL S5S(EXX,CSS,IGAUSS)
      STOSC = STOSF(NUCZ,5,0)
      GO TO 640
C
  616 CALL S5P(EXX,CPP,IGAUSS)
      STOSC = STOSF(NUCZ,5,0)
      GO TO 640
C
  617 CALL S5D(EXX,CDD,IGAUSS)
      STOSC = STOSF(NUCZ,5,0)
      GO TO 640
C
  618 CALL S5SP(EXX,CSS,CPP,IGAUSS)
      STOSC = STOSF(NUCZ,4,0)
      GO TO 640
C
  619 CALL BERROR(1)
      STOSC = ZERO
C
  640 CONTINUE
      IF(SCFAC(1) .GT. ZERO) STOSC=SCFAC(1)
      DO 650 I = 1,IGAUSS
         K = K1+I-1
         EX(K) = EXX(I)*STOSC*STOSC
         CSINP(K) = CSS(I)
         CPINP(K) = CPP(I)
         CDINP(K) = CDD(I)
         CS(K) = CSINP(K)
         CP(K) = CPINP(K)
         CD(K) = CDINP(K)
  650 CONTINUE
C
C     IF(NORMP.NE.1) ... UNNORMALIZATION OF THE PRIMITIVE FUNCTIONS.
C     IF CONTRACTION COEFFICIENTS ARE GIVEN IN TERMS OF NORMALIZED
C     PRIMITIVE FUNCTIONS, CHANGE THEM TO GO WITH UNNORMALIZED
C     PRIMITIVES.
C     FOR D SHELLS, THE INPUT COEFFICIENTS CD MUST BE THE COEFFICIENTS
C     CORRESPONDING TO THE NORMALIZED PRIMITIVE X**2 *EXP(-A*R**2).
C
  700 CONTINUE
      IF(NORMP .EQ. 1) GO TO 730
      FACS = ZERO
      FACP = ZERO
      FACD = ZERO
      FACF = ZERO
      FACG = ZERO
      FACH = ZERO
      FACI = ZERO
      DO 720 IG = K1,K2
         EE = EX(IG)+EX(IG)
         FACS = PI32/(EE*SQRT(EE))
         FACP = HALF  *FACS/EE
         FACD = PT75  *FACS/(EE*EE)
         FACF = PT187 *FACS/(EE**3)
         FACG = PT6562*FACS/(EE**4)
         FACH = PT2953*FACS/(EE**5)
         FACI = PT1624*FACS/(EE**6)
         CS(IG) = CS(IG)/SQRT(FACS)
         CP(IG) = CP(IG)/SQRT(FACP)
         CD(IG) = CD(IG)/SQRT(FACD)
         CF(IG) = CF(IG)/SQRT(FACF)
         CG(IG) = CG(IG)/SQRT(FACG)
         CH(IG) = CH(IG)/SQRT(FACH)
         CI(IG) = CI(IG)/SQRT(FACI)
  720 CONTINUE
C
C     IF(NORMF.NE.1) NORMALIZE THE CONTRACTED BASIS FUNCTIONS.
C
  730 CONTINUE
      IF(NORMF .EQ. 1) GO TO 200
      FACS = ZERO
      FACP = ZERO
      FACD = ZERO
      FACF = ZERO
      FACG = ZERO
      FACH = ZERO
      FACI = ZERO
      DO 770 IG = K1,K2
         DO 760 JG = K1,IG
            EE = EX(IG)+EX(JG)
            FAC = EE*SQRT(EE)
            DUMS = CS(IG)*CS(JG)/FAC
            DUMP = HALF  *CP(IG)*CP(JG)/(EE*FAC)
            DUMD = PT75  *CD(IG)*CD(JG)/(EE*EE*FAC)
            DUMF = PT187 *CF(IG)*CF(JG)/(EE**3*FAC)
            DUMG = PT6562*CG(IG)*CG(JG)/(EE**4*FAC)
            DUMH = PT2953*CH(IG)*CH(JG)/(EE**5*FAC)
            DUMI = PT1624*CI(IG)*CI(JG)/(EE**6*FAC)
            IF(IG .NE. JG) THEN
               DUMS = DUMS+DUMS
               DUMP = DUMP+DUMP
               DUMD = DUMD+DUMD
               DUMF = DUMF+DUMF
               DUMG = DUMG+DUMG
               DUMH = DUMH+DUMH
               DUMI = DUMI+DUMI
            END IF
            FACS = FACS+DUMS
            FACP = FACP+DUMP
            FACD = FACD+DUMD
            FACF = FACF+DUMF
            FACG = FACG+DUMG
            FACH = FACH+DUMH
            FACI = FACI+DUMI
  760    CONTINUE
  770 CONTINUE
C
      IF(FACS .LT. TM10) THEN
         FACS=ZERO
      ELSE
         FACS = ONE/SQRT(FACS*PI32)
         IF((ABS(FACS-ONE).GT.TM6).AND.MASWRK)
     *      WRITE(IW,9040) NAT,NSHELL,'S',FACS
      END IF
C
      IF(FACP .LT. TM10) THEN
         FACP=ZERO
      ELSE
         FACP = ONE/SQRT(FACP*PI32)
         IF((ABS(FACP-ONE).GT.TM6).AND.MASWRK)
     *      WRITE(IW,9040) NAT,NSHELL,'P',FACP
      END IF
C
      IF(FACD .LT. TM10) THEN
         FACD=ZERO
      ELSE
         FACD = ONE/SQRT(FACD*PI32)
         IF((ABS(FACD-ONE).GT.TM6).AND.MASWRK)
     *      WRITE(IW,9040) NAT,NSHELL,'D',FACD
      END IF
C
      IF(FACF .LT. TM10) THEN
         FACF=ZERO
      ELSE
         FACF = ONE/SQRT(FACF*PI32)
         IF((ABS(FACF-ONE).GT.TM6).AND.MASWRK)
     *      WRITE(IW,9040) NAT,NSHELL,'F',FACF
      END IF
C
      IF(FACG .LT. TM10) THEN
         FACG=ZERO
      ELSE
         FACG = ONE/SQRT(FACG*PI32)
         IF((ABS(FACG-ONE).GT.TM6).AND.MASWRK)
     *      WRITE(IW,9040) NAT,NSHELL,'G',FACG
      END IF
C
      IF(FACH .LT. TM10) THEN
         FACH=ZERO
      ELSE
         FACH = ONE/SQRT(FACH*PI32)
         IF((ABS(FACH-ONE).GT.TM6).AND.MASWRK)
     *      WRITE(IW,9040) NAT,NSHELL,'H',FACH
      END IF
C
      IF(FACI .LT. TM10) THEN
         FACI=ZERO
      ELSE
         FACI = ONE/SQRT(FACI*PI32)
         IF((ABS(FACI-ONE).GT.TM6).AND.MASWRK)
     *      WRITE(IW,9040) NAT,NSHELL,'I',FACI
      END IF
C
      IF(.NOT.RELNORM) GO TO 200
C
      DO 790 IG = K1,K2
         CS(IG) = CS(IG) * FACS
         CP(IG) = CP(IG) * FACP
         CD(IG) = CD(IG) * FACD
         CF(IG) = CF(IG) * FACF
         CG(IG) = CG(IG) * FACG
         CH(IG) = CH(IG) * FACH
         CI(IG) = CI(IG) * FACI
         CSINP(IG) = CSINP(IG) * FACS
         CPINP(IG) = CPINP(IG) * FACP
         CDINP(IG) = CDINP(IG) * FACD
         CFINP(IG) = CFINP(IG) * FACF
         CGINP(IG) = CGINP(IG) * FACG
         CHINP(IG) = CHINP(IG) * FACH
         CIINP(IG) = CIINP(IG) * FACI
  790 CONTINUE
      GO TO 200
C
C     ----- END OF READING BASIS -----
C
  799 CONTINUE
C
C     ---- GENERATING EQUIVALENT CENTERS ----
C
      XS = 0
      YS = 0
      ZS = 0
      XSMAL = 0
      YSMAL = 0
      ZSMAL = 0
      NAT0  = 0
  800 CONTINUE
      XS = C(1,ICNT)
      YS = C(2,ICNT)
      ZS = C(3,ICNT)
      XS = X
      YS = Y
      ZS = Z
      CALL LOCAL(X,Y,Z,XS,YS,ZS)
      XSMAL = XS
      YSMAL = YS
      ZSMAL = ZS
      NAT0  = NAT
      NUAT  = 0
      J     = 0
      JJ    = 0
      NN    = 0
CSN
      NS(ICNT)=NS(NAT)
      DO 820 IT = 1,NT
         IF(IT .EQ. 1) GO TO 820
         NN = 9*(IT-1)
         CALL TRANS(NN)
         CALL ROT
C
C            IF THIS IS A NEORUN W/POSITRONS,
C            NEED TO SET FLAGS (QMCHKA/B) FOR QUANTUM NUCLEI
C
CSN      IF((NEORUN.EQ.1) .AND.POSNEO) THEN
CSN         QMCHKA=.FALSE.
CSN         DO J = 1,20
CSN            IF( IUNIQA(J) .EQ. NAT ) QMCHKA=.TRUE.
CSN         ENDDO
CSN      END IF
C
CSN
         DO 810 IAT = 1,NAT
CSN         IF((NEORUN.EQ.1).AND.POSNEO) THEN
CSN            QMCHKB=.FALSE.
CSN            DO J = 1,20
CSN               IF( IAT .EQ. IUNIQA(J) )  QMCHKB=.TRUE.
CSN            ENDDO
CSN         END IF
            TEST = (XP-C(1,IAT))**2+(YP-C(2,IAT))**2+(ZP-C(3,IAT))**2
C
C     FOR NEO RUN WITH POSITRONS, SPECIAL CHECK REQUIRED, FOR IT IS
C     OK TO HAVE THE POSITRON BASIS SET CENTERED ON AN ACTUAL ATOM.
C
               IF(TEST .LE. 1.0D-12) GO TO 820
  810    CONTINUE
         NUAT = NAT
         NAT = NAT+1
         IF(NAT.GE.NAT1) GO TO 820
         IF(NAT.GT.MXATM) GO TO 1540
         C(1,NAT) = C(1,NUAT)
         C(2,NAT) = C(2,NUAT)
         C(3,NAT) = C(3,NUAT)
         C(1,NUAT) = XP
         C(2,NUAT) = YP
         C(3,NUAT) = ZP
         NS(NAT) = NS(NAT0)
         KS(NAT) = KS(NAT-1)+NS(NAT0)
c        A(NAT) = A(NAT0)
c        B(NAT) = B(NAT0)
c        ZAN(NAT) = ZAN(NAT0)
         NE = NE + INT(ZAN(NAT)) - MPCORE
         NSHELL = NSHELL+NS(NAT)
         NS1 = NS(NAT)
         J = KS(NAT0)
         JJ = KS(NAT)
         CALL ATOMSS(NBFS,NAT,LOC,NS1
     *              ,KMIN(J),KMAX(J),KSTART(J),KTYPE(J),KNG(J),INTYP(J)
     *              ,KATOM(JJ)
     *              ,KMIN(JJ),KMAX(JJ),KSTART(JJ),KTYPE(JJ),KNG(JJ)
     *              ,INTYP(JJ),KLOC(JJ))
         NS(ICNT)=NS(NAT)
  820 CONTINUE
C
  860 CONTINUE
      call flshbf(6)
C
C     ----- FORM TRANSFORMATION TABLES FOR ATOMS AND SHELLS.-----
C
      IAT = 0
      nat = nat1
      DO 1050 IAT = 1,NAT
         NS1 = KS(IAT)-1
         NS2 = NS(IAT)
         X = C(1,IAT)
         Y = C(2,IAT)
         Z = C(3,IAT)
         XS = X
         YS = Y
         ZS = Z
         CALL LOCAL(X,Y,Z,XS,YS,ZS)
         XSMAL = XS
         YSMAL = YS
         ZSMAL = ZS
         DO 1040 IT = 1,NT
            NN = 9*(IT-1)
            CALL TRANS(NN)
            CALL ROT
            ICTR = -2**20
            DO 1010 I = 1,NAT
               TEST = (XP-C(1,I))**2+(YP-C(2,I))**2+(ZP-C(3,I))**2
               IF(TEST .GT. TM10) GO TO 1010
               ICTR = I
               GO TO 1020
 1010       CONTINUE
 1020       MAPCTR(IAT,IT) = ICTR
            NS3 = KS(ICTR)-1
            DO 1030 ISH = 1,NS2
               MAPSHL(NS1+ISH,IT) = NS3+ISH
 1030       CONTINUE
 1040    CONTINUE
 1050 CONTINUE
C
C     ----- READ COORDINATES FROM DAF IF REQUESTED -----
C     THESE WILL BE USED IN PLACE OF THOSE JUST READ.
C
CSN   GEOM = DAF
      IF(RUNTYP.EQ.COMP) GEOM = DAF
      IF(GEOM.EQ.DAF) CALL DAREAD(IDAF,IODA,C,3*NAT,1,0)
C
C     ----- PRINT ATOMIC COORDINATES AND SHELL DESCRIPTIONS -----
C
      nat = nat1
      IF (MASWRK) THEN
        IF(NFG.EQ.0) THEN
         WRITE (IW,9050)
         DO 1100 IAT = 1,NAT
            WRITE (IW,9060) A(IAT),B(IAT),ZAN(IAT),
     *                      C(1,IAT),C(2,IAT),C(3,IAT)
 1100    CONTINUE
        ELSE
         WRITE(IW,9055)
         DO 1150 IAT = 1,NAT
            WRITE(IW,9065) A(IAT),B(IAT),ZAN(IAT)
 1150    CONTINUE
        END IF
      END IF
C
C     ----- PRINT INTERNUCLEAR DISTANCE TABLE -----
C     FRAGMENT MOLECULAR ORBITAL AND ELONGATION METHOD AVOID IT
C
      DSTNCE = .TRUE.
      IF(NFG.GT.0) DSTNCE=.FALSE.
      IF(NELONG.GE.2 .AND. NAT.LE.100) DSTNCE=.FALSE.
      IF(DSTNCE) CALL INTR
C
C     ----- PRINT OUT THE BASIS FUNCTIONS USED -----
C
      IF (MASWRK) THEN
      IF(NFG.EQ.0) THEN
        WRITE (IW,9080)
      ELSE
        WRITE (IW,9085)
      END IF
      IF(NORMP .NE. 1) WRITE (IW,9090)
      IF(NORMF .NE. 1) WRITE (IW,9100)
      WRITE (IW,9110)
      MLDNDA=0
      DO 1420 IAT = 1,NAT
         DO 1260 IT = 1,NT
            IF(MAPCTR(IAT,IT) .GT. IAT) GO TO 1420
 1260    CONTINUE
         WRITE (IW,9120) A(IAT),B(IAT)
         NS1 = KS(IAT)
         NS2 = NS1+NS(IAT)-1
         MLDNDA=MLDNDA+1
C
         DO 1400 ISH = NS1,NS2
            WRITE (IW,9130)
            I1 = KSTART(ISH)
            I2 = I1+KNG(ISH)-1
            ITYP = INTYP(ISH)
C
            DO 1380 IG = I1,I2
C
C         -ITYP- IS AN INDEX INTO THE TABLE OF -LABEL- VALUES ABOVE.
C         1-7=S,P,D,F,G,H,I AND 8=L ARE THE BASIC TYPES OF MOST SETS.
C         9-27 ARE ARCHAIC UNDOCUMENTED STO SUBSHELLS STRINGS, WHICH
C         CONSIST OF S,P,D,L AND UNIMPLEMENTED -M- SHELLS.
C
               GO TO (1280,1290,1300,1310,
     *                1320,1330,1340,1350,
     *                1280,
     *                1280,1290,     1350,
     *                1280,1290,1300,1350,1360,
     *                1280,1290,1300,1350,1360,
     *                1280,1290,1300,1350,1360), ITYP
C
C -----PRINTOUTS ARE BASED ON COMMON BLOCK ELEMENTS------
C -----RATHER THAN THROUGH ROUTINE CALLS-----
C
 1280          C2=CSINP(IG)
               WRITE(IW,9140) ISH,LABEL(ITYP),IG,EX(IG),C2
               GO TO 1380
C
 1290          C2=CPINP(IG)
               WRITE(IW,9140) ISH,LABEL(ITYP),IG,EX(IG),C2
               GO TO 1380
C
 1300          C2=CDINP(IG)
               WRITE(IW,9140) ISH,LABEL(ITYP),IG,EX(IG),C2
               GO TO 1380
C
 1310          C2=CFINP(IG)
               WRITE(IW,9140) ISH,LABEL(ITYP),IG,EX(IG),C2
               GO TO 1380
C
 1320          C2=CGINP(IG)
               WRITE(IW,9140) ISH,LABEL(ITYP),IG,EX(IG),C2
               GO TO 1380
C
 1330          C2=CHINP(IG)
               WRITE(IW,9140) ISH,LABEL(ITYP),IG,EX(IG),C2
               GO TO 1380
C
 1340          C2=CIINP(IG)
               WRITE(IW,9140) ISH,LABEL(ITYP),IG,EX(IG),C2
               GO TO 1380
C
 1350          C2=CSINP(IG)
               C4=CPINP(IG)
               WRITE (IW,9140) ISH,LABEL(ITYP),IG,EX(IG),C2,C4
               GO TO 1380
C
 1360          IF(MASWRK) WRITE(IW,*) 'STO -M- SHELLS DO NOT EXIST'
               CALL ABRT
C
 1380       CONTINUE
 1400    CONTINUE
 1420 CONTINUE
C
      END IF
C
C     KILL JOB IF DIMENSIONS HAVE BEEN EXCEEDED
C
 1540 IF(NAT .LE. MXATM) GO TO 1560
      IF (MASWRK) WRITE (IW,9230) MXATM
      CALL ABRT
C
 1560 IF(NSHELL .LE. MXSH) GO TO 1580
      IF (MASWRK) WRITE (IW,9240) MXSH
      CALL ABRT
C
 1580 IF(LOC .LE. MXAO) GO TO 1600
      IF (MASWRK) WRITE (IW,9250) MXAO
      CALL ABRT
C
 1600 IF(NGAUSS .LE. MXGTOT) GO TO 1620
      IF (MASWRK) WRITE (IW,9260) MXGTOT
      CALL ABRT
C
C     ESTABLISH NUMBER OF ELECTRONS, MULTIPLICITY, ETC.
C     LATER, NQMT MAY BE RESET TO VALUES SMALLER THAN NUM.
C
 1620 CONTINUE
      NUM  = LOC
      NQMT = LOC
      NE = NE-ICH
      NA = (NE+MUL-1)/2
      NB = (NE-MUL+1)/2
      IF (MASWRK) THEN
         WRITE(IW,9270) NSHELL,NUM
         IF(ISPHER.EQ.1) WRITE(IW,9271)
         WRITE(IW,9272) NE,ICH,MUL,NA,NB,NAT
      END IF
C
C     ----- CALCULATE "CORRECT" NRE FIRST -----
C     THIS UTILIZES TRUE NUCLEAR CHARGES, NOT OMITTING
C     ANY PROTONS YET FOR SEMI-EMPIRICAL OR FOR ECP RUNS.
C
      ENUCR  = ENUC(NAT,ZAN,C)
      IF (MASWRK) THEN
         WRITE(IW,9280) ENUCR
         IF(IECP.NE.0) WRITE(IW,9282)
      END IF
         IF(NA+NB .NE. NE) THEN
         IF (MASWRK) WRITE(IW,9290) NE,ICH,MUL
         CALL ABRT
         STOP
      END IF
      IF(SCFTYP.EQ.RHF .AND. MUL.NE.1) THEN
         IF (MASWRK) WRITE(IW,9300)
         CALL ABRT
         STOP
      END IF
C 850 CONTINUE
C
C     WRITE ENERGY, MULTIPLICITY RECORD TO DAF
C
      EELCT= ZERO
      ETOT = ENUCR
      SZ   = (MUL+1)/TWO
      SZZ  = SZ*(SZ+ONE)
      ECORE= ZERO
      ESCF = ZERO
      EERD = ZERO
      E1   = ZERO
      E2   = ZERO
      VEN  = ZERO
      VEE  = ZERO
      EPOT = ZERO
      EKIN = ZERO
      DO 1640 I=1,10
         ESTATE(I)=ZERO
 1640 CONTINUE
      STATN=ZERO
C
      RETURN
C
 8010 FORMAT(3X,I3,1X,F25.10,2F12.8)
 9010 FORMAT(1X,'*** ERROR, NO MORE THAN',I6,' GAUSSIANS PER SHELL')
 9040 FORMAT(1X,'*** WARNING! ATOM',I4,' SHELL',I5,' TYPE ',A1,
     *       ' HAS NORMALIZATION',F13.8)
 9050 FORMAT(/1X,'ATOM',6X,'ATOMIC',22X,'COORDINATES (BOHR)'/
     *         11X,'CHARGE',9X,'X',19X,'Y',19X,'Z')
 9055 FORMAT(/1X,'ATOM',3X,'ATOMIC CHARGE')
 9060 FORMAT(1X,A8,A2,F5.1,F17.10,2F20.10)
 9065 FORMAT(1X,A8,A2,F5.1)
 9080 FORMAT(/5X,'ATOMIC BASIS SET'/5X,16(1H-))
 9085 FORMAT(/5X,'ATOMIC BASIS SET LIBRARY'/5X,16(1H-))
 9090 FORMAT(1X,'THE CONTRACTED PRIMITIVE FUNCTIONS HAVE BEEN',
     *          ' UNNORMALIZED')
 9100 FORMAT(1X,'THE CONTRACTED BASIS FUNCTIONS ARE NOW NORMALIZED',
     *          ' TO UNITY')
 9110 FORMAT(/1X,'SHELL TYPE PRIMITIVE    EXPONENT',
     *       10X,'CONTRACTION COEFFICIENTS')
 9120 FORMAT(/1X,A8,A2)
 9130 FORMAT(1X)
 9140 FORMAT(1X,I3,3X,A2,I4,F20.7,4F20.12)
 9230 FORMAT(1X,'*** ERROR, NO MORE THAN',I6,' TOTAL ATOMS')
 9240 FORMAT(1X,'*** ERROR, NO MORE THAN',I6,' TOTAL SHELLS')
 9250 FORMAT(1X,'*** ERROR, NO MORE THAN',I6,' TOTAL BASIS FUNCTIONS')
 9260 FORMAT(1X,'*** ERROR, NO MORE THAN',I6,' TOTAL GAUSSIANS')
 9270 FORMAT(/1X,'TOTAL NUMBER OF BASIS SET SHELLS             =',I5/
     *        1X,'NUMBER OF CARTESIAN GAUSSIAN BASIS FUNCTIONS =',I5)
 9271 FORMAT(1X,'NOTE: THIS RUN WILL RESTRICT THE MO VARIATION SPACE',
     *          ' TO SPHERICAL HARMONICS.'/
     *       1X,'THE NUMBER OF ORBITALS KEPT IN THE VARIATIONAL SPACE',
     *          ' WILL BE PRINTED LATER.')
 9272 FORMAT( 1X,'NUMBER OF ELECTRONS                          =',I5/
     *        1X,'CHARGE OF MOLECULE                           =',I5/
     *        1X,'SPIN MULTIPLICITY                            =',I5/
     *        1X,'NUMBER OF OCCUPIED ORBITALS (ALPHA)          =',I5/
     *        1X,'NUMBER OF OCCUPIED ORBITALS (BETA )          =',I5/
     *        1X,'TOTAL NUMBER OF ATOMS                        =',I5)
 9280 FORMAT(1X,'THE NUCLEAR REPULSION ENERGY IS',F20.10)
 9282 FORMAT(1X,'NOTE THIS RUN IS USING CORE POTENTIALS, AND THE',
     *          ' NUMBER OF ELECTRONS,'/
     *       1X,'OCCUPIED ORBITALS, AND NUCLEAR REPULSION',
     *          ' ENERGY WILL BE ADJUSTED BELOW'/
     *       1X,'AFTER REMOVAL OF THE CORE CHARGES.')
 9290 FORMAT(//1X,'*** CHECK YOUR INPUT CHARGE AND MULTIPLICITY ***'/
     *       1X,'THERE ARE',I6,' ELECTRONS, WITH CHARGE ICHARG=',I3/
     *       1X,'BUT YOU SELECTED MULTIPLICITY MULT=',I3)
 9300 FORMAT(//1X,'*** SCFTYP=RHF MUST HAVE MULT=1 ***')
      END
C
C*MODULE G3      *DECK RESETB
      SUBROUTINE RESETB
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,ABEL,SECONDD,LINEAR
C
      PARAMETER (MXAO=8192, MXATM=2000, MXSH=5000, MXRT=100,
     *           MXFRG=1050, MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
C
      CHARACTER*4  CDUMMY
C
      DIMENSION COM(3,MXATM),VMOI(3)
C
      COMMON /BASSPH/ QMATOL,ISPHER
      COMMON /CXTHRM/ CXTHERM(11),CXZPE,METHCX,ICXBAS,ICXPCM,SECONDD
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG),
     *                NBSFN(MXFRG),NMXMO(MXFRG)
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /MASSES/ ZMASS(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RELWFN/ RMETHOD,QRQMT,CLIG,CLIG2,QRTOL,IQRORD,MODQR,NESOC,
     *                NRATOM,NUMU,NQMTR,NQRDAF,MORDA,NDARELB
      COMMON /RESTAR/ TIMLIM,IREST,NREC,INTLOC,IST,JST,KST,LST
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /SYMMOL/ GROUP,COMPLEX,IGROUP,NAXIS,ILABMO,ABEL
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
      COMMON /ZMTALT/ NZMAT2,NZVAR2,NVAR2,NZMTRD,ICOORD
C
      DATA C1/8HC1      /
      DATA RHF/8HRHF     /
      DATA G3MP2/8HG3MP2   /
C
C     ----- BEGINNING OF RUN -----
C     1. READ IN BASIS SET + OPTIONS
C     2. GENERATE INITIAL MO'S
C
C     IREST = 0     NORMAL START + NORMAL RUNNING CONDITION.
C     IREST = 1     2E-INTEGRAL RESTART ( 1E +MO'S SAVED)
C     IREST = 2     SCF RESTART ( 1E + MO'S SAVED; 2E SAVED)
C     IREST = 3     1E-GRADIENT RESTART ( MO'S SAVED; NO GRADIENT SAVED)
C     IREST = 4     2E-GRAD RESTART ( MO'S, 1-E GRAD, ORDERED DM2 SAVED)
C
C     ----- KEEP NECESSARY PARAMETERS AND VARIABLES HERE! -----
C     ----- CLOSING DICTIONARY FILE! -----
C
      NOSYM =0
      GROUP1 =GROUP
      IGROUP1=IGROUP
      NAXIS1 =NAXIS
      NT1    =NT
C9060 FORMAT(1X,A8,A2,F5.1,F17.10,2F20.10)
C
c     CLOSE(UNIT=10, STATUS='DELETE')
      call CLOSDA('DELETE')
C
C     ---- NOT A RESTART JOB, THEREFORE IREST = 0
C
      IREST  = 0
      NEVALS = 0
C
C     ----- OPEN THE DIRECT ACCESS FILE -----
C
      CALL OPENDA(0)
C
C     ----- CHANGING THE BASIS TO G3MP2LARGE -----
C
C     ----- KEEPING ORIGINAL SYMMETRY SETUP------
      GROUP  =GROUP1
      IGROUP =IGROUP1
      NAXIS  =NAXIS1
      NT     =NT1
C     ----------------------------------------
C
C     ----- RESETING NE TO ORIGINAL VALUE-----
C
      NE = NE + ICH
      ENUCR = ENUC(NAT,ZAN,C)
      CALL DAWRIT(IDAF,IODA,ENUCR,MXRT+15,2,0)
      CALL DAWRIT(IDAF,IODA,C,3*NAT,1,0)
C
C     ----- INITIALIZING INTEGRALS-------
C
      CALL INTIN
C
C     ----- CHANGING THE BASIS SET-------
C
      CALL CHGBAS
C
C     ----- FOR PRINTING PURPOSE CHANGE LABELING -----
C
      CALL SETLAB(1,CDUMMY)
C
      NUMU=NUM
C
C     ----- SPDTR RESETS SYMMETRY DICTIONARY DATA -----
C     IF(ISPHER.GT.0) CALL SPDTR
      CALL SPDTR
C
C     ----- FILL ATOMIC MASS TABLE (REQUIRES MOLECULE READ IN) -----
C
      CALL RAMS(ZMASS,0)
C
C     ----- CHECK FOR LINEAR MOLECULE (REQUIRES -ZMASS- SET) -----
C
      CALL VCLR(VMOI,1,3)
      IF(NAT.GT.0) CALL INRTIA(C,COM,ZMASS,VMOI,NAT)
      LINEAR=.FALSE.
      IF(VMOI(1).LT.1.0D-04) LINEAR=.TRUE.
      IF ((ICOORD .EQ. 4) .OR.
     *   (NAT .EQ. 1 .AND. NFRG .GT. 0)) LINEAR = .FALSE.
      IF(LINEAR.AND.MASWRK.AND.NFG.EQ.0) WRITE(IW,9510)
C
C     ----- FORCE NO SYMMETRY IF REQUESTED -----
C
      IF(NOSYM.EQ.1 .OR. ICOORD.EQ.4) THEN
         GROUP=C1
         IGROUP=1
         NAXIS=1
         NT=1
      END IF
C
C     ----- KILL IF OPEN SHELL, BUT RHF TYPE -----
C
      IF(NA.NE.NB  .AND.  SCFTYP.EQ.RHF) THEN
         IF(MASWRK) WRITE (IW,9095) NA,NB
         CALL ABRT
         STOP
      END IF
C
      IREST = 0
C     IF(IREST.LT.0) IREST = 0
C
C     ----- SET UP TRIANGULAR INDEX MATRIX -----
C
      DO 900 I = 1,MXAO
        IA(I) = (I*I-I)/2
  900 CONTINUE
C
C     ----- PREPARE FOR ORBITAL SYMMETRY ASSIGNMENTS -----
C     AND RESTORE /SYMSPD/ CARTESIAN SPACE TRANSFORMATIONS, IF NEEDED.
C     THIS IS KEPT HERE, AS SOME RUNS, LIKE PCM, TURN SYMMETRY OFF
C
C     ----- G3MP2LARGE REQUIRES ISPHER=1 -----
C
      IF(RUNTYP.EQ.G3MP2.AND.ICXBAS.EQ.2) THEN
       ISPHER = 1
      END IF
      IF (ICOORD.NE.4) THEN
         CALL SYMORB
         IF(ISPHER.GT.0) CALL SPDTR
      END IF
C
      IF (MASWRK) WRITE(IW,9090)
      CALL TIMIT(1)
C
      RETURN
C
 9090 FORMAT(/1X,'..... DONE SETTING UP THE RUN .....')
 9095 FORMAT(/1X,'AN ODD NUMBER OF ELECTRONS IS IMPOSSIBLE WITH RHF.'/
     *        1X,'THIS RUN HAS',I4,' ALPHA AND',I4,' BETA ELECTRONS.'/
     *        1X,'PLEASE REVIEW YOUR SCFTYP,MULT,ICHARG INPUT VALUES,'/
     *        1X,'AND CHECK THE NUMBER OF ATOMS GENERATED IN $DATA')
 9510 FORMAT(/1X,'THIS MOLECULE IS RECOGNIZED AS BEING LINEAR.')
      END
C
C*MODULE G3  *DECK G3SPNORB
      SUBROUTINE G3SPNORB(IZATM,ICHARG,SOVAL)
C
C    ADDITION OF SPIN-ORBIT CORRECTIONS TO ATOM CALCULATIONS
C    OF G3(MP2).  REFERENCE: JCP, 110 (1999) 4703 TABLE 1
C    ORIGINAL UNITS MAU CHANGED TO AU
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00)
C
      IF(IZATM.EQ.1)     SOVAL=  ZERO
      IF(IZATM.EQ.2) THEN
         IF(ICHARG.EQ.0)  SOVAL=  ZERO
         IF(ICHARG.EQ.1)  SOVAL=  ZERO
      ENDIF
      IF(IZATM.EQ.3) THEN
         IF(ICHARG.EQ.0)  SOVAL=  ZERO
         IF(ICHARG.EQ.1)  SOVAL=  ZERO
         IF(ICHARG.EQ.-1) SOVAL=  ZERO
      ENDIF
      IF(IZATM.EQ.4) THEN
         IF(ICHARG.EQ.0)  SOVAL=  ZERO
         IF(ICHARG.EQ.1)  SOVAL=  ZERO
      ENDIF
      IF(IZATM.EQ.5) THEN
         IF(ICHARG.EQ.0)  SOVAL= -5.0D-05
         IF(ICHARG.EQ.1)  SOVAL=  ZERO
         IF(ICHARG.EQ.-1) SOVAL= -3.0D-05
      ENDIF
      IF(IZATM.EQ.6) THEN
         IF(ICHARG.EQ.0)  SOVAL= -1.4D-04
         IF(ICHARG.EQ.1)  SOVAL= -2.0D-04
         IF(ICHARG.EQ.-1) SOVAL=  ZERO
      ENDIF
      IF(IZATM.EQ.7) THEN
         IF(ICHARG.EQ.0)  SOVAL=  ZERO
         IF(ICHARG.EQ.1)  SOVAL= -4.3D-04
      ENDIF
      IF(IZATM.EQ.8) THEN
         IF(ICHARG.EQ.0)  SOVAL= -3.6D-04
         IF(ICHARG.EQ.1)  SOVAL=  ZERO
         IF(ICHARG.EQ.-1) SOVAL= -2.6D-04
      ENDIF
      IF(IZATM.EQ.9) THEN
         IF(ICHARG.EQ.0)  SOVAL= -6.1D-04
         IF(ICHARG.EQ.1)  SOVAL= -6.7D-04
         IF(ICHARG.EQ.-1) SOVAL=  ZERO
      ENDIF
      IF(IZATM.EQ.10) THEN
         IF(ICHARG.EQ.0)  SOVAL=  ZERO
         IF(ICHARG.EQ.1)  SOVAL= -1.19D-03
      ENDIF
      IF(IZATM.EQ.11) THEN
         IF(ICHARG.EQ.0)  SOVAL=  ZERO
         IF(ICHARG.EQ.1)  SOVAL=  ZERO
         IF(ICHARG.EQ.-1) SOVAL=  ZERO
      ENDIF
      IF(IZATM.EQ.12) THEN
         IF(ICHARG.EQ.0)  SOVAL=  ZERO
         IF(ICHARG.EQ.1)  SOVAL=  ZERO
      ENDIF
      IF(IZATM.EQ.13) THEN
         IF(ICHARG.EQ.0)  SOVAL= -3.4D-04
         IF(ICHARG.EQ.1)  SOVAL=  ZERO
         IF(ICHARG.EQ.-1) SOVAL= -2.8D-04
      ENDIF
      IF(IZATM.EQ.14) THEN
         IF(ICHARG.EQ.0)  SOVAL= -6.8D-04
         IF(ICHARG.EQ.1)  SOVAL= -9.3D-04
         IF(ICHARG.EQ.-1) SOVAL=  ZERO
      ENDIF
      IF(IZATM.EQ.15) THEN
         IF(ICHARG.EQ.0)  SOVAL=  ZERO
         IF(ICHARG.EQ.1)  SOVAL= -1.43D-03
         IF(ICHARG.EQ.-1) SOVAL= -4.5D-04
      ENDIF
      IF(IZATM.EQ.16) THEN
         IF(ICHARG.EQ.0)  SOVAL= -8.9D-04
         IF(ICHARG.EQ.1)  SOVAL=  ZERO
         IF(ICHARG.EQ.-1) SOVAL= -8.8D-04
      ENDIF
      IF(IZATM.EQ.17) THEN
         IF(ICHARG.EQ.0)  SOVAL= -1.34D-03
         IF(ICHARG.EQ.1)  SOVAL= -1.68D-03
         IF(ICHARG.EQ.-1) SOVAL=  ZERO
      ENDIF
      IF(IZATM.EQ.18) THEN
         IF(ICHARG.EQ.0)  SOVAL=  ZERO
         IF(ICHARG.EQ.1)  SOVAL= -2.18D-03
      ENDIF
      IF(IZATM.GE.19) THEN
         SOVAL = ZERO
         IF(MASWRK) WRITE(IW,9010) IZATM
      END IF
      RETURN
 9010 FORMAT(1X,'WE DO NOT HAVE STORED SPIN-ORBIT COUPLING FOR ATOM',I5/
     *       1X,'ASSIGNING SPIN-ORBIT COUPLING TO BE ZERO.')
      END
C
C*MODULE G3  *DECK G3INP
      SUBROUTINE G3INP
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C     ----- READ IN $G3MP2 GROUP -----
C        SEVERAL SCENERIOS FOR GEOMETRY, ORBITALS, GRADIENT, AND HESSIAN
C     FOR G3(MP2,CCSD)
C     1) HF/6-31G(D) ORBITALS AT FIRST GEOMETRY KNOWN
C     2) HF/6-31G(D) GRADIENT OF FIRST GEOMETRY KNOWN
C     3) HF/6-31G(D) HESSIAN KNOWN
C     4) MP2/6-31G(D) SECOND GEOMETRIES KNOWN
C     5) HF/6-31G(D) ORBITALS AT MP2/6-31G(D) SECOND GEOM KNOWN
C     6) RHF/G3MP2LARGE ORBITALS KNOWN
C
C     FOR G3(MP2,CCSD)//B3
C     1) B3LYP/6-31G(D) ORBITALS KNOWN
C     2) B3LYP/6-31G(D) HESSIAN KNOWN
C     3) HF/6-31G(D) ORBITALS AT B3LYP/6-31G(D) GEOM KNOWN
C     4) HF/G3MP2LARGE ORBITALS KNOWN
C
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
      DATA RNONE /8HNONE    /
      IF(DFTYPE.EQ.RNONE) THEN
      ENDIF
      RETURN
      END
C
C*MODULE G3 *DECK HEATS
      SUBROUTINE HEATS(CMETHD,CNUTRL,E0COMP,HCOMP,HFOR0,HFOR298)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*8 CMETHD
C
      PARAMETER (MXATM=2000)
C
      DIMENSION SO(MXATM),ATMFMN(MXATM),HATFMN(MXATM)
C
C     IF (HF.EQ.'FORM') THEN
         CALL DLHFMN(CMETHD,CNUTRL,E0COMP,HCOMP,SO,ATMFMN,HATFMN,
     *               HFOR0,HFOR298)
C     ELSE
C        CALL DLHRXN( )
C     END IF
C
      RETURN
      END
C
C*MODULE G3 *DECK DLHFMN
      SUBROUTINE DLHFMN(CMETHD,CNUTRL,E0COMP,HCOMP,SO,ATMFMN,HATFMN,
     *                  HFOR0,HFOR298)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*8 CMETHD
C
      PARAMETER (MXATM=2000)
      DIMENSION ATMFMN(MXATM),SO(MXATM),HATFMN(MXATM)
      DIMENSION COMPH(MXATM),HCOMPH(MXATM)
C
      CALL RDINPF(CMETHD,HCOMPH,COMPH)
      CALL FILATM(ATMFMN,HATFMN,SO)
      CALL GETH(E0COMP,HCOMP,HCOMPH,COMPH,ATMFMN,HATFMN,
     *          SO,HFOR0,HFOR298,CNUTRL)
      RETURN
      END
C
C*MODULE G3 *DECK RDINPF
C> @brief     initializes method parameters
C> @details   initializes method parameters
C> @author    Sean Nedd
C
      SUBROUTINE RDINPF(CMETHD,HCOMPH,COMPH)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      CHARACTER*8 CMETHD,CG3MP2,CMW4S,CG3MS,CG3RAD
      CHARACTER*8 CCCCAS4,CCCCACCL,CCCCAS
      CHARACTER*8 CG4MP2,CG4M6X
C
      PARAMETER (MXATM=2000)
      PARAMETER (TOKCAL=627.51D+00, BOLTZ=1.380662D-23,
     *           AVOGAD=6.022045D+23,
     *           TEMP=2.9815D+02,TOKJ=4.184D+03)
      PARAMETER (TWO5=2.5D+00)
C
      DIMENSION HCOMPH(MXATM),COMPH(MXATM)
C
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
      DATA CG3MP2  /'CG3MP2  '/
      DATA CMW4S   /'CMW4S   '/
      DATA CG3MS   /'CG3MS   '/
      DATA CG3RAD  /'CG3RAD  '/
      DATA CCCCAS4 /'CCCCAS4 '/
      DATA CCCCACCL/'CCCCACCL'/
      DATA CCCCAS  /'CCCCAS  '/
      DATA CG4MP2  /'CG4MP2  '/
      DATA CG4M6X  /'CG4M6X  '/
C
      HTH = TWO5*BOLTZ*TEMP*AVOGAD/TOKJ/TOKCAL
C
      ICHARGE=0
      ICH=ICHARGE
      IF(CMETHD.EQ.CG3MP2) THEN
       DO J=1,NAT
        NAZ = INT(ZAN(J))
        IF(NAZ.EQ.1) THEN
          COMPH(J) = -0.50177D+00
        ELSEIF(NAZ.EQ.2) THEN
          COMPH(J) = -2.90235D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -2.00018D+00
        ELSEIF(NAZ.EQ.3) THEN
          COMPH(J) = -7.43397D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -7.23584D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -7.46846D+00
        ELSEIF(NAZ.EQ.4) THEN
          COMPH(J) = -14.62907D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -14.27815D+00
        ELSEIF(NAZ.EQ.5) THEN
          COMPH(J) = -24.60679D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -24.30584D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -24.60973D+00
        ELSEIF(NAZ.EQ.6) THEN
          COMPH(J) = -37.78899D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -37.37897D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -37.82947D+00
        ELSEIF(NAZ.EQ.7) THEN
          COMPH(J) = -54.52478D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -53.99313D+00
        ELSEIF(NAZ.EQ.8) THEN
          COMPH(J) = -74.98920D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -74.49229D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -75.03757D+00
        ELSEIF(NAZ.EQ.9) THEN
          COMPH(J) = -99.64020D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -99.00069D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -99.76546D+00
        ELSEIF(NAZ.EQ.10) THEN
          COMPH(J) = -128.82775D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -128.03295D+00
        ELSEIF(NAZ.EQ.11) THEN
          COMPH(J) = -161.84793D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -161.66429D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -161.87838D+00
        ELSEIF(NAZ.EQ.12) THEN
          COMPH(J) = -199.65065D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -199.36584D+00
        ELSEIF(NAZ.EQ.13) THEN
          COMPH(J) = -241.93666D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -241.71853D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -241.94932D+00
        ELSEIF(NAZ.EQ.14) THEN
          COMPH(J) = -288.93907D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -288.64246D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -288.98800D+00
        ELSEIF(NAZ.EQ.15) THEN
          COMPH(J) = -340.82623D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -340.44381D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -340.85024D+00
        ELSEIF(NAZ.EQ.16) THEN
          COMPH(J) = -397.66322D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -397.28829D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -397.73938D+00
        ELSEIF(NAZ.EQ.17) THEN
          COMPH(J) = -459.68658D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -459.21357D+00
C--       IF(ICH.EQ.-1) COMPH(J) = -459.82159D+00
        ELSEIF(NAZ.EQ.18) THEN
          COMPH(J) = -527.06019D+00
C--       IF(ICH.EQ.1)  COMPH(J) = -526.48265D+00
        END IF
        HCOMPH(J) = COMPH(J) + HTH
      END DO

      ELSE IF(CMETHD.EQ.CMW4S) THEN
       DO J=1,NAT
        NAZ = INT(ZAN(J))
        IF(NAZ.EQ.1) THEN
          COMPH(J) = -0.499992D+00
        ELSEIF(NAZ.EQ.2) THEN
          COMPH(J) = -2.895921D+00
        ELSEIF(NAZ.EQ.3) THEN
          COMPH(J) = -7.446974D+00
        ELSEIF(NAZ.EQ.4) THEN
          COMPH(J) = -14.617127D+00
        ELSEIF(NAZ.EQ.5) THEN
          COMPH(J) = -24.595164D+00
        ELSEIF(NAZ.EQ.6) THEN
          COMPH(J) = -37.851625D+00
        ELSEIF(NAZ.EQ.7) THEN
          COMPH(J) = -54.503695D+00
        ELSEIF(NAZ.EQ.8) THEN
          COMPH(J) = -74.954931D+00
        ELSEIF(NAZ.EQ.9) THEN
          COMPH(J) = -99.591573D+00
        ELSEIF(NAZ.EQ.10) THEN
          COMPH(J) = -128.757351D+00
        ELSEIF(NAZ.EQ.11) THEN
          COMPH(J) = -161.869415D+00
        ELSEIF(NAZ.EQ.12) THEN
          COMPH(J) = -199.646608D+00
        ELSEIF(NAZ.EQ.13) THEN
          COMPH(J) = -241.931737D+00
        ELSEIF(NAZ.EQ.14) THEN
          COMPH(J) = -288.930467D+00
        ELSEIF(NAZ.EQ.15) THEN
          COMPH(J) = -340.813354D+00
        ELSEIF(NAZ.EQ.16) THEN
          COMPH(J) = -397.742743D+00
        ELSEIF(NAZ.EQ.17) THEN
          COMPH(J) = -459.654659D+00
        ELSEIF(NAZ.EQ.18) THEN
          COMPH(J) = -527.011173D+00
        END IF
         HCOMPH(J) = COMPH(J) + HTH
       END DO

      ELSE IF(CMETHD.EQ.CG3MS) THEN
       DO J=1,NAT
        NAZ = INT(ZAN(J))
        IF(NAZ.EQ.1) THEN
          COMPH(J) = -0.499866D+00
        ELSEIF(NAZ.EQ.2) THEN
          COMPH(J) = -2.896124D+00
        ELSEIF(NAZ.EQ.6) THEN
          COMPH(J) = -37.829627D+00
        ELSEIF(NAZ.EQ.8) THEN
          COMPH(J) = -75.065468D+00
        ELSEIF(NAZ.EQ.14) THEN
          COMPH(J) = -288.972342D+00
        ELSEIF(NAZ.EQ.16) THEN
          COMPH(J) = -397.720773D+00
        END IF
         HCOMPH(J) = COMPH(J) + HTH
       END DO

      ELSE IF(CMETHD.EQ.CG3RAD) THEN
       DO J=1,NAT
        NAZ = INT(ZAN(J))
        IF(NAZ.EQ.1) THEN
          COMPH(J) = -0.500758D+00
c       ELSEIF(NAZ.EQ.2) THEN
c         COMPH(J) = -2.896124D+00
        ELSEIF(NAZ.EQ.4) THEN
          COMPH(J) = -14.881105D+00
c       ELSEIF(NAZ.EQ.6) THEN
c         COMPH(J) = -37.829627D+00
c       ELSEIF(NAZ.EQ.8) THEN
c         COMPH(J) = -75.065468D+00
c       ELSEIF(NAZ.EQ.14) THEN
c         COMPH(J) = -288.972342D+00
c       ELSEIF(NAZ.EQ.16) THEN
c         COMPH(J) = -397.720773D+00
        END IF
         HCOMPH(J) = COMPH(J) + HTH
       END DO

      ELSE IF(CMETHD.EQ.CCCCAS4) THEN
       DO J=1,NAT
        NAZ = INT(ZAN(J))
        IF(NAZ.EQ.1) THEN
CSNUHF    COMPH(J) = -0.500028D+00
          COMPH(J) = -0.500028D+00
        ELSEIF(NAZ.EQ.2) THEN
CSNUHF    COMPH(J) = -2.904705D+00
          COMPH(J) = -2.904705D+00
        ELSEIF(NAZ.EQ.3) THEN
C         COMPH(J) = -7.478217D+00
CSN       COMPH(J) = -7.470582D+00
CSNUHF    COMPH(J) = -7.470559D+00
          COMPH(J) = -7.470577D+00
        ELSEIF(NAZ.EQ.4) THEN
CSNUHF    COMPH(J) = -14.66434D+00
          COMPH(J) = -14.66434D+00
        ELSEIF(NAZ.EQ.5) THEN
CSN       COMPH(J) = -24.655539D+00
CSN       COMPH(J) = -24.653741D+00
CSNUHF    COMPH(J) = -24.655327D+00
          COMPH(J) = -24.655553D+00
        ELSEIF(NAZ.EQ.6) THEN
CSN       COMPH(J) = -37.854583D+00
CSN       COMPH(J) = -37.853740D+00
CSNUHF    COMPH(J) = -37.854157D+00
          COMPH(J) = -37.854671D+00
        ELSEIF(NAZ.EQ.7) THEN
CSN       COMPH(J) = -54.612547D+00
CSN       COMPH(J) = -54.605230D+00
CSNUHF    COMPH(J) = -54.612113D+00
          COMPH(J) = -54.612780D+00
        ELSEIF(NAZ.EQ.8) THEN
CSN       COMPH(J) = -75.113953D+00
CSN1      COMPH(J) = -75.114258D+00
CSN2      COMPH(J) = -75.113962D+00 !ccCA-S4 value
CSNUHF    COMPH(J) = -75.113943D+00
CSNXTRD   COMPH(J) = -74.952113D+00
          COMPH(J) = -75.114099D+00
        ELSEIF(NAZ.EQ.9) THEN
CSN       COMPH(J) = -99.815646D+00
CSN       COMPH(J) = -99.816342D+00
CSNUHF    COMPH(J) = -99.815767D+00
          COMPH(J) = -99.815702D+00
        ELSEIF(NAZ.EQ.10) THEN
CSN       COMPH(J) = -129.069843D+00
CSN       COMPH(J) = -129.070895D+00
CSNUHF    COMPH(J) = -129.069566D+00
          COMPH(J) = -129.069566D+00
        ELSEIF(NAZ.EQ.11) THEN
C         COMPH(J) = -162.352505D+00
CSN       COMPH(J) = -162.351156D+00
CSNUHF    COMPH(J) = -162.351130D+00
          COMPH(J) = -162.351152D+00
        ELSEIF(NAZ.EQ.12) THEN
CSNUHF    COMPH(J) = -200.257314D+00
          COMPH(J) = -200.257314D+00
        ELSEIF(NAZ.EQ.13) THEN
CSN       COMPH(J) = -242.686957D+00
CSN       COMPH(J) = -242.650599D+00
CSNUHF    COMPH(J) = -242.660419D+00
CSNXTRD   COMPH(J) = -242.660758D+00
          COMPH(J) = -242.660814D+00
        ELSEIF(NAZ.EQ.14) THEN
CSN       COMPH(J) = -289.866359D+00
CSN       COMPH(J) = -289.832366D+00
CSNUHF    COMPH(J) = -289.838337D+00
CSNXTRD   COMPH(J) = -289.838897D+00
          COMPH(J) = -289.839001D+00
        ELSEIF(NAZ.EQ.15) THEN
CSN       COMPH(J) = -341.975121D+00
CSN       COMPH(J) = -341.941375D+00
CSNUHF    COMPH(J) = -341.947405D+00
CSNXTRD   COMPH(J) = -341.947591D+00
          COMPH(J) = -341.947750D+00
        ELSEIF(NAZ.EQ.16) THEN
C         COMPH(J) = -399.09118D+00
CSN       COMPH(J) = -399.06309D+00
CSN       COMPH(J) = -399.057698D+00
CSN2      COMPH(J) = -399.06309D+00 !ccCA-S4 value
CSNUHF    COMPH(J) = -399.063653D+00
CSNXTRD   COMPH(J) = -399.063048D+00
          COMPH(J) = -399.063445D+00
        ELSEIF(NAZ.EQ.17) THEN
CSN       COMPH(J) = -461.457071D+00
CSN       COMPH(J) = -461.424827D+00
CSNUHF    COMPH(J) = -461.427997D+00
CSNXTRD   COMPH(J) = -461.427624D+00
          COMPH(J) = -461.428377D+00
        ELSEIF(NAZ.EQ.18) THEN
CSN       COMPH(J) = -529.246242D+00
CSN       COMPH(J) = -529.214828D+00
CSNUHF    COMPH(J) = -529.215308D+00
CSNXTRD   COMPH(J) = -529.215308D+00
          COMPH(J) = -529.216440D+00
        END IF
         HCOMPH(J) = COMPH(J) + HTH
       END DO

      ELSE IF(CMETHD.EQ.CCCCACCL) THEN
       DO J=1,NAT
        NAZ = INT(ZAN(J))
        IF(NAZ.EQ.1) THEN
          COMPH(J) = -0.500028D+00
        ELSEIF(NAZ.EQ.2) THEN
          COMPH(J) = -2.904705D+00
        ELSEIF(NAZ.EQ.3) THEN
          COMPH(J) = -7.470582D+00
        ELSEIF(NAZ.EQ.4) THEN
          COMPH(J) = -14.66434D+00
        ELSEIF(NAZ.EQ.5) THEN
          COMPH(J) = -24.656063D+00
        ELSEIF(NAZ.EQ.6) THEN
          COMPH(J) = -37.855264D+00
        ELSEIF(NAZ.EQ.7) THEN
          COMPH(J) = -54.613283D+00
        ELSEIF(NAZ.EQ.8) THEN
          COMPH(J) = -75.114661D+00
        ELSEIF(NAZ.EQ.9) THEN
          COMPH(J) = -99.816277D+00
        ELSEIF(NAZ.EQ.10) THEN
          COMPH(J) = -129.070140D+00
        ELSEIF(NAZ.EQ.11) THEN
          COMPH(J) = -162.351152D+00
        ELSEIF(NAZ.EQ.12) THEN
          COMPH(J) = -200.257314D+00
        ELSEIF(NAZ.EQ.13) THEN
          COMPH(J) = -242.661431D+00
        ELSEIF(NAZ.EQ.14) THEN
          COMPH(J) = -289.840011D+00
        ELSEIF(NAZ.EQ.15) THEN
          COMPH(J) = -341.948997D+00
        ELSEIF(NAZ.EQ.16) THEN
          COMPH(J) = -399.064897D+00
        ELSEIF(NAZ.EQ.17) THEN
          COMPH(J) = -461.429897D+00
        ELSEIF(NAZ.EQ.18) THEN
          COMPH(J) = -529.217955D+00
        END IF
         HCOMPH(J) = COMPH(J) + HTH
       END DO

      ELSE IF(CMETHD.EQ.CCCCAS) THEN
       DO J=1,NAT
        NAZ = INT(ZAN(J))
        IF(NAZ.EQ.1) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.2) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.3) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.4) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.5) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.6) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.7) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.8) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.9) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.10) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.11) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.12) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.13) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.14) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.15) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.16) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.17) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.18) THEN
          COMPH(J) = 0D+00
        END IF
         HCOMPH(J) = COMPH(J) + HTH
       END DO

      ELSE IF(CMETHD.EQ.CG4MP2) THEN
       DO J=1,NAT
        NAZ = INT(ZAN(J))
        IF(NAZ.EQ.1) THEN
          COMPH(J) = -0.500028D+00
        ELSEIF(NAZ.EQ.2) THEN
          COMPH(J) = -2.904705D+00
        ELSEIF(NAZ.EQ.3) THEN
          COMPH(J) = -7.470582D+00
        ELSEIF(NAZ.EQ.4) THEN
          COMPH(J) = -14.66434D+00
        ELSEIF(NAZ.EQ.5) THEN
          COMPH(J) = -24.656063D+00
        ELSEIF(NAZ.EQ.6) THEN
          COMPH(J) = -37.855264D+00
        ELSEIF(NAZ.EQ.7) THEN
          COMPH(J) = -54.613283D+00
        ELSEIF(NAZ.EQ.8) THEN
          COMPH(J) = -75.114661D+00
        ELSEIF(NAZ.EQ.9) THEN
          COMPH(J) = -99.816277D+00
        ELSEIF(NAZ.EQ.10) THEN
          COMPH(J) = -129.070140D+00
        ELSEIF(NAZ.EQ.11) THEN
          COMPH(J) = -162.351152D+00
        ELSEIF(NAZ.EQ.12) THEN
          COMPH(J) = -200.257314D+00
        ELSEIF(NAZ.EQ.13) THEN
          COMPH(J) = -242.661431D+00
        ELSEIF(NAZ.EQ.14) THEN
          COMPH(J) = -289.840011D+00
        ELSEIF(NAZ.EQ.15) THEN
          COMPH(J) = -341.948997D+00
        ELSEIF(NAZ.EQ.16) THEN
          COMPH(J) = -399.064897D+00
        ELSEIF(NAZ.EQ.17) THEN
          COMPH(J) = -461.429897D+00
        ELSEIF(NAZ.EQ.18) THEN
          COMPH(J) = -529.217955D+00
        END IF
         HCOMPH(J) = COMPH(J) + HTH
       END DO

      ELSE IF(CMETHD.EQ.CG4M6X) THEN
       DO J=1,NAT
        NAZ = INT(ZAN(J))
        IF(NAZ.EQ.1) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.2) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.3) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.4) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.5) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.6) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.7) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.8) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.9) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.10) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.11) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.12) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.13) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.14) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.15) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.16) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.17) THEN
          COMPH(J) = 0D+00
        ELSEIF(NAZ.EQ.18) THEN
          COMPH(J) = 0D+00
        END IF
         HCOMPH(J) = COMPH(J) + HTH
       END DO
      END IF
C
      ICH=ICHARGE
      RETURN
      END
C
C*MODULE G3 *DECK FILATM
      SUBROUTINE FILATM(ATMFMN,HATFMN,SO)
C
C ATOM HEATS OF FORMATION FROM CCCBDB:
C HTTP://SRDATA.NIST.GOV/CCCBDB/
C SPIN ORBIT CORRECTIONS:
C ENTHALPIES: J. CHEM. PHYS. 106 (3), 15 JANUARY, 1997 (P.1063-1079)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      DIMENSION ATMFMN(MXATM),HATFMN(MXATM),SO(MXATM)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C--------------------------------------------------------------
C
C     HEATS OF FORMATION OF ATOM IS GIVEN BY NIST DATABASE
C        IN KCAL/MOL
C
C     DO I=1,NAT
C     NATM = INT(ZAN(I))
C        IF(NATM.EQ.1) THEN
C           IF(IDON.EQ.1) THEN
C              ATMFMN(I) = 50.62D+00
C           ELSE
C              ATMFMN(I) = 51.63D+00
C           END IF
C               SO(I) = 0.0D+00
C        ELSEIF(NATM.EQ.6) THEN
C            IF(IDON.EQ.1) THEN
C               ATMFMN(I) = 169.73D+00
C            ELSE
C               ATMFMN(I) = 169.98D+00
C            END IF
C               SO(I) = -0.14D+00
C        ELSEIF(NATM.EQ.7) THEN
C           ATMFMN(I) = 112.97D+00
C               SO(I) = 0.00D+00
C        ELSEIF(NATM.EQ.8) THEN
C           ATMFMN(I) = 59.553D+00
C               SO(I) = -0.36D+00
C        ELSE IF(NATM.EQ.9) THEN
C           ATMFMN(I) = 18.97D+00
C               SO(I) = -0.61D+00
C        ELSE IF(NATM.EQ.14) THEN
C           ATMFMN(I) = 107.55D+00
C               SO(I) = -0.68D+00
C        ELSE IF(NATM.EQ.15) THEN
C           ATMFMN(I) = 75.619D+00
C               SO(I) =  0.00D+00
C        ELSE IF(NATM.EQ.16) THEN
C           ATMFMN(I) = 66.200D+00
C               SO(I) = -0.89D+00
C        ELSE IF(NATM.EQ.17) THEN
C           ATMFMN(I) = 28.991D+00
C               SO(I) = -1.34D+00
C        ELSE
C           WRITE(6,1000) I
C        END IF
C     END DO
C
C     RETURN
C1000 FORMAT(/'NO SO COUPLING DATA FOR ATOM #',I3,/)
C     END
C
C--------------------------------------------------------------
C--------------------------------------------------------------
C ENTHALPIES: J. CHEM. PHYS. 106 (3), 15 JANUARY, 1997 (P.1063-1079)
C
C     DO I=1,NAT
C     NATM = INT(ZAN(I))
C        IF(NATM.EQ.1) THEN
C           ATMFMN(I) = 51.63D+00
C           HATFMN(I) = 52.64D+00
C               SO(I) = 0.0D+00
C        ELSEIF(NATM.EQ.6) THEN
C           ATMFMN(I) = 169.98D+00
C           HATFMN(I) = 170.23D+00
C               SO(I) = -0.14D+00
C        ELSEIF(NATM.EQ.7) THEN
C           ATMFMN(I) = 112.53D+00
C           HATFMN(I) = 113.57D+00
C               SO(I) = 0.00D+00
C        ELSEIF(NATM.EQ.8) THEN
C           ATMFMN(I) = 58.99D+00
C           HATFMN(I) = 60.03D+00
C               SO(I) = -0.36D+00
C        ELSE IF(NATM.EQ.9) THEN
C           ATMFMN(I) = 18.47D+00
C           HATFMN(I) = 19.52D+00
C               SO(I) = -0.61D+00
C        ELSE IF(NATM.EQ.14) THEN
C           ATMFMN(I) = 106.6D+00
C           HATFMN(I) = 107.36D+00
C               SO(I) = -0.68D+00
C        ELSE IF(NATM.EQ.15) THEN
C           ATMFMN(I) = 75.42D+00
C           HATFMN(I) = 76.70D+00
C               SO(I) =  0.00D+00
C        ELSE IF(NATM.EQ.16) THEN
C           ATMFMN(I) = 65.66D+00
C           HATFMN(I) = 66.71D+00
C               SO(I) = -0.89D+00
C        ELSE IF(NATM.EQ.17) THEN
C           ATMFMN(I) = 28.59D+00
C           HATFMN(I) = 29.69D+00
C               SO(I) = -1.34D+00
C        ELSE
C           WRITE(6,1000) I
C        END IF
C     END DO
C
C     RETURN
C1000 FORMAT(/'NO SO COUPLING DATA FOR ATOM #',I3,/)
C     END
C
C--------------------------------------------------------------
C--------------------------------------------------------------
C     REVISED NIST USING CCCBDB VALUES
C     IONS FROM:
C     "J. PHYS. AND CHEM. REFERENCE DATA,14,1985,SUPPLEMENT NO.1":
C     JANAF THERMOCHEMICAL TABLES,THIRD EDITION,PARTS 1&2
C     HTTP://SRDATA.NIST.GOV/CCCBDB
C     BE,B,AL,Si VALUES: J. PHYS. CHEM. A 2007, 111, 5936-594
C
      ICHARGE=0
      ICHARGE=ICH
      ICH=0
      DO I=1,NAT
      NATM = INT(ZAN(I))
         IF(NATM.EQ.1) THEN
            ATMFMN(I) = 51.63D+00
            HATFMN(I) = 52.103D+00
                SO(I) = 0.0D+00
         ELSEIF(NATM.EQ.2) THEN
            ATMFMN(I) = 0.00D+00
            HATFMN(I) = 0.00D+00
                SO(I) = 0.00D+00
C--         IF(ICH.EQ.1) SO(I) = 0.00D+00
            IF(MASWRK) WRITE(6,1000) I
            CALL ABRT
         ELSEIF(NATM.EQ.3) THEN
            ATMFMN(I) = 37.70D+00
            HATFMN(I) = 38.07D+00
                SO(I) = 0.00D+00
C--         IF(ICH.EQ.1)  SO(I) = 0.00D+00
C--         IF(ICH.EQ.-1) SO(I) = 0.00D+00
         ELSEIF(NATM.EQ.4) THEN
            ATMFMN(I) = 76.40D+00
            HATFMN(I) = 77.40D+00
CSN         ATMFMN(I) = 76.42D+00
CSN         HATFMN(I) = 77.44D+00
                SO(I) = 0.00D+00
C--         IF(ICH.EQ.1)   SO(I) = 0.00D+00
         ELSEIF(NATM.EQ.5) THEN
            ATMFMN(I) = 135.10D+00
            HATFMN(I) = 136.30D+00
CSN         ATMFMN(I) = 133.82D+00
CSN         HATFMN(I) = 135.04D+00
                SO(I) = -0.05D+00
C--         IF(ICH.EQ.1)   SO(I) = 0.00D+00
C--         IF(ICH.EQ.-1)  SO(I) = -0.03D+00
         ELSEIF(NATM.EQ.6) THEN
            ATMFMN(I) = 169.98D+00
            HATFMN(I) = 171.29D+00
                SO(I) = -0.14D+00
C--         IF(ICH.EQ.1)   SO(I) = -0.20D+00
C--         IF(ICH.EQ.-1)  SO(I) =  0.00D+00
         ELSEIF(NATM.EQ.7) THEN
            ATMFMN(I) = 112.53D+00
            HATFMN(I) = 112.97D+00
                SO(I) = 0.00D+00
C--         IF(ICH.EQ.1)   SO(I) = -0.43D+00
         ELSEIF(NATM.EQ.8) THEN
            ATMFMN(I) = 58.99D+00
            HATFMN(I) = 59.56D+00
                SO(I) = -0.36D+00
C--         IF(ICH.EQ.1)   SO(I) = 0.00D+00
C--         IF(ICH.EQ.-1)  SO(I) = -0.26D+00
         ELSE IF(NATM.EQ.9) THEN
            ATMFMN(I) = 18.47D+00
            HATFMN(I) = 18.97D+00
                SO(I) = -0.61D+00
C--         IF(ICH.EQ.1)   SO(I) = -0.67D+00
C--         IF(ICH.EQ.-1)  SO(I) = 0.00D+00
         ELSEIF(NATM.EQ.10) THEN
            ATMFMN(I) = 0.00D+00
            HATFMN(I) = 0.00D+00
                SO(I) = 0.00D+00
C--         IF(ICH.EQ.1)   SO(I) = -1.19D+00
            IF(MASWRK) WRITE(6,1000) I
            CALL ABRT
         ELSEIF(NATM.EQ.11) THEN
            ATMFMN(I) = 25.76D+00
            HATFMN(I) = 25.69D+00
                SO(I) = 0.00D+00
C--         IF(ICH.EQ.1)   SO(I) = 0.00D+00
C--         IF(ICH.EQ.-1)  SO(I) = 0.00D+00
         ELSEIF(NATM.EQ.12) THEN
            ATMFMN(I) = 34.87D+00
            HATFMN(I) = 35.16D+00
                SO(I) = 0.00D+00
C--         IF(ICH.EQ.1)   SO(I) = 0.00D+00
         ELSEIF(NATM.EQ.13) THEN
            ATMFMN(I) = 80.20D+00
            HATFMN(I) = 80.80D+00
CSN         ATMFMN(I) = 78.30D+00
CSN         HATFMN(I) = 78.87D+00
                SO(I) = -0.34D+00
C--         IF(ICH.EQ.1)   SO(I) = 0.00D+00
C--         IF(ICH.EQ.-1)  SO(I) = -0.28D+00
         ELSE IF(NATM.EQ.14) THEN
            ATMFMN(I) = 107.20D+00
            HATFMN(I) = 108.20D+00
CSN         ATMFMN(I) = 106.52D+00
CSN         HATFMN(I) = 107.55D+00
                SO(I) = -0.68D+00
C--         IF(ICH.EQ.1)   SO(I) = -0.93D+00
C--         IF(ICH.EQ.-1)  SO(I) = 0.00D+00
         ELSE IF(NATM.EQ.15) THEN
            ATMFMN(I) = 75.45D+00
            HATFMN(I) = 75.65D+00
                SO(I) =  0.00D+00
C--         IF(ICH.EQ.1)   SO(I) = -1.43D+00
C--         IF(ICH.EQ.-1)  SO(I) = -0.45D+00
         ELSE IF(NATM.EQ.16) THEN
            ATMFMN(I) = 65.71D+00
            HATFMN(I) = 66.25D+00
                SO(I) = -0.89D+00
C--         IF(ICH.EQ.1)   SO(I) =  0.00D+00
C--         IF(ICH.EQ.-1)  SO(I) = -0.88D+00
         ELSE IF(NATM.EQ.17) THEN
            ATMFMN(I) = 28.59D+00
            HATFMN(I) = 28.99D+00
                SO(I) = -1.34D+00
C--         IF(ICH.EQ.1)   SO(I) = -1.68D+00
C--         IF(ICH.EQ.-1)  SO(I) =  0.00D+00
         ELSEIF(NATM.EQ.18) THEN
            ATMFMN(I) = 0.00D+00
            HATFMN(I) = 0.00D+00
                SO(I) = 0.00D+00
C--         IF(ICH.EQ.1)   SO(I) = -2.18D+00
         ELSE
            IF(MASWRK) WRITE(6,1000) I
            CALL ABRT
         END IF
      END DO
      ICH=ICHARGE
C
      RETURN
 1000 FORMAT(/1X,'NO INTERNALLY STORED ATOMIC THERMOCHEMICAL',
     *           ' DATA FOR ATOM Z=',I3/)
      END
C
C*MODULE G3 *DECK GETH
      SUBROUTINE GETH(E0COMP,HCOMP,HCOMPH,COMPH,ATMFMN,HATFMN,
     *                SO,HFOR0,HFOR298,CNUTRL)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXATM=2000,TM3=1.0D+03,TOKCAL=627.51D+00)
      PARAMETER (ZERO=0.0D+00)
C
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
      DIMENSION HCOMPH(MXATM),COMPH(MXATM),
     *       ATMFMN(MXATM),HATFMN(MXATM),SO(MXATM)
C
      E0ATMS = ZERO
C     EHFOR0 = ZERO
C     EHFOR298 = ZERO
      HATMS  = ZERO
      FATMS  = ZERO
      FATMSH = ZERO
      SOSUM  = ZERO
C
      EMOL0  = E0COMP
      EMOLH  = HCOMP
C
      DO I=1,NAT
         E0ATMS = E0ATMS + COMPH(I)
         HATMS  = HATMS  + HCOMPH(I)
         FATMS  = FATMS  + ATMFMN(I)
         FATMSH = FATMSH + HATFMN(I)
         SOSUM  = SOSUM  + SO(I)
      END DO
C
      IF(ICH.GT.0) THEN
         E0ATMS = E0ATMS + (EMOL0 - CNUTRL)
         HATMS  = HATMS  + (EMOLH - CNUTRL)
      ELSE IF(ICH.LT.0) THEN
         E0ATMS = E0ATMS - (EMOL0 - CNUTRL)
         HATMS  = HATMS  - (EMOLH - CNUTRL)
      ELSE IF(ABS(CNUTRL).GT.1.0D-04) THEN
         E0ATMS = E0ATMS + (EMOL0 - CNUTRL)
         HATMS  = HATMS  + (EMOLH - CNUTRL)
      END IF
C
      SOSUM    = (SOSUM*TOKCAL)/TM3
C     EHFOR0   = TOKCAL*(EMOL0 - E0ATMS)
C     EHFOR298 = TOKCAL*(EMOLH - HATMS )
      HFOR0    = TOKCAL*(EMOL0 - E0ATMS) + FATMS
      HFOR298  = TOKCAL*(EMOLH - HATMS ) + FATMSH
C
      RETURN
      END
