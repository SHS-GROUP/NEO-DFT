C 18 Oct 12 - JH  - add dlDF (dispersionless Density Functional)
C 22 AUG 12 - FPR - add LC-BPBE
C 30 APR 12 - SSL - B3P86V1R,B3P86V3,B3P86V5,B3LYPV1R,B3LYPV3,B3LYPV5
C                   REPLACED DFTTYP: VWN1 -> VWN1RPA,B3LYP1 -> B3LYPV1R
C  7 MAR 12 - MWS - align DFTCAM common
C  6 Feb 12 - RP  - add SOGGA11 and M11 family, revised LR-LSDT routine
C 15 APR 11 - YI  - ADD LCBOPLRD FUNCTIONAL FOR LRD
C  1 OCT 10 - MK  - LC-RELATED BUG FIX FOR WB97 FAMILY
C 23 JUN 10 - SS,RP - IMPLEMENT MOHLYP,MOHLYP2 AND MORE DOUBLE HYBRIDS
C 14 OCT 09 - FZ  - INTERFACE TO REVTPSS FUNCTIONAL
C 14 AUG 09 - RP  - CHANGES/ADDITIONS TO B97 FAMILY, AND ADD B2PLYP
C 14 AUG 09 - SS  - M08-HX, M08-SO, SOGGA FUNCTIONALS
C 14 AUG 09 - KAN - COULOMB ATTENUATED METHODS (CAM) FOR DFT & TDDFT
C 22 MAY 09 - STB - ADDED JANSSEN PRUNED GRIDS TO DFT PROCEDURES
C  1 MAY 09 - DGF - INPGDFT: ALLOW DFTTYP=HFX AS A DEBUGGING OPTION
C 15 DEC 08 - MWS - LRCFUN: SET LRC TO AVOID BETA WORK IF CLOSED SHELL
C 23 OCT 08 - SS  - ADD B3PW91 AND EDF1 FUNCTIONALS
C 23 OCT 08 - FZ  - ADD PKZB AND TPSS META-GGA; PBESOL GGA FUNCTIONALS
C 23 OCT 08 - RP  - ADD REVPBE, B97, B97-1, B97-2 FUNCTIONALS
C 23 OCT 08 - RP  - ADD B97-D AND OTHER -D'S FOR DISPERSION CORRECTION
C 11 APR 08 - HPTI - INPGDFT: PRINT CHANGES FOR NEW ANGULAR GRIDS
C  4 MAR 08 - SOK - META-GGA FUNCTIONALS (NAME CHANGE FROM DFTEXC.SRC)
C 20 AUG 07 - MC  - FIX A BUG IN LC CASE
C 24 MAR 07 - SS  - PW91,PBE,PBE0,X3LYP,B3LYP1,VWN1,OPTX FUNCTIONALS
C 24 MAR 07 - RP  - ADD P86 AND PZ81 CORRELATION FUNCTIONALS
C 22 DEC 06 - ST,NK,MC - ADD LC EXCHANGE FUNCTIONALS
C  6 NOV 06 - MWS - ADJUST WAVEFUNCTION COMMON BLOCK
C 19 SEP 05 - MWS - ADD TRUE NUCLEAR CHARGE ARRAY TO INFOA COMMON
C  5 JUL 05 - MWS - SELECT NEW ATOM,BASIS,EFP,PCM,DAF DIMENSIONS
C 16 JAN 04 - MWS - SYNCH COMMON BLOCK DFGRID
C 24 JAN 02 - MWS - FIX CHAR VARIABLE USAGE, CHANGE CORR.ONLY KEYWORDS
C                   TO VWN/LYP/OP, FIX LYP FUNCTIONAL FOR NB=0 CASE
C 25 JUN 01 - MWS - ALTER COMMON BLOCK WFNOPT
C 13 JUN 01 - TT,SY,MK,DGF IMPLEMENT GRID-BASED DFT
C
C***********************************************************************
C     HOW TO ADD A NEW FUNCTIONAL INTO THE DFT GRID MODULE: 03/18/2007
C     BY SAROM LEANG (AKA MR. WINDOWS), DEPT. OF CHEM., IOWA STATE UNIVERSITY.
C
C     STEP 1) MODIFY THE INPGDFT ROUTINE
C
C     YOU WILL NEED TO BUMP UP THE PARAMTER -NEX- OR -NCOR-
C     DEPENDING ON IF YOU ARE ADDING AN EXCHANGE OR CORRELATION
C     FUNCTIONAL.  THE ADDITION OF HYBRID FUNCTIONALS WILL NOT NEED TO
C     MODIFY THIS PARAMETER.
C
C     NOTICE THAT THE FOLLOWING ARRAYS ARE DEPENDENT ON THE ABOVE
C     PARAMETER CHANGES:
C
C           -EX-, -COR- -EXNM-, -CORNM-, -NUMEX-, -NUMCOR-, -DOP-
C
C     CREATE A SPOT FOR YOUR FUNCTIONAL IN THE -EX- OR -COR- NAME ARRAY.
C     NOTE THAT IF YOU ADDING IN A HYBRID FUNCTIONAL AND ALL THE
C     INGREDIENTS OF THE HYBRID CURRENTLY EXISTS THEN YOU DO NOT NEED TO
C     MODIFY THE -EX- OR -COR- NAME ARRAY.
C     MODIFYING THE -EX- OR -COR- NAME ARRAYS ARE FOR NEW FUNCTIONALS
C
C     MODIFYING THE -EX- OR -COR- NAME ARRAY ALLOWS FOR THE MIXING AND
C     MATCHING OF EXCHANGE AND CORRELATION FUNCTIONALS IN DFTTYP.
C     FOR INSTANCE: DFTTYP = [-EX- NAME][-COR- NAME] = OLYP
C     WILL MATCH OPTX EXCHANGE WITH LYP CORRELATION.
C
C     ANOTHER EXAMPLE IS: DFTTYP = PW91PW91
C     WILL MATCH PW91 EXCHANGE WITH PW91 CORRELATION.  BUT THIS IS
C     ALREADY DEFINED AS DFTTYP = PW91
C
C     ONE MORE EXAMPLE: DFTTYP = BPW91
C     WHILL MATCH B88 EXCHANGE WITH PW91 CORRELATION
C
C     IF YOUR ADDING IN A NEW SET OF FUNCTIONALS (EXCHANGE+CORRELATION)
C     PLEASE MAKE SURE THAT THE INDEX OF THE EXCHANGE FUNCTIONAL IN
C     THE -EX- NAME ARRAY IS ALSO THE SAME AS THE INDEX OF THE
C     CORRELATION FUNCTIONAL IN -COR- NAME ARRAY.
C
C     EG: PW91 - EX[3] = PW91 AND COR[3] = PW91
C
C     THE -NEXFG- AND -NCORFG- CONTROL VALUES SHOULD ALSO CORRESPOND TO
C     THE INDEX OF THE FUNCTIONAL IN THE NAME ARRAYS.
C
C     EG: PW91 EXCHANGE: NEXFG = 3, EX[3] = PW91
C     EG: PW91 CORRELATION: NCORFG = 3, COR[3] = PW91
C
C     THE -NXCFG- CONTROL VALUE IS FOR FUNCTIONALS WHOSE ROUTINE CODE
C     CONTAINS BOTH THE EXCHANGE AND CORRELATION!  SEE EDF1 FOR AN
C     EXAMPLE.
C
C     HYBRID EXCHANGE FUCTIONALS AND HYBRID CORRELATION FUNCTIONALS ARE
C     TO USE NEGATIVE CONTROL NUMBERS FOR -NEXFG- AND -NCORFG-.
C
C     ADD A NEW DATA ENTRY FOR YOUR FUNCTIONAL
C     THIS DATA ENTRY CORRESPONDS TO WHAT THE USER NEEDS TO PROVIDE
C     IN DFTTYP.
C
C     IF YOU ARE ADDING AN EXCHANGE FUNCTIONAL THEN YOU WILL ALSO NEED
C     TO MAKE AN ENTRY FOR YOUR FUNCTIONAL IN DATA DQOP. THE VALUE YOU
C     WILL PROVIDE IS ZERO.
C
C     NEW HYBRID FUNCTIONALS WILL NEED A COMMON BLOCK TO STORE THE
C     FACTORS FOR EACH OF ITS FUNCTIONALS. YOU ARE PERMITTED TO CREATE A
C     NEW COMMON BLOCK FOR YOUR HYBRID.
C
C     EG: COMMON /CX3LYP/ CPW91
C     EG: COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG
C
C     ADD AN ENTRY FOR YOUR FUNCTIONALS IN THE SERIES OF IF STATEMENTS.
C
C     EXAMPLE:
C      ELSEIF(DFTYPE.EQ.OPTX)  THEN
C         NEXFG     = 7
C         EXCHR     =  EXNM(7)      <-- NAME ENTRY OF EXCHANGE NAME
C         CORCHR    = 'NONE'        <-- MANUAL ENTRY OF CORRELATION NAME
C         CSLT      = 1.05151D+00   <-- FACTORS FOR EACH FUNCTIONAL
C         COPTX     = 1.43169D+00
C
C     THE AMOUNT OF HATREE-FOCK EXCHANGE IS DEFINED IN -DFTTYP(3)-
C
C     NOTE THAT THE B88 EXCHANGE FUNCTIONAL ALREADY HAS SLATER-DIRAC
C     EXCHANGE (ALSO REFERRED TO HAS LDA EXCHANGE).
C
C     SO BE CAREFUL WHEN DEFINING -CSLT- AND -CB88- AT THE SAME TIME!
C
C     STEP 2) MODIFY THE CALCEXC ROUTINE
C
C     ADD AN ELSEIF ENTRY FOR YOUR FUNCTIONAL.
C
C     STEP 3) ADD YOUR FUNCTIONAL ROUTINE
C
C     A WORD OF CAUTION IF YOU DECIDE TO STEAL/COPY A PARAMETER LIST
C     FROM AN EXISTING SUBROUTINE:
C
C     IF YOU COMPARE THE PARAMETER NAMES THE OF B88 EXCHANGE IN THE
C     ROUTINE DEFINITION TO THE PARAMETER NAMES IN THE ROUTINE CALL TO
C     THE B88 EXCHANGE IN CALCEXC THEN YOU WILL NOTICED THAT ACTUAL
C     VARIABLE NAMES ARE SLIGHTLY DIFFERENT.  <-- AVOID TEDIOUS DEBUGING
C
C***********************************************************************
C
C                DERIVATIVE LEVEL OF THE FUNCTIONAL
C     GROUND STATE DFT ENERGY OR GRADIENT     REQUIRES 1ST DERIVATIVE
C     EXCITED STATE TD-DFT ENERGY             REQUIRES 2ND DERIVATIVE
C     EXCITED STATE TD-DFT GRADIENT           REQUIRES 3RD DERIVATIVE
C     NON-LINEAR TD-DFT (E.G. POLARIZABILITY) REQUIRES 3RD DERIVATIVE
C***********************************************************************
C     SPECIAL COMMENTS
C
C     IN ADDING THE OPTX EXCHANGE FUNCTIONAL INTO GAMESS IT WAS
C     DISCOVERED THAT ADDITIONAL PREFACTOR (AKA COEEFICIENTS)
C     ASSIGNMENTS HAD TO BE DECLARED IN THE ROUTINE NAMEXC.
C
C     THE -CSLT- PREFACTOR IS USED BY OTHER FUNCTIONALS AND HAS AN
C     INITIAL VALUE OF ONE IN THE ROUTINE INPGDFT.  IN THE OPTX
C     EXCHANGE FUNCTIONAL THIS VALUE IS 1.05151D+00.  NOW IN ORDER TO
C     ALLOW THE OPTX FUNCTIONAL TO BE MIXED WITH THE AVAILABLE
C     CORRELATION FUNCTIONALS IN GAMESS THE -CSLT- PREFACTOR HAD TO BE
C     ASSIGNED IN THE NAMEXC ROUTINE.  IT IS IN NAMEXC THAT THE NEXFG-
C     AND -NCORFG- VALUES ARE DETERMINED FOR AD-HOC EXCHANGE/CORRELATION
C     FUNCTIONAL COMBINATIONS.
C
C     02/21/2008
C     META-GGA CAPABILITIES HAVE BEEN IMPLEMENTED INTO THE DFT GRID
C     MODULE.  THE FOLLOWING FUNCTIONALS ARE META-GGAS (TAU-DEPENDENT)
C       - M05, M05-2X, VS98, M06, M06-L, M06-2X, M06-HF -
C
C     BOTH ENERGIES AND GRADIENTS WITH META-GGAS ARE AVAILABLE.
C     HESSIANS ARE NOT YET AVAILABLE.
C
C     09/02/2008
C     INTERFACED SEMI-EMPIRICAL DISPERSION CORRECTION FUNCTIONALS CODED
C     BY ROBERTO PEVERATI AND KIM BALDRIDGE (U.ZURICH) IN ADDITION TO
C     REVPBE AND EDF1 FUNCTIONALS.
C
C     XX/XX/2009
C     NEW ROUTINE FOR B97-FAMILY OF FUNCTIONALS CODED BY ROBERTO
C     PEVERATI AND KIM BALDRIDGE (U.ZURICH)
C
C     BOTH ENERGIES AND GRADIENTS ARE AVAILABLE.
C     HESSIANS ARE NOT YET AVAILABLE.
C
C***********************************************************************
C
C*MODULE DFTXCA  *DECK B88XF
      SUBROUTINE B88XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >                   GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                   FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >                   XALF,B88X,DUMA,DUMXA,DUMYA,DUMZA,
     >                   DUMB,DUMXB,DUMYB,DUMZB)
C***********************************************************************
C     BECKE 88 EXCHANGE FUNCTIONAL
C
C     A. D. BECKE
C     PHYS. REV. A 38,3098 (1988)
C
C     -----
C     INPUT
C     -----
C
C     ROA,B   .... SPINDENSITIES
C     GRAD**  .... DENSITY GRADIENTS
C     FTOTWT  .... VOLUME OF THIS GRID
C
C     ------
C     OUTPUT
C     ------
C
C     XALF    ....  EXCHANGE ENERGY OF LDA PART
C     B88X    ....  EXCHANGE ENERGY OF GGA PART
C     DUM***  ....  FIRST DERIVATIVES OF THE EXCHANGE FUNCTINALS
C     SIGKA,B ....  EXC=-1/2*INT(SIGK*RHO^(4/3))
C     DKDXA,B ....  DSIGK/DX
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      COMMON /NLRC  / LCFLAG,LRINT,EMU,EMU2,LRFILE
      LOGICAL LCFLAG,LRINT
C***********************************************************************
       X1 = (3.0D+00/PI)**(ONE/3.0D+00)
       BECKEB=0.0042D+00
       FACE  =-1.5D+00*X1*(ONE/TWO )**(TWO/THREE)
       FACP  = 4.0D+00/3.0D+00
C***********************************************************************
C      CLOSED SHELL CALCULATION
C***********************************************************************
       IF (RHFGVB) THEN
         RHO=ROA
         GRD=GRDAA
         RHO13=RHO**(ONE/3.0D+00)
         RHOE =RHO13**4
         X    =SQRT(GRD)/RHOE
         Q    =SQRT(ONE+X*X)
         S    =LOG(X+Q)
         T    =ONE+6.0D+00*BECKEB*X*S
         G    =-BECKEB*X*X/T
         H    =(-TWO*BECKEB*X+6.0D+00*(BECKEB*X)**2*(-S+X/Q))/T**2
         R    =FACP*RHO13
         E    =FACE
         XCL  =E * RHOE
         XCNL =G * RHOE
         XALFA =CB88*TWO*XCL *FTOTWT
         B88XA =CB88*TWO*XCNL*FTOTWT
         U     =CB88*R*(E+G-X*H)
         PDUMA =U
         W     =CB88*0.5D+00*H/SQRT(GRD)
         PDUMXA=TWO*W*GRADXA
         PDUMYA=TWO*W*GRADYA
         PDUMZA=TWO*W*GRADZA
C     ----- FOR OP CORRELATION -----
         SIGKA= -(FACE+G)*TWO
         DKDXA= -H*TWO
C     ------------------------------
         IF (LCFLAG) THEN
            CALL LRCFUN(UROHF,ROA,ROB,GRDAA,GRDBB,
     >           GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >           FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >           XALFA,XALFB,B88XA,B88XB,PDUMA,PDUMXA,PDUMYA,
     >           PDUMZA,PDUMB,PDUMXB,PDUMYB,PDUMZB,FACE)
         END IF
         XALF   = XALF + XALFA
         B88X   = B88X + B88XA
         DUMA   = DUMA + PDUMA
         DUMXA  = DUMXA+ PDUMXA
         DUMYA  = DUMYA+ PDUMYA
         DUMZA  = DUMZA+ PDUMZA
C***********************************************************************
C      OPEN SHELL CALCULATION
C***********************************************************************
       ELSE IF (UROHF) THEN
C     ----- ALPHA CONTRIBTUTION ----
         RHO13A=ROA**(ONE/3.0D+00)
         RHOEA =RHO13A**4
         XA    =SQRT(GRDAA)/RHOEA
         QA    =SQRT(ONE+XA**2)
         SA    =LOG(XA+QA)
         TA    =ONE+6.0D+00*BECKEB*XA*SA
         GA    =-BECKEB*XA*XA/TA
         HA    =(-TWO*BECKEB*XA
     >            +6.0D+00*(BECKEB*XA)**2*(-SA+XA/QA))/TA**2
         RA    =FACP*RHO13A
         EA    =FACE
         UA     =CB88*RA*(EA+GA-XA*HA)
         PDUMA  =UA
         WA     =CB88*0.5D+00*HA/SQRT(GRDAA)
         PDUMXA =TWO*WA*GRADXA
         PDUMYA =TWO*WA*GRADYA
         PDUMZA =TWO*WA*GRADZA
C     ----- BETA CONTRIBTUTION ----
         RHO13B=ROB**(ONE/3.0D+00)
         RHOEB =RHO13B**4
         EB    =FACE
         IF(ROB.LT.1.0D-15) THEN
            GB    =ZERO
            HB    =ZERO
            PDUMB =ZERO
            PDUMXB=ZERO
            PDUMYB=ZERO
            PDUMZB=ZERO
            GOTO 9999
         ENDIF
         XB    =SQRT(GRDBB)/RHOEB
         QB    =SQRT(ONE+XB**2)
         SB    =LOG(XB+QB)
         TB    =ONE+6.0D+00*BECKEB*XB*SB
         GB    =-BECKEB*XB*XB/TB
         HB    =(   -TWO* BECKEB*XB
     >        +6.0D+00*(BECKEB*XB  )**2*(-SB+XB/QB))/TB**2
         RB    =FACP*RHO13B
         UB    =CB88*RB*(EB+GB-XB*HB)
         PDUMB  =UB
         WB    =CB88*0.5D+00*HB/SQRT(GRDBB)
         PDUMXB =TWO*WB*GRADXB
         PDUMYB =TWO*WB*GRADYB
         PDUMZB =TWO*WB*GRADZB
 9999    CONTINUE
         XCLA  = EA*RHOEA
         XCLB  = EB*RHOEB
         XCNLA = GA*RHOEA
         XCNLB = GB*RHOEB
         XALFA = CB88*XCLA* FTOTWT
         XALFB = CB88*XCLB* FTOTWT
         B88XA = CB88*XCNLA*FTOTWT
         B88XB = CB88*XCNLB*FTOTWT
C     ----- FOR OP CORRELATION -----
         SIGKA= -(FACE+GA)*TWO
         SIGKB= -(FACE+GB)*TWO
         DKDXA= -HA*TWO
         DKDXB= -HB*TWO
C     -------------------------------
         IF (LCFLAG) THEN
            CALL LRCFUN(UROHF,ROA,ROB,GRDAA,GRDBB,
     >           GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >           FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >           XALFA,XALFB,B88XA,B88XB,PDUMA,PDUMXA,PDUMYA,
     >           PDUMZA,PDUMB,PDUMXB,PDUMYB,PDUMZB,FACE)
         END IF
         XALF   = XALF + XALFA + XALFB
         B88X   = B88X + B88XA + B88XB
         DUMA   = DUMA + PDUMA
         DUMXA  = DUMXA+ PDUMXA
         DUMYA  = DUMYA+ PDUMYA
         DUMZA  = DUMZA+ PDUMZA
         DUMB   = DUMB + PDUMB
         DUMXB  = DUMXB+ PDUMXB
         DUMYB  = DUMYB+ PDUMYB
         DUMZB  = DUMZB+ PDUMZB
       ENDIF
      RETURN
      END
C*MODULE DFTXCA *DECK CAMB88XF
      SUBROUTINE CAMB88XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >                    GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                    FTOTWT,XALF,B88X,
     >                    DUMA,DUMXA,DUMYA,DUMZA,
     >                    DUMB,DUMXB,DUMYB,DUMZB)
C***********************************************************************
C
C     ATTENUNATED BECKE 88 EXCHANGE FUNCTIONAL
C
C     A. D. BECKE
C     PHYS. REV. A 38,3098 (1988)
C     YANAI, TEW, HANDY
C     CHEM. PHYS. LET. A 393,51 (2004)
C
C     -----
C     INPUT
C     -----
C
C     ROA,B   .... SPINDENSITIES
C     GRAD**  .... DENSITY GRADIENTS
C     TOTWT   .... VOLUME OF THIS GRID
C
C     ------
C     OUTPUT
C     ------
C
C     B88X    ....  EXCHANGE ENERGY OF GGA PART
C     DUM***  ....  FIRST DERIVATIVES OF THE EXCHANGE FUNCTINALS
C
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB,CAMFLAG
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
      PARAMETER (FOUR=4.0D+00)
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      COMMON /DFTCAM/ ALPHAC,BETAC,CAMMU,CAMVWN,CAMLYP,CAMFLAG
C***********************************************************************
       X1 = (3.0D+00/PI)**(ONE/3.0D+00)
       BECKEB=0.0042D+00
       FACE  =-1.5D+00*X1*(ONE/TWO )**(TWO/THREE)
       FACP  = 4.0D+00/3.0D+00
C
C        B88CSW = 0.9 ENSURES CAMB3LYP --> B3LYP WHEN BETAC = 0
C
         B88CSW = ONE
C***********************************************************************
C      CLOSED SHELL CALCULATION
C***********************************************************************
       IF (RHFGVB) THEN
         RHO=ROA
         GRD=GRDAA
         RHO13=RHO**(ONE/3.0D+00)
         RHOE =RHO13**4
         X    =SQRT(GRD)/RHOE
         Q    =SQRT(ONE+X*X)
         S    =LOG(X+Q)
         T    =ONE+6.0D+00*BECKEB*X*S
         G    =-BECKEB*X*X/T
         H    =(-TWO*BECKEB*X+6.0D+00*(BECKEB*X)**2*(-S+X/Q))/T**2
         R    =FACP*RHO13
         E    =FACE
         XCL  =E * RHOE
         XCNL =G * RHOE
C
C        ENERGY
C
         B88 = TWO*XCNL
         XALF = TWO*XCL
         ACAM = CAMMU*SQRT(-(XALF+B88))/(6.0D+00*SQRT(PI)*RHO)
         B88X  = HACAM(ACAM)*(XALF+B88*B88CSW)*FTOTWT
C
C        GRADIENTS
C
C        D_B88/DRHO
C
         U    =R*(G-X*H)
         DUMA =-(6.0D00/PI)**(ONE/3.0D+00)*RHO13
         DUMA =DUMA+U
C
C        DF_B88/DGAMMA
C
         W    =0.5D+00*H/SQRT(GRD)
C
C        D_A/DRHO
C
         ACAM1 = ACAM*(DUMA/(XALF+B88) -ONE/RHO)
C
C        D_A/D_GAMMA (DEL-RHO*DEL-RHO)
C
         ACAMG1 = ACAM*(W/(XALF+B88))
         DFDRHO = HACAM1(ACAM)*ACAM1*(XALF+B88)/TWO
     *               + HACAM(ACAM)*DUMA
         DFDGAM = HACAM1(ACAM)*ACAMG1*(XALF+B88)/TWO
     *               + HACAM(ACAM)*W
C
         DUMA = DFDRHO
         W = DFDGAM
C
C     WE HAVE SET XALF = ZERO BECAUSE GAMESS ADD XALF TO THE ENERGY
C     (SEE DMATD)
C
         XALF = ZERO
         DUMXA=TWO*W*GRADXA
         DUMYA=TWO*W*GRADYA
         DUMZA=TWO*W*GRADZA
C
C***********************************************************************
C      OPEN SHELL CALCULATION
C***********************************************************************
       ELSE IF (UROHF) THEN
C     ----- ALPHA CONTRIBTUTION ----
         RHO13A=ROA**(ONE/3.0D+00)
         RHOEA =RHO13A**FOUR
         XA    =SQRT(GRDAA)/RHOEA
         QA    =SQRT(ONE+XA**TWO)
         SA    =LOG(XA+QA)
         TA    =ONE+6.0D+00*BECKEB*XA*SA
         GA    =-BECKEB*XA*XA/TA
         HA    =(-TWO*BECKEB*XA
     >            +6.0D+00*(BECKEB*XA)**2*(-SA+XA/QA))/TA**TWO
         RA    =FACP*RHO13A
         EA    =FACE
         XALFA   =EA*RHOEA
         B88A  =GA*RHOEA
         ACAMA = CAMMU*SQRT(-(XALFA+B88A*B88CSW)*TWO)/
     *           (6.0D+00*SQRT(PI)*ROA)
         AB88A  = HACAM(ACAMA)*(XALFA+B88A*B88CSW)
         UA    =RA*(EA+GA-XA*HA)
         DUMA  =DUMA+UA
         WA    =0.5D+00*HA/SQRT(GRDAA)
         ACAM1A = ACAMA*(DUMA/((XALFA+B88A*B88CSW)*TWO) -ONE/ROA)
         ACAMG1A = ACAMA*(WA/((XALFA+B88A*B88CSW)*TWO))
         DFDRHOA = HACAM1(ACAMA)*ACAM1A*(XALFA+B88A*B88CSW)
     *               + HACAM(ACAMA)*DUMA
         DFDGAMA = HACAM1(ACAMA)*ACAMG1A*(XALFA+B88A*B88CSW)
     *               + HACAM(ACAMA)*WA
         DUMA = DFDRHOA
         WA = DFDGAMA
         DUMXA =TWO*WA*GRADXA
         DUMYA =TWO*WA*GRADYA
         DUMZA =TWO*WA*GRADZA
C     ----- BETA CONTRIBTUTION ----
         RHO13B=ROB**(ONE/3.0D+00)
         RHOEB =RHO13B**FOUR
         EB    =FACE
         IF(ROB.LT.1.0D-15) THEN
           GB  = ZERO
           HB  = ZERO
           GOTO 9999
         ENDIF
         XB    =SQRT(GRDBB)/RHOEB
         QB    =SQRT(ONE+XB**TWO)
         SB    =LOG(XB+QB)
         TB    =ONE+6.0D+00*BECKEB*XB*SB
         GB    =-BECKEB*XB*XB/TB
         HB    =(   -TWO* BECKEB*XB
     >              +6.0D+00*(BECKEB*XB  )**TWO*(-SB+XB/QB))/TB**TWO
         RB    =FACP*RHO13B
         XALFB   =EB*RHOEB
         B88B  =GB*RHOEB
         ACAMB = CAMMU*SQRT(-(XALFB+B88B*B88CSW)*TWO)/
     *           (6.0D+00*SQRT(PI)*ROB)
         AB88B  = HACAM(ACAMB)*(XALFB+B88B*B88CSW)
         UB    =RB*(EB+GB-XB*HB)
         DUMB  =DUMB+UB
         WB    =0.5D+00*HB/SQRT(GRDBB)
         ACAM1B = ACAMB*(DUMB/((XALFB+B88B*B88CSW)*TWO) -ONE/ROB)
         ACAMG1B = ACAMB*(WB/((XALFB+B88B*B88CSW)*TWO))
         DFDRHOB = HACAM1(ACAMB)*ACAM1B*(XALFB+B88B*B88CSW)
     *               + HACAM(ACAMB)*DUMB
         DFDGAMB = HACAM1(ACAMB)*ACAMG1B*(XALFB+B88B*B88CSW)
     *               + HACAM(ACAMB)*WB
         DUMB = DFDRHOB
         WB = DFDGAMB
         DUMXB =TWO*WB*GRADXB
         DUMYB =TWO*WB*GRADYB
         DUMZB =TWO*WB*GRADZB
 9999    CONTINUE
         B88X  =(AB88A+AB88B)*FTOTWT
         XALF  = ZERO
       ENDIF
      RETURN
      END
C*MODULE DFTXCA  *DECK EDF1
      SUBROUTINE EDF1(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >           GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >           FTOTWT,XCGRD,
     >           VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
C
C        INTERFACED BY ROBERTO PEVERATI AND KIM BALDRIDGE, U.ZURICH
C
      IF(RHFGVB) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
         SIGMAAA1 = 4.0D+00*GRDAA
C
         CALL RKS_XC_EDF1
     & (IDERIV,NPT,RHOA1,SIGMAAA1,
     &  ZK,VRHOA,VSIGMAAA,
     &  V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2)
C
         WAA = VSIGMAAA
C
         VXCA1 = VXCA1 + VRHOA
         DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA)
         DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA)
         DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA)
C
         XCGRD = XCGRD   + ZK * FTOTWT
C
      END IF
C
      IF(UROHF) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = ROA
         SIGMAAA1 = GRDAA
         RHOB1    = ROB
         SIGMABB1 = GRDBB
         SIGMAAB1 = GRDAB
C
       CALL UKS_XC_EDF1
     & (IDERIV,NPT,RHOA1,RHOB1,SIGMAAA1,SIGMABB1,SIGMAAB1,
     &  ZK,VRHOA,VRHOB,VSIGMAAA,VSIGMABB,VSIGMAAB,
     &  V2RHOA2,V2RHOB2,V2RHOAB,
     &  V2RHOASIGMAAA,V2RHOASIGMAAB,V2RHOASIGMABB,
     &  V2RHOBSIGMABB,V2RHOBSIGMAAB,V2RHOBSIGMAAA,
     &  V2SIGMAAA2,V2SIGMAAAAB,V2SIGMAAABB,
     &  V2SIGMAAB2,V2SIGMAABBB,V2SIGMABB2)
C
         WAA = VSIGMAAA
         WBB = VSIGMABB
         WAB = VSIGMAAB
C
         VXCA1 = VXCA1 + VRHOA
         DUMAX = DUMAX + 2.0D+00*(WAA*GRADXA) + (WAB*GRADXB)*1.0D+00
         DUMAY = DUMAY + 2.0D+00*(WAA*GRADYA) + (WAB*GRADYB)*1.0D+00
         DUMAZ = DUMAZ + 2.0D+00*(WAA*GRADZA) + (WAB*GRADZB)*1.0D+00
C
         VXCB1 = VXCB1 + VRHOB
         DUMBX = DUMBX + 2.0D+00*(WBB*GRADXB) + (WAB*GRADXA)*1.0D+00
         DUMBY = DUMBY + 2.0D+00*(WBB*GRADYB) + (WAB*GRADYA)*1.0D+00
         DUMBZ = DUMBZ + 2.0D+00*(WBB*GRADZB) + (WAB*GRADZA)*1.0D+00
C
         XCGRD = XCGRD   + ZK * FTOTWT
C
      END IF
C
      RETURN
      END
C
C*MODULE DFTXCA  *DECK LRCFUN
      SUBROUTINE LRCFUN(UROHF,ROA,ROB,GRDAA,GRDBB,
     >           GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >           FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >           XALFA,XALFB,B88XA,B88XB,DUMA,DUMXA,DUMYA,
     >           DUMZA,DUMB,DUMXB,DUMYB,DUMZB,FACE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION KS(2),MS(2),JUDGE
      LOGICAL UROHF,LCFLAG,LRINT
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      COMMON /NLRC  / LCFLAG,LRINT,EMU,EMU2,LRFILE
      INTEGER LRFILE,NSPIN,S,I,P,J,A,IRS,IGSS,ITS,ILRC,NADD,MPROD,
     *        MAXPRD
      PARAMETER (NADD=1,MPROD=3,MAXPRD=3,NVAR=3)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00,THREE=3.0D+00,
     *           FOUR=4.0D+00,SIX=6.0D+00,EIGHT=8.0D+00,HALF=0.5D+00)
      PARAMETER (IRS=1,IGSS=2,ITS=3)
      PARAMETER (TAYTHR=1.0D-02,CUTLRC=1.0D-15,CUTHF=1.0D-15,
     >            CUTOFF=1.0D-15)
      DIMENSION FIPS(NADD,MAXPRD,2),DFIPS(NADD,MAXPRD,NVAR,2),
     *          PRDFIP(NADD,2),GS(2),ILRC(2),AS(2),EXPS1(2),
     *          DEXS(3,2),RS(2),DKSDXS(2),GFIPS(2),DRS(NVAR,2),
     *          XS(2),DXS(NVAR,2),DAS(NVAR,2),DMSDAS(2),DLSDAS(2),
     *          PRXALF(2),PRB88X(2)
C
C     INITIALIZE
C     NSPIN RHF=1 UHF=2
      IF (UROHF) THEN
         NSPIN = 2
      ELSE
         NSPIN = 1
      END IF
C-------------------------------
C     GET FIPS(FOR ENERGY)
C-------------------------------
      FACP     = FOUR/THREE
      ONETHR   = ONE/THREE
      PI12     = SQRT(PI)
      RS(1)    = ROA
      RS(2)    = ROB
      KS(1)    = SIGKA
      KS(2)    = SIGKB
C     CLFIPS AND GFIPS ARE DIVINDING PARAMETERS' FOR XALF AND B88X
      CLFIPS    = -TWO*FACE
      GS(1)    = GRDAA
      GS(2)    = GRDBB
      DKSDXS(1)= DKDXA
      DKSDXS(2)= DKDXB
      ILRC(1)  = 1
      ILRC(2)  = 0
      IF(UROHF) ILRC(2)=1
C
      DO 10 S=1,NSPIN
         FIPS(1,1,S)=RS(S)**FACP
         FIPS(1,2,S)=KS(S)
         GFIPS(S)=KS(S)-CLFIPS
         AS(S)=(RS(S)**(-ONETHR))*(FIPS(1,2,S)**HALF)*EMU/(SIX*PI12)
         ERFVAL=GMSERF(HALF/AS(S))
         X4A21 =-ONE/(FOUR*(AS(S)**2))
         IF(ABS(X4A21).LT.TAYTHR) THEN
            EXPS1(S)=TAYEXP(X4A21)
         ELSE
            EXPS1(S)=EXP(X4A21)-ONE
         END IF
         FIRST = PI12*ERFVAL
         SE1   = TWO*EXPS1(S)
         SE2   = -FOUR*(AS(S)**2)*EXPS1(S)-ONE
         SECOND= AS(S)*(SE1+SE2)
         MS(S) = FIRST + SECOND
         FIPS(1,3,S)=-HALF+FACP*AS(S)*MS(S)
C
         JUDGE = ABS(AS(S) * MS(S) * (EIGHT/THREE))
C     DON'T APPLY LRC:DFT EXCHANGE FUNCTIONAL
         IF(JUDGE .LT. CUTLRC) THEN
            ILRC(S) = 0
C     FULL HARTREE-FOCK
         ELSE IF((ONE - JUDGE) .LT. CUTHF) THEN
            ILRC(S) = -1
         END IF
 10   CONTINUE
C
C     GET_PRODFIPS
      DO 20 S=1,NSPIN
C     FOR DIVIDE XALF AND B88X
         PRXALF(S) = ZERO
         PRB88X(S) = ZERO
         IF(ILRC(S).EQ.1) THEN
            DO 30 I=1,NADD
               PRDFIP(I,S)=ONE
               DO 40 P=1,MPROD,2
                  PRDFIP(I,S) = PRDFIP(I,S)*FIPS(I,P,S)
 40            CONTINUE
               PRXALF(S) = CLFIPS    * PRDFIP(I,S)
               PRB88X(S) = GFIPS(S) * PRDFIP(I,S)
C     FOR DFIPS
               PRDFIP(I,S)=PRDFIP(I,S)*FIPS(I,2,S)
 30         CONTINUE
         END IF
 20   CONTINUE
C     TWO/S:IF RHF EXC MUST PRXALF *2
      IF(ILRC(1).NE.0) THEN
         XALFA = CB88*(TWO/NSPIN)*PRXALF(1) * FTOTWT
         B88XA = CB88*(TWO/NSPIN)*PRB88X(1) * FTOTWT
      END IF
      IF(ILRC(2).NE.0) THEN
         XALFB = CB88*PRXALF(2)*FTOTWT
         B88XB = CB88*PRB88X(2)*FTOTWT
      END IF
C-----------------------------------
C     GET DFIPS(FOR 1ST DERIVATIVE)
C-----------------------------------
      DO 70 S=1,NSPIN
         DRS(IRS,S)  = ONE
         DRS(IGSS,S) = ZERO
         DRS(ITS,S)  = ZERO
         DO 80 A=1,NVAR
            DFIPS(1,1,A,S)=FACP*FIPS(1,1,S)/RS(S)*DRS(A,S)
 80      CONTINUE
         XS(S)=(GS(S)**HALF)*(RS(S)**(-FACP))
         DXS(IRS,S)  = -FACP/RS(S)*XS(S)
         IF(NEXFG.EQ.1) THEN
            DXS(IGSS,S) = ZERO
         ELSE
            DXS(IGSS,S) = HALF / GS(S) * XS(S)
         END IF
         DXS(ITS,S)  = ZERO
         DO 90 A=1,NVAR
            DFIPS(1,2,A,S) = DKSDXS(S) * DXS(A,S)
 90      CONTINUE
         DO 100 A=1,NVAR
            DAS(A,S) = AS(S)*(-ONETHR/RS(S)*DRS(A,S)+HALF
     >           / FIPS(1,2,S)*DFIPS(1,2,A,S))
 100     CONTINUE
         DMSDAS(S) = -THREE-12.0D+00*(AS(S)**2)*EXPS1(S)
         DLSDAS(S) = FACP*(MS(S)+AS(S)*DMSDAS(S))
         DO 110 A=1,NVAR
            DFIPS(1,3,A,S) = DLSDAS(S)*DAS(A,S)
 110     CONTINUE
 70   CONTINUE
C-----------------------------------
C     GET FIRST DERIVATIVE(DEXS)
C-----------------------------------
      DO 120 S=1,NSPIN
         DO 130 A=1,NVAR
            DEXS(A,S) = ZERO
            IF(ILRC(S).EQ.1) THEN
               DO 140 I=1,NADD
                  DO 150 J=1,MPROD
                     IF(ABS(DFIPS(I,J,A,S)).GT.CUTOFF) THEN
C     CALCULATE PRD_TERM=FIPS(1)*FIPS(2)*FIPS(3)/FIPS(S)
                        IF(ABS(FIPS(I,J,S)).GT.CUTOFF) THEN
                           PRDTER = PRDFIP(I,S)/FIPS(I,J,S)
                        ELSE
                           PRDTER = ONE
                           DO 160 P=1,MPROD
                              IF (P.NE.J) THEN
                                 PRDTER=PRDTER*FIPS(I,P,S)
                              END IF
 160                       CONTINUE
                        END IF
C     PRD_TERM TERMINATION
                        DEXS(A,S) = DEXS(A,S)+DFIPS(I,J,A,S)*PRDTER
                     END IF
 150              CONTINUE
 140           CONTINUE
            END IF
 130     CONTINUE
 120  CONTINUE
C------------------------------------
C     SET FIRST DERIVATIVE (DUM**)
C------------------------------------
      IF(ILRC(1).NE.0) THEN
         DUMA = CB88*DEXS(1,1)
         DUMXA= CB88*TWO*DEXS(2,1)*GRADXA
         DUMYA= CB88*TWO*DEXS(2,1)*GRADYA
         DUMZA= CB88*TWO*DEXS(2,1)*GRADZA
      END IF
      IF(ILRC(2).NE.0) THEN
         IF(UROHF) THEN
            DUMB = CB88*DEXS(1,2)
            DUMXB= CB88*TWO*DEXS(2,2)*GRADXB
            DUMYB= CB88*TWO*DEXS(2,2)*GRADYB
            DUMZB= CB88*TWO*DEXS(2,2)*GRADZB
         END IF
      END IF
C     IF(ILRC.EQ.0) XALF,B88X,DUM** IS ORIGINAL DFT EXCHANGE FUNCTIONAL
      RETURN
      END
C
C*MODULE DFTXCA  *DECK TAYEXP
      DOUBLE PRECISION FUNCTION TAYEXP(X)
      DOUBLE PRECISION X
      INTEGER NTERM,I
      DOUBLE PRECISION SUMVAL,IVAL,COEF
      PARAMETER (NTERM=16)
C
      SUMVAL = X
      IVAL = X
      DO 10 I = 2,NTERM
         COEF =  I
         IVAL = IVAL * (X / COEF)
         SUMVAL = SUMVAL + IVAL
 10         CONTINUE
      TAYEXP = SUMVAL
      RETURN
      END
C
C*MODULE DFTXCA  *DECK CALCEXC
C> @brief driver for possible exchange/correlation KS contributions
C
      SUBROUTINE CALCEXC(ROA,ROB,FTOTWT,GRDAA,GRDBB,GRDAB,
     >                  GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                  XALPHA,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >                  VXCB1,DUMBX,DUMBY,DUMBZ,ECF,
     >                  TAUXA,TAUYA,TAUZA,DMGGA,TAUXB,TAUYB,TAUZB,DMGGB)
C
C***********************************************************************
C       DRIVER FOR THE  DFT EXCHANGE
C      CORRELATION ENERGY CALCULATION
C***********************************************************************
C
C     NXCFG CONTROLS EXCHANGE-CORRELATION FUNCTIONAL
C     0     ---  NONE, NOT A COMBINED EXCHANGE AND CORRELAION
C                      FUNCTIONAL CODE CALL
C     1     ---  EDF1 (EMPIRICAL DENSITY FUNCTIONAL 1 OF J. A. POPLE)
C     2     ---  PLEASE ADD NEW COMBINED EXCHANGE-CORRELATION FUNCTIONAL
C
C     NEXFG CONTROLS EXCHANGE FUNCTIONAL
C    -3     ---  B3 OF CAM-B3LYP
C    -2     ---  X3 OF X3LYP
C    -1     ---  B3 OF B3LYP*, B3PW91, B3P86*
C     0     ---  HARTREE-FOCK
C     1     ---  SLATER
C     2     ---  BECKE 88
C     3     ---  PERDEW-WANG 91
C     4     ---  PERDEW-BURKE-ERNZERHOF (PBE)
C     5     ---  GILL 96
C     6     ---  PARAMETER-FREE
C     7     ---  HANDY-COHEN (OPTX) NOT RELATED TO (OP) CORRELATION
C     8     ---  REVISED PBE
C     11    ---  M05
C     12    ---  VS98
C     13    ---  M06
C     14    ---  PBE-SOL
C     15    ---  TPSS
C     16    ---  TPSS-MOD
C     17    ---  PKZB
C     18    ---  RPBE
C     19    ---  M08/M11
C     20    ---  B97 FAMILY
C     21    ---  revTPSS
C     22    ---  SOGGA
C     23    ---  dlDF
C     9,10,24 ...  PLEASE ADD NEW FUNCTIONAL
C
C     NCORFG CONTROLS CORRELATION FUNCTIONAL
C    -8     ---  B3LYPV3
C    -7     ---  B3P86V5
C    -6     ---  B3P86V1R
C    -5     --- (B3P86V3 = B3P86)
C    -4     ---  B3PW91
C    -3     ---  PERDEW-WANG 91 USING NWCHEM CONSTANTS FOR PW91LDA
C    -2     ---  B3LYPV1R OR X3LYP
C    -1     --- (B3LYPV5 = B3LYP)
C     0     ---  NONE (EXCHANGE ONLY)
C     1     ---  VWN FORMULA 5
C     2     ---  LEE-YANG-PARR
C     3     ---  PERDEW-WANG 91
C     4     ---  PERDEW-BURKE-ERNZERHOF (PBE)
C     5     ---  VWN FORMULA 1 (RPA)
C     6     ---  VWN FORMULA 5 FOR BACKWARDS COMPATIBILITY
C     7     ---  ONE-PARAMETER-PROGRESSIVE (OP)
C     8     ---  PERDEW-WANG 91 LDA
C     9     ---  PERDEW 86
C     10    ---  PERDEW-ZUNGER 81
C     11    ---  M05
C     12    ---  VS98
C     13    ---  M06
C     14    ---  PBE-SOL
C     15    ---  TPSS
C     16    ---  HLYP (CORRELATION FOR MOHLYP)
C     17    ---  PKZB
C     18    ---  VWN FORMULA 3
C     19    ---  M08/M11
C     20    ---  B97 FAMILY
C     21    ---  revTPSS
C     22    ---  SOGGA
C     23    ---  dlDF
C     24    ...  PLEASE ADD NEW FUNCTIONAL
C
C   * OTHER VARIABLES....
C
C     ROA,ROB                    <---     DENSITY
C     GRADXA,GRADXB,ETC          <---     GRAD(RHO)
C     GRDAA,GRDBB,GRDAB          <---     GRAD(RHO) * GRAD(RHO)
C     VXCA1,VXCB1                <---     DEXC/DRHO
C     DUMAX,DUMAY,DUMAZ,ETC      <---     DEXC/DG
C     XALPHA                     <---     EX FROM LDA TERM
C     XGRD                       <---     EX FROM GRADIENT TERM
C     ECF                        <---     CORRELATION ENERGY
C     TAU_A, TAU_B               <---     X,Y,Z COMPONENTS OF KINETIC
C                                         ENERGY DENSITY
C     DMGGA, DMGGB               <---     DEXC/DTAU
C***********************************************************************
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000)
C
      COMMON /CM05  / CM05XF, IM05
      COMMON /CM06  / IM06
      COMMON /CM08  / IM08
      COMMON /CSOGGA/ ISOGGA
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      LOGICAL UROHF, RHFGVB
C
      DATA RHF,UHF,ROHF,GVB/8HRHF     ,8HUHF     ,8HROHF     ,
     *     8HGVB     /
C***********************************************************************
      UROHF = SCFTYP.EQ.UHF  .OR.  SCFTYP.EQ.ROHF
      RHFGVB = SCFTYP.EQ.RHF  .OR.  SCFTYP.EQ.GVB
C***********************************************************************
C           EXCHANGE-CORRELATION COMBINED FUNCTIONAL CALCULATION
C***********************************************************************
C
C     -----EDF-1-----
C
      IF(NXCFG.EQ.1) THEN
         CALL EDF1(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
         RETURN
      END IF
C
C***********************************************************************
C           EXCHANGE FUNCTIONAL CALCULATION
C***********************************************************************
      DKDXA=0.0D+00
      DKDXB=0.0D+00
      SIGKA=0.0D+00
      SIGKB=0.0D+00
      DUMMY=0.0D+00
C
C     -----HARTREE-FOCK EXCHANGE-----
C
      IF(NEXFG.EQ.0) THEN
         IF (NCORFG.EQ.7) THEN
C     ----- HOP METHOD -----
            CALL B88XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >           GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >           FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >           DUMMY,DUMMY,DUMMY,DUMMY,DUMMY,DUMMY,
     >           DUMMY,DUMMY,DUMMY,DUMMY)
C
         ENDIF
C
C     ----- SLATER EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.1) THEN
         CALL LSDSLT(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,XALPHA,
     *               SIGKA,SIGKB)
C
C     ----- BECKE 88 EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.2) THEN
C
         CALL B88XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >        XALPHA,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- PW91 EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.3) THEN
      CALL PW91XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- PBE EXCHANGE -----
C
C         PBE EXCHANGE/CORRELATION FUNCTIONAL:
C           J.P.PERDEW, K.BURKE, M.ERNZERHOF
C              PHYS.REV.LETT.  77, 3865-8(1996); ERR. 78,1396(1997)
C           M.ERNZERHOF, G.E.SCUSERIA
C              J.CHEM.PHYS. 110, 5029-5036(1999)
C         NOTE THAT ONLY THE EXCHANGE FUNCTIONAL IS IN GAMESS.
C
C     CAUTION: THIS FUNCTIONAL MAY NOT BE CORRECTLY PROGRAMMED?
C     MIKE SCHMIDT FOUND IN JUNE 2001 THAT ETHANOL 6-31G(D) HAS
C     AN ENERGY OF -153.9850674001 WITH GAMESS,
C              BUT -153.9851024042 WITH NWCHEM.  SINCE THE OTHER
C     FUNCTIONALS AGREE TO 1 OR 2 IN THE 7TH DIGIT, THIS SEEMS
C     TO BE A FAIRLY LARGE DISCREPANCY.
C     BREAKING NEWS: THIS ISSUE WAS ADDRESSED BY SAROM SOK IN 3/2008,
C     THE VALUE FOR MU NOW HAS INCREASED PRECISION TO MATCH OTHER CODES
C
      ELSE IF(NEXFG.EQ.4) THEN
         CALL PBEXFOP(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >        XALPHA,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- GILL 96 EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.5) THEN
         CALL G96XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >        XALPHA,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- PARAMETER FREE EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.6) THEN
         CALL PFREE(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >        XALPHA,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- OPTX EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.7) THEN
         CALL LSDSLT(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,XALPHA,
     >               SIGKA,SIGKB)
         CALL OPTXXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >               GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >               FTOTWT,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >               VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- REVPBE EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.8) THEN
         CALL REVPBE(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >        XALPHA,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- M05 EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.11) THEN
         CALL M05XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB,IM05)
C
C     ----- VS98 EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.12) THEN
         CALL VS98XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB,IM06)
C
C     ----- M06 EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.13) THEN
         CALL M06XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB,IM06)
C
C     ----- PBES EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.14) THEN
          CALL PBESXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- TPSS EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.15) THEN
         CALL TPSSXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C     ----- TPSS-M EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.16) THEN
         CALL TPSSMXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C     ----- PKZB EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.17) THEN
         CALL PKZBXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C     ----- RPBE EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.18) THEN
          CALL RPBEXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- M08 EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.19) THEN
         CALL M08XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB,IM08)
C
C     ----- B97 FAMILY EXCHANGE FUNCTIONALS -----
C
      ELSE IF(NEXFG.EQ.20) THEN
          CALL B97X(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >                 TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C     ----- REV-TPSS EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.21) THEN
         CALL REVTPSSXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C     ----- SOGGA EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.22) THEN
         CALL SOGGAXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,ISOGGA)
C
C     ----- dlDF EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.23) THEN
         CALL DLDFXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C     ----- B3 EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.-1) THEN
         CALL LSDSLT(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,XALPHA,
     >               SIGKA,SIGKB)
         CALL B88XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >        XALPHA,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- X3LYP EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.-2) THEN
         CALL LSDSLT(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,XALPHA,
     >        SIGKA,SIGKB)
         CALL B88XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >        XALPHA,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
         CALL PW91XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- CAMB3 EXCHANGE -----
C
      ELSE IF(NEXFG.EQ.-3) THEN
         CALL CAMB88XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XALPHA,XGRD,VXCA1,
     >        DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
      ELSE
         WRITE(IW,*) 'CANNOT USE THIS EXCHANGE FUNCTIONAL'
         CALL ABRT
         STOP
      ENDIF
C***********************************************************************
C           CORRELATION FUNCTIONAL CALCULATION
C***********************************************************************
C
C     ----- NO CORRELATION FUNCTIONAL-----
C
      IF (NCORFG.EQ.0) THEN
C
C     ----- VWN FORMULA 5 CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.1) THEN
         CALL VWN5CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
C
C     ----- LEE-YANG-PARR CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.2) THEN
         CALL LYPCF(RHFGVB,UROHF,NB,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C
C     ----- PERDEW-WANG 91 CORRELATION FUNCTIONAL-----
C
      ELSE IF(NCORFG.EQ.3) THEN
         CALL PW91CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- PBE CORRELATION FUNCTIONAL-----
C
      ELSE IF(NCORFG.EQ.4) THEN
         CALL PBECF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- VWN FORMULA 1 (RPA) CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.5) THEN
         CALL VWN1CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
C
C     ----- ONE-PARAMETER PROGRESSIVE CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.7) THEN
         CALL OPCOR(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        SIGKA,SIGKB,DKDXA,DKDXB,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- PERDEW-WANG 91 LDA CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.8) THEN
         CALL PW91LDACF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
C
C     ----- PERDEW 86 CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.9) THEN
         CALL P86CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- PERDEW ZUNGER 81 CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.10) THEN
         CALL PZ81CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,ECF,VXCA1,VXCB1)
C
C     ----- M05 CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.11) THEN
         CALL M05CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB,IM05)
C
C     ----- VS98 CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.12) THEN
         CALL VS98CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB,IM06)
C
C     ----- M06 CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.13) THEN
         CALL M06CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB,IM06)
C
C    ----- PBES CORRELATION -----
C
      ELSE IF(NCORFG.EQ.14) THEN
          CALL PBESCF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C    ----- TPSS CORRELATION -----
C
      ELSE IF(NCORFG.EQ.15) THEN
         CALL TPSSCF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C    ----- HLYP CORRELATION -----
C
      ELSE IF(NCORFG.EQ.16) THEN
         CALL VWN5CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
         CALL LYPCF(RHFGVB,UROHF,NB,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C    ----- PKZB CORRELATION -----
C
      ELSE IF(NCORFG.EQ.17) THEN
         CALL PKZBCF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C    ----- VWN FORMULA 3 CORRELATION -----
C
      ELSE IF(NCORFG.EQ.18) THEN
         CALL VWN3_CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
C
C     ----- M08 CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.19) THEN
         CALL M08CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB,IM08)
C
C    ----- B97 FAMILY CORRELATION FUNCTIONALS -----
C
      ELSE IF(NCORFG.EQ.20) THEN
         CALL B97C(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C    ----- REV-TPSS CORRELATION -----
C
      ELSE IF(NCORFG.EQ.21) THEN
         CALL REVTPSSCF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C     ----- SOGGA CORRELATION FUNCTIONAL-----
C
      ELSE IF(NCORFG.EQ.22) THEN
         CALL SOGGACF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,ISOGGA)
C
C     ----- dlDF CORRELATION FUNCTIONAL -----
C
      ELSE IF(NCORFG.EQ.23) THEN
         CALL DLDFCF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,DMGGA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMGGB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
C
C     ----- B3LYP CORRELATION PART USING VWN FORMULA 5 -----
C
      ELSE IF(NCORFG.EQ.-1) THEN
         CALL VWN5CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
         CALL LYPCF(RHFGVB,UROHF,NB,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- B3LYP CORRELATION PART USING VWN FORMULA 1 (RPA) -----
C     ----- X3LYP CORRELATION PART -----
C
      ELSE IF(NCORFG.EQ.-2) THEN
         CALL VWN1CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
         CALL LYPCF(RHFGVB,UROHF,NB,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- PERDEW-WANG 91 CORRELATION FUNCTIONAL -----
C     ---- UTILIIZING NWCHEM CONSTANTS FOR PW91LDA ----
C
      ELSE IF(NCORFG.EQ.-3) THEN
         CALL NWPW91CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- B3PW91 CORRELATION PART -----
C
      ELSE IF(NCORFG.EQ.-4) THEN
         CALL PW91LDACF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
         CALL PW91CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- B3P86 CORRELATION PART USING VWN FORMULA 3 -----
C
      ELSE IF(NCORFG.EQ.-5) THEN
         CALL VWN3_CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
         CALL P86CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- B3P86 CORRELATION PART USING VWN FORMULA 1 (RPA) -----
C
      ELSE IF(NCORFG.EQ.-6) THEN
         CALL VWN1CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
         CALL P86CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- B3P86 CORRELATION PART USING VWN FORMULA 5 -----
C
      ELSE IF(NCORFG.EQ.-7) THEN
         CALL VWN5CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
         CALL P86CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- B3LYP CORRELATION PART USING VWN FORMULA 3 -----
C
      ELSE IF(NCORFG.EQ.-8) THEN
         CALL VWN3_CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
         CALL LYPCF(RHFGVB,UROHF,NB,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
C
C     ----- HOUSTON, WE HAVE A PROBLEM!
C
      ELSE
         WRITE(IW,*) 'CANNOT USE THIS CORRELATIONAL FUNCTIONAL'
         CALL ABRT
         STOP
      ENDIF
      RETURN
      END
C*MODULE DFTXCA  *DECK G96XF
      SUBROUTINE G96XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >                 GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                 FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >                 XALF,B88X,DUMA,DUMXA,DUMYA,DUMZA,
     >                 DUMB,DUMXB,DUMYB,DUMZB)
C***********************************************************************
C     GILL 96 EXCHANGE FUNCTIONAL
C
C     P. M. W. GILL
C     MOL. PHYS. 89, 433 (1996)
C
C     -----
C     INPUT
C     -----
C
C     ROA,B   .... SPIN DENSITIES
C     GRAD**  .... DENSITY GRADIENTS
C     TOTWT   .... VOLUME OF THIS GRID
C
C     ------
C     OUTPUT
C     ------
C
C     XALF    ....  EXCHANGE ENERGY OF LDA PART
C     B88X    ....  EXCHANGE ENERGY OF GGA PART
C     DUM***  ....  FIRST DERIVATIVES OF THE EXCHANGE FUNCTINALS
C     SIGKA,B ....  EXC=-1/2*INT(SIGK*RHO^(4/3))
C     DKDXA,B ....  DSIGK/DX
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      COMMON /NLRC  / LCFLAG,LRINT,EMU,EMU2,LRFILE
      LOGICAL LCFLAG,LRINT
C***********************************************************************
       X1 = (3.0D+00/PI)**(ONE/3.0D+00)
       TWO13 = TWO**(ONE/3.0D+00)
       FACE  =-0.75D+00*X1*TWO13
       FACP  = 4.0D+00/3.0D+00
C***********************************************************************
C      CLOSED SHELL CALCULATION
C***********************************************************************
       IF (RHFGVB) THEN
         RHO=ROA
         GRD=GRDAA
         RHO13=RHO**(ONE/3.0D+00)
         RHOE =RHO13*RHO
         X    =SQRT(GRD)/RHOE
         G    =-X**(THREE/TWO)/137.0D+00
         H    =-(1.5D+00/137.0D+00)*SQRT(X)
         R    =FACP*RHO13
         E    =FACE
         XCL  =E*RHOE
         XCNL =G*RHOE
         XALFA =CSLT*XCL *TWO*FTOTWT
         B88XA =CB88*XCNL*TWO*FTOTWT
         U     =CSLT*R*(E+G-X*H)
         PDUMA =U
         W     =CB88*0.5D+00*H/SQRT(GRD)
         PDUMXA=TWO*W*GRADXA
         PDUMYA=TWO*W*GRADYA
         PDUMZA=TWO*W*GRADZA
C     ----- FOR OP CORRELATION -----
         SIGKA= -(FACE+G)*TWO
         DKDXA= -H*TWO
C     ------------------------------
         IF (LCFLAG) THEN
            CALL LRCFUN(UROHF,ROA,ROB,GRDAA,GRDBB,
     >           GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >           FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >           XALFA,XALFB,B88XA,B88XB,PDUMA,PDUMXA,PDUMYA,
     >           PDUMZA,PDUMB,PDUMXB,PDUMYB,PDUMZB,FACE)
         END IF
         XALF   = XALF + XALFA
         B88X   = B88X + B88XA
         DUMA   = DUMA + PDUMA
         DUMXA  = DUMXA+ PDUMXA
         DUMYA  = DUMYA+ PDUMYA
         DUMZA  = DUMZA+ PDUMZA
C***********************************************************************
C      OPEN SHELL CALCULATION
C***********************************************************************
       ELSE IF (UROHF) THEN
         RHO13A=ROA**(ONE/3.0D+00)
         RHOEA =RHO13A*ROA
         EA    =FACE
         IF(ROA.LT.1.0D-10) THEN
           GA  = ZERO
           PDUMA=ZERO
           PDUMXA=ZERO
           PDUMYA=ZERO
           PDUMZA=ZERO
           GOTO 9998
         ENDIF
         XA     =SQRT(GRDAA)/RHOEA
         GA     =-XA**(THREE/TWO)/137.0D+00
         HA     =-(1.5D+00/137.0D+00)*SQRT(XA)
         RA     =FACP*RHO13A
         UA     =CSLT*RA*(EA+GA-XA*HA)
         PDUMA  =UA
         WA     =CB88*0.5D+00*HA/SQRT(GRDAA)
         PDUMXA =TWO*WA*GRADXA
         PDUMYA =TWO*WA*GRADYA
         PDUMZA =TWO*WA*GRADZA
 9998    CONTINUE
         RHO13B=ROB**(ONE/3.0D+00)
         RHOEB =RHO13B*ROB
         EB    =FACE
         IF(ROB.LT.1.0D-10) THEN
           GB  = ZERO
           PDUMB=ZERO
           PDUMXB=ZERO
           PDUMYB=ZERO
           PDUMZB=ZERO
           GOTO 9999
         ENDIF
         XB    =SQRT(GRDBB)/RHOEB
         GB    =-XB**(THREE/TWO)/137.0D+00
         HB    =-(1.5D+00/137.0D+00)*SQRT(XB)
         RB    =FACP*RHO13B
         UB    =CSLT*RB*(EB+GB-XB*HB)
         PDUMB =UB
         WB    =CB88*0.5D+00*HB/SQRT(GRDBB)
         PDUMXB =TWO*WB*GRADXB
         PDUMYB =TWO*WB*GRADYB
         PDUMZB =TWO*WB*GRADZB
 9999    CONTINUE
         XCLA   = EA*RHOEA
         XCLB   = EB*RHOEB
         XCNLA  = GA*RHOEA
         XCNLB  = GB*RHOEB
         XALFA  = CSLT*XCLA *FTOTWT
         XALFB  = CSLT*XCLB *FTOTWT
         B88XA  = CB88*XCNLA*FTOTWT
         B88XB  = CB88*XCNLB*FTOTWT
C      ----- FOR OP CORRELATION -----
         SIGKA= -(FACE+GA)*TWO
         SIGKB= -(FACE+GB)*TWO
         DKDXA= -HA*TWO
         DKDXB= -HB*TWO
C     -------------------------------
         IF (LCFLAG) THEN
            CALL LRCFUN(UROHF,ROA,ROB,GRDAA,GRDBB,
     >           GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >           FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >           XALFA,XALFB,B88XA,B88XB,PDUMA,PDUMXA,PDUMYA,
     >           PDUMZA,PDUMB,PDUMXB,PDUMYB,PDUMZB,FACE)
         END IF
         XALF   = XALF + XALFA + XALFB
         B88X   = B88X + B88XA + B88XB
         DUMA   = DUMA + PDUMA
         DUMXA  = DUMXA+ PDUMXA
         DUMYA  = DUMYA+ PDUMYA
         DUMZA  = DUMZA+ PDUMZA
         DUMB   = DUMB + PDUMB
         DUMXB  = DUMXB+ PDUMXB
         DUMYB  = DUMYB+ PDUMYB
         DUMZB  = DUMZB+ PDUMZB
      ENDIF
      RETURN
      END
C*MODULE DFTXCA  *DECK INPGDFT
C> @brief input parsing of possible exchange/correlation functionals
C
      SUBROUTINE INPGDFT(DFTYPE,PFTYP)
C***********************************************************************
C
C     NXCFG CONTROLS EXCHANGE-CORRELATION FUNCTIONAL
C     0     ---  NONE, NOT AN A COMBINED EXCHANGE AND CORRELAION
C                      FUNCTIONAL CODE CALL
C     1     ---  EDF1 (EMPIRICAL DENSITY FUNCTIONAL 1 OF J. A. POPLE)
C     2     ---  BECKE 97
C     3     ---  BECKE 97 - FIRST REPARAMETRIZATION
C     4     ---  BECKE 97 - SECOND REPARAMETRIZATION
C     5     ---  BECKE 97 REPARAMETRIZATION FOR SEMIEMPIRICAL DISPERSION
C     6     ---  PLEASE ADD NEW COMBINED EXCHANGE-CORRELATION FUNCTIONAL
C
C     NEXFG CONTROLS EXCHANGE FUNCTIONAL
C    -1     ---  BECKE 3 PARAMETER
C     0     ---  HARTREE-FOCK
C     1     ---  SLATER
C     2     ---  BECKE 88
C     3     ---  PERDEW-WANG 91
C     4     ---  PERDEW-BURKE-ERNZERHOF (PBE)
C     5     ---  GILL 96
C     6     ---  PARAMETER-FREE
C     7     ---  HANDY-COHEN (OPTX) NOT RELATED TO (OP) CORRELATION
C     8     ---  REVISED PBE
C     9     ---  [OPEN SPOT FOR AN EXCHANGE FUNCTIONAL]
C     10    ---  [OPEN SPOT FOR AN EXCHANGE FUNCTIONAL]
C     11    ---  M05
C     12    ---  VS98
C     13    ---  M06
C     14    ---  PBE-SOL
C     15    ---  TPSS
C     16    ---  TPSS-MOD
C     17    ---  PKZB
C     18    ---  RPBE
C     19    ---  M08/M11
C     20    ---  B97 family
C     21    ---  revTPSS
C     22    ---  SOGGA
C     23    ---  dlDF
C     24    ...  PLEASE ADD NEW EXCHANGE FUNCTIONAL
C
C     NCORFG CONTROLS CORRELATION FUNCTIONAL
C    -8     ---  B3LYPV3
C    -7     ---  B3P86V5
C    -6     ---  B3P86V1R
C    -5     --- (B3P86V3 = B3P86)
C    -4     ---  B3PW91
C    -3     ---  PERDEW-WANG 91 USING NWCHEM CONSTANTS FOR PW91LDA
C    -2     --- (B3LYPV1R OR X3LYP
C    -1     --- (B3LYPV5 = B3LYP)
C     0     ---  NONE (EXCHANGE ONLY)
C     1     ---  VWN FORMULA 5
C     2     ---  LEE-YANG-PARR
C     3     ---  PERDEW-WANG 91
C     4     ---  PERDEW-BURKE-ERNZERHOF (PBE)
C     5     ---  VWN FORMULA 1 (RPA)
C     6     ---  VWN FORMULA 5 FOR BACKWARDS COMPATIBILITY
C     7     ---  ONE-PARAMETER-PROGRESSIVE (OP)
C     8     ---  PERDEW-WANG 91 LDA
C     9     ---  PERDEW 86
C     10    ---  PERDEW-ZUNGER 81
C     11    ---  M05
C     12    ---  VS98
C     13    ---  M06
C     14    ---  PBE-SOL
C     15    ---  TPSS
C     16    ---  HLYP (CORRELATION FOR MOHLYP)
C     17    ---  PKZB
C     18    ---  VWN FORMULA 3
C     19    ---  M08/M11
C     20    ---  B97 family
C     21    ---  revTPSS
C     22    ---  SOGGA
C     23    ---  dlDF
C     24    ...  PLEASE ADD NEW CORRELATION FUNCTIONAL
C***********************************************************************
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C      /DFTHF/,/DFTCF/ ARE INFORMATION FOR GRID CODE
C      /DFTPAR/ IS INFORMATION FOR GRID-FREE CODE
C
      SAVE EXCHR,CORCHR
C
      LOGICAL LCFLAG,LRINT,NEEDTAU,PRTTAU,SG1,CAMFLAG,FUNCL,FUNFL
C
      PARAMETER (MXGRID=10)
C
      COMMON /NLRC  / LCFLAG,LRINT,EMU,EMU2,LRFILE
      COMMON /DFGRID/ DFTTHR,DFTGTHR,SWOFF,SW0,BSLRD(137),NDFTFG,
     *                NRAD,NTHE,NPHI,NRAD0,NTHE0,NPHI0,
     *                NANGPT(MXGRID),NANGPT0(MXGRID),SG1,JANS
      COMMON /DFLEB/  NLEB(MXGRID),NLEB0(MXGRID)
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      COMMON /DFTCAM/ ALPHAC,BETAC,CAMMU,CAMVWN,CAMLYP,CAMFLAG
      COMMON /DFTPAR/ DFTTYP(20),EXENA,EXENB,EXENC,IDFT34,NAUXFUN,
     *                                                    NAUXSHL
      COMMON /FUNLIB/ FUNCL,FUNFL
      COMMON /METGGA/ NEEDTAU,PRTTAU
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C
      COMMON /CM05  / CM05XF, IM05
      COMMON /CM06  / IM06
      COMMON /CM08  / IM08
C
      COMMON /CSOGGA/ ISOGGA
C
      COMMON /CP86CF/ CP86
      COMMON /CPBE0 / CPBEX
      COMMON /CPW91 / CPW91C
      COMMON /CX3LYP/ CPW91
      COMMON /CPW91L/ CPW91LDA
      COMMON /CTPSSH/ CTPSSX
      COMMON /EXFACT/ COPTX
      COMMON /B97TYP/ B97TYP
C
C     DOUBLE HYBRID OPTIONS
C
      LOGICAL DHFUNC
      COMMON /DFTDH / CHF,CMP2,C2S,C2T,DHFUNC
      INTEGER B97TYP
C
C     NUMBER OF EXCHANGE AND CORRELATION FUNCTIONALS
C
      PARAMETER (NEX=20, NCOR=21)
C
      CHARACTER*8  EX(NEX),COR(NCOR)
      CHARACTER*10 EXNM(NEX),CORNM(NCOR)
      DIMENSION    NUMEX(NEX),NUMCOR(NCOR),DQOP(NEX)
C
      CHARACTER*10 EXCHR,CORCHR,XCHNG,CRRN
      LOGICAL GOPARR,DSKWRK,MASWRK
      DOUBLE PRECISION LOCAL,LSDA
      DOUBLE PRECISION LCBOP,LCBLYP,LCBOPLRD,LCBPBE
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
C     NOTE THAT 'PFREE' IS NOT A DOCUMENTED EXCHANGE FUNCTIONAL
C
      DATA    EX/'S'       ,'B'       ,'PW91'    ,'PBE'     ,'G'       ,
     +           'P'       ,'O'       ,'M05'     ,'VS98'    ,'M06'     ,
     +           'REVPBE'  ,'PBES'    ,'TPSS'    ,'TPSSM'   ,'PKZB'    ,
     +           'RPBE'    ,'M08'     ,'SOGGA'   ,'REVTPSS' ,'DLDF'/
      DATA NUMEX/1         ,2         ,3         ,4         ,5         ,
     +           6         ,7         ,11        ,12        ,13        ,
     +           8         ,14        ,15        ,16        ,17        ,
     +           18        ,19        ,22        ,20        ,23        /
      DATA EXNM/'SLATER'   ,'BECKE88' ,'PW91'    ,'PBE'     ,'GILL96'  ,
     +          'PFREE'    ,'OPTX'    ,'M05'     ,'VS98'    ,'M06'     ,
     +          'REV-PBE'  ,'PBES'    ,'TPSS'    ,'TPSSM'   ,'PKZB'    ,
     +          'RPBE'     ,'M08'     ,'SOGGA'   ,'REVTPSS' ,'DLDF'/
      DATA DQOP/2.5654D+00 ,2.3670D+00,ZERO      ,2.3789D+00,2.4167D+00,
     +          2.3866D+00 ,ZERO      ,ZERO      ,ZERO      ,ZERO      ,
     +          ZERO       ,ZERO      ,ZERO      ,ZERO      ,ZERO      ,
     +          ZERO       ,ZERO      ,ZERO      ,ZERO      ,ZERO/
C
C     NOTE THAT VWN5 IS AN UNDOCUMENTED SYNONYM FOR VWN.
C     NOTE THAT PW91LDA IS NOT A DOCUMENTED CORRELATION FUNCTIONAL.
C     NOTE THAT NW91 IS NOT A DOCUMENTED CORRELATION FUNCTIONAL.
C
      DATA   COR/'VWN5'    ,'LYP'     ,'PW91'    ,'PBE'     ,'VWN1RPA' ,
     +           'VWN'     ,'OP'      ,'PW91LDA' ,'P86'     ,'PZ81'    ,
     +           'NW91'    ,'M05'     ,'VS98'    ,'M06'     ,'PBES'    ,
     +           'TPSS'    ,'PKZB'    ,'M08'     ,'REVTPSS' ,'VWN3'    ,
     +           'DLDF'/
      DATA NUMCOR/1        ,2         ,3         ,4         ,5         ,
     +            6        ,7         ,8         ,9         ,10        ,
     +           -3        ,11        ,12        ,13        ,14        ,
     +           15        ,17        ,19        ,20        ,18        ,
     +           13/
      DATA CORNM/'VWN5'    ,'LYP88'   ,'PW91'    ,'PBE'     ,'VWN1RPA' ,
     +           'VWN'     ,'OP'      ,'PW91LDA' ,'P86'     ,'PZ81'    ,
     +           'PW91-NW' ,'M05'     ,'VS98'    ,'M06'     ,'PBES'    ,
     +           'TPSS'    ,'PKZB'    ,'M08'     ,'REVTPSS' ,'VWN3'    ,
     +           'DLDF'/
C
      DATA HFX      /8HHFX     /
      DATA LOCAL    /8HLOCAL   /,SLATER /8HSLATER  /,BECKE  /8HBECKE   /
      DATA GILL     /8HGILL    /,G96    /8HG96     /
      DATA HOP      /8HOP      /,HLYP   /8HLYP     /
      DATA LSDA     /8HLSDA    /,PFREE  /8HPFREE   /
      DATA BHHLYP   /8HBHHLYP  /,HALF   /8HHALF    /
      DATA LCBOP    /8HLCBOP   /,LCBLYP /8HLCBLYP  /
      DATA LCBOPLRD /8HLCBOPLRD/,LCBPBE /8HLCBPBE  /
      DATA PW91     /8HPW91    /,PW91X  /8HPW91X   /,HPW91  /8HPW91C   /
      DATA PBE      /8HPBE     /,PBEX   /8HPBEX    /,HPBE   /8HPBEC    /
      DATA PBE0     /8HPBE0    /,PBE0M  /8HPBE0M   /
      DATA X3LYP    /8HX3LYP   /,OPTX   /8HOPTX    /
      DATA HPW91LDA /8HPW91LDA /,P86    /8HP86     /,PZ81   /8HPZ81    /
      DATA HPW91NW  /8HNW91    /
      DATA REVPBEX  /8HREVPBEX /,REVPBE /8HREVPBE  /
      DATA EDF1     /8HEDF1    /
      DATA B3PW91   /8HB3PW91  /
      DATA CAMM     /8HMCAM    /
      DATA CAMB3LYP /8HCAMB3LYP/
      DATA B2PLYP   /8HB2PLYP  /
C
      DATA VWN      /8HVWN     /  !USING VWN V
      DATA VWN1RPA  /8HVWN1RPA /  !USING VWN I RPA
      DATA VWN3     /8HVWN3    /  !USING VWN III
      DATA VWN5     /8HVWN5    /  !USING VWN V
C
      DATA B3P86    /8HB3P86   /  !USING VWN III
      DATA B3P86V1R /8HB3P86V1R/  !USING VWN I RPA
      DATA B3P86V3  /8HB3P86V3 /  !USING VWN III
      DATA B3P86V5  /8HB3P86V5 /  !USING VWN V
C
      DATA B3LYP    /8HB3LYP   /  !USING VWN V
      DATA B3LYPV1R /8HB3LYPV1R/  !USING VWN I RPA
      DATA B3LYPV3  /8HB3LYPV3 /  !USING VWN III
      DATA B3LYPV5  /8HB3LYPV5 /  !USING VWN V
C
C     B97-FAMILY KEYWORDS
C
      DATA B97      /8HB97     /
      DATA B97V1    /8HB97-1   /
      DATA B97V2    /8HB97-2   /
      DATA B97V3    /8HB97-3   /
      DATA B97D     /8HB97-D   /
      DATA B97K     /8HB97-K   /
      DATA B98      /8HB98     /
      DATA HCTH93   /8HHCTH93  /
      DATA HCTH120  /8HHCTH120 /
      DATA HCTH147  /8HHCTH147 /
      DATA HCTH407  /8HHCTH407 /
C
      DATA WB97     /8HWB97    /
      DATA WB97X    /8HWB97X   /
      DATA WB97XD   /8HWB97X-D /
      DATA WB97X2TQZ/8HWB97X-2 /
      DATA WB97X2LP /8HWB97X-2L/
C
      DATA THCTH    /8HTHCTH   /
      DATA THCTHHYB /8HTHCTHHYB/
      DATA BMK      /8HBMK     /
C
C     M05 KEYWORDS
C
      DATA  TRUHLAR05   /8HM05     /
      DATA CTRUHLAR05   /8HM05C    /
      DATA XTRUHLAR05   /8HM05X    /
      DATA  TRUHLAR052X /8HM05-2X  /
      DATA CTRUHLAR052X /8HM05-2XC /
      DATA XTRUHLAR052X /8HM05-2XX /
C
C     M06 KEYWORDS
C
      DATA  TRUHLAR06   /8HM06     /
      DATA CTRUHLAR06   /8HM06C    /
      DATA XTRUHLAR06   /8HM06X    /
      DATA  TRUHLAR06L  /8HM06-L   /
      DATA CTRUHLAR06L  /8HM06-LC  /
      DATA XTRUHLAR06L  /8HM06-LX  /
      DATA  TRUHLAR062X /8HM06-2X  /
      DATA CTRUHLAR062X /8HM06-2XC /
      DATA XTRUHLAR062X /8HM06-2XX /
      DATA  TRUHLAR06HF /8HM06-HF  /
      DATA CTRUHLAR06HF /8HM06-HFC /
      DATA XTRUHLAR06HF /8HM06-HFX /
C
C     M08 KEYWORDS
C
      DATA  TRUHLAR08HX /8HM08-HX  /
      DATA CTRUHLAR08HX /8HM08-HXC /
      DATA XTRUHLAR08HX /8HM08-HXX /
C
      DATA  TRUHLAR08SO /8HM08-SO  /
      DATA CTRUHLAR08SO /8HM08-SOC /
      DATA XTRUHLAR08SO /8HM08-SOX /
C
      DATA  TRUHLAR11   /8HM11     /
      DATA CTRUHLAR11   /8HM11-C   /
      DATA XTRUHLAR11   /8HM11-X   /
      DATA  TRUHLAR11L  /8HM11-L   /
      DATA CTRUHLAR11L  /8HM11-LC  /
      DATA XTRUHLAR11L  /8HM11-LX  /
C
      DATA  VS98        /8HVS98    /
      DATA CVS98        /8HVS98C   /
      DATA XVS98        /8HVS98X   /
C
      DATA XSOGGA       /8HSOGGAX  /
      DATA  SOGGA       /8HSOGGA   /
      DATA  SOGGA11     /8HSOGGA11 /
      DATA  SOGGA11X    /8HSOGGA11X/
C
C     MOHLYP & MOHLYP2 KEYWORDS
C
      DATA  TRUHLARMOHLYP  /8HMOHLYP  /
      DATA XTRUHLARMOHLYP  /8HMOPTX   /
      DATA CTRUHLARMOHLYP  /8HHLYP    /
      DATA  TRUHLARMOHLYP2 /8HMOHLYP2 /
      DATA XTRUHLARMOHLYP2 /8HHLYP2   /
      DATA CTRUHLARMOHLYP2 /8HMOPTX2  /
C
      DATA  PBES        /8HPBESOL  /
      DATA XPBES        /8HPBESOLX /
      DATA CPBES        /8HPBESOLC /
C
      DATA  TPSS        /8HTPSS    /
      DATA XTPSS        /8HTPSSX   /
      DATA CTPSS        /8HTPSSC   /
      DATA  TPSSM       /8HTPSSM   /
      DATA XTPSSM       /8HTPSSMX  /
      DATA  PKZB        /8HPKZB    /
      DATA XPKZB        /8HPKZBX   /
      DATA CPKZB        /8HPKZBC   /
      DATA TPSSH        /8HTPSSH   /
      DATA XREVTPSS     /8HREVTPSSX/
      DATA CREVTPSS     /8HREVTPSSC/
      DATA  REVTPSS     /8HREVTPSS /
C
      DATA  RPBE        /8HRPBE    /
      DATA XRPBE        /8HRPBEX   /
C
      DATA DLDF         /8HDLDF    /
C
      DATA CHECK        /8HCHECK   /
C
      NDFTFG=1
      NEXFG =0
      NCORFG=0
      CSLT     = ONE
      CB88     = ONE
      CLYP     = ONE
      CVWN     = ONE
      CP86     = ONE
      CPW91    = ONE
      CPW91C   = ONE
      CPBEX    = ONE
      CPW91LDA = ONE
      CM05XF   = ONE
      COPTX    = 1.43169D+00
      CTPSSX   = ONE
      DFTTYP(3)= 0.0D+00
      IM05     = 0
      IM06     = 0
      IM08     = 0
      ISOGGA   = 0
      B97TYP   = -1
      DHFUNC=.FALSE.
C
C     ----- EXCHANGE ONLY METHOD -----
C
      IF(DFTYPE.EQ.HFX) THEN
         EXCHR     = 'HFX'
         CORCHR    = 'NONE'
         DFTTYP(3) = 1.0D+00
      ELSE IF(DFTYPE.EQ.LOCAL .OR.
     *        DFTYPE.EQ.LSDA .OR.
     *        DFTYPE.EQ.SLATER) THEN
         NEXFG     = 1
         EXCHR     = EXNM(1)
         CORCHR    = 'NONE'
      ELSEIF(DFTYPE.EQ.BECKE)  THEN
         NEXFG     = 2
         EXCHR     = EXNM(2)
         CORCHR    = 'NONE'
      ELSEIF(DFTYPE.EQ.PW91X) THEN
         NEXFG     = 3
         EXCHR     = EXNM(3)
         CORCHR    = 'NONE'
      ELSEIF(DFTYPE.EQ.PBEX)  THEN
         NEXFG     = 4
         EXCHR     = EXNM(4)
         CORCHR    = 'NONE'
      ELSEIF(DFTYPE.EQ.G96.OR.DFTYPE.EQ.GILL)  THEN
         NEXFG     = 5
         EXCHR     = EXNM(5)
         CORCHR    = 'NONE'
      ELSEIF(DFTYPE.EQ.PFREE)  THEN
         NEXFG     = 6
         EXCHR     = EXNM(6)
         CALL INPPFREE(PFTYP)
         CORCHR    = 'NONE'
      ELSEIF(DFTYPE.EQ.OPTX)  THEN
         NEXFG     = 7
         EXCHR     = EXNM(7)
         CORCHR    = 'NONE'
         CSLT      = 1.05151D+00
      ELSEIF(DFTYPE.EQ.REVPBEX) THEN
         NEXFG     = 8
         EXCHR     = EXNM(11)
         CORCHR    = 'NONE'
      ELSEIF(DFTYPE.EQ.XTRUHLAR05) THEN
         NEXFG     = 11
         EXCHR     = EXNM(8)
         CORCHR    = 'NONE'
         IM05      = 1
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTRUHLAR052X) THEN
         NEXFG     = 11
         EXCHR     = EXNM(8)
         CORCHR    = 'NONE'
         IM05      = 2
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XVS98) THEN
         NEXFG     = 12
         EXCHR     = EXNM(9)
         CORCHR    = 'NONE'
         IM06      = 1
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTRUHLAR06) THEN
         NEXFG     = 13
         EXCHR     = EXNM(10)
         CORCHR    = 'NONE'
         IM06      = 3
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTRUHLAR06L) THEN
         NEXFG     = 13
         EXCHR     = 'M06-L'
         CORCHR    = 'NONE'
         IM06      = 1
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTRUHLAR062X) THEN
         NEXFG     = 13
         EXCHR     = 'M06-2X'
         CORCHR    = 'NONE'
         IM06      = 4
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTRUHLAR06HF) THEN
         NEXFG     = 13
         EXCHR     = 'M06-HF'
         CORCHR    = 'NONE'
         IM06      = 2
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTRUHLAR08HX) THEN
         NEXFG     = 19
         EXCHR     = 'M08-HX'
         CORCHR    = 'NONE'
         IM08      = 1
         DFTTYP(3) = 0.5223D+00
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTRUHLAR08SO) THEN
         NEXFG     = 19
         EXCHR     = 'M08-SO'
         CORCHR    = 'NONE'
         IM08      = 2
         DFTTYP(3) = 0.5679D+00
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTRUHLAR11) THEN
         NEXFG     = 19
         EXCHR     = 'M11'
         CORCHR    = 'NONE'
         IM08      = 3
         NEEDTAU   = .TRUE.
C
         CAMFLAG = .TRUE.
         ALPHAC  = 0.428D+0
         BETAC   = ONE - ALPHAC
         CAMLYP  = 0.0D+0
         CAMVWN  = 0.0D+0
      ELSEIF(DFTYPE.EQ.XTRUHLAR11L) THEN
         NEXFG     = 19
         EXCHR     = 'M11-L'
         CORCHR    = 'NONE'
         IM08      = 4
         NEEDTAU   = .TRUE.
C     ELSEIF(DFTYPE.EQ.XTRUHLAR08L) THEN
C        NEXFG     = 19
C        EXCHR     = 'M08-L'
C        CORCHR    = 'NONE'
C        IM08      = 3
C        NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTRUHLARMOHLYP)  THEN
         NEXFG     = 7
         EXCHR     = 'MOPTX'
         CORCHR    = 'NONE'
C
C THE COEFFICIENTS BELOW WILL ALLOW YOU TO
C MATCH THE REFERENCE NUMBERS FROM THE TRUHLAR GROUP
C
C        CSLT      = 0.999986010D+00
C        COPTX     = 1.291957056D+00
C
C THE PUBLISHED COEFFICIENTS ARE BELOW
C
         CSLT      = ONE
         COPTX     = 1.292D+00
      ELSEIF(DFTYPE.EQ.XTRUHLARMOHLYP2)  THEN
         NEXFG     = 7
         EXCHR     = 'MOPTX2'
         CORCHR    = 'NONE'
C
C THE COEFFICIENTS BELOW WILL ALLOW YOU TO
C MATCH THE REFERENCE NUMBERS FROM THE TRUHLAR GROUP
C
C        CSLT      = 1.05151D+00
C        COPTX     = 1.8497564D+00
C
C THE PUBLISHED COEFFICIENTS ARE BELOW
C
         CSLT      = 1.05151D+00
         COPTX     = 1.8498D+00
      ELSEIF(DFTYPE.EQ.XPBES) THEN
         NEXFG     = 14
         EXCHR     = EXNM(12)
         CORCHR    = 'NONE'
      ELSEIF(DFTYPE.EQ.XTPSS) THEN
         NEXFG     = 15
         EXCHR     = EXNM(13)
         CORCHR    = 'NONE'
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XTPSSM) THEN
         NEXFG     = 16
         EXCHR     = EXNM(14)
         CORCHR    = 'NONE'
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XPKZB) THEN
         NEXFG     = 17
         EXCHR     = EXNM(15)
         CORCHR    = 'NONE'
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.XRPBE) THEN
         NEXFG     = 18
         EXCHR     = EXNM(16)
         CORCHR    = 'NONE'
      ELSEIF(DFTYPE.EQ.XSOGGA) THEN
         NEXFG     = 22
         EXCHR     = 'SOGGA'
         CORCHR    = 'NONE'
         ISOGGA    = 1
      ELSEIF(DFTYPE.EQ.XREVTPSS) THEN
         NEXFG     = 21
         EXCHR     = EXNM(19)
         CORCHR    = 'NONE'
         NEEDTAU   = .TRUE.
C
C    ----- CORRELATION ONLY METHOD -----
C
      ELSEIF(DFTYPE.EQ.VWN1RPA)   THEN
         NCORFG    = 5
         EXCHR     = 'HFX'
         CORCHR    = CORNM(5)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.VWN3)   THEN
         NCORFG    = 18
         EXCHR     = 'HFX'
         CORCHR    = CORNM(20)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.VWN5)   THEN
         NCORFG    = 1
         EXCHR     = 'HFX'
         CORCHR    = CORNM(1)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.VWN)   THEN
         NCORFG    = 1
         EXCHR     = 'HFX'
         CORCHR    = CORNM(1)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.HLYP)   THEN
         NCORFG    = 2
         EXCHR     = 'HFX'
         CORCHR    = CORNM(2)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.HPW91)   THEN
         NCORFG    = 3
         EXCHR     = 'HFX'
         CORCHR    = CORNM(3)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.HPW91NW)  THEN
         NCORFG    =-3
         EXCHR     = 'HFX'
         CORCHR    = 'PW91-NW'
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.HPBE)   THEN
         NCORFG    = 4
         EXCHR     = 'HFX'
         CORCHR    = CORNM(4)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.HOP)     THEN
         NCORFG    = 7
         EXCHR     = 'HFX'
         CORCHR    = CORNM(7)
         DFTTYP(3) = 1.0D+00
         QOP       = 2.3670D+00
      ELSEIF(DFTYPE.EQ.HPW91LDA) THEN
         NCORFG    = 8
         EXCHR     = 'HFX'
         CORCHR    = CORNM(8)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.P86)   THEN
         NCORFG    = 9
         EXCHR     = 'HFX'
         CORCHR    = CORNM(9)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.PZ81)   THEN
         NCORFG    = 10
         EXCHR     = 'HFX'
         CORCHR    = CORNM(10)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.CTRUHLAR05) THEN
         NCORFG    = 11
         EXCHR     = 'HFX'
         CORCHR    = CORNM(12)
         DFTTYP(3) = 1.0D+00
         IM05      = 1
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLAR052X) THEN
         NCORFG    = 11
         EXCHR     = 'HFX'
         CORCHR    = 'M05-2X'
         DFTTYP(3) = 1.0D+00
         IM05      = 2
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CVS98) THEN
         NCORFG    = 12
         EXCHR     = 'HFX'
         CORCHR    = CORNM(13)
         DFTTYP(3) = 1.0D+00
         IM06      = 1
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLAR06) THEN
         NCORFG    = 13
         EXCHR     = 'HFX'
         CORCHR    = CORNM(14)
         DFTTYP(3) = 1.0D+00
         IM06      = 3
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLAR06L) THEN
         NCORFG    = 13
         EXCHR     = 'HFX'
         CORCHR    = 'M06-L'
         DFTTYP(3) = 1.0D+00
         IM06      = 1
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLAR062X) THEN
         NCORFG    = 13
         EXCHR     = 'HFX'
         CORCHR    = 'M06-2X'
         DFTTYP(3) = 1.0D+00
         IM06      = 4
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLAR06HF) THEN
         NCORFG    = 13
         EXCHR     = 'HFX'
         CORCHR    = 'M06-HF'
         DFTTYP(3) = 1.0D+00
         IM06      = 2
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLAR08HX) THEN
         NCORFG    = 19
         EXCHR     = 'HFX'
         CORCHR    = 'M08-HXC'
         DFTTYP(3) = 1.0D+00
         IM08      = 1
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLAR08SO) THEN
         NCORFG    = 19
         EXCHR     = 'HFX'
         CORCHR    = 'M08-SOC'
         DFTTYP(3) = 1.0D+00
         IM08      = 2
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLAR11) THEN
         NCORFG    = 19
         EXCHR     = 'HFX'
         CORCHR    = 'M11'
         DFTTYP(3) = 1.0D+00
         IM08      = 3
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLAR11L) THEN
         NCORFG    = 19
         EXCHR     = 'HFX'
         CORCHR    = 'M11'
         DFTTYP(3) = 1.0D+00
         IM08      = 4
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CTRUHLARMOHLYP)  THEN
         EXCHR     = 'HFX'
         DFTTYP(3) = 1.0D+00
         NCORFG    = 16
         CORCHR    = 'HLYP'
         CVWN      = 0.50D+00
         CLYP      = 0.50D+00
      ELSEIF(DFTYPE.EQ.CTRUHLARMOHLYP2)  THEN
         EXCHR     = 'HFX'
         DFTTYP(3) = 1.0D+00
         NCORFG    = 2
         CORCHR    = 'HLYP2'
         CLYP      = 0.50D+00
      ELSEIF(DFTYPE.EQ.CPBES) THEN
         NCORFG    = 14
         EXCHR     = 'HFX'
         CORCHR    = CORNM(15)
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.CTPSS) THEN
         NCORFG    = 15
         EXCHR     = 'HFX'
         CORCHR    = CORNM(16)
         DFTTYP(3) = 1.0D+00
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CPKZB) THEN
         NCORFG    = 17
         EXCHR     = 'HFX'
         CORCHR    = CORNM(17)
         DFTTYP(3) = 1.0D+00
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.CREVTPSS) THEN
         NCORFG    = 21
         EXCHR     = 'HFX'
         CORCHR    = CORNM(19)
         DFTTYP(3) = 1.0D+00
         NEEDTAU   = .TRUE.
C
C     ----- EXCHANGE/CORRELATION METHOD -----
C
      ELSEIF(DFTYPE.EQ.EDF1)   THEN
         NXCFG     = 1
         EXCHR     = 'EDF1'
         CORCHR    = 'EDF1'
      ELSEIF(DFTYPE.EQ.PW91) THEN
         NEXFG     = 3
         NCORFG    = 3
         EXCHR     = EXNM(3)
         CORCHR    = CORNM(3)
      ELSEIF(DFTYPE.EQ.PBE) THEN
         NEXFG     = 4
         NCORFG    = 4
         EXCHR     = EXNM(4)
         CORCHR    = CORNM(4)
      ELSEIF(DFTYPE.EQ.REVPBE) THEN
         NEXFG     = 8
         NCORFG    = 4
         EXCHR     = EXNM(11)
         CORCHR    = CORNM(4)
      ELSEIF(DFTYPE.EQ.TRUHLAR05) THEN
         NEXFG     = 11
         NCORFG    = 11
         EXCHR     = EXNM(8)
         CORCHR    = CORNM(12)
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.28D+00
         CM05XF    = ONE-DFTTYP(3)
         IM05      = 1
      ELSEIF(DFTYPE.EQ.TRUHLAR052X) THEN
         NEXFG     = 11
         NCORFG    = 11
         EXCHR     = EXNM(8)
         CORCHR    = CORNM(12)
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.56D+00
         CM05XF    = ONE-DFTTYP(3)
         IM05      = 2
      ELSEIF(DFTYPE.EQ.VS98) THEN
         NEXFG     = 12
         NCORFG    = 12
         EXCHR     = EXNM(9)
         CORCHR    = CORNM(13)
         NEEDTAU   = .TRUE.
         IM06      = 1
      ELSEIF(DFTYPE.EQ.TRUHLAR06) THEN
         NEXFG     = 13
         NCORFG    = 13
         EXCHR     = EXNM(10)
         CORCHR    = CORNM(14)
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.27D+00
         IM06      = 3
      ELSEIF(DFTYPE.EQ.TRUHLAR06HF) THEN
         NEXFG     = 13
         NCORFG    = 13
         EXCHR     = 'M06-HF'
         CORCHR    = 'M06-HF'
         NEEDTAU   = .TRUE.
         DFTTYP(3) = ONE
         IM06      = 2
      ELSEIF(DFTYPE.EQ.TRUHLAR062X) THEN
         NEXFG     = 13
         NCORFG    = 13
         EXCHR     = 'M06-2X'
         CORCHR    = 'M06-2X'
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.54D+00
         IM06      = 4
      ELSEIF(DFTYPE.EQ.TRUHLAR06L) THEN
         NEXFG     = 13
         NCORFG    = 13
         EXCHR     = 'M06-L'
         CORCHR    = 'M06-L'
         NEEDTAU   = .TRUE.
         IM06      = 1
      ELSEIF(DFTYPE.EQ.TRUHLAR08HX) THEN
         NEXFG     = 19
         NCORFG    = 19
         EXCHR     = 'M08-HX'
         CORCHR    = 'M08-HX'
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.5223D+00
         IM08      = 1
      ELSEIF(DFTYPE.EQ.TRUHLAR08SO) THEN
         NEXFG     = 19
         NCORFG    = 19
         EXCHR     = 'M08-SO'
         CORCHR    = 'M08-SO'
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.5679D+00
         IM08      = 2
      ELSEIF(DFTYPE.EQ.TRUHLAR11) THEN
         NEXFG     = 19
         NCORFG    = 19
         EXCHR     = 'M11'
         CORCHR    = 'M11'
         IM08      = 3
         NEEDTAU   = .TRUE.
C
         CAMFLAG = .TRUE.
         ALPHAC  = 0.428D+0
         BETAC   = ONE - ALPHAC
         CAMLYP  = 0.0D+0
         CAMVWN  = 0.0D+0
      ELSEIF(DFTYPE.EQ.TRUHLAR11L) THEN
         NEXFG     = 19
         NCORFG    = 19
         EXCHR     = 'M11-L'
         CORCHR    = 'M11-L'
         IM08      = 4
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.TRUHLARMOHLYP)  THEN
         NEXFG     = 7
         EXCHR     = 'MOPTX'
C
C THE COEFFICIENTS BELOW WILL ALLOW YOU TO
C MATCH THE REFERENCE NUMBERS FROM THE TRUHLAR GROUP
C
C        CSLT      = 0.999986010D+00
C        COPTX     = 1.291957056D+00
C
C THE PUBLISHED COEFFICIENTS ARE BELOW
C
         CSLT      = ONE
         COPTX     = 1.292D+00
         NCORFG    = 16
         CORCHR    = 'HLYP'
         CVWN      = 0.50D+00
         CLYP      = 0.50D+00
      ELSEIF(DFTYPE.EQ.TRUHLARMOHLYP2)  THEN
         NEXFG     = 7
         EXCHR     = 'MOPTX'
C
C THE COEFFICIENTS BELOW WILL ALLOW YOU TO
C MATCH THE REFERENCE NUMBERS FROM THE TRUHLAR GROUP
C
C        CSLT      = 1.05151D+00
C        COPTX     = 1.8497564D+00
C
C THE PUBLISHED COEFFICIENTS ARE BELOW
C
         CSLT      = 1.05151D+00
         COPTX     = 1.8498D+00
         NCORFG    = 2
         CORCHR    = 'HLYP2'
         CLYP      = 0.50D+00
      ELSEIF(DFTYPE.EQ.PBES) THEN
         NEXFG     = 14
         NCORFG    = 14
         EXCHR     = EXNM(12)
         CORCHR    = CORNM(15)
      ELSEIF(DFTYPE.EQ.TPSS) THEN
         NEXFG     = 15
         NCORFG    = 15
         EXCHR     = EXNM(13)
         CORCHR    = CORNM(16)
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.TPSSM) THEN
         NEXFG     = 16
         NCORFG    = 15
         EXCHR     = EXNM(14)
         CORCHR    = CORNM(16)
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.PKZB) THEN
         NEXFG     = 17
         NCORFG    = 17
         EXCHR     = EXNM(15)
         CORCHR    = CORNM(17)
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.RPBE) THEN
         NEXFG     = 18
         NCORFG    = 4
         EXCHR     = EXNM(16)
         CORCHR    = CORNM(4)
      ELSEIF(DFTYPE.EQ.REVTPSS) THEN
         NEXFG     = 21
         NCORFG    = 21
         EXCHR     = EXNM(19)
         CORCHR    = CORNM(19)
         NEEDTAU   = .TRUE.
      ELSEIF(DFTYPE.EQ.DLDF) THEN
         NEXFG     = 23
         NCORFG    = 23
         EXCHR     = EXNM(20)
         CORCHR    = CORNM(21)
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.6144129D+00
         CM05XF    = ONE-DFTTYP(3)
C
C     ----- HYBRID METHOD -----
C
      ELSEIF((DFTYPE.EQ.B3LYP).OR.(DFTYPE.EQ.B3LYPV5)) THEN
         NEXFG     =-1
         NCORFG    =-1
         EXCHR     = 'B88&HFX'
         CORCHR    = 'LYP88&VWN5'
         CSLT      = 0.08D+00
         CB88      = 0.72D+00
         CLYP      = 0.81D+00
         CVWN      = 0.19D+00
         LCFLAG=.FALSE.
         DFTTYP(3) = 0.20D+00
      ELSEIF(DFTYPE.EQ.B3LYPV1R) THEN
         NEXFG     =-1
         NCORFG    =-2
         EXCHR     = 'B88&HFX'
         CORCHR    = 'LYP88VWN1R'
         CSLT      = 0.08D+00
         CB88      = 0.72D+00
         CLYP      = 0.81D+00
         CVWN      = 0.19D+00
         DFTTYP(3) = 0.20D+00
      ELSEIF(DFTYPE.EQ.B3LYPV3) THEN
         NEXFG     =-1
         NCORFG    =-8
         EXCHR     = 'B88&HFX'
         CORCHR    = 'LYP88&VWN3'
         CSLT      = 0.08D+00
         CB88      = 0.72D+00
         CLYP      = 0.81D+00
         CVWN      = 0.19D+00
         DFTTYP(3) = 0.20D+00
      ELSEIF((DFTYPE.EQ.B3P86).OR.(DFTYPE.EQ.B3P86V3)) THEN
         NEXFG     =-1
         NCORFG    =-5
         EXCHR     = 'B88&HFX'
         CORCHR    = 'P86&VWN3'
         CSLT      = 0.08D+00
         CB88      = 0.72D+00
         CP86      = 0.81D+00
         CVWN      = 0.19D+00
         DFTTYP(3) = 0.20D+00
      ELSEIF((DFTYPE.EQ.B3P86V1R)) THEN
         NEXFG     =-1
         NCORFG    =-6
         EXCHR     = 'B88&HFX'
         CORCHR    = 'P86&VWN1R'
         CSLT      = 0.08D+00
         CB88      = 0.72D+00
         CP86      = 0.81D+00
         CVWN      = 0.19D+00
         DFTTYP(3) = 0.20D+00
      ELSEIF((DFTYPE.EQ.B3P86V5)) THEN
         NEXFG     =-1
         NCORFG    =-7
         EXCHR     = 'B88&HFX'
         CORCHR    = 'P86&VWN5'
         CSLT      = 0.08D+00
         CB88      = 0.72D+00
         CP86      = 0.81D+00
         CVWN      = 0.19D+00
         DFTTYP(3) = 0.20D+00
       ELSEIF(DFTYPE.EQ.X3LYP) THEN
         NEXFG     =-2
         NCORFG    =-2
         EXCHR     = 'B&PW91&HFX'
         CORCHR    = 'LYP88&VWN1'
         CSLT      = 0.073D+00
         CLYP      = 0.871D+00
         CVWN      = 0.129D+00
         CB88      = 0.542D+00
         CPW91     = 0.167D+00
         DFTTYP(3) = 0.218D+00
C-----------------------------------------------------------------------
C     THERE NEEDS TO BE SOME CLARIFICATION OF THE X3LYP PREFACTORS THAT
C     ARE USED ABOVE.
C     FIRST OFF THE X3LYP PAPER IS:
C     J. CHEM. PHYS. 122 (2005) 014105
C
C     OR IF YOU PREFER PNAS:
C     PNAS 101 (2004) 2673
C
C     IN ANY CASE THE PARAMETERS ARE:
C     PREFACTOR FOR (HF     EXCHANGE) = 0.218 = DFTTYP(3)
C     PREFACTOR FOR (SLATER EXCHANGE) = 0.782 = CSLT
C     PREFACTOR FOR (B88    EXCHANGE) = 0.542 = CB88
C     PREFACTOR FOR (PW91   EXCHANGE) = 0.167 = CPW91
C     PREFACTOR FOR (VWN    CORR.   ) = 0.129 = CVWN
C     PREFACTOR FOR (LYP    CORR.   ) = 0.871 = CLYP
C
C     BUT HERE IS SOMETHING FOR THE NEWBIES.  THE PREFACTOR USED IN THE
C     CODE FOR THE SLATER EXCHANGE IS ACTUALLY:
C
C     CSLT = PREFACTOR FOR (SLATER EXCHANGE) - (CB88 + CPW91)
C
C     JUST TO BEAT A DEAD HORSE SILLY:
C
C     CSLT = 0.782 - (0.542 + 0.167) = 0.073
C-----------------------------------------------------------------------
      ELSEIF(DFTYPE.EQ.B3PW91)  THEN
         NEXFG     =-1
         NCORFG    =-4
         EXCHR     = 'B88&HFX'
         CORCHR    = CORNM(3)
         CSLT      = 0.08D+00
         CB88      = 0.72D+00
         CPW91C    = 0.81D+00
         CPW91LDA  = 0.19D+00
         LCFLAG=.FALSE.
         DFTTYP(3) = 0.20D+00
       ELSEIF(DFTYPE.EQ.B2PLYP) THEN
         NEXFG     =2
         NCORFG    =2
         EXCHR     = 'B88&HFX'
         CORCHR    = 'LYP'
         DHFUNC=.TRUE.
C
         IF(CMP2.EQ.-1D+00) THEN
           DFTTYP(14) = 0.27D+00
         ELSE
           DFTTYP(14) = CMP2
         ENDIF
         IF(CHF.EQ.-1D+00) THEN
           DFTTYP(3) = 0.53D+00
         ELSE
           DFTTYP(3) = CHF
         ENDIF
C NO DIFFERENCE BETWEEN C2S AND CMP2 FOR B2PLYP
         C2S  =  DFTTYP(14)
         C2T  =  DFTTYP(14)
C
         CB88      = ONE-DFTTYP(3)
         CLYP      = ONE-DFTTYP(14)
C
C     ----- B97 FAMILY -----
C
      ELSEIF(DFTYPE.EQ.B97) THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'B97'
         CORCHR    = 'B97'
         B97TYP    = 0
         DFTTYP(3) = 0.1943D+00
      ELSEIF(DFTYPE.EQ.B97V1)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'B97-1'
         CORCHR    = 'B97-1'
         B97TYP    = 1
         DFTTYP(3) = 0.21D+00
      ELSEIF(DFTYPE.EQ.B97V2)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'B97-2'
         CORCHR    = 'B97-2'
         B97TYP    = 2
         DFTTYP(3) = 0.21D+00
      ELSEIF(DFTYPE.EQ.B97V3)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'B97-3'
         CORCHR    = 'B97-3'
         B97TYP    = 3
         DFTTYP(3) = 0.2692880D+00
      ELSEIF(DFTYPE.EQ.B97D)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'B97-D'
         CORCHR    = 'B97-D'
         B97TYP    = 4
         DFTTYP(3) = 0D+00
      ELSEIF(DFTYPE.EQ.B97K)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'B97-K'
         CORCHR    = 'B97-K'
         B97TYP    = 5
         DFTTYP(3) = 0.42D+00
      ELSEIF(DFTYPE.EQ.B98)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'B98'
         CORCHR    = 'B98'
         B97TYP    = 6
         DFTTYP(3) = 0.219847D+00
      ELSEIF(DFTYPE.EQ.HCTH93)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'HCTH/93'
         CORCHR    = 'HCTH/93'
         B97TYP    = 7
         DFTTYP(3) = 0D+00
      ELSEIF(DFTYPE.EQ.HCTH120)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'HCTH/120'
         CORCHR    = 'HCTH/120'
         B97TYP    = 8
         DFTTYP(3) = 0D+00
      ELSEIF(DFTYPE.EQ.HCTH147)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'HCTH/147'
         CORCHR    = 'HCTH/147'
         B97TYP    = 9
         DFTTYP(3) = 0D+00
      ELSEIF(DFTYPE.EQ.HCTH407)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'HCTH/407'
         CORCHR    = 'HCTH/407'
         B97TYP    = 10
         DFTTYP(3) = 0D+00
C
      ELSEIF(DFTYPE.EQ.WB97) THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'WB97'
         CORCHR    = 'WB97'
         B97TYP    = 100
C
         CAMFLAG = .TRUE.
         ALPHAC  = 0.0D+00
         BETAC   = ONE - ALPHAC
         CAMLYP  = 0.0D+0
         CAMVWN  = 0.0D+0
C
      ELSEIF(DFTYPE.EQ.WB97X) THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'WB97X'
         CORCHR    = 'WB97X'
         B97TYP    = 101
C
         CAMFLAG = .TRUE.
         ALPHAC  = 0.157706D+00
         BETAC   = ONE - ALPHAC
         CAMLYP  = 0.0D+0
         CAMVWN  = 0.0D+0
C
      ELSEIF(DFTYPE.EQ.WB97XD) THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'WB97X-D'
         CORCHR    = 'WB97X-D'
         B97TYP    = 102
C
         CAMFLAG = .TRUE.
         ALPHAC  = 0.222036D+00
         BETAC   = ONE - ALPHAC
         CAMLYP  = 0.0D+0
         CAMVWN  = 0.0D+0
C
      ELSEIF(DFTYPE.EQ.WB97X2TQZ) THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'WB97X-2'
         CORCHR    = 'WB97X-2'
         B97TYP    = 103
C
         CAMFLAG = .TRUE.
         ALPHAC  = 0.636158D+00
         BETAC   = ONE - ALPHAC
         CAMLYP  = 0.0D+0
         CAMVWN  = 0.0D+0
C
         C2S  =  0.529319D+00
         C2T  =  0.447105D+00
         DHFUNC=.TRUE.
C
      ELSEIF(DFTYPE.EQ.WB97X2LP) THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'WB97X-2/LP'
         CORCHR    = 'WB97X-2/LP'
         B97TYP    = 104
C
         CAMFLAG = .TRUE.
         ALPHAC  = 0.678792D+00
         BETAC   = ONE - ALPHAC
         CAMLYP  = 0.0D+0
         CAMVWN  = 0.0D+0
C
         C2S  =  0.581569D+00
         C2T  =  0.477992D+00
         DHFUNC=.TRUE.
C
      ELSEIF(DFTYPE.EQ.THCTH)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'T-HCTH'
         CORCHR    = 'T-HCTH'
         B97TYP    = 200
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.0D+00
      ELSEIF(DFTYPE.EQ.THCTHHYB)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'T-HCTHHYB'
         CORCHR    = 'T-HCTHHYB'
         B97TYP    = 201
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.15D+00
      ELSEIF(DFTYPE.EQ.BMK)   THEN
         NEXFG     = 20
         NCORFG    = 20
         EXCHR     = 'BMK'
         CORCHR    = 'BMK'
         B97TYP    = 202
         NEEDTAU   = .TRUE.
         DFTTYP(3) = 0.42D+00
C
      ELSEIF(DFTYPE.EQ.HALF) THEN
         NEXFG     = 2
         EXCHR     = 'B88&HFX'
         CORCHR    = 'NONE'
         CB88      = 0.5D+00
         LCFLAG=.FALSE.
         DFTTYP(3) = 0.5D+00
      ELSEIF(DFTYPE.EQ.BHHLYP) THEN
         NEXFG     = 2
         NCORFG    = 2
         EXCHR     = 'B88&HFX'
         CORCHR    = 'LYP88'
         CB88      = 0.5D+00
         LCFLAG=.FALSE.
         DFTTYP(3) = 0.5D+00
      ELSEIF(DFTYPE.EQ.PBE0) THEN
         NEXFG     = 4
         NCORFG    = 4
         EXCHR     = 'PBE&HFX'
         CORCHR    = 'PBE'
         CPBEX     = 0.75D+00
         DFTTYP(3) = 0.25D+00
      ELSEIF(DFTYPE.EQ.PBE0M) THEN
         NEXFG     = 4
         NCORFG    = 3
         EXCHR     = 'PBE&HFX'
         CORCHR    = 'PW91'
         CPBEX     = 0.75D+00
         DFTTYP(3) = 0.25D+00
         CPW91     = ONE
      ELSEIF(DFTYPE.EQ.TPSSH) THEN
         NEXFG     = 15
         NCORFG    = 15
         EXCHR     = 'TPSS&HFX'
         CORCHR    = 'TPSS'
         CTPSSX    = 0.9D+00
         DFTTYP(3) = 0.1D+00
         NEEDTAU   = .TRUE.
C
C     ----- SOGGA FAMILY -----
C
      ELSEIF(DFTYPE.EQ.SOGGA) THEN
         NEXFG     = 22
         NCORFG    = 4
         EXCHR     = 'SOGGA'
         CORCHR    = 'PBE'
         ISOGGA    = 1
      ELSEIF(DFTYPE.EQ.SOGGA11) THEN
         NEXFG     = 22
         NCORFG    = 22
         EXCHR     = 'SOGGA11'
         CORCHR    = 'SOGGA11'
         ISOGGA    = 2
      ELSEIF(DFTYPE.EQ.SOGGA11X) THEN
         NEXFG     = 22
         NCORFG    = 22
         EXCHR     = 'SOGGA11X'
         CORCHR    = 'SOGGA11X'
         ISOGGA    = 3
         DFTTYP(3) = 0.4015D+00
C
C     ----- LC METHOD -----
C
      ELSEIF(DFTYPE.EQ.LCBOP)  THEN
         NEXFG     = 2
         NCORFG    = 7
         EXCHR     = 'B88&LCHFX'
         CORCHR    = CORNM(7)
         QOP       = 2.3670D+00
         LCFLAG=.TRUE.
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.LCBLYP) THEN
         NEXFG     = 2
         NCORFG    = 2
         EXCHR     = 'B88&LCHFX'
         CORCHR    = CORNM(2)
         LCFLAG=.TRUE.
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.LCBOPLRD)  THEN
         NEXFG     = 2
         NCORFG    = 7
         EXCHR     = 'B88&LCHFX'
         CORCHR    = CORNM(7)
         QOP       = 2.3670D+00
         LCFLAG=.TRUE.
         DFTTYP(3) = 1.0D+00
      ELSEIF(DFTYPE.EQ.LCBPBE) THEN
         NEXFG     = 2
         NCORFG    = 4
         EXCHR     = 'B88&LCHFX'
         CORCHR    = CORNM(4)
         LCFLAG=.TRUE.
         DFTTYP(3) = 1.0D+00
C
C     ----- CAM METHOD -----
C
      ELSEIF(DFTYPE .EQ. CAMB3LYP)  THEN
         CAMFLAG=.TRUE.
         FUNFL = .TRUE.
         NEXFG     =-3
         NCORFG    =-1
         EXCHR     = 'B88&HFX'
         CORCHR    = 'LYP88&VWN5'
         CLYP      = CAMLYP
         CVWN      = CAMVWN
         CB88      = CAMLYP
C
C     ----- MCAM -----
C
      ELSEIF(DFTYPE .EQ. CAMM)  THEN
         CAMFLAG=.TRUE.
         FUNFL = .TRUE.
         NEXFG     =-4
         NCORFG    =-1
         EXCHR     = 'B88&HFX'
         CORCHR    = 'LYP88&VWN5'
         CLYP      = 0.81D+00
         CVWN      = CAMVWN
         CB88      = CAMLYP
         ALPHAC    = 0.19D+00
         BETAC     = 0.19D+00
      ELSE
C
C     ---- OTHER FUNCTIONAL  -----
C     THIS PART GENERATES A ZILLION OR SO COMBINATIONS, MANY OF
C     WHICH ARE SILLY (BUT SOME ARE NOT) BY PUTTING TOGETHER THE
C     SHORT SYMBOLS IN -EX- WITH SHORT SYMBOLS IN -COR-, TO MAKE
C
         CALL NAMEXC(NEX,NCOR,EX,COR,NUMEX,NUMCOR,DFTYPE,
     *               EXNM,CORNM,EXCHR,CORCHR,DQOP,PFTYP)
      END IF
C
      IF(LCFLAG) DFTTYP(3)=1.0D+00
C
C        provide default grid for LDA/GGA,
C        or slightly denser grid for meta-GGA.
C
      IF(NEEDTAU) THEN
         IF(NRAD.LT.0)    NRAD=99
         IF(NLEB(1).LT.0) NLEB(1)=590
      ELSE
         IF(NRAD.LT.0)    NRAD=96
         IF(NLEB(1).LT.0) NLEB(1)=302
      ENDIF
C
      IF(MASWRK) THEN
         IF      (SG1)         THEN
            WRITE(IW,9011) DFTYPE,SWOFF,DFTTHR,DFTGTHR
         ELSE IF(JANS.EQ.1)    THEN
            WRITE(IW,9012) DFTYPE,SWOFF,DFTTHR,DFTGTHR
         ELSE IF(JANS.EQ.2)    THEN
            WRITE(IW,9013) DFTYPE,SWOFF,DFTTHR,DFTGTHR
         ELSE IF(NLEB(1).GT.0) THEN
            WRITE(IW,9014) DFTYPE,NRAD,NLEB(1),NRAD0,NLEB0(1),
     *                     SWOFF,SW0,DFTTHR,DFTGTHR
         ELSE
            WRITE(IW,9015) DFTYPE,NRAD,NTHE,NPHI,NRAD0,NTHE0,NPHI0,
     *                     SWOFF,SW0,DFTTHR,DFTGTHR
         ENDIF
         IF(QOP.NE.ZERO) WRITE(IW,9040) QOP,PFTYP
         IF(LCFLAG)      WRITE(IW,9050) LCFLAG,EMU
         IF(CAMFLAG) WRITE(IW,9045) ALPHAC,BETAC,CAMMU,CAMVWN,CAMLYP
         IF(FUNCL) THEN
            WRITE(IW,9046) FUNCL
            FUNFL = .FALSE.
         ENDIF
         IF(FUNFL) WRITE(IW,9047) FUNFL
         IF(EXETYP.EQ.CHECK) WRITE(IW,9060)
      ENDIF
      RETURN
C
 9011 FORMAT(/5X,'STANDARD GRID ONE (SG-1) PRUNED GRID OPTIONS'/
     *     5X,43(1H-)/
     *     5X,'DFTTYP=',A8/
     *     5X,'GRID HAS 50 RADIAL POINTS AND AT MOST'/
     *     5X,' 194 ANGULAR POINTS, BEFORE PRUNING'/
     *     5X,'SWOFF =',1P,E12.2,' (PURE SCF -> DFT)'/
     *     5X,'COARSE GRID SWITCHING IS NOT AVAILABLE'/
     *     5X,'THRESH=',1P,E12.2,' GTHRE=',E12.2)
 9012 FORMAT(/5X,'MEDIUM SIZED MODIFIED JANSSEN PRUNED GRID OPTIONS'/
     *     5X,43(1H-)/
     *     5X,'DFTTYP=',A8/
     *     5X,'GRID HAS 95 RADIAL POINTS AND AT MOST'/
     *     5X,' 434 ANGULAR POINTS, BEFORE PRUNING'/
     *     5X,'SWOFF =',1P,E12.2,' (PURE SCF -> DFT)'/
     *     5X,'COARSE GRID SWITCHING IS NOT AVAILABLE'/
     *     5X,'THRESH=',1P,E12.2,' GTHRE=',E12.2)
 9013 FORMAT(/5X,'LARGE SIZED MODIFIED JANSSEN PRUNED GRID OPTIONS'/
     *     5X,43(1H-)/
     *     5X,'DFTTYP=',A8/
     *     5X,'GRID HAS 155 RADIAL POINTS AND AT MOST'/
     *     5X,' 974 ANGULAR POINTS, BEFORE PRUNING'/
     *     5X,'SWOFF =',1P,E12.2,' (PURE SCF -> DFT)'/
     *     5X,'COARSE GRID SWITCHING IS NOT AVAILABLE'/
     *     5X,'THRESH=',1P,E12.2,' GTHRE=',E12.2)
 9014 FORMAT(/5X,'LEBEDEV GRID-BASED DFT OPTIONS'/5X,30(1H-)/
     *     5X,'DFTTYP=',A8/
     *     5X,'NRAD  =',I8,5X,'NLEB  =',I8/
     *     5X,'NRAD0 =',I8,5X,'NLEB0 =',I8/
     *     5X,'SWOFF =',1P,E12.2,' (PURE SCF -> DFT)'/
     *     5X,'SWITCH=',1P,E12.2,' (COARSE -> TIGHT GRID)'/
     *     5X,'THRESH=',1P,E12.2,' GTHRE=',E12.2)
 9015 FORMAT(/5X,'POLAR COORDINATE GRID-BASED DFT OPTIONS'/5X,39(1H-)/
     *     5X,'DFTTYP=',A8/
     *     5X,'NRAD  =',I8,5X,'NTHE  =',I8,5X,'NPHI  =',I8/
     *     5X,'NRAD0 =',I8,5X,'NTHE0 =',I8,5X,'NPHI0 =',I8/
     *     5X,' SWOFF=',1P,E12.2,' (PURE SCF -> DFT)'/
     *     5X,'SWITCH=',1P,E12.2,' (COARSE -> TIGHT GRID)'/
     *     5X,'THRESH=',1P,E12.2,' GTHRE=',E12.2)
 9040 FORMAT(5X,7HQOP   =,F8.3,5X,7HPFTYP =,A8)
 9045 FORMAT(/5X,'LC/CAM PARAMETERS'/5X,17(1H-)/
     *     5X,8HALPHAC =,F6.5,2X,7HBETAC =,F6.5,2X,7HCAMMU =,F6.3,
     *     2X,8HCAMVWN =,F6.2, 2X,8HCAMLYP =,F6.2)
 9046 FORMAT(5X,'FUNCL =',L2)
 9047 FORMAT(5X,'FUNFL =',L2)
 9050 FORMAT(5X,'LONG RANGE CORRECTION=',L2,' MU=',F15.6)
 9060 FORMAT(/10X,'**** NOTE - FOR SPEED REASONS,'/
     *       1X,'EXETYP=CHECK RUNS SKIP BECKE ATOMIC PARTITIONING,'/
     *       1X,'LEADING TO RETENTION OF ALL DFT GRID POINTS, AND'/
     *       1X,'THUS AN OVERESTIMATION OF THE ACTUAL MEMORY NEEDS.'//
     *       1X,'MEMORY NEEDS MAY BE ESTIMATED ABOUT 20% TOO HIGH.'//)
C
C     =========================
      ENTRY RNAMEXC(XCHNG,CRRN)
C     =========================
      XCHNG = EXCHR
      CRRN  = CORCHR
      RETURN
      END
C*MODULE DFTXCA  *DECK INPPFREE
      SUBROUTINE INPPFREE(PFTYP)
C**********************************************************************
C     KINFG;
C     1  ...  THOMAS-FERMI-WEIZSACKER (TFW)
C     2  ...  THOMAS-FERMI-LAMDA-WEIZSACKER (TFLW) [LAMBDA = 0.8945]
C     3  ...  LEE-LEE-PARR (LLP)
C     4  ...  THAKKER (THAKKER)
C     5  ...  ??
C     6  ...  PADE (PADE)
C     7  ...  NEW-LLP (NLLP)
C**********************************************************************
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DOUBLE PRECISION LLP,NLLP
      SAVE PFKIN
C
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
C
      CHARACTER*10 PFKIN,PFCHR
C
      DATA TFW    /8HTFW     /,TFLW   /8HTFLW    /,LLP    /8HLLP     /
      DATA THAK   /8HTHAK    /,FIT    /8HFIT     /,PADE   /8HPADE    /
      DATA NLLP   /8HNLLP    /
C
      NPFFG=0
C
      IF(PFTYP.EQ.TFW) THEN
         NPFFG  = 1
         PFKIN   = 'TF-W'
         QOP     = 2.3866D+00
      ELSEIF(PFTYP.EQ.TFLW)  THEN
         NPFFG  = 2
         PFKIN   = 'TF-LAMBDAW'
         QOP     = 2.3687D+00
      ELSEIF(PFTYP.EQ.LLP)  THEN
         NPFFG  = 3
         PFKIN   = 'LLP'
         QOP     = 2.3924D+00
      ELSEIF(PFTYP.EQ.THAK)  THEN
         NPFFG  = 4
         PFKIN   = 'THAKKER'
         QOP     = 2.3895D+00
      ELSEIF(PFTYP.EQ.FIT)  THEN
         NPFFG  = 5
         PFKIN   = 'FIT'
         QOP     = 2.3665D+00
      ELSEIF(PFTYP.EQ.PADE)  THEN
         NPFFG  = 6
         PFKIN   = 'PADE'
         QOP     = 2.3833D+00
      ELSEIF(PFTYP.EQ.NLLP)  THEN
         NPFFG  = 7
         PFKIN   = 'NLLP'
         QOP     =2.3653D+00
      ELSE
         WRITE (IW,*) 'PFTYP IS EITHER NOT GIVEN OR INCORRECT'
         CALL ABRT
      ENDIF
      RETURN
C
      ENTRY REFPFREE(PFCHR)
      PFCHR = PFKIN
      RETURN
      END
C*MODULE DFTXCA  *DECK KINETIC
      SUBROUTINE KINETIC(X,X2,TAUS,TAU,DTADX)
C**********************************************************************
C     DETERMINE THE VALUE OF THE TAU FOR EACH KINETIC ENERGY DENSITY
C
C     KINFG;
C     1  ...  THOMAS-FERMI-WEIZSACKER (TFW)
C     2  ...  THOMAS-FERMI-LAMDA-WEIZSACKER (TFLW) [LAMBDA = 0.8945]
C     3  ...  LEE-LEE-PARR (LLP)
C     4  ...  THAKKER (THAKKER)
C     5  ...  ??
C     6  ...  PADE (PADE)
C     7  ...  NEW-LLP (NLLP)
C**********************************************************************
C     THIS ROUTINE MAY BE MISLEADING. NONE OF THESE FUNCTIONALS ARE
C     TRUE META-GGA FUNCTIONALS.
C**********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER ( ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
C
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
C
C     ---- TFW ----
C
      IF (NPFFG.EQ.1) THEN
         TAU  =TAUS+X2/36.0D+00
         DTADX= X/18.0D+00
C
C     ---- TFLW ----
C
      ELSEIF (NPFFG.EQ.2) THEN
         TAU  =TAUS+0.8945D+00*X2/36.0D+00
         DTADX=0.8945D+00*X/18.0D+00
C
C     ----- LLP ----
C
      ELSEIF (NPFFG.EQ.3) THEN
         BB   =0.0044188D+00
         CC   =0.0253D+00
         Q    =SQRT(ONE+X2)
         S    =LOG(X+Q)
         T    =ONE+CC*X*S
         G    =BB*X2/T
         TAU  =TAUS*(ONE+G)
         DTADX=TAUS*(TWO*BB*X+BB*CC*X2*(S-X/Q))/T/T
C
C     ---- THAKKER ----
C
      ELSE IF (NPFFG.EQ.4) THEN
         BB   =0.0055D+00
         CC   =0.0253D+00
         DD   =0.072D+00
         Q    =SQRT(ONE+X2)
         S    =LOG(X+Q)
         T    =ONE+CC*X*S
         G    =BB*X2/T
         H    =ONE+TWO**(5.0D+00/THREE)*X
         TAU  =TAUS*(ONE+G-DD*X/H)
         DTADX=TAUS*(TWO*BB*X+BB*CC*X2*(S-X/Q))/T/T
     >        -TAUS*DD/H/H
C
C     ---- FIT ----
C
      ELSE IF (NPFFG.EQ.4) THEN
         DENOM=ONE+0.0024D+00*X2
         TAU  =TAUS+X2/36.0D+00/DENOM
         DTADX=X/18.0D+00/DENOM-X2*X*0.0048D+00/36.0D+00/DENOM/DENOM
C
C     ---- PADE ----
C
      ELSE IF (NPFFG.EQ.5) THEN
         YYA  = X2/36.0D+00/TAUS
         YYA2 = YYA*YYA
         YYA3 = YYA*YYA2
         YYA4 = YYA2*YYA2
         YYA5 = YYA2*YYA3
         YYA6 = YYA3*YYA3
         A1   = 0.95D+00
         A2   = 14.28111D+00
         A3   =-19.57962D+00
         B1   =-0.05D+00
         B2   = 9.99802D+00
         B3   = 2.96085D+00
         DENOM= B3*YYA3+B2*YYA2+B1*YYA+ONE
         TAU  = TAUS*(9.0D+00*B3*YYA4+A3*YYA3+A2*YYA2+A1*YYA+ONE)/DENOM
         PNOMER= 9.0D+00*B3*B3*YYA6+18.0D+00*B3*B2*YYA5
     >         +(27.0D+00*B3*B1+A3*B2-B3*A2)*YYA4
     >         +(36.0D+00*B3+TWO*(A3*B1-B3*A1))*YYA3
     >         +(THREE*(A3-B3)+A2*B1-B2*A1)*YYA2
     >         +TWO*(A2-B2)*YYA+A1-B1
         DTADX= PNOMER/DENOM/DENOM*X/18.0D+00
      ELSE
         WRITE(IW,*) 'INVALID NUMBER OF NPFFG =',NPFFG
         CALL ABRT
         STOP
      END IF
C
      RETURN
      END
C
C*MODULE DFTXCA  *DECK LENXC
      SUBROUTINE LENXC(CHAR,NUM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      CHARACTER*8 CHAR
      CHARACTER*36 ALPHA
      PARAMETER(ALPHA='ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
C
      DO I=1,8
         NUM=I
         IF (INDEX(ALPHA,CHAR(NUM:NUM)).EQ.0) GO TO 15
      ENDDO
C
      NUM = 8
C
 15   CONTINUE
      NUM=NUM-1
      RETURN
      END
C*MODULE DFTXCA  *DECK LSDSLT
      SUBROUTINE LSDSLT(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA,VXCB,XALPHA,
     *                  SIGKA,SIGKB)
C***********************************************************************
C     SLATER(DIRAC) EXCHANGE FUNCTIONAL
C
C     XALF    ....  EXCHANGE ENERGY OF LDA PART
C     B88X    ....  EXCHANGE ENERGY OF GGA PART
C     DUM     ....  EXCHANGE GRADIENT  TO RHO
C     DUMX    ....  EXCHANGE GRADIENT TO X
C     DUMY    ....  EXCHANGE GRADIENT TO Y
C     DUMZ    ....  EXCHANGE GRADIENT TO Z
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      PARAMETER (ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      COMMON /NLRC  / LCFLAG,LRINT,EMU,EMU2,LRFILE
      LOGICAL LCFLAG,LRINT
C***********************************************************************
      GRDAA =0.0D+00
      GRDBB =0.0D+00
      GRADXA=0.0D+00
      GRADYA=0.0D+00
      GRADZA=0.0D+00
      GRADXB=0.0D+00
      GRADYB=0.0D+00
      GRADZB=0.0D+00
      DKDXA =0.0D+00
      DKDXB =0.0D+00
       IF (RHFGVB) THEN
         RHO13= ROA**(ONE/THREE)
         FACP = -(6.0D+00/PI)**(ONE/THREE)
         FACE = -(THREE/4.0D+00)*(6.0D+00/PI)**(ONE/THREE)
         PDUMA = FACP*RHO13
         VXCB = VXCB
         RHOE = RHO13**4
         XALFA= FTOTWT*RHOE*FACE*TWO
C     ----- FOR OP CORRELATION -----
         SIGKA= -FACE*TWO
C     ------------------------------
         IF (LCFLAG) THEN
         DKDXA=0.0D+00
            CALL LRCFUN(UROHF,ROA,ROB,GRDAA,GRDBB,
     >           GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >           FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >           XALFA,XALFB,B88XA,B88XB,PDUMA,PDUMXA,PDUMYA,
     >           PDUMZA,PDUMB,PDUMXB,PDUMYB,PDUMZB,FACE)
         END IF
         XALPHA = XALPHA + CSLT*XALFA
         VXCA   = VXCA + CSLT*PDUMA
       ELSE IF (UROHF) THEN
         RHO13A=ROA**(ONE/THREE)
         RHO13B=ROB**(ONE/THREE)
         FACP=-(6.0D+00/PI)**(ONE/THREE)
         FACE=-(THREE/4.0D+00)*(6.0D+00/PI)**(ONE/THREE)
         PDUMA = CSLT*FACP*RHO13A
         PDUMB = CSLT*FACP*RHO13B
         RHOEA= RHO13A**4
         RHOEB= RHO13B**4
         XALFA = CSLT*FTOTWT*RHOEA*FACE
         XALFB = CSLT*FTOTWT*RHOEB*FACE
C     ----- FOR OP CORRELATION -----
         SIGKA= -FACE*TWO
         SIGKB= -FACE*TWO
C     ------------------------------
         IF (LCFLAG) THEN
            DKDXA=0.0D+00
            DKDXB=0.0D+00
C     PERHAPS NEED NOT GRDAA,GRDBB=0.0D+00
            CALL LRCFUN(UROHF,ROA,ROB,GRDAA,GRDBB,
     >           GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >           FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >           XALFA,XALFB,B88XA,B88XB,PDUMA,PDUMXA,PDUMYA,
     >           PDUMZA,PDUMB,PDUMXB,PDUMYB,PDUMZB,FACE)
         END IF
         XALPHA = XALPHA + XALFA + XALFB
         VXCA = VXCA+PDUMA
         VXCB = VXCB+PDUMB
       ENDIF
      RETURN
      END
C*MODULE DFTXCA  *DECK LYPCF
      SUBROUTINE LYPCF(RHFGVB,UROHF,NB,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >                 GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                 FTOTWT,ELYP,
     >                 DUMA,DUMXA,DUMYA,DUMZA,DUMB,DUMXB,DUMYB,DUMZB)
C***********************************************************************
C     LYP CORRELATION FUNCTIONAL
C
C     C. LEE, W. YANG AND R. G. PARR
C     PHYSICAL REVIEW B 37, 785-789 (1988)
C
C     -----
C     INPUT
C     -----
C
C     ROA,B   .... SPIN DENSITIES
C     GRAD**  .... DENSITY GRADIENTS
C     FTOTWT  .... VOLUME OF THIS GRID
C
C     ------
C     OUTPUT
C     ------
C
C     ELYP    ....  CORRELATION ENERGY OF LYP
C     DUM***  ....  FIRST DERIVATIVES OF THE EXCHANGE FUNCTINALS
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
C
       FACE = (TWO**(11.0D+00/THREE))*(THREE/10.0D+00)*
     >        (THREE*PI**2)**(TWO/THREE)
       FACP = ONE*CLYP
       ALYPA=0.04918D+00
       ALYPB=0.13200D+00
       ALYPC=0.25330D+00
       ALYPD=0.34900D+00
C***********************************************************************
       IF (RHFGVB) THEN
C***********************************************************************
            RHOA  =ROA
            RHOB  =ROB
            GAA   =GRDAA
            GBB   =GRDBB
            GAB   =GRDAB
            RHOT  =RHOA+RHOB
            RHO13 =RHOT**(ONE/THREE)
            RHO13A=RHOA**(ONE/THREE)
            RHO13B=RHOB**(ONE/THREE)
            RHO43 =RHO13**4
            RHO83A=RHO13A**8
            RHO83B=RHO13B**8
            XC    =ALYPC/RHO13
            XD    =ALYPD/RHO13
            RX    =XD/(ONE+XD)
            DELTA =XC+RX
            OMEGA =(ALYPA*ALYPB/ALYPD)*RX*EXP(-XC)/RHO43
            DELTAP=(-DELTA+RX*RX)/THREE/RHOT
            OMEGAP=( DELTA-5.0D+00 )/THREE/RHOT
            RA    =RHOA/RHOT
            RB    =RHOB/RHOT
            RAA   =RA*RA
            RBB   =RB*RB
            RAB   =RA*RB
C***********************************************************************
            FAA   =(RAB/9)*(ONE-THREE*DELTA-(DELTA-11)*RA)
            FBB   =(RAB/9)*(ONE-THREE*DELTA-(DELTA-11)*RB)
            FAB   =(RAB/9)*(47-7*DELTA)
            DDAA  =-OMEGA*(FAA-RBB           )
            DDBB  =-OMEGA*(FBB-RAA           )
            DDAB  =-OMEGA*(FAB-    4.0D+00/THREE)
            T1    =(-4.0D+00*ALYPA/ALYPD)*RX*RAB*RHO43
            T2A   =(-FACE*OMEGA*RAB)*RHO83A
            T2B   =(-FACE*OMEGA*RAB)*RHO83B
            T2    =T2A+T2B
            ELYPI =T1+T2+DDAA*GAA+DDBB*GBB+DDAB*GAB
C***********************************************************************
            DFAADA=-(RAB/9)*((THREE+RA)*DELTAP+
     1                             (DELTA-11)*RB/RHOT)
            DFBBDA=-(RAB/9)*((THREE+RB)*DELTAP-
     1                             (DELTA-11)*RB/RHOT)
            DFABDA=-(RAB/9)*7*DELTAP
            D2DAAA= OMEGAP*DDAA-OMEGA*(DFAADA+RBB*(TWO/RHOT))
            D2DABB= OMEGAP*DDBB-OMEGA*(DFBBDA-RAB*(TWO/RHOT))
            D2DAAB= OMEGAP*DDAB-OMEGA* DFABDA
            DT1DA =(T1/RHOT)*(RX/THREE+ONE)
            DT2DA =OMEGAP*(T2A+T2B)+(8.0D+00/THREE)*T2A/RHOA
            DDA   =DT1DA+DT2DA+D2DAAA*GAA
     1                        +D2DABB*GBB
     2                        +D2DAAB*GAB
C***********************************************************************
            ELYP  =ELYP  +FACP*ELYPI*FTOTWT
            U     = DDA
            U     =U*FACP
            DUMA  =DUMA+U
            W     =(DDAA+0.5D+00*DDAB)
            W     =W*FACP
            DUMXA =DUMXA+TWO*W*GRADXA
            DUMYA =DUMYA+TWO*W*GRADYA
            DUMZA =DUMZA+TWO*W*GRADZA
C***********************************************************************
       ELSE IF (UROHF) THEN
C***********************************************************************
            GAA   =GRDAA
            GBB   =GRDBB
            GAB   =GRDAB
            RHOA  =ROA
            RHOB  =ROB
            RHOT  =RHOA+RHOB
            RHO13 =RHOT**(ONE/THREE)
            RHO13A=RHOA**(ONE/THREE)
            RHO13B=RHOB**(ONE/THREE)
            RHO43 =RHO13**4
            RHO83A=RHO13A**8
            RHO83B=RHO13B**8
            XC    =ALYPC/RHO13
            XD    =ALYPD/RHO13
            RX    =XD/(ONE+XD)
            DELTA =XC+RX
            OMEGA =(ALYPA*ALYPB/ALYPD)*RX*EXP(-XC)/RHO43
            DELTAP=(-DELTA+RX*RX)/THREE/RHOT
            OMEGAP=( DELTA-5.0D+00 )/THREE/RHOT
            RA    =RHOA/RHOT
            RB    =RHOB/RHOT
            RAA   =RA*RA
            RBB   =RB*RB
            RAB   =RA*RB
            ZETA  =RA-RB
C***********************************************************************
            FAA   =(RAB/9)*(ONE-THREE*DELTA-(DELTA-11)*RA)
            FBB   =(RAB/9)*(ONE-THREE*DELTA-(DELTA-11)*RB)
            FAB   =(RAB/9)*(47-7*DELTA)
            DDAA  =-OMEGA*(FAA-RBB           )
            DDBB  =-OMEGA*(FBB-RAA           )
            DDAB  =-OMEGA*(FAB-    4.0D+00/THREE)
            T1    =(-4.0D+00*ALYPA/ALYPD)*RX*RAB*RHO43
            T2A   =(-FACE*OMEGA*RAB)*RHO83A
            T2B   =(-FACE*OMEGA*RAB)*RHO83B
            T2    =T2A+T2B
            ELYPI =T1+T2+DDAA*GAA+DDBB*GBB+DDAB*GAB
C***********************************************************************
            DFAADA=-ZETA*FAA/RHOA
     1             -(RAB/9)*((THREE+RA)*DELTAP+
     2                             (DELTA-11)*RB/RHOT)
            DFBBDA=-ZETA*FBB/RHOA
     1             -(RAB/9)*((THREE+RB)*DELTAP-
     2                             (DELTA-11)*RB/RHOT)
            DFABDA=-ZETA*FAB/RHOA
     1             -(RAB/9)*7*DELTAP
            IF(NB.GT.0) THEN
            DFAADB= ZETA*FAA/RHOB
     1             -(RAB/9)*((THREE+RA)*DELTAP-
     2                             (DELTA-11)*RA/RHOT)
            DFBBDB= ZETA*FBB/RHOB
     1             -(RAB/9)*((THREE+RB)*DELTAP+
     2                             (DELTA-11)*RA/RHOT)
            DFABDB= ZETA*FAB/RHOB
     1             -(RAB/9)*7*DELTAP
            ELSE
               DFAADB = ZERO
               DFBBDB = ZERO
               DFABDB = ZERO
            END IF
C***********************************************************************
            D2DAAA= OMEGAP*DDAA-OMEGA*(DFAADA+RBB*(TWO/RHOT))
            D2DBAA= OMEGAP*DDAA-OMEGA*(DFAADB-RAB*(TWO/RHOT))
            D2DABB= OMEGAP*DDBB-OMEGA*(DFBBDA-RAB*(TWO/RHOT))
            D2DBBB= OMEGAP*DDBB-OMEGA*(DFBBDB+RAA*(TWO/RHOT))
            D2DAAB= OMEGAP*DDAB-OMEGA* DFABDA
            D2DBAB= OMEGAP*DDAB-OMEGA* DFABDB
C***********************************************************************
            DT1DA =(T1/RHOT)*(RX/THREE+RB/RA)
            DT2DA =(OMEGAP-ZETA/RHOA)*T2B+
     1             (OMEGAP+(8.0D+00/THREE-ZETA)/RHOA)*T2A
            IF(NB.GT.0) THEN
               DT1DB =(T1/RHOT)*(RX/THREE+RA/RB)
               DT2DB =(OMEGAP+ZETA/RHOB)*T2A+
     1                (OMEGAP+(8.0D+00/THREE+ZETA)/RHOB)*T2B
            ELSE
               DT1DB = ZERO
               DT2DB = ZERO
            END IF
            DDA   =DT1DA+DT2DA+D2DAAA*GAA
     1                        +D2DABB*GBB
     2                        +D2DAAB*GAB
            DDB   =DT1DB+DT2DB+D2DBAA*GAA
     1                        +D2DBBB*GBB
     2                        +D2DBAB*GAB
C***********************************************************************
            ELYP   =ELYP  +FACP*ELYPI*FTOTWT
            UA     = DDA
            UA     =UA*FACP
            DUMA   =DUMA+UA
            UB     = DDB
            UB     =UB*FACP
            DUMB   =DUMB+UB
            WAA    =TWO*DDAA
            WAA    =WAA*FACP
            WBB    =TWO*DDBB
            WBB    =WBB*FACP
            WAB    =    DDAB
            WAB    =WAB*FACP
            DUMXA  =DUMXA+WAA*GRADXA+WAB*GRADXB
            DUMYA  =DUMYA+WAA*GRADYA+WAB*GRADYB
            DUMZA  =DUMZA+WAA*GRADZA+WAB*GRADZB
            DUMXB  =DUMXB+WBB*GRADXB+WAB*GRADXA
            DUMYB  =DUMYB+WBB*GRADYB+WAB*GRADYA
            DUMZB  =DUMZB+WBB*GRADZB+WAB*GRADZA
C***********************************************************************
            ENDIF
        RETURN
      END
C*MODULE DFTXCA  *DECK NAMEXC
      SUBROUTINE NAMEXC(NEX,NCOR,EX,COR,NUMEX,NUMCOR,DFTYPE,
     *                  EXNM,CORNM,EXCHR,CORCHR,DQOP,PFTYP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
C
      CHARACTER*8  EX(NEX),COR(NCOR)
      CHARACTER*10 EXNM(NEX),CORNM(NCOR),EXCHR,CORCHR
      CHARACTER*8  TRYFC,INPXC
C
      DIMENSION NUMEX(NEX),NUMCOR(NCOR),DQOP(NEX)
C
      WRITE(UNIT=INPXC,FMT='(A8)') DFTYPE
C
      DO 10 IEX=1,NEX
         DO 20 ICOR=1,NCOR
            CALL LENXC(EX(IEX),LEX)
            CALL LENXC(COR(ICOR),LCOR)
            TRYFC=EX(IEX)(1:LEX)//COR(ICOR)(1:LCOR)
            IF(TRYFC.EQ.INPXC) GOTO 30
 20      CONTINUE
 10   CONTINUE
C
      WRITE (6,9040) INPXC
 9040 FORMAT(//1X,'GRID DFT PROGRAM CAN''T DO UNSUPPORTED DFTTYP=',A8//)
      CALL ABRT
      STOP
C
 30   CONTINUE
C          NEXT STATMENT ALLOWS BACKWARDS COMPATIBILITY WITH VWN=VWN5
      IF(ICOR.EQ.6) ICOR=1
      IF(IEX .EQ.7) CSLT = 1.05151D+00
      NEXFG  = NUMEX(IEX)
      NCORFG = NUMCOR(ICOR)
      EXCHR  = EXNM(IEX)
      CORCHR = CORNM(ICOR)
C
      IF (ICOR.EQ.7.AND.QOP.LT.1.0D-15) QOP=DQOP(IEX)
      IF (IEX.EQ.6) CALL INPPFREE(PFTYP)
      RETURN
      END
C*MODULE DFTXCA  *DECK NWPW91CF
      SUBROUTINE NWPW91CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >                    GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                    FTOTWT,ECF,VXCA1,DUMAX,DUMAY,DUMAZ,
     >                    VXCB1,DUMBX,DUMBY,DUMBZ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      COMMON /CPW91 / CPW91C
C
      IF(RHFGVB) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
         SIGMAAA1 = 4.0D+00*GRDAA
C
         CALL RKS_PW91C_NWCHEM
     *   (IDERIV,NPT,RHOA1,SIGMAAA1,ZK,VRHOA,VSIGMAAA,V2RHOA2,
     *    V2RHOASIGMAAA,V2SIGMAAA2)
C
         WAA = VSIGMAAA
C
         VXCA1 = VXCA1 + VRHOA*CPW91C
         DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA)*CPW91C
         DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA)*CPW91C
         DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA)*CPW91C
C
         ECF = ECF   + ZK * FTOTWT*CPW91C
      END IF
C
      IF(UROHF) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = ROA
         SIGMAAA1 = GRDAA
         RHOB1    = ROB
         SIGMABB1 = GRDBB
         SIGMAAB1 = GRDAB
C
        CALL UKS_PW91C_NWCHEM
     & (IDERIV,NPT,RHOA1,RHOB1,SIGMAAA1,SIGMABB1,SIGMAAB1,
     &  ZK,VRHOA,VRHOB,VSIGMAAA,VSIGMABB,VSIGMAAB,
     &  V2RHOA2,V2RHOB2,V2RHOAB,
     &  V2RHOASIGMAAA,V2RHOASIGMAAB,V2RHOASIGMABB,
     &  V2RHOBSIGMABB,V2RHOBSIGMAAB,V2RHOBSIGMAAA,
     &  V2SIGMAAA2,V2SIGMAAAAB,V2SIGMAAABB,
     &  V2SIGMAAB2,V2SIGMAABBB,V2SIGMABB2)
C
              WAA = VSIGMAAA
              WBB = VSIGMABB
              WAB = VSIGMAAB
C
            VXCA1 = VXCA1+VRHOA*CPW91C
            DUMAX=DUMAX+( 2.0D+00*(WAA*GRADXA)+(WAB*GRADXB) )*CPW91C
            DUMAY=DUMAY+( 2.0D+00*(WAA*GRADYA)+(WAB*GRADYB) )*CPW91C
            DUMAZ=DUMAZ+( 2.0D+00*(WAA*GRADZA)+(WAB*GRADZB) )*CPW91C
C
            VXCB1 = VXCB1+VRHOB*CPW91C
            DUMBX=DUMBX+( 2.0D+00*(WBB*GRADXB)+(WAB*GRADXA) )*CPW91C
            DUMBY=DUMBY+( 2.0D+00*(WBB*GRADYB)+(WAB*GRADYA) )*CPW91C
            DUMBZ=DUMBZ+( 2.0D+00*(WBB*GRADZB)+(WAB*GRADZA) )*CPW91C
C
              ECF = ECF   + ZK * FTOTWT*CPW91C
C
      END IF
C
      RETURN
      END
C*MODULE DFTXCA  *DECK P86CF
      SUBROUTINE P86CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      COMMON /CP86CF/ CP86
C
C        INTERFACED BY ROBERTO PEVERATI AND KIM BALDRIDGE, U.ZURICH
C
      IF(RHFGVB) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
         SIGMAAA1 = 4.0D+00*GRDAA
C
         CALL RKS_C_P86(IDERIV,NPT,RHOA1,SIGMAAA1,ZK,VRHOA,VSIGMAAA,
     &                  V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2)
C
         WAA = VSIGMAAA
C
         VXCA1 = VXCA1 + VRHOA*CP86
         DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA)*CP86
         DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA)*CP86
         DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA)*CP86
C
         ECF = ECF   + ZK * FTOTWT*CP86
C
      END IF
C
      IF(UROHF) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = ROA
         SIGMAAA1 = GRDAA
         RHOB1    = ROB
         SIGMABB1 = GRDBB
         SIGMAAB1 = GRDAB
C
        CALL UKS_C_P86(IDERIV,NPT,RHOA1,RHOB1,SIGMAAA1,SIGMABB1,
     &  SIGMAAB1,ZK,VRHOA,VRHOB,VSIGMAAA,VSIGMABB,VSIGMAAB,
     &  V2RHOA2,V2RHOB2,V2RHOAB,
     &  V2RHOASIGMAAA,V2RHOASIGMAAB,V2RHOASIGMABB,
     &  V2RHOBSIGMABB,V2RHOBSIGMAAB,V2RHOBSIGMAAA,
     &  V2SIGMAAA2,V2SIGMAAAAB,V2SIGMAAABB,
     &  V2SIGMAAB2,V2SIGMAABBB,V2SIGMABB2)
C
         WAA = VSIGMAAA
         WBB = VSIGMABB
         WAB = VSIGMAAB
C
        VXCA1 = VXCA1+VRHOA*CP86
        DUMAX = DUMAX+( 2.0D+00*(WAA*GRADXA)+(WAB*GRADXB) )*CP86
        DUMAY = DUMAY+( 2.0D+00*(WAA*GRADYA)+(WAB*GRADYB) )*CP86
        DUMAZ = DUMAZ+( 2.0D+00*(WAA*GRADZA)+(WAB*GRADZB) )*CP86
C
        VXCB1 = VXCB1+VRHOB*CP86
        DUMBX = DUMBX+( 2.0D+00*(WBB*GRADXB)+(WAB*GRADXA) )*CP86
        DUMBY = DUMBY+( 2.0D+00*(WBB*GRADYB)+(WAB*GRADYA) )*CP86
        DUMBZ = DUMBZ+( 2.0D+00*(WBB*GRADZB)+(WAB*GRADZA) )*CP86
C
        ECF = ECF   + ZK * FTOTWT*CP86
C
      END IF
C
      RETURN
      END
C
C*MODULE DFTXCA  *DECK OPCOR
      SUBROUTINE OPCOR(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >                 GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                 FTOTWT,EOP,
     >                 SIGKA,SIGKB,DKDXA,DKDXB,
     >                 DUMA,DUMXA,DUMYA,DUMZA,DUMB,DUMXB,DUMYB,DUMZB)
C***********************************************************************
C     ONE-PARAMETER PROGRESSIVE CORRELATION FUNCTIONAL
C
C     T. TSUNEDA AND K. HIRAO
C     J. CHEM. PHYS. 110, 10664-10678 (1999)
C
C     -----
C     INPUT
C     -----
C
C     ROA,B   .... SPINDENSITIES
C     GRAD**  .... DENSITY GRADIENTS
C     FTOTWT  .... VOLUME OF THIS GRID
C
C     ------
C     OUTPUT
C     ------
C
C     EOP    ....  CORRELATION ENERGY OF OP
C     DUM***  ....  FIRST DERIVATIVES OF THE CORRELATION FUNCTIONALS
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      PARAMETER ( ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      FACP   = ONE
C***********************************************************************
       IF (RHFGVB) THEN
C***********************************************************************
            RHOI=ROA
            RHOA=ROA
            RHOB=ROA
            RHOP=RHOI**(ONE/THREE)
            RHOE=RHOI*RHOP
            DRHO=SQRT(GRDAA)
            X   =DRHO/RHOE
C***********************************************************************
C      THE EXCHANGE PART DERIVED FROM THE EXCHANGE FUNCTIONAL
C***********************************************************************
            DXDR  =-(4.0D+00/THREE)*X/RHOI
            DKDR  =DKDXA*DXDR
            DKDAA =DKDXA/(TWO*DRHO*RHOE)
C***********************************************************************
C      THE CALCULATION OF THE OP CORRELATION ENERGY
C***********************************************************************
            BETA  =(QOP/TWO)*RHOP*SIGKA
            BETA4 =BETA**4
            BETA3 =BETA**3
            BETA2 =BETA**2
            DENOM =BETA4+(1.1284D+00)*BETA3+(0.3183D+00)*BETA2
            ENEWP =((1.5214D+00)*BETA+(0.5764D+00))/DENOM
            ENEWI =-ENEWP*RHOA*RHOB
            EOP   =EOP  +ENEWI*FTOTWT
C***********************************************************************
C      THE CALCULATION OF THE FIRST DERIVATIVES OF OP
C***********************************************************************
            DEPDB =((-4.5642D+00)*BETA4+(-5.7391D+00)*BETA3
     >             +(-2.4355D+00)*BETA2+(-3.6694D-01)*BETA)/DENOM**2
            DRPKDR=ONE/THREE*RHOI**(-TWO/THREE)*SIGKA+RHOP*DKDR
            DBDR  =QOP/4.0D+00*DRPKDR
            DEDR  =-RHOI*ENEWP-RHOI**2*DBDR*DEPDB
            U     =DEDR
            U     =U*FACP
            DUMA  =DUMA+U
C***********************************************************************
            DBDAA =QOP/4.0D+00*RHOP*DKDAA
            DEDAA =-RHOI**2*DBDAA*DEPDB
            W     =DEDAA
            W     =W*FACP
            DUMXA =DUMXA+TWO*W*GRADXA
            DUMYA =DUMYA+TWO*W*GRADYA
            DUMZA =DUMZA+TWO*W*GRADZA
C***********************************************************************
       ELSE IF (UROHF) THEN
C***********************************************************************
            RHOI  = ROA + ROB
            DRHOA =SQRT(GRDAA)
            DRHOB =SQRT(GRDBB)
            RHOA =ROA
            RHOB =ROB
            IF (RHOA.GT.RHOB*1.0D+04) GOTO 1
            RHO13A=RHOA**(  ONE/THREE)
            RHO13B=RHOB**(  ONE/THREE)
            RHO43A=RHO13A*RHOA
            RHO43B=RHO13B*RHOB
            XA    =DRHOA/RHO43A
            XB    =DRHOB/RHO43B
C***********************************************************************
C      THE EXCHANGE PART DERIVED FROM THE EXCHANGE FUNCTIONAL
C***********************************************************************
            DXADRA  =-(4.0D+00/THREE)*XA/RHOA
            DKADRA  =DKDXA*DXADRA
C
            DXBDRB  =-(4.0D+00/THREE)*XB/RHOB
            DKBDRB  =DKDXB*DXBDRB
C
            DKADGA  =DKDXA/RHO43A
            DKADGAGA=DKADGA/TWO/DRHOA
C
            DKBDGB  =DKDXB/RHO43B
            DKBDGBGB=DKBDGB/TWO/DRHOB
C***********************************************************************
C      THE CALCULATION OF THE OP CORRELATION ENERGY
C***********************************************************************
            BDENOM=RHO13A*SIGKA+RHO13B*SIGKB
            BETA  =QOP*RHO13A*RHO13B*SIGKA*SIGKB/BDENOM
            BETA2 =BETA**2
            BETA3 =BETA**3
            BETA4 =BETA**4
            DENOM =BETA4+(1.1284D+00)*BETA3+(0.3183D+00)*BETA2
            ENEWP =((1.5214D+00)*BETA+0.5764D+00)/DENOM
            ENEWI =-RHOA*RHOB*ENEWP
            EOP   =EOP   +ENEWI *FTOTWT
C***********************************************************************
C      THE CALCULATION OF THE FIRST DERIVATIVES OF OP
C***********************************************************************
            DEPDB  =((-4.5642D+00)*BETA4+(-5.7391D+00)*BETA3
     1              +(-2.4355D+00)*BETA2+(-3.6694D-01)*BETA)
     2              /DENOM**2
            DRPKDRA =ONE/THREE*(RHOA**(-TWO/THREE))*SIGKA
     1               +RHO13A*DKADRA
            DBDRA   =QOP*DRPKDRA*(RHO13B*SIGKB/BDENOM)**2
            DEDRA   =-RHOB*ENEWP-RHOA*RHOB*DBDRA*DEPDB
C***********************************************************************
            DRPKDRB =ONE/THREE*(RHOB**(-TWO/THREE))*SIGKB
     1               +RHO13B*DKBDRB
            DBDRB   =QOP*DRPKDRB*(RHO13A*SIGKA/BDENOM)**2
            DEDRB   =-RHOA*ENEWP-RHOB*RHOA*DBDRB*DEPDB
C***********************************************************************
            DBDGAGA =QOP*RHO13A*(RHO13B**2)*(SIGKB**2)
     1               /(BDENOM**2)*DKADGAGA
            DEDGAGA =-RHOA*RHOB*DBDGAGA*DEPDB
C***********************************************************************
            DBDGBGB =QOP*RHO13B*(RHO13A**2)*(SIGKA**2)
     1           /(BDENOM**2)*DKBDGBGB
            DEDGBGB =-RHOB*RHOA*DBDGBGB*DEPDB
C***********************************************************************
            UA     =DEDRA
            UA     =UA*FACP
            DUMA   =DUMA+UA
            UB     =DEDRB
            UB     =UB*FACP
            DUMB   =DUMB+UB
            WAA    =DEDGAGA
            WAA    =WAA*FACP
            WBB    =DEDGBGB
            WBB    =WBB*FACP
            DUMXA  =DUMXA+TWO*WAA*GRADXA
            DUMYA  =DUMYA+TWO*WAA*GRADYA
            DUMZA  =DUMZA+TWO*WAA*GRADZA
            DUMXB  =DUMXB+TWO*WBB*GRADXB
            DUMYB  =DUMYB+TWO*WBB*GRADYB
            DUMZB  =DUMZB+TWO*WBB*GRADZB
 1          CONTINUE
       ENDIF
C***********************************************************************
      RETURN
      END
C*MODULE DFTXCA  *DECK OPTXXF
      SUBROUTINE OPTXXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >                  GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                  FTOTWT,OPTX,DUMA,DUMXA,DUMYA,DUMZA,
     >                  DUMB,DUMXB,DUMYB,DUMZB)
      IMPLICIT NONE
      COMMON /EXFACT/ COPTX
C***********************************************************************
C     OPTX EXCHANGE FUNCTIONAL OF NICHOLAS C. HANDY AND ARON H. COHEN
C
C     MOL. PHYS. (2001) 99 403-412
C
C     EX[RHO] = -(1.05151 * CX + 1.43169 * U**2) * RHO**(4/3)
C             = -1.05151 * CX * RHO**(4/3) + -1.4369 * U**2 * RHO**(4/3)
C             =  [   LOCAL EXCHANGE      ] + [      GGA EXCHANGE       ]
C             =  [   CACULATED IN LDSLT  ] + [  CALCULATED IN OPTXXF   ]
C
C     CX = DIRAC SLATER COEFFICIENT = (3/4)*(6/PI)**(1/3) IT IS
C          CALCULATED IN THE ROUTINE LSDSLT WHICH WILL EXPLAIN WHY
C          THE VALUE OF -CSLT- IS SET TO 1.05151
C
C     COPTX = CONTAINS THE FACTOR 1.43169
C***********************************************************************
      DOUBLE PRECISION ROA, ROB, GRDAA, GRDBB
      DOUBLE PRECISION GRADXA, GRADYA, GRADZA, GRADXB, GRADYB, GRADZB
      DOUBLE PRECISION DUMA, DUMXA, DUMYA, DUMZA
      DOUBLE PRECISION DUMB, DUMXB, DUMYB, DUMZB
      DOUBLE PRECISION FTOTWT, OPTX
      DOUBLE PRECISION COPTX
C
      LOGICAL RHFGVB, UROHF
C
      DOUBLE PRECISION ONE, TWO, THREE, FOUR, GAMMA
      PARAMETER (ONE=1.0D+00,TWO=2.0D+00,THREE=3.0D+00,FOUR=4.0D+00)
      PARAMETER (GAMMA=0.006D+00)
C
      DOUBLE PRECISION RHO, GRD, RHO13, RHO43, X
      DOUBLE PRECISION U, DUDX, E, DEDRHO, DEDGRD
C
      IF (RHFGVB) THEN
        RHO = ROA
        GRD = GRDAA
        RHO13 = RHO**(ONE/THREE)
        RHO43 = RHO**(FOUR/THREE)
        X = SQRT(GRD)/RHO43
        U = (GAMMA*X*X)/(ONE+(GAMMA*X*X))
        DUDX = (TWO*GAMMA*X)/(ONE+(GAMMA*X*X))**TWO
C
        E = -U*U*RHO43
C       THE EXCHANGE ENERGY IS DEFINED ABOVE IN -E-
C
        OPTX = OPTX+E*TWO*FTOTWT*COPTX
C       NOTICED THAT YOU MUST MULTIPLE THE EXCHANGE ENERGY BY SEVERAL
C       FACTORS:
C          TWO : TAKES INTO ACCOUNT THAT IT IS A CLOSED SHELL SYSTEM AND
C                THAT WE ONLY SUPPLIED ROA (VERSUS ROA + ROB)
C       FTOTWT : TAKES INTO ACCOUNT THE CURRENT GRID WEIGHT
C        COPTX : TAKES INTO ACCOUNT THE FACTOR 1.43169 IN THE DEFINITION
C
        DEDRHO = (FOUR/THREE)*RHO13*((E/RHO43)-(X*(-TWO*U*DUDX)))
C       THE DERIVATIVE OF THE EXCHANGE ENERGY WITH RESPECT TO THE
C       DENSITY IS DEFINED ABOVE IN -DEDRHO-
C
        DEDGRD = (ONE/TWO)*(-TWO*U*DUDX)/SQRT(GRD)
C       THE DERIVATIVE OF THE EXCHANGE ENERGY WITH RESPECT TO THE
C       DENSITY GRADIENT IS DEFINED ABOVE IN -DEDGRD-
C
        DUMA = DUMA+DEDRHO*COPTX
C       NOTICE THAT THERE IS NO FACTOR OF TWO NOR IS THERE AN FTOTWT
C
        DUMXA = DUMXA+(DEDGRD*GRADXA*COPTX*TWO)
        DUMYA = DUMYA+(DEDGRD*GRADYA*COPTX*TWO)
        DUMZA = DUMZA+(DEDGRD*GRADZA*COPTX*TWO)
C       NOTICE THAT THERE IS NO FTOTWT
C
      ELSE IF (UROHF) THEN
C       THE SPIN UNRESTRICTED CODE JUST CONTAINS TWO CONSECTUTIVE
C       EXECUTION OF THE SPIN RESTRICTED CODE
C
C       ALPHA SPIN
C
        RHO = ROA
        GRD = GRDAA
        RHO13 = RHO**(ONE/THREE)
        RHO43 = RHO**(FOUR/THREE)
        X = SQRT(GRD)/RHO43
        U = (GAMMA*X*X)/(ONE+(GAMMA*X*X))
        DUDX = (TWO*GAMMA*X)/(ONE+(GAMMA*X*X))**TWO
        E = -U*U*RHO43
C
        OPTX = OPTX+E*FTOTWT*COPTX
C       NOTICE THAT THE FACTOR OF TWO DOES NOT APPEAR IN THE SPIN
C       UNRESTRICTED CASE
C
        DEDRHO = (FOUR/THREE)*RHO13*((E/RHO43)-(X*(-TWO*U*DUDX)))
        DEDGRD = (ONE/TWO)*(-TWO*U*DUDX)/SQRT(GRD)
        DUMA = DUMA+DEDRHO*COPTX
        DUMXA = DUMXA+(DEDGRD*GRADXA*COPTX*TWO)
        DUMYA = DUMYA+(DEDGRD*GRADYA*COPTX*TWO)
        DUMZA = DUMZA+(DEDGRD*GRADZA*COPTX*TWO)
C
C       BETA SPIN
C
        RHO = ROB
        GRD = GRDBB
        RHO13 = RHO**(ONE/THREE)
        RHO43 = RHO**(FOUR/THREE)
        X = SQRT(GRD)/RHO43
        U = (GAMMA*X*X)/(ONE+(GAMMA*X*X))
        DUDX = (TWO*GAMMA*X)/(ONE+(GAMMA*X*X))**TWO
        E = -U*U*RHO43
C
        OPTX = OPTX+E*FTOTWT*COPTX
C       NOTICE THAT THE FACTOR OF TWO DOES NOT APPEAR IN THE SPIN
C       UNRESTRICTED CASE
C
        DEDRHO = (FOUR/THREE)*RHO13*((E/RHO43)-(X*(-TWO*U*DUDX)))
        DEDGRD = (ONE/TWO)*(-TWO*U*DUDX)/SQRT(GRD)
        DUMB = DUMB+DEDRHO*COPTX
        DUMXB = DUMXB+(DEDGRD*GRADXB*COPTX*TWO)
        DUMYB = DUMYB+(DEDGRD*GRADYB*COPTX*TWO)
        DUMZB = DUMZB+(DEDGRD*GRADZB*COPTX*TWO)
      END IF
C
      END
C*MODULE DFTXCA  *DECK PBECF
      SUBROUTINE PBECF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
C
C     THE FOLLOWING IS THE BASIC SETUP FOR INTEGRATING A GGA TYPE
C     CORRELATION FUNCTIONAL FROM THE DFT REPOSITORY.
C
      IF(RHFGVB) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
         SIGMAAA1 = 4.0D+00*GRDAA
C
         CALL RKS_C_PBE(IDERIV,NPT,RHOA1,SIGMAAA1,ZK,VRHOA,
     *                  VSIGMAAA,V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2)
C
         WAA = VSIGMAAA
C
         VXCA1 = VXCA1 + VRHOA
         DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA)
         DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA)
         DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA)
C
         ECF = ECF   + ZK * FTOTWT
      END IF
C
      IF(UROHF) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = ROA
         SIGMAAA1 = GRDAA
         RHOB1    = ROB
         SIGMABB1 = GRDBB
         SIGMAAB1 = GRDAB
C
        CALL UKS_C_PBE
     & (IDERIV,NPT,RHOA1,RHOB1,SIGMAAA1,SIGMABB1,SIGMAAB1,
     &  ZK,VRHOA,VRHOB,VSIGMAAA,VSIGMABB,VSIGMAAB,
     &  V2RHOA2,V2RHOB2,V2RHOAB,
     &  V2RHOASIGMAAA,V2RHOASIGMAAB,V2RHOASIGMABB,
     &  V2RHOBSIGMABB,V2RHOBSIGMAAB,V2RHOBSIGMAAA,
     &  V2SIGMAAA2,V2SIGMAAAAB,V2SIGMAAABB,
     &  V2SIGMAAB2,V2SIGMAABBB,V2SIGMABB2)
C
              WAA = VSIGMAAA
              WBB = VSIGMABB
              WAB = VSIGMAAB
C
            VXCA1 = VXCA1 + VRHOA
            DUMAX = DUMAX + 2.0D+00*(WAA*GRADXA) + (WAB*GRADXB)*1.0D+00
            DUMAY = DUMAY + 2.0D+00*(WAA*GRADYA) + (WAB*GRADYB)*1.0D+00
            DUMAZ = DUMAZ + 2.0D+00*(WAA*GRADZA) + (WAB*GRADZB)*1.0D+00
C
            VXCB1 = VXCB1 + VRHOB
            DUMBX = DUMBX + 2.0D+00*(WBB*GRADXB) + (WAB*GRADXA)*1.0D+00
            DUMBY = DUMBY + 2.0D+00*(WBB*GRADYB) + (WAB*GRADYA)*1.0D+00
            DUMBZ = DUMBZ + 2.0D+00*(WBB*GRADZB) + (WAB*GRADZA)*1.0D+00
C
              ECF = ECF   + ZK * FTOTWT
C
      END IF
C
      RETURN
      END
C
C    REPOSITORY'S CODE NOT USED, IN FAVOR OF THE FIXED ORIGINAL ROUTINE
C
C---C*MODULE DFTXCA  *DECK PBEXF
C---      SUBROUTINE PBEXF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
C---     >                 GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
C---     >                 FTOTWT,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,
C---     >                 VXCB1,DUMBX,DUMBY,DUMBZ)
C---      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C---      LOGICAL UROHF, RHFGVB
C---      COMMON /CPBE0 / CPBEX
C---C
C---C     THE FOLLOWING IS THE BASIC SETUP FOR INTEGRATING A GGA TYPE
C---C     EXCHANGE FUNCTIONAL FROM THE DFT REPOSITORY.
C---C
C---      IF(RHFGVB) THEN
C---C
C---         IDERIV   = 1
C---         NPT      = 1
C---         RHOA1    = 2.0D+00*ROA
C---         SIGMAAA1 = 4.0D+00*GRDAA
C---C
C---        CALL RKS_X_PBE
C---     & (IDERIV,NPT,RHOA1,SIGMAAA1,
C---     &  ZK,VRHOA,VSIGMAAA,
C---     &  V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2)
C---C
C---              WAA = VSIGMAAA
C---C
C---            VXCA1 = VXCA1 + VRHOA * CPBEX
C---            DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA) * CPBEX
C---            DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA) * CPBEX
C---            DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA) * CPBEX
C---C
C---            XGRD = XGRD + ZK * FTOTWT * CPBEX
C---C
C---      END IF
C---C
C---      IF(UROHF) THEN
C---C
C---         IDERIV   = 1
C---         NPT      = 1
C---         RHOA1    = ROA
C---         SIGMAAA1 = GRDAA
C---         RHOB1    = ROB
C---         SIGMABB1 = GRDBB
C---C
C---        CALL UKS_X_PBE
C---     & (IDERIV,NPT,RHOA1,RHOB1,SIGMAAA1,SIGMABB1,
C---     &  ZK,VRHOA,VRHOB,VSIGMAAA,VSIGMABB,VSIGMAAB,
C---     &  V2RHOA2,V2RHOB2,V2RHOAB,
C---     &  V2RHOASIGMAAA,V2RHOASIGMAAB,V2RHOASIGMABB,
C---     &  V2RHOBSIGMABB,V2RHOBSIGMAAB,V2RHOBSIGMAAA,
C---     &  V2SIGMAAA2,V2SIGMAAAAB,V2SIGMAAABB,
C---     &  V2SIGMAAB2,V2SIGMAABBB,V2SIGMABB2)
C---C
C---              WAA = VSIGMAAA
C---              WBB = VSIGMABB
C---C
C---            VXCA1 = VXCA1 + VRHOA * CPBEX
C---            DUMAX = DUMAX + 2.0D+00*(WAA*GRADXA) * CPBEX
C---            DUMAY = DUMAY + 2.0D+00*(WAA*GRADYA) * CPBEX
C---            DUMAZ = DUMAZ + 2.0D+00*(WAA*GRADZA) * CPBEX
C---C
C---            VXCB1 = VXCB1 + VRHOB * CPBEX
C---            DUMBX = DUMBX + 2.0D+00*(WBB*GRADXB) * CPBEX
C---            DUMBY = DUMBY + 2.0D+00*(WBB*GRADYB) * CPBEX
C---            DUMBZ = DUMBZ + 2.0D+00*(WBB*GRADZB) * CPBEX
C---C
C---            XGRD = XGRD + ZK * FTOTWT * CPBEX
C---C
C---      END IF
C---C
C---      END
C
C   THIS ROUTINE IS KEPT BECAUSE IT HAS PARTS RELATING TO THE OP
C   CORRELATION FUNCTIONAL WHICH ARE LOST IF USING THE REPOSITORY CODE.
C   NOTE THAT THIS HAS HAD A CONSTANT CHANGED (CMU) TO FIX SOME
C   SMALL NUMERICAL DISCREPANCIES FOUND IN THE ORIGINAL CODE.
C
C*MODULE DFTXCA  *DECK PBEXFOP
      SUBROUTINE PBEXFOP(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >                   GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                   FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >                   XALF,B88X,DUMA,DUMXA,DUMYA,DUMZA,
     >                   DUMB,DUMXB,DUMYB,DUMZB)
C******************************************************************
C
C     PERDEW-BURKE-ERNZERHOF (PBE) EXCHANGE FUNCTIONAL
C
C     J. P. PERDEW , K. BURKE AND M. ERNZERHOF
C     PHYS. REV. LET. 77,3865 (1996)
C
C     -----
C     INPUT
C     -----
C
C     ROA,B   .... SPINDENSITIES
C     GRAD**  .... DENSITY GRADIENTS
C     FTOTWT  .... VOLUME OF THIS GRID
C
C     ------
C     OUTPUT
C     ------
C
C     XALF    ....  EXCHANGE ENERGY OF LDA PART
C     B88X    ....  EXCHANGE ENERGY OF GGA PART
C     DUM***  ....  FIRST DERIVATIVES OF THE EXCHANGE FUNCTINALS
C     SIGKA,B ....  EXC=-1/2*INT(SIGK*RHO^(4/3))
C     DKDXA,B ....  DSIGK/DX
C
C******************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00)
      COMMON /CPBE0 / CPBEX
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
C******************************************************************
       X1 = (3.0D+00/PI)**(ONE/3.0D+00)
       X2 = (3.0D+00*PI*PI)**(ONE/3.0D+00)
       TWO13 = TWO**(ONE/3.0D+00)
       FACE  =-0.75D+00*X1*TWO13
       FACP  = 4.0D+00/3.0D+00
       CMU   = 0.2195149727645171D+00
       IF (RHFGVB) THEN
         RHO=ROA
         GRD=GRDAA
         RHO13=RHO**(ONE/3.0D+00)
         RHOE =RHO13**4
         DRHO =SQRT(GRD)
         X    =DRHO/RHOE
         S    =X/TWO/TWO13/X2
         Q    =ONE+CMU*S*S/0.804D+00
         G    =FACE*0.804D+00*(ONE-ONE/Q)
         H    =FACE*TWO*CMU*S/Q**2
         R    =FACP*RHO13
         E    =FACE
         XCL  =E*RHOE
         XCNL =G*RHOE
         XALF =XALF +CB88*XCL *TWO*FTOTWT*CPBEX
         B88X =B88X +CB88*XCNL*TWO*FTOTWT*CPBEX
         U    =CB88*R*(E+G-S*H)
         DUMA =DUMA+U*CPBEX
         W    =CB88*0.5D+00*H/TWO/TWO13/X2/SQRT(GRD)
         DUMXA=DUMXA+TWO*W*GRADXA*CPBEX
         DUMYA=DUMYA+TWO*W*GRADYA*CPBEX
         DUMZA=DUMZA+TWO*W*GRADZA*CPBEX
C     ----- FOR OP CORRELATION -----
         SIGKA= -(FACE+G)*TWO
         DKDXA= -H/TWO13/X2
C     -----------------------------
C******************************************************************
C      OPEN SHELL CALCULATION
C******************************************************************
       ELSE IF (UROHF) THEN
         RHO13A=ROA**(ONE/3.0D+00)
         RHOEA =RHO13A**4
         SA    =SQRT(GRDAA)/RHOEA/TWO/TWO13/X2
         QA    =ONE+CMU*SA*SA/0.804D+00
         GA    =FACE*0.804D+00*(ONE-ONE/QA)
         HA    =FACE*TWO*CMU*SA/QA**2
         RA    =FACP*RHO13A
         EA    =FACE
         UA    =CSLT*RA*(EA+GA-SA*HA)
         DUMA  =DUMA+UA*CPBEX
         WA    =CB88*0.5D+00*HA/TWO/TWO13/X2/SQRT(GRDAA)
         DUMXA =DUMXA+TWO*WA*GRADXA*CPBEX
         DUMYA =DUMYA+TWO*WA*GRADYA*CPBEX
         DUMZA =DUMZA+TWO*WA*GRADZA*CPBEX
         RHO13B=ROB**(ONE/3.0D+00)
         RHOEB =RHO13B**4
         EB    =FACE
         IF(ROB.LT.1.0D-15) THEN
           GB  = ZERO
           GOTO 9999
         ENDIF
         SB    =SQRT(GRDBB)/RHOEB/TWO/TWO13/X2
         QB    =ONE+CMU*SB*SB/0.804D+00
         GB    =FACE*0.804D+00*(ONE-ONE/QB)
         HB    =FACE*TWO*CMU*SB/QB**2
         RB    =FACP*RHO13B
         UB    =CSLT*RB*(EB+GB-SB*HB)
         DUMB  =DUMB+UB*CPBEX
         WB    =CB88*0.5D+00*HB/TWO/TWO13/X2/SQRT(GRDBB)
         DUMXB =DUMXB+TWO*WB*GRADXB*CPBEX
         DUMYB =DUMYB+TWO*WB*GRADYB*CPBEX
         DUMZB =DUMZB+TWO*WB*GRADZB*CPBEX
 9999    CONTINUE
         XCL   =EA*RHOEA+EB*RHOEB
         XCNL  =GA*RHOEA+GB*RHOEB
         XALF  =XALF  +CSLT*XCL *FTOTWT*CPBEX
         B88X  =B88X  +CB88*XCNL*FTOTWT*CPBEX
C      ----- FOR OP CORRELATION -----
         SIGKA= -(FACE+GA)*TWO
         SIGKB= -(FACE+GB)*TWO
         DKDXA= -HA/TWO13/X2
         DKDXB= -HB/TWO13/X2
C     -------------------------------
       ENDIF
C*******************************************************************
      RETURN
      END
C
C*MODULE DFTXCA  *DECK PFREE
      SUBROUTINE PFREE(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >                 GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                 FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >                 XALF,PFX,DUMA,DUMXA,DUMYA,DUMZA,
     >                 DUMB,DUMXB,DUMYB,DUMZB)
C
C***********************************************************************
C
C     PARAMETER-FREE EXCHANGE FUNCTIONAL
C
C     T. TSUNEDA AND K. HIRAO
C     PHYS. REV. B IN PRESS (2000)
C
C     -----
C     INPUT
C     -----
C
C     ROA,B   .... SPIN DENSITIES
C     GRAD**  .... DENSITY GRADIENTS
C     TOTWT   .... VOLUME OF THIS GRID
C
C     ------
C     OUTPUT
C     ------
C
C     PFX    ....  EXCHANGE ENERGY OF GGA PART
C     DUM***  ....  FIRST DERIVATIVES OF THE EXCHANGE FUNCTINALS
C     SIGKA,B ....  EXC=-1/2*INT(SIGK*RHO^(4/3))
C     DKDXA,B ....  DSIGK/DX
C
C***********************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,HALF=0.5D+00,
     >           ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
      LOGICAL UROHF, RHFGVB
C
C     ---- CALCULATE PHYSICAL CONSTANTS ----
C
      FACP  = 4.0D+00/3.0D+00
      X1    = (3.0D+00/PI)**(ONE/3.0D+00)
      FACE  = 1.5D+00*X1*(ONE/TWO )**(TWO/THREE)
      TAUS  =(THREE/5.0D+00)*(6.0D+00*PI*PI)**(TWO/THREE)
      COEF1 = 27.0D+00*PI/5.0D+00
      COEF2 = 7.0D+00/108.0D+00
C
C***********************************************************************
C      CLOSED SHELL CALCULATION
C***********************************************************************
      IF (RHFGVB) THEN
         RHO = ROA
         GRD = GRDAA
         RHO13 = RHO**(ONE/THREE)
         RHOE = RHO*RHO13
         X = SQRT(GRD)/RHOE
         X2 = X*X
C
C     ---- CALCULATE KINETIC DENSITY -----
C
         CALL KINETIC(X,X2,TAUS,TAU,DTADX)
C
C     ---- CALCULATE K-SIGMA AND IT'S DERIVATIVE -----
C
         SIGKA =-HALF*COEF1/TAU*(ONE+COEF2*X2/TAU)
         DKDXA = HALF*COEF1/TAU*(DTADX+TWO*COEF2*X*(X*DTADX/TAU-ONE))
     >        /TAU
C
         R    =FACP*RHO13
         XCNL =SIGKA*RHOE
         PFX  =PFX +CB88*TWO*XCNL*FTOTWT
         U    =CB88*R*(SIGKA-X*DKDXA)
         DUMA =DUMA+U
         W    =CB88*HALF*DKDXA/SQRT(GRD)
         DUMXA=DUMXA+TWO*W*GRADXA
         DUMYA=DUMYA+TWO*W*GRADYA
         DUMZA=DUMZA+TWO*W*GRADZA
         XALF =ZERO
C     ---- FOR OP CORRELATION ----
         IF (-SIGKA.LE.FACE) THEN
            SIGKA = -FACE
            DKDXA = ZERO
         ENDIF
         SIGKA=-SIGKA-SIGKA
         DKDXA=-DKDXA-DKDXA
C
C***********************************************************************
C     OPEN SHELL CALCULATION
C***********************************************************************
      ELSE IF (UROHF) THEN
         RHO13A = ROA**(ONE/THREE)
         RHOEA  = ROA*RHO13A
         XA     = SQRT(GRDAA)/RHOEA
         X2A    = XA*XA
C
C     ---- CALCULATE KINETIC DENSITY -----
C
         CALL KINETIC(XA,X2A,TAUS,TAUA,DTADXA)
C
C     ---- CALCULATE K-SIGMA AND IT'S DERIVATIVE -----
C
         SIGKA =-HALF*COEF1/TAUA*(ONE+COEF2*X2A/TAUA)
         DKDXA = HALF*COEF1/TAUA*(DTADXA+TWO*COEF2*XA
     >        *(XA*DTADXA/TAUA-ONE))/TAUA
C
         RA    = FACP*RHO13A
         UA    = CB88*RA*(SIGKA-XA*DKDXA)
         DUMA  = DUMA+UA
         WA    = CB88*HALF*DKDXA/SQRT(GRDAA)
         DUMXA = DUMXA+TWO*WA*GRADXA
         DUMYA = DUMYA+TWO*WA*GRADYA
         DUMZA = DUMZA+TWO*WA*GRADZA
C
C     ---- BETA CONTRIBUTION
C
         IF(ROB.LT.1.0D-15) THEN
            SIGKB=ZERO
           GOTO 9999
         ENDIF
C
         RHO13B = ROB**(ONE/THREE)
         RHOEB  = ROB*RHO13B
         XB     = SQRT(GRDBB)/RHOEB
         X2B    = XB*XB
C
C     ---- CALCULATE KINETIC DENSITY -----
C
         CALL KINETIC(XB,X2B,TAUS,TAUB,DTADXB)
C
C     ---- CALCULATE K-SIGMA AND IT'S DERIVATIVE -----
C
         SIGKB =-HALF*COEF1/TAUB*(ONE+COEF2*X2B/TAUB)
         DKDXB = HALF*COEF1/TAUB*(DTADXB+TWO*COEF2*XB
     >        *(XB*DTADXB/TAUB-ONE))/TAUB
C
         RB    = FACP*RHO13B
         UB    = CB88*RB*(SIGKB-XB*DKDXB)
         DUMB  = DUMB+UB
         WB    = CB88*HALF*DKDXB/SQRT(GRDBB)
         DUMXB = DUMXB+TWO*WB*GRADXB
         DUMYB = DUMYB+TWO*WB*GRADYB
         DUMZB = DUMZB+TWO*WB*GRADZB
 9999    CONTINUE
         XCNL  = SIGKA*RHOEA+SIGKB*RHOEB
         PFX   = PFX +CB88*XCNL*FTOTWT
         XALF =ZERO
C     ---- FOR OP CORRELATION ----
         IF (-SIGKA.LE.FACE) THEN
            SIGKA = -FACE
            DKDXA = ZERO
         ENDIF
         IF (-SIGKB.LE.FACE) THEN
            SIGKB = -FACE
            DKDXB = ZERO
         ENDIF
         SIGKA=-SIGKA-SIGKA
         DKDXA=-DKDXA-DKDXA
         SIGKB=-SIGKB-SIGKB
         DKDXB=-DKDXB-DKDXB
C
      END IF
      RETURN
      END
C
C*MODULE DFTXCA  *DECK PW91CF
      SUBROUTINE PW91CF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,GRDAB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      COMMON /CPW91 / CPW91C
C
C     THE PW91 CORRELATION FUNCTIONAL.
C
C     PLEASE NOTE, THE DFT REPOSITORY USED THE CONSTANTS
C       EPS-C(R,0)=0.031091     EPS-C(R,1)=0.015545     -AC=0.016887
C     WHEREAS OTHER PROGRAMS, NOTABLY NWCHEM, USE
C                  0.030090700             0.015545350      0.016886900
C     FOR THE REPRESENTATION OF THE ELECTRON-GAS CORRELATION
C     FUNCTIONAL INCLUDED IN THE TOTAL PW91 GGA.  THE CONSTANTS
C     USED HERE ARE ALL OF THE DIGITS APPEARING IN TABLE 1 OF
C     THE RELEVANT DEFINITION:
C         J.P.PERDEW, Y.WANG, PHYS.REV.B 45, 13244-13249(1992)
C
C     OF COURSE, THE SMALL DIFFERENCES IN THE CONSTANTS MAKE A SMALL
C     IMPACT ON THE ENERGIES OF MOLECULES.  FOR EXAMPLE, IN ETHANOL,
C     WHICH HAS THREE NON-HYDROGEN ATOMS, THERE IS A DIFFERENCE
C     BETWEEN THE TWO PROGRAMS OF ABOUT 5D-6 HARTREE, ONCE VERY
C     FINE GRIDS ARE USED, ALONG WITH GREAT CARE TO REMOVE ALL OTHER
C     DIFFERENCES (GEOMETRY, BASIS, ET CETERA).
C
C     IMPLEMENTING THE PUBLISHED FUNCTIONAL SHOULD USE ANY CONSTANTS,
C     EXACTLY AS PUBLISHED.
C
C     THE FOLLOWING IS THE BASIC SETUP FOR INTEGRATING A GGA TYPE
C     CORRELATION FUNCTIONAL FROM THE DFT REPOSITORY.
C
      IF(RHFGVB) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
         SIGMAAA1 = 4.0D+00*GRDAA
C
         CALL RKS_C_PW91(IDERIV,NPT,RHOA1,SIGMAAA1,ZK,VRHOA,
     *                   VSIGMAAA,V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2)
C
         WAA = VSIGMAAA
C
         VXCA1 = VXCA1 + VRHOA*CPW91C
         DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA)*CPW91C
         DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA)*CPW91C
         DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA)*CPW91C
C
         ECF = ECF   + ZK * FTOTWT*CPW91C
      END IF
C
      IF(UROHF) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = ROA
         SIGMAAA1 = GRDAA
         RHOB1    = ROB
         SIGMABB1 = GRDBB
         SIGMAAB1 = GRDAB
C
        CALL UKS_C_PW91
     & (IDERIV,NPT,RHOA1,RHOB1,SIGMAAA1,SIGMABB1,SIGMAAB1,
     &  ZK,VRHOA,VRHOB,VSIGMAAA,VSIGMABB,VSIGMAAB,
     &  V2RHOA2,V2RHOB2,V2RHOAB,
     &  V2RHOASIGMAAA,V2RHOASIGMAAB,V2RHOASIGMABB,
     &  V2RHOBSIGMABB,V2RHOBSIGMAAB,V2RHOBSIGMAAA,
     &  V2SIGMAAA2,V2SIGMAAAAB,V2SIGMAAABB,
     &  V2SIGMAAB2,V2SIGMAABBB,V2SIGMABB2)
C
              WAA = VSIGMAAA
              WBB = VSIGMABB
              WAB = VSIGMAAB
C
            VXCA1 = VXCA1+VRHOA*CPW91C
            DUMAX=DUMAX+( 2.0D+00*(WAA*GRADXA)+(WAB*GRADXB) )*CPW91C
            DUMAY=DUMAY+( 2.0D+00*(WAA*GRADYA)+(WAB*GRADYB) )*CPW91C
            DUMAZ=DUMAZ+( 2.0D+00*(WAA*GRADZA)+(WAB*GRADZB) )*CPW91C
C
            VXCB1 = VXCB1+VRHOB*CPW91C
            DUMBX=DUMBX+( 2.0D+00*(WBB*GRADXB)+(WAB*GRADXA) )*CPW91C
            DUMBY=DUMBY+( 2.0D+00*(WBB*GRADYB)+(WAB*GRADYA) )*CPW91C
            DUMBZ=DUMBZ+( 2.0D+00*(WBB*GRADZB)+(WAB*GRADZA) )*CPW91C
C
              ECF = ECF   + ZK * FTOTWT*CPW91C
C
      END IF
C
      RETURN
      END
C*MODULE DFTXCA  *DECK PW91LDACF
      SUBROUTINE PW91LDACF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,
     +                     EPW91LDA)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      COMMON /CPW91L/ CPW91LDA
C
C     THE FOLLOWING IS THE BASIC SETUP FOR INTEGRATING AN LDA TYPE
C     CORRELATION FUNCTIONAL FROM THE DFT REPOSITORY.
C
      IDERIV= 1
      NPT   = 1
C
      IF(RHFGVB)THEN
C
         RHOA1 = ROA + ROB
C
         CALL RKS_C_PW92(IDERIV,NPT,RHOA1,ZK,VRHOA,V2RHOA2)
C
         VXCA1     = VXCA1     +     VRHOA*CPW91LDA
         EPW91LDA  = EPW91LDA  + ZK*FTOTWT*CPW91LDA
C
      END IF
C
      IF(UROHF) THEN
C
         RHOA1 = ROA
         RHOB1 = ROB
C
         CALL UKS_C_PW92(IDERIV,NPT,RHOA1,RHOB1,ZK,
     &                   VRHOA,VRHOB,V2RHOA2,V2RHOB2,V2RHOAB)
C
         VXCA1     = VXCA1     +     VRHOA*CPW91LDA
         VXCB1     = VXCB1     +     VRHOB*CPW91LDA
         EPW91LDA  = EPW91LDA  + ZK*FTOTWT*CPW91LDA
C
      END IF
C
      RETURN
      END
C*MODULE DFTXCA  *DECK PW91XF
      SUBROUTINE PW91XF(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XPW91,VXCA1,DUMAX,DUMAY,DUMAZ,
     >        VXCB1,DUMBX,DUMBY,DUMBZ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      COMMON /CX3LYP/ CPW91
C
C     THE FOLLOWING IS THE BASIC SETUP FOR INTEGRATING A GGA TYPE
C     EXCHANGE FUNCTIONAL FROM THE DFT REPOSITORY.
C
      IF(RHFGVB) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
         SIGMAAA1 = 4.0D+00*GRDAA
C
         CALL RKS_X_PW91(IDERIV,NPT,RHOA1,SIGMAAA1,ZK,VRHOA,
     *                   VSIGMAAA,V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2)
C
         WAA = VSIGMAAA
C
         VXCA1 = VXCA1 + VRHOA * CPW91
         DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA) * CPW91
         DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA) * CPW91
         DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA) * CPW91
C
         XPW91 = XPW91 + ZK * FTOTWT * CPW91
      END IF
C
      IF(UROHF) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = ROA
         SIGMAAA1 = GRDAA
         RHOB1    = ROB
         SIGMABB1 = GRDBB
C
        CALL UKS_X_PW91
     & (IDERIV,NPT,RHOA1,RHOB1,SIGMAAA1,SIGMABB1,
     &  ZK,VRHOA,VRHOB,VSIGMAAA,VSIGMABB,VSIGMAAB,
     &  V2RHOA2,V2RHOB2,V2RHOAB,
     &  V2RHOASIGMAAA,V2RHOASIGMAAB,V2RHOASIGMABB,
     &  V2RHOBSIGMABB,V2RHOBSIGMAAB,V2RHOBSIGMAAA,
     &  V2SIGMAAA2,V2SIGMAAAAB,V2SIGMAAABB,
     &  V2SIGMAAB2,V2SIGMAABBB,V2SIGMABB2)
C
              WAA = VSIGMAAA
              WBB = VSIGMABB
C
            VXCA1 = VXCA1 + VRHOA * CPW91
            DUMAX = DUMAX + 2.0D+00*(WAA*GRADXA) * CPW91
            DUMAY = DUMAY + 2.0D+00*(WAA*GRADYA) * CPW91
            DUMAZ = DUMAZ + 2.0D+00*(WAA*GRADZA) * CPW91
C
            VXCB1 = VXCB1 + VRHOB * CPW91
            DUMBX = DUMBX + 2.0D+00*(WBB*GRADXB) * CPW91
            DUMBY = DUMBY + 2.0D+00*(WBB*GRADYB) * CPW91
            DUMBZ = DUMBZ + 2.0D+00*(WBB*GRADZB) * CPW91
C
            XPW91 = XPW91 + ZK * FTOTWT * CPW91
C
      END IF
C
      RETURN
      END
C*MODULE DFTXCA  *DECK PZ81CF
      SUBROUTINE PZ81CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,ECF,VXCA1,VXCB1)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
C
C        INTERFACED BY ROBERTO PEVERATI AND KIM BALDRIDGE, U.ZURICH
C
      IF(RHFGVB) THEN
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
C
         CALL RKS_C_PZ81(IDERIV,NPT,RHOA1,ZK,VRHOA,V2RHOA2)
C
         VXCA1 = VXCA1 + VRHOA
         ECF = ECF + ZK * FTOTWT
      END IF
C
      IF(UROHF) THEN
         IDERIV   = 1
         NPT      = 1
         RHOA1    = ROA
         RHOB1    = ROB
C
         CALL UKS_C_PZ81(IDERIV,NPT,RHOA1,RHOB1,ZK,VRHOA,VRHOB,
     *                   V2RHOA2,V2RHOB2,V2RHOAB)
C
         VXCA1 = VXCA1 + VRHOA
         VXCB1 = VXCB1 + VRHOB
         ECF = ECF + ZK * FTOTWT
      END IF
C
      RETURN
      END
C
C*MODULE DFTXCA  *DECK REVPBE
      SUBROUTINE REVPBE(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >                  GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >                  FTOTWT,SIGKA,SIGKB,DKDXA,DKDXB,
     >                  XALF,B88X,DUMA,DUMXA,DUMYA,DUMZA,
     >                  DUMB,DUMXB,DUMYB,DUMZB)
C******************************************************************
C
C     REVISED-PBE EXCHANGE FUNCTIONAL
C
C     Y. ZHANG, W. YANG
C     PHYS. REV. LET. 80,890 (1998)
C
C     CODED BY ROBERTO PEVERATI AND KIM BALDRIDGE, U.ZURICH
C     IMPLEMENTATION BASED ON THE OLD PBE ROUTINE, PBEXFOP
C
C     KEYWORDS FOR DFTTYP:
C     REVPBEX ... REVISED PBE EXCHANGE FUNCTIONAL
C     REVPBE  ... REVISED PBE EXCHANGE + PBE CORRELATION FUNCTIONAL
C
C     -----
C     INPUT
C     -----
C
C     ROA,B   .... SPINDENSITIES
C     GRAD**  .... DENSITY GRADIENTS
C     FTOTWT  .... VOLUME OF THIS GRID
C
C     ------
C     OUTPUT
C     ------
C
C     XALF    ....  EXCHANGE ENERGY OF LDA PART
C     B88X    ....  EXCHANGE ENERGY OF GGA PART
C     DUM***  ....  FIRST DERIVATIVES OF THE EXCHANGE FUNCTINALS
C     SIGKA,B ....  EXC=-1/2*INT(SIGK*RHO^(4/3))
C     DKDXA,B ....  DSIGK/DX
C
C******************************************************************
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00)
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
C******************************************************************
       X1 = (3.0D+00/PI)**(ONE/3.0D+00)
       X2 = (3.0D+00*PI*PI)**(ONE/3.0D+00)
       TWO13 = TWO**(ONE/3.0D+00)
       FACE  =-0.75D+00*X1*TWO13
       FACP  = 4.0D+00/3.0D+00
       CMU   = 0.2195149727645171D+00
       IF (RHFGVB) THEN
         RHO=ROA
         GRD=GRDAA
         RHO13=RHO**(ONE/3.0D+00)
         RHOE =RHO13**4
         DRHO =SQRT(GRD)
         X    =DRHO/RHOE
         S    =X/TWO/TWO13/X2
         Q    =ONE+CMU*S*S/1.245D+00
         G    =FACE*1.245D+00*(ONE-ONE/Q)
         H    =FACE*TWO*CMU*S/Q**2
         R    =FACP*RHO13
         E    =FACE
         XCL  =E*RHOE
         XCNL =G*RHOE
         XALF =XALF +CB88*XCL *TWO*FTOTWT
         B88X =B88X +CB88*XCNL*TWO*FTOTWT
         U    =CB88*R*(E+G-S*H)
         DUMA =DUMA+U
         W    =CB88*0.5D+00*H/TWO/TWO13/X2/SQRT(GRD)
         DUMXA=DUMXA+TWO*W*GRADXA
         DUMYA=DUMYA+TWO*W*GRADYA
         DUMZA=DUMZA+TWO*W*GRADZA
C     ----- FOR OP CORRELATION -----
         SIGKA= -(FACE+G)*TWO
         DKDXA= -H/TWO13/X2
C     -----------------------------
C******************************************************************
C      OPEN SHELL CALCULATION
C******************************************************************
       ELSE IF (UROHF) THEN
         RHO13A=ROA**(ONE/3.0D+00)
         RHOEA =RHO13A**4
         SA    =SQRT(GRDAA)/RHOEA/TWO/TWO13/X2
         QA    =ONE+CMU*SA*SA/1.245D+00
         GA    =FACE*1.245D+00*(ONE-ONE/QA)
         HA    =FACE*TWO*CMU*SA/QA**2
         RA    =FACP*RHO13A
         EA    =FACE
         UA    =CSLT*RA*(EA+GA-SA*HA)
         DUMA  =DUMA+UA
         WA    =CB88*0.5D+00*HA/TWO/TWO13/X2/SQRT(GRDAA)
         DUMXA =DUMXA+TWO*WA*GRADXA
         DUMYA =DUMYA+TWO*WA*GRADYA
         DUMZA =DUMZA+TWO*WA*GRADZA
         RHO13B=ROB**(ONE/3.0D+00)
         RHOEB =RHO13B**4
         EB    =FACE
         IF(ROB.LT.1.0D-15) THEN
           GB  = ZERO
           GOTO 9999
         ENDIF
         SB    =SQRT(GRDBB)/RHOEB/TWO/TWO13/X2
         QB    =ONE+CMU*SB*SB/1.245D+00
         GB    =FACE*1.245D+00*(ONE-ONE/QB)
         HB    =FACE*TWO*CMU*SB/QB**2
         RB    =FACP*RHO13B
         UB    =CSLT*RB*(EB+GB-SB*HB)
         DUMB  =DUMB+UB
         WB    =CB88*0.5D+00*HB/TWO/TWO13/X2/SQRT(GRDBB)
         DUMXB =DUMXB+TWO*WB*GRADXB
         DUMYB =DUMYB+TWO*WB*GRADYB
         DUMZB =DUMZB+TWO*WB*GRADZB
 9999    CONTINUE
         XCL   =EA*RHOEA+EB*RHOEB
         XCNL  =GA*RHOEA+GB*RHOEB
         XALF  =XALF  +CSLT*XCL *FTOTWT
         B88X  =B88X  +CB88*XCNL*FTOTWT
C      ----- FOR OP CORRELATION -----
         SIGKA= -(FACE+GA)*TWO
         SIGKB= -(FACE+GB)*TWO
         DKDXA= -HA/TWO13/X2
         DKDXB= -HB/TWO13/X2
C     -------------------------------
       ENDIF
C*******************************************************************
      RETURN
      END
C
C*MODULE DFTXCA  *DECK VWN1CF
      SUBROUTINE VWN1CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,EVWN)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF, RHFGVB
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
C
C     THE FOLLOWING IS THE BASIC SETUP FOR INTEGRATING AN LDA TYPE
C     CORRELATION FUNCTIONAL FROM THE DFT REPOSITORY.
C
      IDERIV= 1
      NPT   = 1
C
      IF(RHFGVB)THEN
         RHOA1 = 2.0D+00*ROA
         CALL RKS_C_VWN1RPA(IDERIV,NPT,RHOA1,ZK,VRHOA,V2RHOA2)
         VXCA1 = VXCA1 +     VRHOA*CVWN
         EVWN  = EVWN  + ZK*FTOTWT*CVWN
      END IF
C
      IF(UROHF) THEN
         RHOA1 = ROA
         RHOB1 = ROB
         CALL UKS_C_VWN1RPA(IDERIV,NPT,RHOA1,RHOB1,ZK,
     &                      VRHOA,VRHOB,V2RHOA2,V2RHOB2,V2RHOAB)
         VXCA1 = VXCA1 +     VRHOA*CVWN
         VXCB1 = VXCB1 +     VRHOB*CVWN
         EVWN  = EVWN  + ZK*FTOTWT*CVWN
      END IF
C
      RETURN
      END
C*MODULE DFTXCA  *DECK VWN5CF
      SUBROUTINE VWN5CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA,VXCB,EVWN)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL UROHF, RHFGVB
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00,
     *           FOUR=4.0D+00, SIX=6.0D+00, EIGHT=8.0D+00,
     *           ANINE=9.0D+00)
      PARAMETER (THIRD=ONE/THREE, FRTHRD=FOUR/THREE, SIXTH=ONE/SIX)
C                FACR = (THREE/(FOUR*PI))**SIXTH
C                FACH = FOUR/((TWO**THIRD-ONE)*ANINE)
      PARAMETER (FACR = 0.78762331789974325053D+00)
      PARAMETER (FACH = 1.70992093416136561756D+00)
      PARAMETER (FACG = ANINE/EIGHT)
      PARAMETER (FACDG= THREE/TWO)
C
C        THE A,B,C,X0 PARAMETERS OF THE FIT ARE AS FOLLOWS.
C        P,F,A MEAN PARAMAGNETIC, FERROMAGNETIC, AND STIFFNESS TERMS.
C        NOTE UNITS OF THE -A- CONSTANTS ARE RYDBERGS, SO DIVIDE BY 2.
C
      PARAMETER (VWNAP= 0.0621814D+00/TWO, VWNBP= 3.7274400D+00,
     *           VWNCP=12.9352000D+00, VWNX0P=-0.1049800D+00)
      PARAMETER (VWNAF= VWNAP/TWO, VWNBF= 7.0604200D+00,
     *           VWNCF=18.0578000D+00, VWNX0F=-0.3250000D+00)
      PARAMETER (VWNAA=-0.03377372D+00/TWO, VWNBA= 1.1310700D+00,
     *           VWNCA=13.0045000D+00, VWNX0A=-0.0047584D+00)
C
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
C
C     VWN CORRELATION FUNCTIONAL - FORMULA V
C     S.H.VOSKO, L.WILK, M.NUSAIR  CAN.J.PHYS. 58, 1200-11(1980)
C     THE NECESSARY FORMULAE ARE CLEARLY SPELLED OUT IN THE APPENDIX OF
C     B.G.JOHNSON, P.M.W.GILL, J.A.POPLE  J.CHEM.PHYS. 98, 5612-26(1993)
C     THE PARAMETERS APPEARING ABOVE CAN BE FOUND IN THE MOLPRO MANUAL,
C     ALTHOUGH A FEW ARE VISIBLE IN THE VWN PAPER ITSELF.
C
C     ON ENTRY,
C     ROA,B   .... SPIN DENSITIES
C     FTOTWT  .... VOLUME OF THIS GRID POINT
C
C     ON EXIT,
C     EVWN    .... CORRELATION ENERGY OF VWN5
C     VXCA,B  .... FIRST DERIVATIVES OF THE CORRELATION FUNCTIONAL
C
      IF (RHFGVB) THEN
        FACVWN = CVWN
        RHOA =ROA
        RHOB =ROB
        RHOT =RHOA+RHOB
        RHO16=RHOT**SIXTH
C
        Q    = SQRT(FOUR*VWNCP-VWNBP*VWNBP)
        XX0  = VWNX0P*VWNX0P+VWNX0P*VWNBP+VWNCP
        COEF1= VWNAP
        COEF2=-VWNAP*VWNBP*VWNX0P/XX0
        COEF3= VWNAP*(TWO*VWNBP/Q)*((VWNCP-VWNX0P*VWNX0P)/XX0)
C
        X    =FACR/RHO16
        XX   =X*X+X*VWNBP+VWNCP
        T1   =LOG(X*X/XX)
        T2   =LOG((X-VWNX0P)*(X-VWNX0P)/XX)
        T3   =ATAN(Q/(TWO*X+VWNBP))
        EPSC =COEF1*T1+COEF2*T2+COEF3*T3
        EVWN =EVWN+FACVWN*EPSC*RHOT*FTOTWT
C
        DEPSC= VWNAP*(ONE/X-(X/XX)*(ONE+VWNBP/(X-VWNX0P)))
        DUMA = (EPSC-X*DEPSC/THREE)
        DUMB = ZERO
        VXCA = VXCA + FACVWN*DUMA
        VXCB = VXCB + DUMB
      END IF
C
      IF (UROHF) THEN
        FACVWN=CVWN
        RHOA  =ROA
        RHOB  =ROB
        RHOT  =RHOA+RHOB
        RHO16 =RHOT**SIXTH
C
        QP    = SQRT(FOUR*VWNCP-VWNBP*VWNBP)
        QF    = SQRT(FOUR*VWNCF-VWNBF*VWNBF)
        QA    = SQRT(FOUR*VWNCA-VWNBA*VWNBA)
        XX0P  = VWNX0P*VWNX0P+VWNX0P*VWNBP+VWNCP
        XX0F  = VWNX0F*VWNX0F+VWNX0F*VWNBF+VWNCF
        XX0A  = VWNX0A*VWNX0A+VWNX0A*VWNBA+VWNCA
C
C          THE THREE POTENTIALS
C
        COEF1P= VWNAP
        COEF1F= VWNAF
        COEF1A= VWNAA
        COEF2P=-VWNAP*VWNBP*VWNX0P/XX0P
        COEF2F=-VWNAF*VWNBF*VWNX0F/XX0F
        COEF2A=-VWNAA*VWNBA*VWNX0A/XX0A
        COEF3P= VWNAP*(TWO*VWNBP/QP)*((VWNCP-VWNX0P*VWNX0P)/XX0P)
        COEF3F= VWNAF*(TWO*VWNBF/QF)*((VWNCF-VWNX0F*VWNX0F)/XX0F)
        COEF3A= VWNAA*(TWO*VWNBA/QA)*((VWNCA-VWNX0A*VWNX0A)/XX0A)
C
        X     =FACR/RHO16
        XXP   =X*X+X*VWNBP+VWNCP
        XXF   =X*X+X*VWNBF+VWNCF
        XXA   =X*X+X*VWNBA+VWNCA
        T1P   =LOG(X*X/XXP)
        T1F   =LOG(X*X/XXF)
        T1A   =LOG(X*X/XXA)
        T2P   =LOG((X-VWNX0P)*(X-VWNX0P)/XXP)
        T2F   =LOG((X-VWNX0F)*(X-VWNX0F)/XXF)
        T2A   =LOG((X-VWNX0A)*(X-VWNX0A)/XXA)
        T3P   =ATAN(QP/(TWO*X+VWNBP))
        T3F   =ATAN(QF/(TWO*X+VWNBF))
        T3A   =ATAN(QA/(TWO*X+VWNBA))
C
        EPSCP =COEF1P*T1P+COEF2P*T2P+COEF3P*T3P
        EPSCF =COEF1F*T1F+COEF2F*T2F+COEF3F*T3F
        EPSCA =COEF1A*T1A+COEF2A*T2A+COEF3A*T3A
C
C          DERIVATIVE OF THE THREE POTENTIALS
C
        XBP    = TWO*X+VWNBP
        XBF    = TWO*X+VWNBF
        XBA    = TWO*X+VWNBA
        XBQ2P  = XBP*XBP + QP*QP
        XBQ2F  = XBF*XBF + QF*QF
        XBQ2A  = XBA*XBA + QA*QA
        BRACKP = TWO/(X-VWNX0P) -XBP/XXP -FOUR*(TWO*VWNX0P+VWNBP)/XBQ2P
        BRACKF = TWO/(X-VWNX0F) -XBF/XXF -FOUR*(TWO*VWNX0F+VWNBF)/XBQ2F
        BRACKA = TWO/(X-VWNX0A) -XBA/XXA -FOUR*(TWO*VWNX0A+VWNBA)/XBQ2A
        CURLYP = TWO/X - XBP/XXP - FOUR*VWNBP/XBQ2P
        CURLYF = TWO/X - XBF/XXF - FOUR*VWNBF/XBQ2F
        CURLYA = TWO/X - XBA/XXA - FOUR*VWNBA/XBQ2A
        DEPSCP = VWNAP*(CURLYP - VWNBP*VWNX0P*BRACKP/XX0P)
        DEPSCF = VWNAF*(CURLYF - VWNBF*VWNX0F*BRACKF/XX0F)
        DEPSCA = VWNAA*(CURLYA - VWNBA*VWNX0A*BRACKA/XX0A)
C
C          SOME AUXILIARY COMBINATIONS
C
        HX  = FACH*(EPSCF-EPSCP)/EPSCA - ONE
        DHX = FACH*(DEPSCF-DEPSCP-(EPSCF-EPSCP)*DEPSCA/EPSCA)/EPSCA
C
        ZETA  = (RHOA-RHOB)/RHOT
        ZETA2 = ZETA *ZETA
        ZETA3 = ZETA2*ZETA
        ZETA4 = ZETA2*ZETA2
        GZETA = ((ONE+ZETA)**FRTHRD+(ONE-ZETA)**FRTHRD-TWO)*FACG
        DGZETA= ((ONE+ZETA)**THIRD -(ONE-ZETA)**THIRD     )*FACDG
C
C          TOTAL POTENTIAL, AND CONTRIBUTION TO ENERGY
C
        POT   = EPSCP + EPSCA*GZETA*(ONE+HX*ZETA4)
        EVWN  = EVWN + FACVWN*POT*RHOT*FTOTWT
C
C          CONTRIBUTION TO FUNCTIONAL DERIVATIVE
C
        DPOT1 = -(X/SIX)*(DEPSCP + DEPSCA*GZETA*(ONE+HX*ZETA4)
     *                           +  EPSCA*GZETA*DHX*ZETA4)
        DPOT2 = EPSCA*(DGZETA*(ONE+HX*ZETA4) + FOUR*GZETA*HX*ZETA3)
        DUMA  = POT + (DPOT1 + DPOT2*(ONE-ZETA))
        DUMB  = POT + (DPOT1 - DPOT2*(ONE+ZETA))
C
        VXCA  = VXCA + FACVWN*DUMA
        VXCB  = VXCB + FACVWN*DUMB
      ENDIF
C
      RETURN
      END
C*MODULE DFTXCA  *DECK B97X
      SUBROUTINE B97X(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,XGRD,VXCA1,DUMAX,DUMAY,DUMAZ,DMXCA,
     >        VXCB1,DUMBX,DUMBY,DUMBZ,DMXCB,
     >        TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL CAMFLAG
      LOGICAL NEEDTAU,PRTTAU
      LOGICAL UROHF, RHFGVB
C
      COMMON /B97TYP/ B97TYP
      COMMON /DFTCAM/ ALPHAC,BETAC,CAMMU,CAMVWN,CAMLYP,CAMFLAG
      COMMON /METGGA/ NEEDTAU,PRTTAU
C
      PARAMETER (ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00)
      PARAMETER (F23=2.0D0/3.D0)
      PARAMETER (F43 = 4.0D+00/3.0D+00,F53=5.0D+00/3.0D+00)
      PARAMETER (PI=3.1415926535897932384626433832795D+00)
C
      DOUBLE PRECISION TAUXA,TAUYA,TAUZA,TAUXB,TAUYB,TAUZB
      DOUBLE PRECISION RRHO, RHO43, RHO13, RHOO, RHO53
      DOUBLE PRECISION TAUUEG, TSIG, WSIG, W1, W2, W3, W4, W5
      DOUBLE PRECISION P32
      INTEGER B97TYP
C
C******************************************************************
C
C                       B97 FAMILY OF FUNCTIONALS
C
C     IMPLEMENTED BY ROBERTO PEVERATI AND KIM BALDRIDGE, U.ZURICH
C
C     THE NEXT TWO ARE THE NEW ROUTINES FOR GENERIC BECKE-97 (B97)
C     EXCHANGE/CORRELATION FUNCTIONALS (UP TO THE 4TH ORDER TERM
C     IN THE POLYNOMIAL SERIES - SEE THE ORIGINAL PAPER FOR MORE
C     ABOUT THIS).
C     THE ENTIRE B97/HCTH FAMILY OF FUNCTIONALS ARE NOW MANAGED
C     BY JUST THESE 2 SUBROUTINES.
C
C     THE B97 EXCHANGE IS MADE OF 3 PARTS:
C      THE LDA PART (SIMILAR TO THE LSDSLT SUBROUTINE - TO ALLOW THE
C                    IMPLEMENTATION OF THE LR OPTION FOR WB97)
C      THE GGA PART (XB97GGA IN DFTXCD, AUTOMATICALLY GENERATED BY
C                    A MODIFIED VERSION OF KNOWLES' DFAUTO PROGRAM
C                    - SEE COMP.PHYS.COMM. 136 (2001) 318 -)
C      THE TAU-DEPENDENT TERM FOR META-GGA
C
C     B97TYP MUST BE CHOSEN IN INPGDFT, AND THEN IS STORED IN THE
C     B97TYP COMMON GROUP. THE SAME NUMBER IS USED BY THE EXCHANGE
C     AND THE CORRELATION ROUTINES.
C     THE AVAILABLE PARAMETERIZATIONS ARE:
C
C     B97TYP       FUNCTIONAL
C     -- GGA FUNCTIONALS --
C       0............B97
C       1............B97-1
C       2............B97-2
C       3............B97-3
C       4............B97-D
C       5............B97-K
C       6............B98 (PARAMETRIZATION 2C)
C       7............HCTH/93
C       8............HCTH/120
C       9............HCTH/147
C      10............HCTH (HCTH/407)
C      11     ...    ADD NEW PARAMETERS
C
C     -- LONG RANGE CORRECTED LC-GGA FUNCTIONALS --
C      100............OMEGAB97
C      101............OMEGAB97X
C      102............OMEGAB97X-D
C      103............OMEGAB97X-2(TQZ)
C      104............OMEGAB97X-2(LP)
C      105    ...     ADD NEW PARAMETERS
C
C     -- META-GGA FUNCTIONALS --
C      200............TAUHCTH
C      201............TAUHCTHHYB
C      202............BMK
C      203    ...     ADD NEW PARAMETERS
C
C******************************************************************
C
C PARAMETERS FOR THE B97 EXCHANGE
C
C    B97
      IF(B97TYP.EQ.0) THEN
C
         B97CXS0  =  0.8094D+00
         B97CXS1  =  0.5073D+00
         B97CXS2  =  0.7481D+00
         B97CXS3  =  0D+00
         B97CXS4  =  0D+00
C       CX = 0.1943 DFTTYP(3)
C
C    B97-1
      ELSEIF(B97TYP.EQ.1) THEN
         B97CXS0  =  0.789518D+00
         B97CXS1  =  0.573805D+00
         B97CXS2  =  0.660975D+00
         B97CXS3  =  0D+00
         B97CXS4  =  0D+00
C       CX = 0.21 DFTTYP(3)
C
C    B97-2
      ELSEIF(B97TYP.EQ.2) THEN
         B97CXS0  =  0.827642D+00
         B97CXS1  =  0.047840D+00
         B97CXS2  =  1.76125D+00
         B97CXS3  =  0D+00
         B97CXS4  =  0D+00
C       CX = 0.21 DFTTYP(3)
C
C    B97-3
      ELSEIF(B97TYP.EQ.3) THEN
         B97CXS0  =  0.7334648D+00
         B97CXS1  =  0.2925270D+00
         B97CXS2  =  3.338789D+00
         B97CXS3  = -10.51158D+00
         B97CXS4  =  10.60907D+00
C       CX = 0.2692880 DFTTYP(3)
C
C    B97-D
      ELSEIF(B97TYP.EQ.4) THEN
         B97CXS0  =  1.08662D+00
         B97CXS1  = -0.52127D+00
         B97CXS2  =  3.25429D+00
         B97CXS3  =  0D+00
         B97CXS4  =  0D+00
C       CX = 0 DFTTYP(3)
C
C    B97-K
      ELSEIF(B97TYP.EQ.5) THEN
         B97CXS0  =  0.507863D+00
         B97CXS1  =  1.46873D+00
         B97CXS2  = -1.51301D+00
         B97CXS3  =  0D+00
         B97CXS4  =  0D+00
C       CX = 0.42 DFTTYP(3)
C
C    B98 (2C PARAMETRIZATION)
      ELSEIF(B97TYP.EQ.6) THEN
         B97CXS0  =  0.790194D+00
         B97CXS1  =  0.400271D+00
         B97CXS2  =  0.832857D+00
         B97CXS3  =  0D+00
         B97CXS4  =  0D+00
C       CX = 0.219847 DFTTYP(3)
C
C    HCTH/93
      ELSEIF(B97TYP.EQ.7) THEN
         B97CXS0  =  1.09320D+00
         B97CXS1  = -0.744056D+00
         B97CXS2  =  5.59920D+00
         B97CXS3  = -6.78549D+00
         B97CXS4  =  4.49357D+00
C       CX = 0 DFTTYP(3)
C
C    HCTH/120
      ELSEIF(B97TYP.EQ.8) THEN
         B97CXS0  =  1.09163D+00
         B97CXS1  = -0.7472D+00
         B97CXS2  =  5.0783D+00
         B97CXS3  = -4.1075D+00
         B97CXS4  =  1.1717D+00
C       CX = 0 DFTTYP(3)
C
C    HCTH/147
      ELSEIF(B97TYP.EQ.9) THEN
         B97CXS0  =  1.09025D+00
         B97CXS1  = -0.7992D+00
         B97CXS2  =  5.5721D+00
         B97CXS3  = -5.8676D+00
         B97CXS4  =  3.0454D+00
C       CX = 0 DFTTYP(3)
C
C    HCTH (HCTH/407)
      ELSEIF(B97TYP.EQ.10) THEN
         B97CXS0  =  1.08184D+00
         B97CXS1  = -0.5183D+00
         B97CXS2  =  3.4256D+00
         B97CXS3  = -2.6290D+00
         B97CXS4  =  2.2886D+00
C       CX = 0 DFTTYP(3)
C
C    OMEGAB97
      ELSEIF(B97TYP.EQ.100) THEN
         B97CXS0  =  1.0D+00
         B97CXS1  =  1.13116D+00
         B97CXS2  = -2.74915D+00
         B97CXS3  =  12.090D+00
         B97CXS4  = -5.71642D+00
C       CX = 0 DFTTYP(3)
C       W = 0.4 (MU)
C
C    OMEGAB97X
      ELSEIF(B97TYP.EQ.101) THEN
         B97CXS0  =  0.842294D+00
         B97CXS1  =  0.726479D+00
         B97CXS2  =  1.04760D+00
         B97CXS3  = -5.70635D+00
         B97CXS4  =  13.2794D+00
C       CX = 0.157706 DFTTYP(3)
C       W = 0.3 (MU)
C
C    OMEGAB97X-D
      ELSEIF(B97TYP.EQ.102) THEN
         B97CXS0  =  0.777964D+00
         B97CXS1  =  0.661160D+00
         B97CXS2  =  0.574541D+00
         B97CXS3  = -5.25671D+00
         B97CXS4  =  11.6386D+00
C       CX = 0.222036 DFTTYP(3)
C       W = 0.2 (MU)
C
C    OMEGAB97-2(TQZ)
      ELSEIF(B97TYP.EQ.103) THEN
         B97CXS0  =  0.315503D+00
         B97CXS1  =  1.04772D+00
         B97CXS2  = -2.33506D+00
         B97CXS3  =  3.19909D+00
         B97CXS4  =  0D+00
C       CX = 0.636158 DFTTYP(3)
C       W = 0.3 (MU)
C
C    OMEGAB97-2(LP)
      ELSEIF(B97TYP.EQ.104) THEN
         B97CXS0  =  0.251767D+00
         B97CXS1  =  1.57375D+00
         B97CXS2  = -5.26624D+00
         B97CXS3  =  6.74313D+00
         B97CXS4  =  0D+00
C       CX = 0.678792 DFTTYP(3)
C       W = 0.3 (MU)
C
C
C    TAUHCTH
      ELSEIF(B97TYP.EQ.200) THEN
         B97CXS0  =  1.10734D+00
         B97CXS1  = -1.0534D+00
         B97CXS2  =  6.3491D+00
         B97CXS3  = -2.5531D+00
         B97CXS4  =  0D+00
C
         B97CXS0NL =  0.00110D+00
         B97CXS1NL = -0.3041D+00
         B97CXS2NL =  6.9543D+00
         B97CXS3NL = -0.7235D+00
         B97CXS4NL =  0D+00
C       CX = 0 DFTTYP(3)
C
C    TAUHCTHHYB
      ELSEIF(B97TYP.EQ.201) THEN
         B97CXS0  =  0.86735D+00
         B97CXS1  =  0.3008D+00
         B97CXS2  =  1.2208D+00
         B97CXS3  =  0.1574D+00
         B97CXS4  =  0D+00
C
         B97CXS0NL = -0.00230D+00
         B97CXS1NL = -0.2849D+00
         B97CXS2NL =  5.4146D+00
         B97CXS3NL = -10.909D+00
         B97CXS4NL =  0D+00
C       CX = 0.15 DFTTYP(3)
C
C    BMK
      ELSEIF(B97TYP.EQ.202) THEN
         B97CXS0  = 0.474302D+00
         B97CXS1  = 2.77701D+00
         B97CXS2  = -11.4230D+00
         B97CXS3  = 11.7167D+00
         B97CXS4  = 0D+00
C
         B97CXS0NL  = -0.192212D+00
         B97CXS1NL  =  4.73936D+00
         B97CXS2NL  = -26.6188D+00
         B97CXS3NL  =  22.4891D+00
         B97CXS4NL  = 0D+00
C       CX = 0.42 DFTTYP(3)
C
      END IF
C
C SLATER LDA PART
C
      IF (RHFGVB) THEN
C       RHO AND ITS EXPONENTS
         RHO13 = ROA**(ONE/THREE)
         RHOE  = RHO13**4
C---     RHOM  = RHO13**(-2D0)
C       NUMERICAL FACTORS FOR EXC, 1ST DERIVATIVE, 2ND DERIVATIVE
         FACE  = -(THREE/4.0D+00)*(6.0D+00/PI)**(ONE/THREE)
         FACP  = -(6.0D+00/PI)**(ONE/THREE)
C---     FACM  = -(ONE/THREE)*(6.0D+00/PI)**(ONE/THREE)
C       EXC(LDA)=XALFA, DEXC/DRHO=PDUMA, D2EXC/DRHO2=PDUM2A
         XALFA = RHOE*FACE*TWO
         PDUMA = FACP*RHO13
C---     PDUM2A= RHOM*FACM
C
         IF (CAMFLAG) THEN
           CALL LRCLSDA(ROA,XALF,PDUMA)
           XALFA=XALF*TWO
         ENDIF
C
C END OF THE SLATER PART, NOW THE GGA
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
         SIGMAAA1 = 4.0D+00*GRDAA
C
C XB97GGA CALCULATES ONLY THE GGA PART. IT MUST TO BE COMBINED
C WITH LSDA TO OBAIN THE FINAL EX=EXLDA*EXGGA
C
         CALL XB97GGA(IDERIV,NPT,RHOA1,SIGMAAA1,ZK,VRHOA,
     *                   VSIGMAAA,V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2,
     *                   B97CXS0,B97CXS1,B97CXS2,B97CXS3,B97CXS4)
C
C END OF THE GGA PART, NOW THE TAU-DEPENDENCY (NON-LOCAL TERMS)
C
      IF (NEEDTAU) THEN
          RHOO  = RHOA1
          RHO43 = RHOO**F43
          RRHO  = 1D+00/RHOO
          RHO13 = RHO43*RRHO
          RHO53 = RHOO**F53
          P32 =(3.D+00*PI**2)**F23
C
          TAUN   = TAUXA + TAUYA + TAUZA
          TAUU   = TAUN
          TAUUEG = 0.3D+00*P32*RHO53
          TSIG   = TAUUEG/TAUU
C
          WSIG   =(TSIG-ONE)/(TSIG+ONE)
C
          W1     = WSIG
          W2     = WSIG*W1
          W3     = WSIG*W2
          W4     = WSIG*W3
          W5     = WSIG*W4
C
          FSIG   = WSIG - TWO*W3 + W5
C
          DFDW   = ONE-6.0D0*W2+5D0*W4
          DWDT   = TWO/((ONE + TSIG)**2D0)
          DTDR   = (0.5D+00*P32*RHO13*RHO13)/TAUU
          DTDTAU =-TAUUEG/TAUU**2D0
          DFDR   = DFDW*DWDT*DTDR
          DFDTAU = DFDW*DWDT*DTDTAU*0.5D0
C
          CALL XB97GGA
     &     (IDERIV,NPT,RHOA1,SIGMAAA1,
     &      ZKNL,VRHOANL,VSIGMAAANL,
     &      V2RHOA2NL,V2RHOASIGMAAANL,V2SIGMAAA2NL,
     &      B97CXS0NL,B97CXS1NL,B97CXS2NL,B97CXS3NL,B97CXS4NL)
C
       ELSE
          ZKNL = 0D0
          FSIG = 0D0
          VRHOANL = 0D0
          VSIGMAAANL = 0D0
          DFDTAU = 0D0
      END IF
C
C WE PUT EXLDA, EXGGA AND EXNL TOGETHER AND CALCULATE DERIVATIVES:
C EXC = EXLDA*EXGGA:
         ZZL =  XALFA * ZK          * FTOTWT
         ZZNL = XALFA * ZKNL * FSIG * FTOTWT
         XGRD = XGRD + ZZL + ZZNL
C
C AND NOW FIRST DERIVATIVES:
C DEXC/DRHO = 1/2EXLDA * DEXGGA/DRHO + EXGGA * DEXLDA/DRHO
         VVL  = (XALFA/TWO * VRHOA   + ZK   * PDUMA)
         VVNL = (XALFA/TWO * VRHOANL + ZKNL * PDUMA)
         VXCA1 = VXCA1+VVL+(VVNL*FSIG+XALFA*ZKNL*DFDR)
C
C DEXC/DG = EXLDA * DEXGGA/DG
         WAA = XALFA * VSIGMAAA + XALFA*VSIGMAAANL*FSIG
C
         DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA)
         DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA)
         DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA)
C
        DMXCA = DMXCA + XALFA * ZKNL * DFDTAU
C
C SECOND DERIVATIVES, IDERIV=2, ARE NEEDED ONLY FOR TDDFT AND ARE
C NOT CALCULATED HERE. THEY ARE OBTAINED WITH THE SAME PROCEDURE
C BY THE COMBINATION OF D2EXLSDA AND D2EXGGA
      END IF
C
      IF(UROHF) THEN
C
C  USE SPIN DENSITY FUNCTIONAL THEORY IE N-->2N
C                               EX=(1/2)EX[2*ALPHA] + (1/2)EX[2*BETA]
C - BETA -
C       RHO AND ITS EXPONENTS
         RHO13 = ROB**(ONE/THREE)
         RHOE  = RHO13**4
C---     RHOM  = RHO13**(-2D0)
C       NUMERICAL FACTORS FOR EXC, 1ST DERIVATIVE, 2ND DERIVATIVE
         FACE  = -(THREE/4.0D+00)*(6.0D+00/PI)**(ONE/THREE)
         FACP  = -(6.0D+00/PI)**(ONE/THREE)
C---     FACM  = -(ONE/THREE)*(6.0D+00/PI)**(ONE/THREE)
C       EXC(LDA)=XALFA, DEXC/DRHO=PDUMA, D2EXC/DRHO2=PDUM2A
         XALFA = RHOE*FACE*TWO
         PDUMA = FACP*RHO13
C---     PDUM2A= RHOM*FACM
C
         IF (CAMFLAG) THEN
           CALL LRCLSDA(ROB,XALF,PDUMA)
           XALFA=XALF*TWO
         ENDIF
C
C END OF THE SLATER PART, NOW THE GGA
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROB
         SIGMAAA1 = 4.0D+00*GRDBB
C
C XB97GGA CALCULATES ONLY THE GGA PART. IT HAVE TO BE COMBINED
C WITH LSDA TO OBAIN THE FINAL EX=EXLDA*EXGGA
C
         CALL XB97GGA(IDERIV,NPT,RHOA1,SIGMAAA1,ZK,VRHOA,
     *                   VSIGMAAA,V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2,
     *                   B97CXS0,B97CXS1,B97CXS2,B97CXS3,B97CXS4)
C
C END OF THE GGA PART, NOW THE TAU-DEPENDENCY (NON-LOCAL TERMS)
C
      IF (NEEDTAU) THEN
          RHOO  = RHOA1
          RHO43 = RHOO**F43
          RRHO  = 1D+00/RHOO
          RHO13 = RHO43*RRHO
          RHO53 = RHOO**F53
          P32 =(3.D+00*PI**2)**F23
C
          TAUN   = TAUXB + TAUYB + TAUZB
          TAUU   = TAUN
          TAUUEG = 0.3D+00*P32*RHO53
          TSIG   = TAUUEG/TAUU
C
          WSIG   =(TSIG-ONE)/(TSIG+ONE)
C
          W1     = WSIG
          W2     = WSIG*W1
          W3     = WSIG*W2
          W4     = WSIG*W3
          W5     = WSIG*W4
C
          FSIG   = WSIG - TWO*W3 + W5
C
          DFDW   = ONE-6.0D0*W2+5D0*W4
          DWDT   = TWO/((ONE + TSIG)**2D0)
          DTDR   = (0.5D+00*P32*RHO13*RHO13)/TAUU
          DTDTAU =-TAUUEG/TAUU**2D0
          DFDR   = DFDW*DWDT*DTDR
          DFDTAU = DFDW*DWDT*DTDTAU*0.5D0
C
          CALL XB97GGA
     &     (IDERIV,NPT,RHOA1,SIGMAAA1,
     &      ZKNL,VRHOANL,VSIGMAAANL,
     &      V2RHOA2NL,V2RHOASIGMAAANL,V2SIGMAAA2NL,
     &      B97CXS0NL,B97CXS1NL,B97CXS2NL,B97CXS3NL,B97CXS4NL)
C
       ELSE
          ZKNL = 0D0
          FSIG = 0D0
          VRHOANL = 0D0
          VSIGMAAANL = 0D0
          DFDTAU = 0D0
      END IF
C
C WE PUT EXLDA, EXGGA AND EXNL TOGETHER AND CALCULATE DERIVATIVES:
C EXC = EXLDA*EXGGA:
         ZZL =  XALFA * ZK          * FTOTWT *0.5D0
         ZZNL = XALFA * ZKNL * FSIG * FTOTWT *0.5D0
         XGRD = XGRD + ZZL + ZZNL
C
C AND NOW FIRST DERIVATIVES:
C DEXC/DRHO = 1/2EXLDA * DEXGGA/DRHO + EXGGA * DEXLDA/DRHO
         VVL  = (XALFA/TWO * VRHOA   + ZK   * PDUMA)
         VVNL = (XALFA/TWO * VRHOANL + ZKNL * PDUMA)
C
         VXCB1 = VXCB1+VVL+(VVNL*FSIG+XALFA*ZKNL*DFDR)
C
C DEXC/DG = EXLDA * DEXGGA/DG
         WBB = XALFA * VSIGMAAA + XALFA*VSIGMAAANL*FSIG
C
         DUMBX = DUMBX + 1.0D+00*(WBB*GRADXB)
         DUMBY = DUMBY + 1.0D+00*(WBB*GRADYB)
         DUMBZ = DUMBZ + 1.0D+00*(WBB*GRADZB)
C
        DMXCB = DMXCB + XALFA * ZKNL * DFDTAU
C
C - ALFA -
C       RHO AND ITS EXPONENTS
         RHO13 = ROA**(ONE/THREE)
         RHOE  = RHO13**4
C---     RHOM  = RHO13**(-2D0)
C       NUMERICAL FACTORS FOR EXC, 1ST DERIVATIVE, 2ND DERIVATIVE
         FACE  = -(THREE/4.0D+00)*(6.0D+00/PI)**(ONE/THREE)
         FACP  = -(6.0D+00/PI)**(ONE/THREE)
C---     FACM  = -(ONE/THREE)*(6.0D+00/PI)**(ONE/THREE)
C       EXC(LDA)=XALFA, DEXC/DRHO=PDUMA, D2EXC/DRHO2=PDUM2A
         XALFA = RHOE*FACE*TWO
         PDUMA = FACP*RHO13
C---     PDUM2A= RHOM*FACM
C
         IF (CAMFLAG) THEN
           CALL LRCLSDA(ROA,XALF,PDUMA)
           XALFA=XALF*TWO
         ENDIF
C
C END OF THE SLATER PART, NOW THE GGA
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
         SIGMAAA1 = 4.0D+00*GRDAA
C
C XB97GGA CALCULATES ONLY THE GGA PART. IT HAVE TO BE COMBINED
C WITH LSDA TO OBAIN THE FINAL EX=EXLDA*EXGGA
C
         CALL XB97GGA(IDERIV,NPT,RHOA1,SIGMAAA1,ZK,VRHOA,
     *                   VSIGMAAA,V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2,
     *                   B97CXS0,B97CXS1,B97CXS2,B97CXS3,B97CXS4)
C
C END OF THE GGA PART, NOW THE TAU-DEPENDENCY (NON-LOCAL TERMS)
C
      IF (NEEDTAU) THEN
          RHOO  = RHOA1
          RHO43 = RHOO**F43
          RRHO  = 1D+00/RHOO
          RHO13 = RHO43*RRHO
          RHO53 = RHOO**F53
          P32 =(3.D+00*PI**2)**F23
C
          TAUN   = TAUXA + TAUYA + TAUZA
          TAUU   = TAUN
          TAUUEG = 0.3D+00*P32*RHO53
          TSIG   = TAUUEG/TAUU
C
          WSIG   =(TSIG-ONE)/(TSIG+ONE)
C
          W1     = WSIG
          W2     = WSIG*W1
          W3     = WSIG*W2
          W4     = WSIG*W3
          W5     = WSIG*W4
C
          FSIG   = WSIG - TWO*W3 + W5
C
          DFDW   = ONE-6.0D0*W2+5D0*W4
          DWDT   = TWO/((ONE + TSIG)**2D0)
          DTDR   = (0.5D+00*P32*RHO13*RHO13)/TAUU
          DTDTAU =-TAUUEG/TAUU**2D0
          DFDR   = DFDW*DWDT*DTDR
          DFDTAU = DFDW*DWDT*DTDTAU*0.5D0
C
          CALL XB97GGA
     &     (IDERIV,NPT,RHOA1,SIGMAAA1,
     &      ZKNL,VRHOANL,VSIGMAAANL,
     &      V2RHOA2NL,V2RHOASIGMAAANL,V2SIGMAAA2NL,
     &      B97CXS0NL,B97CXS1NL,B97CXS2NL,B97CXS3NL,B97CXS4NL)
C
       ELSE
          ZKNL = 0D0
          FSIG = 0D0
          VRHOANL = 0D0
          VSIGMAAANL = 0D0
          DFDTAU = 0D0
      END IF
C
C WE PUT EXLDA, EXGGA AND EXNL TOGETHER AND CALCULATE DERIVATIVES:
C EXC = EXLDA*EXGGA:
         ZZL =  XALFA * ZK          * FTOTWT*0.5D0
         ZZNL = XALFA * ZKNL * FSIG * FTOTWT*0.5D0
         XGRD = XGRD + ZZL + ZZNL
C
C AND NOW FIRST DERIVATIVES:
C DEXC/DRHO = 1/2EXLDA * DEXGGA/DRHO + EXGGA * DEXLDA/DRHO
         VVL  = (XALFA/TWO * VRHOA   + ZK   * PDUMA)
         VVNL = (XALFA/TWO * VRHOANL + ZKNL * PDUMA)
C
         VXCA1 = VXCA1+VVL+(VVNL*FSIG+XALFA*ZKNL*DFDR)
C DEXC/DG = EXLDA * DEXGGA/DG
         WAA = XALFA * VSIGMAAA + XALFA*VSIGMAAANL*FSIG
C
         DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA)
         DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA)
         DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA)
C
        DMXCA = DMXCA + XALFA * ZKNL * DFDTAU
C
      END IF
      RETURN
      END
C
C*MODULE DFTXCA  *DECK B97C
      SUBROUTINE B97C(RHFGVB,UROHF,ROA,ROB,GRDAA,GRDBB,
     >        GRADXA,GRADYA,GRADZA,GRADXB,GRADYB,GRADZB,
     >        FTOTWT,ECF,
     >        VXCA1,DUMAX,DUMAY,DUMAZ,VXCB1,DUMBX,DUMBY,DUMBZ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /B97TYP/ B97TYP
      INTEGER B97TYP
C
      LOGICAL UROHF, RHFGVB
C
C     IMPLEMENTED BY ROBERTO PEVERATI AND KIM BALDRIDGE, U.ZURICH
C
C PARAMETERS FOR THE B97 CORRELATION
C
C    B97
      IF(B97TYP.EQ.0) THEN
         B97CCSS0  =  0.17370D+00
         B97CCSS1  =  2.3487D+00
         B97CCSS2  = -2.4868D+00
         B97CCSS3  =  0D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  0.9454D+00
         B97CCAB1  =  0.74710D+00
         B97CCAB2  = -4.5961D+00
         B97CCAB3  =  0D+00
         B97CCAB4  =  0D+00
C
C    B97-1
      ELSEIF(B97TYP.EQ.1) THEN
         B97CCSS0  =  0.0820011D+00
         B97CCSS1  =  2.71681D+00
         B97CCSS2  = -2.87103D+00
         B97CCSS3  =  0D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  0.955689D+00
         B97CCAB1  =  0.788552D+00
         B97CCAB2  = -5.47869D+00
         B97CCAB3  =  0D+00
         B97CCAB4  =  0D+00
C
C    B97-2
C
      ELSEIF(B97TYP.EQ.2) THEN
         B97CCSS0  =  0.585808D+00
         B97CCSS1  = -0.691682D+00
         B97CCSS2  =  0.394796D+00
         B97CCSS3  =  0D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  0.999849D+00
         B97CCAB1  =  1.40626D+00
         B97CCAB2  = -7.44060D+00
         B97CCAB3  =  0D+00
         B97CCAB4  =  0D+00
C
C    B97-3
      ELSEIF(B97TYP.EQ.3) THEN
         B97CCSS0  =  0.5623649D+00
         B97CCSS1  = -1.322980D+00
         B97CCSS2  =  6.359191D+00
         B97CCSS3  = -7.464002D+00
         B97CCSS4  =  1.827082D+00
C
         B97CCAB0  =  1.133830D+00
         B97CCAB1  = -2.811967D+00
         B97CCAB2  =  7.431302D+00
         B97CCAB3  = -1.969342D+00
         B97CCAB4  = -11.74423D+00
C
C    B97-D
C
      ELSEIF(B97TYP.EQ.4) THEN
         B97CCSS0  =  0.22340D+00
         B97CCSS1  = -1.56208D+00
         B97CCSS2  =  1.94293D+00
         B97CCSS3  =  0D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  0.69041D+00
         B97CCAB1  =  6.30270D+00
         B97CCAB2  = -14.9712D+00
         B97CCAB3  =  0D+00
         B97CCAB4  =  0D+00
C
C    B97-K
      ELSEIF(B97TYP.EQ.5) THEN
         B97CCSS0  =  0.12355D+00
         B97CCSS1  =  2.65399D+00
         B97CCSS2  = -3.20694D+00
         B97CCSS3  =  0D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  1.58613D+00
         B97CCAB1  = -6.20977D+00
         B97CCAB2  =  6.46106D+00
         B97CCAB3  =  0D+00
         B97CCAB4  =  0D+00
C
C    B98 (2C PAREMETRIZATION)
      ELSEIF(B97TYP.EQ.6) THEN
         B97CCSS0  = -0.120163D+00
         B97CCSS1  =  2.82332D+00
         B97CCSS2  = -2.59412D+00
         B97CCSS3  =  0D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  0.934715D+00
         B97CCAB1  =  1.14105D+00
         B97CCAB2  = -5.33398D+00
         B97CCAB3  =  0D+00
         B97CCAB4  =  0D+00
C
C    HCTH/93
      ELSEIF(B97TYP.EQ.7) THEN
         B97CCSS0  =  0.222601D+00
         B97CCSS1  = -0.0338622D+00
         B97CCSS2  = -0.0125170D+00
         B97CCSS3  = -0.802496D+00
         B97CCSS4  =  1.55396D+00
C
         B97CCAB0  =  0.729974D+00
         B97CCAB1  =  3.35287D+00
         B97CCAB2  = -11.5430D+00
         B97CCAB3  =  8.08564D+00
         B97CCAB4  = -4.47857D+00
C
C    HCTH/120
      ELSEIF(B97TYP.EQ.8) THEN
         B97CCSS0  =  0.48951D+00
         B97CCSS1  = -0.2607D+00
         B97CCSS2  =  0.4329D+00
         B97CCSS3  = -1.9925D+00
         B97CCSS4  =  2.4853D+00
C
         B97CCAB0  =  0.51473D+00
         B97CCAB1  =  6.9298D+00
         B97CCAB2  = -24.707D+00
         B97CCAB3  =  23.110D+00
         B97CCAB4  = -11.323D+00
C
C    HCTH/147
      ELSEIF(B97TYP.EQ.9) THEN
         B97CCSS0  =  0.56258D+00
         B97CCSS1  = -0.0171D+00
         B97CCSS2  = -1.3064D+00
         B97CCSS3  =  1.0575D+00
         B97CCSS4  =  0.8854D+00
C
         B97CCAB0  =  0.54235D+00
         B97CCAB1  =  7.0146D+00
         B97CCAB2  = -28.382D+00
         B97CCAB3  =  35.033D+00
         B97CCAB4  = -20.428D+00
C
C    HCTH/407
      ELSEIF(B97TYP.EQ.10) THEN
         B97CCSS0  =  1.18777D+00
         B97CCSS1  = -2.4029D+00
         B97CCSS2  =  5.6174D+00
         B97CCSS3  = -9.1792D+00
         B97CCSS4  =  6.2480D+00
C
         B97CCAB0  =  0.58908D+00
         B97CCAB1  =  4.4237D+00
         B97CCAB2  = -19.222D+00
         B97CCAB3  =  42.572D+00
         B97CCAB4  = -42.005D+00
C
C    OMEGAB97
      ELSEIF(B97TYP.EQ.100) THEN
         B97CCSS0  =  1D0
         B97CCSS1  = -2.55352D0
         B97CCSS2  =  11.8926D0
         B97CCSS3  = -26.9452D0
         B97CCSS4  =  17.0927D0
C
         B97CCAB0  =  1D0
         B97CCAB1  =  3.99051D0
         B97CCAB2  = -17.0066D0
         B97CCAB3  =  1.07292D0
         B97CCAB4  =  8.88211D0
C
C    OMEGAB97X
      ELSEIF(B97TYP.EQ.101) THEN
         B97CCSS0  =  1D+00
         B97CCSS1  = -4.33879D+00
         B97CCSS2  =  18.2308D+00
         B97CCSS3  = -31.7430D+00
         B97CCSS4  =  17.2901D+00
C
         B97CCAB0  =  1D+00
         B97CCAB1  =  2.37031D+00
         B97CCAB2  = -11.3995D+00
         B97CCAB3  =  6.58405D+00
         B97CCAB4  = -3.78132D+00
C
C    OMEGAB97X-D
      ELSEIF(B97TYP.EQ.102) THEN
         B97CCSS0  =  1D+00
         B97CCSS1  = -6.90539D+00
         B97CCSS2  =  31.3343D+00
         B97CCSS3  = -51.0533D+00
         B97CCSS4  =  26.4423D+00
C
         B97CCAB0  =  1D+00
         B97CCAB1  =  1.79413D+00
         B97CCAB2  = -12.0477D+00
         B97CCAB3  =  14.0847D+00
         B97CCAB4  = -8.50809D+00
C    OMEGAB97X-2(TQZ)
      ELSEIF(B97TYP.EQ.103) THEN
         B97CCSS0  =  0.908460D+00
         B97CCSS1  = -2.80936D+00
         B97CCSS2  =  6.02676D+00
         B97CCSS3  = -4.56981D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  0.518198D+00
         B97CCAB1  = -5.85956D+00
         B97CCAB2  =  4.27080D+00
         B97CCAB3  = -6.48897D+00
         B97CCAB4  =  0D+00
C    OMEGAB97X-2(LP)
      ELSEIF(B97TYP.EQ.104) THEN
         B97CCSS0  =  1.15698D+00
         B97CCSS1  = -3.31669D+00
         B97CCSS2  =  6.27265D+00
         B97CCSS3  = -4.51464D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  0.553261D+00
         B97CCAB1  = -1.16626D+00
         B97CCAB2  =  6.84409D+00
         B97CCAB3  = -8.90640D+00
         B97CCAB4  =  0D+00
C
C    TAUHCTH
      ELSEIF(B97TYP.EQ.200) THEN
         B97CCSS0  =  0.41385D+00
         B97CCSS1  = -0.9086D+00
         B97CCSS2  = -0.0549D+00
         B97CCSS3  =  1.7480D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  0.65262D+00
         B97CCAB1  =  6.3638D+00
         B97CCAB2  = -14.080D+00
         B97CCAB3  = -3.3755D+00
         B97CCAB4  =  0D+00
C
C    TAUHCTHHYB
      ELSEIF(B97TYP.EQ.201) THEN
         B97CCSS0  =  0.18600D+00
         B97CCSS1  =  3.9782D+00
         B97CCSS2  = -7.0694D+00
         B97CCSS3  =  3.4747D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  0.80490D+00
         B97CCAB1  =  3.8388D+00
         B97CCAB2  = -13.547D+00
         B97CCAB3  =  3.9133D+00
         B97CCAB4  =  0D+00
C
C    BMK
      ELSEIF(B97TYP.EQ.202) THEN
         B97CCSS0  = -2.19098D+00
         B97CCSS1  =  23.8939D+00
         B97CCSS2  = -44.3303D+00
         B97CCSS3  =  22.5982D+00
         B97CCSS4  =  0D+00
C
         B97CCAB0  =  1.22334D+00
         B97CCAB1  = -3.4631D+00
         B97CCAB2  =  10.0731D+00
         B97CCAB3  = -11.1974D+00
         B97CCAB4  =  0D+00
      END IF
C
      IF(RHFGVB) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = 2.0D+00*ROA
         SIGMAAA1 = 4.0D+00*GRDAA
C
         CALL RKS_CB97GGA(IDERIV,NPT,RHOA1,SIGMAAA1,ZK,VRHOA,VSIGMAAA,
     &                  V2RHOA2,V2RHOASIGMAAA,V2SIGMAAA2,
     &                  B97CCAB0,B97CCAB1,B97CCAB2,B97CCAB3,B97CCAB4,
     &                  B97CCSS0,B97CCSS1,B97CCSS2,B97CCSS3,B97CCSS4)
C
C
         WAA = VSIGMAAA
C
         VXCA1 = VXCA1 + VRHOA
         DUMAX = DUMAX + 1.0D+00*(WAA*GRADXA)
         DUMAY = DUMAY + 1.0D+00*(WAA*GRADYA)
         DUMAZ = DUMAZ + 1.0D+00*(WAA*GRADZA)
C
         ECF = ECF   + ZK * FTOTWT
C
C
C
      END IF
C
      IF(UROHF) THEN
C
         IDERIV   = 1
         NPT      = 1
         RHOA1    = ROA
         SIGMAAA1 = GRDAA
         RHOB1    = ROB
         SIGMABB1 = GRDBB
C
        CALL UKS_CB97GGA(IDERIV,NPT,RHOA1,RHOB1,SIGMAAA1,SIGMABB1,
     &  ZK,VRHOA,VRHOB,VSIGMAAA,VSIGMABB,VSIGMAAB,
     &  V2RHOA2,V2RHOB2,V2RHOAB,
     &  V2RHOASIGMAAA,V2RHOASIGMAAB,V2RHOASIGMABB,
     &  V2RHOBSIGMABB,V2RHOBSIGMAAB,V2RHOBSIGMAAA,
     &  V2SIGMAAA2,V2SIGMAAAAB,V2SIGMAAABB,
     &  V2SIGMAAB2,V2SIGMAABBB,V2SIGMABB2,
     &  B97CCAB0,B97CCAB1,B97CCAB2,B97CCAB3,B97CCAB4,
     &  B97CCSS0,B97CCSS1,B97CCSS2,B97CCSS3,B97CCSS4)
C
C
         WAA = VSIGMAAA
         WBB = VSIGMABB
         WAB = VSIGMAAB
C
         VXCA1 = VXCA1 + VRHOA
         DUMAX = DUMAX + 2.0D+00*(WAA*GRADXA) + (WAB*GRADXB)*1.0D+00
         DUMAY = DUMAY + 2.0D+00*(WAA*GRADYA) + (WAB*GRADYB)*1.0D+00
         DUMAZ = DUMAZ + 2.0D+00*(WAA*GRADZA) + (WAB*GRADZB)*1.0D+00
C
         VXCB1 = VXCB1 + VRHOB
         DUMBX = DUMBX + 2.0D+00*(WBB*GRADXB) + (WAB*GRADXA)*1.0D+00
         DUMBY = DUMBY + 2.0D+00*(WBB*GRADYB) + (WAB*GRADYA)*1.0D+00
         DUMBZ = DUMBZ + 2.0D+00*(WBB*GRADZB) + (WAB*GRADZA)*1.0D+00
C
         ECF = ECF   + ZK * FTOTWT
C
      END IF
C
      RETURN
      END
C
C*MODULE DFTXCA  *DECK LRCLSDA
      SUBROUTINE LRCLSDA(RHOINP,F,D1F)
C
C***********************************************
C
C   INPUT:
C      emuINP - Value of mu (or omega) - passed through CAMMU
C      rhoINP - Spin density
C
C   OUTPUT:
C      F      - Functional value
C      D1F    - First derivative
C
C***********************************************
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL CAMFLAG
      COMMON /DFTCAM/ ALPHAC,BETAC,CAMMU,CAMVWN,CAMLYP,CAMFLAG
C
      DATA F1/1.0D+00/, F2/2.0D+00/, F3/3.0D+00/,
     >     F4/4.0D+00/, F6/6.0D+00/
     >     F8/8.0D+00/
C
      PARAMETER( PI = 3.1415926535897932384626433832795D+00 )
C
      F1O2 = F1 / F2
      F1O3 = F1 / F3
      F1O4 = F1 / F4
C--   F2o3 = F2 / F3
      F4O3 = F4 / F3
C--   F4o9 = F4 / F9
      F8O3 = F8 / F3
      PI12 = SQRT(PI)
C
      AX   = -(F3/F2) * (F4O3*PI)**(-F1O3)
      CMU  = (F6*PI**F2)**F1O3
C
      RHO  = RHOINP
      EMUV = CAMMU
C
      RHO13 = RHO**F1O3
      RHO43 = RHO**F4O3
C
      WMU  = EMUV/(F2*CMU*RHO13)
      WMU2 = WMU*WMU
      WMU3 = WMU*WMU2
C--   wmu4 = wmu*wmu3
C
      W    = EXP(-F1O4/WMU2)
      ERFV = GMSERF( F1O2/WMU)
      DWMUDR = -F1O3*WMU / RHO
C
      FSR = F1-F4O3*WMU*(-F6*WMU+F8*WMU3+W*
     $        (F4*WMU-F8*WMU3)+F2*PI12*ERFV)
      DFSRDWMU = F8O3*(F2*WMU*(F3-F8*WMU2+W*
     $          (-F1+F8*WMU2))-PI12*ERFV)
C
      F   = AX*RHO43*FSR
      D1F = AX*F4O3*RHO13*FSR + AX*RHO43*(DFSRDWMU*DWMUDR)
C
       RETURN
       END
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C  Automatically generated code implementing VWN3-OPEN functional and
C  its derivatives. It is generated by func-codegen.pl being a part of
C  a "Automatic code generation framework for analytical functional
C  derivative evaluation", Pawel Salek, 2005
C
C  This functional has been generated from a maxima file.
C
C  VWN3-closed.max
C
!  A1:0.0621814/2;
!  B1:3.72744;
!  C1:12.9352;
!  X01:-0.10498;
!  FRS(RHOA):=(3/(4*PI*(RHOA)))^(1/3);
!  Q(B,C):=(4*C-B^2)^(1/2);
!  X(X0,B,C):=X0^2+B*X0+C;
!  ECRS(RS,A,B,C,X0):=A*(LOG(RS/X(SQRT(RS),B,C)) + 2*B/Q(B,C)*ATAN(Q(B,C)/(2*SQRT(RS)+B)) - B*X0/X(X
!  ECPMC(RS):=ECRS(RS,A1,B1,C1,X01);
!  EVWN3(RS,ZETA):=ECPMC(RS);
!  K(RHOA,GRADA,RHOB,GRADB,GRADAB):=(RHOA)*EVWN3(FRS(RHOA),0);
C
C  VWN3-open.max
C
!  A1:0.0621814/2;
!  A2:0.0621814/4;
!  A3:((-1/3)*(1/(PI*PI)))/2;
!  A4:0.0621814/2;
!  A5:0.0621814/4;
!  B1:3.72744;
!  B2:7.06042;
!  B3:1.06835;
!  B4:13.0720;
!  B5:20.1231;
!  C1:12.9352;
!  C2:18.0578;
!  C3:11.4813;
!  C4:42.7198;
!  C5:101.578;
!  X01:-0.10498;
!  X02:-0.32500;
!  X03:-0.228344;
!  X04:-0.409286;
!  X05:-0.743294;
!  DFDZZ:4/(9*((2^(1/3))-1));
!  FRS(RHOA,RHOB):=(3/(4*PI*(RHOA+RHOB)))^(1/3);
!  F(Z):=((1+Z)^(4/3) + (1-Z)^(4/3) - 2)/(2*(2^(1/3)-1));
!  FZETA(RHOA,RHOB):=(RHOA-RHOB)/(RHOA+RHOB);
!  Q(B,C):=(4*C-B^2)^(1/2);
!  X(X0,B,C):=X0^2+B*X0+C;
!  ECRS(RS,A,B,C,X0):=A*(LOG(RS/X(SQRT(RS),B,C)) + 2*B/Q(B,C)*ATAN(Q(B,C)/(2*SQRT(RS)+B)) - B*X0/X(X
!  ECPMC(RS):=ECRS(RS,A1,B1,C1,X01);
!  ECFMC(RS):=ECRS(RS,A2,B2,C2,X02);
!  ECALPHA(RS):=ECRS(RS,A3,B3,C3,X03);
!  ECPRPA(RS):=ECRS(RS,A4,B4,C4,X04);
!  ECFRPA(RS):=ECRS(RS,A5,B5,C5,X05);
!  ECIII(RS,ZETA):=(ECFMC(RS)-ECPMC(RS))/(ECFRPA(RS)-ECPRPA(RS))*(F(ZETA)/DFDZZ)*(ECALPHA(RS)+(DFDZZ
!  EVWN3(RS,ZETA):=ECPMC(RS)+ECIII(RS,ZETA);
!  K(RHOA,GRADA,RHOB,GRADB,GRADAB):=(RHOA+RHOB)*EVWN3(FRS(RHOA,RHOB),FZETA(RHOA,RHOB));
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE VWN3_CF(RHFGVB,UROHF,ROA,ROB,FTOTWT,VXCA1,VXCB1,ECF)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL UROHF, RHFGVB
C
      COMMON /DFTEXC/ PI,CSLT,CB88,CLYP,CVWN,QOP,NEXFG,NCORFG,NPFFG,
     *                NXCFG
C
      DATA ONE   /1.0D+0/
      DATA TWO   /2.0D+0/
      DATA THREE /3.0D+0/
      DATA FOUR  /4.0D+0/
      DATA FIVE  /5.0D+0/
C     DATA PI    /3.1415926535897932384626433832795D+0/
C
      IF (RHFGVB) THEN
C
        RHOA   = TWO*ROA
C
C     FUNCTIONAL ENERGY
C
        T1 = 1.587401051968199D+0
        T2 = 1.200936955176003D+0
        T3 = ONE/RHOA**(ONE/THREE)
        T4 = ONE/PI**(ONE/THREE)
        T5 = SQRT(T3*T4)
        T6 = ATAN(6.15199081975908D+0/
     >      (T1*T2*T5+3.72744D+0))
        T7 = .7937005259840997D+0
        T8 = 1.442249570307408D+0
        T9 = ONE/(ONE*T3*T4*T8/T1+3.72744D+0*
     >       T7*T2*T5+12.9352D+0)
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        ENERGY = 0.0310907D+0*(LOG(.6299605249474366D+0*
     >        T3*T4*T8*T9)+.03116760867894378D+0*(LOG(
     >        (T7*T2*T5+0.10498D+0)**TWO*T9)+1.143525763628415D+0*
     >        T6)+1.211783342728061D+0*T6)*RHOA
C
C     STORE FUNCTIONAL ENERGY
C
        ECF = ECF + ENERGY*FTOTWT*CVWN
C
C     FIRST FUNCTIONAL DERIVATIVE
C
        T1 = 1.587401051968199D+0
        T2 = 1.200936955176003D+0
        T3 = RHOA**(ONE/THREE)
        T4 = ONE/T3
        T5 = PI**(ONE/THREE)
        T6 = ONE/T5
        T7 = SQRT(T4*T6)
        T8 = T1*T2*T7+3.72744D+0
        T9 = ATAN(6.15199081975908D+0/T8)
        T10 = .7937005259840997D+0
        T11 = T10*T2*T7+0.10498D+0
        T12 = T11**TWO
        T13 = ONE/T1
        T14 = 1.442249570307408D+0
        T15 = T13*T14*T4*T6+3.72744D+0*T10*T2*T7+12.9352D+0
        T16 = ONE/T15
        T17 = 1.587401051968199D+0
        T18 = ONE/T17
        T19 = .4003123183920009D+0
        T20 = ONE/RHOA**(FOUR/THREE)
        T21 = ONE/T8**TWO
        T22 = ONE/(37.84699104639999D+0*T21+ONE)
        T23 = ONE/T7
        T24 = ONE/T15**TWO
        T25 = .4807498567691361D+0
        T26 = -T13*T20*T25*T6-1.479235544287087D+0*T19*T20*T23*T6
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        DFDRA = 0.0310907D+0*(.03116760867894378D+0*
     >        (ONE*T15*(-T10*T11*T16*T19*T20*T23*T6-
     >        T12*T24*T26)/T12+7.03496D+0*T10*T19*T20*
     >        T22*T21*T23*T6)+ONE*T15*T17*T3*T5*(-T14*
     >        T18*T24*T26*T4*T6-T16*T18*T20*T25*T6)/
     >        T14+7.45488D+0*T10*T19*T20*T22*T21*T23*
     >        T6)*RHOA+0.0310907D+0*(LOG(T14*T18*T4*
     >        T16*T6)+.03116760867894378D+0*(LOG(T12*
     >        T16)+1.143525763628415D+0*T9)+1.211783342728061D+0*
     >        T9)
C
C     STORE FIRST FUNCTIONAL DERIVATIVE
C
        VXCA1 = VXCA1 + DFDRA*CVWN
      END IF
C
C     OPEN-SHELL (SPIN-POLARIZED)
C
      IF (UROHF) THEN
        RHOA   = ROA
        RHOB   = ROB
C
C     FUNCTIONAL ENERGY
C
        T1 = RHOB+RHOA
        T2 = 1.587401051968199D+0
        T3 = 1.200936955176003D+0
        T4 = ONE/T1**(ONE/THREE)
        T5 = ONE/PI**(ONE/THREE)
        T6 = SQRT(T4*T5)
        T7 = T2*T3*T6
        T8 = ATAN(6.15199081975908D+0/
     >      (T7+3.72744D+0))
        T9 = 1.259921049894873D+0
        T10 = ONE/T9
        T11 = T10*T3*T6
        T12 = 1.442249570307408D+0
        T13 = ONE*T12*T4*T5/T2
        T14 = ONE/(T13+3.72744D+0*T10*
     >        T3*T6+12.9352D+0)
        T15 = .6299605249474366D+0
        T16 = LOG(T12*T15*T4*T14*T5)+.03116760867894378D+0*
     >       (LOG((T11+0.10498D+0)**TWO*T14)+1.143525763628415D+0*
     >        T8)+1.211783342728061D+0*T8
        T17 = RHOA-RHOB
        T18 = ONE/T1
        T19 = ATAN(4.730926909560114D+0/
     >       (T7+7.06042D+0))
        T20 = ONE/(T13+7.06042D+0*T10*
     >        T3*T6+18.0578D+0)
        T21 = ATAN(0.0448998886415768D+0/
     >       (T7+13.072D+0))
        T22 = ONE/(T13+13.072D+0*T10*T3*
     >        T6+42.7198D+0)
        T23 = ATAN(1.171685277708971D+0/
     >       (T7+20.1231D+0))
        T24 = ONE/(T13+20.1231D+0*T10*
     >        T3*T6+101.578D+0)
        T25 = 0.01554535D+0*(LOG(T12*T15*
     >        T4*T24*T5)+.1715824994145076D+0*(LOG((
     >        T11+0.743294D+0)**TWO*T24)+31.81146397339819D+0*
     >        T23)+34.34898497546586D+0*T23)-0.0310907D+0*
     >        (LOG(T12*T15*T4*T22*T5)+.1425305241679839D+0*
     >        (LOG((T11+0.409286D+0)**TWO*T22)+545.8110641572265D+0*
     >        T21)+582.2731590427809D+0*T21)
        T26 = ATAN(6.692072046645942D+0/
     >       (T7+1.06835D+0))
        T27 = ONE/(T13+1.06835D+0*T10*
     >        T3*T6+11.4813D+0)
        T28 = LOG(T12*T15*T4*T27*T5)+.02160871036089827D+0*
     >       (LOG((T11+0.228344D+0)**TWO*T27)+0.182801976947204D+0*
     >        T26)+.3192882540872989D+0*T26
        T29 = ONE/PI**TWO
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        ENERGY = T1*(1.125D+0*((T17*T18+
     >        ONE)**(FOUR/THREE)+(ONE-1.0D+0*T17*T18)**
     >       (FOUR/THREE)-TWO)*(0.01554535D+0*(LOG(
     >        T12*T15*T4*T20*T5)+.1446006101852073D+0*
     >       (LOG((T11+0.325D+0)**TWO*T20)+2.710005934374516D+0*
     >        T19)+2.984793523540817D+0*T19)-0.0310907D+0*
     >        T16)*(ONE*T17**FOUR*(.4444444444444444D+0*
     >        T25/(T9-ONE)+.1666666666666667D+0*T28*
     >        T29)/T1**FOUR-.1666666666666667D+0*T28*
     >        T29)/T25+0.0310907D+0*T16)
C
C     STORE FUNCTIONAL ENERGY
C
        ECF = ECF + ENERGY*FTOTWT*CVWN
C
C     FIRST FUNCTIONAL DERIVATIVE
C
        T1 = 1.587401051968199D+0
        T2 = 1.200936955176003D+0
        T3 = RHOB+RHOA
        T4 = T3**(ONE/THREE)
        T5 = ONE/T4
        T6 = PI**(ONE/THREE)
        T7 = ONE/T6
        T8 = SQRT(T5*T7)
        T9 = T1*T2*T8
        T10 = T9+3.72744D+0
        T11 = ATAN(6.15199081975908D+0/T10)
        T12 = 1.259921049894873D+0
        T13 = ONE/T12
        T14 = T13*T2*T8
        T15 = T14+0.10498D+0
        T16 = T15**TWO
        T17 = ONE/T1
        T18 = 1.442249570307408D+0
        T19 = T17*T18*T5*T7
        T20 = T19+3.72744D+0*T13*T2*T8+12.9352D+0
        T21 = ONE/T20
        T22 = 1.587401051968199D+0
        T23 = ONE/T22
        T24 = LOG(T18*T23*T5*T21*T7)+.03116760867894378D+0*
     >       (LOG(T16*T21)+1.143525763628415D+0*T11)
     >       +1.211783342728061D+0*T11
        T25 = 0.0310907D+0*T24
        T26 = RHOA-RHOB
        T27 = ONE/T3
        T28 = ONE-1.0D+0*T26*T27
        T29 = T26*T27+ONE
        T30 = T29**(FOUR/THREE)+T28**(FOUR/THREE)-TWO
        T31 = T9+7.06042D+0
        T32 = ATAN(4.730926909560114D+0/T31)
        T33 = T14+0.325D+0
        T34 = T33**TWO
        T35 = T19+7.06042D+0*T13*T2*T8+18.0578D+0
        T36 = ONE/T35
        T37 = 0.01554535D+0*(LOG(T18*T23*
     >        T5*T36*T7)+.1446006101852073D+0*(LOG(T34*
     >        T36)+2.710005934374516D+0*T32)+2.984793523540817D+0*
     >        T32)-0.0310907D+0*T24
        T38 = T9+13.072D+0
        T39 = ATAN(0.0448998886415768D+0/T38)
        T40 = T14+0.409286D+0
        T41 = T40**TWO
        T42 = T19+13.072D+0*T13*T2*T8+42.7198D+0
        T43 = ONE/T42
        T44 = T9+20.1231D+0
        T45 = ATAN(1.171685277708971D+0/T44)
        T46 = T14+0.743294D+0
        T47 = T46**TWO
        T48 = T19+20.1231D+0*T13*T2*T8+101.578D+0
        T49 = ONE/T48
        T50 = 0.01554535D+0*(LOG(T18*T23*
     >        T5*T49*T7)+.1715824994145076D+0*(LOG(T47*
     >        T49)+31.81146397339819D+0*T45)+34.34898497546586D+0*
     >        T45)-0.0310907D+0*(LOG(T18*T23*T5*T43*
     >        T7)+.1425305241679839D+0*(LOG(T41*T43)
     >       +545.8110641572265D+0*T39)+582.2731590427809D+0*
     >        T39)
        T51 = ONE/T50
        T52 = T9+1.06835D+0
        T53 = ATAN(6.692072046645942D+0/T52)
        T54 = T14+0.228344D+0
        T55 = T54**TWO
        T56 = T19+1.06835D+0*T13*T2*T8+11.4813D+0
        T57 = ONE/T56
        T58 = LOG(T18*T23*T5*T57*T7)+.02160871036089827D+0*
     >       (LOG(T55*T57)+0.182801976947204D+0*T53)
     >       +.3192882540872989D+0*T53
        T59 = ONE/PI**TWO
        T60 = T26**FOUR
        T61 = ONE/T3**FOUR
        T62 = ONE/(T12-ONE)
        T63 = .4444444444444444D+0*T50*T62+.1666666666666667D+0*T58*T59
        T64 = T60*T61*T63-.1666666666666667D+0*T58*T59
        T65 = 1.125D+0*T30*T37*T51*T64
        T66 = ONE/T3**TWO
        T67 = T26*T66
        T68 = -T27
        T69 = T28**(ONE/THREE)
        T70 = -T26*T66
        T71 = T29**(ONE/THREE)
        T72 = .4003123183920009D+0
        T73 = ONE/T3**(FOUR/THREE)
        T74 = ONE/T10**TWO
        T75 = ONE/(37.84699104639999D+0*T74+ONE)
        T76 = ONE/T8
        T77 = ONE/T20**TWO
        T78 = .4807498567691361D+0
        T79 = -T17*T7*T73*T78
        T80 = 0.39685026299205D+0
        T81 = T79-3.72744D+0*T80*T72*T73*T76*T7
        T82 = ONE/T18
        T83 = T20*T22*T4*T6*(-T18*T23*
     >        T5*T7*T77*T81-T21*T23*T7*T73*T78)*T82+
     >        .03116760867894378D+0*(ONE*T20*(-T16*T77*
     >        T81-T13*T15*T21*T7*T72*T73*T76)/T16+7.03496D+0*
     >        T13*T72*T73*T75*T74*T76*T7)+7.45488D+0*
     >        T13*T72*T73*T75*T74*T76*T7
        T84 = 0.0310907D+0*T83
        T85 = ONE/T44**TWO
        T86 = ONE/(1.37284638999995D+0*T85+ONE)
        T87 = ONE/T48**TWO
        T88 = T79-20.1231D+0*T80*T72*T73*T76*T7
        T89 = ONE/T38**TWO
        T90 = ONE/(.002016000000025997D+0*T89+ONE)
        T91 = ONE/T42**TWO
        T92 = T79-13.072D+0*T80*T72*T73*T76*T7
        T93 = 0.01554535D+0*(.1715824994145076D+0*
     >       (ONE*T48*(-T47*T87*T88-T13*T46*T49*T7*
     >        T72*T73*T76)/T47+37.273024D+0*T13*T72*
     >        T73*T86*T85*T76*T7)+T22*T4*T48*T6*T82*
     >      (-T18*T23*T5*T7*T87*T88-T23*T49*T7*T73*
     >        T78)+40.24620000000001D+0*T13*T72*T73*
     >        T86*T85*T76*T7)-0.0310907D+0*(.1425305241679839D+0*
     >       (ONE*T42*(-T41*T91*T92-T13*T40*T43*T7*
     >        T72*T73*T76)/T41+24.506856D+0*T13*T72*
     >        T73*T90*T89*T76*T7)+T22*T4*T42*T6*T82*
     >      (-T18*T23*T5*T7*T91*T92-T23*T43*T7*T73*
     >        T78)+26.144D+0*T13*T72*T73*T90*T89*T76*T7)
        T94 = -1.125D+0*T30*T37*T64*T93/T50**TWO
        T95 = ONE/T31**TWO
        T96 = ONE/(22.38166942360001D+0*T95+ONE)
        T97 = ONE/T35**TWO
        T98 = T79-7.06042D+0*T80*T72*T73*T76*T7
        T99 = 1.125D+0*T30*T51*T64*(0.01554535D+0*
     >      (.1446006101852073D+0*(ONE*T35*(-T34*T97*
     >       T98-T13*T33*T36*T7*T72*T73*T76)/T34+12.82084D+0*
     >       T13*T72*T73*T96*T95*T76*T7)+T22*T35*T4*
     >       T6*T82*(-T18*T23*T5*T7*T97*T98-T23*T36*
     >       T7*T73*T78)+14.12084D+0*T13*T72*T73*T96*
     >       T95*T76*T7)-0.0310907D+0*T83)
        T100 = ONE/T52**TWO
        T101 = ONE/(44.7838282775D+0*T100+ONE)
        T102 = ONE/T56**TWO
        T103 = T79-1.06835D+0*T80*T72*T73*T76*T7
        T104 = T22*T4*T56*T6*(-T23*T57*
     >         T7*T73*T78-T102*T103*T18*T23*T5*T7)*T82+
     >        .02160871036089827D+0*(ONE*T56*(-T13*T54*
     >         T57*T7*T72*T73*T76-T102*T103*T55)/T55+
     >         1.223324D+0*T13*T72*T73*T101*T100*T76*
     >         T7)+2.1367D+0*T13*T72*T73*T101*T100*T76*T7
        T105 = -.1666666666666667D+0*T104*T59
        T106 = -FOUR*T60*T63/T3**FIVE
        T107 = T26**THREE
        T108 = T60*T61*(.4444444444444444D+0*
     >         T62*T93+.1666666666666667D+0*T104*T59)
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
        DFDRA = T3*(T99+T94+T84+1.125D+0*
     >          T37*T51*T64*(1.333333333333333D+0*(T27+
     >          T70)*T71+1.333333333333333D+0*(T68+T67)*
     >          T69)+1.125D+0*T30*T37*T51*(FOUR*T107*T61*
     >          T63+T108+T106+T105))+T65+T25
        DFDRB = T3*(T99+T94+T84+1.125D+0*
     >          T37*T51*T64*(1.333333333333333D+0*(T68+
     >          T70)*T71+1.333333333333333D+0*(T27+T67)*
     >          T69)+1.125D+0*T30*T37*T51*(-FOUR*T107*
     >          T61*T63+T108+T106+T105))+T65+T25
C
C     STORE FIRST FUNCTIONAL DERIVATIVE
C
        VXCA1 = VXCA1 + DFDRA*CVWN
        VXCB1 = VXCB1 + DFDRB*CVWN
      END IF
C
C     END OF CODE GENERATION
C
      RETURN
      END
