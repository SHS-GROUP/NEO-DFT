C 23 MAR 12 - TN,CHC - code update to finish FMO 4.2 
C 28 DEC 11 - TN - CHANGES FOR FMO 4.2
C  5 Dec 11 - PX  - update variable names for charge transfer
C 15 APR 11 - TN  - CHANGES FOR MULTISCALE SOLVATION IN FMO
C 12 DEC 10 - HL,MWS - CALL ENUCQ AS A FUNCTION, MOVE EFPPARL TO EFDRVR
C 11 AUG 10 - TN  - UPDATE OF FMO/EFP
C 14 OCT 09 - TN  - DELETE DIPITFMO
C  1 MAY 09 - NMT - NEW DIMENSION FOR EFPBAS
C 12 JAN 09 - TN  - EFP2 BUG FIX
C 15 DEC 08 - HL  - EFPCMPFMO: VARIATIONAL INDUCED-DIPOLE OPERATOR
C                   DELETE FLDINDFMO
C 23 OCT 08 - LVS - CLEAN UP JIE'S CODE
C  4 MAR 08 - MWS - RAISE EFP PROCESSOR LIMIT FROM 64 TO 1024
C 20 AUG 07 - DDK,LVS - SMALL CHANGE TO GEXREP CALL, PBC-EFP CLEANED
C 24 MAR 07 - LVS - POLARIZATION SCREENING ADDED, EL.DERIV. MOVED OUT
C 22 DEC 06 - TN  - FMO/EFP GRADIENT
C  6 NOV 06 - MWS - ADJUST WAVEFUNCTION COMMON BLOCK
C 22 FEB 06 - TN  - EFP/FMO INTERFACING
C
C*MODULE EFPFMO  *DECK EFFMOIN
      SUBROUTINE EFFMOIN(ITASK,IPFMO,IPEFP,IOFMO,IOEFP)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (ZERO=0.0D+00,AU2BR=0.52917724924D+00)
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL DOEFPIEA
C
      PARAMETER (MXFRG=1050, MXDFG=5,MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (NNAM=8)
      DIMENSION QNAM(NNAM),KQNAM(NNAM)
      DIMENSION IPFMO(1), IPEFP(1), IOFMO(1), IOEFP(1)
C
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
CZ
CZ    FMO/EFP/PCM
CZ    RELY ON NFMOPCM HAVING A VALUE 
CZ
      COMMON /MLTFMO/ Q_MUL,IMLTFMO,ISWPFD,ISWNEW1
      COMMON /PCMPAR/ IPCM,NFT26,NFT27,IRPPCM,IEFPCM,IP_F,NFMOPCM
CZ
CZ    DATA RHF/8HRHF     /,RMC/8HMCSCF   /
C
      DATA FMOEFP/8HFMOEFP  /,ENERGY/8HENERGY  /
      DATA QNAM/8HIEACAL  ,8HIPFMO   ,8HIPEFP   ,8HNPRINT  ,8HIEABDY  ,
     *          8HREFFMO  ,8HNLEVEL  ,8HITRLVL  /
      DATA KQNAM /1,1,1,1,1, 3,1,1/
C
C     IF BOTH $FMO AND $EFRAG EXIST,
C     FMO/EFP CALCULATION WILL BE CARRIED OUT.
C
CZ
CZ    READ $FMOEFP GROUP. 
CZ    FMO/EFP/PCM
CZ
      IF (ITASK.NE.1.AND.ITASK.NE.2) THEN
        WRITE(IW,*) 'ITASK IS WRONG IN $FMOEFP GROUP'
        CALL ABRT
      END IF
C
      IF (ITASK.EQ.1) THEN
        IEFPFMO = 0
        ISWENUC = 1
        IEACAL  = 0
        IEABDY  = 2
        IMLTFMO = 0
        ITRLVL  = 0
C
C       ITRLVL SEPERATES POLARIZATION IN THE FMO/EFP IEA
C       0: NOTHING (USUAL SCC CALCULATION)
C       1: EXTRACTS ES0 CONTRIBUTIONS (USES THE FREE STATE DENSITIES)
C       2: CALCULATES ES USING DENSITIES OF THE SOLUTE STATE
C       NOTE THAT THE ANALYSIS ONLY WORKS WHEN $FMO EXISTS.
C
        Q_MUL   = ZERO
        DOEFPIEA=.FALSE.
        ! THRESHOLD FOR DISTANCE BETWEEN FMO AND EFP
        REFFMO  = ZERO  ! COMPUTE ALL
C
C       NPRIEA IS BIT ADDITIVE (1 IS DEFAULT)
C       0: NO PRINT
C       1: CONTRIBUTION OF ALL EFPS TO FMO FRAGMENT
C       2: CONTRIBUTION OF ALL EFPS TO FMO ATOMS
C       4: FRAG-FRAG INTERACTION
C       8: EFP POINTS AND FMO ATOMS
C
        NPRIEA  = 0
C
        IEOF    = 0
        CALL SEQREW(IR)
        CALL FNDGRP(IR,' $EFRAG ',IEOF)
        IF(IEOF.NE.0) THEN
          RETURN
        ELSE
          IEOF = 0
          CALL SEQREW(IR)
          CALL FNDGRP(IR,' $FMO   ',IEOF)
          IF (IEOF.NE.0) THEN
            RETURN
          ELSE
            IEFPFMO = 1
            ISWENUC = 0
          END IF
        END IF
CZ
        IF (NFMOPCM.EQ.1) THEN
          WRITE(6,*) 'MULTISCALE SOLATION IN FMO STARTS!'
          IMLTFMO = 1
        ELSEIF (NFMOPCM.GT.1) THEN
          IF (MASWRK) WRITE(IW,*) 
     *    'FMOPCM LEVEL MUST BE 1 IN MULTISCALE SOLVATION IN FMO'
          CALL ABRT
        END IF
CZ
C
        IF (MASWRK) WRITE(IW,9000)
      END IF
C
CZ
CZ    READ IN $FMOEFP GROUP
CZ    ITASK = 1: LIGHT VERSION. JUST READ IEACAL WHETHER OR
CZ               NOT TO ALLOCATE MEMORY FOR IPFMO AND IPEFP
CZ    ITASK = 2: HEAVY VERSION: SUPPOSE THAT IPFMO AND IPEFP ARE
CZ               ALLOCATED, IN WHICH THE VALUES ARE STORED.
CZ
      IF (ITASK.EQ.2) THEN
CZ      CALL VICLR(IPFMO,1, NFG)
CZ      CALL VICLR(IOFMO,1, NFG)
CZ      CALL VICLR(IPEFP,1,NFRG)
CZ      CALL VICLR(IOEFP,1,NFRG)
CZ      CHANGE THE DEFAULT
        DO I = 1, NFG
          IPFMO(I) = I
          IOFMO(I) = I
        END DO
        DO I = 1, NFRG
          IPEFP(I) = I
          IOEFP(I) = I
        END DO
CZ
        KQNAM(2)=NFG *10+1
        KQNAM(3)=NFRG*10+1
      ELSE
        KQNAM(2)=1*10+9
        KQNAM(3)=1*10+9
      END IF
C
C
C        ----- READ NAMELIST $FMOEFP  -----
C
      JRET = 0
      CALL NAMEIO(IR,JRET,FMOEFP,NNAM,QNAM,KQNAM,
     *            IEACAL,IPFMO,IPEFP,NPRIEA,IEABDY,
     *            REFFMO,IEFPFMO,ITRLVL,0,0,
     *                 0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,
     *   0,0,0,0,0,    0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,
     *   0,0,0,0,0,    0,0,0,0,0,   0,0,0,0,0,   0,0,0,0)
C
c     IF(IEFPFMO.GT.2) CALL ABRT
CZ
CZ    MULTISCALE SOLVATION IN FMO
CZ
      IF (IMLTFMO.EQ.1.AND.IEFPFMO.NE.2) THEN
        IF (MASWRK) WRITE(IW,*) 
     *  'NLEVEL IN FMOEFP MUST BE 2 IN MULTISCALE SOLVATION IN FMO'
        CALL ABRT
      END IF
C
      IF(JRET .EQ. 1) RETURN
      IF(JRET .EQ. 2) THEN
        IF (MASWRK) WRITE (IW,9005)
        CALL ABRT
      END IF
C
      IF (IEACAL.NE.0.AND.IEACAL.NE.1) THEN
        IF (MASWRK) WRITE (IW,9010)
        CALL ABRT
      END IF
C
C     ANG TO BOHR
      IF (REFFMO.NE.ZERO) THEN
        IF (ITASK.EQ.1) WRITE(IW,9075) REFFMO
        REFFMO = REFFMO/AU2BR
      END IF
C
C     FMO/EFP LEVEL
      IF (IEFPFMO.GT.2) THEN
        IF (MASWRK) WRITE(IW,*) 'FMOEFP LEVEL SHOULD BE 0 TO 2'
        CALL ABRT
      END IF
C
      IF (ITRLVL.GT.2.OR.ITRLVL.LT.0) THEN
        IF (MASWRK) WRITE(IW,*) 'ITRLVL SHOULD BE 0 TO 2'
        CALL ABRT
      END IF
      IF (IEACAL.NE.1.AND.ITRLVL.NE.0) THEN
        IF (MASWRK) WRITE(IW,*) 'ITRLVL SHOULD BE USED WITH IEACAL=1'
        CALL ABRT
      END IF
C
      IF (ITASK.EQ.1) RETURN
C
C
C     FOR ITASK=2 HEREAFTER
C
      IF (IEACAL.EQ.1.AND.NPRIEA.EQ.0) NPRIEA = 1
C
      NFGIEA = 0
      DO I = 1, NFG
        IF (IPFMO(I).GT.NFG.OR.IPFMO(I).LT.0) THEN
          IF (MASWRK) WRITE(IW,9015) IPFMO(I)
          CALL ABRT
        END IF
        IF (IPFMO(I).GT.0) THEN
          DO J = 1, I-1
            IF (IPFMO(I).EQ.IPFMO(J)) THEN
              IF (MASWRK) WRITE(IW,9020)
              CALL ABRT
            END IF
          END DO
C
          ! RELABEL FMO FRAGMENTS FOR IEA
          NFGIEA = NFGIEA + 1
          IOFMO(NFGIEA) = IPFMO(I)
        END IF
      END DO
C
      NFRGIEA = 0
      DO I = 1, NFRG
        IF (IPEFP(I).GT.NFRG.OR.IPEFP(I).LT.0) THEN
          IF (MASWRK) WRITE(IW,9025) IPFMO(I)
          CALL ABRT
        END IF
        IF (IPEFP(I).GT.0) THEN
          DO J = 1, I-1
            IF (IPEFP(I).EQ.IPEFP(J)) THEN
              IF (MASWRK) WRITE(IW,9030)
              CALL ABRT
            END IF
          END DO
C
          NFRGIEA = NFRGIEA + 1
          IOEFP(NFRGIEA) = IPEFP(I)
        END IF
      END DO
      NFRGI1 = 1
      NFRGI2 = 1
      IF (IAND(NPRIEA,8).NE.0) NFRGI1 = NFRGIEA
      IF (IAND(NPRIEA,4).NE.0) NFRGI2 = NFRGIEA
C
      IF (IEABDY.GT.NBODY) THEN
        IF (MASWRK) WRITE(IW,*)
     *     'IEABDY IN $FMOEFP GROUP IS GREATER THAN NBODY IN FMO'
        CALL ABRT
      END IF
      IF (IEABDY.GT.3.OR.IEABDY.LE.0) THEN
        IF (MASWRK) WRITE(IW,*) 'IEABDY IN $FMOEFP GROUP IS WRONG'
        CALL ABRT
      END IF
      IF (NPRIEA.GT.15.OR.NPRIEA.LT.0) THEN
        IF (MASWRK) WRITE(IW,*) 'NPRIEA IN $FMOEFP GROUP IS WRONG'
        CALL ABRT
      END IF
      IF (IEACAL.EQ.1.AND.RUNTYP.NE.ENERGY) THEN
        IF (MASWRK) WRITE(IW,*) 'FMO/EFP IEA ONLY WORKS WITH ENERGY'
        CALL ABRT
      END IF
C
      IF (MASWRK) THEN
        WRITE(IW,9035) IEACAL
        WRITE(IW,9040) (IPFMO(I),I=1,NFG)
        WRITE(IW,9045) (IPEFP(I),I=1,NFRG)
        WRITE(IW,9050) (IOFMO(I),I=1,NFGIEA)
        WRITE(IW,9055) (IOEFP(I),I=1,NFRGIEA)
        WRITE(IW,9060) NFGIEA, NFRGIEA
        WRITE(IW,9065) IEABDY
        WRITE(IW,9070) ITRLVL 
      END IF
      RETURN
 9000 FORMAT(/3X,44(1H-)/
     *   3X,'   ***** FMO/EFP CALCULATION STARTS *****   '/
     *   3X,44(1H-))
 9005 FORMAT(1X,' ERROR READING $FMOEFP GROUP')
 9010 FORMAT(1X,' IEACAL MUST BE EITHER 0 OR 1.')
 9015 FORMAT(1X,' NO SUCH A NUMBER IS ALLOWED IN IPFMO: ',I8)
 9020 FORMAT(1X,' THE SAME FRAGMENT NUMBERS ARE ALLOWED IN IPFMO')
 9025 FORMAT(1X,' NO SUCH A NUMBER IS ALLOWED IN IPEFP: ',I8)
 9030 FORMAT(1X,' THE SAME FRAGMENT NUMBERS ARE ALLOWED IN IPEFP')
 9035 FORMAT(/5X,'$FMOEFP OPTIONS'/5X,15(1H-)/
     *        5X,'IEACAL=',I8)
 9040 FORMAT(5X,'IPFMO(1)=',8I6)
 9045 FORMAT(5X,'IPEFP(1)=',8I6)
 9050 FORMAT(5X,'IOFMO(1)=',8I6)
 9055 FORMAT(5X,'IOEFP(1)=',8I6)
 9060 FORMAT(5X,'NUMBER OF FMO AND EFP FRAGMENTS FOR IEA:',2I8/)
 9065 FORMAT(5X,'FMO FRAGMENT ENERGY EXPANSION FOR IEA UP TO:',2I8/)
 9070 FORMAT(5X,'OPTION FOR EXTRACTING POLARIZATION ITRLVL:',2I8/)
 9075 FORMAT(5X,'CUTOFF FOR DISTANCE BETWEEN FMO AND EFP:',F12.8/)
      END
C*MODULE EFPFMO  *DECK DEFEFIND
      SUBROUTINE DEFEFIND(DIND,DINDD,DEFEF)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
CZ    CHARACTER*8 POLNAM,DPOLNAM
C
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12)
C
      DIMENSION DIND(3,*), DINDD(3,*), DEFEF(1)
C
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
CZ    COMMON /EFFMOP/ LEFLDF,LEFADDF,LDINDF,LDINDDF,
CZ   *                LDEFEF,LDEFTF,LTORQF
      COMMON /FMCOM / XX(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     NOTE: DEFEF IS CALCULATED FOR BEING SUBTRACTED FROM
C           FULL INDUCED DIPOLE DERIVATIVES WILL BE CALCULATED IN VNNDER
C           TO AVOID DOUBLE COUNTING THAT HAPPENS IN THE FMO LOOP.
C           DIND AND DINDD HERE, WHICH ARISE FROM EFP-EFP POTENTIALS,
C           HAVE BEEN CALCULATED IN EFEFIND.
C
      IF (IEFP.EQ.1) THEN
        IF (IEFC.EQ.1) THEN
          CALL DCHIND(DIND,DINDD,DEFEF,1)
        END IF
        IF (IEFD.EQ.1) THEN
          CALL DDPIND(DIND,DINDD,DEFEF,1)
        END IF
        IF (IEFQ.EQ.1) THEN
          CALL VALFM(LOADFM)
          LQUA = LOADFM + 1
          LAST = LQUA   + 10*NMTTPT 
          NEED = LAST - LOADFM - 1
          CALL GETFM(NEED)
          CALL DQDIND(XX(LQUA),DIND,DINDD,DEFEF,1)
          CALL RETFM(NEED)
        END IF
        CALL DININ(DIND,DINDD,DEFEF,1)
      END IF
C
      IF(GOPARR) CALL DDI_GSUMF(1520,DEFEF,6*NFRG)
C
C     AMEMA = 0.0D+00
C     IF (MASWRK) THEN
C       DO I = 1, 6*NFRG
C         AMEMA = AMEMA + (XX(LDEFEF+I-1))**2
C       END DO
C       AMEMA = SQRT(AMEMA/(6*NFRG))
C       WRITE (6,*) 'DEFEF RMS', AMEMA
C     ENDIF
C
C     IF (MASWRK) THEN
C     WRITE(6,*) 'TEST DEFEF DEFT'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DEFEF(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST DEFEF TORQ'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DEFEF(J,I),J=4,6)
C     END DO
C     ENDIF
C
CZCZ  CLEAR FOR THE LATER CALCULATION
      IF (IEFPFMO.NE.2) THEN
        CALL VCLR(DIND, 1,3*NPTTPT)
        CALL VCLR(DINDD,1,3*NPTTPT)
      END IF
CZCZ
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPDEG
      SUBROUTINE EFPDEG(IDA, IBODY)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
C
      PARAMETER (MXFRG=1050, MXFGPT=12000, MXDFG=5,
     *           MXDPPT=MXFRG*MXDFG*12)
      COMMON /EFPOTD/ METHPOL,INABIO,MOVE,nfrag
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FMCOM / XX(1)
      COMMON /EFFMOP/ LEFLDF,LEFADDF,LDINDF,LDINDDF,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
C
C     ONLY MASTER CAN COME
C
      IF (IDA.EQ.0.OR.MOVE.EQ.0) RETURN
      DA = IDA
C
C     IF (MASWRK) THEN
C     WRITE (6,*) 'NFIRST NEND', NFIRST,NEND
C     WRITE (6,*) 'DA ISWENUC', DA, ISWENUC
C     WRITE(6,*) 'TEST DEFT BEFORE'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DEFT(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST TORQ BEFORE'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (TORQ(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST DESFRG DEFT'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DESFRG(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST DESFRG TORQ'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DESFRG(J,I),J=4,6)
C     END DO
C     END IF
C
      II = (IBODY-1)*NFRG*3
      MM = II 
      NN = 0 
      IF     (IEFPFMO.EQ.1) THEN
        DO I = 1, NFRG
          LD = LDEFTF + MM
          LT = LTORQF + MM
          LF = LDEFEF + NN
          XX(LD  ) = XX(LD  ) + DA*(DEFT(1,I) - XX(LF  ))
          XX(LD+1) = XX(LD+1) + DA*(DEFT(2,I) - XX(LF+1))
          XX(LD+2) = XX(LD+2) + DA*(DEFT(3,I) - XX(LF+2))
          XX(LT  ) = XX(LT  ) + DA*(TORQ(1,I) - XX(LF+3))
          XX(LT+1) = XX(LT+1) + DA*(TORQ(2,I) - XX(LF+4))
          XX(LT+2) = XX(LT+2) + DA*(TORQ(3,I) - XX(LF+5))
          MM = MM + 3
          NN = NN + 6
        END DO
      ELSEIF (IEFPFMO.EQ.2) THEN
        DO I = 1, NFRG
          LD = LDEFTF + MM
          LT = LTORQF + MM
          XX(LD  ) = XX(LD  ) + DA*DEFT(1,I)
          XX(LD+1) = XX(LD+1) + DA*DEFT(2,I)
          XX(LD+2) = XX(LD+2) + DA*DEFT(3,I)
          XX(LT  ) = XX(LT  ) + DA*TORQ(1,I)
          XX(LT+1) = XX(LT+1) + DA*TORQ(2,I)
          XX(LT+2) = XX(LT+2) + DA*TORQ(3,I)
          MM = MM + 3
        END DO
      END IF
C     IF (MASWRK) THEN
C     WRITE(6,*) 'TEST DEFTTMP'
C     DO I = 1, NFRG*3
C       WRITE (6,'(3F16.8)') (DEFTTMP(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST TORQTTMP'
C     DO I = 1, NFRG*3
C       WRITE (6,'(3F16.8)') (TORQTMP(J,I),J=1,3)
C     END DO
C     END IF
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPFMOIO
      SUBROUTINE EFPFMOIO(IO)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (MXPT=2000, MXFRG=1050, MXFGPT=12000, MXDFG=5,
     *           MXAO=8192, MXDPPT=MXFRG*MXDFG*12)
C
C
      COMMON /FMCOM / XX(1)
      COMMON /EFPCT / NOCC(MXDFG),NVIR(MXDFG),NAO(MXDFG),NTAO,
     *                CTFOK(MXAO,MXDFG),NCTMO(MXDFG),NTCTMO
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
      COMMON /EFFMIO/ L75,L81,L267,L268,L269
      COMMON /EFPMP2/ MP2TYP
C
C     IF (MASWRK) WRITE(6,*) L75,L81,L267,L268,L269
      MXMO=0
      MXBF=0
      DO I=1,NFRG
        MXMO=MAX(MXMO,NORB(I))
        MXBF=MAX(MXBF,NPBF(I))
      END DO
      MXMO2=(MXMO*MXMO+MXMO)/2
      LENPV=MXBF*NTMO
      LENFM=MXMO2*NFRG
      LENCV=MXBF*NTCTMO
      MXRPTS=0
      DO IFRG=1,NFRG
        MXRPTS = MAX(NRPTS(IFRG),MXRPTS)
      END DO
      MXRPTS=MXRPTS+1
      NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
      LEN = MXRPTS*MXRPTS*NDFRG2
C     IF (MASWRK) WRITE(6,*) LEN,LENPV,LENFM,LENCV
      IF (IO.EQ.1) THEN
C
        IF (NFRG.GT.1) THEN
C         IF (MASWRK) THEN
C           WRITE (6,*) 'WRITING EFP1 PARAMETERS'
C           WRITE (6,'(6F16.8)') (XX(L75+JK),JK=0,2*LEN-1)
C         ENDIF
          IF (IREP.EQ.1) CALL DAWRIT(IDAF,IODA,XX(L75),2*LEN,75,0)
          IF (NTMO.GT.0) THEN
            CALL DAWRIT(IDAF,IODA,XX(L267),LENPV,267,0)
            CALL DAWRIT(IDAF,IODA,XX(L268),LENFM,268,0)
          ENDIF
          IF (NTCTMO.GT.0) THEN
            CALL DAWRIT(IDAF,IODA,XX(L269),LENCV,269,0)
          ENDIF
C
          IF (MP2TYP.EQ.1) THEN
            MXDPTS=0
            DO IFRG=1,NFRG
              MXDPTS = MAX(NDPTS(IFRG),MXDPTS)
            END DO
            MXDPTS=MXDPTS+1
            NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
            LEN = MXDPTS*MXDPTS*NDFRG2
            CALL DAWRIT(IDAF,IODA,XX(L81),6*LEN,81,0)
          ENDIF
        END IF
      ELSE
C
        IF (NFRG.GT.1) THEN
          IF(IREP.EQ.1) CALL DAREAD(IDAF,IODA,XX(L75),2*LEN,75,0)
          IF (NTMO.GT.0) THEN
            CALL DAREAD(IDAF,IODA,XX(L267),LENPV,267,0)
            CALL DAREAD(IDAF,IODA,XX(L268),LENFM,268,0)
          ENDIF
          IF (NTCTMO.GT.0) THEN
            CALL DAREAD(IDAF,IODA,XX(L269),LENCV,269,0)
          END IF
          IF (MP2TYP.EQ.1) THEN
            MXDPTS=0
            DO IFRG=1,NFRG
              MXDPTS = MAX(NDPTS(IFRG),MXDPTS)
            END DO
            MXDPTS=MXDPTS+1
            NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
            LEN = MXDPTS*MXDPTS*NDFRG2
            CALL DAREAD(IDAF,IODA,XX(L81),6*LEN,81,0)
          ENDIF
        END IF
      ENDIF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK DEFPCLR
      SUBROUTINE DEFPCLR
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (MXFRG=1050)
C
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /EFPGCX/ DCTFRG(6,MXFRG),DXRFRG(6,MXFRG)
      CALL VCLR(DESFRG,1,6*MXFRG)
      CALL VCLR(DCTFRG,1,6*MXFRG)
      CALL VCLR(DXRFRG,1,6*MXFRG)
C
      RETURN
      END
C
C*MODULE EFPFMO  *DECK EFPMEM
      SUBROUTINE EFPMEM(NDER,LAST,NEEDEFP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXPT=2000,MXFRG=1050,MXFGPT=12000,MXAO=8192,MXDFG=5,
     *           MXDPPT=MXFRG*MXDFG*12)
C
      COMMON /EFFMIO/ L75,L81,L267,L268,L269
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /EFPCT / NOCC(MXDFG),NVIR(MXDFG),NAO(MXDFG),NTAO,
     *                CTFOK(MXAO,MXDFG),NCTMO(MXDFG),NTCTMO
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB1(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /EFPMP2/ MP2TYP
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /EFPFM2/ FK_CNTP,POLTOT,LABFLDT,LDINDF2,LDINDDF2,LDELABFLD,
     *                LDELDIND,LDELDINDD
C
CZ
CZ    LDINDFMO, LDINDDFMO: Z-VECTOR INDUCED DIPOLES BOTH AT
CZ                         NLEVEL=1 AND 2
CZ    (LDINDF, LDINDDF)    $FMOEFP (EFPCNT2RSP AT NLEVEL=1)
CZ    LDINDF2, LDINDDF2: TOTAL INDUCED DIPOLES IN NEW FMO/EFP
CZ
      NPTTPT3 = NPTTPT*3
      LEFLDFMO   = LAST
      LEFADDFMO  = LEFLDFMO   + NPTTPT3
      LDINDFMO   = LEFADDFMO  + NPTTPT3
      LDINDDFMO  = LDINDFMO   + NPTTPT3
      LAST       = LDINDDFMO  + NPTTPT3
      IF (NDER.GT.0) THEN
        LDEFEF = LAST
        LDEFTF = LDEFEF + 6*NFRG
        LTORQF = LDEFTF + 3*NFRG*NBODY
        LAST   = LTORQF + 3*NFRG*NBODY
      ELSE
        LDEFEF = LAST
        LDEFTF = LAST
        LTORQF = LAST
      ENDIF
      IF (IEFPFMO.EQ.2) THEN
        LABFLDT  = LAST
        LDINDF2  = LABFLDT  + NPTTPT3
        LDINDDF2 = LDINDF2  + NPTTPT3
        LAST     = LDINDDF2 + NPTTPT3
        IF (NDER.GT.0) THEN
          ! DELTA E_IJ
          LDELABFLD = LAST
          LDELDIND  = LDELABFLD + NPTTPT3
          LDELDINDD = LDELDIND  + NPTTPT3
          LAST      = LDELDINDD + NPTTPT3
        END IF
      ELSE
        LABFLDT  = LAST
        LDINDF2  = LAST
        LDINDDF2 = LAST
      END IF
C
      IF (NFRG.GT.1) THEN
        MXRPTS=0
        DO IFRG=1,NFRG
          MXRPTS = MAX(NRPTS(IFRG),MXRPTS)
        END DO
        MXRPTS=MXRPTS+1
        NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
        LENN1 = MXRPTS*MXRPTS*NDFRG2
        IF (IREP.EQ.1) THEN
          L75  = LAST
          LAST = L75 + LENN1*2
        END IF
C
        MXDPTS=0
        DO IFRG=1,NFRG
          MXDPTS = MAX(NDPTS(IFRG),MXDPTS)
        END DO
        MXDPTS=MXDPTS+1
        NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
        LENN2 = MXDPTS*MXDPTS*NDFRG2
        IF (MP2TYP.EQ.1) THEN
          L81  = LAST
          LAST = L81 + LENN2*6
        END IF
C
        MXMO=0
        MXBF=0
        DO I=1,NFRG
          MXMO=MAX(MXMO,NORB1(I))
          MXBF=MAX(MXBF,NPBF(I))
        END DO
        MXMO2=(MXMO*MXMO+MXMO)/2
        LENPV=MXBF*NTMO
        LENFM=MXMO2*NFRG
        LENCV=MXBF*NTCTMO
        IF (NTMO.GT.0) THEN
          L267 = LAST
          L268 = L267 + LENPV
          LAST = L268 + LENFM
        END IF
        IF (NTCTMO.GT.0) THEN
          L269 = LAST
          LAST = L269 + LENCV
        END IF
      ENDIF
C
      NEEDEFP=LAST-LEFLDFMO
      RETURN
      END
C*MODULE EFPFMO  *DECK EFEFDER
      SUBROUTINE EFEFDER(EF3)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL OUT
C
      PARAMETER (MXDFG=5, MXPT=2000, MXFRG=1050,
     *           MXFGPT=12000, MXDPPT=MXFRG*MXDFG*12)
C
      DIMENSION EF3(3,*)
C
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FMCOM / XX(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C
C     COSMO CHANGES
C
C
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
      COMMON /INTFRG/ EFF(3,MXFRG),EFF2(3,MXFRG)
      COMMON /EFPMP2/ MP2TYP
C
      INTEGER DDI_NP, DDI_ME
C
      DATA DEBUG/8HDEBUG   /, DBUGME/8HVNNDER  /, GRD1/8HGRD1    /
C
C     ----- GRADIENT OF NUCLEAR REPULSION ENERGY -----
C     PLUS NUCLEAR CONTRIBUTIONS FROM VARIOUS SOLVENT MODELS
C
C
C     DERIVATIVES OF EFP-EFP INTERACTIONS (MULTIPOLES, REPULSION)
C     FOR EFP/FMO ARE CALCULATED HERE. THIS IS TAKEN FROM VNNDER.
C     ONLY INDUCED DIPOLE TERMS ARE CALCULATED IN VNNDER.
C
      CALL DDI_NPROC( DDI_NP, DDI_ME )
C
C        NOTE THAT -OUT- DOES NOT INCLUDE -MASWRK- SO ALL NODES
C        CAN CALL THE PARALLEL DEBUGGING ROUTINE (W/GLOBAL SUM).
C
      OUT = (EXETYP.EQ.DEBUG  .OR.  EXETYP.EQ.DBUGME  .OR.
     *       EXETYP.EQ.GRD1   .OR.  NPRINT.EQ.-3)
C
C     ----- EFFECTIVE FRAGMENT POTENTIAL -----
C     MULTIPOLE DERIVATIVE TERMS ARE NOW DONE ELSEWHERE, IN -ENUC-
C     EFP2 EXCHANGE-REPULSION IS ALSO IN ENUC
C     CHARGE-TRANSFER SHOULD BE ADDED HERE OR TO ENUC - LETS WORRY LATER
C
      IF(NFRG.GT.1) THEN
C
         IF(OUT) CALL EFP_GRD_DBG0('NUCLEAR ',EF3,ATORQ)
C
C   ----- GRADIENT TERMS SPECIFIC TO THE -EFP1- MODEL:
C
         IF(NTMO.EQ.0) THEN
C
C                GRADIENT OF THE FITTED EXCHANGE REPULSION TERM
C
            IF(IREP.EQ.1) THEN
               MXRPTS=0
               DO IFRG=1,NFRG
                  MXRPTS = MAX(NRPTS(IFRG),MXRPTS)
               ENDDO
               MXRPTS=MXRPTS+1
               NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
               LEN = MXRPTS*MXRPTS*NDFRG2
               CALL VALFM(LOADFM)
               LAREL = LOADFM + 1
               LCREL = LAREL  + LEN
               LAST  = LCREL  + LEN
               NEED = LAST - LOADFM - 1
               CALL GETFM(NEED)
               CALL DAREAD(IDAF,IODA,XX(LAREL),2*LEN,75,0)
               CALL DREPUL(XX(LAREL),XX(LCREL),MXRPTS,NDFRG2)
               IF(OUT) CALL EFP_GRD_DBG('DREPUL  ',DESFRG)
               CALL RETFM(NEED)
            END IF
C
C    THERE IS A DISPERSON TERM IN THE MP2 FLAVOR OF -EFP1- MODEL
C
            IF(MP2TYP.EQ.1) THEN
               MXDPTS=0
               DO IFRG=1,NFRG
                  MXDPTS = MAX(NDPTS(IFRG),MXDPTS)
               ENDDO
               MXDPTS=MXDPTS+1
               NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
               LEN = MXDPTS*MXDPTS*NDFRG2
               CALL VALFM(LOADFM)
               LAREL = LOADFM + 1
               LDREL = LAREL  + LEN
               LCREL = LDREL  + LEN
               LXREL = LCREL  + LEN
               LBREL = LXREL  + LEN
               LEREL = LBREL  + LEN
               LAST  = LEREL  + LEN
               NEED  = LAST - LOADFM - 1
               CALL GETFM(NEED)
               CALL DAREAD(IDAF,IODA,XX(LAREL),6*LEN,81,0)
C
C     THERE'S BOTH A C6 AND C8 CONTRIBUTION TO DISPERSION
C     NOTE THAT THE -EFF2- VALUES DON'T GET PUT INTO THE GRADIENT
C     UNTIL THE CALL TO THE -EFFT- ROUTINE CALLED DURING INTEGRALS.
C
               CALL VCLR(EFF2,1,3*NFRG)
C
               CN=6.0D+00
               CALL DDISPR(XX(LAREL),XX(LDREL),XX(LCREL),
     *                     MXDPTS,NDFRG2,CN)
               IF(OUT) CALL EFP_GRD_DBG('DDISPR-6',DESFRG)
C
               CN=8.0D+00
               CALL DDISPR(XX(LXREL),XX(LBREL),XX(LEREL),
     *                     MXDPTS,NDFRG2,CN)
               IF(OUT) CALL EFP_GRD_DBG('DDISPR-8',DESFRG)
               CALL RETFM(NEED)
            END IF
         END IF
C
      END IF
C
C         THIS ENDS ALL COMPUTATIONS OF EFP GRADIENTS,
C         EXCEPT CLEANUPS, SUMS, ETC.
C
      RETURN
      END
C*MODULE EFPFMO  *DECK EFEFIND
      SUBROUTINE EFEFIND(NDER)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXFRG=1050, MXFGPT=12000,MXIFRQ=12,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
C
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL DOEFPIEA
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FMCOM / XX(1)
      COMMON /FRFD  / PPEFX(MXFGPT), PPEFY(MXFGPT), PPEFZ(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /EFPFM2/ FK_CNTP,POLTOT,LABFLDT,LDINDF2,LDINDDF2,LDELABFLD,
     *                LDELDIND,LDELDINDD
C
      CALL VCLR(XX(LEFLDFMO),  1,NPTTPT*3)
      CALL VCLR(XX(LEFADDFMO), 1,NPTTPT*3)
      CALL VCLR(XX(LDINDFMO),  1,NPTTPT*3)
      CALL VCLR(XX(LDINDDFMO), 1,NPTTPT*3)
      IF (IEFPFMO.EQ.2) THEN
        CALL VCLR(XX(LDINDF2),  1,NPTTPT*3)
        CALL VCLR(XX(LDINDDF2), 1,NPTTPT*3)
        IF (NDER.GT.0) THEN 
          CALL VCLR(XX(LDELABFLD),1,NPTTPT*3)
          CALL VCLR(XX(LDELDIND) ,1,NPTTPT*3)
          CALL VCLR(XX(LDELDINDD),1,NPTTPT*3)
        END IF
      END IF
CZCZ
      IF (IEACAL.EQ.1) DOEFPIEA = .TRUE.
      IF (DOEFPIEA) THEN
        NPALL = 0
        DO I = 1, NFRGIEA
          IOE = IXFTCH(XX(LIOEFP),I)
          NPALL = NPALL + NPPTS(IOE)
        END DO
        CALL VCLR(XX(LEFEFPT),1,NPALL*3)
C
        CALL VALFM(LOADFM)
        LDOCNT = LOADFM + 1
        LAST   = LDOCNT + NPTTPT
        NDIEA  = LAST - LOADFM - 1
        CALL GETFM(NDIEA)
        CALL LOGIEA(1,NFRGIEA,NPTTPT,XX(LDOCNT),XX(LDOCNT),XX(LIOEFP),
     *              NPPTS)
      END IF
CZCZ
C
      II = 0
      DO LEFP = 1, NPTTPT
        XX(LEFLDFMO+II  ) = PPEFX(LEFP)
        XX(LEFLDFMO+II+1) = PPEFY(LEFP)
        XX(LEFLDFMO+II+2) = PPEFZ(LEFP)
        II = II + 3
      ENDDO
C
C     THE FOLLOWING IS VERY IMPORTANT FOR GETTING THE
C     PURE EFP DIND AND DINDD.
      CALL VCLR(DIND, 1,3*NPTTPT)
      CALL VCLR(DINDD,1,3*NPTTPT)
C
C     ALWAYS CALL TO DIPIT !
C
      CALL VALFM(LOADFM)
      LDIPNEW  = LOADFM   + 1
      LDIPNWD  = LDIPNEW  + NFRG
      LDINDC   = LDIPNWD  + NFRG
      LDINDDC  = LDINDC   + 3*NPTTPT
      LDIND_W  = LDINDDC  + 3*NPTTPT
      LDIND_C  = LDIND_W  + 6*NPTTPT
      LEWLD1   = LDIND_C  + 6*NPTTPT
      LEWLD2   = LEWLD1   + 3*NPTTPT
      LAST     = LEWLD2   + 3*NPTTPT
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
      CALL DIPIT(XX(LEFLDFMO),XX(LEFADDFMO),XX(LDINDC),XX(LDINDDC),
     *           XX(LDIND_W),XX(LDIND_C),
     *           NPTTPT,XX(LDIPNEW),XX(LDIPNWD),
     *           XX(LEWLD1),XX(LEWLD2),NFRG)
      CALL RETFM(NEED)
C
C     EFP-EFP INTERACTION ENERGY
C
      IPCOUNT = ME - 1
      EFPEFP = ZERO
      DO 24 LEFP=1,NPTTPT
        IF (GOPARR) THEN
          IPCOUNT = IPCOUNT + 1
          IF (MOD(IPCOUNT,NPROC).NE.0) THEN
            GO TO 24
          END IF
        END IF
C
C       FIELD JUST DUE TO EFP
C
        PEFPX=PPEFX(LEFP)
        PEFPY=PPEFY(LEFP)
        PEFPZ=PPEFZ(LEFP)
C
C       INDUCED DIPOLE
C
        PMUX   =  DIND(1,LEFP)
        PMUY   =  DIND(2,LEFP)
        PMUZ   =  DIND(3,LEFP)
        PMUXD  = DINDD(1,LEFP)
        PMUYD  = DINDD(2,LEFP)
        PMUZD  = DINDD(3,LEFP)
        TOTMUX = PMUX + PMUXD
        TOTMUY = PMUY + PMUYD
        TOTMUZ = PMUZ + PMUZD
C
        EFPEFP = EFPEFP - ( TOTMUX*PEFPX
     *                     +TOTMUY*PEFPY
     *                     +TOTMUZ*PEFPZ)*PT5*PT5
CZ
        IF (DOEFPIEA) THEN
          CALL EFEFIEA(LEFP,XX(LEFEFPT),XX(LDOCNT),TOTMUX,TOTMUY,TOTMUZ)
        END IF
CZ
 24   CONTINUE
CZ
      IF (DOEFPIEA) THEN
        CALL RETFM(NDIEA)
        CALL DDI_GSUMF(683,XX(LEFEFPT),NPALL*3)
        DOEFPIEA = .FALSE.
      END IF
CZ
C
      IF (GOPARR) CALL DDI_GSUMF(684,EFPEFP,1)
      REPNUCEFP = REPNUCEFP + EFPEFP
      IF (MASWRK) THEN
        WRITE(6,'(A,F16.8)') ' PURE EFP-EFP CONTRIBUTION', REPNUCEFP
      END IF
CZ
      ! COMPENSATION
      IF (IEFPFMO.EQ.2) REPNUCEFP = REPNUCEFP - EFPEFP
CZ
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPFMODER
      SUBROUTINE EFPFMODER(NDER,DEFTF,TORQF,DEFEF)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      PARAMETER (MXATM=2000, MXSHEF=1000, MXGEFP=4000,
     *           MXPT=2000, MXFRG=1050, MXFGPT=12000, MXDFG=5,
     *           MXDPPT=MXFRG*MXDFG*12,MXIFRQ=12)
C
      DIMENSION DEFTF(3,*), TORQF(3,*), DEFEF(6,*)
C
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NATEF(MXDFG),NUMEF(MXDFG),NTPATM
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /EFPGCX/ DCTFRG(6,MXFRG),DXRFRG(6,MXFRG)
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /FMCOM / XX(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
C
C     THIS SUBROUTINE IS IN WORLD SCOPE
C
C     (1). THIS SUBROUTINE CALCULATES FIELD AT POLARIZABLE POINTS
C          DUE TO MULTIPOLES IN FRGFLD --> GET PPEFX TO PPEFZ
C
C     (2). DERIVATIVES OF PURE EFP-EFP INDUCED DIPOLES IN DEFEFIND
C          AND DERIVATIVES OF THE PURE EFP-EFP EXCHANGE REPULSION 
C          IN DEFEFREP
C
C     NOTE: MULT-MULT DERIV. ARE CALCULATED IN ENUC (CALL FFELEC)
C           CONTRIBUTIONS ARE STORED IN DESFRG.
C
      ISWENUC = 1
      TMPNUC  = 0.0D+00 
      TMPNUC  = TMPNUC+ENUC(NAT,ZAN,C)
      ISWENUC = 0
C
      IF (NFRG.LE.1) RETURN
      IF (IEFP.EQ.1) THEN
        CALL FRGFLD
        CALL EFEFIND(NDER)
      END IF
      IF (NDER.GT.0) THEN
        NFRPTS = NMTTPT + NPTTPT + NRTTPT + NTPATM + NTMO + NDTTPT
        CALL VALFM(LOADFM)
        LEF3 = LOADFM + 1
        LAST = LEF3   +  3*NFRPTS
        NEED = LAST - LOADFM - 1
        CALL GETFM(NEED)
C
C       DEFEFIND: EFP-EFP INDUCED DIPOLE DERIVATIVES
C       FOR IEFPFMO=2, THIS CONTRIBUTION IS CALCULATED AFTER FMO-SCC.
C
        IF (IEFPFMO.EQ.1) CALL DEFEFIND(DIND,DINDD,DEFEF)
C
C       THE DERIVATIVES OF EFP-EFP EXCHANGE REPULSION
C
        CALL EFEFDER(XX(LEF3))
C
        CALL RETFM(NEED)
C
        IF(GOPARR) CALL DDI_GSUMF(778,DESFRG,6*MXFRG)
        IF (MASWRK) THEN
          DO IFRG = 1, NFRG
            DO ICRD = 1, 3
              DEFTF(ICRD,IFRG) = DEFTF(ICRD,IFRG) + DCTFRG(ICRD,IFRG)
     *                                            + DXRFRG(ICRD,IFRG)
     *                                            + DESFRG(ICRD,IFRG)
     *                                            + DEFEF(ICRD,IFRG)
              TORQF(ICRD,IFRG) = TORQF(ICRD,IFRG) + DCTFRG(ICRD+3,IFRG)
     *                                            + DXRFRG(ICRD+3,IFRG)
     *                                            + DESFRG(ICRD+3,IFRG)
     *                                            + DEFEF(ICRD+3,IFRG)
            END DO
          END DO
C
          NFRG_3 = 3*NFRG
          DO I = 1, NBODY - 1
            CALL DCOPY(NFRG_3,DEFTF,1,XX(LDEFTF+NFRG_3*I),1)
            CALL DCOPY(NFRG_3,TORQF,1,XX(LTORQF+NFRG_3*I),1)
          END DO
        END IF
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK IEAMEM1
      SUBROUTINE IEAMEM1(LAST)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOEFPIEA
C
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
C
      IF (IEACAL.EQ.0) RETURN
C
      MAXPTS = MAX(NMTTPT,NPTTPT,NRTTPT,NDPTTPT)
      LIPFMO   = LAST
      LIPEFP   = LIPFMO   +  NFG
      LIOFMO   = LIPEFP   +  NFRG
      LIOEFP   = LIOFMO   +  NFG
      LIEATF   = LIOEFP   +  NFRG
      LNPT2FRG = LIEATF   +  NATFMO
      LIEACNT  = LNPT2FRG +  MAXPTS
      LAST     = LIEACNT  +  7
C
      RETURN
      END
C*MODULE EFPFMO  *DECK IEAMEM2
      SUBROUTINE IEAMEM2(LAST,IOEFP,IOFMO,IEATF,INDAT,IEACNT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12)
C
      LOGICAL DOEFPIEA
      DIMENSION IOEFP(*), IOFMO(*), IEATF(*), INDAT(*), IEACNT(*)
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
     *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
CZ
CZ
      IF (IEACAL.EQ.0) RETURN
C
C     GENERATE IEATF
C
      CALL VICLR(IEATF,1,NATFMO)
      NATFIEA = 0
      DO I = 1, NFGIEA
        IOF = IOFMO(I)
        DO J = 1, NATFMO
          IF (INDAT(J).EQ.IOF) THEN
            NATFIEA  = NATFIEA + 1
            IEATF(J) = NATFIEA
          END IF
        END DO
      END DO
C
C     ALLOCATE MEMORY SPACE FOR IEA
C
      MXEFPT1 = 0
      NPALL   = 0
      DO I = 1, NFRGIEA
        IPEFPC  = IOEFP(I)
        MXEFPT1 = MAX(MXEFPT1, NMPTS(IPEFPC))
        MXEFPT1 = MAX(MXEFPT1, NPPTS(IPEFPC))
        MXEFPT1 = MAX(MXEFPT1, NRPTS(IPEFPC))
        MXEFPT1 = MAX(MXEFPT1,NDPPTS(IPEFPC))
        NPALL   = NPALL + NPPTS(IPEFPC)
      END DO
      MXEFPT = 1
      MAXPOL = 1
      IF (IAND(NPRIEA, 8).NE.0) MXEFPT = MXEFPT1
      IF (IAND(NPRIEA,12).NE.0) MAXPOL = MXEFPT1*NFRGIEA
C
C     LTMPOL   : TMPREM
C     LTMPOL+1~: TMPOL
C
      LEFEFPT = LAST
      LTMPOL  = LEFEFPT + NPALL*3
      LAST    = LTMPOL  + MAXPOL*MAXNAT*IEABDY + 1
C
      LEFPIEA = LAST
      IF (IAND(NPRIEA,10).NE.0) THEN
        LAST  = LEFPIEA + MXEFPT*NFRGI1*NATFIEA*8
      END IF
      LFGINT  = LAST
      IF (IAND(NPRIEA, 5).NE.0) THEN
        LAST  = LFGINT  + NFGIEA*NFRGI2*8
      END IF
C
      IF (ITRLVL.EQ.2) THEN
        IEACNT(1) = IEFC
        IEACNT(2) = IEFD
        IEACNT(3) = IEFQ
        IEACNT(4) = IEFO
        IEACNT(5) = IEFP
        IEACNT(6) = IREP
        IEACNT(7) = IEFPFMO
        IEFC      = 0
        IEFD      = 0
        IEFQ      = 0
        IEFO      = 0
        IEFP      = 0
        IREP      = 0
        IEFPFMO   = 0
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK CALCIEA
      SUBROUTINE CALCIEA(L1,L2,DA,DLD,IBODY,IEADA2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOEFPIEA
      LOGICAL DOMONO,DODIPO,DOQUAD,DOOCTU
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION DA(1),DLD(1)
C
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (MXATM=2000,MXFGPT=12000,MXPT=2000)
      COMMON /DOMULT/ DOMONO(MXFGPT),DODIPO(MXFGPT),DOQUAD(MXFGPT),
     *                DOOCTU(MXFGPT)
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /FMCOM / X(1)
      COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
     *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
CZ    COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,LIACTFG,lcrfrg,
     *                lzlmfrgv
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
C
C     MAIN DRIVER OF FMO/EFP ENERGY DECOMPOSITION ANALYSIS
C      DD: FRAGMENT DENSITY (DD=DLD FOR MONOMERS)
C     DLD: DELTA D_IJ(K) IN DIMER OR TRIMER
C
      IF (IBODY.GT.IEABDY) RETURN
      CALL TIMIT(1)
      IF (MASWRK) WRITE(IW,9000)
CZ
      IF (ITRLVL.EQ.2) THEN
        IEFC    = IXFTCH(X(LIEACNT),1)
        IEFD    = IXFTCH(X(LIEACNT),2)
        IEFQ    = IXFTCH(X(LIEACNT),3)
        IEFO    = IXFTCH(X(LIEACNT),4)
        IEFP    = IXFTCH(X(LIEACNT),5)
        IREP    = IXFTCH(X(LIEACNT),6)
        IEFPFMO = IXFTCH(X(LIEACNT),7)
      END IF
CZ
C
      IFLAG = 0
      DO II = 1, NFGIEA
        IOF = IXFTCH(X(LIOFMO),II)
        IF (IOF.EQ.ICURFG) IFLAG = IFLAG + 1
      END DO
      IF (IFLAG.EQ.0) RETURN
      IF (IFLAG.GT.1) THEN
        IF (MASWRK) WRITE(IW,*) 'IOFMO IS WRONG. CHECK EFFMOIN'
        CALL ABRT
      END IF
C
      DOEFPIEA = .TRUE.
C
      NPMAX = MAX(NMTTPT,NPTTPT,NRTTPT,NDTTPT)
C
      NEFPTMP = IEFC + IEFD + IEFQ + IEFO + IEFP + IREP
      IF (NEFPTMP.GT.0) THEN
        CALL VALFM(LOADFM)
        LWRKIEA  = LOADFM   + 1
        LDOCNT   = LWRKIEA  + NFRGI2*225
        IF (IAND(NPRIEA,8).NE.0) THEN
          LDOCNT   = LWRKIEA  + NFRGI1*MXEFPT*225
        END IF
        LTMP     = LDOCNT   + NPMAX
        LAST     = LTMP     + L2
        NEED = LAST - LOADFM - 1
        CALL GETFM(NEED)
      END IF
C
CZ
CZ    THE FOLLOWINGS ARE JUST DUMMY ARRAYS HERE.
CZ
      LDUM = LAST
      LDAV = 1
CZ
      IF(IEFC.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NMTTPT,DOMONO,X(LDOCNT),X(LIOEFP),NMPTS)
        IF (IBODY.EQ.1) DUM = ENUCC(NAT,ZAN,C)
C       IF (MASWRK) WRITE(6,'(A,F12.2)') 'ENUCC',DUM*2625.5
        IF (IEADA.NE.0) CALL EFCINT(DLD,X(LWRKIEA))
        CALL LOGIEA(0,NFRGIEA,NMTTPT,X(LDOCNT),DOMONO,X(LIOEFP),NMPTS)
      END IF
      IF(IEFD.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NMTTPT,DODIPO,X(LDOCNT),X(LIOEFP),NMPTS)
        IF (IBODY.EQ.1) DUM = ENUCD(NAT,ZAN,C)
C       IF (MASWRK) WRITE(6,'(A,F12.2)') 'ENUCD',DUM*2625.5
        IF (IEADA.NE.0) CALL EFDINT(DLD,X(LWRKIEA),X(LDUM),X(LDUM),LDAV,
     *                              X(LDUM),X(LDUM))
        CALL LOGIEA(0,NFRGIEA,NMTTPT,X(LDOCNT),DODIPO,X(LIOEFP),NMPTS)
      END IF
      IF(IEFQ.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NMTTPT,DOQUAD,X(LDOCNT),X(LIOEFP),NMPTS)
        IF (IBODY.EQ.1) DUM = ENUCQ(NAT,ZAN,C)
C       IF (MASWRK) WRITE(6,'(A,F12.2)') 'ENUCQ',DUM*2625.5
        IF (IEADA.NE.0) CALL EFQINT(DLD,X(LWRKIEA),X(LDUM),X(LDUM),LDAV,
     *                              X(LDUM),X(LDUM))
        CALL LOGIEA(0,NFRGIEA,NMTTPT,X(LDOCNT),DOQUAD,X(LIOEFP),NMPTS)
      END IF
      IF(IEFO.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NMTTPT,DOOCTU,X(LDOCNT),X(LIOEFP),NMPTS)
        IF (IBODY.EQ.1) DUM = ENUCO(NAT,ZAN,C)
C       IF (MASWRK) WRITE(6,'(A,F12.2)') 'ENUCO',DUM*2625.5
        IF (IEADA.NE.0) CALL EFOINT(DLD,X(LWRKIEA),X(LDUM),X(LDUM),LDAV,
     *                              X(LDUM),X(LDUM))
        CALL LOGIEA(0,NFRGIEA,NMTTPT,X(LDOCNT),DOOCTU,X(LIOEFP),NMPTS)
      END IF
C
C          NEVER EXECUTED LINE TO QUIET FTNCHEK ABOUT COMPUTING DUM.
      IF(IW.LT.0  .AND.  MASWRK) WRITE(6,*) 'NUCLEAR TERM=',DUM
C 
C     IN THE POL CASE, THE FRAGMENT DENSITY DD IS DIRECTLY USED
C 
      CALL TIMIT(1)
      IF (IEFP.EQ.1) THEN
        CALL VCLR(X(LTMPOL),1,MAXPOL*MAXNAT*IEABDY+1)
C
        CALL VALFM(LOADFM)
        LDIP   = LOADFM + 1
        LODIP  = LDIP   + L2
        LXEFI  = LODIP  + L2
        LYEFI  = LXEFI  + L2
        LZEFI  = LYEFI  + L2
        LEFLD  = LZEFI  + L2
        LEFADD = LEFLD  + 3*NPTTPT
        LABFLD = LEFADD + 3*NPTTPT
        LAST   = LABFLD + 3*NPTTPT
        NEED1  = LAST - LOADFM - 1
        CALL GETFM(NEED1)
C
        CALL LOGIEA(1,NFRGIEA,NPTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NPPTS)
CZ      CALL EFPCMP(X(LODIP),X(LODIP),X(LODIP),DLD,X(LDIP),X(LODIP),
        CALL EFPCMP(DLD,DLD,DLD,DA,X(LDIP),X(LODIP),
     *              X(LXEFI),X(LYEFI),X(LZEFI),X(LEFLD),X(LEFADD),
     *              X(LABFLD),L2,L1,0)
        CALL RETFM(NEED1)
C
C       COPY THE POL CONTRIBUTIONS TO EFPIEA
C
        CALL CPIEAPOL(IBODY,NAT,NPPTS,IEADA2,X(LDOCNT),X(LIEATF),
     *                X(LIAGLOB),X(LINDAT),X(LTMPOL),X(LTMPOL+1),
     *                X(LEFPIEA),X(LFGINT))
      END IF
C
      IF (IREP.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NRTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NRPTS)
        CALL REPINT(DLD,X(LWRKIEA),X(LDOCNT))
      END IF
C
C
      DOEFPIEA = .FALSE.
      IF (NEFPTMP.GT.0) CALL RETFM(NEED)
CZ
      IF (ITRLVL.EQ.2) THEN
        IEFC      = 0
        IEFD      = 0
        IEFQ      = 0
        IEFO      = 0
        IEFP      = 0
        IREP      = 0
        IEFPFMO   = 0
      END IF
CZ
      CALL TIMIT(1)
      IF (MASWRK) WRITE(IW,9010)
C
      RETURN
 9000 FORMAT(1X,'FMO/EFP IEA CALC. STARTS')
 9010 FORMAT(1X,'CALCULATED ALL FMO/EFP IEA CONTRIBUTIONS')
      END
C*MODULE EFPFMO  *DECK LOGIEA
      SUBROUTINE LOGIEA(IMODE,NFRGIEA,NFGPT,DOIN,DOOUT,IOEFP,NPTS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOIN, DOOUT
      DIMENSION DOIN(1), DOOUT(1)
      DIMENSION IOEFP(1),NPTS(1)
C
C
C     IMODE = 0: JUST COPY DOIN INTO DOOUT
C     IMODE = 1: COPY DOIN INTO DOOUT AND THEN CHANGE DOIN
C
      DO II = 1, NFGPT
        DOOUT(II) = DOIN(II)
      END DO
C
      IF (IMODE.EQ.1) THEN
        DO II = 1, NFGPT
          DOIN(II) = .FALSE.
        END DO
        DO II = 1, NFRGIEA
          IST = 0
          IED = 0
          DO JJ = 1, IOEFP(II)
            IST = IED + 1
            IED = IED + NPTS(JJ)
          END DO
          DO JJ = IST, IED
            DOIN(JJ) = .TRUE.
          END DO
        END DO
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK GETNPT2FRG
      SUBROUTINE GETNPT2FRG(NTOTPT,NPT2FRG,NPTS,IOEFP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOEFPIEA
      DIMENSION NPT2FRG(1), NPTS(1), IOEFP(1)

      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
C
      CALL VCLR(NPT2FRG,1,NTOTPT)
      DO IFR = 1, NFRGIEA
        IFRG = IOEFP(IFR)
        IST  = 1
        DO IFF = 1, IFRG-1
          IST = IST + NPTS(IFF)
        END DO
        IED = IST + NPTS(IFRG) - 1
        DO IFF = IST, IED 
          NPT2FRG(IFF) = IFR
        END DO
      END DO

      RETURN
      END
C*MODULE EFPFMO  *DECK GETCHX
      SUBROUTINE GETCHX(IMUL,IJ,NPT2FRG,DOMUL,CHXINT,SQWRK)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOMUL, DOEFPIEA
      DIMENSION CHXINT(1), SQWRK(225,*)
      DIMENSION DOMUL(1)
      DIMENSION NPT2FRG(1)
C
CZ    COMMON /FMCOM / X(1)
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
cz    COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
cz   *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
C
C     TRICKY: FOR IAND(NPRIEA,4).NE.0, THERE ARE TWO WAYS
C             WHEN IAND(NPRIEA,12).NE.0 SHARES SQWRK
C             1. SQWRK HAS DIMENSION OF 225*NFRGIEA*MXEFPT
C                WHEN IAND(NPRIEA,8).NE.0
C             2. SQWRK HAS DIMENSION OF 225*NFRGIEA
C                OTHERWISE
C
      ICNT = 0
      IF (IAND(NPRIEA,12).EQ.0) ICNT = 1
      IF (IAND(NPRIEA,12).EQ.4) THEN
        ICNT = NPT2FRG(IMUL)
      END IF
      IF (IAND(NPRIEA,8).NE.0) THEN
        DO I = 1, IMUL
          IF (DOMUL(I)) ICNT = ICNT + 1
        END DO
      END IF
      IF (ICNT.EQ.0) RETURN
C
      CALL VADD(SQWRK(1,ICNT),1,CHXINT,1,SQWRK(1,ICNT),1,IJ)
C
      RETURN
      END
C*MODULE EFPFMO  *DECK GETCNT
      SUBROUTINE GETCNT(IAT,JAT,MINI,MAXI,MINJ,MAXJ,LOCI,LOCJ,IANDJ,
     *                  ITYP,NPTS,DD,SQWRK,EFPIEA,FGINT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ
      LOGICAL DOEFPIEA
CZ    LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (AU2KJ=2625.5D+00, ZERO=0.0D+00, PT5=0.5D+00)
      DIMENSION DD(1), SQWRK(225,*)
      DIMENSION EFPIEA(MXEFPT*NFRGI1,NATFIEA,*)
      DIMENSION FGINT(NFGIEA,NFRGI2,*)
      DIMENSION NPTS(1)
C
      COMMON /FMCOM / X(1)
CZ    COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
CZ    COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,LIACTFG,lcrfrg,
     *                lzlmfrgv
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
CZ
CZ    <IAT|V^EFP|JAT>
CZ
      EADA = IEADA
      IATG = IXFTCH(X(LIAGLOB),IAT)
      IATC = IXFTCH(X(LIEATF),IATG)
      JATG = IXFTCH(X(LIAGLOB),JAT)
      JATC = IXFTCH(X(LIEATF),JATG)
      IF (IATC.EQ.0.AND.JATC.EQ.0) RETURN
C
C     FMO FRAGMENTS
      IF (IAND(NPRIEA,5).NE.0) THEN
        IFGT = IXFTCH(X(LINDAT),IATG)
        JFGT = IXFTCH(X(LINDAT),JATG)
        IIFG = 0
        JJFG = 0
        DO II = 1, NFGIEA
          IOF = IXFTCH(X(LIOFMO),II)
          IF (IOF.EQ.IFGT) IIFG = II
          IF (IOF.EQ.JFGT) JJFG = II
        END DO
        IF (IIFG.EQ.0.OR.JJFG.EQ.0) RETURN
      END IF
C
      IF (IAND(NPRIEA,8).NE.0) THEN
        IEFPT = 0
        DO IFR = 1, NFRGIEA
          IFRG = IXFTCH(X(LIOEFP),IFR)
          IST  = 1
          DO IFF = 1, IFRG-1
            IST = IST + NPTS(IFF)
          END DO
          IED = IST + NPTS(IFRG) - 1
          DO IIPT = IST, IED
            IEFPT = IEFPT + 1
            AA = ZERO
            MAX = MAXJ
            NN = 0
            DO I = MINI,MAXI
               LI = LOCI+I
               IN = (LI*(LI-1))/2
               IF (IANDJ) MAX = I
               DO J = MINJ,MAX
                  LJ = LOCJ+J
                  JN = LJ+IN
                  NN = NN+1
                  DUM = DD(JN)
                  IF (LI.EQ.LJ) DUM = DUM * PT5
                  AA = AA + SQWRK(NN,IEFPT) * DUM
               END DO
            END DO
CZ          AA = AA * AU2KJ
            AA = AA * AU2KJ * EADA
            IF (IATC.NE.0) EFPIEA(IEFPT,IATC,ITYP)
     *                    =EFPIEA(IEFPT,IATC,ITYP) + AA
            IF (JATC.NE.0) EFPIEA(IEFPT,JATC,ITYP)
     *                    =EFPIEA(IEFPT,JATC,ITYP) + AA
            IF (IAND(NPRIEA,4).NE.0) THEN
              FGINT(IIFG,IFR,ITYP) = FGINT(IIFG,IFR,ITYP) + AA
              FGINT(JJFG,IFR,ITYP) = FGINT(JJFG,IFR,ITYP) + AA
            END IF
          END DO
        END DO
      END IF
C
C
C     EXCLUDE 8 FROM NPRIEA
C
      IF (IAND(NPRIEA,12).EQ.4) THEN
        DO IFR = 1, NFRGIEA
          AA = ZERO
          MAX = MAXJ
          NN = 0
          DO I = MINI,MAXI
             LI = LOCI+I
             IN = (LI*(LI-1))/2
             IF (IANDJ) MAX = I
             DO J = MINJ,MAX
                LJ = LOCJ+J
                JN = LJ+IN
                NN = NN+1
                DUM = DD(JN)
                IF (LI.EQ.LJ) DUM = DUM * PT5
                AA = AA + SQWRK(NN,IFR) * DUM
             END DO
          END DO
CZ        AA = AA * AU2KJ
          AA = AA * AU2KJ * EADA
          FGINT(IIFG,IFR,ITYP) = FGINT(IIFG,IFR,ITYP) + AA
          FGINT(JJFG,IFR,ITYP) = FGINT(JJFG,IFR,ITYP) + AA
          IF (IAND(NPRIEA,2).NE.0) THEN
            EFPIEA(1,IATC,ITYP) = EFPIEA(1,IATC,ITYP) + AA
            EFPIEA(1,JATC,ITYP) = EFPIEA(1,JATC,ITYP) + AA
          END IF
        END DO
      END IF
C
C
C     EXCLUDE 8 AND 4 FROM NPRIEA
C
      IF (IAND(NPRIEA,12).EQ.0) THEN
        AA  = ZERO
        MAX = MAXJ
        NN = 0
        DO I = MINI,MAXI
           LI = LOCI+I
           IN = (LI*(LI-1))/2
           IF (IANDJ) MAX = I
           DO J = MINJ,MAX
              LJ = LOCJ+J
              JN = LJ+IN
              NN = NN+1
              DUM = DD(JN)
              IF (LI.EQ.LJ) DUM = DUM * PT5
              AA = AA + SQWRK(NN,1) * DUM
           END DO
        END DO
CZ      AA = AA * AU2KJ
        AA = AA * AU2KJ * EADA
        IF (IAND(NPRIEA,2).NE.0) THEN
          IF (IATC.NE.0) EFPIEA(1,IATC,ITYP) = EFPIEA(1,IATC,ITYP) + AA
          IF (JATC.NE.0) EFPIEA(1,JATC,ITYP) = EFPIEA(1,JATC,ITYP) + AA
        END IF
        IF (IAND(NPRIEA,1).NE.0) THEN
          FGINT(IIFG,1,ITYP) = FGINT(IIFG,1,ITYP) + AA
          FGINT(JJFG,1,ITYP) = FGINT(JJFG,1,ITYP) + AA
        END IF
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK GETPOLCNT
      SUBROUTINE GETPOLCNT(IPOL,NAT,IOFMO,DOPOL,EFEFPT,TMPREM,TMPOL,
     *                     DLD,C,Z,XEFI,YEFI,ZEFI,PEFX,PEFY,PEFZ,
     *                     TMUX,TMUY,TMUZ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ
      LOGICAL DOPOL, DOEFPIEA
CZ    LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXSH=5000,MXGTOT=20000,MXAO=8192,
     *           MXIFRQ=12,MXFGPT=12000)
C
      PARAMETER (PT5=0.5D+00)
      PARAMETER (AU2KJ=2625.5D+00)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, GLIM=1.0D-03)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      DIMENSION DOPOL(1),DLD(1)
      DIMENSION XEFI(1),YEFI(1),ZEFI(1),C(3,*),Z(1)
C     DIMENSION EFPIEA(MXEFPT*NFRGI1,NATFIEA,*)
      DIMENSION IOFMO(1)
      DIMENSION EFEFPT(3,*),TMPOL(MAXPOL,*)
C
CZ    COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /EFPBUF/ POLCHG(10),NBUFMO,LBUFF(MXAO),LBF,NAPOL,IAPOL(10)
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
cz    COMMON /EFPFM2/ FK_CNTP,POLTOT,LABFLDT,LDINDF2,LDINDDF2,LDELABFLD,
cz   *                LDELDIND,LDELDINDD
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FMCOM / X(1)
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,LIACTFG,lcrfrg,
     *                lzlmfrgv
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
C
C     A FACTOR OF 2 IN DENSITY IS CONPENSATED BY THE FACTOR OF 1/2
C     IN THE INDUCED DIPOLE POTENTIAL
C
      IF (.NOT.DOPOL(IPOL)) RETURN
C
      ICUE1 = 0
      DO I = 1, IPOL
        IF (DOPOL(I)) ICUE1 = ICUE1 + 1
      END DO
      IF (IAND(NPRIEA, 3).NE.0) ICUE = 1
      IF (IAND(NPRIEA,12).NE.0) ICUE = ICUE1
C
      ICUF = 0
      DO II = 1, NFGIEA
        IF (IOFMO(II).EQ.ICURFG) ICUF = II
      END DO
      IF (ICUF.EQ.0) THEN
        WRITE(IW,*) 'THERE IS A BUG IN IEA CODE'
        CALL ABRT
      END IF
C
C     DINDX TO DINDDZ ARE THE INDUCED DIPOLES DUE TO THE MULTIPOLES

C     THIS PART IS A CLONE OF SUBROUTINE EFNUCP
C     TOTAL INDUCED DIPLE * FIELD DUE TO AB INITIO NUCLEI
C
      IF (IFMOSTP.EQ.2) THEN
      IF (NBUFMO .EQ. 0) THEN
        DO J = 1,NAT
          IATG = IXFTCH(X(LIAGLOB),J)
          IATC = IXFTCH(X(LIEATF),IATG)
          RR = ZERO
          DO K = 1,3
            RR = RR + (EFP(K,IPOL) - C(K,J))**2
          END DO
          IF(IATC.NE.0.AND.RR.GE.GLIM) THEN
            FACT=ONE
            RR3 = RR * SQRT(RR)
CZ          PNX(J) = PNX(J) + FACT*Z(J) *(EFP(1,IPOL)-C(1,J))/RR3
CZ          PNY(J) = PNY(J) + FACT*Z(J) *(EFP(2,IPOL)-C(2,J))/RR3
CZ          PNZ(J) = PNZ(J) + FACT*Z(J) *(EFP(3,IPOL)-C(3,J))/RR3
            TMP = FACT*Z(J)/RR3
            TX = TMP*(EFP(1,IPOL)-C(1,J))
            TY = TMP*(EFP(2,IPOL)-C(2,J))
            TZ = TMP*(EFP(3,IPOL)-C(3,J))
C           AA = -PT5*PT5*( (TMUX+DINDTX)*TX
C    *                     +(TMUY+DINDTY)*TY
C    *                     +(TMUZ+DINDTZ)*TZ)
            AA = -PT5*PT5*(TMUX*TX+TMUY*TY+TMUZ*TZ)
            AA = AA *AU2KJ
CZCZ        EFPIEA(ICUE,IATC,5)=EFPIEA(ICUE,IATC,5)+AA
            TMPOL(ICUE,J) = TMPOL(ICUE,J) + AA
          END IF
        END DO
      ELSE
C       ---TAKE INTO ACCOUNT POSSIBLE PRESENCE OF BUFFER IN QM/MM ----
C       INTERACTIONS ONLY WITH THE AB INITIO ZONE NUCLEI AND
C       THE 'BORDER' ATOMS WITH A SPECIAL CHARGE ARE CONSIDERED ONLY
CZCZ
        WRITE(IW,*) 'IEA IS NOT IMPLEMENTED WITH EFP-QM/MM-LIKE SCHEME'
        CALL ABRT
CZCZ
        NATAB = NAT - LBF
        DO JJ = 1, NATAB + NAPOL
          IF(JJ.GT.NATAB) THEN
            NUMP=JJ-NATAB
            J=IAPOL(NUMP)
            CHARGE=POLCHG(NUMP)
          ELSE
            J=JJ
            CHARGE=Z(J)
          END IF
          IATG = IXFTCH(X(LIAGLOB),J)
          IATC = IXFTCH(X(LIEATF),IATG)
          RR = ZERO
          DO K = 1,3
            RR = RR + (EFP(K,IPOL) - C(K,J))**2
          END DO
          IF(IATC.NE.0.AND.RR.GE.GLIM) THEN
            FACT=ONE
            RR3 = RR * SQRT(RR)
CZ          PNX(J) = PNX(J) + FACT*CHARGE *(EFP(1,IPOL)-C(1,J))/RR3
CZ          PNY(J) = PNY(J) + FACT*CHARGE *(EFP(2,IPOL)-C(2,J))/RR3
CZ          PNZ(J) = PNZ(J) + FACT*CHARGE *(EFP(3,IPOL)-C(3,J))/RR3
            TMP = FACT*CHARGE/RR3
            TX = TMP*(EFP(1,IPOL)-C(1,J))
            TY = TMP*(EFP(2,IPOL)-C(2,J))
            TZ = TMP*(EFP(3,IPOL)-C(3,J))
C           AA = -PT5*PT5*( (TMUX+DINDTX)*TX
C    *                     +(TMUY+DINDTY)*TY
C    *                     +(TMUZ+DINDTZ)*TZ)
            AA = -PT5*PT5*(TMUX*TX+TMUY*TY+TMUZ*TZ)
            AA = AA * AU2KJ
CZCZ        EFPIEA(ICUE,IATC,5)=EFPIEA(ICUE,IATC,5)+AA
            TMPOL(ICUE,J) = TMPOL(ICUE,J) + AA
          END IF
        END DO
      END IF
      END IF
C
C
C     TOTAL INDUCED DIPLE * FIELD DUE TO AB INITIO ELECTRON DENSITY
C
      DO II=1,NSHELL
        IAT=KATOM(II)
        MINI=KMIN(II)
        MAXI=KMAX(II)
        LOCI=KLOC(II)-MINI
        IATG = IXFTCH(X(LIAGLOB),IAT)
        IATC = IXFTCH(X(LIEATF),IATG)
        IF (IATC.NE.0) THEN
          DO JJ=1, II
            JAT=KATOM(JJ)
            MINJ=KMIN(JJ)
            MAXJ=KMAX(JJ)
            LOCJ=KLOC(JJ)-MINJ
            JATG = IXFTCH(X(LIAGLOB),JAT)
            JATC = IXFTCH(X(LIEATF),JATG)
            IF (JATC.NE.0) THEN
              IANDJ = II .EQ. JJ
              MAX=MAXJ
              DO I=MINI,MAXI
                LI=LOCI+I
                IN= (LI*(LI-1))/2
                IF(IANDJ) MAX=I
                DO J=MINJ,MAX
                  LJ=LOCJ+J
                  JN=LJ+IN
                  DUM = DLD(JN) * PT5 * PT5
                  IF (LI.EQ.LJ) DUM = DUM * PT5
C                 AA = -( (TMUX+DINDTX)*XEFI(JN)
C    *                   +(TMUY+DINDTY)*YEFI(JN)
C    *                   +(TMUZ+DINDTZ)*ZEFI(JN))*DUM
                  AA = -( TMUX*XEFI(JN)
     *                   +TMUY*YEFI(JN)
     *                   +TMUZ*ZEFI(JN))*DUM
                  AA = AA * AU2KJ
CZ                EFPIEA(ICUE,IATC,5)=EFPIEA(ICUE,IATC,5)+AA
CZ                EFPIEA(ICUE,JATC,5)=EFPIEA(ICUE,JATC,5)+AA
                  TMPOL(ICUE,IAT) = TMPOL(ICUE,IAT) + AA
                  TMPOL(ICUE,JAT) = TMPOL(ICUE,JAT) + AA
                END DO
              END DO
            END IF
C
          END DO
        END IF
C
      END DO
C
C     REMINDING TERM: HARD TO DECOMPOSE
C
      IF (IEFPFMO.EQ.1) THEN
        TMPREM = TMPREM
     *         - PT5*PT5*( (TMUX-EFEFPT(1,ICUE1))*PEFX
     *                    +(TMUY-EFEFPT(2,ICUE1))*PEFY
     *                    +(TMUZ-EFEFPT(3,ICUE1))*PEFZ)*AU2KJ
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK CPIEAPOL
      SUBROUTINE CPIEAPOL(IBODY,NAT,NPPT1,IEADA2,DOPOL,IEATF,IAGLOB,
     *                    INDAT,TMPREM,TMPOL,EFPIEA,FGINT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOEFPIEA, DOPOL
      DIMENSION DOPOL(1),IEATF(1),IAGLOB(1),INDAT(1),NPPT1(1)
      DIMENSION TMPOL(MAXPOL,*),EFPIEA(MXEFPT*NFRGI1,NATFIEA,*)
      DIMENSION FGINT(NFGIEA,NFRGI2,*)
C
      COMMON /FMCOM / X(1)
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
C
      IF (IEADA.EQ.0) RETURN
      EADA = IEADA
      ! IN NEW FMO/EFP, POLARIZATION ENERGY DIFFERENCES 
      ! SHOULD BE MULTIPLIED BY TWO AGAINST MONOMER CONT.
      IF (IEFPFMO.EQ.2.AND.IBODY.GE.2) EADA = 2.0D+00 
C
      IF (IAND(NPRIEA,12).NE.0) THEN
        ICUE = 0
        DO IFR = 1, NFRGIEA
          IFRG = IXFTCH(X(LIOEFP),IFR)
          IST  = 1
          DO IFF = 1, IFRG-1
            IST = IST + NPPT1(IFF)
          END DO
          IED = IST + NPPT1(IFRG) - 1
          DO IIPT = IST, IED
            IF (DOPOL(IIPT)) THEN
              ICUE = ICUE + 1
              DO IATF = 1, NAT
                IATG = IAGLOB(IATF)
                IATC = IEATF(IATG)
                IIFG = INDAT(IATG)
                IF (IATC.NE.0) THEN
                  TMP1 = EADA*TMPOL(ICUE,IATF)
                  IF (IAND(NPRIEA,8).NE.0) THEN
                    EFPIEA(ICUE,IATC,5) = EFPIEA(ICUE,IATC,5) + TMP1
                  ELSEIF (IAND(NPRIEA,2).NE.0) THEN
                    EFPIEA(1,IATC,5)    = EFPIEA(1,IATC,5)    + TMP1
                  END IF
C
                  IF (IAND(NPRIEA,5).NE.0) THEN
                    IFGT = 0
                    DO II = 1, NFGIEA
                      IOF = IXFTCH(X(LIOFMO),II)
                      IF (IOF.EQ.IIFG) IFGT = II
                    END DO
                  END IF
                  IF (IAND(NPRIEA,4).NE.0) THEN
                    IF (IFGT.NE.0)
     *              FGINT(IFGT,IFR,5) = FGINT(IFGT,IFR,5) + TMP1
                  ELSEIF (IAND(NPRIEA,1).NE.0) THEN
                    IF (IFGT.NE.0)
     *              FGINT(IFGT,1,5)   = FGINT(IFGT,1,5)   + TMP1
                  END IF
                END IF
              END DO
            END IF
          END DO
        END DO
      END IF
C
      IF (IAND(NPRIEA,3).NE.0) THEN
        DO IATF = 1, NAT
           IATG = IAGLOB(IATF)
           IATC = IEATF(IATG)
           IIFG = INDAT(IATG)
           IF (IATC.NE.0) THEN
             TMP1 = EADA*TMPOL(1,IATF)
             IF (IAND(NPRIEA,10).EQ.2) THEN
               EFPIEA(1,IATC,5) = EFPIEA(1,IATC,5) + TMP1
             END IF
             IF (IAND(NPRIEA, 5).EQ.1) THEN
               IFGT = 0
               DO II = 1, NFGIEA
                 IOF = IXFTCH(X(LIOFMO),II)
                 IF (IOF.EQ.IIFG) IFGT = IIFG
               END DO
               IF (IFGT.NE.0) FGINT(IFGT,1,5) = FGINT(IFGT,1,5) + TMP1
             END IF
           END IF
        END DO
      END IF
C
      IF (IEFPFMO.EQ.1.AND.IEADA2.NE.0) THEN
        EADA2 = IEADA2
        REMPOL = REMPOL + EADA2*TMPREM
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK EFEFIEA
      SUBROUTINE EFEFIEA(LEFP,EFEFPT,DOPOL,TOTMUX,TOTMUY,TOTMUZ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOPOL
      DIMENSION EFEFPT(3,*), DOPOL(1)
C
C     IN EFEFIND, POLARIZATION CONTRIBUTIONS ARE CALCULATED
C     OUT: ICNT RETURNS THE MAX NUMBER OF EFEFPT MAT ELEMENTS
C
      IF (DOPOL(LEFP)) THEN
        ICNT = 0
        DO I = 1, LEFP
          IF (DOPOL(I)) ICNT = ICNT + 1
        END DO
        EFEFPT(1,ICNT) = EFEFPT(1,ICNT) + TOTMUX
        EFEFPT(2,ICNT) = EFEFPT(2,ICNT) + TOTMUY
        EFEFPT(3,ICNT) = EFEFPT(3,ICNT) + TOTMUZ
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPIEAOUT
      SUBROUTINE EFPIEAOUT(INDAT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL DOEFPIEA
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12,MXPT=2000)
      PARAMETER (ZERO=0.00D+00)
      DIMENSION INDAT(1)
C
      COMMON /FMCOM / X(1)
      COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
     *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
CZ
      IF (ITRLVL.EQ.2) THEN
        IEFC = 1
        IEFD = 1
        IEFQ = 1
        IEFO = 1
        IEFP = 1
        IREP = 1
      END IF
CZ
C
C
C     MEMORY ALLOCATION
C
      NPMAX = MAX(NMTTPT,NPTTPT,NRTTPT,NDTTPT)
      CALL VALFM(LOADFM)
      LDOCNT = LOADFM + 1
      LAST   = LDOCNT + NPMAX
CZCZ
      ! ATOM-ATOM INT
      IF (IAND(NPRIEA,8).NE.0) THEN
        LALLCNT = LAST
        LIATTMP = LALLCNT + MAXNAT*IEABDY
        LAST    = LIATTMP + MAXNAT*IEABDY
      END IF
CZCZ
      NEED   =  LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      TOTINT = ZERO
C
C     TYPE1: FMO-EFP MONOPOLE CONTRIBUTION
C
      IF (MASWRK) WRITE(IW,9000) IEABDY
      IF (IEFC.EQ.1) THEN
        IF (MASWRK) WRITE(IW,9005) 'MONOPOLE'
        CALL LOGIEA(1,NFRGIEA,NMTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NMPTS)
        CALL IEACNTOUT(1,NMTTPT,X(LEFPIEA),X(LDOCNT),X(LIOFMO),
     *         X(LIOEFP),X(LFGINT),X(LALLCNT),X(LIATTMP),
     *         NMPTS,INDAT,X(LIEATF),TOTINT)
      END IF
C
C     TYPE2: FMO-EFP DIPOLE CONTRIBUTION
C
      IF (IEFD.EQ.1) THEN
        WRITE(IW,9005) 'DIPOLE'
        CALL LOGIEA(1,NFRGIEA,NMTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NMPTS)
        CALL IEACNTOUT(2,NMTTPT,X(LEFPIEA),X(LDOCNT),X(LIOFMO),
     *         X(LIOEFP),X(LFGINT),X(LALLCNT),X(LIATTMP),
     *         NMPTS,INDAT,X(LIEATF),TOTINT)
      END IF
C
C
C     TYPE3: FMO-EFP QUADRUPOLE CONTRIBUTION
C
      IF (IEFQ.EQ.1) THEN
        WRITE(IW,9005) 'QUADRUPOLE'
        CALL LOGIEA(1,NFRGIEA,NMTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NMPTS)
        CALL IEACNTOUT(3,NMTTPT,X(LEFPIEA),X(LDOCNT),X(LIOFMO),
     *         X(LIOEFP),X(LFGINT),X(LALLCNT),X(LIATTMP),
     *         NMPTS,INDAT,X(LIEATF),TOTINT)
      END IF
C
C
C     TYPE4: FMO-EFP OCTUPOLE CONTRIBUTION
C
      IF (IEFO.EQ.1) THEN
        WRITE(IW,9005) 'OCTUPOLE'
        CALL LOGIEA(1,NFRGIEA,NMTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NMPTS)
        CALL IEACNTOUT(4,NMTTPT,X(LEFPIEA),X(LDOCNT),X(LIOFMO),
     *         X(LIOEFP),X(LFGINT),X(LALLCNT),X(LIATTMP),
     *         NMPTS,INDAT,X(LIEATF),TOTINT)
      END IF
C
      IF (IEFC+IEFD+IEFQ+IEFO.NE.0) WRITE(IW,9006) TOTINT
C
C
C     TYPE5: FMO-EFP POLARIZATION CONTRIBUTION
C
      IF (IEFP.EQ.1) THEN
        WRITE(IW,9010)
        CALL LOGIEA(1,NFRGIEA,NPTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NPPTS)
        CALL IEACNTOUT(5,NPTTPT,X(LEFPIEA),X(LDOCNT),X(LIOFMO),
     *         X(LIOEFP),X(LFGINT),X(LALLCNT),X(LIATTMP),
     *         NPPTS,INDAT,X(LIEATF),TOTINT)
      END IF
C
C
C     TYPE6: FMO-EFP REPULSION CONTRIBUTION
C
      IF (IREP.EQ.1) THEN
        WRITE(IW,9015)
        CALL LOGIEA(1,NFRGIEA,NRTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NRPTS)
        CALL IEACNTOUT(6,NRTTPT,X(LEFPIEA),X(LDOCNT),X(LIOFMO),
     *         X(LIOEFP),X(LFGINT),X(LALLCNT),X(LIATTMP),
     *         NRPTS,INDAT,X(LIEATF),TOTINT)
      END IF
C
C     TOTAL INTERACTION
C
      IF (MASWRK) THEN
        WRITE(IW,'(/A,F12.2/)') 'TOTAL FMO-EFP INTERACTION:',TOTINT
      END IF
C
      CALL RETFM(NEED)
CZ
      IF (ITRLVL.EQ.2) THEN
        IEFC = 0
        IEFD = 0
        IEFQ = 0
        IEFO = 0
        IEFP = 0
        IREP = 0
      END IF
CZ
      RETURN
 9000 FORMAT(/3X,50(1H-)/
     *        3X,'   FMO/EFP INTERACTION ENERGY ANALYSIS:',I4,'-BODY'/
     *        3X,50(1H-))
 9005 FORMAT(/3X,'  ELECTROSTATIC INTERACTION ENERGY CONTRIBUTION: ',A)
 9006 FORMAT(/3X,'  TOTAL ES INTERACTION ENERGY: ',F12.2)
 9010 FORMAT(/3X,'   POLARIZATION INTERACTION ENERGY CONTRIBUTION')
 9015 FORMAT(/3X,'    EXCH-REP/CT INTERACTION ENERGY CONTRIBUTION')
      END
C*MODULE EFPFMO  *DECK IEACNTOUT
      SUBROUTINE IEACNTOUT(ITYP,NEFPT,EFPIEA,DOCNT,IOFMO,IOEFP,
     *                     FGINT,ALLCNT,IATTMP,NPTS,INDAT,IEATF,TOTINT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ZERO=0.00D+00)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL DOCNT
      LOGICAL DOEFPIEA
C
      DIMENSION EFPIEA(MXEFPT*NFRGI1,NATFIEA,*)
      DIMENSION DOCNT(1),IOFMO(1),IOEFP(1)
      DIMENSION NPTS(1),INDAT(1)
      DIMENSION FGINT(NFGIEA,NFRGI2,*),ALLCNT(1),IATTMP(1)
      DIMENSION IEATF(1)
C
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C
      IFLAG = 1
C
      IF (MASWRK.AND.IAND(NPRIEA,8).NE.0) THEN
        ICNT = 0
        TOTCNT = ZERO
        DO I = 1, NEFPT
          IF (DOCNT(I)) THEN
            ICNT = ICNT + 1
C
            ! WHICH FRG. EFP POINT I BELONGS TO
            IPP = 0
            DO I1 = 1, NFRGIEA
              IST = 0
              IED = 0
              DO I2 = 1, IOEFP(I1)
                IST = IED + 1
                IED = IED + NPTS(I2)
              END DO
              IF (I.GE.IST.AND.I.LE.IED) THEN
                IPP = I1
                IST1 = IST
                IED1 = IED
              END IF
            END DO
C
            IF (IPP.NE.0) THEN
C
C             TYPE ALL CONTRIBUTIONS
C
              WRITE(IW,9000) IOEFP(IPP), IED1-IST1+1, I
              DO J = 1, NFGIEA
                KFG = IOFMO(J)
                IC = 0
                DO K = 1, NATFMO   ! ALL FMO ATOMS
                  IFG  = INDAT(K)
                  IATC = IEATF(K)
                  IF (IATC.NE.0.AND.IFG.EQ.KFG) THEN
                    IC = IC + 1
                    TTMP = EFPIEA(ICNT,IATC,ITYP)
                    TOTCNT = TOTCNT + TTMP
                    IATTMP(IC) = K
                    ALLCNT(IC) = TTMP
                  END IF
                END DO
                WRITE(IW,9005) KFG
                WRITE(IW,9006) (IATTMP(KK), KK=1,IC)
                WRITE(IW,9010) (ALLCNT(KK), KK=1,IC)
              END DO
            END IF
C
          END IF
        END DO
        IF (IFLAG.EQ.1) THEN
          TOTINT = TOTINT + TOTCNT
          WRITE(IW,9030) TOTCNT
          IFLAG = 0
        END IF
        ! VERY TRICKY PART
        IF (IAND(NPRIEA,2).NE.0) THEN
          DO IAT = 1, NATFMO
            IATC = IEATF(IAT)
            IF (IATC.NE.0) THEN
              TTMP = ZERO
              ICNT = 0
              DO IC = 1, NEFPT
                IF (DOCNT(IC)) THEN
                  ICNT = ICNT + 1
                  TTMP = TTMP + EFPIEA(ICNT,IATC,ITYP)
                END IF
              END DO
              EFPIEA(1,IATC,ITYP) = TTMP
            END IF
          END DO
        END IF
      END IF
C
CZ
CZ    FRG-FRG INTERACTION
CZ
      IF (MASWRK.AND.IAND(NPRIEA,4).NE.0) THEN
        WRITE(IW,9015)
        IJO  = NFRGIEA/8 + 1
        MMAX = 0
        DO LP = 1, IJO
          MMIN = MMAX + 1
          MMAX = MMAX + 8
          IF (LP.EQ.IJO) MMAX = NFRGIEA
          WRITE(IW,9020) (IOEFP(I),I=MMIN,MMAX)
          DO J = 1, NFGIEA
            WRITE(IW,9025) IOFMO(J),(FGINT(J,I,ITYP),I=MMIN,MMAX)
          END DO
        END DO
C
        IF (IFLAG.EQ.1) THEN
          TOTCNT = ZERO
          DO J = 1, NFRGIEA
            DO I = 1, NFGIEA
              TOTCNT = TOTCNT + FGINT(I,J,ITYP)
            END DO
          END DO
          WRITE(IW,9030) TOTCNT
          TOTINT = TOTINT + TOTCNT
          IFLAG = 0
        END IF
      END IF
C
      IF (MASWRK.AND.IAND(NPRIEA,1).NE.0) THEN
        WRITE(IW,9015)
        IF (IAND(NPRIEA,4).NE.0) THEN
          IF (ITYP.EQ.6) THEN
            WRITE(IW,9036)
            WRITE(IW,9038)
            DO IFG = 1, NFGIEA
              TMP1 = ZERO
              TMP2 = ZERO
              TMP3 = ZERO
              TMP4 = ZERO
              TMP5 = ZERO
              TMP6 = ZERO
              DO IFRG = 1, NFRGIEA
                TMP1 = TMP1 + FGINT(IFG,IFRG,1)
                TMP2 = TMP2 + FGINT(IFG,IFRG,2)
                TMP3 = TMP3 + FGINT(IFG,IFRG,3)
                TMP4 = TMP4 + FGINT(IFG,IFRG,4)
                TMP5 = TMP5 + FGINT(IFG,IFRG,5)
                TMP6 = TMP6 + FGINT(IFG,IFRG,6)
              END DO
              DUMTOT = TMP1+TMP2+TMP3+TMP4+TMP5+TMP6
              WRITE(IW,9045) IOFMO(IFG),
     *                       TMP1,TMP2,TMP3,TMP4,TMP5,TMP6,DUMTOT
            END DO
          END IF
        ELSE
          IF (IFLAG.EQ.1) THEN
            TOTCNT = ZERO
            DO IFG = 1, NFGIEA
              TOTCNT = TOTCNT + FGINT(IFG,1,ITYP)
            END DO
            WRITE(IW,9030) TOTCNT
            TOTINT = TOTINT + TOTCNT
            IFLAG = 0
          END IF
          IF (ITYP.EQ.6) THEN
            WRITE(IW,9036)
            WRITE(IW,9038)
            DO IFG = 1, NFGIEA
              TMP1 = FGINT(IFG,1,1)
              TMP2 = FGINT(IFG,1,2)
              TMP3 = FGINT(IFG,1,3)
              TMP4 = FGINT(IFG,1,4)
              TMP5 = FGINT(IFG,1,5)
              TMP6 = FGINT(IFG,1,6)
              DUMTOT = TMP1+TMP2+TMP3+TMP4+TMP5+TMP6
              WRITE(IW,9045) IOFMO(IFG),
     *                       TMP1,TMP2,TMP3,TMP4,TMP5,TMP6,DUMTOT
            END DO
          END IF
        END IF
      END IF
C
CZ
CZ    CONTRIBUTION FROM ALL EFPS TO EACH FMO ATOM
CZ
      IF (MASWRK.AND.IAND(NPRIEA,2).NE.0) THEN
        IF (IFLAG.EQ.1) THEN
          TOTCNT = ZERO
          DO I = 1, NATFMO
            IATC = IEATF(I)
            IF (IATC.NE.0) THEN
              TOTCNT = TOTCNT + EFPIEA(1,IATC,ITYP)
            END IF
          END DO
          WRITE(IW,9030) TOTCNT
          TOTINT = TOTINT + TOTCNT
          IFLAG = 0
        END IF
C
        IF (ITYP.EQ.6) THEN
          WRITE(IW,9035)
          WRITE(IW,9040)
          DO I = 1, NATFMO
            IATC = IEATF(I)
            IF (IATC.NE.0) THEN
              DUMTOT = ZERO
              DO J = 1, 6
                DUMTOT = DUMTOT + EFPIEA(1,IATC,J)
              END DO
              WRITE(IW,9045) I,(EFPIEA(1,IATC,J),J=1,6),DUMTOT
            END IF
          END DO
        END IF
      END IF
C
      IF (ITYP.EQ.5) THEN
        TOTINT = TOTINT + REMPOL
        IF (MASWRK) WRITE(IW,'(3X,A,F8.2)')
     *              'REMAINING EFP POL (KJ/MOL):',REMPOL
      END IF
C
      RETURN
 9000 FORMAT(/3X,I6,'-TH EFP FRAG. WITH',I6,1X,'POINTS',
     *        I8,'-TH EFP POINT')
 9005 FORMAT(/3X,I6,'-TH FMO FRAGMENT')
 9006 FORMAT( 3X,'THE CORRESPONDING ATOMS:',6I10)
 9010 FORMAT( 3X,'  INT. ENERGY IN KJ/MOL:',6F10.2)
 9015 FORMAT(/3X,'FRAGMENT INTERACTIONS (KJ/MOL)')
 9020 FORMAT(/3X,'EFP FRAG.:',8X,8I10)
 9025 FORMAT( 3X,'FMO FRAG.:',I8,8F10.2)
 9030 FORMAT(/3X,'TOTAL CONTRIBUTION:',F10.2/)
 9035 FORMAT(/3X,'TOTAL CONT. FROM ALL EFPS TO EACH FMO ATOM')
 9036 FORMAT(/3X,'TOTAL CONT. FROM ALL EFPS TO EACH FMO FRG.')
 9038 FORMAT(/3X,'FRG NO',6X,'MONO',6X,'DIPO',6X,'QUAD',6X,'OCTU',6X,
     *           ' POL',5X,'EX/CT',6X,'TOT.')
 9040 FORMAT(/3X,'ATM NO',6X,'MONO',6X,'DIPO',6X,'QUAD',6X,'OCTU',6X,
     *           ' POL',5X,'EX/CT',6X,'TOT.')
 9045 FORMAT( 3X,I6,7F10.2)
      END
C*MODULE EFPFMO  *DECK CALNUCIEA
      SUBROUTINE CALNUCIEA(ITYP,IMUL,IAT,NPTS1,DOCNT,IOFMO,EFPIEA,FGINT,
     *                     TMP1)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOEFPIEA,DOCNT
C
      DIMENSION NPTS1(1)
      DIMENSION DOCNT(1), IOFMO(1)
      DIMENSION EFPIEA(MXEFPT*NFRGI1,NATFIEA,*)
      DIMENSION FGINT(NFGIEA,NFRGI2,*)
C
      PARAMETER (AU2KJ=2625.5D+00)
      COMMON /FMCOM / X(1)
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,LIACTFG,lcrfrg,
     *                lzlmfrgv
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                LIEACNT,DOEFPIEA
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LTMPOL,LIEATF,LFGINT,LNPT2FRG
c     COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     ENUCC, ENUCD... ARE NOT PARALLELIZED?
C
C     IMUL-IAT INTERACTION
C
C
C     FMO
      IATG = IXFTCH(X(LIAGLOB),IAT)
      IATC = IXFTCH(X(LIEATF),IATG)
      IF (IATC.EQ.0) RETURN
      IF (IAND(NPRIEA,5).NE.0) THEN
        IFG  = IXFTCH(X(LINDAT),IATG)
        IIFG = 0
        DO II = 1, NFGIEA
          IOF = IOFMO(II)
          IF (IOF.EQ.IFG) IIFG = II
        END DO
        IF (IIFG.EQ.0) RETURN
      END IF
C
C     EFP
      IFCN = 1
      IF (IAND(NPRIEA,8).NE.0) THEN
        IFCN = 0
        DO I = 1, IMUL
          IF (DOCNT(I)) IFCN = IFCN + 1
        END DO
      END IF
      IFRT = 1
      IF (IAND(NPRIEA,4).NE.0) THEN
        DO IFR = 1, NFRGIEA
          IFRG = IXFTCH(X(LIOEFP),IFR)
          IST  = 1
          DO IFF = 1, IFRG-1
            IST = IST + NPTS1(IFF)
          END DO
          IED = IST + NPTS1(IFRG) - 1
          IF (IMUL.GE.IST.AND.IMUL.LE.IED) IFRT = IFR
        END DO
      END IF
C
      IF (IAND(NPRIEA,12).NE.0) THEN
        IF (IAND(NPRIEA,8).NE.0) THEN
          EFPIEA(IFCN,IATC,ITYP) = EFPIEA(IFCN,IATC,ITYP) + TMP1*AU2KJ
        END IF
        IF (IAND(NPRIEA,4).NE.0) THEN
          FGINT(IIFG,IFRT,ITYP)  = FGINT(IIFG,IFRT,ITYP)  + TMP1*AU2KJ
        END IF
      END IF
C
      IF (IAND(NPRIEA,3).NE.0) THEN
        IF (IAND(NPRIEA,10).EQ.2) THEN
          EFPIEA(1,IATC,ITYP) = EFPIEA(1,IATC,ITYP) + TMP1*AU2KJ
        END IF
        IF (IAND(NPRIEA, 5).EQ.1) THEN
          FGINT(IIFG,1,ITYP)  = FGINT(IIFG,1,ITYP)  + TMP1*AU2KJ
        END IF
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK FMOEFPDIST
      FUNCTION FMOEFPDIST(IST,IED)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      PARAMETER (MXFGPT=12000, MXIFRQ=12)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
CZ
CZ    DETERMINE THE SHORTEST DISTANCE BETWEEN AN FMO FRAGMENT AND
CZ    AN EFP POLARIZABLE POINT IN THE DIRECT FASHON
CZ
      R1 = 1.0D+30
      DO I = IST, IED
        X1 = EFP(1,I)
        Y1 = EFP(2,I)
        Z1 = EFP(3,I)
        DO J = 1, NAT
          R2 = (C(1,J)-X1)**2
     *       + (C(2,J)-Y1)**2
     *       + (C(3,J)-Z1)**2
          R1 = MIN(R1,R2)
        END DO
      END DO
C
      FMOEFPDIST = SQRT(R1)
C
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPCNT2RSP
      SUBROUTINE EFPCNT2RSP(L1,L2,DX,TRI1,CSD)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000, MXFRG=1050, MXFGPT=12000, MXDFG=5,
     *           MXDPPT=MXFRG*MXDFG*12, MXIFRQ=12)
CZCZ  PARAMETER (ZERO=0.0D+00,ONE=1.0D+00, PT25=0.25D+00)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00, HALF=0.5D+00)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      LOGICAL GOPARR,MASWRK,DSKWRK,SVDSKW
C
      DIMENSION DX(1), TRI1(1), CSD(1)
C
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /EFFMOP/ LEFLDF,LEFADDF,LDINDF,LDINDDF,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /EFPOTD/ METHPOL,INABIO,MOVE,nfrag
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FMCOM / X(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FRFD  / PPEFX(MXFGPT), PPEFY(MXFGPT), PPEFZ(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PNUC  / PPNX(MXFGPT),PPNY(MXFGPT),PPNZ(MXFGPT),PNZRF(3)
CZ
CZ    THIS IS A CONTRIBUTION OF EFPS TO FMO RESPONSE TERM IN GRAD
CZ
C
      IF (IEFP.EQ.1) THEN
        ! GET DINDF AND DINDDF (Z-VECTOR INDUCED DIPOLE)
        DUM = ZERO
        CALL CALCINDE(0,L1,L2,TRI1,DUM)
C
        ! FIRST GET THE INDUCED DIPOLE
        NPTTPT3 = 3*NPTTPT
        CALL VALFM(LOADFM)
        LPEX  = LOADFM + 1
        LPEY  = LPEX   + L2
        LPEZ  = LPEY   + L2
        LFLD  = LPEZ   + L2
        LFAD  = LFLD   + NPTTPT3
        LAST  = LFAD   + NPTTPT3
        NEED1 = LAST - LOADFM -1
        CALL GETFM(NEED1)
C
        ! GET PPNX, PPNY, PPNZ
        CALL EFNUCP(NAT,ZAN,C,TMPENUC)
C
        NFT25 = 25
        SVDSKW = DSKWRK
        DSKWRK = .TRUE.
        CALL SEQREW(NFT25)
        IPCOUNT = ME-1
        DO 10 LEFP = 1, NPTTPT
           ICT = (LEFP-1)*3
           IXX = ICT
           IYY = ICT + 1
           IZZ = ICT + 2
           IF(GOPARR) THEN
              X(LFLD+IXX) = ZERO
              X(LFLD+IYY) = ZERO
              X(LFLD+IZZ) = ZERO
              IPCOUNT = IPCOUNT + 1
              IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 10
           END IF
C
           CALL SQREAD(NFT25,X(LPEX),L2)
           CALL SQREAD(NFT25,X(LPEY),L2)
           CALL SQREAD(NFT25,X(LPEZ),L2)
           X(LFLD+IXX) = TRACEP(DX,X(LPEX),L1)
           X(LFLD+IYY) = TRACEP(DX,X(LPEY),L1)
           X(LFLD+IZZ) = TRACEP(DX,X(LPEZ),L1)
C
           ! INDUCED DIPOLE DUE TO AB INITIO DENSITY
           TOTMUX = X(LDINDF+IXX) + X(LDINDDF+IXX)
           TOTMUY = X(LDINDF+IYY) + X(LDINDDF+IYY)
           TOTMUZ = X(LDINDF+IZZ) + X(LDINDDF+IZZ)
C
C     COMPLICATE PART: MINUS IS JUST FOR THE LATER CALCULATION
C                      IN ESDCPHF
           DO K = 1, L2
              KK1 = K - 1
              KX = LPEX + KK1
              KY = LPEY + KK1
              KZ = LPEZ + KK1
CZCZ          CSD(K) = CSD(K) - PT25*(  TOTMUX*X(KX)
              CSD(K) = CSD(K) - HALF*(  TOTMUX*X(KX)
     *                                + TOTMUY*X(KY)
     *                                + TOTMUZ*X(KZ))
           ENDDO
 10     CONTINUE
        CALL SEQREW(NFT25)
        IF(GOPARR) CALL DDI_GSUMF(668,X(LFLD),NPTTPT3)
C
        ICT = 0
        DO LEFP = 1, NPTTPT
           X(LFLD+ICT  ) = X(LFLD+ICT  )+PPNX(LEFP)+PPEFX(LEFP)
           X(LFLD+ICT+1) = X(LFLD+ICT+1)+PPNY(LEFP)+PPEFY(LEFP)
           X(LFLD+ICT+2) = X(LFLD+ICT+2)+PPNZ(LEFP)+PPEFZ(LEFP)
           ICT = ICT + 3
        END DO
C
        ! GET DIND AND DINDD
        CALL VCLR(DIND, 1,NPTTPT3)
        CALL VCLR(DINDD,1,NPTTPT3)
        CALL VALFM(LOADFM)
        LDIPNEW  = LOADFM   + 1
        LDIPNWD  = LDIPNEW  + NFRG
        LDINDC   = LDIPNWD  + NFRG
        LDINDDC  = LDINDC   + NPTTPT3
        LDIND_W  = LDINDDC  + NPTTPT3
        LDIND_C  = LDIND_W  + 2*NPTTPT3
        LEWLD1   = LDIND_C  + 2*NPTTPT3
        LEWLD2   = LEWLD1   + NPTTPT3
        LAST     = LEWLD2   + NPTTPT3
        NEED2 = LAST - LOADFM - 1
        CALL GETFM(NEED2)
        CALL DIPIT(X(LFLD),X(LFAD),X(LDINDC),X(LDINDDC),
     *             X(LDIND_W),X(LDIND_C),
     *             NPTTPT,X(LDIPNEW),X(LDIPNWD),
     *             X(LEWLD1),X(LEWLD2),NFRG)
        CALL RETFM(NEED2)
        CALL RETFM(NEED1)
        DSKWRK = SVDSKW
      END IF
C
C
C     CLEAR DERIVATIVE TERMS WITH RESPECT TO EFP POINTS
C
      NTOTPT = NMTTPT + NPTTPT + NRTTPT
      IF (MOVE.NE.0) THEN
        CALL VCLR(DEF,  1,3*NTOTPT)
        CALL VCLR(ATORQ,1,3*NFRG)
        ! CLEAR DESFRG
        CALL DEFPCLR
      END IF
C
C
C     FOCK DERIVATIVE CONTRIBUTIONS (AO DERIV, HEL-FEY)
C     PAIRWISE AND MANY-BODY TERMS ARE CALCULATED HERE
C      PAIRWISE: ELECTROSTATIC, EX+CT
C     MANY-BODY: PART OF INDUCED DIPOLE
C
      CALL FRGDER(TRI1,L2)
      IF (MOVE.NE.0) THEN
        CALL EFFT
        LDEFNB = LDEFTF + NFRG*3*(NBODY-1)
        LTRQNB = LTORQF + NFRG*3*(NBODY-1)
        IF (MASWRK) CALL DEFTRQSTR(NFRG,X(LDEFNB),X(LTRQNB),DEFT,TORQ)
        CALL VCLR(DEF,  1,3*NTOTPT)
        CALL VCLR(ATORQ,1,3*NFRG)
        CALL DEFPCLR
      END IF
C
C     Z-VECTOR INDUCED DIPOLE CONTRIBUTIONS
C
      IF (IEFP.EQ.1) THEN
        IF (MOVE.NE.0) THEN
          IFMO = 1
          IF (IEFC.EQ.1) CALL DCHIND(X(LDINDF),X(LDINDDF),DESFRG,IFMO)
          IF (IEFD.EQ.1) CALL DDPIND(X(LDINDF),X(LDINDDF),DESFRG,IFMO)
          IF (IEFQ.EQ.1) THEN
            CALL VALFM(LOADFM)
            LQUA = LOADFM   + 1
            LAST = LQUA + 6*NMTTPT
            NEED = LAST - LOADFM - 1
            CALL GETFM(NEED)
            CALL DQDIND(X(LQUA),X(LDINDF),X(LDINDDF),DESFRG,IFMO)
            CALL RETFM(NEED)
          END IF
          CALL DININ(DIND,X(LDINDDF),DESFRG,IFMO)
          CALL DININ(X(LDINDF),DINDD,DESFRG,IFMO)
        END IF
C
        ! TOT-INDUCED DIPOLES ARE DESTROYED
        CALL DCOPY(NPTTPT3,X(LDINDF) ,1,DIND, 1)
        CALL DCOPY(NPTTPT3,X(LDINDDF),1,DINDD,1)
        CALL EFPDER(DX)
        CALL VALFM(LOADFM)
        LDE1 = LOADFM   + 1
        LAST = LDE1 + 3*NAT
        NEED = LAST - LOADFM - 1
        CALL GETFM(NEED)
        CALL VCLR(X(LDE1),1,3*NAT)
        CALL DNUCP(X(LDE1),DEF)
        CALL RETFM(NEED)
        IF (MASWRK) THEN
          ICT = 0
          DO II = 1, NAT
            IX = ICT
            IY = ICT + 1
            IZ = ICT + 2
            DE(1,II) = DE(1,II) + X(LDE1+IX)
            DE(2,II) = DE(2,II) + X(LDE1+IY)
            DE(3,II) = DE(3,II) + X(LDE1+IZ)
            ICT = ICT + 3
          END DO
        END IF
        IF (MOVE.NE.0) THEN
          IF(GOPARR) CALL DSCAL(3*NTOTPT,ONE/NPROC,DEF,1)
          IF(GOPARR) CALL DSCAL(3*NFRG,ONE/NPROC,ATORQ,1)
          NL4 = 300*NPTTPT
          CALL VALFM(LOADFM)
          LCH  = LOADFM   + 1
          LAST = LCH + NL4
          NEED = LAST - LOADFM - 1
          CALL GETFM(NEED)
          CALL EFPDEF(DX,X(LCH),NL4)
          CALL EFTORP(DX,X(LCH),NL4)
          CALL RETFM(NEED)
          IF(GOPARR) CALL DDI_GSUMF(1505,DEF,3*NTOTPT)
          IF(GOPARR) CALL DDI_GSUMF(1506,ATORQ,3*NFRG)
C
          CALL EFFT
          LDEFNB = LDEFTF + NFRG*3*(NBODY-1)
          LTRQNB = LTORQF + NFRG*3*(NBODY-1)
          IF (MASWRK) CALL DEFTRQSTR(NFRG,X(LDEFNB),X(LTRQNB),DEFT,TORQ)
        END IF
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK DEFTRQSTR
      SUBROUTINE DEFTRQSTR(NFRG,DEFFMO,TRQFMO,DEFT,TORQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION DEFFMO(3,*),TRQFMO(3,*),DEFT(3,*),TORQ(3,*)
C
      DO I = 1, NFRG
        DEFFMO(1,I) = DEFFMO(1,I) + DEFT(1,I)
        DEFFMO(2,I) = DEFFMO(2,I) + DEFT(2,I)
        DEFFMO(3,I) = DEFFMO(3,I) + DEFT(3,I)
        TRQFMO(1,I) = TRQFMO(1,I) + TORQ(1,I)
        TRQFMO(2,I) = TRQFMO(2,I) + TORQ(2,I)
        TRQFMO(3,I) = TRQFMO(3,I) + TORQ(3,I)
      END DO
      RETURN
      END
C*MODULE EFPFMO  *DECK CALCINDE
      SUBROUTINE CALCINDE(MODE,L1,L2,DENS,OUT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXFRG=1050, MXFGPT=12000, MXDFG=5,
     *           MXDPPT=MXFRG*MXDFG*12, MXIFRQ=12)
CZCZ  PARAMETER (ZERO=0.0D+00,PT25=0.25D+00)
      PARAMETER (ZERO=0.0D+00,HALF=0.5D+00)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      LOGICAL GOPARR,MASWRK,DSKWRK,SVDSKW
C
      ! DENS SHOULD BE IN THE AO BASIS
      DIMENSION DENS(1), OUT(1)
C
      COMMON /EFFMOP/ LEFLDF,LEFADDF,LDINDF,LDINDDF,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FMCOM / X(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
CZ    COMMON /PNUC  / PPNX(MXFGPT),PPNY(MXFGPT),PPNZ(MXFGPT),PNZRF(3)
CZ
CZ    FOR FMO/EFP GRADIENT CALCULATION
CZ    THIS IS A CONTRIBUTION OF INDUCED DIPOLES DUE TO ELECTRON ONLY
CZ            TO FMO RESPONSE TERM IN SCZV
CZ
C     MODE = 1: CALCULATE THE CONTRIBUTION TO A MATRIX IN CPHF
C            0: CALCULATE INDUCED DIPOLE IN TERMS OF Z-VECTOR
C
      IF (IEFP.EQ.0) RETURN
C
      NPTTPT3 = 3*NPTTPT
      CALL VALFM(LOADFM)
      LPEX  = LOADFM + 1
      LPEY  = LPEX   + L2
      LPEZ  = LPEY   + L2
      LFLD  = LPEZ   + L2
      LFAD  = LFLD   + NPTTPT3
      LAST  = LFAD   + NPTTPT3
      NEED1 = LAST - LOADFM -1
      CALL GETFM(NEED1)
C
      NFT25 = 25
      SVDSKW = DSKWRK
      DSKWRK = .TRUE.
      CALL SEQREW(NFT25)
      IPCOUNT = ME-1
      DO 10 LEFP = 1, NPTTPT
         ICT = (LEFP-1)*3
         IF(GOPARR) THEN
            X(LFLD+ICT  ) = ZERO
            X(LFLD+ICT+1) = ZERO
            X(LFLD+ICT+2) = ZERO
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GOTO 10
         END IF
C
         CALL SQREAD(NFT25,X(LPEX),L2)
         CALL SQREAD(NFT25,X(LPEY),L2)
         CALL SQREAD(NFT25,X(LPEZ),L2)
         X(LFLD+ICT  ) = TRACEP(DENS,X(LPEX),L1)
         X(LFLD+ICT+1) = TRACEP(DENS,X(LPEY),L1)
         X(LFLD+ICT+2) = TRACEP(DENS,X(LPEZ),L1)
 10   CONTINUE
      CALL SEQREW(NFT25)
      IF(GOPARR) CALL DDI_GSUMF(668,X(LFLD),NPTTPT3)
C
      ! GET DIND AND DINDD
      CALL VCLR(DIND, 1,NPTTPT3)
      CALL VCLR(DINDD,1,NPTTPT3)
      CALL VALFM(LOADFM)
      LDIPNEW  = LOADFM   + 1
      LDIPNWD  = LDIPNEW  + NFRG
      LDINDC   = LDIPNWD  + NFRG
      LDINDDC  = LDINDC   + NPTTPT3
      LDIND_W  = LDINDDC  + NPTTPT3
      LDIND_C  = LDIND_W  + 2*NPTTPT3
      LEWLD1   = LDIND_C  + 2*NPTTPT3
      LEWLD2   = LEWLD1   + NPTTPT3
      LFAD     = LEWLD2   + NPTTPT3
      LAST     = LFAD     + NPTTPT3
      NEED2 = LAST - LOADFM - 1
      CALL GETFM(NEED2)
      CALL DIPIT(X(LFLD),X(LFAD),X(LDINDC),X(LDINDDC),
     *           X(LDIND_W),X(LDIND_C),
     *           NPTTPT,X(LDIPNEW),X(LDIPNWD),
     *           X(LEWLD1),X(LEWLD2),NFRG)
      CALL RETFM(NEED2)
C
C
      IF (MODE.EQ.0) THEN
        ! HERE DIND AND DINDD ARE USED FOR SPACE
        CALL DCOPY(NPTTPT3,DIND ,1,X(LDINDF), 1)
        CALL DCOPY(NPTTPT3,DINDD,1,X(LDINDDF),1)
        CALL RETFM(NEED1)
        CALL SEQREW(NFT25)
        DSKWRK = SVDSKW
        RETURN
      END IF
C
CZCZ  CALL DSCAL(L2,ONE/NPROC,OUT,1)
C
      IPCOUNT = ME - 1
      DO 25 LEFP=1,NPTTPT
C
C     ----- GO PARALLEL! -----
C
         IF (GOPARR) THEN
            IPCOUNT = IPCOUNT + 1
            IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 25
         END IF
         PMUX = DIND(1,LEFP)
         PMUY = DIND(2,LEFP)
         PMUZ = DIND(3,LEFP)
         PMUXD = DINDD(1,LEFP)
         PMUYD = DINDD(2,LEFP)
         PMUZD = DINDD(3,LEFP)
         TOTMUX = PMUX + PMUXD
         TOTMUY = PMUY + PMUYD
         TOTMUZ = PMUZ + PMUZD
C
         CALL SQREAD(NFT25,X(LPEX),L2)
         CALL SQREAD(NFT25,X(LPEY),L2)
         CALL SQREAD(NFT25,X(LPEZ),L2)
C
         DO K=1,L2
            KK1 = K - 1
            KX = LPEX + KK1
            KY = LPEY + KK1
            KZ = LPEZ + KK1
C       FACTOR PT25 IS TO COMPENSATE REDUNDANT MULTIPLICATION BY FOUR?
CZCZ        OUT(K) = OUT(K) - PT25 * (TOTMUX*X(KX)
            OUT(K) = OUT(K) - HALF * (TOTMUX*X(KX)
     *                              + TOTMUY*X(KY)
     *                              + TOTMUZ*X(KZ))
         ENDDO
 25   CONTINUE
C
      CALL RETFM(NEED1)
      CALL SEQREW(NFT25)
      DSKWRK = SVDSKW
C
      RETURN
      END
