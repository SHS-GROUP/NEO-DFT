C 15 APR 11 - YI  - IMPLEMENTATION OF LOCAL RESPONSE DISPERSION METHOD
C
C*MODULE LRD  *DECK LRD
      SUBROUTINE LRDPOL(ATMPOL,ATPPOL,EFPOL,FTOTWT,WTAB,FACT,
     *                  NCNTR,IPTME,ROA,ROB,GRDAA,GRDBB,GRDAB,
     *                  DRSPH,XD,YD,ZD,MAXL,MAXM,NFREQ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MXATM=2000)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
      DOUBLE PRECISION LAMBDA,KAPPA
      LOGICAL LRDFLG,MLTINT,DOLRD
      COMMON /LRDISP/ ELRD6,ELRD8,ELRD10,EMULT,LRDFLG,MLTINT,DOLRD
      COMMON /LRDPAR/ LAMBDA,KAPPA,RZERO
C
      DIMENSION ATMPOL(NFREQ,MAXM,MAXM,MAXL,NAT),
     *          ATPPOL(NFREQ,NAT,NAT),EFPOL(NAT),
     *          WTAB(NAT,NAT,*),DRSPH(3,MAXL,MAXM)
      PARAMETER (ONE=1.0D+00,TWO=2.0D+00,THREE=3.0D+00,
     *           FOUR=4.0D+00,DELTA=1.00D-02)
C
      PI = FOUR * ATAN(ONE)
      THIRD = ONE / THREE
C
C    EFFECTIVE POLARIZABILITY
C
      FERMI = (THREE * PI**2 * (ROA + ROB))**THIRD
      S2    = (GRDAA + GRDBB + TWO * GRDAB)
     *      / (TWO * FERMI * (ROA + ROB))**2
      QZERO = FERMI * (ONE + LAMBDA * S2)
      OMEGA = THIRD * QZERO**2
      EFPOL(NCNTR) = EFPOL(NCNTR) + (ROA + ROB) * FTOTWT / FACT
     *             * SQRT(ONE - DELTA**2) / (OMEGA**2 + DELTA**2)
C
C    ATOMIC POLARIZABILITY
C
      CALL LRDDRS(DRSPH,XD,YD,ZD,MAXL,MAXM)
      DO L=1,MAXL
      DO MA=1,2*L+1
      DO MB=1,2*L+1
        DOTDRS = DRSPH(1,L,MA)*DRSPH(1,L,MB)+DRSPH(2,L,MA)*DRSPH(2,L,MB)
     *         + DRSPH(3,L,MA)*DRSPH(3,L,MB)
        DO IFREQ=1,NFREQ
          TK    = COS(DBLE(2*IFREQ-1)*PI/DBLE(4*NFREQ))
          TK2   = ONE - TK**2
          DENOM = (TK2 * OMEGA**2 + TK**2) * FACT
          ATMPOL(IFREQ,MB,MA,L,NCNTR) = ATMPOL(IFREQ,MB,MA,L,NCNTR)
     *                 + (ROA + ROB) * FTOTWT * WTAB(NCNTR,NCNTR,IPTME)
     *                 * SQRT(TK2) * DOTDRS / DENOM
        END DO
      END DO
      END DO
      END DO
      IF (.NOT.MLTINT) GO TO 100
C
C    ATOMIC PAIR POLARIZABLITY
C
      DO IAT=1,NAT
        DO IFREQ=1,NFREQ
          TK    = COS(DBLE(2*IFREQ-1)*PI/DBLE(4*NFREQ))
          TK2   = ONE - TK**2
          DENOM = TWO * (TK2 * OMEGA**2 + TK**2) * FACT
          ATPPOL(IFREQ,IAT,NCNTR) = ATPPOL(IFREQ,IAT,NCNTR)
     *               + (ROA + ROB) * FTOTWT * WTAB(NCNTR,IAT,IPTME)
     *               * SQRT(TK2) / DENOM
        END DO
      END DO
C
  100 CONTINUE
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE LRDDRS(DRSPH,XD,YD,ZD,MAXL,MAXM)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION DRSPH(3,MAXL,MAXM)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00,THREE=3.0D+00,
     *           FOUR=4.0D+00,SIX=6.0D+00,TEN=1.0D+01,
     *           FIFT=1.5D+01,HALF=5.0D-01,QUART=2.5D-01)
C
      L = 1
      M = 1
      DRSPH(1,L,M) = ZERO
      DRSPH(2,L,M) = ONE
      DRSPH(3,L,M) = ZERO
C
      M = 2
      DRSPH(1,L,M) = ZERO
      DRSPH(2,L,M) = ZERO
      DRSPH(3,L,M) = ONE
C
      M = 3
      DRSPH(1,L,M) = ONE
      DRSPH(2,L,M) = ZERO
      DRSPH(3,L,M) = ZERO
C
      L = 2
      M = 1
      DRSPH(1,L,M) = SQRT(THREE) * YD
      DRSPH(2,L,M) = SQRT(THREE) * XD
      DRSPH(3,L,M) = ZERO
C
      M = 2
      DRSPH(1,L,M) = ZERO
      DRSPH(2,L,M) = SQRT(THREE) * ZD
      DRSPH(3,L,M) = SQRT(THREE) * YD
C
      M = 3
      DRSPH(1,L,M) = - XD
      DRSPH(2,L,M) = - YD
      DRSPH(3,L,M) = TWO * ZD
C
      M = 4
      DRSPH(1,L,M) = SQRT(THREE) * ZD
      DRSPH(2,L,M) = ZERO
      DRSPH(3,L,M) = SQRT(THREE) * XD
C
      M = 5
      DRSPH(1,L,M) = SQRT(THREE) * XD
      DRSPH(2,L,M) = -SQRT(THREE) * YD
      DRSPH(3,L,M) = ZERO
C
      L = 3
      M = 1
      DRSPH(1,L,M) = THREE * HALF * SQRT(TEN) * XD * YD
      DRSPH(2,L,M) = THREE * QUART * SQRT(TEN) * (XD**2 - YD**2)
      DRSPH(3,L,M) = ZERO
C
      M = 2
      DRSPH(1,L,M) = SQRT(FIFT) * YD * ZD
      DRSPH(2,L,M) = SQRT(FIFT) * ZD * XD
      DRSPH(3,L,M) = SQRT(FIFT) * XD * YD
C
      M = 3
      DRSPH(1,L,M) = -HALF * SQRT(SIX) * XD * YD
      DRSPH(2,L,M) = QUART * SQRT(SIX)
     *             * (FOUR*ZD**2 - THREE*YD**2 - XD**2)
      DRSPH(3,L,M) = TWO * SQRT(SIX) * YD * ZD
C
      M = 4
      DRSPH(1,L,M) = -THREE * XD * ZD
      DRSPH(2,L,M) = -THREE * YD * ZD
      DRSPH(3,L,M) = THREE * HALF
     *             * (TWO*ZD**2 - XD**2 - YD**2)
C
      M = 5
      DRSPH(1,L,M) = QUART * SQRT(SIX)
     *             * (FOUR*ZD**2 - THREE*XD**2 -YD**2)
      DRSPH(2,L,M) = -HALF * SQRT(SIX) * XD * YD
      DRSPH(3,L,M) = TWO * SQRT(SIX) * XD * ZD
C
      M = 6
      DRSPH(1,L,M) = SQRT(FIFT) * XD * ZD
      DRSPH(2,L,M) = -SQRT(FIFT) * YD * ZD
      DRSPH(3,L,M) = HALF * SQRT(FIFT) * (XD**2 - YD**2)
C
      M = 7
      DRSPH(1,L,M) = THREE * QUART * SQRT(TEN) * (XD**2 - YD**2)
      DRSPH(2,L,M) = -THREE * HALF * SQRT(TEN) * XD * YD
      DRSPH(3,L,M) = ZERO
C
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE LRDENEG(ATMPOL,EFPOL,SMATC,SMATP,WIGD,
     *                   COEF6,COEF8,COEF10,ATMPE,
     *                   MAXL,MAXM,MAXS,NFREQ,ELRD6,ELRD8,ELRD10,
     *                   ATMXVEC,ATMYVEC,ATMZVEC,RIJ,IUNIQUE)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MXATM=2000,MXSH=5000)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
C
      DOUBLE PRECISION LAMBDA,KAPPA
      COMMON /LRDPAR/ LAMBDA,KAPPA,RZERO
      DIMENSION ATMPOL(NFREQ,MAXM,MAXM,MAXL,NAT),EFPOL(NAT),
     *          SMATC(MAXS,MAXS),SMATP(MAXS,MAXS),WIGD(MAXS),
     *          COEF6(NAT*(NAT+1)/2),COEF8(NAT*(NAT+1)/2),
     *          COEF10(NAT*(NAT+1)/2),ATMPE(NAT*(NAT+1)/2)
      DIMENSION ATMXVEC(NAT,NAT),ATMYVEC(NAT,NAT),ATMZVEC(NAT,NAT),
     *          RIJ(NAT,NAT),IUNIQUE(NAT)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00,THREE=3.0D+00)
C
      THIRD = ONE / THREE
C
C    COPY POLARIZABILITY TO SYMMETRIC ATOMS
C
      DO 100 IAT=1,NAT
        IF (IUNIQUE(IAT).EQ.0) THEN
          DO IT=1,NT
            JAT = MAPCTR(IAT,IT)
            IF (IUNIQUE(JAT).NE.0) THEN
              EFPOL(IAT) = EFPOL(JAT)
              DO L=1,MAXL
              DO MA=1,2*L+1
              DO MB=1,2*L+1
              DO IFREQ=1,NFREQ
                ATMPOL(IFREQ,MB,MA,L,IAT) = ATMPOL(IFREQ,MB,MA,L,JAT)
              END DO
              END DO
              END DO
              END DO
              GO TO 100
            END IF
          END DO
        END IF
  100 CONTINUE
C
C    SIXTH-ORDER DISPERSION COEFFICIENT
C
      DO IAT=1,NAT-1
      DO JAT=IAT+1,NAT
        IJAT = JAT * (JAT-1)/2 + IAT
        LA = 1
        LB = 1
        XAB  = ATMXVEC(IAT,JAT)
        YAB  = ATMYVEC(IAT,JAT)
        ZAB  = ATMZVEC(IAT,JAT)
        RAB  = RIJ(IAT,JAT)
        CALL LRDSMC(LA,LB,XAB,YAB,ZAB,RAB,SMATC,SMATP,WIGD,MAXS)
        DO MA=1,2*LA+1
        DO MB=1,2*LB+1
        DO MC=1,2*LA+1
        DO MD=1,2*LB+1
          CPINT = ZERO
          DO IFREQ=1,NFREQ
            CPINT = CPINT + ATMPOL(IFREQ,MC,MA,LA,IAT)
     *            * ATMPOL(IFREQ,MD,MB,LB,JAT)
          END DO
          COEF6(IJAT) = COEF6(IJAT)
     *                + SMATC(MA,MB) * CPINT * SMATC(MC,MD)
        END DO
        END DO
        END DO
        END DO
        COEF6(IJAT) = COEF6(IJAT) / DBLE(4*NFREQ)
      END DO
      END DO
C
C    EIGHTH-ORDER DISPERSION COEFFICIENT
C
      DO IAT=1,NAT-1
      DO JAT=IAT+1,NAT
        IJAT = JAT * (JAT-1)/2 + IAT
        XAB  = ATMXVEC(IAT,JAT)
        YAB  = ATMYVEC(IAT,JAT)
        ZAB  = ATMZVEC(IAT,JAT)
        RAB  = RIJ(IAT,JAT)
        DO LA = 1,2
          L1 = LA
          L2 = 3 - L1
          CALL LRDSMC(L1,L2,XAB,YAB,ZAB,RAB,SMATC,SMATP,WIGD,MAXS)
          DO MA=1,2*L1+1
          DO MB=1,2*L2+1
          DO MC=1,2*L1+1
          DO MD=1,2*L2+1
            CPINT = ZERO
            DO IFREQ=1,NFREQ
              CPINT = CPINT + ATMPOL(IFREQ,MC,MA,L1,IAT)
     *              * ATMPOL(IFREQ,MD,MB,L2,JAT)
            END DO
            COEF8(IJAT) = COEF8(IJAT)
     *                  + SMATC(MA,MB) * CPINT * SMATC(MC,MD)
          END DO
          END DO
          END DO
          END DO
        END DO
        COEF8(IJAT) = COEF8(IJAT) / DBLE(4*NFREQ)
      END DO
      END DO
C
C    TENTH-ORDER DISPERSION COEFFICIENT
C
      DO IAT=1,NAT-1
      DO JAT=IAT+1,NAT
        IJAT = JAT * (JAT-1)/2 + IAT
        XAB  = ATMXVEC(IAT,JAT)
        YAB  = ATMYVEC(IAT,JAT)
        ZAB  = ATMZVEC(IAT,JAT)
        RAB  = RIJ(IAT,JAT)
        DO LA = 1,3
          L1 = LA
          L2 = 4 - L1
          CALL LRDSMC(L1,L2,XAB,YAB,ZAB,RAB,SMATC,SMATP,WIGD,MAXS)
          DO MA=1,2*L1+1
          DO MB=1,2*L2+1
          DO MC=1,2*L1+1
          DO MD=1,2*L2+1
            CPINT = ZERO
            DO IFREQ=1,NFREQ
              CPINT = CPINT + ATMPOL(IFREQ,MC,MA,L1,IAT)
     *              * ATMPOL(IFREQ,MD,MB,L2,JAT)
            END DO
            COEF10(IJAT) = COEF10(IJAT)
     *                   + SMATC(MA,MB) * CPINT * SMATC(MC,MD)
          END DO
          END DO
          END DO
          END DO
        END DO
        COEF10(IJAT) = COEF10(IJAT) / DBLE(4*NFREQ)
      END DO
      END DO
C
C    CALCULATE TWO-CNTER LRD ENERGY
C
      ELRD6  = ZERO
      ELRD8  = ZERO
      ELRD10 = ZERO
C
      DO IAT=1,NAT-1
      DO JAT=IAT+1,NAT
        IJAT = JAT * (JAT-1)/2 + IAT
        DIST  = RIJ(IAT,JAT)
        RBAR  = RZERO + KAPPA
     *        * (EFPOL(IAT)**THIRD + EFPOL(JAT)**THIRD)
C
        ADD   = COEF6(IJAT) * DIST**(-6)
     *        * EXP(-(DIST/RBAR)**(-6))
        ELRD6 = ELRD6 - ADD
        ATMPE(IJAT) = ATMPE(IJAT) - ADD * 6.275096D+02
C
        ADD   = COEF8(IJAT) * DIST**(-8)
     *        * EXP(-TWO*(DIST/RBAR)**(-6))
        ELRD8 = ELRD8 - ADD
        ATMPE(IJAT) = ATMPE(IJAT) - ADD * 6.275096D+02
C
        ADD = COEF10(IJAT) * DIST**(-10)
     *      * EXP(-THREE*(DIST/RBAR)**(-6))
        ELRD10 = ELRD10 - ADD
        ATMPE(IJAT) = ATMPE(IJAT) - ADD * 6.275096D+02
      END DO
      END DO
C
C    SAVE EFFECTIVE POLARIZABILITY AND DISPERSION COEFFICIENTS
C
      CALL DAWRIT(IDAF,IODA,EFPOL,NAT,511,0)
      CALL DAWRIT(IDAF,IODA,COEF6,NAT*(NAT+1)/2,512,0)
      CALL DAWRIT(IDAF,IODA,COEF8,NAT*(NAT+1)/2,513,0)
      CALL DAWRIT(IDAF,IODA,COEF10,NAT*(NAT+1)/2,514,0)
      CALL DAWRIT(IDAF,IODA,ATMPE,NAT*(NAT+1)/2,515,0)
C
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE LRDMULT(ATPPOL,EFPOL,NFREQ,EMULT,
     *                   ATMXVEC,ATMYVEC,ATMZVEC,RIJ,IUNIQUE)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MXATM=2000,MXSH=5000)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /SYMTRY/ MAPSHL(MXSH,48),MAPCTR(MXATM,48),
     *                T(432),INVT(48),NT
C
      DOUBLE PRECISION LAMBDA,KAPPA
      COMMON /LRDPAR/ LAMBDA,KAPPA,RZERO
      DIMENSION ATPPOL(NFREQ,NAT,NAT),EFPOL(NAT)
      DIMENSION ATMXVEC(NAT,NAT),ATMYVEC(NAT,NAT),ATMZVEC(NAT,NAT),
     *          RIJ(NAT,NAT),IUNIQUE(NAT)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00,
     *           THREE=3.0D+00,HALF=5.0D-01)
C
      THIRD = ONE / THREE
C
C    COPY POLARIZABILITY TO SYMMETRIC ATOMS
C
      DO 100 IAT=1,NAT
        IF (IUNIQUE(IAT).EQ.0) THEN
          DO IT=1,NT
            JAT = MAPCTR(IAT,IT)
            IF (IUNIQUE(JAT).NE.0) THEN
              DO KAT=1,NAT
                LAT = MAPCTR(KAT,IT)
                DO IFREQ=1,NFREQ
                  ATPPOL(IFREQ,KAT,IAT) = ATPPOL(IFREQ,LAT,JAT)
                END DO
              END DO
              GO TO 100
            END IF
          END DO
        END IF
  100 CONTINUE
C
      DO IAT=1,NAT
        DO IFREQ=1,NFREQ
          ATPPOL(IFREQ,IAT,IAT) = ATPPOL(IFREQ,IAT,IAT) * TWO
        END DO
      END DO
C
C    CALCULATE MULTICENTER LRD ENERGY
C
      EMULT = ZERO
      DO IAT=1,NAT
      DO JAT=1,NAT
        IF (IAT.EQ.JAT) GO TO 300
        RBARIJ = RZERO + KAPPA
     *         * (EFPOL(IAT)**THIRD + EFPOL(JAT)**THIRD)
        DAMPIJ = EXP(-HALF * (RIJ(IAT,JAT)/RBARIJ)**(-6))
        DO KAT=1,NAT
        DO LAT=1,NAT
          IF (KAT.EQ.LAT) GO TO 200
          IF (IAT.EQ.LAT) GO TO 200
          IF (JAT.EQ.KAT) GO TO 200
          IF (IAT.EQ.KAT .AND. JAT.EQ.LAT) GO TO 200
          DOTVEC = ATMXVEC(IAT,JAT) * ATMXVEC(KAT,LAT)
     *           + ATMYVEC(IAT,JAT) * ATMYVEC(KAT,LAT)
     *           + ATMZVEC(IAT,JAT) * ATMZVEC(KAT,LAT)
          DOTVEC = ABS(DOTVEC) / (RIJ(IAT,JAT) * RIJ(KAT,LAT))
          FINTER = THREE * (THREE * DOTVEC - ONE)
     *           * (RIJ(IAT,JAT) * RIJ(KAT,LAT))**(-3)
          CPINT  = ZERO
          DO IFREQ=1,NFREQ
            CPINT = CPINT
     *            + ATPPOL(IFREQ,KAT,IAT) * ATPPOL(IFREQ,LAT,JAT)
          END DO
          CPINT  = CPINT / DBLE(16*NFREQ)
          RBARKL = RZERO + KAPPA
     *           * (EFPOL(KAT)**THIRD + EFPOL(LAT)**THIRD)
          DAMPKL = EXP(-HALF * (RIJ(KAT,LAT)/RBARKL)**(-6))
          EMULT  = EMULT - FINTER * CPINT * DAMPIJ * DAMPKL
  200     CONTINUE
        END DO
        END DO
  300   CONTINUE
      END DO
      END DO
C
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE LRDSMC(L1,L2,XAB,YAB,ZAB,RAB,SMATC,SMATP,WIGD,MAXS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION SMATC(MAXS,MAXS),SMATP(MAXS,MAXS),WIGD(MAXS)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00,THRESH=1.0D-10)
C
      DO I=1,MAXS
        WIGD(I) = ZERO
        DO J=1,MAXS
          SMATC(I,J) = ZERO
          SMATP(I,J) = ZERO
        END DO
      END DO
C
      X = XAB / RAB
      Y = YAB / RAB
      Z = ZAB / RAB
      IF (ONE-ABS(Z) .LT. THRESH) THEN
        IF (ONE-Z .LT. THRESH) THEN
          TEMP = (-ONE)**L2
        ELSE
          TEMP = (-ONE)**L1
        END IF
C
C     M1 .EQ. M2 .EQ. 0
C
        MA = L1 + 1
        MB = L2 + 1
        SMATC(MA,MB) = TEMP * FACT(L1+L2) / (FACT(L1)*FACT(L2))
C
C     M1 .EQ. M2 .NE. 0
C
        LMIN = MIN(L1,L2)
        DO M1=1,LMIN
          MA = M1 + L1 + 1
          MB = M1 + L2 + 1
          MC = -M1 + L1 + 1
          MD = -M1 + L2 + 1
          SMATC(MA,MB) = TEMP * (-ONE)**M1 * FACT(L1+L2)
     *         / SQRT(FACT(L1+M1)*FACT(L1-M1)*FACT(L2+M1)*FACT(L2-M1))
          SMATC(MC,MD) = SMATC(MA,MB)
        END DO
      ELSE
        CALL LRDSMP(L1+L2,L1,L2,Z,SMATP,WIGD,MAXS)
        COS1 = X / SQRT(ONE-Z**2)
        SIN1 = Y / SQRT(ONE-Z**2)
C
C     M1 .EQ. 0, M2 .EQ. 0
C
        MA = L1 + 1
        MB = L2 + 1
        SMATC(MA,MB) = SMATP(MA,MB)
C
C     M1 .EQ. 0, M2 .NE. 0
C
        DO M2=1,L2
          MB   = M2 + L2 + 1
          MD   = -M2 + L2 + 1
          TEMP = SQRT(TWO) * (-ONE)**M2 * SMATP(MA,MB)
          CALL COSSIN(M2,COS1,SIN1,COSN,SINN)
          SMATC(MA,MB) = TEMP * COSN
          SMATC(MA,MD) = TEMP * SINN
        END DO
C
C     M1 .NE. 0, M2 .EQ. 0
C
        MB = L2 + 1
        DO M1=1,L1
          MA   = M1 + L1 + 1
          MC   = -M1 + L1 + 1
          TEMP = SQRT(TWO) * (-ONE)**M1 * SMATP(MA,MB)
          CALL COSSIN(M1,COS1,SIN1,COSN,SINN)
          SMATC(MA,MB) = TEMP * COSN
          SMATC(MC,MB) = TEMP * SINN
        END DO
C
C     M1 .NE. 0, M2 .NE. 0
C
        DO M1=1,L1
          DO M2=1,L2
            MA   = M1 + L1 + 1
            MB   = M2 + L2 + 1
            MC   = -M1 + L1 + 1
            MD   = -M2 + L2 + 1
            TEMP = (-ONE)**(M1+M2) * SMATP(MA,MB)
            CALL COSSIN(M1+M2,COS1,SIN1,COSN,SINN)
            SMATC(MA,MB) = + TEMP * COSN
            SMATC(MA,MD) = + TEMP * SINN
            SMATC(MC,MB) = + TEMP * SINN
            SMATC(MC,MD) = - TEMP * COSN
            TEMP = (-ONE)**M1 * SMATP(MA,MD)
            CALL COSSIN(M1-M2,COS1,SIN1,COSN,SINN)
            SMATC(MA,MB) = SMATC(MA,MB) + TEMP * COSN
            SMATC(MA,MD) = SMATC(MA,MD) - TEMP * SINN
            SMATC(MC,MB) = SMATC(MC,MB) + TEMP * SINN
            SMATC(MC,MD) = SMATC(MC,MD) + TEMP * COSN
          END DO
        END DO
      END IF
C
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE COSSIN(N,COS1,SIN1,COSN,SINN)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00)
C
      COS2 = COS1
      SIN2 = SIN1
      DO I=2,ABS(N)
        COS3 = COS2 * COS1 - SIN2 * SIN1
        SIN3 = SIN2 * COS1 + COS2 * SIN1
        COS2 = COS3
        SIN2 = SIN3
      END DO
      IF (N .GT. 0) THEN
        COSN = COS2
        SINN = SIN2
      ELSE IF (N .EQ. 0) THEN
        COSN = ONE
        SINN = ZERO
      ELSE
        COSN = COS2
        SINN = -SIN2
      END IF
C
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE LRDSMP(LTOT,L1,L2,Z,SMATP,WIGD,MAXS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION SMATP(MAXS,MAXS),WIGD(MAXS)
      PARAMETER (ONE=1.0D+00)
C
      CALL LRDWIG(LTOT,Z,WIGD,MAXS)
      DO M1=-L1,L1
        DO M2=-L2,L2
          MA   = M1 + L1 + 1
          MB   = M2 + L2 + 1
          COEF = (-ONE)**L2
     *       / SQRT(FACT(L1+M1)*FACT(L2+M2)*FACT(L1-M1)*FACT(L2-M2))
          SMATP(MA,MB) = COEF * WIGD(MA+MB-1)
        END DO
      END DO
C
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE LRDWIG(LTOT,Z,WIGD,MAXS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION WIGD(MAXS)
      PARAMETER(ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00)
C
      COS2  = (ONE + Z) / TWO
      SIN2  = (ONE - Z) / TWO
      TERM0 = FACT(LTOT)
      DO M = -LTOT,LTOT
        MINK  = MAX(0,-M)
        MAXK  = MIN(LTOT,LTOT-M)
        TERM1 = (-ONE)**M * FACT(LTOT+M) * FACT(LTOT-M)
        TERM2 = ZERO
        DO K = MINK,MAXK
          TEMP  = FACT(LTOT-K)*FACT(K)*FACT(M+K)*FACT(LTOT-M-K)
          TERM2 = TERM2 + (-ONE)**K / TEMP
     *          * COS2**(LTOT-M/TWO-K) * SIN2**(M/TWO+K)
        END DO
        WIGD(M+LTOT+1) = TERM0 * TERM1 * TERM2
      END DO
C
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE LRDGRD(GRAD)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MXATM=2000)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /FMCOM / XX(1)
      DIMENSION GRAD(3,MXATM)
C
C    MEMORY ALLOCATION FOR LRD GRADIENT
C
      CALL VALFM(LOADFM)
      LEFPOL  = LOADFM  + 1
      LCOEF6  = LEFPOL  + NAT
      LCOEF8  = LCOEF6  + NAT*(NAT+1)/2
      LCOEF10 = LCOEF8  + NAT*(NAT+1)/2
      LAST    = LCOEF10 + NAT*(NAT+1)/2
      NEED    = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      CALL LRDGRX(XX(LEFPOL),XX(LCOEF6),XX(LCOEF8),XX(LCOEF10),GRAD)
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE LRDGRX(EFPOL,COEF6,COEF8,COEF10,GRAD)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      LOGICAL GOPARR,DSKWRK,MASWRK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      DOUBLE PRECISION LAMBDA,KAPPA
      COMMON /LRDPAR/ LAMBDA,KAPPA,RZERO
C
      DIMENSION EFPOL(NAT),COEF6(NAT*(NAT+1)/2),COEF8(NAT*(NAT+1)/2),
     *          COEF10(NAT*(NAT+1)/2),GRAD(3,MXATM)
      PARAMETER (ONE=1.0D+00,TWO=2.0D+00,THREE=3.0D+00,FOUR=4.0D+00,
     *           FIVE=5.0D+00,SIX=6.0D+00)
C
      THIRD = ONE / THREE
C
      CALL DAREAD(IDAF,IODA,EFPOL,NAT,511,0)
      CALL DAREAD(IDAF,IODA,COEF6,NAT*(NAT+1)/2,512,0)
      CALL DAREAD(IDAF,IODA,COEF8,NAT*(NAT+1)/2,513,0)
      CALL DAREAD(IDAF,IODA,COEF10,NAT*(NAT+1)/2,514,0)
C
      DO IAT=1,NAT-1
        DO JAT=IAT+1,NAT
          IJAT = JAT * (JAT-1)/2 + IAT
          XAB  = C(1,JAT) - C(1,IAT)
          YAB  = C(2,JAT) - C(2,IAT)
          ZAB  = C(3,JAT) - C(3,IAT)
          DIST = SQRT(XAB**2 + YAB**2 + ZAB**2)
          RBAR = RZERO + KAPPA
     *         * (EFPOL(IAT)**THIRD + EFPOL(JAT)**THIRD)
C
          DAMP = EXP(-ONE * (DIST/RBAR)**(-6))
          ADD  = SIX * COEF6(IJAT) * DIST**(-8)
     *         * DAMP * (ONE - (DIST/RBAR)**(-6))
          GRAD(1,IAT) = GRAD(1,IAT) - ADD * XAB
          GRAD(2,IAT) = GRAD(2,IAT) - ADD * YAB
          GRAD(3,IAT) = GRAD(3,IAT) - ADD * ZAB
          GRAD(1,JAT) = GRAD(1,JAT) + ADD * XAB
          GRAD(2,JAT) = GRAD(2,JAT) + ADD * YAB
          GRAD(3,JAT) = GRAD(3,JAT) + ADD * ZAB
C
          DAMP = EXP(-TWO * (DIST/RBAR)**(-6))
          ADD  = FOUR * COEF8(IJAT) * DIST**(-10)
     *         * DAMP * (TWO - THREE*(DIST/RBAR)**(-6))
          GRAD(1,IAT) = GRAD(1,IAT) - ADD * XAB
          GRAD(2,IAT) = GRAD(2,IAT) - ADD * YAB
          GRAD(3,IAT) = GRAD(3,IAT) - ADD * ZAB
          GRAD(1,JAT) = GRAD(1,JAT) + ADD * XAB
          GRAD(2,JAT) = GRAD(2,JAT) + ADD * YAB
          GRAD(3,JAT) = GRAD(3,JAT) + ADD * ZAB
C
          DAMP = EXP(-THREE * (DIST/RBAR)**(-6))
          ADD  = TWO * COEF10(IJAT) * DIST**(-12)
     *         * DAMP * (FIVE - THREE**2 * (DIST/RBAR)**(-6))
          GRAD(1,IAT) = GRAD(1,IAT) - ADD * XAB
          GRAD(2,IAT) = GRAD(2,IAT) - ADD * YAB
          GRAD(3,IAT) = GRAD(3,IAT) - ADD * ZAB
          GRAD(1,JAT) = GRAD(1,JAT) + ADD * XAB
          GRAD(2,JAT) = GRAD(2,JAT) + ADD * YAB
          GRAD(3,JAT) = GRAD(3,JAT) + ADD * ZAB
C
        END DO
      END DO
C
      IF(MASWRK) WRITE(IW,*)
     *      '.... DONE WITH LRD CONTRIBUTION TO GRADIENT ....'
C
      RETURN
      END
C*MODULE LRD  *DECK LRD
      SUBROUTINE PRTLRD
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IJKT,IDAF,NAV,IODA(950)
      LOGICAL GOPARR,DSKWRK,MASWRK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /FMCOM / XX(1)
C
      DOUBLE PRECISION LAMBDA,KAPPA
      INTEGER PRCOEF
      LOGICAL LRDFLG,MLTINT,PRPOL,PRPAIR,DOLRD
      COMMON /LRDISP/ ELRD6,ELRD8,ELRD10,EMULT,LRDFLG,MLTINT,DOLRD
      COMMON /LRDPAR/ LAMBDA,KAPPA,RZERO
      COMMON /LRDPRT/ PRPOL,PRCOEF,PRPAIR
C
      CALL VALFM(LOADFM)
      LEFPOL  = LOADFM  + 1
      LCOEF6  = LEFPOL  + NAT
      LCOEF8  = LCOEF6  + NAT*(NAT+1)/2
      LCOEF10 = LCOEF8  + NAT*(NAT+1)/2
      LATMPE  = LCOEF10 + NAT*(NAT+1)/2
      LWORK   = LATMPE  + NAT*(NAT+1)/2
      LAST    = LWORK   + NAT*(NAT+1)/2
      NEED    = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      CALL DAREAD(IDAF,IODA,XX(LEFPOL),NAT,511,0)
      CALL DAREAD(IDAF,IODA,XX(LCOEF6),NAT*(NAT+1)/2,512,0)
      CALL DAREAD(IDAF,IODA,XX(LCOEF8),NAT*(NAT+1)/2,513,0)
      CALL DAREAD(IDAF,IODA,XX(LCOEF10),NAT*(NAT+1)/2,514,0)
      CALL DAREAD(IDAF,IODA,XX(LATMPE),NAT*(NAT+1)/2,515,0)
C
      IF (MASWRK) THEN
        WRITE(IW,100)
        WRITE(IW,150) LAMBDA,KAPPA,RZERO
        WRITE(IW,200) ELRD6,ELRD8,ELRD10,EMULT,
     *                ELRD6+ELRD8+ELRD10+EMULT
      END IF
C
      IF (PRPOL.AND.MASWRK) THEN
        WRITE (IW,300)
        DO IAT=1,NAT
          WRITE (IW,310) IAT,XX(LEFPOL+IAT-1)
        END DO
      END IF
C
      IF (PRCOEF.GE.6 .AND. MASWRK) THEN
        WRITE (IW,*)
        WRITE (IW,*) '**** LRD C6 COEFFICIENT (A.U.) ****'
        CALL PRTRI(XX(LCOEF6),NAT)
      END IF
C
      IF (PRCOEF.GE.8) THEN
        DO IJAT=1,NAT*(NAT+1)/2
          XX(LWORK+IJAT-1) = XX(LCOEF8+IJAT-1) * 1.0D-02
        END DO
        IF (MASWRK) THEN
          WRITE (IW,*)
          WRITE (IW,*) '**** LRD C8 COEFFICIENT (10^2 A.U.) ****'
          CALL PRTRI(XX(LWORK),NAT)
        END IF
      END IF
C
      IF (PRCOEF.GE.10) THEN
        DO IJAT=1,NAT*(NAT+1)/2
          XX(LWORK+IJAT-1) = XX(LCOEF10+IJAT-1) * 1.0D-04
        END DO
        IF (MASWRK) THEN
          WRITE (IW,*)
          WRITE (IW,*) '**** LRD C10 COEFFICIENT (10^4 A.U.) ****'
          CALL PRTRI(XX(LWORK),NAT)
        END IF
      END IF
C
      IF (PRPAIR .AND. MASWRK) THEN
        WRITE (IW,*)
        WRITE (IW,*) '**** ATOMIC PAIR LRD ENERGY (KCAL/MOL) ****'
        CALL PRTRI(XX(LATMPE),NAT)
      END IF
C
      CALL RETFM(NEED)
      RETURN
C
  100 FORMAT(/10X,28(1H-)/11X,'LRD PARAMETERS AND RESULTS'/
     *       10X,28(1H-))
  150 FORMAT(/1X,'PARAMETERS: LAMBDA=',
     *       F7.4,2X,'KAPPA=',F7.4,2X,'RZERO=',F7.4)
  200 FORMAT(/1X,'**** DISPERSION CORRECTION ENERGY (A.U.) ****'/
     *       5X,'ELRD(   6  )=',F20.10/
     *       5X,'ELRD(   8  )=',F20.10/
     *       5X,'ELRD(  10  )=',F20.10/
     *       5X,'ELRD(6,MULT)=',F20.10/
     *       5X,'ELRD(6+8+10)=',F20.10)
  300 FORMAT(/1X,'**** ATOMIC EFFECTIVE POLARIZABILITY (A.U.) ****'/
     *       5X,'ATOM',10X,'POLARIZABILITY')
  310 FORMAT(5X,I4,14X,F10.4)
C
      END
