C 23 MAR 12 - DGF - PAD COMMON BLOCKS
C 28 Dec 11 - DGF - changes for FMO 4.2
C 10 Dec 10 - AVM - NEW MODULE IMPLEMENTING smd and smlve MINNESOTA
C                     SOLVATION MODELS
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C  GAMESS-MNSOL HIERARCHY (SMD MODEL)
C  ==================================
C
C       GAMESS          :
C                       :
C  MODULE: PCM          :              MODULE: MNSOL
C  PCMINP               :
C    |                  :
C    |__________________:__ DATSOLMN
C    |                  :
C    |                  :
C  MODULE: PCM          :
C  MAKECVM              :
C    |                  :
C    |__________________:__ SMDCOULRAD
C    |                  :     |______ RADMN
C    |                  :
C    |                  :
C  MODULE: RHFUHF       :
C  RHFCL/UHFOP          :
C    |                  :
C    |__________________:__ CDSSET
C    |                  :     |
C    |                  :     |______ CDSCALC
C    |                  :                |______ SMD_CDS_AQ
C    |                  :                |
C    |                  :                |______ SMD_CDS_NAQ
C    |                  :                |
C    |                  :                |______ VDWRAD
C    |                  :                |         |_____ RADMN
C    |                  :                |
C    |                  :                |______ CDS_EG
C    |                  :                          |
C    |                  :                          |_____ SMXCDS
C    |                  :                          |         |_____ IJ0
C    |                  :                          |
C    |                  :                          |_____ accsolang
C    |                  :                                    |_____ IJ0
C    |                  :
C    |                  :
C  MODULE: GRD1         :
C  STVDER               :
C    |                  :
C    |                  :
C  MODULE: GAMESS       :
C  GAMESS               :
C    |                  :
C    |__________________:__ SMDPRT
C                       :
C
C
C  GAMESS-MNSOL HIERARCHY (SMVLE MODEL)
C  ====================================
C
C       GAMESS          :
C                       :
C  MODULE: SVPINP       :              MODULE: MNSOL
C  SVPINP               :
C    |                  :
C    |                  :
C  MODULE: SVPCHG       :
C  SVPOUT               :
C    |                  :
C    |__________________:__ CDSSET
C    |                  :     |______ CDSCALC
C    |                  :                |______ SMVLE_CDS_AQ
C    |                  :                |
C    |                  :                |______ VDWRAD
C    |                  :                |         |_____ RADMN
C    |                  :                |
C    |                  :                |______ CDS_EG
C    |                  :                          |_____ SMXCDS
C    |                  :                          |         |_____ IJ0
C    |                  :                          |
C    |                  :                          |_____ accsolang
C    |                  :                                    |_____ IJ0
C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C*MODULE MNSOL  *DECK DATSOLMN
C
      SUBROUTINE DATSOLMN(ZSOLMN,ZSOLMNLONG,EPS,EPSINF,SOLA,SOLB,
     *                    SOLC,SOLG,SOLH,SOLN,IW,MASWRK)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL MASWRK
C
      CHARACTER*8 ZSOLMN,SOLMN
      CHARACTER*35 ZSOLMNLONG,SOLMNLONG
C
      DIMENSION SOLMN(178),DEPS(178),DSOLA(178),DSOLB(178),
     $          DSOLC(178),DSOLG(178),DSOLH(178),DSOLN(178),
     $          SOLMNLONG(178)
C
C     for more information on the parameterizations, see
C       http://comp.chem.umn.edu/solvation/mnsddb.pdf
C
C SHORT NAMES OF 178 AVAILABLE NONAQUEOUS SOLVENTS
C
      DATA (SOLMN(iii),iii=1,50)/
     $ 'ACETACID',
     $ 'ACETONE ',
     $ 'ACETNTRL',
     $ 'ACETPHEN',
     $ 'ANILINE ',
     $ 'ANISOLE ',
     $ 'BENZALDH',
     $ 'BENZENE ',
     $ 'BENZNTRL',
     $ 'BENZYLCL',
     $ 'BRISOBUT',
     $ 'BRBENZEN',
     $ 'BRETHANE',
     $ 'BROMFORM',
     $ 'BROCTANE',
     $ 'BRPENTAN',
     $ 'BRPROPA2',
     $ 'BRPROPAN',
     $ 'BUTANAL ',
     $ 'BUTACID ',
     $ 'BUTANOL ',
     $ 'BUTANOL2',
     $ 'BUTANONE',
     $ 'BUTANTRL',
     $ 'BUTILE  ',
     $ 'NBA     ',
     $ 'NBUTBENZ',
     $ 'SBUTBENZ',
     $ 'TBUTBENZ',
     $ 'CS2     ',
     $ 'CARBNTET',
     $ 'CLBENZEN',
     $ 'SECBUTCL',
     $ 'CHCL3   ',
     $ 'CLHEXANE',
     $ 'CLPENTAN',
     $ 'CLPROPAN',
     $ 'OCLTOLUE',
     $ 'M-CRESOL',
     $ 'O-CRESOL',
     $ 'CYCHEXAN',
     $ 'CYCHEXON',
     $ 'CYCPENTN',
     $ 'CYCPNTOL',
     $ 'CYCPNTON',
     $ 'DECLNCIS',
     $ 'DECLNTRA',
     $ 'DECLNMIX',
     $ 'DECANE  ',
     $ 'DECANOL '/
      DATA (SOLMN(iii),iii=51,100)/
     $ 'EDB12   ',
     $ 'DIBRMETN',
     $ 'BUTYLETH',
     $ 'ODICLBNZ',
     $ 'EDC12   ',
     $ 'C12DCE  ',
     $ 'T12DCE  ',
     $ 'DCM     ',
     $ 'ETHER   ',
     $ 'ET2S    ',
     $ 'DIETAMIN',
     $ 'MI      ',
     $ 'DIPE    ',
     $ 'DMDS    ',
     $ 'DMSO    ',
     $ 'DMA     ',
     $ 'CISDMCHX',
     $ 'DMF     ',
     $ 'DMEPEN24',
     $ 'DMEPYR24',
     $ 'DMEPYR26',
     $ 'DIOXANE ',
     $ 'PHOPH   ',
     $ 'DPROAMIN',
     $ 'DODECAN ',
     $ 'MEG     ',
     $ 'ETSH    ',
     $ 'ETHANOL ',
     $ 'ETOAC   ',
     $ 'ETOME   ',
     $ 'EB      ',
     $ 'PHENETOL',
     $ 'C6H5F   ',
     $ 'FOCTANE ',
     $ 'FORMAMID',
     $ 'FORMACID',
     $ 'HEPTANE ',
     $ 'HEPTANOL',
     $ 'HEPTNON2',
     $ 'HEPTNON4',
     $ 'HEXADECN',
     $ 'HEXANE  ',
     $ 'HEXNACID',
     $ 'HEXANOL ',
     $ 'HEXANON2',
     $ 'HEXENE  ',
     $ 'HEXYNE  ',
     $ 'C6H5I   ',
     $ 'IOBUTANE',
     $ 'C2H5I   '/
      DATA (SOLMN(iii),iii=101,150)/
     $ 'IOHEXDEC',
     $ 'CH3I    ',
     $ 'IOPENTAN',
     $ 'IOPROPAN',
     $ 'CUMENE  ',
     $ 'P-CYMENE',
     $ 'MESITYLN',
     $ 'METHANOL',
     $ 'EGME    ',
     $ 'MEACETAT',
     $ 'MEBNZATE',
     $ 'MEBUTATE',
     $ 'MEFORMAT',
     $ 'MIBK    ',
     $ 'MEPROPYL',
     $ 'ISOBUTOL',
     $ 'TERBUTOL',
     $ 'NMEANILN',
     $ 'MECYCHEX',
     $ 'NMFMIXTR',
     $ 'ISOHEXAN',
     $ 'MEPYRID2',
     $ 'MEPYRID3',
     $ 'MEPYRID4',
     $ 'C6H5NO2 ',
     $ 'C2H5NO2 ',
     $ 'CH3NO2  ',
     $ 'NTRPROP1',
     $ 'NTRPROP2',
     $ 'ONTRTOLU',
     $ 'NONANE  ',
     $ 'NONANOL ',
     $ 'NONANONE',
     $ 'OCTANE  ',
     $ 'OCTANOL ',
     $ 'OCTANON2',
     $ 'PENTDECN',
     $ 'PENTANAL',
     $ 'NPENTANE',
     $ 'PENTACID',
     $ 'PENTANOL',
     $ 'PENTNON2',
     $ 'PENTNON3',
     $ 'PENTENE ',
     $ 'E2PENTEN',
     $ 'PENTACET',
     $ 'PENTAMIN',
     $ 'PFB     ',
     $ 'BENZALCL',
     $ 'PROPANAL'/
      DATA (SOLMN(iii),iii=151,178)/
     $ 'PROPACID',
     $ 'PROPANOL',
     $ 'PROPNOL2',
     $ 'PROPNTRL',
     $ 'PROPENOL',
     $ 'PROPACET',
     $ 'PROPAMIN',
     $ 'PYRIDINE',
     $ 'C2CL4   ',
     $ 'THF     ',
     $ 'SULFOLAN',
     $ 'TETRALIN',
     $ 'THIOPHEN',
     $ 'PHSH    ',
     $ 'TOLUENE ',
     $ 'TBP     ',
     $ 'TCA111  ',
     $ 'TCA112  ',
     $ 'TCE     ',
     $ 'ET3N    ',
     $ 'TFE222  ',
     $ 'TMBEN124',
     $ 'ISOCTANE',
     $ 'UNDECANE',
     $ 'M-XYLENE',
     $ 'O-XYLENE',
     $ 'P-XYLENE',
     $ 'XYLENEMX'/
C
C LONG NAMES OF 178 AVAILABLE NONAQUEOUS SOLVENTS
      DATA (SOLMNLONG(iii),iii=1,50)/
     $ 'acetic acid',
     $ 'acetone',
     $ 'acetonitrile',
     $ 'acetophenone',
     $ 'aniline',
     $ 'anisole',
     $ 'benzaldehyde',
     $ 'benzene',
     $ 'benzonitrile',
     $ 'benzyl chloride',
     $ '1-bromo-2-methylpropane',
     $ 'bromobenzene',
     $ 'bromoethane',
     $ 'bromoform',
     $ '1-bromooctane',
     $ '1-bromopentane',
     $ '2-bromopropane',
     $ '1-bromopropane',
     $ 'butanal',
     $ 'butanoic acid',
     $ '1-butanol',
     $ '2-butanol',
     $ 'butanone',
     $ 'butanonitrile',
     $ 'butyl acetate',
     $ 'butylamine',
     $ 'n-butylbenzene',
     $ 'sec-butylbenzene',
     $ 'tert-butylbenzene',
     $ 'carbon disulfide',
     $ 'carbon tetrachloride',
     $ 'chlorobenzene',
     $ 'sec-butyl chloride',
     $ 'chloroform',
     $ '1-chlorohexane',
     $ '1-chloropentane',
     $ '1-chloropropane',
     $ 'o-chlorotoluene',
     $ 'm-cresol',
     $ 'o-cresol',
     $ 'cyclohexane',
     $ 'cyclohexanone',
     $ 'cyclopentane',
     $ 'cyclopentanol',
     $ 'cyclopentanone',
     $ 'cis-decalin',
     $ 'trans-decalin',
     $ 'decalin (cis/trans mixture)',
     $ 'n-decane',
     $ '1-decanol'/
      DATA (SOLMNLONG(iii),iii=51,100)/
     $ '1,2-dibromoethane',
     $ 'dibromomethane',
     $ 'dibutyl ether',
     $ 'o-dichlorobenzene',
     $ '1,2-dichloroethane',
     $ 'cis-dichloroethylene',
     $ 'trans-dichloroethylene',
     $ 'dichloromethane',
     $ 'diethyl ether',
     $ 'diethyl sulfide',
     $ 'diethylamine',
     $ 'diiodomethane',
     $ 'diisopropyl ether',
     $ 'dimethyl disulfide',
     $ 'dimethyl sulfoxide',
     $ 'N,N-dimethylacetamide',
     $ 'cis-1,2-dimethylcyclohexane',
     $ 'N,N-dimethylformamide',
     $ '2,4-dimethylpentane',
     $ '2,4-dimethylpyridine',
     $ '2,6-dimethylpyridine',
     $ '1,4-dioxane',
     $ 'diphenyl ether',
     $ 'dipropylamine',
     $ 'n-dodecane',
     $ '1,2-ethanediol',
     $ 'ethanethiol',
     $ 'ethanol',
     $ 'ethyl acetate',
     $ 'ethyl formate',
     $ 'ethylbenzene',
     $ 'ethylphenyl ether',
     $ 'fluorobenzene',
     $ '1-fluorooctane',
     $ 'formamide',
     $ 'formic acid',
     $ 'n-heptane',
     $ '1-heptanol',
     $ '2-heptanone',
     $ '4-heptanone',
     $ 'n-hexadecane',
     $ 'n-hexane',
     $ 'hexanoic acid',
     $ '1-hexanol',
     $ '2-hexanone',
     $ '1-hexene',
     $ '1-hexyne',
     $ 'iodobenzene',
     $ '1-iodobutane',
     $ 'iodoethane'/
      DATA (SOLMNLONG(iii),iii=101,150)/
     $ '1-iodohexadecane',
     $ 'iodomethane',
     $ '1-iodopentane',
     $ '1-iodopropane',
     $ 'isopropylbenzene',
     $ 'p-isopropyltoluene',
     $ 'mesitylene',
     $ 'methanol',
     $ '2-methoxyethanol',
     $ 'methyl acetate',
     $ 'methyl benzoate',
     $ 'methyl butanoate',
     $ 'methyl formate',
     $ '4-methyl-2-pentanone',
     $ 'methyl propanoate',
     $ '2-methyl-1-propanol',
     $ '2-methyl-2-propanol',
     $ 'N-methylaniline',
     $ 'methylcyclohexane',
     $ 'N-methylformamide (E/Z mixture)',
     $ '2-methylpentane',
     $ '2-methylpyridine',
     $ '3-methylpyridine',
     $ '4-methylpyridine',
     $ 'nitrobenzene',
     $ 'nitroethane',
     $ 'nitromethane',
     $ '1-nitropropane',
     $ '2-nitropropane',
     $ 'o-nitrotoluene',
     $ 'n-nonane',
     $ '1-nonanol',
     $ '5-nonanone',
     $ 'n-octane',
     $ '1-octanol',
     $ '2-octanone',
     $ 'n-pentadecane',
     $ 'pentanal',
     $ 'n-pentane',
     $ 'pentanoic acid',
     $ '1-pentanol',
     $ '2-pentanone',
     $ '3-pentanone',
     $ '1-pentene',
     $ 'E-2-pentene',
     $ 'pentyl acetate',
     $ 'pentylamine',
     $ 'perfluorobenzene',
     $ 'phenylmethanol',
     $ 'propanal'/
      DATA (SOLMNLONG(iii),iii=151,178)/
     $ 'propanoic acid',
     $ '1-propanol',
     $ '2-propanol',
     $ 'propanonitrile',
     $ '2-propen-1-ol',
     $ 'propyl acetate',
     $ 'propylamine',
     $ 'pyridine',
     $ 'tetrachloroethene',
     $ 'tetrahydrofuran',
     $ 'tetrahydrothiophene-S,S-dioxide',
     $ 'tetralin',
     $ 'thiophene',
     $ 'thiophenol',
     $ 'toluene',
     $ 'tributyl phosphate',
     $ '1,1,1-trichloroethane',
     $ '1,1,2-trichloroethane',
     $ 'trichloroethene',
     $ 'triethylamine',
     $ '2,2,2-trifluoroethanol',
     $ '1,2,4-trimethylbenzene',
     $ '2,2,4-trimethylpentane',
     $ 'n-undecane',
     $ 'm-xylene',
     $ 'o-xylene',
     $ 'p-xylene',
     $ 'xylene (mixture)'/
C
C DIELECTRIC CONSTANT AT 298 K
      DATA (DEPS(iii),iii=1,50)/
     $ 6.2528,
     $ 20.493,
     $ 35.688,
     $ 17.44,
     $ 6.8882,
     $ 4.2247,
     $ 18.220,
     $ 2.2706,
     $ 25.592,
     $ 6.7175,
     $ 7.7792,
     $ 5.3954,
     $ 9.01,
     $ 4.2488,
     $ 5.0244,
     $ 6.269,
     $ 9.3610,
     $ 8.0496,
     $ 13.45,
     $ 2.9931,
     $ 17.332,
     $ 15.944,
     $ 18.246,
     $ 24.291,
     $ 4.9941,
     $ 4.6178,
     $ 2.36,
     $ 2.3446,
     $ 2.3447,
     $ 2.6105,
     $ 2.2280,
     $ 5.6968,
     $ 8.3930,
     $ 4.7113,
     $ 5.9491,
     $ 6.5022,
     $ 8.3548,
     $ 4.6331,
     $ 12.44,
     $ 6.76,
     $ 2.0165,
     $ 15.619,
     $ 1.9608,
     $ 16.989,
     $ 13.58,
     $ 2.2139,
     $ 2.1781,
     $ 2.196,
     $ 1.9846,
     $ 7.5305/
      DATA (DEPS(iii),iii=51,100)/
     $ 4.9313,
     $ 7.2273,
     $ 3.0473,
     $ 9.9949,
     $ 10.125,
     $ 9.2,
     $ 2.14,
     $ 8.93,
     $ 4.2400,
     $ 5.723,
     $ 3.5766,
     $ 5.32,
     $ 3.38,
     $ 9.6,
     $ 46.826,
     $ 37.781,
     $ 2.06,
     $ 37.219,
     $ 1.8939,
     $ 9.4176,
     $ 7.1735,
     $ 2.2099,
     $ 3.73,
     $ 2.9112,
     $ 2.0060,
     $ 40.245,
     $ 6.667,
     $ 24.852,
     $ 5.9867,
     $ 8.3310,
     $ 2.4339,
     $ 4.1797,
     $ 5.42,
     $ 3.89,
     $ 108.94,
     $ 51.1,
     $ 1.9113,
     $ 11.321,
     $ 11.658,
     $ 12.257,
     $ 2.0402,
     $ 1.8819,
     $ 2.6,
     $ 12.51,
     $ 14.136,
     $ 2.0717,
     $ 2.615,
     $ 4.5470,
     $ 6.173,
     $ 7.6177/
      DATA (DEPS(iii),iii=101,150)/
     $ 3.5338,
     $ 6.8650,
     $ 5.6973,
     $ 6.9626,
     $ 2.3712,
     $ 2.2322,
     $ 2.2650,
     $ 32.613,
     $ 17.2,
     $ 6.8615,
     $ 6.7367,
     $ 5.5607,
     $ 8.8377,
     $ 12.887,
     $ 6.0777,
     $ 16.777,
     $ 12.47,
     $ 5.9600,
     $ 2.024,
     $ 181.56,
     $ 1.89,
     $ 9.9533,
     $ 11.645,
     $ 11.957,
     $ 34.809,
     $ 28.29,
     $ 36.562,
     $ 23.73,
     $ 25.654,
     $ 25.669,
     $ 1.9605,
     $ 8.5991,
     $ 10.6,
     $ 1.9406,
     $ 9.8629,
     $ 9.4678,
     $ 2.0333,
     $ 10.00,
     $ 1.8371,
     $ 2.6924,
     $ 15.13,
     $ 15.200,
     $ 16.78,
     $ 1.9905,
     $ 2.051,
     $ 4.7297,
     $ 4.2010,
     $ 2.029,
     $ 12.457,
     $ 18.5/
      DATA (DEPS(iii),iii=151,178)/
     $ 3.44,
     $ 20.524,
     $ 19.264,
     $ 29.324,
     $ 19.011,
     $ 5.5205,
     $ 4.9912,
     $ 12.978,
     $ 2.268,
     $ 7.4257,
     $ 43.962,
     $ 2.771,
     $ 2.7270,
     $ 4.2728,
     $ 2.3741,
     $ 8.1781,
     $ 7.0826,
     $ 7.1937,
     $ 3.422,
     $ 2.3832,
     $ 26.726,
     $ 2.3653,
     $ 1.9358,
     $ 1.9910,
     $ 2.3478,
     $ 2.5454,
     $ 2.2705,
     $ 2.3879/
C
C ABRAHAM'S ALPHAS
      DATA (DSOLA(iii),iii=1,50)/
     $ 0.61,
     $ 0.04,
     $ 0.07,
     $ 0.00,
     $ 0.26,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.15,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.60,
     $ 0.37,
     $ 0.33,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.16,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.15,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.57,
     $ 0.52,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.32,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.37/
      DATA (DSOLA(iii),iii=51,100)/
     $ 0.10,
     $ 0.10,
     $ 0.00,
     $ 0.00,
     $ 0.10,
     $ 0.11,
     $ 0.09,
     $ 0.10,
     $ 0.00,
     $ 0.00,
     $ 0.08,
     $ 0.05,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.08,
     $ 0.00,
     $ 0.58,
     $ 0.00,
     $ 0.37,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.62,
     $ 0.75,
     $ 0.00,
     $ 0.37,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.60,
     $ 0.37,
     $ 0.00,
     $ 0.00,
     $ 0.12,
     $ 0.00,
     $ 0.00,
     $ 0.00/
      DATA (DSOLA(iii),iii=101,150)/
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.43,
     $ 0.30,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.37,
     $ 0.31,
     $ 0.17,
     $ 0.00,
     $ 0.40,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.02,
     $ 0.06,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.37,
     $ 0.00,
     $ 0.00,
     $ 0.37,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.60,
     $ 0.37,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.16,
     $ 0.00,
     $ 0.33,
     $ 0.00/
      DATA (DSOLA(iii),iii=151,178)/
     $ 0.60,
     $ 0.37,
     $ 0.33,
     $ 0.02,
     $ 0.38,
     $ 0.00,
     $ 0.16,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.09,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.13,
     $ 0.08,
     $ 0.00,
     $ 0.57,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00/
C
C ABRAHAM'S BETAS
      DATA (DSOLB(iii),iii=1,50)/
     $ 0.44,
     $ 0.49,
     $ 0.32,
     $ 0.48,
     $ 0.41,
     $ 0.29,
     $ 0.39,
     $ 0.14,
     $ 0.33,
     $ 0.33,
     $ 0.12,
     $ 0.09,
     $ 0.12,
     $ 0.06,
     $ 0.12,
     $ 0.12,
     $ 0.14,
     $ 0.12,
     $ 0.45,
     $ 0.45,
     $ 0.48,
     $ 0.56,
     $ 0.51,
     $ 0.36,
     $ 0.45,
     $ 0.61,
     $ 0.15,
     $ 0.16,
     $ 0.16,
     $ 0.07,
     $ 0.00,
     $ 0.07,
     $ 0.12,
     $ 0.02,
     $ 0.10,
     $ 0.10,
     $ 0.10,
     $ 0.07,
     $ 0.34,
     $ 0.30,
     $ 0.00,
     $ 0.56,
     $ 0.00,
     $ 0.56,
     $ 0.52,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.00,
     $ 0.48/
      DATA (DSOLB(iii),iii=51,100)/
     $ 0.17,
     $ 0.10,
     $ 0.45,
     $ 0.04,
     $ 0.11,
     $ 0.05,
     $ 0.05,
     $ 0.05,
     $ 0.41,
     $ 0.32,
     $ 0.69,
     $ 0.23,
     $ 0.41,
     $ 0.28,
     $ 0.88,
     $ 0.78,
     $ 0.00,
     $ 0.74,
     $ 0.00,
     $ 0.63,
     $ 0.63,
     $ 0.64,
     $ 0.20,
     $ 0.69,
     $ 0.00,
     $ 0.78,
     $ 0.24,
     $ 0.48,
     $ 0.45,
     $ 0.38,
     $ 0.15,
     $ 0.32,
     $ 0.10,
     $ 0.10,
     $ 0.60,
     $ 0.38,
     $ 0.00,
     $ 0.48,
     $ 0.51,
     $ 0.51,
     $ 0.00,
     $ 0.00,
     $ 0.45,
     $ 0.48,
     $ 0.51,
     $ 0.07,
     $ 0.10,
     $ 0.12,
     $ 0.15,
     $ 0.15/
      DATA (DSOLB(iii),iii=101,150)/
     $ 0.15,
     $ 0.13,
     $ 0.15,
     $ 0.15,
     $ 0.16,
     $ 0.19,
     $ 0.19,
     $ 0.47,
     $ 0.84,
     $ 0.45,
     $ 0.46,
     $ 0.45,
     $ 0.38,
     $ 0.51,
     $ 0.45,
     $ 0.48,
     $ 0.60,
     $ 0.43,
     $ 0.00,
     $ 0.55,
     $ 0.00,
     $ 0.58,
     $ 0.54,
     $ 0.54,
     $ 0.28,
     $ 0.33,
     $ 0.31,
     $ 0.31,
     $ 0.33,
     $ 0.27,
     $ 0.00,
     $ 0.48,
     $ 0.51,
     $ 0.00,
     $ 0.48,
     $ 0.51,
     $ 0.00,
     $ 0.45,
     $ 0.00,
     $ 0.45,
     $ 0.48,
     $ 0.51,
     $ 0.51,
     $ 0.07,
     $ 0.07,
     $ 0.45,
     $ 0.61,
     $ 0.00,
     $ 0.56,
     $ 0.45/
      DATA (DSOLB(iii),iii=151,178)/
     $ 0.45,
     $ 0.48,
     $ 0.56,
     $ 0.36,
     $ 0.48,
     $ 0.45,
     $ 0.61,
     $ 0.52,
     $ 0.00,
     $ 0.48,
     $ 0.88,
     $ 0.19,
     $ 0.15,
     $ 0.16,
     $ 0.14,
     $ 1.21,
     $ 0.09,
     $ 0.13,
     $ 0.03,
     $ 0.79,
     $ 0.25,
     $ 0.19,
     $ 0.00,
     $ 0.00,
     $ 0.16,
     $ 0.16,
     $ 0.16,
     $ 0.16/
C
C AROMATICITY: 
C   fraction of non-hydrogenic solvent atoms that are aromatic carbons
C
      DATA (DSOLC(iii),iii=1,50)/
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.667,
     $ 0.857,
     $ 0.750,
     $ 0.857,
     $ 1.000,
     $ 0.750,
     $ 0.750,
     $ 0.000,
     $ 0.857,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.600,
     $ 0.600,
     $ 0.600,
     $ 0.000,
     $ 0.000,
     $ 0.857,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.750,
     $ 0.750,
     $ 0.750,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000/
      DATA (DSOLC(iii),iii=51,100)/
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.750,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.625,
     $ 0.625,
     $ 0.000,
     $ 0.923,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.750,
     $ 0.667,
     $ 0.857,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.857,
     $ 0.000,
     $ 0.000/
      DATA (DSOLC(iii),iii=101,150)/
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.667,
     $ 0.600,
     $ 0.667,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.600,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.750,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.714,
     $ 0.714,
     $ 0.714,
     $ 0.667,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.600,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.500,
     $ 0.750,
     $ 0.000/
      DATA (DSOLC(iii),iii=151,178)/
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.833,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.600,
     $ 0.800,
     $ 0.857,
     $ 0.857,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.667,
     $ 0.000,
     $ 0.000,
     $ 0.750,
     $ 0.750,
     $ 0.750,
     $ 0.750/
C
C MACROSCOPIC SURFACE TENSION AT 298 K
      DATA (DSOLG(iii),iii=1,50)/
     $ 39.01,
     $ 33.77,
     $ 41.25,
     $ 56.19,
     $ 60.62,
     $ 50.52,
     $ 54.69,
     $ 40.62,
     $ 55.83,
     $ 53.04,
     $ 34.69,
     $ 50.72,
     $ 34,
     $ 64.58,
     $ 41.28,
     $ 38.7,
     $ 33.46,
     $ 36.36,
     $ 35.06,
     $ 37.49,
     $ 35.88,
     $ 32.44,
     $ 34.5,
     $ 38.75,
     $ 35.81,
     $ 33.74,
     $ 41.33,
     $ 40.35,
     $ 39.78,
     $ 45.45,
     $ 38.04,
     $ 47.48,
     $ 31.1,
     $ 38.39,
     $ 37.03,
     $ 35.12,
     $ 30.66,
     $ 47.43,
     $ 51.37,
     $ 53.11,
     $ 35.48,
     $ 49.76,
     $ 31.49,
     $ 46.8,
     $ 47.21,
     $ 45.45,
     $ 42.19,
     $ 43.82,
     $ 33.64,
     $ 41.04/
      DATA (DSOLG(iii),iii=51,100)/
     $ 56.93,
     $ 56.21,
     $ 35.98,
     $ 52.72,
     $ 45.86,
     $ 39.8,
     $ 37.13,
     $ 39.15,
     $ 23.96,
     $ 35.36,
     $ 28.57,
     $ 95.25,
     $ 24.86,
     $ 48.06,
     $ 61.78,
     $ 47.62,
     $ 36.28,
     $ 49.56,
     $ 25.42,
     $ 46.86,
     $ 44.64,
     $ 47.14,
     $ 38.5,
     $ 32.11,
     $ 35.85,
     $ 69.07,
     $ 33.22,
     $ 31.62,
     $ 33.67,
     $ 33.36,
     $ 41.38,
     $ 46.65,
     $ 38.37,
     $ 33.92,
     $ 82.08,
     $ 53.44,
     $ 28.28,
     $ 38.5,
     $ 37.6,
     $ 35.98,
     $ 38.93,
     $ 25.75,
     $ 39.65,
     $ 37.15,
     $ 36.63,
     $ 25.76,
     $ 28.79,
     $ 55.72,
     $ 40.65,
     $ 40.96/
      DATA (DSOLG(iii),iii=101,150)/
     $ 46.48,
     $ 43.67,
     $ 41.56,
     $ 41.45,
     $ 39.85,
     $ 38.34,
     $ 39.65,
     $ 31.77,
     $ 44.39,
     $ 35.59,
     $ 53.5,
     $ 35.44,
     $ 35.06,
     $ 33.83,
     $ 35.18,
     $ 32.38,
     $ 28.73,
     $ 53.11,
     $ 33.52,
     $ 55.44,
     $ 24.3,
     $ 47.5,
     $ 49.61,
     $ 50.17,
     $ 57.54,
     $ 46.25,
     $ 52.58,
     $ 43.32,
     $ 42.16,
     $ 59.12,
     $ 32.21,
     $ 40.14,
     $ 37.83,
     $ 30.43,
     $ 39.01,
     $ 37.29,
     $ 38.34,
     $ 36.62,
     $ 22.3,
     $ 38.4,
     $ 36.5,
     $ 33.46,
     $ 35.61,
     $ 22.24,
     $ 23.62,
     $ 36.23,
     $ 35.54,
     $ 31.74,
     $ 52.96,
     $ 32.48/
      DATA (DSOLG(iii),iii=151,178)/
     $ 37.71,
     $ 33.57,
     $ 30.13,
     $ 38.5,
     $ 36.39,
     $ 34.26,
     $ 31.31,
     $ 52.62,
     $ 45.19,
     $ 39.44,
     $ 87.49,
     $ 47.74,
     $ 44.16,
     $ 55.24,
     $ 40.2,
     $ 27.55,
     $ 36.24,
     $ 48.97,
     $ 41.45,
     $ 29.1,
     $ 42.02,
     $ 42.03,
     $ 26.38,
     $ 34.85,
     $ 40.98,
     $ 42.83,
     $ 40.32,
     $ 41.38/
C
C ELECTRONEGATIVE HALOGENICITY: 
C   fraction of non-hydrogenic solvent atoms that are F, Cl, or Br
C
      DATA (DSOLH(iii),iii=1,50)/
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.125,
     $ 0.200,
     $ 0.143,
     $ 0.333,
     $ 0.750,
     $ 0.111,
     $ 0.167,
     $ 0.250,
     $ 0.250,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.800,
     $ 0.143,
     $ 0.200,
     $ 0.750,
     $ 0.143,
     $ 0.167,
     $ 0.250,
     $ 0.125,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000/
      DATA (DSOLH(iii),iii=51,100)/
     $ 0.500,
     $ 0.667,
     $ 0.000,
     $ 0.250,
     $ 0.500,
     $ 0.500,
     $ 0.500,
     $ 0.667,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.143,
     $ 0.111,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000/
      DATA (DSOLH(iii),iii=101,150)/
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.500,
     $ 0.000,
     $ 0.000/
      DATA (DSOLH(iii),iii=151,178)/
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.667,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.600,
     $ 0.600,
     $ 0.600,
     $ 0.000,
     $ 0.500,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000,
     $ 0.000/
C
C INDEX OF REFRACTION AT OPTICAL FREQUENCY AT 293 K
      DATA (DSOLN(iii),iii=1,50)/
     $ 1.3720,
     $ 1.3588,
     $ 1.3442,
     $ 1.5372,
     $ 1.5863,
     $ 1.5174,
     $ 1.5463,
     $ 1.5011,
     $ 1.5289,
     $ 1.5391,
     $ 1.4348,
     $ 1.5597,
     $ 1.4239,
     $ 1.6005,
     $ 1.4524,
     $ 1.4447,
     $ 1.4251,
     $ 1.4343,
     $ 1.3843,
     $ 1.3980,
     $ 1.3993,
     $ 1.3978,
     $ 1.3788,
     $ 1.3842,
     $ 1.3941,
     $ 1.4031,
     $ 1.4898,
     $ 1.4895,
     $ 1.4927,
     $ 1.6319,
     $ 1.4601,
     $ 1.5241,
     $ 1.3971,
     $ 1.4459,
     $ 1.4199,
     $ 1.4127,
     $ 1.3879,
     $ 1.5268,
     $ 1.5438,
     $ 1.5361,
     $ 1.4266,
     $ 1.4507,
     $ 1.4065,
     $ 1.4530,
     $ 1.4366,
     $ 1.4810,
     $ 1.4695,
     $ 1.4753,
     $ 1.4102,
     $ 1.4372/
      DATA (DSOLN(iii),iii=51,100)/
     $ 1.5387,
     $ 1.5420,
     $ 1.3992,
     $ 1.5515,
     $ 1.4448,
     $ 1.4490,
     $ 1.4454,
     $ 1.4242,
     $ 1.3526,
     $ 1.4430,
     $ 1.3864,
     $ 1.7425,
     $ 1.3679,
     $ 1.5289,
     $ 1.4170,
     $ 1.4380,
     $ 1.4360,
     $ 1.4305,
     $ 1.3815,
     $ 1.5010,
     $ 1.4953,
     $ 1.4224,
     $ 1.5787,
     $ 1.4050,
     $ 1.4216,
     $ 1.4318,
     $ 1.4310,
     $ 1.3611,
     $ 1.3723,
     $ 1.3599,
     $ 1.4959,
     $ 1.5076,
     $ 1.4684,
     $ 1.3935,
     $ 1.4472,
     $ 1.3714,
     $ 1.3878,
     $ 1.4249,
     $ 1.4088,
     $ 1.4069,
     $ 1.4345,
     $ 1.3749,
     $ 1.4163,
     $ 1.4178,
     $ 1.4007,
     $ 1.3837,
     $ 1.3989,
     $ 1.6200,
     $ 1.5001,
     $ 1.5133/
      DATA (DSOLN(iii),iii=101,150)/
     $ 1.4806,
     $ 1.5380,
     $ 1.4959,
     $ 1.5058,
     $ 1.4915,
     $ 1.4909,
     $ 1.4994,
     $ 1.3288,
     $ 1.4024,
     $ 1.3614,
     $ 1.5164,
     $ 1.3878,
     $ 1.3433,
     $ 1.3962,
     $ 1.3775,
     $ 1.3955,
     $ 1.3878,
     $ 1.5684,
     $ 1.4231,
     $ 1.4319,
     $ 1.3715,
     $ 1.4957,
     $ 1.5040,
     $ 1.5037,
     $ 1.5562,
     $ 1.3917,
     $ 1.3817,
     $ 1.4018,
     $ 1.3944,
     $ 1.5450,
     $ 1.4054,
     $ 1.4333,
     $ 1.4195,
     $ 1.3974,
     $ 1.4295,
     $ 1.4151,
     $ 1.4315,
     $ 1.3944,
     $ 1.3575,
     $ 1.4085,
     $ 1.4101,
     $ 1.3895,
     $ 1.3924,
     $ 1.3715,
     $ 1.3793,
     $ 1.4023,
     $ 1.448,
     $ 1.3777,
     $ 1.5396,
     $ 1.3636/
      DATA (DSOLN(iii),iii=151,178)/
     $ 1.3869,
     $ 1.3850,
     $ 1.3776,
     $ 1.3655,
     $ 1.4135,
     $ 1.3842,
     $ 1.3870,
     $ 1.5095,
     $ 1.5053,
     $ 1.4050,
     $ 1.4833,
     $ 1.5413,
     $ 1.5289,
     $ 1.5893,
     $ 1.4961,
     $ 1.4224,
     $ 1.4379,
     $ 1.4714,
     $ 1.4773,
     $ 1.4010,
     $ 1.2907,
     $ 1.5048,
     $ 1.3915,
     $ 1.4398,
     $ 1.4972,
     $ 1.5055,
     $ 1.4958,
     $ 1.4995/
C
      IF(ZSOLMN.EQ.'WATER   '  .OR.
     $   ZSOLMN.EQ.'H2O     ') THEN
        RETURN
      ELSE
       DO I=1,178
        IF (ZSOLMN.EQ.SOLMN(I)) THEN
        ZSOLMNLONG=SOLMNLONG(I)
        EPS=DEPS(I)
        SOLA=DSOLA(I)
        SOLB=DSOLB(I)
        SOLC=DSOLC(I)
        SOLG=DSOLG(I)
        SOLH=DSOLH(I)
        SOLN=DSOLN(I)
        EPSINF=SOLN**2
        RETURN
        ENDIF
       ENDDO
       IF(MASWRK) THEN
       WRITE(IW,9010) ZSOLMN,(SOLMN(I),' FOR ',
     $ SOLMNLONG(I),I=1,178),'WATER    FOR water'
       WRITE(IW,9011)
       CALL ABRT
       ENDIF
      ENDIF
C
 9010 FORMAT(/,'*** ERROR: NO DATA TABULATED FOR SOLVNT=',A8,/,/,
     $ ' ALLOWED SOLVENT KEYWORDS WITH SMD=.TRUE. ARE:',/,
     $  89(1X,2(A8,A,A35,1X),/),1X,A,/)
 9011 FORMAT(
     $ ' DATA FOR OTHER SOLVENTS CAN BE DIRECTLY INPUT USING ',/,
     $ ' EPS, SOLA, SOLB, SOLC, SOLH, SOLG, AND SOLN PARAMETERS',/,
     $ ' IN THE NAMELIST $PCM (SEE INSTRUCTIONS).',/)
C
      RETURN
      END
C
C*MODULE MNSOL  *DECK SMDCOULRAD
      SUBROUTINE SMDCOULRAD(SOLA,RVDW)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C CURRENT DIMENSION OF RVDW IN GAMESS IS MRVDW
      PARAMETER (MRVDW=86)
      DIMENSION RVDW(MRVDW)
C
      CALL RADMN(RVDW,MRVDW)
C
C FOR ELEMENTS OTHER THAN H,C,N,O,F,Si,P,S,Cl,Br
C SMD USES THE RADII FROM RADMN 
C WITH THE SCALING FACTOR 1.52 (FOR I AND At) AND 1.18 FOR THE OTHERS
C
      DO I=1,MRVDW
      RVDW(I)=RVDW(I)*1.18d+00
      IF (I.EQ.53.OR.I.EQ.85) RVDW(I)=RVDW(I)*1.52d+00
      ENDDO
C FOR H,C,N,O,F,Si,P,S,Cl,Br SMD USES SPECIAL (OPTIMIZED) VALUES
      RVDW(1)=1.20d+00
      RVDW(6)=1.85d+00
      RVDW(7)=1.89d+00
      RVDW(8)=1.52d+00
      RVDW(9)=1.73d+00
      RVDW(14)=2.47d+00
      RVDW(15)=2.12d+00
      RVDW(16)=2.49d+00
      RVDW(17)=2.38d+00
      RVDW(35)=3.06d+00
C SPECIAL DEPENDENCE FOR o
      IF (SOLA.LT.0.43d+00)
     $ RVDW(8)=1.52d+00+1.8d+00*(0.43d+00-SOLA)
      RETURN
      END
C
C*MODULE MNSOL  *DECK RADMN
      SUBROUTINE RADMN(RAD,NRAD)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MRAD=104)
      DIMENSION RADII(MRAD),RAD(*)
      IF (NRAD.GT.MRAD) CALL ABRT
C
C  SOURCE (except H):
C  Van der Waals radii of Mantina et al.
C  (Mantina, M.; Valero, R.; Cramer, C. J.; Truhlar, D. G.
C  "Atomic Radii of the Elements." In CRC Handbook of Chemistry
C   and Physics, 91st Edition, 2010-2011; Haynes, W. M., Ed.;
C   CRC Press: Boca Raton, FL, 2010; pp 9-49 -- 9-50)
C
C  SOURCE (H):
C  Bondi's radii (Bondi, A. J. Phys. Chem. 1964, 68, 441)
C
      DATA (RADII(iii),iii=1,50)/
     $ 1.20,         ! H
     $ 1.40,         ! He
     $ 1.82,         ! Li
     $ 1.53,         ! Be
     $ 1.92,         ! B
     $ 1.70,         ! C
     $ 1.55,         ! N
     $ 1.52,         ! O
     $ 1.47,         ! F
     $ 1.54,         ! Ne
     $ 2.27,         ! Na
     $ 1.73,         ! Mg
     $ 1.84,         ! Al
     $ 2.10,         ! Si
     $ 1.80,         ! P
     $ 1.80,         ! S
     $ 1.75,         ! Cl
     $ 1.88,         ! Ar
     $ 2.75,         ! K
     $ 2.31,         ! Ca
     $ 2.16,         ! Sc
     $ 1.87,         ! Ti
     $ 1.79,         ! V
     $ 1.89,         ! Cr
     $ 1.97,         ! Mn
     $ 1.94,         ! Fe
     $ 1.92,         ! Co
     $ 1.84,         ! Ni
     $ 1.86,         ! Cu
     $ 2.10,         ! Zn
     $ 1.87,         ! Ga
     $ 2.11,         ! Ge
     $ 1.85,         ! As
     $ 1.90,         ! Se
     $ 1.85,         ! Br
     $ 2.02,         ! Kr
     $ 3.03,         ! Rb
     $ 2.49,         ! Sr
     $ 2.19,         ! Y
     $ 1.86,         ! Zr
     $ 2.07,         ! Nb
     $ 2.09,         ! Mo
     $ 2.09,         ! Tc
     $ 2.07,         ! Ru
     $ 1.95,         ! Rh
     $ 2.02,         ! Pd
     $ 2.03,         ! Ag
     $ 2.30,         ! Cd
     $ 1.93,         ! In
     $ 2.17/         ! Sn
      DATA (RADII(iii),iii=51,104)/
     $ 2.06,         ! Sb
     $ 2.06,         ! Te
     $ 1.98,         ! I
     $ 2.16,         ! Xe
     $ 3.43,         ! Cs
     $ 2.68,         ! Ba
     $ 2.40,         ! La
     $ 2.35,         ! Ce
     $ 2.39,         ! Pr
     $ 2.29,         ! Nd
     $ 2.36,         ! Pm
     $ 2.29,         ! Sm
     $ 2.33,         ! Eu
     $ 2.37,         ! Gd
     $ 2.21,         ! Tb
     $ 2.29,         ! Dy
     $ 2.16,         ! Ho
     $ 2.35,         ! Er
     $ 2.27,         ! Tm
     $ 2.42,         ! Yb
     $ 2.21,         ! Lu
     $ 2.12,         ! Hf
     $ 2.17,         ! Ta
     $ 2.10,         ! W
     $ 2.17,         ! Re
     $ 2.16,         ! Os
     $ 2.02,         ! Ir
     $ 2.09,         ! Pt
     $ 2.17,         ! Au
     $ 2.09,         ! Hg
     $ 1.96,         ! Tl
     $ 2.02,         ! Pb
     $ 2.07,         ! Bi
     $ 1.97,         ! Po
     $ 2.02,         ! At
     $ 2.20,         ! Rn
     $ 3.48,         ! Fr
     $ 2.83,         ! Ra
     $ 2.60,         ! Ac
     $ 2.37,         ! Th
     $ 2.43,         ! Pa
     $ 2.40,         ! U
     $ 2.21,         ! Np
     $ 2.43,         ! Pu
     $ 2.44,         ! Am
     $ 2.45,         ! Cm
     $ 2.44,         ! Bk
     $ 2.45,         ! Cf
     $ 2.45,         ! Es
     $ 2.45,         ! Fm
     $ 2.46,         ! Md
     $ 2.46,         ! No
     $ 2.46,         ! Lr
     $ 1.57/         ! Rf
C
      DO I=1,NRAD
      RAD(I)=RADII(I)
      ENDDO
C
      RETURN
      END
C
C*MODULE MNSOL  *DECK CDSSET
C CDS TERMS FOR MINNESOTA SOLVATION MODELS
      SUBROUTINE CDSSET(ICDS)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C CURRENT GAMESS LIMITATIONS:
C  ON TOTAL NUMBER OF ATOMS IS MXATM=2000
      PARAMETER (MXATM=2000)
C
      COMMON /FMCOM / X(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT,LIACTFG,lcrfrg,
     *                lzlmfrgv
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     $                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /GRADMN/ DCDS(3,MXATM)
C
      IF (ICDS.NE.1.AND.ICDS.NE.2.AND.ICDS.NE.3) RETURN
C
      IF(NFG.eq.0) then 
        CALL CDSCALC(C,DCDS,IAN,ICDS,NAT)
      else
c       This code was so far written for no more than MXATM atoms
        write(6,*) 'Experimental code FMO/PCM-SDM'
        nats=nat
        nat=natfmo
        if(nat.gt.MXATM) call abrt
        do i=1,nat
          IAN(i)=int(x(lfmozan+i-1)+0.001D+00)
        enddo
        CALL CDSCALC(x(lfmoc),DCDS,IAN,ICDS,NAT)
        nat=nats
      endif
C
      RETURN
      END
C
C*MODULE MNSOL  *DECK CDSCALC
      SUBROUTINE CDSCALC(C,DCDS,IAN,ICDS,NAT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL LGR
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /CDSPRT/ GCDS,AREACDS
C
      COMMON /FMCOM / X(1)
C
      DIMENSION C(3,*),DCDS(3,*),IAN(*)
      DIMENSION SIGMA(150),HSIGMA(150)
C
      GCDS=0.0d+00
      AREACDS=0.0d+00
C
C DO WE NEED CDS GRADIENTS?
      call derchk(nder)
      IF(NGLEVL.GT.0) nder=nder-nglevl
                    LGR=.FALSE.
      if(nder.gt.0) LGR=.true.
C
C FINDING THE CDS PARAMETERS
C
      CSSIGM=0.0d+00
      DO I=1,150
         SIGMA(I)=0.0d+00
         HSIGMA(I)=0.0d+00
      ENDDO
C
      IF (ICDS.EQ.1) CALL SMD_CDS_AQ(SIGMA,HSIGMA,CSSIGM)
      IF (ICDS.EQ.2) CALL SMD_CDS_NAQ(SIGMA,HSIGMA,CSSIGM)
      IF (ICDS.EQ.3) CALL SMVLE_CDS_AQ(SIGMA,HSIGMA,CSSIGM)
      IF (ICDS.NE.1.AND.ICDS.NE.2.AND.ICDS.NE.3) RETURN
C
C MEMORY ALLOCATION
C
      CALL VALFM(LOADFM)
      LRAD    = LOADFM  + 1
      LCDSA   = LRAD    + NAT
      LAREA   = LCDSA   + NAT
      LDATAR  = LAREA   + NAT
      LSTS    = LDATAR  + 3 * NAT * NAT
      LCOT    = LSTS    + NAT
      LDSTS   = LCOT    + NAT * (NAT + 1) / 2
      LDCOTDR = LDSTS   + 3 * NAT * NAT
      LNC     = LDCOTDR + NAT * (NAT + 1) / 2
      LDAREA  = LNC     + NAT + 1
      LRLIO   = LDAREA  + 3 * (NAT + 1)
      LURLIO  = LRLIO   + NAT * (NAT + 1) / 2
      LLAB    = LURLIO  + 3 * NAT * NAT
      LNCNCT  = LLAB    + NAT
      LCONECT = LNCNCT  + NAT * (2 * NAT + 1)
      LCTHETA = LCONECT + NAT * NAT
      LSTHETA = LCTHETA + NAT * NAT
      LSIT    = LSTHETA + NAT
      LDCSIT  = LSIT    + NAT
      LDJCOSN = LDCSIT  + 3 * NAT
      LCOSN   = LDJCOSN + 3 * 3 * NAT * NAT
      LDSTETA = LCOSN   + 3 * NAT * NAT
      LDCTETA = LDSTETA + 3 * NAT
      LDCOSN  = LDCTETA + 3 * NAT * NAT
      LWORK   = LDCOSN  + 3 * 3 * NAT * NAT
      LDIWORK = LWORK   + 2 * NAT + 1
      LDJWORK = LDIWORK + 3 * NAT
      LDKWORK = LDJWORK + 3 * NAT
      LD0WORK = LDKWORK + 3 * NAT
      LDWORKR = LD0WORK + 3 * NAT
      LDCAODD = LDWORKR + NAT
      LDSITR  = LDCAODD + 3 * (NAT + 1)
      LDCAPLY = LDSITR  + NAT
      LDICOSN = LDCAPLY + 3 * (NAT + 1)
      LDCASLC = LDICOSN + 3 * 3 * NAT * NAT
      LDCTETR = LDCASLC + 3 * (NAT + 1)
      LDSTETR = LDCTETR + NAT
      LDCOSNR = LDSTETR + NAT
      last    = LDCOSNR + 3 * NAT * NAT
      NEED = last - LRAD - 1
      CALL GETFM(NEED)
C
C VAN DER WAALS RADII FOR SASA: Bondi's radii + 0.4Angs
C
      CALL VDWRAD(X(LRAD),IAN,NAT)
C
C CALCULATION OF CDS CONTRIBUTIONS TO ENERGY AND GRADIENT
C
      CALL CDS_EG(CSSIGM,CDST,TAREA,NAT,LGR,
     $C,DCDS,IAN,SIGMA,HSIGMA,X(LRAD),
     $X(LCDSA),X(LAREA),X(LDATAR),X(LSTS),X(LCOT),X(LDSTS),
     $X(LDCOTDR),X(LNC),X(LDAREA),X(LRLIO),X(LURLIO),
     $X(LLAB),X(LNCNCT),X(LCONECT),X(LCTHETA),X(LSTHETA),X(LSIT),
     $X(LDCSIT),X(LDJCOSN),X(LCOSN),X(LDSTETA),X(LDCTETA),X(LDCOSN),
     . X(LWORK),X(LDIWORK),X(LDJWORK),
     $X(LDKWORK),X(LD0WORK),X(LDWORKR),X(LDCAODD),X(LDSITR),
     . X(LDCAPLY),X(LDICOSN),X(LDCASLC),
     $X(LDCTETR),X(LDSTETR),X(LDCOSNR))
C
C MEMORY RELEASE
      CALL RETFM(NEED)
C
      GCDS=CDST
      AREACDS=TAREA
C
      RETURN
      END
C
C*MODULE MNSOL  *DECK SMD_CDS_AQ
      SUBROUTINE SMD_CDS_AQ(SIGMA,HSIGMA,CSSIGM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION SIGMA(150),HSIGMA(150)
      DIMENSION SIGMA_DATA(150),HSIGMA_DATA(150)
C
      DATA SIGMA_DATA/
     .    48.69,     0.00,     0.00,     0.00,     0.00,
     .   129.74,     0.00,     0.00,    38.18,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .    -9.10,     9.82,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,    -8.72,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .   -72.95,     0.00,    68.69,     0.00,   -48.22,
     .   121.98,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,    68.85,     0.00,
     .    84.10,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00/
      DATA HSIGMA_DATA/
     . 5*0.00, -60.77, 0.00, 0.00,
     $ 7*0.00, 0.00,134*0.00/
C
C    SMD_CDS_AQ CALCULATES SURFACE TENSION COEFFICIENTS
C    FOR AQUEOUS SOLUTION FOR SMD
C    ATOMIC SURFACE TENSION COEFFICIENTS ARE OF 3 TYPES:
C      1.) Zero order surface tension coefficients,
C        SIGMA(I): atomic surface tension of atom with at.no. I < 101
C      2.) First order modification for H,
C         HSIGMA(I): H bonded to a heavy atom with nuclear number I
C      3.) Other modifications,
C         SIGMA(I+100): modification for atom X bonded to Y.
C         I is the atomic pair index shown as following:
C              1:     C-C (1)
C              2:     C-C (2)
C              3:     O-C
C              4:     O-O
C              5:     N-C (1)
C              6:     O-N
C              7:     S-S
C              8:     ...
C              9:     ...
C             10:     C-N
C             11:     N-C (2)
C             12:     H-(NN)
C             13:     H-(OH)
C             14:     O-P
C             15:     S-P
C             16:     N-C (triple bonded to C)
C             17:     O-Si
C
      CSSIGM=0.0d+00
      DO I=1,150
         SIGMA(I)=SIGMA_DATA(I)
         HSIGMA(I)=HSIGMA_DATA(I)
      ENDDO
C
      RETURN
      END
C
C*MODULE MNSOL  *DECK SMD_CDS_NAQ
      SUBROUTINE SMD_CDS_NAQ(SIGMA,HSIGMA,CSSIGM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /SOLSMX/ SOLA,SOLB,SOLC,SOLG,SOLH,SOLN,ISMX
      DIMENSION SIGMA(150),HSIGMA(150)
      DIMENSION SIGMA_N(150),SIGMA_A(150),SIGMA_B(150)
      DIMENSION HSIGMA_N(150),HSIGMA_A(150),HSIGMA_B(150)
      DIMENSION SIGMA_MOL(4)
      DATA SIGMA_N/
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .    58.10,    32.62,   -17.56,     0.00,     0.00,
     .     0.00,     0.00,     0.00,   -18.04,     0.00,
     .   -33.17,   -24.31,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,   -35.42,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .   -62.05,     0.00,   -15.70,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,   -99.76,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00/
      DATA SIGMA_A/
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .    48.10,     0.00,   193.06,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,    95.99,     0.00,   -41.00,
     .     0.00,     0.00,     0.00,     0.00,   152.20,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00/
      DATA SIGMA_B/
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .    32.87,     0.00,   -43.79,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,  -128.16,     0.00,
     .    79.13,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00/
      DATA HSIGMA_N/
     . 5*0.00,-36.37,  0.00,-19.39,7*0.00,0.00,134*0.00/
      DATA HSIGMA_A/
     . 150*0.00/
      DATA HSIGMA_B/
     . 150*0.00/
      DATA SIGMA_MOL/
     . 0.35, 0.00, -4.19, -6.68/
C
C    SMD_CDS_NAQ CALCULATES SURFACE TENSION COEFFICIENTS
C    FOR NONAQUEOUS SOLUTION FOR SMD
C    ATOMIC SURFACE TENSION COEFFICIENTS ARE OF 3 TYPES:
C      1.) Zero order surface tension coefficients,
C        SIGMA_x(I): atomic surface tension of atom with at.no. I < 101
C        where if
C        x = N is multiplied by SolN
C        x = A is multiplied by SolA
C        x = B is multiplied by SolB
C      2.) First order modification for H,
C         HSIGMA_x(I): H bonded to a heavy atom with nuclear number I
C        where if
C        x = N is multiplied by SolN
C        x = A is multiplied by SolA
C        x = B is multiplied by SolB
C      3.) Other modifications,
C         SIGMA_x(I+100): modification for atom X bonded to Y.
C         I is the atomic pair index shown as following:
C              1:     C-C (1)
C              2:     C-C (2)
C              3:     O-C
C              4:     O-O
C              5:     N-C (1)
C              6:     O-N
C              7:     S-S
C              8:     ...
C              9:     ...
C             10:     C-N
C             11:     N-C (2)
C             12:     H-(NN)
C             13:     H-(OH)
C             14:     O-P
C             15:     S-P
C             16:     N-C (triple bonded to C)
C             17:     O-Si
C        where if
C        x = N is multiplied by SolN
C        x = A is multiplied by SolA
C        x = B is multiplied by SolB
C     MOLECULAR SURFACE TENSION COEFFICIENTS ARE STORED IN THE DATA
C     ARRAY SIGMA_MOL(I), where
C       element 1 is multiplied by SolG
C       element 2 is multiplied by (SolB)**2
C       element 3 is multiplied by (SolC)**2
C       element 4 is multiplied by (SolH)**2
C
C     Zero order atomic surface tensions SIGMA_x(1)-SIGMA_x(100)
C     First and higher order modification SIGMA_x(101)-SIGMA_x(150)
C
      DO I=1,150
      SIGMA(I)=SIGMA_N(I)*SOLN+SIGMA_A(I)*SOLA+SIGMA_B(I)*SOLB
      HSIGMA(I)=HSIGMA_N(I)*SOLN+HSIGMA_A(I)*SOLA+HSIGMA_B(I)*SOLB
      END DO
C
      CSSIGM=SIGMA_MOL(1)*SOLG+SIGMA_MOL(2)*SOLB*SOLB+
     $ SIGMA_MOL(3)*SOLC*SOLC+SIGMA_MOL(4)*SOLH*SOLH
C
      RETURN
      END
C
C*MODULE MNSOL  *DECK SMVLE_CDS_AQ
      SUBROUTINE SMVLE_CDS_AQ(SIGMA,HSIGMA,CSSIGM)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION SIGMA(150),HSIGMA(150)
      DIMENSION SIGMA_DATA(150),HSIGMA_DATA(150)
C
      DATA SIGMA_DATA/
     .    57.88,     0.00,     0.00,     0.00,     0.00,
     .   114.49,   -30.82,   -84.28,    46.48,     0.00,
     .     0.00,     0.00,     0.00,     0.00,   -31.35,
     .    -4.13,    14.69,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,    12.56,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .   -70.59,     0.00,   187.69,    98.59,   -52.83,
     .   256.52,     0.00,     0.00,     0.00,    30.94,
     .  -261.62,     0.00,     0.00,    79.30,     0.00,
     .    97.52,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00,
     .     0.00,     0.00,     0.00,     0.00,     0.00/
      DATA HSIGMA_DATA/
     . 5*0.00, -75.22, 0.00, 110.62,
     $ 7*0.00, 0.00,134*0.00/
C
C    SMVLE_CDS_AQ CALCULATES SURFACE TENSION COEFFICIENTS
C    FOR AQUEOUS SOLUTION FOR SMVLE
C    ATOMIC SURFACE TENSION COEFFICIENTS ARE OF 3 TYPES:
C      1.) Zero order surface tension coefficients,
C        SIGMA(I): atomic surface tension of atom with at.no. I < 101
C      2.) First order modification for H,
C         HSIGMA(I): H bonded to a heavy atom with nuclear number I
C      3.) Other modifications,
C         SIGMA(I+100): modification for atom X bonded to Y.
C         I is the atomic pair index shown as following:
C              1:     C-C (1)
C              2:     C-C (2)
C              3:     O-C
C              4:     O-O
C              5:     N-C (1)
C              6:     O-N
C              7:     S-S
C              8:     ...
C              9:     ...
C             10:     C-N
C             11:     N-C (2)
C             12:     H-(NN)
C             13:     H-(OH)
C             14:     O-P
C             15:     S-P
C             16:     N-C (triple bonded to C)
C             17:     O-Si
C
      CSSIGM=0.0d+00
      DO I=1,150
         SIGMA(I)=SIGMA_DATA(I)
         HSIGMA(I)=HSIGMA_DATA(I)
      ENDDO
      RETURN
      END
C
C*MODULE MNSOL  *DECK VDWRAD
C  VAN DER WAALS RADII FOR CDS TERM
      SUBROUTINE VDWRAD(RAD,IAN,NAT)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MRAD=104)
      DIMENSION RADVDW(MRAD),RAD(*),IAN(*)
C
      CALL RADMN(RADVDW,MRAD)
C
      SOLVRD=0.4d+00
      DO I=1,NAT
      RAD(I)=0.0d+00
        DO K=1,MRAD
          IF (IAN(I).EQ.K) THEN
          RAD(I)=RADVDW(K)+SOLVRD
          ENDIF
        ENDDO
      ENDDO
      RETURN
      END
C
C*MODULE MNSOL  *DECK CDS_EG
      SUBROUTINE CDS_EG(CSSIGM,CDST,TAREA,NAT,LGR,
     $C,DCDS,IAN,SIGMA,HSIGMA,RAD,
     $CDSA,AREA,DATAR,STS,COT,DSTS,DCOTDR,
     $NC,DAREA,RLIO,URLIO,
     $LAB,NCNCT,CONECT,CTHETA,STHETA,SIT,
     $DCSIT,DJCOSN,COSN,DSTETA,DCTETA,DCOSN,WORK,DIWORK,DJWORK,
     $DKWORK,D0WORK,DWORKR,DCAODD,DSITR,DCAPLY,DICOSN,DCASLC,
     $DCTETR,DSTETR,DCOSNR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (TOANGS=0.52917724924D+00,TOKCAL=627.509451D+00)
      LOGICAL LGR,CONECT
      DIMENSION C(3,*),DCDS(3,*),IAN(*)
      DIMENSION SIGMA(150),HSIGMA(150)
C
      DIMENSION CDSA(*),AREA(*)
      DIMENSION DATAR(3,NAT,*)
C
      DIMENSION STS(*),COT(*)
      DIMENSION DSTS(3,NAT,*),DCOTDR(*)
C
      DIMENSION RAD(*),NC(0:*),DAREA(3,0:*)
      DIMENSION RLIO(*),URLIO(3,NAT,*)
      DIMENSION LAB(*),NCNCT(2*NAT+1,*)
     1               ,CONECT(NAT,*)
      DIMENSION CTHETA(NAT,*),STHETA(*),SIT(*)
     1               ,DCSIT(3,*),DJCOSN(3,3,NAT,*)
     2               ,COSN(3,NAT,*),DSTETA(3,*)
     3               ,DCTETA(3,NAT,*),DCOSN(3,3,NAT,*)
     4               ,WORK(*),DIWORK(3,*),DJWORK(3,*)
     5               ,DKWORK(3,*),D0WORK(3,*),DWORKR(*)
     6               ,DCAODD(3,0:*),DSITR(*)
     6               ,DCAPLY(3,0:*)
     7               ,DICOSN(3,3,NAT,*),DCASLC(3,0:*)
     8               ,DCTETR(*),DSTETR(*)
     9               ,DCOSNR(3,NAT,*)
C
      DO I=1,NAT
      CDSA(I)=0.0d+00
      AREA(I)=0.0d+00
      STS(I)=0.0d+00
      DO J=1,NAT
      DO K=1,3
      DATAR(K,I,J)=0.0d+00
      ENDDO
      ENDDO
      ENDDO
C
C MATRIX OF INTERATOMIC DISTANCES IN ANGSTROMS
C
      K12=0
      DO K1=1,NAT
      DO K2=1,K1
      K12=K12+1
      IF (K1.EQ.K2) THEN
      RLIO(K12)=0.0d+00
      URLIO(1,K1,K2)=0.0d+00
      URLIO(2,K1,K2)=0.0d+00
      URLIO(3,K1,K2)=0.0d+00
                   ELSE
      X=(C(1,K1)-C(1,K2))*TOANGS
      Y=(C(2,K1)-C(2,K2))*TOANGS
      Z=(C(3,K1)-C(3,K2))*TOANGS
      R=DSQRT(X*X+Y*Y+Z*Z)
      URLIO(1,K1,K2)=-X/R
      URLIO(2,K1,K2)=-Y/R
      URLIO(3,K1,K2)=-Z/R
      URLIO(1,K2,K1)=X/R
      URLIO(2,K2,K1)=Y/R
      URLIO(3,K2,K1)=Z/R
      RLIO(K12)=R
      ENDIF
      ENDDO
      ENDDO
C
C CALCULATION OF CDS CONTRIBUTIONS TO ENERGY
C
      CALL SMXCDS
     $(IAN,SIGMA,HSIGMA,STS,COT,DSTS,DCOTDR,RLIO,URLIO,
     $NAT,LGR)
C
      TAREA=0.0d+00
      CDST=0.0d+00
      DO K=1,NAT
      AREA0=0.0d+00
      NCROSS=0
      CALL accsolang(NAT,AREA0,NCROSS,K,LGR,
     $   RAD,NC,DAREA,RLIO,URLIO,LAB,NCNCT,CONECT,CTHETA,STHETA,SIT,
     $   DCSIT,DJCOSN,COSN,DSTETA,DCTETA,DCOSN,WORK,DIWORK,DJWORK,
     $   DKWORK,D0WORK,DWORKR,DCAODD,DSITR,DCAPLY,DICOSN,DCASLC,
     $   DCTETR,DSTETR,DCOSNR)
       RAS2=RAD(K)*RAD(K)
       AREA(K)=AREA0*RAS2
       CDST=CDST+AREA(K)*(STS(K)+CSSIGM)*0.001d+00
c      write(6,*) 'wwww',k,AREA(K),STS(K),CSSIGM
       TAREA=TAREA+AREA(K)
       CDSA(K)=AREA(K)*(STS(K)+CSSIGM)*0.001d+00
       IF (LGR) THEN
        DO L=0,NCROSS
        DATAR(1,NC(L),K)=DAREA(1,L)*RAS2
        DATAR(2,NC(L),K)=DAREA(2,L)*RAS2
        DATAR(3,NC(L),K)=DAREA(3,L)*RAS2
        ENDDO
       ENDIF
      ENDDO
C     ----- COMPUTATION OF CDS GRADIENTS -----
C
      IF (LGR) THEN
       DO IAT=1,NAT
       DCDSX=0.0d+00
       DCDSY=0.0d+00
       DCDSZ=0.0d+00
         DO J=1,NAT
         DCDSX=DCDSX
     $    +(STS(J)+CSSIGM)*DATAR(1,IAT,J)*0.001d+00
     $    +DSTS(1,IAT,J)*AREA(J)*0.001d+00
         DCDSY=DCDSY
     $    +(STS(J)+CSSIGM)*DATAR(2,IAT,J)*0.001d+00
     $    +DSTS(2,IAT,J)*AREA(J)*0.001d+00
         DCDSZ=DCDSZ
     $    +(STS(J)+CSSIGM)*DATAR(3,IAT,J)*0.001d+00
     $    +DSTS(3,IAT,J)*AREA(J)*0.001d+00
         ENDDO
       DCDSX=DCDSX/TOKCAL*TOANGS
       DCDSY=DCDSY/TOKCAL*TOANGS
       DCDSZ=DCDSZ/TOKCAL*TOANGS
       DCDS(1,IAT)=DCDSX
       DCDS(2,IAT)=DCDSY
       DCDS(3,IAT)=DCDSZ
      ENDDO
      ENDIF
C
      RETURN
      END
C
C*MODULE MNSOL  *DECK SMXCDS
      SUBROUTINE SMXCDS
     $(IAN,SIGMA,HSIGMA,STS,COT,DSTS,DCOTDR,RLIO,URLIO,
     $NAT,LGR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL LGR
      DIMENSION IAN(*)
      DIMENSION SIGMA(150),HSIGMA(150)
      DIMENSION NATCNV(100),RKKVAL(15,15)
      DIMENSION STS(*),COT(*)
      DIMENSION DSTS(3,NAT,*),DCOTDR(*),
     $RLIO(*),URLIO(3,NAT,*)
C                 H     C N O F     Si P S Cl     Br     I
      DATA NATCNV/1,4*0,2,3,4,5,4*0,11,9,6,7,17*0,8,17*0,10,47*0/
C
C --- RKKVAL EXPANDED TO 15 X 15 DATA ARRAY ---
C
C ---  TYPE X REFERS TO :                   ---
C
C    Hydrogen - type 1
C    Carbon   - type 2
C    Nitrogen - type 3
C    Oxygen   - type 4
C    Fluorine - type 5
C    Sulfur   - type 6
C    Chlorine - type 7
C    Bromine  - type 8
C    Phos.    - type 9
C    Iodine   - type 10
C    Silicon  - type 11
C
C
C --- J => TYPES DEFINED ABOVE    ---
C --- I => NATCNV ARRAY  ELEMENTS ---
C
      DATA ((RKKVAL(J,I), I=1,15), J=1,15)
     .           /0.00D0, 1.55D0, 1.55D0, 1.55D0, 0.00D0,  ! type 1
     .            2.14D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            1.55D0, 1.84D0, 1.84D0, 1.84D0, 1.84D0,  ! type 2
     .            2.20D0, 2.10D0, 2.30D0, 2.20D0, 2.60D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            1.55D0, 1.84D0, 1.85D0, 1.50D0, 0.00D0,  ! type 3
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            1.55D0, 1.84D0, 1.50D0, 2.75D0, 0.00D0,  ! type 4
     .            1.71D0, 0.00D0, 0.00D0, 2.10D0, 0.00D0,
     .            2.10D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 1.84D0, 0.00D0, 0.00D0, 0.00D0,  ! type 5
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            2.14D0, 2.20D0, 0.00D0, 1.71D0, 0.00D0,  ! type 6
     .            2.75D0, 0.00D0, 0.00D0, 2.50D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 2.10D0, 0.00D0, 0.00D0, 0.00D0,  ! type 7
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 2.30D0, 0.00D0, 0.00D0, 0.00D0,  ! type 8
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 2.20D0, 0.00D0, 2.10D0, 0.00D0,  ! type 9
     .            2.50D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 2.60D0, 0.00D0, 0.00D0, 0.00D0,  ! type 10
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 2.10D0, 0.00D0,  ! type 11
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,  ! type 12
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,  ! type 13
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,  ! type 14
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,  ! type 15
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0,
     .            0.00D0, 0.00D0, 0.00D0, 0.00D0, 0.00D0/
C
      ISTS=6
C
      DO I=1, NAT*(NAT+1)/2
       DCOTDR(I)=0.0d+00
       COT(I)=0.0d+00
      ENDDO
      DO I1=1,NAT
       DO I2=1,NAT
        DO I3=1,3
         DSTS(I3,I1,I2)=0.0d+00
        ENDDO
       ENDDO
      ENDDO
C
C-----COMPUTE COTS AND DERIVATIVES
C
      RHLD=1.4d+00
      DELTAR=0.2d+00
      BCCC=1.0d+00
      EXPVAL=DEXP(1.00d+00)
C
      DO 100 I=1,NAT
        II=IAN(I)
        ITPC=NATCNV(II)
        DO 100 J=1,NAT
        IF (I.NE.J) THEN
          JJ=IAN(J)
          JTPC=NATCNV(JJ)
          IF(ITPC.EQ.0.OR.JTPC.EQ.0) THEN
            COT(IJ0(I,J))=0.0d+00
          ELSE
            COT(IJ0(I,J))=0.0d+00
            DELTAR=0.30d+00
            RHLD=RKKVAL(ITPC,JTPC)
            IF((II.EQ.8.and.JJ.EQ.6).OR.(II.EQ.6.and.JJ.EQ.8)) THEN
              DELTAR=0.10d+00
              RHLD=1.330d+00
            END IF
            IF (ISTS.EQ.6) THEN
              IF(II.EQ.8.and.JJ.EQ.8) THEN
                DELTAR=0.30d+00
                RHLD=1.80d+00
              END IF
            END IF
            CUTOF1=RHLD+DELTAR
            IF(RLIO(IJ0(I,J)).LT.CUTOF1) THEN
             EXPONT=DELTAR/(RLIO(IJ0(I,J))-CUTOF1)
             COT(IJ0(I,J))=DEXP(EXPONT)
C
              if (LGR)
     $DCOTDR(IJ0(I,J))=-COT(IJ0(I,J))*EXPONT/(RLIO(IJ0(I,J))-CUTOF1)
            END IF
          END IF
        ENDIF
 100    CONTINUE
C
C-----CDS SIGMAS CAN BE ANY OF THESE FORMS: 
C        a, a-b, a-b(2), a-b(3) (a AND b - ARE ELEMENTS)
C-----SOME OF THE EXPRESSIONS BELOW ARE NOT USED BY THE SMD MODEL
C     BUT KEPT HERE FOR DEBUGGING PURPOSES
C
      DO 950 I=1,NAT
C
C-----ADD CDS FOR SIGMA a
        STS(I)=SIGMA(IAN(I))
C
        IF (IAN(I).EQ.1) THEN
C
C-----ADD CDS FOR SIGMA H-a (USED BY SMD ONLY FOR H-C, H-O)
          DO 150 J=1,NAT
            NTP=IAN(J)
            STS(I)=STS(I)+COT(IJ0(I,J))*HSIGMA(NTP)
C-----ADD DCDS FOR SIGMA H-a
            if (LGR) then
              do L=1,3
                DSTS(L,I,I)=DSTS(L,I,I)
     .              +HSIGMA(NTP)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                DSTS(L,J,I)=DSTS(L,J,I)
     .              -HSIGMA(NTP)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
              end do
            end if
C
C-----ADD CDS FOR SIGMA H-N(2); FOR H-N-N BOND (NOT USED BY SMD)
            IF (NTP.EQ.7) THEN
              DO 262 K=1,NAT
                KTP=IAN(K)
                IF (J.NE.K.AND.KTP.EQ.7) THEN
                 STS(I)=STS(I)+COT(IJ0(I,J))*COT(IJ0(J,K))*SIGMA(112)
C-----ADD DCDS FOR SIGMA H-N(2); FOR H-N-N BOND (NOT USED BY SMD)
                  if (LGR) then
                    do L=1,3
                      DSTS(L,I,I)=DSTS(L,I,I)
     .                           +SIGMA(112)*COT(ij0(J,K))
     .                           *DCOTDR(ij0(I,J))*URLIO(L,J,I)
                      DSTS(L,J,I)=DSTS(L,J,I)
     .                           -SIGMA(112)*COT(ij0(J,K))
     .                           *DCOTDR(ij0(I,J))*URLIO(L,J,I)
     .                           +SIGMA(112)*COT(ij0(I,J))
     .                           *DCOTDR(ij0(J,K))*URLIO(L,K,J)
                      DSTS(L,K,I)=DSTS(L,K,I)
     .                           -SIGMA(112)*COT(ij0(I,J))
     .                           *DCOTDR(ij0(J,K))*URLIO(L,K,J)
                    end do
                  end if
                ENDIF
 262          CONTINUE
C
C-----ADD CDS FOR SIGMA H-O(2); FOR H-O-H BOND (NOT USED BY SMD)
            ELSE IF (NTP.EQ.8) THEN
              DO 263 K=1,NAT
                KTP=IAN(K)
                IF (I.NE.K.AND.KTP.EQ.1) THEN
                  STS(I)=STS(I)+COT(IJ0(I,J))*COT(IJ0(J,K))*SIGMA(113)
C-----ADD DCDS FOR SIGMA H-O(2); FOR H-O-H BOND (NOT USED BY SMD)
                  if (LGR) then
                    do L=1,3
                      DSTS(L,I,I)=DSTS(L,I,I)
     .                           +SIGMA(113)*COT(ij0(J,K))
     .                           *DCOTDR(ij0(I,J))*URLIO(L,J,I)
                      DSTS(L,J,I)=DSTS(L,J,I)
     .                           -SIGMA(113)*COT(ij0(J,K))
     .                           *DCOTDR(ij0(I,J))*URLIO(L,J,I)
     .                           +SIGMA(113)*COT(ij0(I,J))
     .                           *DCOTDR(ij0(J,K))*URLIO(L,K,J)
                      DSTS(L,K,I)=DSTS(L,K,I)
     .                           -SIGMA(113)*COT(ij0(I,J))
     .                           *DCOTDR(ij0(J,K))*URLIO(L,K,J)
                    end do
                  end if
                ENDIF
 263          CONTINUE
            ENDIF
 150      CONTINUE
        ENDIF
C
        IF (IAN(I).EQ.8) THEN
          RTKK=0.0d+00
          DO 200 J=1,NAT
            NTP=IAN(J)
C
C-----ADD CDS FOR SIGMA O-C
            IF(NTP.EQ.6)THEN
              STS(I)=STS(I)+COT(IJ0(I,J))*SIGMA(103)
C-----ADD DCDS FOR SIGMA O-C
              if (LGR) then
                do L=1,3
                  DSTS(L,I,I)=DSTS(L,I,I)
     .                +SIGMA(103)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  DSTS(L,J,I)=DSTS(L,J,I)
     .                -SIGMA(103)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                end do
              end if
C
C-----ADD CDS FOR SIGMA O-N
            ELSE IF(NTP.EQ.7) THEN
              STS(I)=STS(I)+COT(IJ0(I,J))*SIGMA(106)
C-----ADD DCDS FOR SIGMA O-N
              if (LGR) then
                do L=1,3
                  DSTS(L,I,I)=DSTS(L,I,I)
     .                +SIGMA(106)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  DSTS(L,J,I)=DSTS(L,J,I)
     .                -SIGMA(106)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                end do
              end if
C
C-----ADD CDS FOR SIGMA O-S (NOT USED BY SMD)
            ELSE IF(NTP.EQ.16) THEN
              STS(I)=STS(I)+COT(IJ0(I,J))*SIGMA(118)
C-----ADD DCDS FOR SIGMA O-S (NOT USED BY SMD)
              if (LGR) then
                do L=1,3
                  DSTS(L,I,I)=DSTS(L,I,I)
     .                +SIGMA(118)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  DSTS(L,J,I)=DSTS(L,J,I)
     .                -SIGMA(118)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                end do
              end if
C
C-----ADD CDS FOR SIGMA O-SI (NOT USED BY SMD)
            Else If (NTP .EQ. 14) Then
              STS(I)=STS(I)+COT(IJ0(I,J))*SIGMA(117)
C-----ADD DCDS FOR SIGMA O-SI (NOT USED BY SMD)
              If (LGR) Then
                Do L = 1,3
                  DSTS(L,I,I)=DSTS(L,I,I)
     &                +SIGMA(117)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  DSTS(L,J,I)=DSTS(L,J,I)
     &                -SIGMA(117)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                 End Do
              End If
C
C-----ADD CDS FOR SIGMA O-P
            ELSE IF (NTP.EQ.15) THEN
              STS(I)=STS(I)+COT(IJ0(I,J))*SIGMA(114)
C-----ADD DCDS FOR SIGMA O-P
              if (LGR) then
                do L=1,3
                  DSTS(L,I,I)=DSTS(L,I,I)
     .                +SIGMA(114)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  DSTS(L,J,I)=DSTS(L,J,I)
     .                -SIGMA(114)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                end do
              end if
C
C-----ADD CDS FOR SIGMA O-O (SM6 FORM ONLY)
            ELSE IF(NTP.EQ.8.AND.I.NE.J) THEN
              If (ISTS.eq.6) then
                STS(I)=STS(I)+COT(IJ0(I,J))*SIGMA(104)
C-----ADD DCDS FOR SIGMA O-O (SM6 FORM ONLY)
                if (LGR) then
                  do L=1,3
                    DSTS(L,I,I)=DSTS(L,I,I)
     .                  +SIGMA(104)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                    DSTS(L,J,I)=DSTS(L,J,I)
     .                  -SIGMA(104)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  end do
                end if
              End if
            ENDIF
 200      CONTINUE
        ENDIF
C
C     ADD CDS FOR SIGMA N-C FOR -N-C- BOND AND N-C(2) FOR N-C=O BOND;
C     N-C(2) IS NOT USED BY SMD
C
        IF (IAN(I).EQ.7) THEN
          RTKKS=0.0D+00
          RTKKS2=0.0d+00
          DO 250 J=1,NAT
            NTP=IAN(J)
            IF(NTP.EQ.6)THEN
              RTKK3=0.0d+00
              RTKK5=0.0d+00
              DO 251 K=1,NAT
                IF (K.NE.I.AND.K.NE.J) THEN
                  KTP=IAN(K)
                  NKTPC=NATCNV(IAN(K))
                  NTPC =NATCNV(IAN(J))
                  RHLD2=RKKVAL(NKTPC,NTPC)
                  CUTOF2=RHLD2+0.3d+00
                  IF(RLIO(IJ0(J,K)).LT.CUTOF2)THEN
                    RTKK2=DEXP(1.0d+00-(BCCC/(1.0d+00-
     .                    ((RLIO(IJ0(J,K))-RHLD2)/0.3d+00))))/EXPVAL
                    IF(KTP.EQ.8) RTKK5=RTKK5+RTKK2
                    RTKK3=RTKK3+RTKK2
                  ENDIF
                ENDIF
 251          CONTINUE
              RTKKS=RTKKS+COT(IJ0(I,J))*RTKK3**2
              RTKKS2=RTKKS2+COT(IJ0(I,J))*RTKK5
            ENDIF
 250      CONTINUE
          DHOLDER=(RTKKS**1.3d+00)
          STS(I)=STS(I)+DHOLDER*SIGMA(105)
          STS(I)=STS(I)+RTKKS2*SIGMA(111)
C     ADD DCDS FOR SIGMA N-C FOR -N-C- BOND AND N-C(2) FOR N-C=O BOND;
C     N-C(2) IS NOT USED BY SMD
          if (LGR) then
            do J=1,NAT
              NTP=IAN(J)
              if (NTP.EQ.6) then
                SCOTC=0.0d+00
                SCOTO=0.0d+00
                do K=1,NAT
                  if ((K.ne.I).and.(K.ne.J)) then
                    KTP=IAN(K)
                    COTJK=0.0d+00
                    DCOTJK=0.0d+00
                    NKTPC=NATCNV(IAN(K))
                    NTPC =NATCNV(IAN(J))
                    RHLD2=RKKVAL(NKTPC,NTPC)
                    CUTOF2=RHLD2+0.3d+00
                    if (RLIO(ij0(J,K)).lt.CUTOF2) then
                      COTJK=exp(1.0d+00-(BCCC/(1.0d+00
     .                     -((RLIO(ij0(J,K))-RHLD2)/0.3d+00))))/EXPVAL
                     DCOTJK=-COTJK*0.3d+00/(RLIO(ij0(J,K))-CUTOF2)**2
                    end if
                    if (KTP.eq.8) then
                      SCOTO=SCOTO+COTJK
                      do L=1,3
                        DSTS(L,I,I)=DSTS(L,I,I)
     .                             +SIGMA(111)*COTJK
     .                             *DCOTDR(ij0(I,J))*URLIO(L,J,I)
                        DSTS(L,J,I)=DSTS(L,J,I)
     .                             -SIGMA(111)*COTJK
     .                             *DCOTDR(ij0(I,J))*URLIO(L,J,I)
     .                             +SIGMA(111)*COT(ij0(I,J))
     .                             *DCOTJK          *URLIO(L,K,J)
                        DSTS(L,K,I)=DSTS(L,K,I)
     .                             -SIGMA(111)*COT(ij0(I,J))
     .                             *DCOTJK          *URLIO(L,K,J)
                      end do
                    end if
                    SCOTC=SCOTC+COTJK
                  end if
                end do
C
                do L=1,3
                  DSTS(L,I,I)=DSTS(L,I,I)
     .                +SIGMA(105)*RTKKS**0.3d+00*1.3d+00
     .                *SCOTC**2*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  DSTS(L,J,I)=DSTS(L,J,I)
     .                -SIGMA(105)*RTKKS**0.3d+00*1.3d+00
     .                *SCOTC**2*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                end do
C
                do K=1,NAT
                  if ((K.ne.I).and.(K.ne.J)) then
                    KTP=IAN(K)
                    COTJK=0.0d+00
                    DCOTJK=0.0d+00
                    NKTPC=NATCNV(IAN(K))
                    NTPC =NATCNV(IAN(J))
                    RHLD2=RKKVAL(NKTPC,NTPC)
                    CUTOF2=RHLD2+0.3d+00
                    if (RLIO(ij0(J,K)).lt.CUTOF2) then
                      COTJK=exp(1.0d+00-(1.0d+00/(1.0d+00
     .                     -((RLIO(ij0(J,K))-RHLD2)/0.3d+00))))/EXPVAL
                      DCOTJK=-COTJK*0.3d+00/(RLIO(ij0(J,K))-CUTOF2)**2
                    end if
                    do L=1,3
                      DSTS(L,J,I)=DSTS(L,J,I)+SIGMA(105)
     .                           *RTKKS**0.3d+00*1.3d+00
     .                           *2.0d+00*SCOTC*COT(ij0(I,J))
     .                           *DCOTJK          *URLIO(L,K,J)
                      DSTS(L,K,I)=DSTS(L,K,I)-SIGMA(105)
     .                           *RTKKS**0.3d+00*1.3d+00
     .                           *2.0d+00*SCOTC*COT(ij0(I,J))
     .                           *DCOTJK          *URLIO(L,K,J)
                    end do
                  end if
                end do
              end if
            end do
          end if
C
C-----ADD CDS FOR SIGMA N-C(3) FOR THE N-C TRIPLE BOND
          RTKK=0.0d+00
          DELTAR=0.065d+00
          DO 461 J=1,NAT
            NTP=IAN(J)
            NTPC=NATCNV(NTP)
            IF(J.EQ.I) GOTO 461
            IF(NTP.EQ.6) THEN
              RHLD=1.225d+00
              CUTOF1=RHLD+DELTAR
              IF(RLIO(IJ0(I,J)).LT.CUTOF1) THEN
                RTKK=RTKK+DEXP(1.0d+00-(BCCC/(1.0d+00-((RLIO(IJ0(I,J))-
     .               RHLD)/DELTAR))))/EXPVAL
C-----ADD DCDS FOR SIGMA N-C(3) FOR THE N-C TRIPLE BOND
                if (LGR) then
                  EXPONT=DELTAR/(RLIO(ij0(I,J))-CUTOF1)
                  DRTKK=-DEXP(EXPONT)*EXPONT/(RLIO(ij0(I,J))-CUTOF1)
                  do L=1,3
                    DSTS(L,I,I)=DSTS(L,I,I)
     .                         +SIGMA(116)*DRTKK*URLIO(L,J,I)
                    DSTS(L,J,I)=DSTS(L,J,I)
     .                         -SIGMA(116)*DRTKK*URLIO(L,J,I)
                   end do
                 end if
              END IF
            END IF
 461      CONTINUE
          STS(I)=STS(I)+RTKK*SIGMA(116)
        ENDIF
C
C-----ADD CDS FOR SIGMA C-C AND C-C(2); C-C(2) IS NOT USED BY SMD
        IF (IAN(I).EQ.6) THEN
          ITPC=NATCNV(6)
          DO 500 KCCC=1,2
            RTKK=0.0d+00
            DO 450 J=1,NAT
              IF(J.EQ.I) GOTO 450
              NTP=IAN(J)
              IF(NTP.EQ.6)THEN
                NTPC=NATCNV(NTP)
                IF (KCCC.EQ.1) THEN
                  RHLD=RKKVAL(ITPC,NTPC)
                  DELTAR=0.30d+00
                ELSE
                  RHLD=1.27d+00
                  DELTAR=0.07d+00
                ENDIF
                CUTOF1=RHLD+DELTAR
                IF(RLIO(IJ0(I,J)).LT.CUTOF1) THEN
                  RTKK=RTKK+DEXP(1.0d+00-(BCCC/(1.0d+00-
     .                 ((RLIO(IJ0(I,J))-RHLD)/DELTAR))))/EXPVAL
C-----ADD DCDS FOR SIGMA C-C AND C-C(2); C-C(2) IS NOT USED BY SMD
                  if (LGR) then
                    EXPONT=DELTAR/(RLIO(ij0(I,J))-CUTOF1)
                    DRTKK=-DEXP(EXPONT)*EXPONT/(RLIO(ij0(I,J))-CUTOF1)
                    if(KCCC.EQ.1)then
                      do L=1,3
                        DSTS(L,I,I)=DSTS(L,I,I)
     .                             +SIGMA(101)*DRTKK*URLIO(L,J,I)
                        DSTS(L,J,I)=DSTS(L,J,I)
     .                             -SIGMA(101)*DRTKK*URLIO(L,J,I)
                      end do
                    else if (KCCC.EQ.2) then
                      do L=1,3
                        DSTS(L,I,I)=DSTS(L,I,I)
     .                             +SIGMA(102)*DRTKK*URLIO(L,J,I)
                        DSTS(L,J,I)=DSTS(L,J,I)
     .                             -SIGMA(102)*DRTKK*URLIO(L,J,I)
                      end do
                    end if
                  end if
                ENDIF
              ENDIF
 450        CONTINUE
            IF(KCCC.EQ.1)THEN
              STS(I)=STS(I)+RTKK*SIGMA(101)
            ELSE IF (KCCC.EQ.2) THEN
              STS(I)=STS(I)+RTKK*SIGMA(102)
            ENDIF
 500      CONTINUE
C
C-----ADD CDS FOR SIGMA C-N FOR ANY C-N BOND
          RTKK=0.0d+00
          DO 460 J=1,NAT
            NTP=IAN(J)
            IF(NTP.EQ.7)THEN
              RTKK=RTKK+COT(IJ0(I,J))
            ENDIF
 460      CONTINUE
          HOLDRK=RTKK*RTKK
          STS(I)=STS(I)+HOLDRK*SIGMA(110)
C-----ADD DCDS FOR SIGMA C-N FOR ANY C-N BOND
          if (LGR) then
            do J=1,NAT
              NTP=IAN(J)
              if (NTP.eq.7) then
                do L=1,3
                  DSTS(L,I,I)=DSTS(L,I,I)
     .                +SIGMA(110)*2.0d+00
     .                *RTKK*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  DSTS(L,J,I)=DSTS(L,J,I)
     .                -SIGMA(110)*2.0d+00
     .                *RTKK*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                end do
              end if
            end do
          end if
C
        ENDIF
C
C-----ADD CDS FOR SIGMA S-S FOR S-S BOND (NOT USED BY SMD)
        IF (IAN(I).EQ.16) THEN
          DO 550 J=1,NAT
            NTP=IAN(J)
            IF(NTP.EQ.16.AND.J.NE.I) THEN
              STS(I)=STS(I)+COT(IJ0(I,J))*SIGMA(107)
C-----ADD DCDS FOR SIGMA S-S FOR S-S BOND (NOT USED BY SMD)
              if (LGR) then
                do L=1,3
                  DSTS(L,I,I)=DSTS(L,I,I)
     .                +SIGMA(107)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  DSTS(L,J,I)=DSTS(L,J,I)
     .                -SIGMA(107)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                end do
              end if
C
            ENDIF
 550      CONTINUE
        ENDIF
C
C-----ADD CDS FOR SIGMA S-P FOR S-P BOND (NOT USED BY SMD)
        IF (IAN(I).EQ.16) THEN
          DO 220 J=1,NAT
            NTP=IAN(J)
            IF(NTP.EQ.15)THEN
              STS(I)=STS(I)+COT(IJ0(I,J))*SIGMA(115)
C-----ADD DCDS FOR SIGMA S-P FOR S-P BOND (NOT USED BY SMD)
              if (LGR) then
                do L=1,3
                  DSTS(L,I,I)=DSTS(L,I,I)
     .                +SIGMA(115)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                  DSTS(L,J,I)=DSTS(L,J,I)
     .                -SIGMA(115)*DCOTDR(ij0(I,J))*URLIO(L,J,I)
                end do
              end if
C
            ENDIF
 220      CONTINUE
        ENDIF
 950  CONTINUE
      RETURN
      END
C
C*MODULE MNSOL  *DECK IJ0
      integer FUNCTION IJ0(I,J)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      IF(I.GT.J) THEN
         IJ0=I*(I-1)/2+J
      ELSE
         IJ0=J*(J-1)/2+I
      END IF
      RETURN
      END
C
C*MODULE MNSOL  *DECK accsolang
      SUBROUTINE accsolang(NAT,AREA,NCROSS,K,LGRX,RAD,NC,DAREA,
     *                      RLIO,URLIO,LAB,NCNCT,CONECT,CTHETA,
     *                      STHETA,SIT,DCSIT,DJCOSN,COSN,DSTETA,
     *                      DCTETA,DCOSN,WORK,DIWORK,DJWORK,DKWORK,
     *                      D0WORK,DWORKR,DCAODD,DSITR,DCAPLY,
     *                      DICOSN,DCASLC,DCTETR,DSTETR,DCOSNR)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (PI=3.14159265358979d+00)
C
      LOGICAL FREEIJ,FREEJI,CONECT,LPOLY,LGRX,LGRR
C
      DIMENSION RAD(*),NC(0:*),DAREA(3,0:*),
     *          RLIO(*),URLIO(3,NAT,*),
     *          LAB(*),NCNCT(2*NAT+1,*),CONECT(NAT,*),
     *          CTHETA(NAT,*),STHETA(*),SIT(*),
     *          DCSIT(3,*),DJCOSN(3,3,NAT,*),
     *          COSN(3,NAT,*),DSTETA(3,*),
     *          DCTETA(3,NAT,*),DCOSN(3,3,NAT,*),
     *          WORK(*),DIWORK(3,*),DJWORK(3,*),
     *          DKWORK(3,*),D0WORK(3,*),DWORKR(*),
     *          DCAODD(3,0:*),DSITR(*),DCAPLY(3,0:*),
     *          DICOSN(3,3,NAT,*),DCASLC(3,0:*),
     *          DCTETR(*),DSTETR(*),DCOSNR(3,NAT,*)
      DIMENSION DCNIJR(3),DVIJR(3),
     *          DCNIKR(3),DCC2I(3),DKCNIK(3,3),DAPHI(3),DBPHI(3),
     *          VIJ(3),DICOS(3,3),DJCOS(3,3),VN(3),DIVN(3,3),
     *          DJVN(3,3),DIVIJ(3,3),DJVIJ(3,3),DIWIJ(3,3),
     *          DJWIJ(3,3),DIAIJ(3),DJAIJ(3),DIBIJ(3),DJBIJ(3),
     *          DICIJ(3),DJCIJ(3),CNIJ(3),DICNIJ(3,3),DJCNIJ(3,3),
     *          CNIK(3),DICNIK(3,3)
C
      DATA EPSI /1.D-11/
C
C     ACCESSIBLE SOLID ANGLE OF SPHERES (RADIANS). ANALYTICAL.
C     ALLOW MULTIPLE CONNECTED COMPONENTS ON A SPHERE.
C     REGULARIZE RARE EVENTS (POINTS SHARED BY MORE THAN 3 SPHERES)
C     BY A SMALL PERTURBATION ON RADIUS.
C
C  INPUT
C     RAD(I)           : RADII.
C     NAT              : NUMBER OF SPHERES.
C     K                : NO OF THE SPHERE STUDIED.
C     LGRX             : .TRUE. TO CALCULATE CARTESIAN DERIVATIVES.
C     LGRR             : .TRUE. TO CALCULATE DERIVATIVE VS RAD(K).
C  (REF)
C     RLIO(I): INTERCENTRE DISTANCES (LOW TRIANGLE),
C     URLIO(3,I,J)     : ASSOCIATED UNIT VECTORS: FROM i TO j.
C
C  OUTPUT
C     AREA          : ACCESSIBLE SOLID ANGLE FOR SPHERE NO K.
C     NCROSS        : NUMBER OF SPHERES OVERLAPPING K.
C     NC            : INDICE OF SPHERES CONNECTED TO K.
C   AND IF LGRX = .TRUE. :
C     DAREA         : DERIVATIVES OF THE ACCESSIBLE SOLID ANGLE WITH
C                     RESPECT TO THE CARTESIAN COORDINATES.
C     THAT IS: DAREA(I,J) = dAREA(K)/dCOORD(I,NC(J)) ... J=0,NCROSS.
C   AND IF LGRR = .TRUE. :
C     DAREAR        : DERIVATIVES OF THE ACCESSIBLE SOLID ANGLE WITH
C                     RESPECT TO RAD(K).
C
C     By D. Liotard, December 1992.
C     Derivatives by D. Rinaldi and D. Liotard
C
      MXSS=2*NAT+1
C
      PCMIN=1000
      JPCNT=0
C
      LGRR=.FALSE.
C
      DASLIR=0.0d+00
      DCIJ=0.0d+00
      DSN2IJ=0.0d+00
      DAIJR=0.0d+00
      DBIJR=0.0d+00
      DCIJR=0.0d+00
      DAPOLR=0.0d+00
      DC2IR=0.0d+00
      DAODDR=0.0d+00
      DPHIR=0.0d+00
C
      DO I=1,NAT
      LAB(I)=0
      STHETA(I)=0.0d+00
      SIT(I)=0.0d+00
      DWORKR(I)=0.0d+00
      DSITR(I)=0.0d+00
      DCTETR(I)=0.0d+00
      DSTETR(I)=0.0d+00
      DO J=1,3
      DCSIT(J,I)=0.0d+00
      DSTETA(J,I)=0.0d+00
      DIWORK(J,I)=0.0d+00
      DJWORK(J,I)=0.0d+00
      DKWORK(J,I)=0.0d+00
      D0WORK(J,I)=0.0d+00
      ENDDO
      DO J=1,MXSS
      NCNCT(J,I)=0
      ENDDO
      DO J=1,NAT
      CONECT(I,J)=.FALSE.
      CTHETA(I,J)=0.0d+00
      DO KK=1,3
      COSN(KK,I,J)=0.0d+00
      DCTETA(KK,I,J)=0.0d+00
      DCOSNR(KK,I,J)=0.0d+00
      DO L=1,3
      DJCOSN(KK,L,I,J)=0.0d+00
      DCOSN(KK,L,I,J)=0.0d+00
      DICOSN(KK,L,I,J)=0.0d+00
      ENDDO
      ENDDO
      ENDDO
      ENDDO
      DO I=1,MXSS
      WORK(I)=0.0d+00
      ENDDO
      DO I=0,NAT
      DO J=1,3
      DCAODD(J,I)=0.0d+00
      DCAPLY(J,I)=0.0d+00
      DCASLC(J,I)=0.0d+00
      ENDDO
      ENDDO
C
C     EPSI:THRESHOLD TO AVOID DRAMATIC CONSEQUENCES OF ROUND-OFF ERRORS,
C     MUST BE GREATER THAN THE POOREST OF RELATIVE ERRORS ON FUNCTIONS:
C     SQRT, ATAN.
C
      TWOPI=PI+PI
      FOURPI=TWOPI+TWOPI
      RK=RAD(K)
      NC(0) = K
      NCROSS = 0
      IF (LGRX) CALL DCOPY(3,0.0d+00,0,DAREA(1,0),1)
C
C---  IF (LGRR) DAREAR=0.0d+00
      IF (RK.LE.0.0d+00) THEN
         AREA=0.0d+00
         RETURN
      ELSE
C
C
C     PRESET ACCESSIBLE SOLID ANGLES TO "FREE" SPHERES.
C
      AREA=FOURPI
      ENDIF
   10 NCROSS=0
      EPSK=EPSI*RK
C
C     CHECK IF SPHERE K NOT BURIED; SET UP FLAG FOR OVERLAP OF K.
C     -------------------------------------------------------------
C
      DO 20 I=1,NAT
      IF (I.EQ.K.OR.RAD(I).LE.0.0d+00) GOTO 20
      IF (RK+RAD(I)-RLIO(IJ0(I,K)).LT.EPSK) GOTO 20
      IF (RLIO(IJ0(I,K))-ABS(RK-RAD(I)).LT.EPSK) THEN
         IF (RK.LE.RAD(I)) THEN
C           SPHERE K IMBEDDED IN SPHERE I
            AREA=0.0d+00
            RETURN
         ENDIF
      ELSE
         NCROSS=NCROSS+1
         NC(NCROSS) = I
         NCNCT(NCROSS,1)=I
      ENDIF
   20 CONTINUE
      IF (NCROSS.EQ.0) THEN
C        THE SPHERE K IS FREE.
         RETURN
      ENDIF
C
C     SET UP DATA FOR SPHERICAL SEGMENTS (SS).
C     ----------------------------------------
C
      RKINV=0.5d+00/RK
      RK2=RK**2
      DO 23 I=1,NCROSS
      LI=NCNCT(I,1)
      RIKINV=1.0d+00/RLIO(IJ0(LI,K))
C     COSINE OF HALF-ANGLE OF CONE.
      CTHETA(I,I)=RKINV*(RLIO(IJ0(LI,K))+(RK2-RAD(LI)**2)*RIKINV)
      STHETA(I)=SQRT(1.0d+00-CTHETA(I,I)**2)
      CONECT(I,I)=.FALSE.
C     DIRECTOR COSINES OF VECTOR KI.
      COSN(1,I,I)=URLIO(1,K,LI)
      COSN(2,I,I)=URLIO(2,K,LI)
      COSN(3,I,I)=URLIO(3,K,LI)
      IF (LGRX.OR.LGRR) THEN
         X=-CTHETA(I,I)/STHETA(I)
         IF (LGRX) THEN
            DRCTHT=RKINV*(1.0d+00-(RK2-RAD(LI)**2)*RIKINV**2)
            DO 22 ICOR=1,3
            DCTETA(ICOR,I,I)=DRCTHT*COSN(ICOR,I,I)
            DSTETA(ICOR,I)=X*DCTETA(ICOR,I,I)
            COSNI=COSN(ICOR,I,I)*RIKINV
            DO 21 JCOR=1,ICOR
            COSNIJ=-COSNI*COSN(JCOR,I,I)
            DCOSN(ICOR,JCOR,I,I)=COSNIJ
   21       DCOSN(JCOR,ICOR,I,I)=COSNIJ
   22       DCOSN(ICOR,ICOR,I,I)=DCOSN(ICOR,ICOR,I,I)+RIKINV
         ENDIF
         IF (LGRR) THEN
            DCTETR(I)=RIKINV-CTHETA(I,I)/RK
            DSTETR(I)=X*DCTETR(I)
         ENDIF
      ENDIF
   23 CONTINUE
C
C     CONNECTIVITY MATRIX BETWEEN SS.
C     -------------------------------
C     TRUE IIF CONNECTED. DIAGONAL=TRUE IIF IMBEDDED.
C
      DO 40 I=2,NCROSS
      DO 30 J=1,I-1
      IF (CONECT(J,J)) GOTO 30
      CISJ=CTHETA(I,I)*STHETA(J)
      SICJ=STHETA(I)*CTHETA(J,J)
      SISJ=STHETA(I)*STHETA(J)
C     COSINES OF ANGLES BETWEEN VECTOR KI AND KJ.
      CTHETA(J,I)=ddot(3,COSN(1,I,I),1,COSN(1,J,J),1)
      IF (LGRX) THEN
         DO 24 ICOR=1,3
         DCTETA(ICOR,I,J)=ddot(3,DCOSN(1,ICOR,I,I),1,COSN(1,J,J),1)
   24    DCTETA(ICOR,J,I)=ddot(3,COSN(1,I,I),1,DCOSN(1,ICOR,J,J),1)
      ENDIF
      TIJ=CTHETA(J,I)-CTHETA(I,I)*CTHETA(J,J)
      IF (TIJ.GT.SISJ-EPSI*ABS(CISJ-SICJ)) THEN
         IF (CTHETA(J,J).GT.CTHETA(I,I)) THEN
C           SS J IMBEDDED IN SS I
            CONECT(J,J)=.TRUE.
         ELSE
C           SS I IMBEDDED IN SS J
            CONECT(I,I)=.TRUE.
            GOTO 40
         ENDIF
      ELSE
         EPSIJ=EPSI*(SICJ+CISJ)
         IF (SICJ+CISJ.GE.0.0d+00) THEN
            CONECT(J,I)=TIJ.GT.EPSIJ-SISJ
         ELSE
            IF (TIJ.LE.-SISJ-EPSIJ) THEN
C              SPHERE K FULLY COVERED BY SS I PLUS SS J
               NCROSS=0
               AREA=0.0d+00
               RETURN
            ELSE
               CONECT(J,I)=.TRUE.
            ENDIF
         ENDIF
         CONECT(I,J)=CONECT(J,I)
      ENDIF
   30 CONTINUE
   40 CONTINUE
C
C     SUM THE CONTRIBUTIONS FROM ISOLATED SS.
C     ---------------------------------------
C
      ASLICE=0.0d+00
      IF (LGRX) CALL DCOPY(3*(NCROSS+1),0.0d+00,0,DCASLC(1,0),1)
      IF (LGRR) DASLIR=0.0d+00
      NCLUST=0
      DO 60 I=1,NCROSS
      IF (CONECT(I,I)) GOTO 60
      DO 50 J=1,NCROSS
      IF (CONECT(J,J)) GOTO 50
      IF (CONECT(J,I)) THEN
         NCLUST=NCLUST+1
C        LABEL OF NON-ISOLATED SS: LAB
         LAB(NCLUST)=I
C        PREPARE DATA FOR FURTHER USE
         WORK(NCLUST)=CTHETA(I,I)+EPSI*STHETA(I)
         WORK(NCLUST+NCROSS)=CTHETA(I,I)-EPSI*STHETA(I)
         GOTO 60
      ENDIF
   50 CONTINUE
      ASLICE=ASLICE+1.0d+00-CTHETA(I,I)
      IF (LGRX) THEN
         DO 55 ICOR=1,3
         DCASLC(ICOR,I)=DCASLC(ICOR,I)-DCTETA(ICOR,I,I)
   55    DCASLC(ICOR,0)=DCASLC(ICOR,0)+DCTETA(ICOR,I,I)
      ENDIF
      IF (LGRR) DASLIR=DASLIR-DCTETR(I)
   60 CONTINUE
      ASLICE=TWOPI*ASLICE
      IF (LGRX) CALL DSCAL(3*(NCROSS+1),TWOPI,DCASLC(1,0),1)
      IF (LGRR) DASLIR=DASLIR*TWOPI
      IF (NCLUST.EQ.0) THEN
C        NO CLUSTER OF SS REMAINS ON SPHERE K.
         AREA=FOURPI-ASLICE
         IF (LGRX) THEN
            DO 61 I=0,NCROSS
            DO 61 ICOR=1,3
   61       DAREA(ICOR,I)=-DCASLC(ICOR,I)
         ENDIF
C---     IF (LGRR) DAREAR=-DASLIR
         RETURN
      ENDIF
C
C     "FREE" INTERSECTIONS BETWEEN CLUSTERED SS.
C     ------------------------------------------
C
      NFREE=0
      NCNCT(MXSS,LAB(1))=0
      DO 80 I=2,NCLUST
      LI=LAB(I)
      NCNCT(MXSS,LI)=0
      DO 80 J=1,I-1
      LJ=LAB(J)
      IF (CONECT(LJ,LI)) THEN
C        DIRECTOR COSINES OF INTERSECTION POINTS BETWEEN SS
         SIN2IJ=1.0d+00/(1.0d+00-CTHETA(LJ,LI)**2)
         AIJ=(CTHETA(LI,LI)-CTHETA(LJ,LJ)*CTHETA(LJ,LI))*SIN2IJ
         BIJ=(CTHETA(LJ,LJ)-CTHETA(LI,LI)*CTHETA(LJ,LI))*SIN2IJ
         CIJ=SQRT((1.0d+00-AIJ*CTHETA(LI,LI)-BIJ*CTHETA(LJ,LJ))*SIN2IJ)
C        COMPUTE  VN = COSN(LI,LI) X COSN(LJ,LJ).
         VN(1)=COSN(2,LI,LI)*COSN(3,LJ,LJ)-COSN(3,LI,LI)*COSN(2,LJ,LJ)
         VN(2)=COSN(3,LI,LI)*COSN(1,LJ,LJ)-COSN(1,LI,LI)*COSN(3,LJ,LJ)
         VN(3)=COSN(1,LI,LI)*COSN(2,LJ,LJ)-COSN(2,LI,LI)*COSN(1,LJ,LJ)
         IF (LGRX.OR.LGRR) THEN
            DCIJ=0.5d+00/CIJ
            IF (LGRX) THEN
               DO 62 ICOR=1,3
               DIVN(1,ICOR)=DCOSN(2,ICOR,LI,LI)*COSN(3,LJ,LJ)
     1                     -DCOSN(3,ICOR,LI,LI)*COSN(2,LJ,LJ)
               DIVN(2,ICOR)=DCOSN(3,ICOR,LI,LI)*COSN(1,LJ,LJ)
     1                     -DCOSN(1,ICOR,LI,LI)*COSN(3,LJ,LJ)
               DIVN(3,ICOR)=DCOSN(1,ICOR,LI,LI)*COSN(2,LJ,LJ)
     1                     -DCOSN(2,ICOR,LI,LI)*COSN(1,LJ,LJ)
               DJVN(1,ICOR)=COSN(2,LI,LI)*DCOSN(3,ICOR,LJ,LJ)
     1                     -COSN(3,LI,LI)*DCOSN(2,ICOR,LJ,LJ)
               DJVN(2,ICOR)=COSN(3,LI,LI)*DCOSN(1,ICOR,LJ,LJ)
     1                     -COSN(1,LI,LI)*DCOSN(3,ICOR,LJ,LJ)
   62          DJVN(3,ICOR)=COSN(1,LI,LI)*DCOSN(2,ICOR,LJ,LJ)
     1                     -COSN(2,LI,LI)*DCOSN(1,ICOR,LJ,LJ)
               DSN2IJ=2.0d+00*CTHETA(LJ,LI)*SIN2IJ
            ENDIF
            IF (LGRR) THEN
               DAIJR=(DCTETR(LI)-DCTETR(LJ)*CTHETA(LJ,LI))*SIN2IJ
               DBIJR=(DCTETR(LJ)-DCTETR(LI)*CTHETA(LJ,LI))*SIN2IJ
               DCIJR=-SIN2IJ*(DAIJR*CTHETA(LI,LI)+AIJ*DCTETR(LI)
     1         +DBIJR*CTHETA(LJ,LJ)+BIJ*DCTETR(LJ))*DCIJ
            ENDIF
         ENDIF
C
         DO 63 ICOR=1,3
C
C        ----- INTERSECTION PIJ -----
C
         COSN(ICOR,LI,LJ)=AIJ*COSN(ICOR,LI,LI)+BIJ*COSN(ICOR,LJ,LJ)
     1                   +CIJ*VN(ICOR)
C
C        ----- INTERSECTION PJI -----
C
         COSN(ICOR,LJ,LI)=AIJ*COSN(ICOR,LI,LI)+BIJ*COSN(ICOR,LJ,LJ)
     1                   -CIJ*VN(ICOR)
         IF (LGRX) THEN
            DIS2IJ=DSN2IJ*DCTETA(ICOR,LI,LJ)
            DJS2IJ=DSN2IJ*DCTETA(ICOR,LJ,LI)
            DIAIJ(ICOR) =
     1           (DCTETA(ICOR,LI,LI)-CTHETA(LJ,LJ)*DCTETA(ICOR,LI,LJ))
     2           *SIN2IJ+AIJ*DIS2IJ
            DJAIJ(ICOR) =
     1           (-DCTETA(ICOR,LJ,LJ)*CTHETA(LJ,LI)-CTHETA(LJ,LJ)
     2           *DCTETA(ICOR,LJ,LI))*SIN2IJ + AIJ*DJS2IJ
            DJBIJ(ICOR) =
     1           (DCTETA(ICOR,LJ,LJ)-CTHETA(LI,LI)*DCTETA(ICOR,LJ,LI))
     2           *SIN2IJ + BIJ*DJS2IJ
            DIBIJ(ICOR) =
     1           (-DCTETA(ICOR,LI,LI)*CTHETA(LJ,LI)-CTHETA(LI,LI)
     2           *DCTETA(ICOR,LI,LJ))*SIN2IJ + BIJ*DIS2IJ
            DICIJ(ICOR) =
     1         -DCIJ*((DIAIJ(ICOR)*CTHETA(LI,LI)+AIJ*DCTETA(ICOR,LI,LI)
     2         +DIBIJ(ICOR)*CTHETA(LJ,LJ))*SIN2IJ)+0.5d+00*CIJ*DIS2IJ
            DJCIJ(ICOR) =
     1         -DCIJ*((DJBIJ(ICOR)*CTHETA(LJ,LJ)+BIJ*DCTETA(ICOR,LJ,LJ)
     2         +DJAIJ(ICOR)*CTHETA(LI,LI))*SIN2IJ)+0.5d+00*CIJ*DJS2IJ
         ENDIF
         IF (LGRR) THEN
            DCOSNR(ICOR,LI,LJ)=DAIJR*COSN(ICOR,LI,LI)
     1                        +DBIJR*COSN(ICOR,LJ,LJ)+DCIJR*VN(ICOR)
            DCOSNR(ICOR,LJ,LI)=DAIJR*COSN(ICOR,LI,LI)
     1                        +DBIJR*COSN(ICOR,LJ,LJ)-DCIJR*VN(ICOR)
         ENDIF
   63    CONTINUE
C
         IF (LGRX) THEN
            DO 64 ICOR=1,3
            DO 64 JCOR=1,3
            DICOS(ICOR,JCOR)=DIAIJ(JCOR)*COSN(ICOR,LI,LI) +
     1      AIJ*DCOSN(ICOR,JCOR,LI,LI)+DIBIJ(JCOR)*COSN(ICOR,LJ,LJ)
            DJCOS(ICOR,JCOR)=DJAIJ(JCOR)*COSN(ICOR,LI,LI) +
     1      DJBIJ(JCOR)*COSN(ICOR,LJ,LJ)+BIJ*DCOSN(ICOR,JCOR,LJ,LJ)
            DIWIJ(ICOR,JCOR)=DICIJ(JCOR)*VN(ICOR)+CIJ*DIVN(ICOR,JCOR)
            DJWIJ(ICOR,JCOR)=DJCIJ(JCOR)*VN(ICOR)+CIJ*DJVN(ICOR,JCOR)
            DICOSN(ICOR,JCOR,LI,LJ)=DICOS(ICOR,JCOR)+DIWIJ(ICOR,JCOR)
            DJCOSN(ICOR,JCOR,LI,LJ)=DJCOS(ICOR,JCOR)+DJWIJ(ICOR,JCOR)
            DICOSN(ICOR,JCOR,LJ,LI)=DICOS(ICOR,JCOR)-DIWIJ(ICOR,JCOR)
   64       DJCOSN(ICOR,JCOR,LJ,LI)=DJCOS(ICOR,JCOR)-DJWIJ(ICOR,JCOR)
         ENDIF
C
C        ----- INTERSECTION PIJ ------
C
         FREEIJ=.TRUE.
C
C        ----- INTERSECTION PJI -----
C
         FREEJI=.TRUE.
C
C        ----- SET UP TABLE OF FREE INTERSECTIONS BETWEEN SS. -----
C        ----- HERE IS THE L**3 PART OF THE CODE -----
C        ----- (L= MEAN VALUE OF NEIGHBORS) -----
C
         DO 70 L=1,NCLUST
         IF (L.EQ.I.OR.L.EQ.J) GOTO 70
         LL=LAB(L)
         IF (CONECT(LL,LI).AND.CONECT(LL,LJ)) THEN
            IF (FREEJI) THEN
               CHEK=ddot(3,COSN(1,LJ,LI),1,COSN(1,LL,LL),1)
               IF (CHEK.GT.WORK(L)) THEN
                  FREEJI=.FALSE.
               ELSE
                  PCMIN=MIN(PCMIN,ABS(WORK(L+NCROSS)-CHEK))
                  IF (CHEK.GE.WORK(L+NCROSS)) THEN
C
C        ----- SPHERES K, LAB(I), LAB(J), LAB(L) SHARE A POINT -----
C        ----- (AT THRESHOLD EPSI IN ANGLE). INCREASE THE -----
C        ----- RADIUS OF SPHERE K AND RESTART STUDY OF SPHERE K -----
C
                     RK=RK*(1.0d+00+4.0d+00*EPSI)
                     JPCNT=JPCNT + 1
                     GOTO 10
                  ENDIF
               ENDIF
            ENDIF
            IF (FREEIJ) THEN
               CHEK=ddot(3,COSN(1,LI,LJ),1,COSN(1,LL,LL),1)
               IF (CHEK.GT.WORK(L)) THEN
                  FREEIJ=.FALSE.
               ELSE IF (CHEK.GE.WORK(L+NCROSS)) THEN
                  RK=RK*(1.0d+00+4.0d+00*EPSI)
                  GOTO 10
               ENDIF
            ENDIF
            IF (.NOT.(FREEIJ.OR.FREEJI)) GOTO 80
         ENDIF
   70    CONTINUE
C
C        ----- ONE OR TWO FREE INTERSECTIONS FOUND. UPDATE TABLE -----
C
         CTHETA(LI,LJ)=CTHETA(LJ,LI)
         IF (FREEJI) THEN
            NFREE=NFREE+1
            M=NCNCT(MXSS,LI)+1
            NCNCT(M,LI)=LJ
            NCNCT(MXSS,LI)=M
            M=NCNCT(MXSS,LJ)+1
            NCNCT(M,LJ)=-LI
            NCNCT(MXSS,LJ)=M
         ENDIF
         IF (FREEIJ) THEN
            NFREE=NFREE+1
            M=NCNCT(MXSS,LI)+1
            NCNCT(M,LI)=-LJ
            NCNCT(MXSS,LI)=M
            M=NCNCT(MXSS,LJ)+1
            NCNCT(M,LJ)=LI
            NCNCT(MXSS,LJ)=M
         ENDIF
      ENDIF
   80 CONTINUE
      IF (NFREE.EQ.0) THEN
C        SPHERE K BURIED BY A CLUSTER OF SS
         NCROSS = 0
         AREA=0.0D+00
         RETURN
      ENDIF
C
C     ORIENTED ANGLES OF SLICES OF SS.
C     --------------------------------
C
      APOLY=0.0d+00
      IF (LGRX) CALL DCOPY(3*(NCROSS+1),0.0d+00,0,DCAPLY(1,0),1)
      IF (LGRR) DAPOLR=0.0d+00
      DO 130 I=1,NCLUST
      IF (LGRX) CALL DCOPY(3*(NCROSS+1),0.0d+00,0,DCAODD(1,0),1)
      LI=LAB(I)
      NPHI=NCNCT(MXSS,LI)
      IF (NPHI.EQ.0) GOTO 130
      LJ=NCNCT(1,LI)
      IF (LJ.GT.0) THEN
         DO 83 ICOR=1,3
         CNIJ(ICOR) = COSN(ICOR,LJ,LI)
         IF (LGRX.AND.LI.GE.LJ) THEN
            DO 81 JCOR=1,3
            DICNIJ(ICOR,JCOR)=DICOSN(ICOR,JCOR,LJ,LI)
  81        DJCNIJ(ICOR,JCOR)=DJCOSN(ICOR,JCOR,LJ,LI)
         ELSE IF (LGRX) THEN
            DO 82 JCOR=1,3
            DICNIJ(ICOR,JCOR)=DJCOSN(ICOR,JCOR,LJ,LI)
  82        DJCNIJ(ICOR,JCOR)=DICOSN(ICOR,JCOR,LJ,LI)
         ENDIF
         IF (LGRR) DCNIJR(ICOR)=DCOSNR(ICOR,LJ,LI)
  83     CONTINUE
      ELSE
         LJ=-LJ
         DO 86 ICOR=1,3
         CNIJ(ICOR)=COSN(ICOR,LI,LJ)
         IF (LGRX.AND.LI.GE.LJ) THEN
            DO 84 JCOR=1,3
            DICNIJ(ICOR,JCOR)=DICOSN(ICOR,JCOR,LI,LJ)
  84        DJCNIJ(ICOR,JCOR)=DJCOSN(ICOR,JCOR,LI,LJ)
         ELSE IF (LGRX) THEN
            DO 85 JCOR=1,3
            DICNIJ(ICOR,JCOR)=DJCOSN(ICOR,JCOR,LI,LJ)
  85        DJCNIJ(ICOR,JCOR)=DICOSN(ICOR,JCOR,LI,LJ)
         ENDIF
         IF (LGRR) DCNIJR(ICOR)=DCOSNR(ICOR,LI,LJ)
  86     CONTINUE
         NCNCT(1,LI)=LJ
      ENDIF
      SIT(LI)=1.0d+00/STHETA(LI)
      C2I=CTHETA(LI,LI)**2
      VIJ(1)=COSN(2,LI,LI)*CNIJ(3)-COSN(3,LI,LI)*CNIJ(2)
      VIJ(2)=COSN(3,LI,LI)*CNIJ(1)-COSN(1,LI,LI)*CNIJ(3)
      VIJ(3)=COSN(1,LI,LI)*CNIJ(2)-COSN(2,LI,LI)*CNIJ(1)
      LPOLY =ddot(3,VIJ,1,COSN(1,LJ,LJ),1).GT.0.0d+00
C
      IF (LGRX.OR.LGRR) THEN
         X=2.0d+00*CTHETA(LI,LI)
         Y=-SIT(LI)**2
         IF (LGRX) THEN
            DO 87 ICOR=1,3
            DCSIT(ICOR,LI)=Y*DSTETA(ICOR,LI)
            DCC2I(ICOR)=X*DCTETA(ICOR,LI,LI)
            DIVIJ(1,ICOR)=
     1      DCOSN(2,ICOR,LI,LI)*CNIJ(3)-DCOSN(3,ICOR,LI,LI)*CNIJ(2)
     2      +COSN(2,LI,LI)*DICNIJ(3,ICOR)-COSN(3,LI,LI)*DICNIJ(2,ICOR)
            DIVIJ(2,ICOR)=
     1      DCOSN(3,ICOR,LI,LI)*CNIJ(1)-DCOSN(1,ICOR,LI,LI)*CNIJ(3)
     2      +COSN(3,LI,LI)*DICNIJ(1,ICOR)-COSN(1,LI,LI)*DICNIJ(3,ICOR)
            DIVIJ(3,ICOR)=
     1      DCOSN(1,ICOR,LI,LI)*CNIJ(2)-DCOSN(2,ICOR,LI,LI)*CNIJ(1)
     2      +COSN(1,LI,LI)*DICNIJ(2,ICOR)-COSN(2,LI,LI)*DICNIJ(1,ICOR)
            DJVIJ(1,ICOR)=
     1      COSN(2,LI,LI)*DJCNIJ(3,ICOR)-COSN(3,LI,LI)*DJCNIJ(2,ICOR)
            DJVIJ(2,ICOR)=
     1      COSN(3,LI,LI)*DJCNIJ(1,ICOR)-COSN(1,LI,LI)*DJCNIJ(3,ICOR)
  87        DJVIJ(3,ICOR)=
     1      COSN(1,LI,LI)*DJCNIJ(2,ICOR)-COSN(2,LI,LI)*DJCNIJ(1,ICOR)
         ENDIF
         IF (LGRR) THEN
            DSITR(LI)=Y*DSTETR(LI)
            DC2IR=X*DCTETR(LI)
            DVIJR(1)=COSN(2,LI,LI)*DCNIJR(3)-COSN(3,LI,LI)*DCNIJR(2)
            DVIJR(2)=COSN(3,LI,LI)*DCNIJR(1)-COSN(1,LI,LI)*DCNIJR(3)
            DVIJR(3)=COSN(1,LI,LI)*DCNIJR(2)-COSN(2,LI,LI)*DCNIJR(1)
         ENDIF
      ENDIF
C
C     MAKE A LOOP OVER THE SS I, COMPUTE DIHEDRALS BETWEEN 0 AND TWOPI
C
      DO 95 J=2,NPHI
      LJ=NCNCT(J,LI)
      IF (LJ.GT.0) THEN
         DO 90 ICOR=1,3
         CNIK(ICOR) = COSN(ICOR,LJ,LI)
         IF (LGRX.AND.LI.GE.LJ) THEN
            DO 88 JCOR=1,3
            DICNIK(ICOR,JCOR)=DICOSN(ICOR,JCOR,LJ,LI)
   88       DKCNIK(ICOR,JCOR)=DJCOSN(ICOR,JCOR,LJ,LI)
         ELSE IF (LGRX) THEN
            DO 89 JCOR=1,3
            DICNIK(ICOR,JCOR)=DJCOSN(ICOR,JCOR,LJ,LI)
   89       DKCNIK(ICOR,JCOR)=DICOSN(ICOR,JCOR,LJ,LI)
         ENDIF
         IF (LGRR) DCNIKR(ICOR)=DCOSNR(ICOR,LJ,LI)
   90    CONTINUE
      ELSE
         LJ =-LJ
         DO 93 ICOR=1,3
         CNIK(ICOR)=COSN(ICOR,LI,LJ)
         IF (LGRX.AND.LI.GE.LJ) THEN
            DO 91 JCOR=1,3
            DICNIK(ICOR,JCOR)=DICOSN(ICOR,JCOR,LI,LJ)
   91       DKCNIK(ICOR,JCOR)=DJCOSN(ICOR,JCOR,LI,LJ)
         ELSE IF (LGRX) THEN
            DO 92 JCOR=1,3
            DICNIK(ICOR,JCOR)=DJCOSN(ICOR,JCOR,LI,LJ)
   92       DKCNIK(ICOR,JCOR)=DICOSN(ICOR,JCOR,LI,LJ)
         ENDIF
         IF (LGRR) DCNIKR(ICOR)=DCOSNR(ICOR,LI,LJ)
   93    CONTINUE
         NCNCT(J,LI)=LJ
      ENDIF
C
C     NOTE: ACCURACY IS CRUCIAL HERE (USE ATAN2, NOT ACOS + ASIN)
C
      X=ddot(3, VIJ,1,CNIK,1)
      Y=ddot(3,CNIK,1,CNIJ,1)-C2I
      WORK(J-1)=ATAN2(X,Y)
      IF (WORK(J-1).LE.0.0d+00) WORK(J-1)=WORK(J-1)+TWOPI
      IF (LGRX.OR.LGRR) THEN
         DX=-X/(X**2+Y**2)
         DY= Y/(X**2+Y**2)
         IF (LGRX) THEN
C           CARTESIAN DERIVATIVES OF WORK
            DO 94 ICOR=1,3
            DIX=ddot(3,DIVIJ(1,ICOR),1,CNIK,1)
     $         +ddot(3,VIJ,1,DICNIK(1,ICOR),1)
            DIY=ddot(3,DICNIK(1,ICOR),1,CNIJ,1)
     $         +ddot(3,CNIK,1,DICNIJ(1,ICOR),1)-DCC2I(ICOR)
            DJX=ddot(3, DJVIJ(1,ICOR),1,CNIK,1)
            DJY=ddot(3,CNIK,1,DJCNIJ(1,ICOR),1)
            DKX=ddot(3, VIJ,1,DKCNIK(1,ICOR),1)
            DKY=ddot(3,DKCNIK(1,ICOR),1,CNIJ,1)
            DIWORK(ICOR,J-1)= DY*DIX+DX*DIY
            DJWORK(ICOR,J-1)= DY*DJX+DX*DJY
            DKWORK(ICOR,J-1)= DY*DKX+DX*DKY
   94       D0WORK(ICOR,J-1)=-DIWORK(ICOR,J-1)-DJWORK(ICOR,J-1)
     1                       -DKWORK(ICOR,J-1)
         ENDIF
         IF (LGRR) THEN
C           DERIVATIVE OF WORK VS RAD(K)
            DXR=ddot(3,DVIJR,1,CNIK,1)+ddot(3,VIJ,1,DCNIKR,1)
            DYR=ddot(3,DCNIKR,1,CNIJ,1)+ddot(3,CNIK,1,DCNIJR,1)-DC2IR
            DWORKR(J-1)=DY*DXR+DX*DYR
         ENDIF
      ENDIF
   95 CONTINUE
      IF (NPHI.EQ.2) THEN
C        TRIVIAL CASE, NO SORT NEEDED
         AODD=WORK(1)
         IF (LGRX) THEN
            LJ=NCNCT(1,LI)
            LK=NCNCT(2,LI)
            DO 96 ICOR=1,3
            DCAODD(ICOR,LI)=DCAODD(ICOR,LI)+DIWORK(ICOR,1)
            DCAODD(ICOR,LJ)=DCAODD(ICOR,LJ)+DJWORK(ICOR,1)
            DCAODD(ICOR,LK)=DCAODD(ICOR,LK)+DKWORK(ICOR,1)
   96       DCAODD(ICOR,0 )=DCAODD(ICOR,0 )+D0WORK(ICOR,1)
         ENDIF
         IF (LGRR) DAODDR=DWORKR(1)
      ELSE
C
C        ----- SORT THE DIHEDRALS OF SS NO I IN ASCENDING ORDER -----
C
         DO 100 J=1,NPHI-2
         DO 100 L=J+1,NPHI-1
         IF (WORK(J).GT.WORK(L)) THEN
            BUF=WORK(L)
            WORK(L)=WORK(J)
            WORK(J)=BUF
            M=NCNCT(L+1,LI)
            NCNCT(L+1,LI)=NCNCT(J+1,LI)
            NCNCT(J+1,LI)=M
            IF (LGRX) THEN
               CALL DSWAP(3,DIWORK(1,L),1,DIWORK(1,J),1)
               CALL DSWAP(3,DJWORK(1,L),1,DJWORK(1,J),1)
               CALL DSWAP(3,DKWORK(1,L),1,DKWORK(1,J),1)
               CALL DSWAP(3,D0WORK(1,L),1,D0WORK(1,J),1)
            ENDIF
            IF (LGRR) THEN
               BUF=DWORKR(L)
               DWORKR(L)=DWORKR(J)
               DWORKR(J)=BUF
            ENDIF
         ENDIF
  100    CONTINUE
C
C        COMPUTE THE SUM OF DIHEDRALS OF ORDERED SLICES (EVEN IN NUMBER)
C        ---------------------------------------------------------------
C
         AODD=WORK(1)
         IF (LGRX) THEN
            LJ=NCNCT(1,LI)
            LK=NCNCT(2,LI)
            DO 101 ICOR=1,3
            DCAODD(ICOR,LI)=DCAODD(ICOR,LI)+DIWORK(ICOR,1)
            DCAODD(ICOR,LJ)=DCAODD(ICOR,LJ)+DJWORK(ICOR,1)
            DCAODD(ICOR,LK)=DCAODD(ICOR,LK)+DKWORK(ICOR,1)
  101       DCAODD(ICOR,0 )=DCAODD(ICOR,0 )+D0WORK(ICOR,1)
         ENDIF
         IF (LGRR) DAODDR=DWORKR(1)
         DO 110 J=3,NPHI-1,2
         AODD=AODD+WORK(J)-WORK(J-1)
         IF (LGRX) THEN
            LK=NCNCT(J,LI)
            LL=NCNCT(J+1,LI)
            DO 102 ICOR=1,3
            DCAODD(ICOR,LI)=DCAODD(ICOR,LI)
     1                     +DIWORK(ICOR,J )-DIWORK(ICOR,J-1)
            DCAODD(ICOR,LJ)=DCAODD(ICOR,LJ)
     1                     +DJWORK(ICOR,J )-DJWORK(ICOR,J-1)
            DCAODD(ICOR,LK)=DCAODD(ICOR,LK)-DKWORK(ICOR,J-1)
            DCAODD(ICOR,LL)=DCAODD(ICOR,LL)+DKWORK(ICOR,J)
  102       DCAODD(ICOR,0 )=DCAODD(ICOR,0 )
     1                     +D0WORK(ICOR,J )-D0WORK(ICOR,J-1)
         ENDIF
         IF (LGRR) DAODDR=DAODDR+DWORKR(J)-DWORKR(J-1)
  110    CONTINUE
      ENDIF
      AEVEN=TWOPI-AODD
      X=1.0d+00-CTHETA(LI,LI)
      IF (LPOLY) THEN
C        ODD DIHEDRALS ARE VERTICE OF POLYGONS
         APOLY=APOLY+AODD
         ASLICE=ASLICE+AEVEN*X
         IF (LGRX) THEN
            DO 111 LT=0,NCROSS
            DCAPLY(1,LT)=DCAPLY(1,LT)+DCAODD(1,LT)
            DCASLC(1,LT)=DCASLC(1,LT)-DCAODD(1,LT)*X
            DCAPLY(2,LT)=DCAPLY(2,LT)+DCAODD(2,LT)
            DCASLC(2,LT)=DCASLC(2,LT)-DCAODD(2,LT)*X
            DCAPLY(3,LT)=DCAPLY(3,LT)+DCAODD(3,LT)
  111       DCASLC(3,LT)=DCASLC(3,LT)-DCAODD(3,LT)*X
            DCASLC(1,LI)=DCASLC(1,LI)-AEVEN*DCTETA(1,LI,LI)
            DCASLC(1,0 )=DCASLC(1,0 )+AEVEN*DCTETA(1,LI,LI)
            DCASLC(2,LI)=DCASLC(2,LI)-AEVEN*DCTETA(2,LI,LI)
            DCASLC(2,0 )=DCASLC(2,0 )+AEVEN*DCTETA(2,LI,LI)
            DCASLC(3,LI)=DCASLC(3,LI)-AEVEN*DCTETA(3,LI,LI)
            DCASLC(3,0 )=DCASLC(3,0 )+AEVEN*DCTETA(3,LI,LI)
         ENDIF
         IF (LGRR) THEN
            DAPOLR=DAPOLR+DAODDR
            DASLIR=DASLIR-DAODDR*X-AEVEN*DCTETR(LI)
         ENDIF
      ELSE
C        EVEN DIHEDRALS ARE VERTICE OF POLYGONS
         APOLY=APOLY+AEVEN
         ASLICE=ASLICE+AODD*X
         IF (LGRX) THEN
            DO 112 LT=0,NCROSS
            DCAPLY(1,LT)=DCAPLY(1,LT)-DCAODD(1,LT)
            DCASLC(1,LT)=DCASLC(1,LT)+DCAODD(1,LT)*X
            DCAPLY(2,LT)=DCAPLY(2,LT)-DCAODD(2,LT)
            DCASLC(2,LT)=DCASLC(2,LT)+DCAODD(2,LT)*X
            DCAPLY(3,LT)=DCAPLY(3,LT)-DCAODD(3,LT)
  112       DCASLC(3,LT)=DCASLC(3,LT)+DCAODD(3,LT)*X
            DCASLC(1,LI)=DCASLC(1,LI)-AODD*DCTETA(1,LI,LI)
            DCASLC(1,0 )=DCASLC(1,0 )+AODD*DCTETA(1,LI,LI)
            DCASLC(2,LI)=DCASLC(2,LI)-AODD*DCTETA(2,LI,LI)
            DCASLC(2,0 )=DCASLC(2,0 )+AODD*DCTETA(2,LI,LI)
            DCASLC(3,LI)=DCASLC(3,LI)-AODD*DCTETA(3,LI,LI)
            DCASLC(3,0 )=DCASLC(3,0 )+AODD*DCTETA(3,LI,LI)
         ENDIF
         IF (LGRR) THEN
            DAPOLR=DAPOLR-DAODDR
            DASLIR=DASLIR+DAODDR*X-AODD*DCTETR(LI)
         ENDIF
C        REORDER LABELS SO THAT POLYGON'S VERTICE APPEAR AT ODD RANKS
         M=NCNCT(1,LI)
         DO 120 J=1,NPHI-1
  120    NCNCT(J,LI)=NCNCT(J+1,LI)
         NCNCT(NPHI,LI)=M
      ENDIF
  130 CONTINUE
C
C     NOW TO COUNT THE NUMBER OF POLYGONS AND TO SUM INTERSECTION ANGLES
C     ------------------------------------------------------------------
C
      NPOLY=0
      DO 170 I=1,NCLUST
      LI=LAB(I)
      DO 160 J=2,NCNCT(MXSS,LI),2
      IF (NCNCT(J,LI).NE.0) THEN
C        DEFINE THE "FIRST" VERTEX OF A POLYGON
         IA=NCNCT(J-1,LI)
         IB=LI
         NCNCT(J,LI)=0
         PHI1=CTHETA(IA,IB)-CTHETA(IA,IA)*CTHETA(IB,IB)
         PHI2=SIT(IA)*SIT(IB)
         PHI=ACOS(PHI1*PHI2)
         APOLY=APOLY+PHI
         IF (LGRX.OR.LGRR) THEN
            S1NPHI=1.0d+00/SIN(PHI)
            PHI1=S1NPHI*PHI1
            PHI2=S1NPHI*PHI2
            IF (LGRX) THEN
               DO 131 ICOR=1,3
               DAPHI(ICOR)=(DCTETA(ICOR,IA,IB)-CTHETA(IB,IB)
     1         *DCTETA(ICOR,IA,IA))*PHI2+PHI1*DCSIT(ICOR,IA)*SIT(IB)
               DBPHI(ICOR)=(DCTETA(ICOR,IB,IA)-CTHETA(IA,IA)
     1         *DCTETA(ICOR,IB,IB))*PHI2+PHI1*SIT(IA)*DCSIT(ICOR,IB)
               DCAPLY(ICOR,IA)=DCAPLY(ICOR,IA)-DAPHI(ICOR)
               DCAPLY(ICOR,IB)=DCAPLY(ICOR,IB)-DBPHI(ICOR)
  131          DCAPLY(ICOR,0 )=DCAPLY(ICOR,0 )+DAPHI(ICOR)+DBPHI(ICOR)
            ENDIF
            IF (LGRR) THEN
               DPHIR=
     1         (DCTETR(IA)*CTHETA(IB,IB)+CTHETA(IA,IA)*DCTETR(IB))*PHI2
     2         -PHI1*(DSITR(IA)*SIT(IB)+SIT(IA)*DSITR(IB))
               DAPOLR=DAPOLR+DPHIR
            ENDIF
         ENDIF
C
C        FOLLOW AND ERASE VERTICES OF THE CURRENT POLYGON
C
  140    L=2
  141    IF (L.GT.NCNCT(MXSS,IA)) GOTO 150
         IF (NCNCT(L,IA).EQ.IB) THEN
            IBOLD=IB
            NCNCT(L,IA)=0
            IB=IA
            IA=NCNCT(L-1,IB)
            IF (IA.NE.IBOLD) THEN
               PHI1=CTHETA(IA,IB)-CTHETA(IA,IA)*CTHETA(IB,IB)
               PHI2=SIT(IA)*SIT(IB)
               PHI=ACOS(PHI1*PHI2)
               IF (LGRX.OR.LGRR) THEN
                  S1NPHI=1.0d+00/SIN(PHI)
                  PHI1=S1NPHI*PHI1
                  PHI2=S1NPHI*PHI2
                  IF (LGRX) THEN
                     DO 142 ICOR=1,3
                     DAPHI(ICOR)=(DCTETA(ICOR,IA,IB)
     1               -CTHETA(IB,IB)*DCTETA(ICOR,IA,IA))*PHI2
     2               +PHI1*DCSIT(ICOR,IA)*SIT(IB)
  142                DBPHI(ICOR)=(DCTETA(ICOR,IB,IA)
     1               -CTHETA(IA,IA)*DCTETA(ICOR,IB,IB))*PHI2
     2               +PHI1*SIT(IA)*DCSIT(ICOR,IB)
                  ENDIF
                  IF (LGRR) THEN
                     DPHIR=(DCTETR(IA)*CTHETA(IB,IB)+
     1               CTHETA(IA,IA)*DCTETR(IB))*PHI2
     2               -PHI1*(DSITR(IA)*SIT(IB)+SIT(IA)*DSITR(IB))
                  ENDIF
               ENDIF
            ELSE
               IB=LI
               IA=NCNCT(J-1,LI)
            ENDIF
            APOLY=APOLY+PHI
            IF (LGRX) THEN
               DO 143 ICOR=1,3
               DCAPLY(ICOR,IA)=DCAPLY(ICOR,IA)-DAPHI(ICOR)
               DCAPLY(ICOR,IB)=DCAPLY(ICOR,IB)-DBPHI(ICOR)
  143          DCAPLY(ICOR,0 )=DCAPLY(ICOR,0 )+DAPHI(ICOR)+DBPHI(ICOR)
            ENDIF
            IF (LGRR) DAPOLR=DAPOLR+DPHIR
            GOTO 140
         ENDIF
         L=L+2
         GOTO 141
C        ORIENTED LOOP OVER CURRENT POLYGON COMPLETED
  150    NPOLY=NPOLY+1
      ENDIF
  160 CONTINUE
  170 CONTINUE
C
C     ACCESSIBLE SOLID ANGLE FOR SPHERE K.
C     ------------------------------------
C     POLYGONS IMBEDDED IN OTHERS TAKEN INTO ACCOUNT BY MODULO(4PI)
C
      APOLY=APOLY+(NPOLY-NFREE)*TWOPI
      AREA=FOURPI-ASLICE-MOD(APOLY,FOURPI)
      IF (LGRX) THEN
         DO 200 I=0,NCROSS
         DAREA(1,I)=-DCASLC(1,I)-DCAPLY(1,I)
         DAREA(2,I)=-DCASLC(2,I)-DCAPLY(2,I)
  200    DAREA(3,I)=-DCASLC(3,I)-DCAPLY(3,I)
      ENDIF
C---  IF (LGRR) DAREAR=-DASLIR-DAPOLR
      RETURN
      END
C
C*MODULE MNSOL  *DECK SMDPRT
      SUBROUTINE SMDPRT
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      COMMON /CONV  / DENTOL,EN,ET,EHF,EHF0,DIFF,ITER,ICALP,ICBET
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /ENRGMP/ EMP2,EMP3,EMP4,EMP2A
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PCMCHG/ PB,PX,PC,UNZ,QNUC,FN,FE,UNZOR,PORT
      COMMON /PCMEFP/ PB_MUL,PC_MUL,PB_POL,PC_POL,P_FF,P_NF,P_FN,P_I,
     *                P_IBIS,P_J,P_NUCC,P_NUCCBIS,ENPCM
      COMMON /PCMITR/ RCUT(2),THRES,IPCMIT,IMUL,MXDIIS,NREG,MXITR1,
     *                MXITR2,MODPAP
      COMMON /PCMPRT/ GCAVP,GCAVS,GDISP,GRP,EHFGAS
      COMMON /CDSPRT/ GCDS,AREACDS
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
C
      DATA AUTOKAL /627.509541D+00/
      DATA ENERGY  /8HENERGY  /,RNONE  /8HNONE    /
C
C  ------------------------------------------------------------
C
C    ETOT= total energy of the system solute-solvent
C    EINT= internal energy of the solute
C    EDELTA=EINT-EVAC= variation of internal energy
C          = <PSI| H(0) |PSI> - <PSI(0)| H(0) |PSI(0)>
C
C    Electrostatic contribution:
C    GES = 1/2 (PB + PC) + 1/2 PX + UNZ
C
C    PB = interaction solute electrons - polarization nuclear charges
C             PB = sum_i [Vel(i) * QSN(i)]
C
C    PC = interaction solute nuclei - polarization electronic charges
C             PC = sum_i [Vnuc(i) * QSE(i)]
C
C    PX = interaction solute electrons - polarization electronic charges
C             PX = sum_i [Vel(i) * QSE(i)]
C
C    UNZ = 1/2 interaction nuclei - polarization nuclear charges
C
C    GCDS = cavity-dispersion-solvent structure term (Minnesota)
C  --------------------------------------------------------------
C
      IF (NGLEVL.NE.0) RETURN
      IF (NHLEVL.NE.0) RETURN
C
C     SMD SUMMARY IS PRINTED ONLY FOR A SINGLE-POINT ENERGY
C     CALCULATION OR AT THE END OF ANALYTICAL GRADIENT
C     CALCULATION/GEOMETRY OPTIMIZATION
C
      ETOT = ET
      IF(MPLEVL.EQ.2) ETOT=EMP2
C
C        hui li 04/28/2003  remove the cav+dis+rep energies.
C      IF( ICAV.EQ.1) ETOT=ETOT-GCAVP/AUTOKAL
C      IF(IDISP.EQ.1) ETOT=ETOT-(GDISP+GRP)/AUTOKAL
      ETOT=ETOT-GCDS/AUTOKAL
C
C              ----- total electrostatic contribution -----
C     The explicit solver has various terms to sum, some of which may
C     be zero depending on whether or not the EFP model is being used.
C     The iterative solver apparently has been summing these all along.
C
      IF(IPCMIT.EQ.0) THEN
         GES = 0.5D+00 * (PB + PC) + 0.5D+00 * PX + UNZ
     *       + 0.5D+00 * (P_I+P_IBIS+P_J+P_NUCC+P_NUCCBIS)
      ELSE
         GES = 0.50D+00 * ENPCM
      END IF
C
      GTOT = ETOT + GCDS/AUTOKAL
      EINT=ETOT-GES
      DEINT=ETOT-GES-EHFGAS
      GSOL=GTOT-EHFGAS
      GSOLST=GSOL*AUTOKAL+1.89409d+00
C
      IF(MASWRK) THEN
        WRITE(IW,150)
        IF(TDDFTYP.NE.RNONE) WRITE(IW,160)
        IF(RUNTYP.EQ.ENERGY.AND.TDDFTYP.EQ.RNONE) THEN
        WRITE(IW,100) EHFGAS,EINT,DEINT,ETOT,GES,GCDS/AUTOKAL,GTOT,
     *         DEINT*AUTOKAL,GES*AUTOKAL,GCDS,GSOL*AUTOKAL,
     *         GSOLST
        ELSE
        WRITE(IW,101) EINT,ETOT,GES,GCDS/AUTOKAL,GTOT,
     *                GES*AUTOKAL,GCDS
       ENDIF
        WRITE(IW,*) '.... DONE PRINTING SMD SOLVENT SUMMARY ....'
        CALL TIMIT(1)
      END IF
      IF(MPLEVL.EQ.2) ETOT=ETOT-EMP2
C
      RETURN
C
  150 FORMAT(/13X,'----------------------------------------------'/,
     *        13X,'-------   RESULTS OF SMD CALCULATION   -------'/,
     *        13X,'----------------------------------------------')
C--  *' REFERENCE FOR THE SMD MODEL:',/,
C--  *' A.V.Marenich, C.J.Cramer, D.G.Truhlar,',
C--  *' J. Phys. Chem. B 2009, 113, 6378'/)
  160 FORMAT(13X,'        COMPUTED FOR THE GROUND STATE         ',/)
  100 FORMAT(1X,'INTERNAL ENERGY IN GAS = <PSI(0)| H(0) |PSI(0)>     =',
     *          F20.10,' A.U.',/,
     *       1X,'INTERNAL ENERGY IN SOLVENT = <PSI| H(0) |PSI>       =',
     *          F20.10,' A.U.',/,
     *       1X,'DELTA INTERNAL ENERGY =  <D-PSI| H(0) |D-PSI>       =',
     *          F20.10,' A.U.',/,
     *       1X,'TOTAL ENERGY IN SOLVENT = <PSI| H(0)+V/2 |PSI>      =',
     *          F20.10,' A.U.',/,
     *       1X,'ELECTROSTATIC INTERACTION <PSI| V/2 |PSI>           =',
     *          F20.10,' A.U.',/,
     *       1X,'CDS INTERACTION                                     =',
     *          F20.10,' A.U.',/,
     *       1X,'TOTAL FREE ENERGY IN SOLVENT                        =',
     *          F20.10,' A.U.',/,
     *      /,1X,'DELTA INTERNAL ENERGY        =',F15.2,' KCAL/MOL',/,
     *        1X,'ELECTROSTATIC INTERACTION    =',F15.2,' KCAL/MOL',/,
     *        1X,'CDS INTERACTION              =',F15.2,' KCAL/MOL',/,
     *        1X,'FREE ENERGY OF SOLVATION     =',F15.2,' KCAL/MOL',/,
     *        1X,'FREE ENERGY OF SOLVATION     =',F15.2,
     *           ' KCAL/MOL (1 ATM STANDARD STATE)',/)
  101 FORMAT(1X,'INTERNAL ENERGY IN SOLVENT = <PSI| H(0) |PSI>       =',
     *          F20.10,' A.U.',/,
     *       1X,'TOTAL ENERGY IN SOLVENT = <PSI| H(0)+V/2 |PSI>      =',
     *          F20.10,' A.U.',/,
     *       1X,'ELECTROSTATIC INTERACTION <PSI| V/2 |PSI>           =',
     *          F20.10,' A.U.',/,
     *       1X,'CDS INTERACTION                                     =',
     *          F20.10,' A.U.',/,
     *       1X,'TOTAL FREE ENERGY IN SOLVENT                        =',
     *          F20.10,' A.U.',/,
     *      /,1X,'ELECTROSTATIC INTERACTION    =',F15.2,' KCAL/MOL',/,
     *        1X,'CDS INTERACTION              =',F15.2,' KCAL/MOL',/)
      END
C
C*MODULE MNSOL  *DECK SVP_SVGL
      SUBROUTINE SVP_SVGL(NCAV,CAVW,ELF,GL)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION CAVW(*),ELF(*)
      DIMENSION ParmA(3),Parmx(3),ParmB(6)
C     ---- parameter Ai ( A1, A2, A3) -----
      ParmA(1) =   1984.0d+00
      ParmA(2) =   1528.0d+00
      ParmA(3) =   1488.0d+00
C     ---- parameter xi ( x1, x2, x3) -----
      Parmx(1) =    0.070d+00
      Parmx(2) =    0.037d+00
      Parmx(3) =    0.057d+00
C     ---- parameter Bi ( B1, B2, B3, ..., B6) -----
      ParmB(1) =   -2.679d+00
      ParmB(2) =  -23.413d+00
      ParmB(3) =  453.544d+00
      ParmB(4) =    1.454d+00
      ParmB(5) =   -5.640d+00
      ParmB(6) =  -139.35d+00
C     ---- Now calculate GL ----
      MaxI = 3
      GL   = 0.0d+00
      do i = 1, MaxI
         GLa = 0.0d+00
         GLc = 0.0d+00
         do m = 1,NCAV
            tx   = ParmA(i)  * ( -ELF(m) - Parmx(i) )
            COT  = 0.5d+00 + 0.5d+00 * tanh(tx)
            GLa  = GLa + COT * ELF(m)**i * CAVW(m)
            tx   = ParmA(i)  * (  ELF(m) - Parmx(i) )
            COT  = 0.5d+00 + 0.5d+00 * tanh(tx)
            GLc  = GLc + COT * ELF(m)**i * CAVW(m)
         enddo
         GL = GL + ParmB(i) * GLa + ParmB(i+MaxI) * GLc
      enddo
      RETURN
      END
