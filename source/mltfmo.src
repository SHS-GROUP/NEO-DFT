C 28 Dec 11 - TN  - changes for FMO 4.2 
C 15 Apr 11 - TN  - new module for multiscale solvation in FMO 
c
C*MODULE MLTFMO  *DECK FMOPCMREMD
      SUBROUTINE FMOPCMREMD(ISTEP,NTS,ILAY,LOADHF,LOADM,DA,IPTLG,
     *                      ZVLAG,IPTZC,ZVEC0,FMODE,ORBXCH,NUMFRG,
     *                      IODFMO,LAYFRG,SCFFRG,ISGDDI,IREC0,
     *                      NGRFMO,MANNOD,MASTID,NQMTFG)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL ISGDDI,MYJOB
      LOGICAL ORBXCH
      LOGICAL DOSCZV,DODISTR,LCNTCAL
C
      INTEGER DDI_WORLD,DDI_GROUP
      PARAMETER (DDI_WORLD=0,DDI_GROUP=1)
      PARAMETER (MXATM=2000,MAXPST=10)
      PARAMETER (MXFRG=1050)

      PARAMETER (ONE=1.0D+00,HALF=0.5D+00)
C
      DIMENSION DA(1)
      DIMENSION LOADM(*),NUMFRG(*),NQMTFG(*)
      DIMENSION IODFMO(*),LAYFRG(*),SCFFRG(*)
      DIMENSION NGRFMO(MAXPST,*),MANNOD(*),MASTID(*)
      DIMENSION FMODE(3,*)
      DIMENSION IPTLG(*),ZVLAG(*),IPTZC(*),ZVEC0(*)
C
      COMMON /PCMTMP/ IDSP(MXATM+MXFRG*5),DPCMFRG(6,MXFRG),
     *                EGPCM(3,MXATM)
      COMMON /FMCOM / X(1)
      COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
     *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FMOOPT/ ESPSCA(9),RESPAP(2),RESPPC(2),RESDIM,RESTRI(4),
     *                RCORSD,RESPCT,CONVFG,CNVDMP,COROFF,RFLMO(4),
     *                ORSHFT,ORSHFT2,CNVAFO,ASCREEN(4),IXESP,MXITFG,
     *                NGUESS,NBSSE,MODORB,MODPAR,IRSTSTP,IRSTLAY,NPRFMO,
     *                NFMOPAL,MODPRP,MAXL1C,IPIEDA,MODGRD,MODESP,IVMUL,
     *                modlmo,nopden,mofock,modfd,modfmm
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,lidmpnt,liddpnt,livmpnt,liactfg,lcrfrg
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /MLTFMO/ Q_MUL,IMLTFMO,ISWPFD,ISWNEW1
      COMMON /MLTPNT/ LDELEPOT,LDELQSE,LQSETMP,LFZVEC
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PCMPNT/ LXYZRE,LSSFE,LLIST,LALPCM,LRINPCM,LINAPCM,LINFPCM,
     *                LINIPCM,LMEPCM,LAXYZCT,LXYZCT2,LNVERT,LQSN,LQSE,
     *                LQFS,LQIND,LISPHE,LVAD,LQOR,LVECMUL,LAIPRJ,LFIPRJ,
     *                LPEL,LPCMCDR,LDAI,LIDDAI,LQSND,LQSED
      COMMON /SCZLAG/ LZVLAG,LZVWRK
      COMMON /SCZVEC/ IDFZVEC,LIPTZVEC,LIPTLG
C
      DATA RMC/8HMCSCF   /
CZ
CZ    THIS ROUTINE CALCULATES THE REMAINING CONTRIBUTION
CZ    IN FMO/PCM<1> GRADIENT
CZ
CZ    ISTEP=0
CZ    IAND(MODGRD,32).EQ.0: DERIVATIVE INTEGRALS 
CZ    IAND(MODGRD,32).NE.0: JUST GET LAGRANGIAN 
CZ
CZ    ISTEP=1 (ALWAYS COMES WITH IAND(MODGRD,32).NE.0)
CZ    DERIVATIVE INTEGRALS+RESPONSE TERM
CZ
C
      IF (ISWNEW1.NE.1) RETURN
C
      ISWPFD  = 1
      IESDPPC = 0
      DOSCZV  = IAND(MODGRD, 32).NE.0
      DODISTR = IAND(MODPAR,512).NE.0
      LCNTCAL = (ISTEP.EQ.0.AND..NOT.DOSCZV).OR.(ISTEP.EQ.1.AND.DOSCZV)
CZ    IF (MASWRK) WRITE(6,*) 'LCNTCAL', ISTEP,LCNTCAL

CZ
CZ    MEMORY ALLOCATION 
CZ
      MAXL2 = (MAXL1*MAXL1+MAXL1)/2
      CALL VALFM(LOADFM)
      NDASC = 0
      LFPNT = LOADFM
      IF (ISTEP.EQ.0) THEN
        NTSPAR=(NTS-1)/NPROC+1
        CALL INDQPROD(0,NTSPAR,LFPNT,NDASC,DUM,DUM,DUM)
      END IF
      LFZVEC  = LFPNT  + NDASC + 1
      LAST    = LFZVEC + MAXL2
      NEED    = LAST - LOADFM -1
      CALL GETFM(NEED)
CZ
CZ    WORLD SCOPE
CZ
      IF (ISGDDI) THEN
        CALL GDDI_SCOPE(DDI_WORLD)
        CALL EFPPARL
      END IF
C
      IF     (ISTEP.EQ.0) THEN
        IF (GOPARR) CALL DDI_GSUMF(3003,X(LDELEPOT),NTS)
CZ      IF (MASWRK) THEN
CZ        WRITE(6,*) 'DELTA POTENTIAL IN FMOPCM'
CZ        LXX = LDELEPOT - 1
CZ        WRITE(6,'(8F12.8)') (X(LXX+I),I=1,NTS)
CZ      END IF
        CALL INDQPROD(1,NTSPAR,LOADFM,NDASC,X(LDELEPOT),X(LDELQSE),
     *                X(LDELQSE))
        CALL DCOPY(NTS,X(LDELQSE),1,X(LQSETMP),1)
CZ      IF (MASWRK) THEN
CZ        WRITE(6,*) 'DELTA INDUCED CHARGE IN FMOPCM'
CZ        LXX = LQSETMP - 1
CZ        WRITE(6,'(8F12.8)') (X(LXX+I),I=1,NTS)
CZ      END IF
CZ      IF (MASWRK) THEN
CZ        WRITE(6,*) 'PCMCDR IN  FMOPCM'
CZ        DO I = 1, NATFMO
CZ          LXX = LPCMCDR + (I-1)*3
CZ          WRITE(6,'(3F12.8)') X(LXX),X(LXX+1),X(LXX+2)
CZ        END DO
CZ      END IF
      ELSEIF (ISTEP.EQ.1) THEN
        ! LQSETMP HERE IS INDUCED CHARGE DUE TO Z-VECTORS
        ! SEE FMOCP.SRC
        CALL DAXPY(NTS,ONE,X(LDELQSE),1,X(LQSETMP),1)
      END IF
C
CZ
CZ    SWITCH TO GROUP
CZ
      IF (ISGDDI) THEN
        CALL GDDI_SCOPE(DDI_GROUP)
        CALL EFPPARL
      END IF
      IF (ISGDDI.AND.NGRFMO(1,ILAY).NE.0)
     *  CALL FMOPRE(ILAY,1,NGRFMO,MANNOD,MASTID)
C
      JCURFG  = 0
      KCURFG  = 0
      ICURLAY = ILAY
      IF (ISGDDI) CALL GDDICOUNT(-1,LGROUP,MYJOB)
      DO 230 IIFG = 1,NFG
        IFG = IIFG
        IF (LOADHF.EQ.1) IFG = LOADM(IIFG)
C
        IF (LAYFRG(IFG).LT.ILAY) GOTO 230
        ICURFG = IFG
        IF (ISGDDI) THEN
          CALL GDDICOUNT(0,LGROUP,MYJOB)
          IF (.NOT.MYJOB) GOTO 230
        END IF
C
        CALL CLOSDA('DELETE')
        CALL OPENDA(0)
        CALL MAKEMOL(IFG,0,0,ILAY,0,0,0,0,0,0,0,.TRUE.)
        L1 = NUM
        L2 = (L1*L1+L1)/2
        L3 =  L1*L1
        IDMREC0I = IFG + IREC0
C
        IF (DOSCZV) THEN
          NQI    = IAND(NQMTFG(IFG),65535)
          NAI    = ISHFT(NUMFRG(IFG),-16)
          NOCI   = NAI
          NVRI   = NQI - NOCI
          NOCVRI = NOCI*NVRI
C
          ! MO COEF. AND ORBITAL ENERGIES
          CALL RAREADS(IDAFMO,IODFMO,DA(L2+1),L3+L1,IDMREC0I,0)
          CALL DMTX2(DA,DA(L2+1),NAI,L1,L1,NAI)
        ELSE
          CALL READMOND(DA,ORBXCH,SCFFRG(IFG).EQ.RMC,NA,NB,L1,
     *                  IODFMO,IDMREC0I)
        END IF

C
CZ      IF (MASWRK) WRITE(6,*) 'DENSITY FOR ',IFG
CZ      CALL PRTRI(DA,L1)

        CALL VALFM(LOADFM)
        LCSD  = LOADFM + 1
        LWRK1 = LCSD   + L2
        LWRK2 = LWRK1  + L3
        LWRK3 = LWRK2  + L3
        LAST  = LWRK3  + L3
        NDPCM = LAST - LOADFM -1
        CALL GETFM(NDPCM)

        IF (LCNTCAL) THEN
          CALL VCLR(DE,1,NAT*3)
CZ
CZ        GET Z-VECTOR FOR FRAGMENT IFG
CZ
          IF (ISTEP.EQ.1) THEN
            IF (DODISTR) THEN
              CALL ZVECPUTGET(1,0,IFG,NOCVRI,X(LIPTZVEC),X(LWRK1))
            ELSE
              CALL DCOPY(NOCVRI,ZVEC0(IPTZC(IFG)),1,X(LWRK1),1)
            END IF 
            CALL SWBASIS(0,L1,NOCI,NVRI,DA(L2+1),X(LWRK1),NVRI,
     *                   X(LWRK2),L1,X(LWRK3))
            CALL SQ2TRI(L1,L1,X(LWRK2),X(LFZVEC),HALF)
          END IF 

          ! THIS IS FOR DERCCM: DA IS RHF DENSITY
          CALL DAWRIT(IDAF,IODA,DA,L2,16,0)
          ! CALCULATION OF PCM CONTRIBUTIONS
          CALL DERCCM
          IF (MASWRK) CALL DAXPY(NAT*3,ONE,EGPCM,1,DE,1)
CZ        IF (MASWRK) THEN
CZ          WRITE(6,*) 'TESTTEST', NPROC, IFG
CZ          DO II1 = 1, NAT
CZ            WRITE(6,'(3F12.8)') DE(1,II1),DE(2,II1),DE(3,II1)
CZ          END DO
CZ        END IF
        END IF
C
C
        CALL PCMPOT(X(LCSD),X(LCSD),NTS,X(LQSETMP),X(LAXYZCT),L2,1)

CZCZ    IF (GOPARR) CALL DDI_GSUMF(3003,X(LCSD),L2)
CZ
CZ      GET LAGRANGIAN CONTRIBUTION FOR Z-VECTOR CALCULATION
CZ
        IF (ISTEP.EQ.0.AND.DOSCZV) THEN
          CALL CPYTSQ(X(LCSD),X(LWRK1),L1,1)
          ! LPEX IS USED AS A WORK SPACE
          CALL SWBASIS(1,L1,NOCI,NVRI,DA(L2+1),X(LWRK1),L1,X(LZVWRK),
     *                 NVRI,X(LWRK2))
          CALL ZVLGMULT(NOCVRI,1,IFG,IPTLG,DODISTR,ZVLAG,X(LZVWRK),
     *                  X(LWRK2))
        END IF
CZ
        IF (LCNTCAL) THEN
          CALL CPYTSQ(DA,DA(L2+1),L1,1)
          CALL TFTRI(X(LWRK1),X(LCSD),DA(L2+1),X(LWRK2),L1,L1,L1)
          CALL DSCAL(L2,-HALF,X(LWRK1),1)
          CALL SDER(X(LWRK1),X(LWRK2),L1,L2,.FALSE.)
          IF (GOPARR) CALL DDI_GSUMF(2418,DE,NAT*3)
          IF (MASWRK) CALL FMODEG(1,FMODE,X(LFMOPG),X(LIAGLOB))
        END IF

        CALL RETFM(NDPCM)
  230 CONTINUE
C
      ISWPFD = 0
      CALL RETFM(NEED)
      IF (ISGDDI) CALL GDDICOUNT( 1,LGROUP,MYJOB)
C
      RETURN
      END
C*MODULE MLTFMO  *DECK INDQPROD 
      SUBROUTINE INDQPROD(ITER,NTSPAR,LFPNT,NDASC,POTIN,QOUT,QDOUT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,PACK2E
CZ    DIMENSION QINI(*)
      DIMENSION POTIN(1),QOUT(1),QDOUT(1)
C 
      PARAMETER (ONE=1.0D+00)
      PARAMETER (MXATM=2000)
C
      COMMON /FMCOM / X(1)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /INT2IC/ NINTIC,ININTIC,NXXIC,LBUFPIC,LIXIC,LABSIX,NINTIX
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /PCKLAB/ LABSIZ
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PCMDIM/ MXSP,MXTS,MEMPCM1,MEMPCM2,NTS
      COMMON /PCMEPS/ EPSHET(MXATM),IHET
      COMMON /PCMITR/ RCUT(2),THRES,IPCMIT,IMUL,MXDIIS,NREG,MXITR1,
     *                MXITR2,MODPAP
      COMMON /PCMOPT/ RABI,RASC,REFPOL,THRSLS,DENSLS,WB,WA,ETA2,GD,EVAC,
     *                RHOW,PM,AREATL,AREAKP,BONDRY,OMEGA,RET,FRO,EPSINF,
     *                EPS,DR,RSOLV,VMOL,TCE,STEN,DSTEN,CMF,TABS,IDIRCT,
     *                IPCDER,IDP,ICOMP,IFIELD,ICAV,IDISP,IPRINT,IRETCAV,
     *                ICENT,IFAST,NEVAL,IEFPOL,KEEPSM,IMGABI,IMGASC,NADD
      COMMON /PCMPAR/ IPCM,NFT26,NFT27,IRPPCM,IEF,IP_F,NFMOPCM
      COMMON /PCMPNT/ LXYZRE,LSSFE,LLIST,LALPCM,LRINPCM,LINAPCM,LINFPCM,
     *                LINIPCM,LMEPCM,LAXYZCT,LXYZCT2,LNVERT,LQSN,LQSE,
     *                LQFS,LQIND,LISPHE,LVAD,LQOR,LVECMUL,LAIPRJ,LFIPRJ,
     *                MPEL,LPCMCDR,LDAI,LIDDAI,LQSND,LQSED
CZCZ  ADDED FOR MULTISCALE solvation in FMO
czcz  COMMON /MLTFMO/ Q_MUL,IMLTFMO,ISWPFD,ISWNEW1
CZCZ
C
C     COMPUTE APPARENT SURFACE CHARGES (ASC). 
C     ITERMSCF=0 ESTIMATE MEMORY NEED 
C     ITERMSCF=1 DO THE WORK 
C     NO MEMORY IS ALLOCATED INSIDE.
C
C     -- MEMORY FOR SALVATION
C
CZCZ  PCMRST=IAND(MODPAP,4).NE.0
      MXDII1 = MXDIIS + 1
C
      LQ0    = LFPNT  + 1
      LQ1    = LQ0    + NTS
      LQ2    = LQ1    + NTS
      LQ3    = LQ2    + NTS
      LD0    = LQ3    + NTS
      LQA    = LD0    + NTS
      LDIMAT = LQA    + NTS
      LTMP0  = LDIMAT + MXDII1*MXDII1
      LTMP1  = LTMP0  + NTS*3
      LTMP2  = LTMP1  + MXDII1
      LIPVT  = LTMP2  + MXDII1*MXDII1
      LRMUL  = LIPVT  + MXDII1
      LAST   = LRMUL  + MXSP*10
C
C     ALLOCATE THE LARGEST PCM ARRAY.
C     TRY BORROWING INTEGRAL MEMORY, IF AVAILABLE.
C     NOTE THAT OPTFMOX ALSO USES IT. 
C     WE CAN USE THE INTEGRAL BUFFER HERE SINCE QREP IS USED IN ASCIT
C     AFTER SCF IS ALL DONE AND THE INTEGRALS ARE NO LONGER NEEDED. 
C     TRY ALLOCATING ALL PCM IN INTEGRALS?
C
      NQREP=NTSPAR*MXDII1*2
      IUSE2E=0
      IF(NINTIC.GT.0) THEN
        LABSIZ2=2/LABSIZ
        N2EBUF=NINTMX+NINTIC+(NINTMX+NINTIC-1)/LABSIZ2+1
C       WRITE(6,*) 'BUFFER',N2EBUF,NHBLOCK
        IF(N2EBUF.GE.NQREP) THEN
          LQREP=LBUFPIC
          IUSE2E=1
        ENDIF
      ENDIF
      IF(IUSE2E.EQ.0) THEN
        LQREP = LAST 
        LAST  = LQREP  + NQREP
      ENDIF
C
      NDASC = LAST - LFPNT -1
      IF (ITER.EQ.0) RETURN
C
      IF(MASWRK) THEN
        WRITE(IW,9000) NDASC
        IF(IUSE2E.NE.0) WRITE(IW,9010) NQREP
      ENDIF

      CALL DSCAL(NTS,-ONE,POTIN,1)
CZ
C
C     ADD ELECTRON AND NUCLEAR POTENTIALS AND NORMALISE.
C
C     WRITE(6,*) 'WWWPCM-ELPOT'
C     CALL PRSQA(X(LPEL),NTS,1,1)
C     CALL ABRT
C
C
CZCZ  IF(IHAVEQ0.GT.0) THEN
CZCZ    CALL DCOPY(NTS,QINI(1+NTS*INDQE),1,X(LQ0),1)
CZCZ    IF(IEF.EQ.10.AND.EPS.NE.0.AND.ICOMP.EQ.0)
CZCZ *    CALL DSCAL(NTS,EPS/(EPS-ONE),X(LQ0),1)
C       FOR ICOMP=0 QINI HAS CHARGES SCALED BY (EPS-ONE)/EPS (FOR SCF),
C       UNSCALE THEM NOW FOR THE INITIAL GUESS IN ASCIT. 
CZCZ    IHAVEQ0=0
C       WRITE(6,*) 'WWWNTS1',(X(LQ0-1+I),I=1,NTS)
CZCZ  ENDIF
CZ
CZ    ADD EFP CONTRIBUTION TO QPOT FOR MULTISCALE solvation in FMO
CZ
CZCZ  IF (IMLTFMO.EQ.1) THEN
CZCZ    CALL ADDPOT(X(LQPOT),X(LVECMUL),.TRUE.,X(LAXYZCT),
CZCZ *       X(LAXYZCT+MXTS),X(LAXYZCT+MXTS*2))
CZCZ    Q_MUL=0.5D+00*DDOT(NTS,X(LVECMUL),1,X(LQSE),1)
CZCZ    WRITE(6,*) 'Q_MUL', Q_MUL 
CZCZ  END IF
CZCZ
      CALL ASCIT(ITER,0,POTIN,X(LQ0),X(LQ1),X(LQ2),X(LQ3),
     *           X(LD0),X(LQA),X(LDIMAT),X(LQREP),X(LTMP0),X(LTMP1),
     *           X(LTMP2),X(LIPVT),X(LRMUL),MXDII1,NTSPAR,X(LAXYZCT),
     *           X(LAXYZCT+MXTS),X(LAXYZCT+MXTS*2),X(LAXYZCT+MXTS*3),
     *           QOUT,X(LXYZRE),X(LXYZRE+MXSP),X(LXYZRE+MXSP*2),
     *           X(LXYZRE+MXSP*3),X(LISPHE),X(LLIST))
C       WRITE(6,*) 'WWWNTS1A',(X(LQSE-1+I),I=1,NTS)
C
C  SCALE C-PCM CHARGES BY (EPS-1)/EPS
C
CZCZ  IF(PCMRST) CALL DCOPY(NTS,X(LQSE),1,QINI(1+NTS*INDQE),1)
CZCZ  IF(IEF.EQ.10) CALL DSCAL(NTS,(EPS-ONE)/EPS,X(LQSE),1) 
      IF(IEF.EQ.10) CALL DSCAL(NTS,(EPS-ONE)/EPS,QOUT,1) 
C     - QSED IS REQUIRED EVERYWHERE EVEN IF IHET=0 -
C     - QSED = QSE WHEN IHET=0
CZCZ  IF(IHET.EQ.0) CALL DCOPY(NTS,X(LQSE),1,X(LQSED),1)
      IF(IHET.EQ.0) CALL DCOPY(NTS,QOUT,1,QDOUT,1)
      IF(IHET.NE.0) THEN
         IF(MASWRK) WRITE(IW,*)
     *         ' ONLY HOMOGENEOUS PCM CAN BE USED FOR FMO-PCM'
         CALL ABRT
      END IF
C
C     WRITE(6,*) 'WWWPCM-ASC'
C     CALL PRSQA(QSE,NTS,1,1)
C     ENPCM=-DDOT(NTS,X(LQPOT),1,QSE,1)
C     PX=DDOT(NTS,X(LPEL),1,QSE,1)
C     PB = INTERACTION ELECTRONS-NUCLEAR INDUCED CHARGES
C     PC = INTERACTION NUCLEI-ELECTRONIC INDUCED CHARGES
C     PX = INTERACTION ELECTRONS-ELECTRONIC INDUCED CHARGES
C     PB=ZERO
C     PC=-PX
C     PX=ENPCM - PX
C
C     FMO-PCM DIFFERS FROM THE AB INITIO PCM IN PUTTING ASC-ELECTRON INTEGRALS.
C     IN AB INITIO THEY GO TO THE FOCK MATRIX DIRECTLY.
C     IN FMO-PCM THEY ARE ADDED TO ONE-ELECTRON INTEGRALS (AND THUS TO
C     THE FOCK MATRIX).
C     THE FOCK MATRICES ARE THE SAME BUT THE 1E INTEGRALS DIFFER. THEFORE, THE
C     ENERGY CORRECTION TERM DIFFERS (SUBTRACTING 1/2*TR(D*VEL)=1/2*(PEL*QSE)).
C     P.S. THE REASON FOR THE DIFFERENT BEHAVIOUR IS THAT IN FMO-PCM THE ASCS
C     ARE CONSTANT IN SCF ITERATIONS.
C
C     --- NORMALIZATION ---
C
C  4) NORMALIZZAZIONE DELLE CARICHE VIRTUALI ELEMENTARI ELETTRONICHE.
C     PER ICOMP=1 LA CORREZIONE E' DISTRIBUITA IN PROPORZIONE
C     ALL'AREA DELLA TESSERA.
C     PER ICOMP=2 LA CORREZIONE E' EFFETTUATA CON FATTORI COSTANTI.
C
CZCZ  IF(ICOMP.NE.0) THEN
CZCZ    QN=-(NEFMO+ICHFMO)*(EPS-ONE)/EPS
CZCZ    QE=NEFMO*(EPS-ONE)/EPS
CZCZ    QTE=DDOT(NTS,X(LQSE),1,ONE,0)
CZCZ    QTN=DDOT(NTS,X(LQSN),1,ONE,0)
C       QSE=QE, QSN=QN 
C       WRITE(6,*) 'WWWCC',QE,QTE,QN,QTN
CZCZ    IF(ICOMP.EQ.1) THEN
C       CHARGE RENORMALISATION IS:
C       QT=QT+FE*S+FN*S=QE+QN+(FN+FE)*S
CZCZ      SUPTOT=STOT*ANTOAU*ANTOAU
CZCZ      FE=(QE-QTE)/SUPTOT
CZCZ      FN=(QN-QTN)/SUPTOT
CZCZ      CALL DAXPY(NTS,ONE,X(LQSN),1,X(LQSE),1)
C         X(LAXYZCT+MXTS*3) IS AS
CZCZ      CALL DAXPY(NTS,FN+FE,X(LAXYZCT+MXTS*3),1,X(LQSE),1)
CZCZ    ELSE IF(ICOMP.EQ.2) THEN
C       CHARGE RENORMALISATION IS:
C       QT=QE*FE+QN*FN
CZCZ      FE=QE/QTE
CZCZ      FN=QN/QTN
CZCZ      CALL DSCAL(NTS,FE,X(LQSE),1)
CZCZ      CALL DAXPY(NTS,FN,X(LQSN),1,X(LQSE),1)
CZCZ    END IF
CZCZ    QETN=DDOT(NTS,X(LQSE),1,ONE,0)
CZCZ    IF(MASWRK) WRITE(IW,9200) QTE+QTN,QETN,FN,FE
C       NOTE THAT FE AND FN HAVE VERY DIFFERENT MEANINGS IN ICOMP=1 AND 2.  
CZCZ    IF(PCMRST) CALL DCOPY(NTS,X(LQSN),1,QINI(1+NTS),1)
CZCZ  ELSE
C       WITHOUT CHARGE COMPENSATION, QSE CONTAINS QE+QN ALREADY. 
CZCZ    QET=DDOT(NTS,X(LQSE),1,ONE,0)
CZCZ    TCH=-ICHFMO*(EPS-ONE)/EPS
CZCZ    IF(MASWRK) WRITE(IW,9100) QET,TCH
CZCZ  END IF
CZCZ  IF(PCMRST) CALL DCOPY(NTS,X(LQSE),1,QINI,1)
C     THIS OVERWRITES UNSCALED QINI FOR ICOMP=0 BY SCALED VALUES. 
C
C     WE MUST BE IN WORLD SCOPE NOW, SO BROADCAST CHARGES TO ENSURE
C     NO SCF DEADLOCKS. 
C
C     IF(GOPARR) CALL DDI_BCAST(2422,'F',QSE,NTS,0)
C
      CALL TIMIT(1)
C
      RETURN
 9000 FORMAT(/1X,'CALCULATING APPARENT SURFACE CHARGES...',
     *       /5X,'USING',I12,' WORDS OF MEMORY.')
 9010 FORMAT(1X,I12,' WORDS ARE BORROWED FROM THE INTEGRAL BUFFER.')
C9050 FORMAT(1X,'CALCULATED NUCLEAR CHARGES, NOW DOING ELECTRONIC...')
C9100 FORMAT(1X,'PCM ASC=',F18.10,' THEORETICAL=  ',F18.10,/)
C9200 FORMAT(1X,'PCM ASC=',F18.10,' NORMALISED TO=',F18.10,/
C    *      1X,'NUCLEAR FACTOR=',F15.10,', ELECTRONIC FACTOR=',F15.10,/)
      END
C*MODULE MLTFMO  *DECK WRAPEPOT 
      SUBROUTINE WRAPEPOT(IMODE,FDA,XCTS,YCTS,ZCTS,DA,DB,NTS,L2)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
CZ    LOGICAL GOPARR,MASWRK,DSKWRK,SVDSKW
C
      PARAMETER (ONE=1.0D+00)
      DIMENSION XCTS(1), YCTS(1), ZCTS(1), DA(1), DB(1)
C
      COMMON /FMCOM / X(1)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /MLTPNT/ LDELEPOT,LDELQSE,LQSETMP,LFZVEC
CZ    COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
cz    COMMON /PCMPNT/ LXYZRE,LSSFE,LLIST,LALPCM,LRINPCM,LINAPCM,LINFPCM,
cz   *                LINIPCM,LMEPCM,LAXYZCT,LXYZCT2,LNVERT,LQSN,LQSE,
cz   *                LQFS,LQIND,LISPHE,LVAD,LQOR,LVECMUL,LAIPRJ,LFIPRJ,
cz   *                LPEL,LPCMCDR,LDAI,LIDDAI,LQSND,LQSED
C
C     THIS ROUTINE CONSTRUCTS DELTA POTENTIAL
C     LQSETMP IS USED AS TEMPORARY SPACE HERE
C
      IF     (IMODE.EQ.0) THEN
        CALL READHFD(DA,DB,L2)
      ELSEIF (IMODE.EQ.1) THEN
        ! ONLY DENSITY CORRECTION
        CALL DAREAD(IDAF,IODA,DA,L2,307,0)
      ELSE
        CALL ABRT
      END IF
      CALL VCLR(X(LQSETMP),1,NTS)
      CALL EPOTEN(FDA,XCTS,YCTS,ZCTS,X(LQSETMP),DA,NTS,L2)

      CALL DAXPY(NTS,ONE,X(LQSETMP),1,X(LDELEPOT),1)

      RETURN
      END
C*MODULE MLTFMO  *DECK PCMCNT2ORBH 
      SUBROUTINE PCMCNT2ORBH(L2,CNT)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      DIMENSION CNT(*)

      COMMON /FMCOM / X(1)
      COMMON /MLTPNT/ LDELEPOT,LDELQSE,LQSETMP,LFZVEC
      COMMON /PCMDIM/ MXSP,MXTS,MEMPCM1,MEMPCM2,NTS
      COMMON /PCMPNT/ LXYZRE,LSSFE,LLIST,LALPCM,LRINPCM,LINAPCM,LINFPCM,
     *                LINIPCM,LMEPCM,LAXYZCT,LXYZCT2,LNVERT,LQSN,LQSE,
     *                LQFS,LQIND,LISPHE,LVAD,LQOR,LVECMUL,LAIPRJ,LFIPRJ,
     *                LPEL,LPCMCDR,LDAI,LIDDAI,LQSND,LQSED
CZ
CZ    LQSETMP HERE IS INDUCED DIPOLE DUE Z-VECTORS
CZ
      CALL PCMPOT(CNT,CNT,NTS,X(LQSETMP),X(LAXYZCT),L2,1)

      RETURN
      END
C*MODULE MLTFMO  *DECK MONOTPOL
      SUBROUTINE MONOTPOL(XCTS,YCTS,ZCTS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXFRG=1050, MXFGPT=12000,MXIFRQ=12,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
C
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, GLIM=1.0D-03)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL DOEFPIEA
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      DIMENSION XCTS(1), YCTS(1), ZCTS(1)
C
      COMMON /EFPFM2/ FK_CNTP,POLTOT,LABFLDT,LDINDF2,LDINDDF2,LDELABFLD,
     *                LDELDIND,LDELDINDD
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FMCOM / XX(1)
      COMMON /FRFD  / PPEFX(MXFGPT), PPEFY(MXFGPT), PPEFZ(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IEACAL/ REMPOL,IEACAL,NFGIEA,NFRGIEA,NFRGI1,NFRGI2,IEADA,
     *                MXEFPT,MAXPOL,NPRIEA,NATFIEA,IEABDY,ITRLVL,
     *                DOEFPIEA
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /MLTFMO/ Q_MUL,IMLTFMO,ISWPFD,ISWNEW1
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PCMDIM/ MXSP,MXTS,MEMPCM1,MEMPCM2,NTS
      COMMON /PCMPNT/ LXYZRE,LSSFE,LLIST,LALPCM,LRINPCM,LINAPCM,LINFPCM,
     *                LINIPCM,LMEPCM,LAXYZCT,LXYZCT2,LNVERT,LQSN,LQSE,
     *                LQFS,LQIND,LISPHE,LVAD,LQOR,LVECMUL,LAIPRJ,LFIPRJ,
     *                MPEL,LPCMCDR,LDAI,LIDDAI,LQSND,LQSED
CZ
CZ    THIS ROUTINE CALCULATES THE INDUCED DIPOLE DUE TO THE SUM OF
CZ    MONOMER ELECTRIC FIELD IN NEW FMO/EFP.
CZ    IF IEFPFMO=2, NEW FMO/EFP IS ACTIVEATED
CZ
CZCZ
      CALL TIMIT(1)
      IF (MASWRK) WRITE(IW,9000)
      IF (IEACAL.EQ.1) DOEFPIEA = .TRUE.
C
      NPTTPT3 = NPTTPT*3
      IF(GOPARR) CALL DDI_GSUMF(668,XX(LABFLDT),NPTTPT3)
      II = 0
      DO LEFP = 1, NPTTPT
        IX = II
        IY = II + 1
        IZ = II + 2
CZ
CZ      MULTISCALE solvation in FMO
CZ
C       -- SOLVENT APPARENT CHARGE FIELD AT THE POINT ----
        PQ_X=ZERO
        PQ_Y=ZERO
        PQ_Z=ZERO
        IF (IMLTFMO.EQ.1) THEN
          DO ITS = 1,NTS
             ! SUPPOSED THAT ALL CONTRIBUTIONS ARE INCLUDED IN LQSE.
             QT = XX(LQSE+ITS-1)
             RR = (EFP(1,LEFP)-XCTS(ITS))**2 +
     *            (EFP(2,LEFP)-YCTS(ITS))**2 +
     *            (EFP(3,LEFP)-ZCTS(ITS))**2
             IF (RR.GE.GLIM) THEN
               RR3 = RR * SQRT(RR)
               PQ_X = PQ_X + QT *(EFP(1,LEFP)-XCTS(ITS))/RR3
               PQ_Y = PQ_Y + QT *(EFP(2,LEFP)-YCTS(ITS))/RR3
               PQ_Z = PQ_Z + QT *(EFP(3,LEFP)-ZCTS(ITS))/RR3
             END IF
          ENDDO
        END IF

        ! ABFLDT CONTAINS BOTH ELECTRON AND NUCLEAR CONTRIBUTIONS
        XX(LEFLDFMO+IX) = XX(LABFLDT+IX) + PPEFX(LEFP) + PQ_X
        XX(LEFLDFMO+IY) = XX(LABFLDT+IY) + PPEFY(LEFP) + PQ_Y
        XX(LEFLDFMO+IZ) = XX(LABFLDT+IZ) + PPEFZ(LEFP) + PQ_Z
        II = II + 3
      ENDDO
C
      CALL DCOPY(NPTTPT3,XX(LDINDF2) ,1,DIND, 1)
      CALL DCOPY(NPTTPT3,XX(LDINDDF2),1,DINDD,1)

      CALL DINDPROD(XX(LEFLDFMO),XX(LDINDF2),XX(LDINDDF2))

C
C     TOTAL POLARIZATION INTERACTION ENERGY
C
      IPCOUNT = ME - 1
      DO 24 LEFP=1,NPTTPT
        IF (GOPARR) THEN
          IPCOUNT = IPCOUNT + 1
          IF (MOD(IPCOUNT,NPROC).NE.0) THEN
            GO TO 24
          END IF
        END IF
C
C       FIELD DUE TO TOTAL FIELD
C
        IC = (LEFP-1)*3
        ! DOES NOT INCLUDE FIELD DUE TO PCM
        TOTFX = XX(LABFLDT+IC  ) + PPEFX(LEFP)
        TOTFY = XX(LABFLDT+IC+1) + PPEFY(LEFP) 
        TOTFZ = XX(LABFLDT+IC+2) + PPEFZ(LEFP)
C
C       INDUCED DIPOLE
C
        PMUX   =  DIND(1,LEFP)
        PMUY   =  DIND(2,LEFP)
        PMUZ   =  DIND(3,LEFP)
        PMUXD  = DINDD(1,LEFP)
        PMUYD  = DINDD(2,LEFP)
        PMUZD  = DINDD(3,LEFP)
        TOTMUX = PMUX + PMUXD
        TOTMUY = PMUY + PMUYD
        TOTMUZ = PMUZ + PMUZD
C
        POLTOT = POLTOT - ( TOTMUX*TOTFX
     *                     +TOTMUY*TOTFY
     *                     +TOTMUZ*TOTFZ)*PT5*PT5
C
        IF (DOEFPIEA) THEN
          REMPOL = REMPOL - ( TOTMUX*PPEFX(LEFP)
     *                       +TOTMUY*PPEFY(LEFP)
     *                       +TOTMUZ*PPEFZ(LEFP))*PT5*PT5
        END IF
 24   CONTINUE
      IF (IEACAL.EQ.1) DOEFPIEA = .FALSE.
C
      CALL TIMIT(1)
      IF (MASWRK) WRITE(IW,9010)
      RETURN
 9000 FORMAT(1X,'POLARIZATION CALCULATION STARTS IN NEW FMO/EFP')
 9010 FORMAT(1X,'CALCULATED POLARIZATION IN NEW FMO/EFP')
      END
C*MODULE MLTFMO  *DECK GETABFLDT
      SUBROUTINE GETABFLDT(IMODE,IRHF,IDA,L1,L2,ABFLDT,DINDF2,DINDDF2,
     *                     DA,DB,LGRAD)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXFRG=1050, MXFGPT=12000,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00)
C
      DIMENSION DA(1),DB(1),ABFLDT(3,*),DINDF2(3,*),DINDDF2(3,*)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL LGRAD
C
      COMMON /EFPFM2/ FK_CNTP,POLTOT,LABFLDT,LDINDF2,LDINDDF2,LDELABFLD,
     *                LDELDIND,LDELDINDD
      COMMON /FMCOM / X(1)
CZ    COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PNUC  / PPNX(MXFGPT),PPNY(MXFGPT),PPNZ(MXFGPT),PNZRF(3)
CZ
CZ    AFTER THE SCF CALCULATION IN RHFCL,
CZ    QM FIELD IS CALCLATED IN NEW FMO/EFP
CZ    IF IEFPFMO=2, NEW FMO/EFP IS ACTIVEATED
CZ
      IF (.NOT.LGRAD.AND.IFMOSTP.GT.2) RETURN

      IF (LGRAD) THEN
        IF     (IMODE.EQ.0) THEN
          ! READ RHF DENSITY
          CALL READHFD(DA,DB,L2)
        ELSEIF (IMODE.EQ.1) THEN
          ! ONLY DENSITY CORRECTION FOR MP2 GRAD
          CALL DAREAD(IDAF,IODA,DA,L2,307,0)
        ELSE
          CALL ABRT
        END IF
      ELSE
        ! ENERGY CALCULATION
        CALL DAREAD(IDAF,IODA,DA,L2,16,0)
      END IF
C
      CALL VALFM(LOADFM)
      LXEFI   = LOADFM + 1
      LYEFI   = LXEFI  + L2
      LZEFI   = LYEFI  + L2
      LFLDTMP = LZEFI  + L2
      LAST    = LFLDTMP + NPTTPT*3
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      DUM = ZERO
      CALL VCLR(X(LFLDTMP),1,NPTTPT*3)
      CALL DRCTPOL(1,NPTTPT,L1,L2,.FALSE.,.TRUE.,DUM,X(LFLDTMP),DA,
     *             DUM,DINDF2,DINDDF2,X(LXEFI),X(LYEFI),X(LZEFI))
C
C     IMODE=0 MEANS RHF
C 
      IF (IFMOSTP.EQ.2.AND.IRHF.EQ.1) THEN
        FK_CNTP = ZERO
        IPCOUNT = ME - 1
        DO 25 LEFP=1,NPTTPT
C
C       ----- GO PARALLEL! -----
C
           IF (GOPARR) THEN
              IPCOUNT = IPCOUNT + 1
              IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 25
           END IF
C
           PNX=PPNX(LEFP)
           PNY=PPNY(LEFP)
           PNZ=PPNZ(LEFP)
           TOTMUX =  DINDF2(1,LEFP) + DINDDF2(1,LEFP)
           TOTMUY =  DINDF2(2,LEFP) + DINDDF2(2,LEFP)
           TOTMUZ =  DINDF2(3,LEFP) + DINDDF2(3,LEFP)
C
C          ----- PREPARE POLARIZED ENVIRONMENT FOR NEXT SCF ITER -----
C
           ! THE SUM OF FRAGMENT FIELDS
           LTMP = LFLDTMP + (LEFP-1)*3
           EFLDXX = X(LTMP  )
           EFLDYY = X(LTMP+1)
           EFLDZZ = X(LTMP+2)

           FK_CNTP = FK_CNTP
     *             - PT5*(TOTMUX*EFLDXX+TOTMUY*EFLDYY+TOTMUZ*EFLDZZ)
           ABFLDT(1,LEFP) = ABFLDT(1,LEFP) + EFLDXX + PNX
           ABFLDT(2,LEFP) = ABFLDT(2,LEFP) + EFLDYY + PNY
           ABFLDT(3,LEFP) = ABFLDT(3,LEFP) + EFLDZZ + PNZ
 25     CONTINUE
        IF(GOPARR) CALL DDI_GSUMF(688,FK_CNTP,1)
CZCZ    IF (MASWRK) POLTOT = POLTOT + DDA * FK_CNTP
CZ
CZ      IN THE CURRENT IMPLEMENTATION OF NEW FMO/EFP,
CZ      THE POLARIZATION CONTRIBUTIONS TO FOCK ARE INCLUDED 
CZ      IN MONOMER AND DIMER ENERGIES.
CZ      TOTAL POLARIZATION AT THE MONOMER LEVEL IS CALCULATED IN MONOTPOL.
CZ      SO THERE IS DOUBLE COUNTING IN MONOMER POLARIZATION CONTRIBUTIONS.
CZ      THE SUBTRACTION BELOW IS THUS MADE FOR THE COMPENSATION.
CZ      NOTE THAT POLTOT DOES NOT DESCRIBE THE TOTAL POLARIZATION ENE.
        IF (MASWRK) POLTOT = POLTOT - FK_CNTP
      END IF
C
CZ
CZ    HERE IDA IS COUNTING THE NUMBER OF MONOMERS IN SUM_I>J(E_IJ-E_I-E_J)
CZ
      IF (LGRAD.AND.IDA.NE.0) THEN
        DDA = IDA
        IF (MASWRK) CALL DAXPY(NPTTPT*3,DDA,X(LFLDTMP),1,X(LDELABFLD),1)
      END IF
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE MLTFMO  *DECK DNEWIND
      SUBROUTINE DNEWIND(DIND,DINDD)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
      PARAMETER (MXFRG=1050, MXDFG=5, MXFGPT=12000,
     *           MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (ONE=1.0D+00)
C
      DIMENSION DIND(3,*),DINDD(3,*)
C
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FMCOM / XX(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
CZ
CZ    NON-ELECTRONIC POLARIZATION CONTRIBUTION TO GRADIENT 
CZ    IN NEW FMO/EFP 
CZ
      NFRG_3 = 3*NFRG
      CALL DEFPCLR
      CALL DEFEFIND(DIND,DINDD,DESFRG)
CZCZ  IF(GOPARR) CALL DDI_GSUMF(778,DESFRG,6*MXFRG)
C
      ! DEFT AND TORQ ARE ALWAYS CLEARED IN EFFT.
      CALL VCLR(DEFT,1,NFRG_3)
      CALL VCLR(TORQ,1,NFRG_3)
      IF (MASWRK) THEN
        CALL DESFRGMV(NFRG,DESFRG,DEFT,TORQ)
C
        DO I = 0, NBODY - 1
          CALL DAXPY(NFRG_3,ONE,DEFT,1,XX(LDEFTF+NFRG_3*I),1)
          CALL DAXPY(NFRG_3,ONE,TORQ,1,XX(LTORQF+NFRG_3*I),1)
        END DO
      END IF

      CALL DEFPCLR
      RETURN
      END
C*MODULE MLTFMO  *DECK DESFRGMV 
      SUBROUTINE DESFRGMV(NFRG,DESFRG,DEFT,TORQ) 
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      DIMENSION DESFRG(6,*), DEFT(3,*),TORQ(3,*)
C
      DO IFRG = 1, NFRG
        DEFT(1,IFRG) = DEFT(1,IFRG) + DESFRG(1,IFRG)
        DEFT(2,IFRG) = DEFT(2,IFRG) + DESFRG(2,IFRG)
        DEFT(3,IFRG) = DEFT(3,IFRG) + DESFRG(3,IFRG)
        TORQ(1,IFRG) = TORQ(1,IFRG) + DESFRG(4,IFRG)
        TORQ(2,IFRG) = TORQ(2,IFRG) + DESFRG(5,IFRG)
        TORQ(3,IFRG) = TORQ(3,IFRG) + DESFRG(6,IFRG)
      END DO

      RETURN
      END
C*MODULE MLTFMO  *DECK DNEWIND2
      SUBROUTINE DNEWIND2(ISTEP,ILAY,LOADHF,LOADM,DA,IPTLG,ZVLAG,
     *                    IPTZC,ZVEC0,FMODE,ORBXCH,NUMFRG,IODFMO,
     *                    LAYFRG,SCFFRG,ISGDDI,IREC0,NGRFMO,
     *                    MANNOD,MASTID,NQMTFG,CPWT1,CPWK1,CPWK2,CPWK3)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL ISGDDI,MYJOB
      LOGICAL ORBXCH
      LOGICAL DOSCZV,DODISTR,LCNTCAL
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      PARAMETER (MXATM=2000,MAXPST=10)
      INTEGER DDI_WORLD,DDI_GROUP
      PARAMETER (DDI_WORLD=0,DDI_GROUP=1)
      PARAMETER (MXFRG=1050, MXFGPT=12000,MXIFRQ=12,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12)

      PARAMETER (ONE=1.0D+00,HALF=0.5D+00)
C
      DIMENSION DA(1)
      DIMENSION LOADM(*),NUMFRG(*),NQMTFG(*)
      DIMENSION IODFMO(*),LAYFRG(*),SCFFRG(*)
      DIMENSION NGRFMO(MAXPST,*),MANNOD(*),MASTID(*)
      DIMENSION FMODE(3,*)
      DIMENSION IPTLG(*),ZVLAG(*),IPTZC(*),ZVEC0(*)
      DIMENSION CPWT1(*),CPWK1(*),CPWK2(*),CPWK3(*)
C
      COMMON /EFPFM2/ FK_CNTP,POLTOT,LABFLDT,LDINDF2,LDINDDF2,LDELABFLD,
     *                LDELDIND,LDELDINDD
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /EFPOTD/ METHOF,ISCCHG,MOVE
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FMCOM / X(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FMOOPT/ ESPSCA(9),RESPAP(2),RESPPC(2),RESDIM,RESTRI(4),
     *                RCORSD,RESPCT,CONVFG,CNVDMP,COROFF,RFLMO(4),
     *                ORSHFT,ORSHFT2,CNVAFO,ASCREEN(4),IXESP,MXITFG,
     *                NGUESS,NBSSE,MODORB,MODPAR,IRSTSTP,IRSTLAY,NPRFMO,
     *                NFMOPAL,MODPRP,MAXL1C,IPIEDA,MODGRD,MODESP,IVMUL,
     *                modlmo,nopden,mofock,modfd,modfmm
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,lidmpnt,liddpnt,livmpnt,liactfg,lcrfrg
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT,IDMFMO,IDDFMO,
     *                IDDCUR,NDDLEFT,IVMFMO
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /GRAD  / DE(3,MXATM)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /SCZLAG/ LZVLAG,LZVWRK
      COMMON /SCZVEC/ IDFZVEC,LIPTZVEC,LIPTLG
C
      DATA RMC/8HMCSCF   /
CZ
CZ    THIS ROUTINE CALCULATES THE CONTRIBUTION OF INDUCED DIPOLE DERIVATIVE
CZ    TERM (ELECTRONIC PART ONLY) TO THE GRADIENT IN NEW FMO/EFP METHOD.
CZ
CZ    ISTEP=0
CZ    IAND(MODGRD,32).EQ.0: DERIVATIVE INTEGRALS 
CZ    IAND(MODGRD,32).NE.0: LAGRANGIAN 
CZ
CZ    ISTEP=1 (ALWAYS WITH IAND(MODGRD,32).NE.0)
CZ    DERIVATIVE INTEGRALS+RESPONSE TERM  
CZ
CZCZ  IF (IEFP.EQ.0) RETURN
C
      NGREAT  = MAX(NMTTPT,NPTTPT,4*NRTTPT)
      NTOTPT  = NMTTPT+NPTTPT+NRTTPT
      L4      = 300*NGREAT
      NPTTPT3 = NPTTPT*3
      DOSCZV  = IAND(MODGRD, 32).NE.0
      DODISTR = IAND(MODPAR,512).NE.0
      LCNTCAL = (ISTEP.EQ.0.AND..NOT.DOSCZV).OR.(ISTEP.EQ.1.AND.DOSCZV)
CZ    IF (MASWRK) WRITE(6,*) 'LCNTCAL', ISTEP,LCNTCAL

CZ
CZ    WORLD SCOPE
CZ
      IF (ISGDDI) THEN
        CALL GDDI_SCOPE(DDI_WORLD)
        CALL EFPPARL
      END IF
C
      IF (IEFP.EQ.1) THEN
        IF (ISTEP.EQ.0) THEN
          IF (GOPARR) CALL DDI_GSUMF(3003,X(LDELABFLD),NPTTPT3)
CZ        IF (MASWRK) THEN
CZ          WRITE(6,*) 'DELTA ABFIELD'
CZ          DO I = 1, NPTTPT
CZ            LXX = LDELABFLD + (I-1)*3
CZ            WRITE(6,'(3F12.8)') X(LXX),X(LXX+1),X(LXX+2) 
CZ          END DO
CZ        END IF
          CALL VCLR(X(LDELDIND), 1,NPTTPT3)
          CALL VCLR(X(LDELDINDD),1,NPTTPT3)
          CALL DINDPROD(X(LDELABFLD),X(LDELDIND),X(LDELDINDD))
          LDINDTMP  = LDELDIND
          LDINDDTMP = LDELDINDD
        ELSEIF (ISTEP.EQ.1) THEN
          ! AFTER SCZV, LDINDFMO CONTAINS INDUCED DIPOLES 
          ! DUE TO Z-VECTORS
          CALL DAXPY(NPTTPT3,ONE,X(LDELDIND) ,1,X(LDINDFMO), 1)
          CALL DAXPY(NPTTPT3,ONE,X(LDELDINDD),1,X(LDINDDFMO),1)
          LDINDTMP  = LDINDFMO
          LDINDDTMP = LDINDDFMO
        END IF
      END IF
C
      IF (IEFP.EQ.1.AND.LCNTCAL.AND.MOVE.NE.0) THEN
        CALL VCLR(DESFRG,1,NFRG*6)
        IFMO = 1
        IF (IEFC.EQ.1) CALL DCHIND(X(LDINDTMP),X(LDINDDTMP),DESFRG,IFMO)
        IF (IEFD.EQ.1) CALL DDPIND(X(LDINDTMP),X(LDINDDTMP),DESFRG,IFMO)
        IF (IEFQ.EQ.1) THEN
          CALL VALFM(LOADFM)
          LQUA = LOADFM   + 1
          LAST = LQUA + 6*NMTTPT
          NEED = LAST - LOADFM - 1
          CALL GETFM(NEED)
          CALL DQDIND(X(LQUA),X(LDINDTMP),X(LDINDDTMP),DESFRG,IFMO)
          CALL RETFM(NEED)
        END IF
        ! LDINDF2, LDINDDF2 ARE INCUDED DIPOLES DUE TO 
        ! MONOMER DENSITIES + NUCLEI + EFPS
        CALL DININ(X(LDINDF2),X(LDINDDTMP),DESFRG,IFMO)
        CALL DININ(X(LDINDTMP),X(LDINDDF2),DESFRG,IFMO)
C
        NFRG_3 = NFRG*3
        CALL VCLR(DEFT,1,NFRG_3)
        CALL VCLR(TORQ,1,NFRG_3)
        IF(GOPARR) CALL DDI_GSUMF(778,DESFRG,6*NFRG)
        IF (MASWRK) THEN
          CALL DESFRGMV(NFRG,DESFRG,DEFT,TORQ)
          DO I = 1, NBODY - 1
            CALL DAXPY(NFRG_3,ONE,DEFT,1,X(LDEFTF+NFRG_3*I),1)
            CALL DAXPY(NFRG_3,ONE,TORQ,1,X(LTORQF+NFRG_3*I),1)
          END DO
        END IF
        CALL DEFPCLR
        CALL VCLR(DEF,  1,MXFGPT*3)
        CALL VCLR(ATORQ,1,NFRG_3)
      END IF

      IF (IEFP.EQ.1.AND.LCNTCAL) THEN
        CALL DCOPY(NPTTPT3,X(LDINDTMP) ,1,DIND, 1)
        CALL DCOPY(NPTTPT3,X(LDINDDTMP),1,DINDD,1)
      END IF
CZ
CZ    SWITCH TO GROUP
CZ
      IF (ISGDDI) THEN
        CALL GDDI_SCOPE(DDI_GROUP)
        CALL EFPPARL
      END IF
      IF (ISGDDI.AND.NGRFMO(1,ILAY).NE.0)
     *  CALL FMOPRE(ILAY,1,NGRFMO,MANNOD,MASTID)
C
      JCURFG  = 0
      KCURFG  = 0
      ICURLAY = ILAY
      IF (ISGDDI) CALL GDDICOUNT(-1,LGROUP,MYJOB)
      DO 230 IIFG = 1,NFG
        IFG = IIFG
        IF (LOADHF.EQ.1) IFG = LOADM(IIFG)
C
        IF (LAYFRG(IFG).LT.ILAY) GOTO 230
        ICURFG = IFG
        IF (ISGDDI) THEN
          CALL GDDICOUNT(0,LGROUP,MYJOB)
          IF (.NOT.MYJOB) GOTO 230
        END IF
C
        CALL CLOSDA('DELETE')
        CALL OPENDA(0)
        CALL MAKEMOL(IFG,0,0,ILAY,0,0,0,0,0,0,0,.TRUE.)
        L1 = NUM
        L2 = (L1*L1+L1)/2
        L3 =  L1*L1
        IDMREC0I = IFG + IREC0
C
        IF (DOSCZV) THEN
          NQI    = IAND(NQMTFG(IFG),65535)
          NAI    = ISHFT(NUMFRG(IFG),-16)
          NOCI   = NAI
          NVRI   = NQI - NOCI
          NOCVRI = NOCI*NVRI
C
          ! MO COEF. AND ORBITAL ENERGIES
          CALL RAREADS(IDAFMO,IODFMO,DA(L2+1),L3+L1,IDMREC0I,0)
          CALL DMTX2(DA,DA(L2+1),NAI,L1,L1,NAI)
        ELSE
          CALL READMOND(DA,ORBXCH,SCFFRG(IFG).EQ.RMC,NA,NB,L1,
     *                  IODFMO,IDMREC0I)
        END IF
C
CZCZ    IF (MASWRK) WRITE(6,*) 'DENSITY FOR ',IFG
CZCZ    CALL PRTRI(DA,L1)
CZ
CZ      COMPUTATION OF SUM_IJ{DELTA P_IJ} * DE_IFG/DA
CZ
        CALL VALFM(LOADFM)
        LPEX  = LOADFM + 1
        LPEY  = LPEX   + L2
        LPEZ  = LPEY   + L2
        LCSD  = LPEZ   + L2
        LWRK1 = LCSD   + L2
        LWRK2 = LWRK1  + L3
        LCH   = LWRK2  + L1
        LEF3  = LCH    + L4
        LAST  = LEF3   + NTOTPT*3
        NDEFP = LAST - LOADFM -1
        CALL GETFM(NDEFP)

        IF (LCNTCAL) THEN
          CALL VCLR(DE,1,NAT*3)
          CALL VCLR(X(LEF3),1,NTOTPT*3)
          IF (IEFP.EQ.1) THEN
            CALL DCOPY(NPTTPT3,X(LDINDTMP) ,1,DIND, 1)
            CALL DCOPY(NPTTPT3,X(LDINDDTMP),1,DINDD,1)
            ! NOTE THAT DNUCP IS NOT PARALELLIZED AND ATORQ IS IMBEDDED
            CALL DNUCP(DE,X(LEF3))
            CALL DAXPY(NTOTPT*3,ONE,X(LEF3),1,DEF,1)
          END IF
CZ
CZ        GET Z-VECTOR FOR FRAGMENT IFG
CZ
          IF (ISTEP.EQ.1) THEN
            IF (DODISTR) THEN
              CALL ZVECPUTGET(1,0,IFG,NOCVRI,X(LIPTZVEC),CPWK1)
            ELSE
              CALL DCOPY(NOCVRI,ZVEC0(IPTZC(IFG)),1,CPWK1,1)
            END IF 
            CALL SWBASIS(0,L1,NOCI,NVRI,DA(L2+1),CPWK1,NVRI,
     *                   CPWK2,L1,CPWK3)
            CALL SQ2TRI(L1,L1,CPWK2,CPWT1,HALF)
C
          END IF 
CZ        IF (MASWRK) THEN
CZ          WRITE(6,*) 'TESTTEST', NPROC, IFG
CZ          DO II1 = 1, NAT
CZ            WRITE(6,'(3F12.8)') DE(1,II1),DE(2,II1),DE(3,II1)
CZ          END DO
CZ        END IF
          IF (GOPARR) CALL DSCAL(NAT*3,ONE/NPROC,DE,1)
          IF (IEFP.EQ.1) THEN
            CALL EFPDER(DA)
            ! CONTRIBUTIONS DUE TO PURE Z-VECTOR
            IF (MOVE.NE.0) THEN
              IF (GOPARR) CALL DSCAL(NTOTPT*3,ONE/NPROC,DEF,1)
              IF (GOPARR) CALL DSCAL(NFRG_3,ONE/NPROC,ATORQ,1)
              ! DEF
              CALL EFPDEF(DA,X(LCH),L4)
              ! ATORQ
              CALL EFTORP(DA,X(LCH),L4)
              IF (GOPARR) CALL DDI_GSUMF(2418,DEF,NTOTPT*3)
              IF (GOPARR) CALL DDI_GSUMF(2418,ATORQ,NFRG_3)
            END IF
          END IF
          IF (ISTEP.EQ.1) THEN
            CALL DCOPY(NPTTPT3,X(LDINDF2) ,1,DIND, 1)
            CALL DCOPY(NPTTPT3,X(LDINDDF2),1,DINDD,1)
            CALL FRGDER(CPWT1,L2)
          END IF
        END IF
C
        IF (IEFP.EQ.1) THEN
          DUM = 0.0D+00
          CALL VCLR(X(LCSD),1,L2)
          CALL DRCTPOL(1,NPTTPT,L1,L2,.TRUE.,.FALSE.,X(LCSD),DUM,DA,
     *                 HALF,X(LDINDTMP),X(LDINDDTMP),X(LPEX),X(LPEY),
     *                 X(LPEZ))
          IF (GOPARR) CALL DDI_GSUMF(3003,X(LCSD),L2)
CZ
CZ        GET LAGRANGIAN CONTRIBUTION FOR Z-VECTOR CALCULATION
CZ
          IF (ISTEP.EQ.0.AND.DOSCZV) THEN
            CALL CPYTSQ(X(LCSD),X(LWRK1),L1,1)
            ! LPEX IS USED AS A WORK SPACE
            CALL SWBASIS(1,L1,NOCI,NVRI,DA(L2+1),X(LWRK1),L1,X(LZVWRK),
     *                   NVRI,X(LPEX))
            CALL ZVLGMULT(NOCVRI,1,IFG,IPTLG,DODISTR,ZVLAG,X(LZVWRK),
     *                    X(LPEX))
          END IF
CZ
          IF (LCNTCAL) THEN
            CALL CPYTSQ(DA,DA(L2+1),L1,1)
            CALL TFTRI(X(LWRK1),X(LCSD),DA(L2+1),X(LWRK2),L1,L1,L1)
            CALL DSCAL(L2,-HALF,X(LWRK1),1)
            CALL SDER(X(LWRK1),X(LWRK2),L1,L2,.FALSE.)
            IF (GOPARR) CALL DDI_GSUMF(2418,DE,NAT*3)
            IF (MASWRK) CALL FMODEG(1,FMODE,X(LFMOPG),X(LIAGLOB))
          END IF
        END IF

        CALL RETFM(NDEFP)
  230 CONTINUE
      IF (ISGDDI) CALL GDDICOUNT( 1,LGROUP,MYJOB)

      IF (LCNTCAL.AND.MOVE.NE.0) THEN
        CALL EFFT
        IF (MASWRK) THEN
          DO I = 1, NBODY - 1
            CALL DAXPY(NFRG_3,ONE,DEFT,1,X(LDEFTF+NFRG_3*I),1)
            CALL DAXPY(NFRG_3,ONE,TORQ,1,X(LTORQF+NFRG_3*I),1)
          END DO
        END IF
      END IF
C
      RETURN
      END
C*MODULE MLTFMO  *DECK DRCTPOLWRP 
      SUBROUTINE DRCTPOLWRP(L1,L2,POT,PEX,PEY,PEZ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXFRG=1050, MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (HALF=0.5D+00)

      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION POT(*), PEX(*), PEY(*), PEZ(*)
      COMMON /EFPFM2/ FK_CNTP,POLTOT,LABFLDT,LDINDF2,LDINDDF2,LDELABFLD,
     *                LDELDIND,LDELDINDD
      COMMON /FMCOM / X(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      CALL VCLR(POT,1,L2)
      DUM = 0.0D+00
      CALL DRCTPOL(1,NPTTPT,L1,L2,.TRUE.,.FALSE.,POT,DUM,DUM,
     *             HALF,X(LDINDF2),X(LDINDDF2),PEX,PEY,PEZ)
      IF (GOPARR) CALL DDI_GSUMF(921,POT,L2)
CZ    CALL PRTRI(POT,L1)

      ! USE PEX AS A WORK SPACE
      CALL DAREAD(IDAF,IODA,PEX,L2,11,0)
      CALL VADD(PEX,1,POT,1,PEX,1,L2)
      CALL DAWRIT(IDAF,IODA,PEX,L2,11,0)
C     
      CALL DAREAD(IDAF,IODA,PEX,L2,89,0)
      CALL VADD(PEX,1,POT,1,PEX,1,L2)
      CALL DAWRIT(IDAF,IODA,PEX,L2,89,0)

      RETURN
      END
C*MODULE MLTFMO  *DECK DRCTPOL 
      SUBROUTINE DRCTPOL(NPT0,NPT1,L1,L2,LPOT,LFLD,POT,ABFLD,
     *                   DA,CNST,DINDF,DINDDF,PEX,PEY,PEZ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      LOGICAL IANDJ,NORM,DOUBLE,OUT
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL LPOT, LFLD
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000,
     *           MXFRG=1050, MXFGPT=12000, MXIFRQ=12,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
C
      DIMENSION PEX(*),PEY(*),PEZ(*)
      DIMENSION DINDF(3,*), DINDDF(3,*), POT(*), ABFLD(3,*), DA(*)
C
      DIMENSION XIN(128),YIN(128),ZIN(128),
     1          PLX(100),PLY(100),PLZ(100)
      DIMENSION DIJ(100),FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     1                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     2                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA RLN10 /2.30258D+00/
      DATA DBUGME  /8HINT1    /
C
C------- THIS VERSION HAS THE METHOD=1 STUFF OF HONDO CUT OUT.
C
      OUT = NPRINT.EQ.3 .OR. EXETYP.EQ.DBUGME
C
C     ----- INTIALIZE PARALLEL -----
C
      IPCOUNT = ME - 1
C
CZ    NEFP = NPTTPT
      TOL=RLN10*ITOL
      NORM=NORMF.NE.1.OR.NORMP.NE.1
C
C        THE ELECTRIC FIELD INTEGRAL IS TO BE A DISTRIBUTED FILE
C
CZCZ  DSKSAV = DSKWRK
CZCZ  DSKWRK = .TRUE.
CZCZ  NFT25 = 25
CZCZ  CALL SEQREW(NFT25)
C
CZCZ  DO 9200 IC=1,NEFP
      DO 9200 IC=NPT0,NPT1
C
C     ----- GO PARALLEL! -----
C
       IF (GOPARR.AND.NPT0.NE.NPT1) THEN
        IPCOUNT = IPCOUNT + 1
        IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 9199
       END IF
C
      DO 41 I=1,L2
      PEX(I) = ZERO
      PEY(I) = ZERO
      PEZ(I) = ZERO
  41  CONTINUE
C     IF(MASWRK) WRITE(6,*)'FOR POLARIZABLE POINT ',IC
      CX=EFP(1,IC)
      CY=EFP(2,IC)
      CZ=EFP(3,IC)
C
C     ----- ISHELL
C
      DO 9000 II=1,NSHELL
      I=KATOM(II)
      XI=C(1,I)
      YI=C(2,I)
      ZI=C(3,I)
      I1=KSTART(II)
      I2=I1+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 8000 JJ=1,II
C
C     ----- GO PARALLEL! -----
C
C            IF (GOPARR) THEN
C               IPCOUNT = IPCOUNT + 1
C               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 8000
C            END IF
      J=KATOM(JJ)
      XJ=C(1,J)
      YJ=C(2,J)
      ZJ=C(3,J)
      J1=KSTART(JJ)
      J2=J1+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
      NROOTS=(LIT+LJT+1-2)/2 + 1
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ=II.EQ.JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ=0
      MAX=MAXJ
      DO 50 I=MINI,MAXI
      NX=IX(I)
      NY=IY(I)
      NZ=IZ(I)
      IF(IANDJ) MAX=I
      DO 50 J=MINJ,MAX
      IJ=IJ+1
      IJX(IJ)=NX+JX(J)
      IJY(IJ)=NY+JY(J)
      IJZ(IJ)=NZ+JZ(J)
   50 CONTINUE
      DO 60 I=1,IJ
      PLX(I) = ZERO
      PLY(I) = ZERO
  60  PLZ(I) = ZERO
C
C     ----- I PRIMITIVE
C
      JGMAX=J2
      DO 7000 IG=I1,I2
      AI=EX(IG)
      ARRI=AI*RR
      AXI=AI*XI
      AYI=AI*YI
      AZI=AI*ZI
      CSI=CS(IG)
      CPI=CP(IG)
      CDI=CD(IG)
      CFI=CF(IG)
C
C     ----- J PRIMITIVE
C
      IF(IANDJ) JGMAX=IG
      DO 6000 JG=J1,JGMAX
      AJ=EX(JG)
      AA=AI+AJ
      AA1=ONE/AA
      DUM=AJ*ARRI*AA1
      IF(DUM.GT.TOL) GO TO 6000
      FAC=EXP(-DUM)
      CSJ=CS(JG)
      CPJ=CP(JG)
      CDJ=CD(JG)
      CFJ=CF(JG)
      AX=(AXI+AJ*XJ)*AA1
      AY=(AYI+AJ*YJ)*AA1
      AZ=(AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX=MAXJ
      NN=0
      DO 310 I=MINI,MAXI
      GO TO ( 70, 80,180,180, 90,180,180,100,180,180,
     1       110,180,180,120,180,180,180,180,180,130),I
   70 DUM1=CSI*FAC
      GO TO 180
   80 DUM1=CPI*FAC
      GO TO 180
   90 DUM1=CDI*FAC
      GO TO 180
  100 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 180
  110 DUM1=CFI*FAC
      GO TO 180
  120 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 180
  130 IF(NORM) DUM1=DUM1*SQRT3
  180 IF(IANDJ) MAX=I
      DO 310 J=MINJ,MAX
      GO TO (190,200,300,300,210,300,300,220,300,300,
     1       230,300,300,240,300,300,300,300,300,250),J
  190 DUM2=DUM1*CSJ
      IF(.NOT.DOUBLE) GO TO 300
      IF(I.GT.1) GO TO 195
      DUM2=DUM2+DUM2
      GO TO 300
  195 DUM2=DUM2+CSI*CPJ*FAC
      GO TO 300
  200 DUM2=DUM1*CPJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  210 DUM2=DUM1*CDJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  220 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 300
  230 DUM2=DUM1*CFJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  240 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 300
  250 IF(NORM) DUM2=DUM2*SQRT3
  300 NN=NN+1
  310 DIJ(NN)=DUM2
C
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
      DUM=PI212*AA1
      DUM=DUM+DUM
      DO 800 I=1,IJ
  800 FIJ(I)=DIJ(I)*DUM
C
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      MM=0
      DO 830 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)
      WW=WW*UU
      TT=ONE/(AA+UU)
      T=SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 820 I=1,LIT
      IN=IN+4
      NI=I
      DO 820 J=1,LJT
      JN=IN+J
      NJ=J
      CALL STVINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
      CALL POLXYZ
      XIN(JN+64)=XINT
      YIN(JN+64)=YINT
      ZIN(JN+64)=ZINT*WW
  820 CONTINUE
  830 MM=MM+16
      DO 850 I=1,IJ
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUMX=ZERO
      DUMY=ZERO
      DUMZ=ZERO
      MM=0
      DO 840 K=1,NROOTS
      DUMX=DUMX+XIN(NX+MM+64)*YIN(NY+MM   )*ZIN(NZ+MM   )
      DUMY=DUMY+XIN(NX+MM   )*YIN(NY+MM+64)*ZIN(NZ+MM   )
      DUMZ=DUMZ+XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+64)
  840 MM=MM+16
      DUM=FIJ(I)
      PLX(I) = PLX(I) + DUM*DUMX
      PLY(I) = PLY(I) + DUM*DUMY
      PLZ(I) = PLZ(I) + DUM*DUMZ
  850 CONTINUE
C
 6000 CONTINUE
 7000 CONTINUE
C
C
      MAX=MAXJ
      NN=0
      DO 7500 I=MINI,MAXI
      LI=LOCI+I
      IN = (LI*(LI-1))/2
      IF(IANDJ) MAX=I
      DO 7500 J=MINJ,MAX
      LJ=LOCJ+J
      JN=LJ+IN
      NN=NN+1
      PEX(JN)=PLX(NN)
      PEY(JN)=PLY(NN)
      PEZ(JN)=PLZ(NN)
 7500 CONTINUE
C     ----- END PARALLEL
 8000 CONTINUE
 9000 CONTINUE
C
C  COLLECT MATRICES ON DISK FOR TWO ELECTRON OPERATOR CONSTRUCTION
C
C      IF (GOPARR) CALL DDI_GSUMF(924,PEX,NUM2)
C      IF (GOPARR) CALL DDI_GSUMF(925,PEY,NUM2)
C      IF (GOPARR) CALL DDI_GSUMF(926,PEZ,NUM2)
CZ
CZ     CONTRIBUTION TO FOCK
CZ
       IF (LPOT) THEN
         TOTMUX = DINDF(1,IC) + DINDDF(1,IC)
         TOTMUY = DINDF(2,IC) + DINDDF(2,IC)
         TOTMUZ = DINDF(3,IC) + DINDDF(3,IC)
         DO IUM = 1, L2 
           POT(IUM) = POT(IUM) 
     *               -CNST*( TOTMUX*PEX(IUM)
     *                      +TOTMUY*PEY(IUM)
     *                      +TOTMUZ*PEZ(IUM))
         END DO
       END IF
CZ
CZ     AB INITIO FIELD
CZ
       IF (LFLD) THEN
         ABFLD(1,IC) = ABFLD(1,IC) + TRACEP(DA,PEX,L1)
         ABFLD(2,IC) = ABFLD(2,IC) + TRACEP(DA,PEY,L1)
         ABFLD(3,IC) = ABFLD(3,IC) + TRACEP(DA,PEZ,L1)
       END IF
CZCZ
C
C
      IF(OUT) THEN
        IF (MASWRK) WRITE(IW,9500)
        CALL PRTRIL(PEX,L1)
        CALL PRTRIL(PEY,L1)
        CALL PRTRIL(PEZ,L1)
      END IF
C
 9199 CONTINUE
 9200 CONTINUE
C
      IF (NPT0.EQ.NPT1) RETURN
CZCZ  DSKWRK = DSKSAV
CZCZ  IF (GOPARR) CALL DDI_GSUMF(926,POT,L2)
      IF (LFLD.AND.GOPARR) CALL DDI_GSUMF(927,ABFLD,NPTTPT*3)
CZCZ
C
      RETURN
 9500 FORMAT(/1X,'X, Y, AND Z COMPONENTS OF THE INDUCED DIPOLE',
     *       ' ONE ELECTRON INTEGRALS')
      END
C*MODULE MLTFMO  *DECK DINDPROD 
      SUBROUTINE DINDPROD(FLDIN,DINDOUT,DINDDOUT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXFRG=1050, MXDFG=5, MXFGPT=12000,
     *           MXIFRQ=12,MXDPPT=MXFRG*MXDFG*12)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      DIMENSION FLDIN(3,*), DINDOUT(3,*), DINDDOUT(3,*) 
C
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FMCOM / XX(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
CZCZ
CZ
CZ    THIS ROUTINE PRODUCES THE INDUCED DIPOLES (DINDOUT AND DINDDOUT) 
CZ    DUE TO FLDIN 
CZ
CZCZ
C
      NPTTPT3 = NPTTPT*3
C
      CALL DCOPY(NPTTPT3,DINDOUT ,1,DIND, 1)
      CALL DCOPY(NPTTPT3,DINDDOUT,1,DINDD,1)
C
C     ALWAYS CALL TO DIPIT !
C
      CALL VALFM(LOADFM)
      LEFADD   = LOADFM   + 1
      LDIPNEW  = LEFADD   + NPTTPT3 
      LDIPNWD  = LDIPNEW  + NFRG
      LDINDC   = LDIPNWD  + NFRG
      LDINDDC  = LDINDC   + NPTTPT3
      LDIND_W  = LDINDDC  + NPTTPT3
      LDIND_C  = LDIND_W  + 2*NPTTPT3
      LEWLD1   = LDIND_C  + 2*NPTTPT3
      LEWLD2   = LEWLD1   + NPTTPT3
      LAST     = LEWLD2   + NPTTPT3
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
      CALL DIPIT(FLDIN,XX(LEFADD),XX(LDINDC),XX(LDINDDC),
     *           XX(LDIND_W),XX(LDIND_C),
     *           NPTTPT,XX(LDIPNEW),XX(LDIPNWD),
     *           XX(LEWLD1),XX(LEWLD2),NFRG)
      CALL RETFM(NEED)
      CALL DCOPY(NPTTPT3,DIND ,1,DINDOUT, 1)
      CALL DCOPY(NPTTPT3,DINDD,1,DINDDOUT,1)
C
      RETURN
      END
C*MODULE MLTFMO  *DECK EFPCNT2ORBH
      SUBROUTINE EFPCNT2ORBH(L1,L2,CNT)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXFRG=1050, MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (PT5=0.5D+00)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      DIMENSION CNT(*)
C
cz    COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDEFEF,LDEFTF,LTORQF
      COMMON /FMCOM / X(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
CZ
CZ    CONTRIBUTION TO THE ORBITAL HESSIAN IN NEW FMO/EFP
CZ
      CALL VCLR(CNT,1,L2)
      CALL VALFM(LOADFM)
      LPEX = LOADFM + 1
      LPEY = LPEX   + L2
      LPEZ = LPEY   + L2
      LAST = LPEZ   + L2
      NDEFP = LAST - LOADFM -1
      CALL GETFM(NDEFP)
      DUM = 0.0D+00
      CALL DRCTPOL(1,NPTTPT,L1,L2,.TRUE.,.FALSE.,CNT,DUM,DUM,PT5,
     *             X(LDINDFMO),X(LDINDDFMO),X(LPEX),X(LPEY),X(LPEZ))
      CALL RETFM(NDEFP)
      IF (GOPARR) CALL DDI_GSUMF(3020,CNT,L2)
      RETURN
      END
