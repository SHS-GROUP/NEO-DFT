C 19 Oct 12 - MWS - synchronize FRGINF common
C 27 Apr 12 - MWS - TPATNSR: working storage fixed
C 17 APR 12 - DGF - remove redundant DDOT 
C 09 APR 12 - FZ  - TWO-PHOTON ABSORPTION BY NON-LINEAR RESPONSE TDDFT
C*MODULE TDDNLR  *DECK TPACALC
      SUBROUTINE TPACALC(AX,AY,AZ,V,VLO,VRO,TXYZ,
     &EE,INXOV,L1,L2,L3,L7,LX,NDSR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL GOPARR,DSKWRK,MASWRK
      COMMON /FMCOM / X(1)
      PARAMETER (MXATM=2000)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     &                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
C
      DIMENSION AX(L2),AY(L2),AZ(L2)
      DIMENSION V(L1,LX)
      DIMENSION VRO(L7,NDSR)
      DIMENSION VLO(L7,NDSR)
      DIMENSION TXYZ(3,NDSR),EE(NDSR)
      DIMENSION INXOV(2,*)
C
      CC=80*3.1415926D+00**3/137.036D+00**2
     &*0.591177D+00**4*2.418884D+00
C
      CALL GOTFM(NGOTMX)
      CALL VALFM(LOADFM)
      IVA=LOADFM+1
C     IVA:VA(LX,LX)
      IVB=IVA+LX*LX
C     IVB:VB(LX,LX)
      IVC=IVB+LX*LX
C     IVC:VC(LX,LX)
      IXA=IVC+LX*LX
C     IXA:XA(LX,LX)
      IXB=IXA+LX*LX
C     IXB:XB(LX,LX)
      IXC=IXB+LX*LX
C     IXC:XC(LX,LX)
      IYA=IXC+LX*LX
C     IYA:YA(LX,LX)
      IYB=IYA+LX*LX
C     IYB:YB(LX,LX)
      IYC=IYB+LX*LX
C     IYC:YC(LX,LX)
      IGXCMO=IYC+LX*LX
C     IGXCMO:GXCMO(LX,LX)
      IGXC=IGXCMO+LX*LX
C     IGXC:GXC(L1,L1)
      IFXC=IGXC+L1*L1
C     IFXC:FXC(L1,L1)
      IV2B=IFXC+L1*L1
C     IV2B:V2B(L1,L1)
      IXPYAO=IV2B+L1*L1
C     IXPYAO:XPYAO(L1,L1)
      IXPYAO2=IXPYAO+L1*L1
C     IXPYAO2:XPYAO2(L1,L1)
      ISCR=IXPYAO2+L1*L1
C     IASCR:SCR(LX,L1)
      IAXYZ=ISCR+LX*L1
C     IAXYZ:AXYZ(L1,L1)
      IXN=IAXYZ+L1*L1
C     IXN:XN(LX,LX)
      IYN=IXN+LX*LX
C     IYN:YN(LX,LX)
      LAST=IYN+LX*LX
      NEED=LAST-LOADFM-1
      CALL GETFM(NEED)
C
C
      NOCC=NA
C 
      CALL SYMOFF
C 
      IF (MASWRK) WRITE(IW,100)
      DO IROOT=1,NDSR
      D1S=0.D+0
      D2S=0.D+0
      IF (MASWRK) THEN
        WRITE(IW,300) IROOT
      ENDIF
      CALL XYOMS(X(IXA),X(IXB),X(IXC),X(IYA),X(IYB),X(IYC),
     &EE,AX,AY,AZ,V,VLO,VRO,TXYZ,INXOV,IROOT,L1,L7,LX,NOCC,NDSR)
C      SUBROUTINE XYOMS(XA,XB,XC,YA,YB,YC,EE,AX,AY,AZ,
C     &V,VLO,VRO,TXYZ,INXOV,IST,L1,L7,LX,NOCC,NDSR)
C
      TPA=0.D+0
         DO IA=1,3
         DO IB=1,IA
         IF (IA.EQ.1) THEN 
            IF (IB.EQ.1) THEN
               CALL TPATNSR(TPA,IROOT,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &         X(IVA),X(IVB),X(IVC),X(IXN),X(IYN),X(IXA),
     &         X(IXA),X(IYA),X(IYA),X(IXPYAO),X(IXPYAO2),X(IGXCMO),
     &         X(IGXC),X(IFXC),X(IV2B),X(IAXYZ),INXOV,L1,L2,L3,L7,
     &         LX,NDSR)
C      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
C     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
C     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
            ENDIF
            IF (IB.EQ.2) THEN
               CALL TPATNSR(TPA,IROOT,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &         X(IVA),X(IVB),X(IVC),X(IXN),X(IYN),X(IXA),
     &         X(IXB),X(IYA),X(IYB),X(IXPYAO),X(IXPYAO2),X(IGXCMO),
     &         X(IGXC),X(IFXC),X(IV2B),X(IAXYZ),INXOV,L1,L2,L3,L7,
     &         LX,NDSR)
C      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
C     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
C     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
            ENDIF
            IF (IB.EQ.3) THEN
               CALL TPATNSR(TPA,IROOT,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &         X(IVA),X(IVB),X(IVC),X(IXN),X(IYN),X(IXA),
     &         X(IXC),X(IYA),X(IYC),X(IXPYAO),X(IXPYAO2),X(IGXCMO),
     &         X(IGXC),X(IFXC),X(IV2B),X(IAXYZ),INXOV,L1,L2,L3,L7,
     &         LX,NDSR)
C      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
C     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
C     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
            ENDIF
         ENDIF
         IF (IA.EQ.2) THEN
            IF (IB.EQ.1) THEN
               CALL TPATNSR(TPA,IROOT,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &         X(IVA),X(IVB),X(IVC),X(IXN),X(IYN),X(IXB),
     &         X(IXA),X(IYB),X(IYA),X(IXPYAO),X(IXPYAO2),X(IGXCMO),
     &         X(IGXC),X(IFXC),X(IV2B),X(IAXYZ),INXOV,L1,L2,L3,L7,
     &         LX,NDSR)
C      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
C     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
C     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
            ENDIF
            IF (IB.EQ.2) THEN
               CALL TPATNSR(TPA,IROOT,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &         X(IVA),X(IVB),X(IVC),X(IXN),X(IYN),X(IXB),
     &         X(IXB),X(IYB),X(IYB),X(IXPYAO),X(IXPYAO2),X(IGXCMO),
     &         X(IGXC),X(IFXC),X(IV2B),X(IAXYZ),INXOV,L1,L2,L3,L7,
     &         LX,NDSR)
C      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
C     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
C     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
            ENDIF
            IF (IB.EQ.3) THEN
               CALL TPATNSR(TPA,IROOT,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &         X(IVA),X(IVB),X(IVC),X(IXN),X(IYN),X(IXB),
     &         X(IXC),X(IYB),X(IYC),X(IXPYAO),X(IXPYAO2),X(IGXCMO),
     &         X(IGXC),X(IFXC),X(IV2B),X(IAXYZ),INXOV,L1,L2,L3,L7,
     &         LX,NDSR)
C      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
C     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
C     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
            ENDIF
         ENDIF
         IF (IA.EQ.3) THEN
            IF (IB.EQ.1) THEN
               CALL TPATNSR(TPA,IROOT,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &         X(IVA),X(IVB),X(IVC),X(IXN),X(IYN),X(IXC),
     &         X(IXA),X(IYC),X(IYA),X(IXPYAO),X(IXPYAO2),X(IGXCMO),
     &         X(IGXC),X(IFXC),X(IV2B),X(IAXYZ),INXOV,L1,L2,L3,L7,
     &         LX,NDSR)
C      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
C     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
C     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
            ENDIF
            IF (IB.EQ.2) THEN
               CALL TPATNSR(TPA,IROOT,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &         X(IVA),X(IVB),X(IVC),X(IXN),X(IYN),X(IXC),
     &         X(IXB),X(IYC),X(IYB),X(IXPYAO),X(IXPYAO2),X(IGXCMO),
     &         X(IGXC),X(IFXC),X(IV2B),X(IAXYZ),INXOV,L1,L2,L3,L7,
     &         LX,NDSR)
C      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
C     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
C     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
            ENDIF
            IF (IB.EQ.3) THEN
               CALL TPATNSR(TPA,IROOT,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &         X(IVA),X(IVB),X(IVC),X(IXN),X(IYN),X(IXC),
     &         X(IXC),X(IYC),X(IYC),X(IXPYAO),X(IXPYAO2),X(IGXCMO),
     &         X(IGXC),X(IFXC),X(IV2B),X(IAXYZ),INXOV,L1,L2,L3,L7,
     &         LX,NDSR)
C      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
C     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
C     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
            ENDIF
         ENDIF
      DTPA=-DSQRT(2.D+0)*TPA
      IF (IA.EQ.IB) THEN
        D1S=D1S+DTPA*DTPA
        IF (IA.EQ.1) THEN 
           DAA=DTPA
        ENDIF
        IF (IA.EQ.2) THEN 
           DBB=DTPA
        ENDIF
        IF (IA.EQ.3) THEN 
           DCC=DTPA
        ENDIF
      ELSE
        D2S=D2S+DTPA*DTPA
      ENDIF
      IF (MASWRK) THEN
        IF (IA.EQ.1.AND.IB.EQ.1) WRITE(IW,320) 
        WRITE(IW,350) IA,IB,DTPA
      ENDIF
         ENDDO
         ENDDO
      DF=(2.D+0*(DAA*DBB+DAA*DCC+DBB*DCC)+D1S)/30.D+0
      DG=(D1S+2.D+0*D2S)/30.D+0
      PL=2.D+0*DF+4.D+0*DG
      PC=-2.D+0*DF+6.D+0*DG 
      PR=(-DF+3.D+0*DG)/(DF+2.D+0*DG)
      CSL=EE(IROOT)**2*PL*CC
      CSC=EE(IROOT)**2*PC*CC
      IF (MASWRK) THEN
        WRITE(IW,400) DF 
        WRITE(IW,500) DG 
        WRITE(IW,600) PL 
        WRITE(IW,700) PC 
C              DON'T PRINT THESE CROSS-SECTIONS,
C              AS PAUL AND FEDERICO THINK DALTON'S FORMULA IS INCORRECT,
C              AND BECAUSE OF A VERY INCORRECT CONSTANT FOR ANGSTROMS.
        IF(IW.LT.0) THEN
        WRITE(IW,750)  
        WRITE(IW,770) 
        WRITE(IW,780) CSL 
        WRITE(IW,790) CSC 
        END IF
        WRITE(IW,800) PR
      ENDIF
      ENDDO
C 
      CALL SYMON
C
      CALL RETFM(NEED)
C
      RETURN
  100 FORMAT (////1X,"TWO-PHOTON ABSORPTION 
     &(TPA) CALCULATIONS (A.U.):"//)
  300 FORMAT (//16X,"EXCITED STATE # ",I2/)
  320 FORMAT (///3X,"TPA TRANSITION (SYMMETRIC) 
     &TENSOR ELEMENTS (A.U.):"/)
  350 FORMAT (16X,"S(",I1,",",I1,") =",F11.4)
  400 FORMAT (//6X,"DF = 
     &(SUM_{I,J} S(I,I)*S(J,J))/30 =",F14.4," (A.U.)")
  500 FORMAT (6X,"DG = (SUM_{I,J} S(I,J)*S(I,J))/30 =",F14.4," (A.U.)")
  600 FORMAT (//6X,"D (LINEAR POLARIZATION)   
     &=  2*DF+4*DG =",F15.4," (A.U.)")
  700 FORMAT (6X,"D (CIRCULAR POLARIZATION) 
     &= -2*DF+6*DG =",F15.4," (A.U.)")
  750 FORMAT (//6X,"SIGMA - TPA CROSS-SECTION IN GOEPPERT-MAYER (GM) 
     &UNITS",/12X,"= 8*PI**3*ALPHA**2*(HBAR/EC**4)*EE**2*D")
  770 FORMAT (6X,"('ALPHA' - FINE-STRUCTURE CONSTANT;
     & 'EC' - ELECTRON CHARGE;",/6X," 'EE' - EXCITATION ENERGY):")
  780 FORMAT (/6X,"SIGMA (LINEAR POLARIZATION)   =",1P,E15.7,0P," GM")
  790 FORMAT (6X,"SIGMA (CIRCULAR POLARIZATION) =",1P,E15.7,0P," GM")
  800 FORMAT (//6X,"R (POLARIZARION RATIO) = 
     &(-DF+3*DG)/(DF+2*DG) =",F15.4///)
      END
C*MODULE TDDNLR  *DECK XYOM2
      SUBROUTINE XYOM2(XOM,YOM,OMEGA,AXYZ,V,L1,L7,
     &LX,NOCC,KEY)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL PACK2E
      PARAMETER (EPS=1.D-14)
      COMMON /FMCOM / X(1)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      DIMENSION XOM(LX,LX),YOM(LX,LX)
      DIMENSION AXYZ(*)
      DIMENSION V(L1,LX)
C
      L0=NINTMX
      L2=(L1*L1+L1)/2
      L3=L1*L1
C      CALL GOTFM(NGOTMX)
      CALL VALFM(LOADFM)
      I10 = LOADFM + 1
C     I10:B(L7)
      I20=I10+L7
C     I20:VXYZ2(L7)
      I30=I20+L7
C     I30:VXYZ3(L7)
      I40=I30+L7
C     I40:XPYOM(L7)
      I50=I40+L7
C     I50:XMYOM(L7)
      I60=I50+L7
C     I60:Q1(L7)
      I70=I60+L7
C     I70:Q2(L7)
      I80=I70+L7
C     I80:P(L7)
      I90=I80+L7
C     I90:PP(L7)
      I100=I90+L7
C     I100:R(L7)
      I110=I100+L7
C     I110:RR(L7)
      I120=I110+L7
C     I120:Z(L7)
      I130=I120+L7
C     I130:E(L1)
      LAST=I130+L1
      NEED=LAST-I10
      CALL GETFM(NEED)      
C
      CALL DAREAD(IDAF,IODA,X(I130),L1,17,0)
C
      CALL BCONSTR(X(I10),X(I130),AXYZ,V,X(I20),
     *L0,L1,L2,L3,L7,LX,NOCC)
C      SUBROUTINE BCONSTR(B,E,AXYZ,V,VXYZ2,L0,L1,L2,L3,L7,LX,NOCC)
      CALL VCLR(X(I40),1,L7)
      CALL XYCOPY(XOM,YOM,X(I40),L7,LX,NOCC)
C      SUBROUTINE XYCOPY(XMO,YMO,XPYMO,L7,LX,NOCC)
      CALL SPARSEKIT2(X(I10),X(I60),X(I70),X(I40),V,X(I130),
     &OMEGA,L0,L1,L2,L3,L7,LX,NOCC,KEY)
C      SUBROUTINE SPARSEKIT2(B,Q1,Q2,R,V,
C     &E,OMEGA,KEY,L0,L1,L2,L3,L7,LX,NOCC)
      CALL APBX(X(I40),X(I50),V,X(I130),L0,L1,L2,L3,L7,LX,NOCC)
      CALL DAXPY(L7,2.D0,X(I20),1,X(I50),1)
      IF (ABS(OMEGA).GT.EPS) THEN
      CALL DSCAL(L7,-1.D0/OMEGA,X(I50),1)
      ELSE
      CALL VCLR(X(I50),1,L7)
      ENDIF
      CALL VCLR(XOM,1,L7)
      CALL VCLR(YOM,1,L7)
      CALL XPMYTOXY(X(I40),X(I50),XOM,YOM,LX,NOCC)
C
      CALL RETFM(NEED)   
      RETURN
      END
C*MODULE TDDNLR  *DECK BCONSTR
      SUBROUTINE BCONSTR(B,E,AXYZ,V,VXYZ2,
     *L0,L1,L2,L3,L7,LX,NOCC)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /IJPAIR/ IA(8192)
C
      DIMENSION B(L7)
      DIMENSION AXYZ(L2)
      DIMENSION E(L1),V(L1,LX)
      DIMENSION VXYZ2(L7)
      PARAMETER (ZERO=0.D0,TWO=2.D0)
C
      DO I=1,NOCC
        DO J=NOCC+1,LX
          JJ=J-NOCC
          IJ=(JJ-1)*NOCC+I
          DUMN=ZERO
          DO N=1,L1
            DO M=1,L1
              MN=IA(MAX(M,N))+MIN(M,N)
              DUMN=DUMN+V(N,I)*AXYZ(MN)*V(M,J)
            ENDDO
          ENDDO
          VXYZ2(IJ)=DUMN
        ENDDO
      ENDDO
C
      CALL AMBX(VXYZ2,B,V,E,L0,L1,L3,L7,LX,NOCC)
C
      CALL DSCAL(L7,-TWO,B,1)
C
      RETURN
      END
C*MODULE TDDNLR  *DECK APBX
      SUBROUTINE APBX(P,R,V,E,L0,L1,L2,L3,L7,LX,NOCC)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL GOPARR,DSKWRK,MASWRK
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00)
      PARAMETER (MXFRG=1050, MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
      LOGICAL TRIPLET,SG1T,TAMMD,TPA
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG),
     *                NBSFN(MXFRG),NMXMO(MXFRG)
      COMMON /INFOTD/ CNVTOL,TRIPLET,SG1T,JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,NONEQR,
     *                ITDPRP,TAMMD,TPA
      COMMON /FMCOM / X(1)
      COMMON /PCKLAB/ LABSIZ
      COMMON /INFGRD/RHOMIN,ILENG,MAXGRD
C      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      DIMENSION P(*),R(*),V(L1,LX),E(*)
C
C     --- MEMORY ALLOCATION
C
      CALL VALFM(LOADFM)
      J10=LOADFM+1  
C     J10:XYZGRD(MAXGRD*3)
      J20=J10+MAXGRD*3
C     J20:XYZWGT(MAXGRD)
      J30=J20+MAXGRD
C     J30:XYZDCH
      J40=J30+4*L1*ILENG
C     J40:V(L3)ORD(L2)
      J50=J40+L3
C     J50:AOV(L1,L1)
      J60=J50+L1*L1
C     J60:---
      J100=J60
C     J100:COEF(6*ILENG)
      J110=J100+6*ILENG
C     J110:DTRAI_(5*ILENG) 
      J120=J110+5*ILENG
C     J120:DRHOI_(4*MAXGRD)
      J125=J120+4*MAXGRD
C     J125:DTAUI_(MAXGRD)
      J130=J125+MAXGRD
C     J130:EX0(ILENG)
      J140=J130+ILENG
C     J140:EX(18*ILENG)
      J150=J140+18*ILENG
C     J150:EC0(ILENG)
      J160=J150+ILENG
C     J160:EC(35*ILENG)
      J170=J160+35*ILENG
      J180=J170
C     J180:AOMAX(L1)
      J190=J180+L1
C     J190:IAO(L1)
      J200=J190+L1
C     J200:IPRGRD(2*L3)
      J210=J200+2*L3
C     J210:IPRGRD2(2*L3)
      J300=J210+2*L3
C     J300:FGXC(V2)
      K10=J300+L2
C     K10:P_AO(L1,L1)
      K20=K10+L1*L1
C     K20:AP_AO(L2)
      K30=K20+L2
C     K30:P_GEN(LX,LX)
      K40=K30+LX*LX
C     K40:XX(L0)
      K50=K40+L0
C     K50:IX(L0*LABSIZ)
      K70=K50+L0*LABSIZ
C     K70:SCR(NOCC,L1) OR SCRATCH
      LAST=K70+L1*L1
      IF (NFRG.GT.0) THEN
C         IF(SCFTYP.EQ.RHF) THEN
C                THE POLARIZATION TERM DROPS OUT OF THE EQUATION
C                IF THE EXCITATION IS TRIPLET COUPLED,
C                BUT SINGLET COUPLING DOES NEED EFP1 STORAGE.
            IF(TRIPLET) THEN
               CONTINUE
            ELSE
               LXEFI = LAST
               LYEFI = LXEFI + L2
               LZEFI = LYEFI + L2
               LAST  = LZEFI + L2
            END IF
C         ELSE
C                OPEN SHELL HAS NO EFP SOLVENT CAPABILITY,
C                BUT THIS IS ALREADY TRAPPED WHEN THE JOB STARTS.
C                IT WOULD BE REPETITIVE AND REDUNDANT TO TRAP AGAIN.
C            CONTINUE
C         END IF
      ELSE
         LXEFI = LAST
         LYEFI = LAST
         LZEFI = LAST
      END IF
      IDUM=LAST
      NEED=LAST-J10
      CALL GETFM(NEED)
C
      CALL TDDFTSET(RHOSET,X(J10),X(J20),X(J30),V,
     * X(J120),X(J125),X(J180),X(J190),ILENG,NPTGRD,L1)
C     SUBROUTINE TDDFTSET(RHOSET,XYZGRD,XYZWGT,XYZDCH,V,
C    * DRHOI_,DTAUI_,AOMAX,GMO,ILENG,NPTGRD,L1)
      CALL IATOGENTD(P,X(K30),LX,L7,NOCC,1,1)
C     SUBROUTINE IATOGENTD(PV,AV,LX,L7,NOCC,IVEC,MXVEC)
      CALL DGEMM('N','N',L1,LX,LX,ONE,V,L1,X(K30),LX,ZERO
     * ,X(J50),L1)
      CALL DGEMM('N','T',L1,L1,LX,ONE,X(J50),L1,V,L1,ZERO
     * ,X(K10),L1)
C
      CALL VCLR(X(J300),1,L2)
      CALL TDFXCP(X(J300),RHO,X(J10),X(J20),X(J30),X(K10),X(IDUM),
     * X(J120),X(J125),X(J110),X(J100),X(J140),X(J160),X(J130),
     * X(J150),X(J180),X(J200),
     * X(J190),ILENG,NPTGRD,L1,L2,LX,2,2)
C
      IF(GOPARR) THEN
         CALL DDI_GSUMF(8100,X(J300), L2)
         CALL DDI_GSUMF(8101,RHO,1)
      ENDIF
C
      CALL VCLR(X(K20),1,L2)
      CALL TD2E(X(K10),X(K20),X(IDUM),X(K40),X(K50),L1,ONE,0,1,0,1)
      IF (NFRG.GT.0 .AND. .NOT.TRIPLET) THEN
         CALL TDEFP (X(K10),X(K20),X(LXEFI),X(LYEFI),X(LZEFI),
     *        L2,L1,1)
      END IF
C
      CALL DAXPY(L2,TWO,X(J300),1,X(K20),1)
C
      CALL CANTOGEN(X(K20),X(K10),L1)
      CALL MNTOIA(X(K10),R,V,X(K70),L1,LX,L7,NOCC,1)
      CALL ESUM(E,R,P,LX,L7,NOCC,1)
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE TDDNLR  *DECK AMBX
      SUBROUTINE AMBX(P,R,V,E,L0,L1,L3,L7,LX,NOCC)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00)
      PARAMETER (MXFRG=1050, MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
      LOGICAL TRIPLET,SG1T,TAMMD,TPA
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG),
     *                NBSFN(MXFRG),NMXMO(MXFRG)
      COMMON /INFOTD/ CNVTOL,TRIPLET,SG1T,JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,NONEQR,
     *                ITDPRP,TAMMD,TPA
      COMMON /FMCOM / X(1)
      COMMON /PCKLAB/ LABSIZ
      DIMENSION P(*),R(*),V(L1,LX),E(*)
C
      CALL VALFM(LOADFM)
      I10 = LOADFM + 1
C     I10:P2_MO(LX,LX)
      I20=I10+LX*LX
C     I20:SCR(L1,L1)
      I30=I20+L3
C     I30:P2_AO(L1,L1)
      I40=I30+L3
C     I40:XX(L0)
      I50=I40+L0
C     I50:IX(L0*LABSIZ)
      I60=I50+L0*LABSIZ
C     I60:R_AO(L3)
      I70=I60+L3
C     I70:SCR(NOCC,L1) OR SCRATCH
      LAST=I70+L1*L1
      IF (NFRG.GT.0) THEN
C         IF(SCFTYP.EQ.RHF) THEN
C                THE POLARIZATION TERM DROPS OUT OF THE EQUATION
C                IF THE EXCITATION IS TRIPLET COUPLED,
C                BUT SINGLET COUPLING DOES NEED EFP1 STORAGE.
            IF(TRIPLET) THEN
               CONTINUE
            ELSE
               LXEFI = LAST
               LYEFI = LXEFI + L1*(L1+1)/2
               LZEFI = LYEFI + L1*(L1+1)/2
               LAST  = LZEFI + L1*(L1+1)/2
            END IF
C         ELSE
C                OPEN SHELL HAS NO EFP SOLVENT CAPABILITY,
C                BUT THIS IS ALREADY TRAPPED WHEN THE JOB STARTS.
C                IT WOULD BE REPETITIVE AND REDUNDANT TO TRAP AGAIN.
C            CONTINUE
C         END IF
      ELSE
         LXEFI = LAST
         LYEFI = LAST
         LZEFI = LAST
      END IF
      IDUM=LAST
      NEED=LAST-I10
      CALL GETFM(NEED)      
C
      CALL IATOGENTD(P,X(I10),LX,L7,NOCC,1,1)
C     SUBROUTINE IATOGENTD(P,P2,LX,L7,NOCC,IVEC,MXVEC)
C
      CALL DGEMM('N','N',L1,LX,LX,ONE,V,L1,X(I10),LX,ZERO
     * ,X(I20),L1)
      CALL DGEMM('N','T',L1,L1,LX,ONE,X(I20),L1,V,L1,ZERO
     * ,X(I30),L1)
C
      CALL VCLR(X(I60),1,L3)
      CALL TD2E(X(I30),X(IDUM),X(I60),X(I40),X(I50),L1,ONE,1,0,0,1)
C     SUBROUTINE TD2E(P,F,F2,BUF,IBUF,NBF,SCAL,IMF,IPF,NV)
      IF (NFRG.GT.0 .AND. .NOT.TRIPLET) THEN
         CALL TDEFP (X(I30),X(IDUM),X(LXEFI),X(LYEFI),X(LZEFI),
     *        L1*(L1+1)/2,L1,1)
      END IF
C
      CALL MNTOIA2(X(I60),R,V,X(I70),L1,LX,L7,NOCC,1)
      CALL ESUM(E,R,P,LX,L7,NOCC,1)
C
      CALL RETFM(NEED)   
      RETURN
      END
C*MODULE TDDFT  *DECK MNTOIA2
      SUBROUTINE MNTOIA2(PAO,PMO,V,SCR,L1,LX,L7,NOCC,IVEC)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00)
      DIMENSION PAO(L1,*)
      DIMENSION PMO(L7,*)
      DIMENSION V(L1,LX)
      DIMENSION SCR(NOCC,*)
C
C     -- (M,N) TO (I,N)
C
      CALL DGEMM('T','N',NOCC,L1,L1,ONE,V,L1,PAO,L1,ZERO
     * ,SCR,NOCC)
C
C     -- (I,N) TO (IJ)
C
      DO I=1,NOCC
      DO J=NOCC+1,LX
       JJ=J-NOCC
       IJ=(JJ-1)*NOCC+I
       DUMN=ZERO
       DO N=1,L1
       DUMN=DUMN+SCR(I,N)*V(N,J)
       ENDDO
       PMO(IJ,IVEC)=DUMN
      ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE TDDNLR  *DECK XPMYTOXY
      SUBROUTINE XPMYTOXY(XPYOM,XMYOM,XOM,YOM,LX,NOCC)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION XPYOM(*),XMYOM(*),XOM(LX,LX),
     *YOM(LX,LX)
      PARAMETER (TWO=2.D0)
C
      DO I=1,NOCC
        DO J=NOCC+1,LX
          JJ=J-NOCC
          IJ=(JJ-1)*NOCC+I
          XOM(I,J)=(XPYOM(IJ)+XMYOM(IJ))/TWO
          YOM(I,J)=(XPYOM(IJ)-XMYOM(IJ))/TWO
        ENDDO
      ENDDO 
C
      RETURN
      END
*MODULE TDDNLR  *DECK XYCOPY
      SUBROUTINE XYCOPY(XMO,YMO,XPYMO,L7,LX,NOCC)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION XMO(LX,LX),YMO(LX,LX)
      DIMENSION XPYMO(L7)
C
      DO I=1,NOCC
      DO J=NOCC+1,LX
       JJ=J-NOCC
       IJ=(JJ-1)*NOCC+I
       XPYMO(IJ)=XMO(I,J)+YMO(I,J)
      ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE TDDNLR  *DECK V2ACALC
      SUBROUTINE V2ACALC(XPYAO,FXC,XPY,L1,L2,L3,LX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL GOPARR,DSKWRK,MASWRK
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00)
      COMMON /FMCOM / X(1)
      COMMON /INFGRD/ RHOMIN,ILENG,MAXGRD
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      DIMENSION FXC(L1,*),XPY(LX,*),XPYAO(L1,*)
C
C     --- MEMORY ALLOCATION
C
      CALL VALFM(LOADFM)
      J10=LOADFM+1  
C     J10:XYZGRD(MAXGRD*3)
      J20=J10+MAXGRD*3
C     J20:XYZWGT(MAXGRD)
      J30=J20+MAXGRD
C     J30:XYZDCH
      J40=J30+4*L1*ILENG
C     J40:V(L3)ORD(L2)
      J50=J40+L3
C     J50:AOV(L1,L1)
      J60=J50+L1*L1
C     J60:---
      J100=J60
C     J100:COEF(6*ILENG)
      J110=J100+6*ILENG
C     J110:DTRAI_(5*ILENG) 
      J120=J110+5*ILENG
C     J120:DRHOI_(4*MAXGRD)
      J125=J120+4*MAXGRD
C     J125:DTAUI_(MAXGRD)
      J130=J125+MAXGRD
C     J130:EX0(ILENG)
      J140=J130+ILENG
C     J140:EX(18*ILENG)
      J150=J140+18*ILENG
C     J150:EC0(ILENG)
      J160=J150+ILENG
C     J160:EC(35*ILENG)
      J170=J160+35*ILENG
      J180=J170
C     J180:AOMAX(L1)
      J190=J180+L1
C     J190:IAO(L1)
      J195=J190+L1
C     J195:IAO2(L1)
      J200=J195+L1
C     J200:IPRGRD(2*L3)
      J300=J200+2*L3
C     J300:FGXC(V2)
      LAST=J300+L2
      IDUM=LAST
      NEED=LAST-J10
C     -- GETFM
      CALL GETFM(NEED)
C
C     ----- CONSTRUCT DENSITY
C     -- READ MO
      CALL DAREAD(IDAF,IODA,X(J40),L1*LX,15,0)
      CALL TDDFTSET(RHOSET,X(J10),X(J20),X(J30),X(J40),
     * X(J120),X(J125),X(J180),X(J190),ILENG,NPTGRD,L1)
C     SUBROUTINE TDDFTSET(RHOSET,XYZGRD,XYZWGT,XYZDCH,V,
C    * DRHOI_,DTAUI_,AOMAX,GMO,ILENG,NPTGRD,L1)
C
      CALL VCLR(XPYAO,1,L1*L1)
      CALL DGEMM('N','N',L1,LX,LX,ONE,X(J40),L1,XPY,LX,ZERO
     * ,X(J50),L1)
      CALL DGEMM('N','T',L1,L1,LX,ONE,X(J50),L1,X(J40),L1,ZERO
     * ,XPYAO,L1)
C
C     ---- CALCULATE FXC(L2)
C
      CALL VCLR(X(J300),1,L2)
      CALL TDFXCP(X(J300),RHO,X(J10),X(J20),X(J30),XPYAO,
     * X(IDUM),
     * X(J120),X(J125),X(J110),X(J100),X(J140),X(J160),X(J130),
     * X(J150),X(J180),
     * X(J200),X(J190),ILENG,NPTGRD,L1,L2,LX,2,2)
C
      IF(GOPARR) THEN
         CALL DDI_GSUMF(8102,X(J300), L2)
         CALL DDI_GSUMF(8103,RHO,1)
      ENDIF
C
      CALL CANTOGEN(X(J300),FXC,L1)
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE TDDNLR  *DECK V2BCALC
      SUBROUTINE V2BCALC(V2B,XMO,YMO,L1,L2,L3,LX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (ZERO=0.0D+00,HALF=0.5D+00,ONE=1.0D+00)
      PARAMETER (MXFRG=1050, MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
      LOGICAL PACK2E
      LOGICAL TRIPLET,SG1T,TAMMD,TPA
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG),
     *                NBSFN(MXFRG),NMXMO(MXFRG)
      COMMON /INFOTD/ CNVTOL,TRIPLET,SG1T,JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,NONEQR,
     *                ITDPRP,TAMMD,TPA
      COMMON /FMCOM / X(1)
      COMMON /PCKLAB/ LABSIZ
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      DIMENSION V2B(LX,*),XMO(LX,*),YMO(LX,*)
C
      L0=NINTMX
      CALL VALFM(LOADFM)
      CALL GOTFM(NGOTMX)
      I10 = LOADFM + 1
C     I10:XT(L3)
      I15=I10+L3
C     I15:XAO(L3)
      I20=I15+L3
C     I20:YT(L3)
      I25=I20+L3
C     I25:YAO(L3)
      I30=I25+L3
C     I30:V(L3)
      I40=I30+L3
C     I40:XX(L0)
      I50=I40+L0
C     I50:IX(L0*LABSIZ)
      I60=I50+L0*LABSIZ
C     I60:V2B(L1*L1)
      I65=I60+L3
C     I65:05V2B(L2)
      I70=I65+L2
C     I70:V2BM(L3)
      I80=I70+L3
C     I80:APBX:(L2)
      I85=I80+L2
C     I85:APBX2:(L3)
      I90=I85+L3
C     I90:AMBX:(L3)
      I100=I90+L3
C     I100:APBY:(L2)
      I105=I100+L2
C     I85:APBY2:(L3)
      I110=I105+L3
C     I110:AMBY:(L3)
      LAST=I110+L3
      IF (NFRG.GT.0) THEN
C         IF(SCFTYP.EQ.RHF) THEN
C                THE POLARIZATION TERM DROPS OUT OF THE EQUATION
C                IF THE EXCITATION IS TRIPLET COUPLED,
C                BUT SINGLET COUPLING DOES NEED EFP1 STORAGE.
            IF(TRIPLET) THEN
               CONTINUE
            ELSE
               LXEFI = LAST
               LYEFI = LXEFI + L2
               LZEFI = LYEFI + L2
               LAST  = LZEFI + L2
            END IF
C         ELSE
C            CONTINUE
C         END IF
      ELSE
         LXEFI = LAST
         LYEFI = LAST
         LZEFI = LAST
      END IF
      NEED=LAST-I10
      CALL GETFM(NEED)      
C
      CALL DAREAD(IDAF,IODA,X(I30),L1*LX,15,0)
C
      CALL DGEMM('N','N',L1,LX,LX,ONE,X(I30),L1,YMO,LX,ZERO
     * ,X(I10),L1)
      CALL DGEMM('N','T',L1,L1,LX,ONE,X(I10),L1,X(I30),L1,ZERO
     * ,X(I15),L1)
C
      CALL DGEMM('N','N',L1,LX,LX,ONE,X(I30),L1,XMO,LX,ZERO
     * ,X(I20),L1)
      CALL DGEMM('N','T',L1,L1,LX,ONE,X(I20),L1,X(I30),L1,ZERO
     * ,X(I25),L1)
C
      CALL VCLR(X(I80),1,L2)
      CALL VCLR(X(I90),1,L3)
      CALL TD2E(X(I15),X(I80),X(I90),X(I40),X(I50),L1,ONE,1,1,0,1)
C     SUBROUTINE TD2E(PA,F,FM2,BUF,IBUF,NBF,SCAL,IMF,IPF,NV)
C
      IF (NFRG.GT.0 .AND. .NOT.TRIPLET) THEN
         CALL TDEFP (X(I15),X(I80),X(LXEFI),X(LYEFI),X(LZEFI),
     *        L2,L1,1)
      END IF
      CALL VCLR(X(I100),1,L2)
      CALL VCLR(X(I110),1,L3)
      CALL TD2E(X(I25),X(I100),X(I110),X(I40),X(I50),L1,ONE,1,1,0,1)
C     SUBROUTINE TD2E(PA,F,FM2,BUF,IBUF,NBF,SCAL,IMF,IPF,NV)
C     
      IF (NFRG.GT.0 .AND. .NOT.TRIPLET) THEN
         CALL TDEFP (X(I25),X(I100),X(LXEFI),X(LYEFI),X(LZEFI),
     *        L2,L1,1)
      END IF
C
      CALL CANTOGEN(X(I80),X(I85),L1)
      CALL DAXPY(L3,ONE,X(I85),1,X(I90),1)
C
      CALL CANTOGEN(X(I100),X(I105),L1)
      CALL DAXPY(L3,-ONE,X(I110),1,X(I105),1)
C
      CALL DAXPY(L3,ONE,X(I105),1,X(I90),1)
      CALL DAXPY(L3,HALF,X(I90),1,V2B,1)
C
      CALL RETFM(NEED)   
      RETURN
      END
C*MODULE TDDNLR  *DECK MXYZ2
      SUBROUTINE MXYZ2(KEY,VXYZ,AXYZ,AX,AY,
     &AZ,V,FXC,V2B,L1,L2,LX)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      COMMON /IJPAIR/ IA(8192)
C
      PARAMETER (ZERO=0.0D+00)
      DIMENSION AX(L2),AY(L2),AZ(L2)
      DIMENSION V(L1,LX)
      DIMENSION AXYZ(L1,L1),VXYZ(LX,LX)
      DIMENSION FXC(L1,L1),V2B(L1,L1)
C     
      DO M=1,L1
        DO N=1,L1
          MN=IA(MAX(M,N))+MIN(M,N)
          IF(KEY.EQ.1) AXYZ(M,N)=AX(MN)
          IF(KEY.EQ.2) AXYZ(M,N)=AY(MN)
          IF(KEY.EQ.3) AXYZ(M,N)=AZ(MN)
          AXYZ(M,N)=AXYZ(M,N)+FXC(M,N)+V2B(M,N)
        ENDDO
      ENDDO
C
      DO I=1,LX
        DO J=1,LX
          DUMN=ZERO
          DO N=1,L1
            DO M=1,L1
              DUMN=DUMN+V(N,I)*AXYZ(N,M)*V(M,J)
            ENDDO
          ENDDO
          VXYZ(I,J)=DUMN
        ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE TDDNLR  *DECK V3CALC
      SUBROUTINE V3CALC(GXC,XPYAO,XPY,XPYAO2,XPY2,L1,L2,L3,LX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL GOPARR,DSKWRK,MASWRK
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00)
      COMMON /FMCOM / X(1)
      COMMON /INFGRD/RHOMIN,ILENG,MAXGRD
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      DIMENSION GXC(L1,*),XPY(LX,*),XPYAO(L1,*)
      DIMENSION XPY2(LX,*),XPYAO2(L1,*)
C
C     --- MEMORY ALLOCATION
C
      CALL VALFM(LOADFM)
      J10=LOADFM+1  
C     J10:XYZGRD(MAXGRD*3)
      J20=J10+MAXGRD*3
C     J20:XYZWGT(MAXGRD)
      J30=J20+MAXGRD
C     J30:XYZDCH
      J40=J30+4*L1*ILENG
C     J40:V(L3)ORD(L2)
      J50=J40+L3
C     J50:AOV(L1,L1)
      J60=J50+L1*L1
C     J60:---
      J100=J60
C     J100:COEF(6*ILENG)
      J110=J100+6*ILENG
C     J110:DTRAI_(5*ILENG) 
      J115=J110+5*ILENG
C     J110:DTRAI2_(4*ILENG) 
      J120=J115+4*ILENG
C     J120:DRHOI_(4*MAXGRD)
      J125=J120+4*MAXGRD
C     J125:DTAUI_(MAXGRD)
      J130=J125+MAXGRD
C     J130:EX0(ILENG)
      J140=J130+ILENG
C     J140:EX(38*ILENG)
      J150=J140+38*ILENG
C     J150:EC0(ILENG)
      J160=J150+ILENG
C     J160:EC(119*ILENG)
      J170=J160+119*ILENG
      J180=J170
C     J180:AOMAX(L1)
      J190=J180+L1
C     J190:IAO(L1)
      J195=J190+L1
C     J195:IAO2(L1)
      J200=J195+L1
C     J200:IPRGRD(2*L3)
      J210=J200+2*L3
C     J210:IPRGRD2(2*L3)
      J300=J210+2*L3
C     J300:FGXC(V2)
      LAST=J300+L2
      IDUM=LAST
      NEED=LAST-J10
C     -- GETFM
      CALL GETFM(NEED)
C
C     ----- CONSTRUCT DENSITY
C     -- READ MO
      CALL DAREAD(IDAF,IODA,X(J40),L1*LX,15,0)
      CALL TDDFTSET(RHOSET,X(J10),X(J20),X(J30),X(J40),
     * X(J120),X(J125),X(J180),X(J190),ILENG,NPTGRD,L1)
C     SUBROUTINE TDDFTSET(RHOSET,XYZGRD,XYZWGT,XYZDCH,V,
C    * DRHOI_,DTAUI_,AOMAX,GMO,ILENG,NPTGRD,L1)
C
      CALL DGEMM('N','N',L1,LX,LX,ONE,X(J40),L1,XPY,LX,ZERO
     * ,X(J50),L1)
      CALL DGEMM('N','T',L1,L1,LX,ONE,X(J50),L1,X(J40),L1,ZERO
     * ,XPYAO,L1)
      CALL DGEMM('N','N',L1,LX,LX,ONE,X(J40),L1,XPY2,LX,ZERO
     * ,X(J50),L1)
      CALL DGEMM('N','T',L1,L1,LX,ONE,X(J50),L1,X(J40),L1,ZERO
     * ,XPYAO2,L1)
C
C     ---- CALCULATE GXC(L2)
C     
      CALL VCLR(X(J300),1,L2)
      CALL TDFXCP2(X(J300),RHO,X(J10),X(J20),X(J30),XPYAO,XPYAO2,
     * X(IDUM),
     * X(J120),X(J125),X(J110),X(J115),X(J100),X(J140),X(J160),X(J130),
     * X(J150),X(J180),X(J200),
     * X(J210),X(J190),X(J195),ILENG,NPTGRD,L1,L2,LX,3,2)
C      SUBROUTINE TDFXCP2(F,RHO,XYZGRD,XYZWGT,XYZDCH,VA,VA2,VDUM,
C     *                  DRHOI_,DTAUI_,DTRAI_,DTRAI2_,COEF,EX,EC,
C     *                  EX0,EC0,AOMAX,VALGA,VALGA2,IAO,IAO2,ILENG,
C     *                  NPTGRD,L1,L2,LX,NDER,IMETHOD)
C     
      IF(GOPARR) THEN
         CALL DDI_GSUMF(8104,X(J300), L2)
         CALL DDI_GSUMF(8105,RHO,1)
      ENDIF
C     
      CALL CANTOGEN(X(J300),GXC,L1)
C
      CALL RETFM(NEED)
      RETURN
      END
*MODULE TDDNLR  *DECK XYOMS
      SUBROUTINE XYOMS(XA,XB,XC,YA,YB,YC,EE,AX,AY,AZ,
     &V,VLO,VRO,TXYZ,INXOV,IST,L1,L7,LX,NOCC,NDSR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TWO=2.0D+00)
      DIMENSION XA(LX,LX),XB(LX,LX),XC(LX,LX)
      DIMENSION YA(LX,LX),YB(LX,LX),YC(LX,LX)
      DIMENSION AX(*),AY(*),AZ(*)
      DIMENSION V(L1,LX),EE(*)
      DIMENSION VLO(L7,NDSR)
      DIMENSION VRO(L7,NDSR)
      DIMENSION TXYZ(3,NDSR)
      DIMENSION INXOV(2,*)
C
      OMEGA=-EE(IST)/TWO
      CALL XYOM(XA,YA,1,OMEGA,VLO,VRO,TXYZ,EE,INXOV,LX,L7,NDSR)
      CALL XYOM2(YA,XA,OMEGA,AX,V,L1,L7,LX,NOCC,1)
      CALL XYOM(XB,YB,2,OMEGA,VLO,VRO,TXYZ,EE,INXOV,LX,L7,NDSR)
      CALL XYOM2(YB,XB,OMEGA,AY,V,L1,L7,LX,NOCC,2)
      CALL XYOM(XC,YC,3,OMEGA,VLO,VRO,TXYZ,EE,INXOV,LX,L7,NDSR)
      CALL XYOM2(YC,XC,OMEGA,AZ,V,L1,L7,LX,NOCC,3)
C
      RETURN
      END
C*MODULE TDDNLR  *DECK TPATNSR
      SUBROUTINE TPATNSR(TPA,IST,IA,IB,AX,AY,AZ,V,VLO,VRO,
     &VA,VB,VC,XN,YN,XA,XB,YA,YB,XPYAO,XPYAO2,GXCMO,GXC,
     &FXC,V2B,AXYZ,INXOV,L1,L2,L3,L7,LX,NDSR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TWO=2.0D+00)
      PARAMETER (MXATM=2000)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     &                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      DIMENSION AX(L2),AY(L2),AZ(L2)
      DIMENSION V(L1,LX)
      DIMENSION VLO(L7,NDSR)
      DIMENSION VRO(L7,NDSR)
      DIMENSION VA(LX,LX),VB(LX,LX),VC(LX,LX)
      DIMENSION XN(LX,LX),YN(LX,LX)
      DIMENSION XA(LX,LX),XB(LX,LX)
      DIMENSION YA(LX,LX),YB(LX,LX)
      DIMENSION XPYAO(L1,L1),XPYAO2(L1,L1),
     &GXCMO(LX,LX),GXC(L1,L1),FXC(L1,L1),V2B(L1,L1)
      DIMENSION AXYZ(L1,L1)
      DIMENSION INXOV(2,*)
C
      NOCC=NA
      NVIR=LX-NOCC
C
      IA2=IA
      IB2=IB
C
C        V2B=XA+YA temporary storage
      call vadd(xa,1,ya,1,v2b,1,l1*l1)
      CALL VCLR(FXC,1,L1*L1)
      CALL V2ACALC(XPYAO,FXC,V2B,L1,L2,L3,LX)
C      SUBROUTINE V2ACALC(XPYAO,FXC,XPY,L1,L2,L3,LX)
      CALL VCLR(V2B,1,L1*L1)
      CALL V2BCALC(V2B,XA,YA,L1,L2,L3,LX)
C      SUBROUTINE V2BCALC(V2B,XMO,YMO,L1,L2,L3,LX)
      CALL MXYZ2(IA2,VA,AXYZ,AX,AY,AZ,V,FXC,V2B,L1,L2,LX)
C      SUBROUTINE MXYZ2(KEY,VXYZ,SCR,AXYZ,AX,AY,AZ,V,FXC,V2B,L1,L2,LX)
C
C        V2B=XB+YB temporary storage
      call vadd(xb,1,yb,1,v2b,1,l1*l1)
      CALL VCLR(FXC,1,L1*L1)
      CALL V2ACALC(XPYAO,FXC,V2B,L1,L2,L3,LX)
C      SUBROUTINE V2ACALC(XPYAO,FXC,XPY,L1,L2,L3,LX)
      CALL VCLR(V2B,1,L1*L1)
      CALL V2BCALC(V2B,XB,YB,L1,L2,L3,LX)
C      SUBROUTINE V2BCALC(V2B,XMO,YMO,L1,L2,L3,LX)
      CALL MXYZ2(IB2,VB,AXYZ,AX,AY,AZ,V,FXC,V2B,L1,L2,LX)
C      SUBROUTINE MXYZ2(KEY,VXYZ,SCR,AXYZ,AX,AY,AZ,V,FXC,V2B,L1,L2,LX)
C
      CALL VCLR(XN,1,LX*LX)
      CALL VCLR(YN,1,LX*LX)
C
      DO IPR=1,L7
        I=INXOV(1,IPR)
        J=INXOV(2,IPR)
        XN(I,J)=(VRO(IPR,IST)+VLO(IPR,IST))/TWO
        YN(I,J)=(VRO(IPR,IST)-VLO(IPR,IST))/TWO
      ENDDO
C
C        V2B=XN+YN temporary storage
      call vadd(xn,1,yn,1,v2b,1,l1*l1)
      CALL VCLR(FXC,1,L1*L1)
      CALL V2ACALC(XPYAO,FXC,V2B,L1,L2,L3,LX)
C      SUBROUTINE V2ACALC(XPYAO,FXC,XPY,L1,L2,L3,LX)
      CALL VCLR(V2B,1,L1*L1)
      CALL V2BCALC(V2B,XN,YN,L1,L2,L3,LX)
C      SUBROUTINE V2BCALC(V2B,XPYAO,L1,L2)
      CALL MXYZ3(VC,AXYZ,V,FXC,V2B,L1,LX)
C      SUBROUTINE MXYZ3(VXYZ,SCR,AXYZ,V,FXC,V2B,L1,L2,LX)
      CALL TPACOMB(TPA,XN,YN,
     &XA,XB,YA,YB,VA,VB,VC,LX)
C      SUBROUTINE TPACOMB(TPA,XN,YN,
C     &XA,XB,YA,YB,VA,VB,VC,LX)
      CALL VCLR(XPYAO,1,L1*L1)
      CALL VCLR(XPYAO2,1,L1*L1)
C        V2B=XA+YA, FXC = XB+YB temporary storage
      call vadd(xa,1,ya,1,v2b,1,l1*l1)
      call vadd(xb,1,yb,1,fxc,1,l1*l1)
      CALL V3CALC(GXC,XPYAO,V2B,XPYAO2,FXC,L1,L2,L3,LX)
C      SUBROUTINE V3CALC(GXC,XPYAO,XPY,XPYAO2,XPY2,L1,L2,L3,LX)
C        V2B=XN+YN temporary storage
      call vadd(xn,1,yn,1,v2b,1,l1*l1)
      CALL TPAV3(TPA,V2B,V,GXCMO,GXC,NOCC,NVIR,L1,LX)
C      SUBROUTINE TPAV3(TPA,XPY,V,GXCMO,GXC,NOCC,NVIR,L1,LX)
      RETURN
      END
C*MODULE TDDNLR  *DECK MXYZ3
      SUBROUTINE MXYZ3(VXYZ,AXYZ,V,FXC,V2B,L1,LX)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00)
      DIMENSION V(L1,LX)
      DIMENSION AXYZ(L1,L1),VXYZ(LX,LX)
      DIMENSION FXC(L1,L1),V2B(L1,L1)
C     
      CALL VCLR(AXYZ,1,L1*L1)
C
      DO M=1,L1
        DO N=1,L1
          AXYZ(M,N)=FXC(M,N)+V2B(M,N)
        ENDDO
      ENDDO
C
      DO I=1,LX
        DO J=1,LX
          DUMN=ZERO
          DO N=1,L1
            DO M=1,L1
              DUMN=DUMN+V(N,I)*AXYZ(N,M)*V(M,J)
            ENDDO
          ENDDO
          VXYZ(I,J)=DUMN
        ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE TDDNLR  *DECK TPACOMB
      SUBROUTINE TPACOMB(TPA,XN,YN,
     &XA,XB,YA,YB,VA,VB,VC,LX)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00)
      PARAMETER (MXATM=2000)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     &                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      DIMENSION XN(LX,LX),YN(LX,LX)
      DIMENSION XA(LX,LX),XB(LX,LX)
      DIMENSION YA(LX,LX),YB(LX,LX)
      DIMENSION VA(LX,LX),VB(LX,LX),VC(LX,LX)
C
      NOCC=NA
      NVIR=LX-NOCC
C
      TPA=ZERO
      DO I=1,NOCC
        DO K=NOCC+1,NOCC+NVIR
          DO L=NOCC+1,NOCC+NVIR
            TPA=TPA-YA(I,K)*VB(K,L)*XN(I,L)
            TPA=TPA-YA(I,K)*VC(K,L)*XB(I,L)
            TPA=TPA-YB(I,K)*VC(K,L)*XA(I,L)
            TPA=TPA-YB(I,K)*VA(K,L)*XN(I,L)
            TPA=TPA-YN(I,K)*VA(K,L)*XB(I,L)
            TPA=TPA-YN(I,K)*VB(K,L)*XA(I,L)
          ENDDO
        ENDDO
      ENDDO
C
      DO K=NOCC+1,NOCC+NVIR
        DO I=1,NOCC
          DO J=1,NOCC
            TPA=TPA+XA(I,K)*VB(I,J)*YN(J,K)
            TPA=TPA+XA(I,K)*VC(I,J)*YB(J,K)
            TPA=TPA+XB(I,K)*VC(I,J)*YA(J,K)
            TPA=TPA+XB(I,K)*VA(I,J)*YN(J,K)
            TPA=TPA+XN(I,K)*VA(I,J)*YB(J,K)
            TPA=TPA+XN(I,K)*VB(I,J)*YA(J,K)
          ENDDO
        ENDDO
      ENDDO
C
      RETURN
      END
C*MODULE TDDNLR  *DECK TPAV3
      SUBROUTINE TPAV3(TPA,XPY,V,GXCMO,GXC,NOCC,NVIR,L1,LX)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (ZERO=0.0D+00)
      DIMENSION GXC(L1,L1),XPY(LX,LX)
      DIMENSION GXCMO(LX,LX)
      DIMENSION V(L1,LX)
C
      DO I=1,LX
        DO J=1,LX
          DUMN=ZERO
          DO N=1,L1
            DO M=1,L1
              DUMN=DUMN+V(N,I)*GXC(N,M)*V(M,J)
            ENDDO
          ENDDO
          GXCMO(I,J)=DUMN
        ENDDO
      ENDDO
C
      DUMM=ZERO
      DO I=1,NOCC
        DO J=NOCC+1,NOCC+NVIR
          DUMM=DUMM+XPY(I,J)*GXCMO(I,J)
        ENDDO
      ENDDO
C
      TPA=TPA-DUMM
C
      RETURN
      END
C*MODULE TDDNLR  *DECK SPARSEKIT2
      SUBROUTINE SPARSEKIT2(B,Q1,Q2,R,V,
     &E,OMEGA,L0,L1,L2,L3,L7,LX,NOCC,KEY)
C 
C TAKEN FROM THE SPARSEKIT2 LIBRARY OF YOUSEF SAAD	
C WITH SMALL MODIFICATIONS TOGETHER WITH RUNRC, TFQMR, 
C BISINIT, TIDYCG, DISTDOT, DDOT, BRKDN2
C 
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION IPAR(16),FPAR(16)
      DIMENSION B(*),Q1(*),Q2(*),R(*),E(*)
C	
      COMMON /FMCOM/ X(1)
      CALL VALFM(LOADFM)
      I10=LOADFM+1
C     I10:WK(11*L7)
      LAST=I10+11*L7
      NEED=LAST-LOADFM-1
      CALL GETFM(NEED)
C
      IPAR(1)=0
      IPAR(2)=1
      IPAR(3)=1
      IPAR(4)=11*L7
      IPAR(5)=10
      IPAR(6)=-500
      FPAR(1)=1.0D-5
      FPAR(2)=1.0D-5
C
      CALL RUNRC(L7,B,Q1,Q2,R,IPAR,FPAR,
     &X(I10),V,E,OMEGA,KEY,L0,L1,L2,L3,L7,LX,NOCC)
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE TDDNLR  *DECK RUNRC
      SUBROUTINE RUNRC(N,RHS,Q1,Q2,SOL,IPAR,
     &FPAR,WK,V,E,OMEGA,KEY,L0,L1,L2,L3,L7,LX,NOCC)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL GOPARR,DSKWRK,MASWRK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      DIMENSION IPAR(*),FPAR(*),RHS(*),SOL(*),WK(*)
      DIMENSION Q1(*),Q2(*),E(*)
C
      ITS = 0
C
 10   CALL TFQMR(N,RHS,SOL,IPAR,FPAR,WK)
C
      IF (IPAR(7).NE.ITS) THEN
         ITS = IPAR(7)
      ENDIF
C
      IF (IPAR(1).EQ.1) THEN
         CALL ATIMES(WK(IPAR(8)),Q1,Q2,WK(IPAR(9)),V,E,
     &OMEGA,L0,L1,L2,L3,L7,LX,NOCC)
C      SUBROUTINE ATIMES(P,Q1,Q2,R,V,
C     *E,OMEGA,L0,L1,L2,L3,L7,LX,NOCC)
         GOTO 10
      ELSE IF (IPAR(1).EQ.2) THEN
C         CALL ATMUX(N, WK(IPAR(8)), WK(IPAR(9)), A)
         GOTO 10
      ELSE IF (IPAR(1).EQ.3 .OR. IPAR(1).EQ.5) THEN
         CALL ASOLVE(WK(IPAR(8)),WK(IPAR(9)),
     &E,OMEGA,LX,NOCC)
C      SUBROUTINE ASOLVE(B,R,E,OMEGA,LX,NOCC)
         GOTO 10
      ELSE IF (IPAR(1).EQ.4 .OR. IPAR(1).EQ.6) THEN
C         CALL LUTSOL(N,WK(IPAR(8)),WK(IPAR(9)),AU)
         GOTO 10
      ELSE IF (IPAR(1).LE.0) THEN
         IF (IPAR(1).EQ.0) THEN
         ELSE IF (IPAR(1).EQ.-1) THEN
            IF (MASWRK) WRITE(IW,*) "ITERATIVE SOLVER 
     &HAS ITERATED TOO MANY TIMES."
         ELSE IF (IPAR(1).EQ.-2) THEN
            IF (MASWRK) WRITE(IW,*)  "ITERATIVE SOLVER 
     &WAS NOT GIVEN ENOUGH WORK SPACE."
            IF (MASWRK) WRITE(IW,*)  "THE WORK SPACE 
     &SHOULD AT LEAST HAVE ", IPAR(4),
     &           " ELEMENTS."
         ELSE IF (IPAR(1).EQ.-3) THEN
            IF(MASWRK) WRITE(IW,*)  "ITERATIVE SOLVER 
     &IS FACING A BREAK-DOWN."
         ELSE
            IF (MASWRK) WRITE(IW,*)  "ITERATIVE SOLVER 
     &TERMINATED. CODE =", IPAR(1)
         ENDIF
      ENDIF
      IF (MASWRK) THEN
        WRITE (IW, 100) KEY,IPAR(7), REAL(FPAR(6))
            CALL FLSHBF(IW)
      ENDIF
C
      RETURN
  100 FORMAT (/4X,"COMPONENT",1X,I1,1X,"HAS CONVERGED:",I3,2X,1P,E10.4)
      END
C*MODULE TDDNLR  *DECK TFQMR
      SUBROUTINE TFQMR(N, RHS, SOL, IPAR, FPAR, W)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C-----------------------------------------------------------------------
C     TFQMR --- TRANSPOSE-FREE QUASI-MINIMUM RESIDUAL METHOD
C     THIS IS DEVELOPED FROM BCG BASED ON THE PRINCIPLE OF QUASI-MINIMUM
C     RESIDUAL, AND IT IS TRANSPOSE-FREE.
C-----------------------------------------------------------------------
C     EXTERNAL FUNCTIONS
C
      LOGICAL BRKDN2
C
      PARAMETER(ONE=1.0D0,ZERO=0.0D0)
C
C     LOCAL VARIABLES
C
      LOGICAL LP, RP
      DIMENSION IPAR(*),RHS(*),SOL(*),FPAR(*),W(N,*)
      SAVE
C
C     STATUS OF THE CALL (WHERE TO GO)
C
      IF (IPAR(1).LE.0) IPAR(10) = 0
      GOTO (10,20,40,50,60,70,80,90,100,110), IPAR(10)
C
C     INITIALIZATIONS
C
      CALL BISINIT(IPAR,FPAR,11*N,2,LP,RP,W)
      IF (IPAR(1).LT.0) RETURN
      IPAR(1) = 1
      IPAR(8) = 1
      IPAR(9) = 1 + 6*N
      DO I = 1, N
         W(I,1) = SOL(I)
      ENDDO
      IPAR(10) = 1
      RETURN
 10   IPAR(7) = IPAR(7) + 1
      IPAR(13) = IPAR(13) + 1
      DO I = 1, N
         W(I,1) = RHS(I) - W(I,7)
         W(I,9) = ZERO
      ENDDO
      FPAR(11) = FPAR(11) + N
C
      IF (LP) THEN
         IPAR(1) = 3
         IPAR(9) = N+1
         IPAR(10) = 2
         RETURN
      ENDIF
 20   CONTINUE
      IF (LP) THEN
         DO I = 1, N
            W(I,1) = W(I,2)
            W(I,3) = W(I,2)
         ENDDO
      ELSE
         DO I = 1, N
            W(I,2) = W(I,1)
            W(I,3) = W(I,1)
         ENDDO
      ENDIF
C
      FPAR(5) = SQRT(DISTDOT(N,W,1,W,1))
      FPAR(3) = FPAR(5)
      TAO = FPAR(5)
      FPAR(11) = FPAR(11) + N + N
      IF (ABS(IPAR(3)).EQ.2) THEN
         FPAR(4) = FPAR(1) * SQRT(DISTDOT(N,RHS,1,RHS,1)) + FPAR(2)
         FPAR(11) = FPAR(11) + N + N
      ELSE IF (IPAR(3).NE.999) THEN
         FPAR(4) = FPAR(1) * TAO + FPAR(2)
      ENDIF
      TE = ZERO
      RHO = ZERO
C
C     BEGIN ITERATION
C
 30   SIGMA = RHO
      RHO = DISTDOT(N,W(1,2),1,W(1,3),1)
      FPAR(11) = FPAR(11) + N + N
      IF (BRKDN2(RHO,IPAR)) GOTO 900
      IF (IPAR(7).EQ.1) THEN
         ALPHA = ZERO
      ELSE
         ALPHA = RHO / SIGMA
      ENDIF
      DO I = 1, N
         W(I,4) = W(I,3) + ALPHA * W(I,5)
      ENDDO
      FPAR(11) = FPAR(11) + N + N
C
C     A * X -- WITH PRECONDITIONING
C
      IF (RP) THEN
         IPAR(1) = 5
         IPAR(8) = 3*N + 1
         IF (LP) THEN
            IPAR(9) = 5*N + 1
         ELSE
            IPAR(9) = 9*N + 1
         ENDIF
         IPAR(10) = 3
         RETURN
      ENDIF
C
 40   IPAR(1) = 1
      IF (RP) THEN
         IPAR(8) = IPAR(9)
      ELSE
         IPAR(8) = 3*N + 1
      ENDIF
      IF (LP) THEN
         IPAR(9) = 9*N + 1
      ELSE
         IPAR(9) = 5*N + 1
      ENDIF
      IPAR(10) = 4
      RETURN
C
 50   IF (LP) THEN
         IPAR(1) = 3
         IPAR(8) = IPAR(9)
         IPAR(9) = 5*N + 1
         IPAR(10) = 5
         RETURN
      ENDIF
 60   IPAR(7) = IPAR(7) + 1
      DO I = 1, N
         W(I,8) = W(I,6) + ALPHA * (W(I,7) + ALPHA * W(I,8))
      ENDDO
      SIGMA = DISTDOT(N,W(1,2),1,W(1,8),1)
      FPAR(11) = FPAR(11) + 6 * N
      IF (BRKDN2(SIGMA,IPAR)) GOTO 900
      ALPHA = RHO / SIGMA
      DO I = 1, N
         W(I,5) = W(I,4) - ALPHA * W(I,8)
      ENDDO
      FPAR(11) = FPAR(11) + 2*N
C
C     THE SECOND A * X
C
      IF (RP) THEN
         IPAR(1) = 5
         IPAR(8) = 4*N + 1
         IF (LP) THEN
            IPAR(9) = 6*N + 1
         ELSE
            IPAR(9) = 9*N + 1
         ENDIF
         IPAR(10) = 6
         RETURN
      ENDIF
C
 70   IPAR(1) = 1
      IF (RP) THEN
         IPAR(8) = IPAR(9)
      ELSE
         IPAR(8) = 4*N + 1
      ENDIF
      IF (LP) THEN
         IPAR(9) = 9*N + 1
      ELSE
         IPAR(9) = 6*N + 1
      ENDIF
      IPAR(10) = 7
      RETURN
C
 80   IF (LP) THEN
         IPAR(1) = 3
         IPAR(8) = IPAR(9)
         IPAR(9) = 6*N + 1
         IPAR(10) = 8
         RETURN
      ENDIF
 90   IPAR(7) = IPAR(7) + 1
      DO I = 1, N
         W(I,3) = W(I,3) - ALPHA * W(I,6)
      ENDDO
C
C     UPDATE I
C
      THETA = DISTDOT(N,W(1,3),1,W(1,3),1) / (TAO*TAO)
      SIGMA = ONE / (ONE + THETA)
      TAO = TAO * SQRT(SIGMA * THETA)
      FPAR(11) = FPAR(11) + 4*N + 6
      IF (BRKDN2(TAO,IPAR)) GOTO 900
      ETA = SIGMA * ALPHA
      SIGMA = TE / ALPHA
      TE = THETA * ETA
      DO I = 1, N
         W(I,9) = W(I,4) + SIGMA * W(I,9)
         W(I,11) = W(I,11) + ETA * W(I,9)
         W(I,3) = W(I,3) - ALPHA * W(I,7)
      ENDDO
      FPAR(11) = FPAR(11) + 6 * N + 6
      IF (IPAR(7).EQ.1) THEN
         IF (IPAR(3).EQ.-1) THEN
            FPAR(3) = ETA * SQRT(DISTDOT(N,W(1,9),1,W(1,9),1))
            FPAR(4) = FPAR(1)*FPAR(3) + FPAR(2)
            FPAR(11) = FPAR(11) + N + N + 4
         ENDIF
      ENDIF
C
C     UPDATE II
C
      THETA = DISTDOT(N,W(1,3),1,W(1,3),1) / (TAO*TAO)
      SIGMA = ONE / (ONE + THETA)
      TAO = TAO * SQRT(SIGMA * THETA)
      FPAR(11) = FPAR(11) + 8 + 2*N
      IF (BRKDN2(TAO,IPAR)) GOTO 900
      ETA = SIGMA * ALPHA
      SIGMA = TE / ALPHA
      TE = THETA * ETA
      DO I = 1, N
         W(I,9) = W(I,5) + SIGMA * W(I,9)
         W(I,11) = W(I,11) + ETA * W(I,9)
      ENDDO
      FPAR(11) = FPAR(11) + 4*N + 3
C
C     THIS IS THE CORRECT OVER-ESTIMATE
C      FPAR(5) = SQRT(REAL(IPAR(7)+1)) * TAO
C     THIS IS AN APPROXIMATION
      FPAR(5) = TAO
      IF (IPAR(3).EQ.999) THEN
         IPAR(1) = 10
         IPAR(8) = 10*N + 1
         IPAR(9) = 9*N + 1
         IPAR(10) = 9
         RETURN
      ELSE IF (IPAR(3).LT.0) THEN
         FPAR(6) = ETA * SQRT(DISTDOT(N,W(1,9),1,W(1,9),1))
         FPAR(11) = FPAR(11) + N + N + 2
      ELSE
         FPAR(6) = FPAR(5)
      ENDIF
      IF (FPAR(6).GT.FPAR(4) .AND. (IPAR(7).LT.IPAR(6)
     +     .OR. IPAR(6).LE.0)) GOTO 30
 100  IF (IPAR(3).EQ.999.AND.IPAR(11).EQ.0) GOTO 30
C
C     CLEAN UP
C
 900  IF (RP) THEN
         IF (IPAR(1).LT.0) IPAR(12) = IPAR(1)
         IPAR(1) = 5
         IPAR(8) = 10*N + 1
         IPAR(9) = IPAR(8) - N
         IPAR(10) = 10
         RETURN
      ENDIF
 110  IF (RP) THEN
         CALL TIDYCG(N,IPAR,FPAR,SOL,W(1,10))
      ELSE
         CALL TIDYCG(N,IPAR,FPAR,SOL,W(1,11))
      ENDIF
C
      RETURN
      END
C-----END-OF-TFQMR
C*MODULE TDDNLR  *DECK BISINIT
      SUBROUTINE BISINIT(IPAR,FPAR,WKSIZE,DSC,LP,RP,WK)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER WKSIZE,DSC
      LOGICAL LP,RP
C-----------------------------------------------------------------------
C     SOME COMMON INITIALIZATIONS FOR THE ITERATIVE SOLVERS
C-----------------------------------------------------------------------
      PARAMETER(ZERO=0.0D0, ONE=1.0D0)
      DIMENSION IPAR(*),FPAR(*),WK(*)
C
C     IPAR(1) = -2 INIDCATE THAT THERE ARE NOT ENOUGH SPACE IN THE WORK
C     ARRAY
C
      IF (IPAR(4).LT.WKSIZE) THEN
         IPAR(1) = -2
         IPAR(4) = WKSIZE
         RETURN
      ENDIF
C
      IF (IPAR(2).GT.2) THEN
         LP = .TRUE.
         RP = .TRUE.
      ELSE IF (IPAR(2).EQ.2) THEN
         LP = .FALSE.
         RP = .TRUE.
      ELSE IF (IPAR(2).EQ.1) THEN
         LP = .TRUE.
         RP = .FALSE.
      ELSE
         LP = .FALSE.
         RP = .FALSE.
      ENDIF
      IF (IPAR(3).EQ.0) IPAR(3) = DSC
C     .. CLEAR THE IPAR ELEMENTS USED
      IPAR(7) = 0
      IPAR(8) = 0
      IPAR(9) = 0
      IPAR(10) = 0
      IPAR(11) = 0
      IPAR(12) = 0
      IPAR(13) = 0
C
C     FPAR(1) MUST BE BETWEEN (0, 1), FPAR(2) MUST BE POSITIVE,
C     FPAR(1) AND FPAR(2) CAN NOT BOTH BE ZERO
C     NORMALLY RETURN IPAR(1) = -4 TO INDICATE ANY OF ABOVE ERROR
C
      IF (FPAR(1).LT.ZERO .OR. FPAR(1).GE.ONE .OR. FPAR(2).LT.ZERO .OR.
     &     (FPAR(1).EQ.ZERO .AND. FPAR(2).EQ.ZERO)) THEN
         IF (IPAR(1).EQ.0) THEN
            IPAR(1) = -4
            RETURN
         ELSE
            FPAR(1) = 1.0D-6
            FPAR(2) = 1.0D-16
         ENDIF
      ENDIF
C     .. CLEAR THE FPAR ELEMENTS
      DO I = 3, 10
         FPAR(I) = ZERO
      ENDDO
      IF (FPAR(11).LT.ZERO) FPAR(11) = ZERO
C     .. CLEAR THE USED PORTION OF THE WORK ARRAY TO ZERO
      DO I = 1, WKSIZE
         WK(I) = ZERO
      ENDDO
C
      RETURN
C-----END-OF-BISINIT
      END
C*MODULE TDDNLR  *DECK TIDYCG
      SUBROUTINE TIDYCG(N,IPAR,FPAR,SOL,DELX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
C-----------------------------------------------------------------------
C     SOME COMMON OPERATIONS REQUIRED BEFORE TERMINATING THE CG ROUTINES
C-----------------------------------------------------------------------
      PARAMETER(ZERO=0.0D0)
      DIMENSION IPAR(*),FPAR(*),SOL(*),DELX(*)
C
      IF (IPAR(12).NE.0) THEN
         IPAR(1) = IPAR(12) 
      ELSE IF (IPAR(1).GT.0) THEN
         IF ((IPAR(3).EQ.999 .AND. IPAR(11).EQ.1) .OR.
     +        FPAR(6).LE.FPAR(4)) THEN
            IPAR(1) = 0
         ELSE IF (IPAR(7).GE.IPAR(6) .AND. IPAR(6).GT.0) THEN
            IPAR(1) = -1
         ELSE
            IPAR(1) = -10
         ENDIF
      ENDIF
      IF (FPAR(3).GT.ZERO .AND. FPAR(6).GT.ZERO .AND.
     +     IPAR(7).GT.IPAR(13)) THEN
         FPAR(7) = LOG10(FPAR(3) / FPAR(6)) / DBLE(IPAR(7)-IPAR(13))
      ELSE
         FPAR(7) = ZERO
      ENDIF
      DO I = 1, N
         SOL(I) = SOL(I) + DELX(I)
      ENDDO
      RETURN
      END
C-----END-OF-TIDYCG
C*MODULE TDDNLR  *DECK DISTDOT
      DOUBLE PRECISION FUNCTION DISTDOT(N,X,IX,Y,IY)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      DIMENSION X(*), Y(*)
      DISTDOT = DDOT(N,X,IX,Y,IY)
      RETURN
      END
C*MODULE TDDNLR  *DECK BRKDN2
      LOGICAL FUNCTION BRKDN2(ALPHA, IPAR)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z) 
      PARAMETER (ZERO=0.0D0, ONE=1.0D0)
      DIMENSION IPAR(*)
C-----------------------------------------------------------------------
C     TEST WHETHER ALPHA IS ZERO OR AN ABNORMAL NUMBER, IF YES,
C     THIS ROUTINE WILL RETURN .TRUE.
C
C     IF ALPHA == 0, IPAR(1) = -3,
C     IF ALPHA IS AN ABNORMAL NUMBER, IPAR(1) = -9.
C-----------------------------------------------------------------------
      BRKDN2 = .FALSE.
      IF (ALPHA.GT.ZERO) THEN
         BETA = ONE / ALPHA
         IF (.NOT. BETA.GT.ZERO) THEN
            BRKDN2 = .TRUE.
            IPAR(1) = -9
         ENDIF
      ELSE IF (ALPHA.LT.ZERO) THEN
         BETA = ONE / ALPHA
         IF (.NOT. BETA.LT.ZERO) THEN
            BRKDN2 = .TRUE.
            IPAR(1) = -9
         ENDIF
      ELSE IF (ALPHA.EQ.ZERO) THEN
         BRKDN2 = .TRUE.
         IPAR(1) = -3
      ELSE
         BRKDN2 = .TRUE.
         IPAR(1) = -9
      ENDIF
      RETURN
      END
C-----END-OF-BRKDN2
C*MODULE TDDNLR  *DECK ATIMES
      SUBROUTINE ATIMES(P,Q1,Q2,R,V,
     *E,OMEGA,L0,L1,L2,L3,L7,LX,NOCC)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION P(*),Q1(*),Q2(*),R(*),V(L1,LX),E(*)
C      IF (ITRNSP.EQ.0) THEN
        CALL MAT(P,Q1,Q2,R,V,E,OMEGA,
     *L0,L1,L2,L3,L7,LX,NOCC)
C      ENDIF
      RETURN
      END
C*MODULE TDDNLR  *DECK ASLOVE
      SUBROUTINE ASOLVE(B,R,E,OMEGA,LX,NOCC)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION B(*),R(*),E(*)
C
      DO I=1,NOCC
        DO J=NOCC+1,LX
          JJ=J-NOCC
          IJ=(JJ-1)*NOCC+I
          R(IJ)=B(IJ)/((E(J)-E(I))**2-OMEGA**2)
        ENDDO
      ENDDO
C
      RETURN
      END 
C*MODULE TDDNLR  *DECK MAT
      SUBROUTINE MAT(P,Q1,Q2,R,V,E,OMEGA,
     *L0,L1,L2,L3,L7,LX,NOCC)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION P(*),R(*),V(L1,LX),E(*)
      DIMENSION Q1(L7),Q2(L7)
C
      CALL APBX(P,Q1,V,E,L0,L1,L2,L3,L7,LX,NOCC)
      CALL AMBX(Q1,Q2,V,E,L0,L1,L3,L7,LX,NOCC)
      DO I=1,NOCC
        DO J=NOCC+1,LX
          JJ=J-NOCC
          IJ=(JJ-1)*NOCC+I
          R(IJ)=Q2(IJ)-OMEGA**2*P(IJ)
        ENDDO
      ENDDO 
C
      RETURN
      END 
C
C*MODULE TDDNLR  *DECK TDFXCP2
      SUBROUTINE TDFXCP2(F,RHO,XYZGRD,XYZWGT,XYZDCH,VA,VA2,VDUM,
     *                  DRHOI_,DTAUI_,DTRAI_,DTRAI2_,COEF,EX,EC,
     *                  EX0,EC0,AOMAX,VALGA,VALGA2,IAO,IAO2,ILENG,
     *                  NPTGRD,L1,L2,LX,NDER,IMETHOD)
C
C     A MODIFIED VERSION OF TDFXCP AS IN TDDFXC.SRC
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      PARAMETER (MXATM=2000)
      PARAMETER (MXGRID=10,MXGRIDTYP=10)
      LOGICAL DBUG,GOPARR,DSKWRK,MASWRK,DLB,SG1
      COMMON /DFGRID/ DFTTHR,DFTGTHR,SWOFF,SW0,BSLRD(137),NDFTFG,
     *                NRAD,NTHE,NPHI,NRAD0,NTHE0,NPHI0,
     *                NANGPT(MXGRID),NANGPT0(MXGRID),SG1,JANS
      COMMON /DFPRUN/ PRUNERADS(MXGRID,MXGRIDTYP),
     *                PRUNEATOMS(2,MXGRIDTYP),
     *                IPRUNECUTS(MXATM),NTOTGRIDPOINTS(MXATM),
     *                NGRIDS,MAXANG,NGRIDTYPS
      COMMON /SCFOPT/ CONVHF,MAXIT,MCONV,NPUNCH,NPREO(4)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      DIMENSION F(*)
      DIMENSION DRHOI_(NPTGRD,*)
      DIMENSION DTAUI_(*)
      DIMENSION DTRAI_(5,*)
      DIMENSION DTRAI2_(5,*)
      DIMENSION VA(*),VA2(*),VDUM(*)
      DIMENSION COEF(6,*)
      DIMENSION EX(ILENG,*),EC(ILENG,*),EX0(*),EC0(*)
      DIMENSION XYZGRD(3,*)
      DIMENSION XYZWGT(*)
      DIMENSION XYZDCH(4,L1,*)
      DIMENSION AOMAX(L1)
      DIMENSION VALGA(*),VALGA2(*),IAO(*),IAO2(*)
C
      DATA ZERO      /0.0D+00/
C
      DBUG=.FALSE.
      IF (DBUG) THEN
       WRITE(6,*)'TDFXCP'
       CALL TIMIT(1)
      ENDIF
C     SET CUT-OFFS
C
      NPT = NRAD*MAXANG
      RCUTOFF=CONVHF/(NPT*NAT)
      IF(NDER.EQ.3) RCUTOFF=1.0D-12
      CCUTOFF=1.0D-03/(NPT*NAT)
      IF(DBUG) THEN
       WRITE(6,*)'RCUTOFF/CCUTOFF/IMETHOD=',RCUTOFF,CCUTOFF,IMETHOD
      ENDIF
C
      IST=0
      IEND=0
      IAREA=0
C
      CALL VCLR(F,1,L2)
      RHO=ZERO
      TAU=ZERO
C
C     LOAD BALANCING TERMS
      LOOP = 0
      NGRAN = 20
      NLENG = (NPTGRD - 1)/ILENG + 1
      MCHUNK = (NLENG - 1)/(NGRAN*NPROC) + 1
      NEXT = -1
      DLB = IBTYP.EQ.1
C
C     CHANGED GOTO LOOP INTO A DO LOOP FOR THE PARALLELIZATION.
C
      DO 10 ILG=1,NLENG
C
C     DYNAMIC AND STATIC LOAD BALANCING
C
      IF(GOPARR) THEN
         IF(DLB) THEN
            LOOP = LOOP + 1
            ICHUNK=(LOOP-1)/MCHUNK
            IF(ICHUNK.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
            IF(NEXT.NE.ICHUNK) GOTO 10
         ELSE
C     SLB HAS ALREADY DISTRIBUTED THE DATA, DO EVERYTHING WE HAVE STORED
C---        IF(MOD(ILG,NPROC).NE.ME) GOTO 10
            CONTINUE
         ENDIF
       ENDIF
C
      IST=(ILG - 1) * ILENG + 1
      IEND=IST+ILENG-1
      IAREA=IAREA+1
      IF(IEND.GT.NPTGRD) IEND=NPTGRD
C
C     ---- FUNCTIONAL ENERGY AND DERIVATIVES
C          EX(ILENG,10) & EC(ILENG,20)
C
      CALL DFXCSET(EX0,EX,EC0,EC,DRHOI_,DTAUI_,XYZWGT,
     *             RCUTOFF,EXC,ECOR,ILENG,NPTGRD,1,NDER,IST,IEND)
C
C     -- MAKE AO-GRID & AOMAX
C
      CALL GRDGAO(IST,IEND,XYZGRD,XYZDCH,AOMAX,L1)
C
C     ---- TRANSITION DENSITY
C
      IF(IMETHOD.EQ.1) THEN
       CALL TRADEN(RCUTOFF,CCUTOFF,DTRAI_,DRHOI_,VDUM,VA,
     * XYZDCH,VALGA,IST,IEND,L1,LX,NA,NPTGRD,ILENG)
      ELSE
       THRE=1.0D-06
       CALL AOSERCH(THRE,AOMAX,IAO,L1,IAON)
       THRE=1.0D-11
       CALL SELECTPR(THRE,VA,AOMAX,VALGA,IAO,IMAX,L1,IAON)
       CALL TRADEN2(RCUTOFF,DRHOI_,DTRAI_,VA,XYZDCH,VALGA,
     * IST,IEND,NPTGRD,IMAX,L1,ILENG)
       THRE=1.0D-06
       CALL AOSERCH(THRE,AOMAX,IAO2,L1,IAON2)
       THRE=1.0D-11
       CALL SELECTPR(THRE,VA2,AOMAX,VALGA2,IAO2,IMAX2,L1,IAON2)
       CALL TRADEN2(RCUTOFF,DRHOI_,DTRAI2_,VA2,XYZDCH,VALGA2,
     * IST,IEND,NPTGRD,IMAX2,L1,ILENG)
      ENDIF
C
C     ---- COEF(6,ILENG)
C
      IF(NDER.EQ.2) THEN
       CALL TDCOF(COEF,EX,EC,DRHOI_,DTRAI_,RCUTOFF,NPTGRD,
     * IST,IEND,ILENG)
      ELSE
       CALL GCOF2(COEF,EX,EC,DRHOI_,DTRAI_,DTRAI2_,
     * RCUTOFF,NPTGRD,IST,IEND,ILENG)
      ENDIF
C
C     -- NUMERICAL INTEGRATION
C
      CALL NUMFK2(RHO,TAU,RCUTOFF,F,DRHOI_,DTRAI_,DTRAI2_,
     *           DTAUI_,COEF,XYZWGT,XYZDCH,
     *           VALGA,IST,IEND,L1,NPTGRD)
C
C      IF(IEND.EQ.NPTGRD) THEN
C      GOTO 20
C      ELSE
C      GOTO 10
C      ENDIF
C   20 CONTINUE
C
 10   CONTINUE
C
C     REQUIRED RESET FOR DYNAMIC LOAD BALANCING
C
      IF(GOPARR.AND.DLB) CALL DDI_DLBRESET
C
      IF (DBUG) THEN
         WRITE(6,*)'TDFXCP DONE'
         WRITE(6,*)'INTEGRATED RHO=',RHO
         CALL TIMIT(1)
      ENDIF
C
      RETURN
      END
C*MODULE TDDNLR  *DECK GCOF2
      SUBROUTINE GCOF2(COEF,EX,EC,DRHOI_,DTRAI_,DTRAI2_,RCUTOFF,NPTGRD,
     *     IST,IEND,ILENG)
C
C     A MODIFIED VERSION OF GCOF AS IN TDDFXC.SRC
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON /XDERIX/ NXDIM(3),KRA,KRB,KGA,KGB,KTA,KTB,KRARA,KRAGA,
     *                KRATA,KGAGA,KGATA,KTATA,KRBRB,KRBGB,KRBTB,KGBGB,
     *                KGBTB,KTBTB,KRARARA,KRARAGA,KRARATA,KRAGAGA,
     *                KRAGATA,KRATATA,KGAGAGA,KGAGATA,KGATATA,KTATATA,
     *                KRBRBRB,KRBRBGB,KRBRBTB,KRBGBGB,KRBGBTB,KRBTBTB,
     *                KGBGBGB,KGBGBTB,KGBTBTB,KTBTBTB
      COMMON /CDERIX/ NCDIM(3),IRA,IRB,IGA,IGB,IGC,ITA,ITB,IRARA,IRARB,
     *                IRAGA,IRAGB,IRAGC,IRATA,IRATB,IRBRB,IRBGA,IRBGB,
     *                IRBGC,IRBTA,IRBTB,IGAGA,IGAGB,IGAGC,IGATA,IGATB,
     *                IGBGB,IGBGC,IGBTA,IGBTB,IGCGC,IGCTA,IGCTB,ITATA,
     *                ITATB,ITBTB,IRARARA,IRARARB,IRARAGA,IRARAGB,
     *                IRARAGC,IRARATA,IRARATB,IRARBRB,IRARBGA,IRARBGB,
     *                IRARBGC,IRARBTA,IRARBTB,IRAGAGA,IRAGAGB,IRAGAGC,
     *                IRAGATA,IRAGATB,IRAGBGB,IRAGBGC,IRAGBTA,IRAGBTB,
     *                IRAGCGC,IRAGCTA,IRAGCTB,IRATATA,IRATATB,IRATBTB,
     *                IRBRBRB,IRBRBGA,IRBRBGB,IRBRBGC,IRBRBTA,IRBRBTB,
     *                IRBGAGA,IRBGAGB,IRBGAGC,IRBGATA,IRBGATB,IRBGBGB,
     *                IRBGBGC,IRBGBTA,IRBGBTB,IRBGCGC,IRBGCTA,IRBGCTB,
     *                IRBTATA,IRBTATB,IRBTBTB,IGAGAGA,IGAGAGB,IGAGAGC,
     *                IGAGATA,IGAGATB,IGAGBGB,IGAGBGC,IGAGBTA,IGAGBTB,
     *                IGAGCGC,IGAGCTA,IGAGCTB,IGATATA,IGATATB,IGATBTB,
     *                IGBGBGB,IGBGBGC,IGBGBTA,IGBGBTB,IGBGCGC,IGBGCTA,
     *                IGBGCTB,IGBTATA,IGBTATB,IGBTBTB,IGCGCGC,IGCGCTA,
     *                IGCGCTB,IGCTATA,IGCTATB,IGCTBTB,ITATATA,ITATATB,
     *                ITATBTB,ITBTBTB
C
      DIMENSION COEF(6,*)
      DIMENSION DRHOI_(NPTGRD,4)
      DIMENSION DTRAI_(5,*)
      DIMENSION DTRAI2_(5,*)
      DIMENSION EX(ILENG,*)
      DIMENSION EC(ILENG,*)
      DIMENSION DUMNV(2),DXV(2),DYV(2),DZV(2),DUMGRV(4),DUMXX(4)
      DIMENSION DUMNV2(2),DXV2(2),DYV2(2),DZV2(2),DUMGRV2(4)
C
      DATA ZERO      /0.0D+00/
      DATA TWO       /2.0D+00/
      DATA FOUR      /4.0D+00/
C
      CALL VCLR(COEF,1,ILENG*6)
C
      
      DO IPT=IST,IEND
         IIPT=IPT-IST+1
         RHOA = DRHOI_(IPT,1)
         RHOB = DRHOI_(IPT,1)
         RHOT=RHOA+RHOB
         IF(RHOT.GT.RCUTOFF) THEN
            DRHOAX=DRHOI_(IPT,2)
            DRHOAY=DRHOI_(IPT,3)
            DRHOAZ=DRHOI_(IPT,4)
            DRHOBX=DRHOI_(IPT,2)
            DRHOBY=DRHOI_(IPT,3)
            DRHOBZ=DRHOI_(IPT,4)
C
            DUMNV(1)=DTRAI_(1,IIPT)
            DXV(1)=DTRAI_(2,IIPT)
            DYV(1)=DTRAI_(3,IIPT)
            DZV(1)=DTRAI_(4,IIPT)
            DUMNV(2)=DTRAI_(1,IIPT)
            DXV(2)=DTRAI_(2,IIPT)
            DYV(2)=DTRAI_(3,IIPT)
            DZV(2)=DTRAI_(4,IIPT)
C
            DUMNV2(1)=DTRAI2_(1,IIPT)
            DXV2(1)=DTRAI2_(2,IIPT)
            DYV2(1)=DTRAI2_(3,IIPT)
            DZV2(1)=DTRAI2_(4,IIPT)
            DUMNV2(2)=DTRAI2_(1,IIPT)
            DXV2(2)=DTRAI2_(2,IIPT)
            DYV2(2)=DTRAI2_(3,IIPT)
            DZV2(2)=DTRAI2_(4,IIPT)
C
C     -- DUMGRV
C     1:A*A 2:B*B 3:A*B 4:B*A
            DUMGRV(1)=DXV(1)*DRHOAX+DYV(1)*DRHOAY+DZV(1)*DRHOAZ
            DUMGRV(2)=DXV(2)*DRHOBX+DYV(2)*DRHOBY+DZV(2)*DRHOBZ
            DUMGRV(3)=DXV(1)*DRHOBX+DYV(1)*DRHOBY+DZV(1)*DRHOBZ
            DUMGRV(4)=DXV(2)*DRHOAX+DYV(2)*DRHOAY+DZV(2)*DRHOAZ
            DUMGRV2(1)=DXV2(1)*DRHOAX+DYV2(1)*DRHOAY+DZV2(1)*DRHOAZ
            DUMGRV2(2)=DXV2(2)*DRHOBX+DYV2(2)*DRHOBY+DZV2(2)*DRHOBZ
            DUMGRV2(3)=DXV2(1)*DRHOBX+DYV2(1)*DRHOBY+DZV2(1)*DRHOBZ
            DUMGRV2(4)=DXV2(2)*DRHOAX+DYV2(2)*DRHOAY+DZV2(2)*DRHOAZ
            DUMXX(1)=DXV(1)*DXV2(1)+DYV(1)*DYV2(1)+DZV(1)*DZV2(1)
            DUMXX(2)=DXV(2)*DXV2(2)+DYV(2)*DYV2(2)+DZV(2)*DZV2(2)
            DUMXX(3)=DXV(1)*DXV2(2)+DYV(1)*DYV2(2)+DZV(1)*DZV2(2)
            DUMXX(4)=DXV(2)*DXV2(1)+DYV(2)*DYV2(1)+DZV(2)*DZV2(1)
C            DUMXX(4)=DUMXX(3)
C
C     ---- FOR G(L2):3RD DERIVATIVES :F_CORE
C     ********F_CORE****************
C     ********G_ALPHA***************DUM"A",DUM"A"G
C     --AA
            C1=TWO*DUMXX(1)
            C2=DUMNV(1)*DUMNV2(1)
            C3=TWO*DUMNV(1)*DUMGRV2(1)
            C4=TWO*DUMGRV(1)*DUMNV2(1)
            C5=DUMGRV(1)*DUMNV2(1)
            C6=DUMNV(1)*DUMGRV2(1)
            C7=FOUR*DUMGRV(1)*DUMGRV2(1)
            C8=TWO*DUMGRV(1)*DUMGRV2(1)
            C9=TWO*DUMGRV(1)*DUMGRV2(1)
            C10=DUMGRV(1)*DUMGRV2(1)
C     -- EXCHANGE
            XDUMA=ZERO
            XDUMAG=ZERO
C     A-AA--1
            XDUMA=XDUMA+C1*EX(IIPT,KRAGA)
            XDUMAG=XDUMAG+C1*TWO*EX(IIPT,KGAGA)
C     --2
            XDUMA=XDUMA+C2*EX(IIPT,KRARARA)
            XDUMAG=XDUMAG+C2*TWO*EX(IIPT,KRARAGA)
C     --3
            XDUMA=XDUMA+C3*EX(IIPT,KRARAGA)
            XDUMAG=XDUMAG+C3*TWO*EX(IIPT,KRAGAGA)
C     --4
            XDUMA=XDUMA+C4*EX(IIPT,KRARAGA)
            XDUMAG=XDUMAG+C4*TWO*EX(IIPT,KRAGAGA)
C     --7
            XDUMA=XDUMA+C7*EX(IIPT,KRAGAGA)
            XDUMAG=XDUMAG+C7*TWO*EX(IIPT,KGAGAGA)
C     -- CORRELATION
            CDUMA=ZERO
            CDUMAG1=ZERO
            CDUMAG2=ZERO
C     A-AA--1     GA
            CDUMA=CDUMA+C1*EC(IIPT,IRAGA)
            CDUMAG1=CDUMAG1+C1*TWO*EC(IIPT,IGAGA)
            CDUMAG2=CDUMAG2+C1*EC(IIPT,IGAGC)
C     --2        RARA
            CDUMA=CDUMA+C2*EC(IIPT,IRARARA)
            CDUMAG1=CDUMAG1+C2*TWO*EC(IIPT,IRARAGA)
            CDUMAG2=CDUMAG2+C2*EC(IIPT,IRARAGC)
C     --3        RAGA
            CDUMA=CDUMA+C3*EC(IIPT,IRARAGA)
            CDUMAG1=CDUMAG1+C3*TWO*EC(IIPT,IRAGAGA)
            CDUMAG2=CDUMAG2+C3*EC(IIPT,IRAGAGC)
C     --4        RAGA
            CDUMA=CDUMA+C4*EC(IIPT,IRARAGA)
            CDUMAG1=CDUMAG1+C4*TWO*EC(IIPT,IRAGAGA)
            CDUMAG2=CDUMAG2+C4*EC(IIPT,IRAGAGC)
C     --5        RAGC
            CDUMA=CDUMA+C5*EC(IIPT,IRARAGC)
            CDUMAG1=CDUMAG1+C5*TWO*EC(IIPT,IRAGAGC)
            CDUMAG2=CDUMAG2+C5*EC(IIPT,IRAGCGC)
C     --6        RAGC
            CDUMA=CDUMA+C6*EC(IIPT,IRARAGC)
            CDUMAG1=CDUMAG1+C6*TWO*EC(IIPT,IRAGAGC)
            CDUMAG2=CDUMAG2+C6*EC(IIPT,IRAGCGC)
C     --7        GAGA
            CDUMA=CDUMA+C7*EC(IIPT,IRAGAGA)
            CDUMAG1=CDUMAG1+C7*TWO*EC(IIPT,IGAGAGA)
            CDUMAG2=CDUMAG2+C7*EC(IIPT,IGAGAGC)
C     --8        GAGC
            CDUMA=CDUMA+C8*EC(IIPT,IRAGAGC)
            CDUMAG1=CDUMAG1+C8*TWO*EC(IIPT,IGAGAGC)
            CDUMAG2=CDUMAG2+C8*EC(IIPT,IGAGCGC)
C     --9        GAGC
            CDUMA=CDUMA+C9*EC(IIPT,IRAGAGC)
            CDUMAG1=CDUMAG1+C9*TWO*EC(IIPT,IGAGAGC)
            CDUMAG2=CDUMAG2+C9*EC(IIPT,IGAGCGC)
C     --10       GCGC
            CDUMA=CDUMA+C10*EC(IIPT,IRAGCGC)
            CDUMAG1=CDUMAG1+C10*TWO*EC(IIPT,IGAGCGC)
            CDUMAG2=CDUMAG2+C10*EC(IIPT,IGCGCGC)
C     --BB
            C1=TWO*DUMXX(2)
            C2=DUMNV(2)*DUMNV2(2)
            C3=TWO*DUMNV(2)*DUMGRV2(2)
            C4=TWO*DUMGRV(2)*DUMNV2(2)
            C5=DUMGRV(2)*DUMNV2(2)
            C6=DUMNV(2)*DUMGRV2(2)
            C7=FOUR*DUMGRV(2)*DUMGRV2(2)
            C8=TWO*DUMGRV(2)*DUMGRV2(2)
            C9=TWO*DUMGRV(2)*DUMGRV2(2)
            C10=DUMGRV(2)*DUMGRV2(2)
C     A-BB--1      GB
            CDUMA=CDUMA+C1*EC(IIPT,IRAGB)
            CDUMAG1=CDUMAG1+C1*TWO*EC(IIPT,IGAGB)
            CDUMAG2=CDUMAG2+C1*EC(IIPT,IGBGC)
C     --2        RBRB
            CDUMA=CDUMA+C2*EC(IIPT,IRARBRB)
            CDUMAG1=CDUMAG1+C2*TWO*EC(IIPT,IRBRBGA)
            CDUMAG2=CDUMAG2+C2*EC(IIPT,IRBRBGC)
C     --3        RBGB
            CDUMA=CDUMA+C3*EC(IIPT,IRARBGB)
            CDUMAG1=CDUMAG1+C3*TWO*EC(IIPT,IRBGAGB)
            CDUMAG2=CDUMAG2+C3*EC(IIPT,IRBGBGC)
C     --4        RBGB
            CDUMA=CDUMA+C4*EC(IIPT,IRARBGB)
            CDUMAG1=CDUMAG1+C4*TWO*EC(IIPT,IRBGAGB)
            CDUMAG2=CDUMAG2+C4*EC(IIPT,IRBGBGC)
C     --5        RBGC
            CDUMA=CDUMA+C5*EC(IIPT,IRARBGC)
            CDUMAG1=CDUMAG1+C5*TWO*EC(IIPT,IRBGAGC)
            CDUMAG2=CDUMAG2+C5*EC(IIPT,IRBGCGC)
C     --6        RBGC
            CDUMA=CDUMA+C6*EC(IIPT,IRARBGC)
            CDUMAG1=CDUMAG1+C6*TWO*EC(IIPT,IRBGAGC)
            CDUMAG2=CDUMAG2+C6*EC(IIPT,IRBGCGC)
C     --7        GBGB
            CDUMA=CDUMA+C7*EC(IIPT,IRAGBGB)
            CDUMAG1=CDUMAG1+C7*TWO*EC(IIPT,IGAGBGB)
            CDUMAG2=CDUMAG2+C7*EC(IIPT,IGBGBGC)
C     --8        GBGC
            CDUMA=CDUMA+C8*EC(IIPT,IRAGBGC)
            CDUMAG1=CDUMAG1+C8*TWO*EC(IIPT,IGAGBGC)
            CDUMAG2=CDUMAG2+C8*EC(IIPT,IGBGCGC)
C     --9        GBGC
            CDUMA=CDUMA+C9*EC(IIPT,IRAGBGC)
            CDUMAG1=CDUMAG1+C9*TWO*EC(IIPT,IGAGBGC)
            CDUMAG2=CDUMAG2+C9*EC(IIPT,IGBGCGC)
C     --10       GCGC
            CDUMA=CDUMA+C10*EC(IIPT,IRAGCGC)
            CDUMAG1=CDUMAG1+C10*TWO*EC(IIPT,IGAGCGC)
            CDUMAG2=CDUMAG2+C10*EC(IIPT,IGCGCGC)
C     --ABORBA
            C11=DUMXX(3)
            C12=DUMNV(1)*DUMNV2(2)
            C13=TWO*DUMNV(1)*DUMGRV2(2)
            C14=TWO*DUMGRV(1)*DUMNV2(2)
            C15=DUMNV(1)*DUMGRV2(4)
            C16=DUMGRV(3)*DUMNV2(2)
            C17=FOUR*DUMGRV(1)*DUMGRV2(2)
            C18=TWO*DUMGRV(1)*DUMGRV2(4)
            C19=TWO*DUMGRV(3)*DUMGRV2(2)
            C20=DUMGRV(3)*DUMGRV2(4)
C     A-AB--11   GC
            CDUMA=CDUMA+C11*EC(IIPT,IRAGC)
            CDUMAG1=CDUMAG1+C11*TWO*EC(IIPT,IGAGC)
            CDUMAG2=CDUMAG2+C11*EC(IIPT,IGCGC)
C     --12     RARB
            CDUMA=CDUMA+C12*EC(IIPT,IRARARB)
            CDUMAG1=CDUMAG1+C12*TWO*EC(IIPT,IRARBGA)
            CDUMAG2=CDUMAG2+C12*EC(IIPT,IRARBGC)
C     --13     RAGB
            CDUMA=CDUMA+C13*EC(IIPT,IRARAGB)
            CDUMAG1=CDUMAG1+C13*TWO*EC(IIPT,IRAGAGB)
            CDUMAG2=CDUMAG2+C13*EC(IIPT,IRAGBGC)
C     --14     RBGA
            CDUMA=CDUMA+C14*EC(IIPT,IRARBGA)
            CDUMAG1=CDUMAG1+C14*TWO*EC(IIPT,IRBGAGA)
            CDUMAG2=CDUMAG2+C14*EC(IIPT,IRBGAGC)
C     --15     RAGC
            CDUMA=CDUMA+C15*EC(IIPT,IRARAGC)
            CDUMAG1=CDUMAG1+C15*TWO*EC(IIPT,IRAGAGC)
            CDUMAG2=CDUMAG2+C15*EC(IIPT,IRAGCGC)
C     --16     RBGC
            CDUMA=CDUMA+C16*EC(IIPT,IRARBGC)
            CDUMAG1=CDUMAG1+C16*TWO*EC(IIPT,IRBGAGC)
            CDUMAG2=CDUMAG2+C16*EC(IIPT,IRBGCGC)
C     --17     GAGB
            CDUMA=CDUMA+C17*EC(IIPT,IRAGAGB)
            CDUMAG1=CDUMAG1+C17*TWO*EC(IIPT,IGAGAGB)
            CDUMAG2=CDUMAG2+C17*EC(IIPT,IGAGBGC)
C     --18     GAGC
            CDUMA=CDUMA+C18*EC(IIPT,IRAGAGC)
            CDUMAG1=CDUMAG1+C18*TWO*EC(IIPT,IGAGAGC)
            CDUMAG2=CDUMAG2+C18*EC(IIPT,IGAGCGC)
C     --19     GBGC
            CDUMA=CDUMA+C19*EC(IIPT,IRAGBGC)
            CDUMAG1=CDUMAG1+C19*TWO*EC(IIPT,IGAGBGC)
            CDUMAG2=CDUMAG2+C19*EC(IIPT,IGBGCGC)
C     --20     GCGC
            CDUMA=CDUMA+C20*EC(IIPT,IRAGCGC)
            CDUMAG1=CDUMAG1+C20*TWO*EC(IIPT,IGAGCGC)
            CDUMAG2=CDUMAG2+C20*EC(IIPT,IGCGCGC)
C     **BA_TERM=AB_TERM**
C     --ABORBA
            C11=DUMXX(4)
            C12=DUMNV2(1)*DUMNV(2)
            C13=TWO*DUMNV2(1)*DUMGRV(2)
            C14=TWO*DUMGRV2(1)*DUMNV(2)
            C15=DUMNV2(1)*DUMGRV(4)
            C16=DUMGRV2(3)*DUMNV(2)
            C17=FOUR*DUMGRV2(1)*DUMGRV(2)
            C18=TWO*DUMGRV2(1)*DUMGRV(4)
            C19=TWO*DUMGRV2(3)*DUMGRV(2)
            C20=DUMGRV2(3)*DUMGRV(4)
C     A-AB--11   GC
            CDUMA=CDUMA+C11*EC(IIPT,IRAGC)
            CDUMAG1=CDUMAG1+C11*TWO*EC(IIPT,IGAGC)
            CDUMAG2=CDUMAG2+C11*EC(IIPT,IGCGC)
C     --12     RARB
            CDUMA=CDUMA+C12*EC(IIPT,IRARARB)
            CDUMAG1=CDUMAG1+C12*TWO*EC(IIPT,IRARBGA)
            CDUMAG2=CDUMAG2+C12*EC(IIPT,IRARBGC)
C     --13     RAGB
            CDUMA=CDUMA+C13*EC(IIPT,IRARAGB)
            CDUMAG1=CDUMAG1+C13*TWO*EC(IIPT,IRAGAGB)
            CDUMAG2=CDUMAG2+C13*EC(IIPT,IRAGBGC)
C     --14     RBGA
            CDUMA=CDUMA+C14*EC(IIPT,IRARBGA)
            CDUMAG1=CDUMAG1+C14*TWO*EC(IIPT,IRBGAGA)
            CDUMAG2=CDUMAG2+C14*EC(IIPT,IRBGAGC)
C     --15     RAGC
            CDUMA=CDUMA+C15*EC(IIPT,IRARAGC)
            CDUMAG1=CDUMAG1+C15*TWO*EC(IIPT,IRAGAGC)
            CDUMAG2=CDUMAG2+C15*EC(IIPT,IRAGCGC)
C     --16     RBGC
            CDUMA=CDUMA+C16*EC(IIPT,IRARBGC)
            CDUMAG1=CDUMAG1+C16*TWO*EC(IIPT,IRBGAGC)
            CDUMAG2=CDUMAG2+C16*EC(IIPT,IRBGCGC)
C     --17     GAGB
            CDUMA=CDUMA+C17*EC(IIPT,IRAGAGB)
            CDUMAG1=CDUMAG1+C17*TWO*EC(IIPT,IGAGAGB)
            CDUMAG2=CDUMAG2+C17*EC(IIPT,IGAGBGC)
C     --18     GAGC
            CDUMA=CDUMA+C18*EC(IIPT,IRAGAGC)
            CDUMAG1=CDUMAG1+C18*TWO*EC(IIPT,IGAGAGC)
            CDUMAG2=CDUMAG2+C18*EC(IIPT,IGAGCGC)
C     --19     GBGC
            CDUMA=CDUMA+C19*EC(IIPT,IRAGBGC)
            CDUMAG1=CDUMAG1+C19*TWO*EC(IIPT,IGAGBGC)
            CDUMAG2=CDUMAG2+C19*EC(IIPT,IGBGCGC)
C     --20     GCGC
            CDUMA=CDUMA+C20*EC(IIPT,IRAGCGC)
            CDUMAG1=CDUMAG1+C20*TWO*EC(IIPT,IGAGCGC)
            CDUMAG2=CDUMAG2+C20*EC(IIPT,IGCGCGC)
C     ********G_ALPHA END***********DUM"A",DUM"A"G
C     ********G_BETA****************DUM"B",DUM"B"G
C     *RB OR GB OR GC
C     AA
            C1=TWO*DUMXX(1)
            C2=DUMNV(1)*DUMNV2(1)
            C3=TWO*DUMNV(1)*DUMGRV2(1)
            C4=TWO*DUMGRV(1)*DUMNV2(1)
            C5=DUMGRV(1)*DUMNV2(1)
            C6=DUMNV(1)*DUMGRV2(1)
            C7=FOUR*DUMGRV(1)*DUMGRV2(1)
            C8=TWO*DUMGRV(1)*DUMGRV2(1)
            C9=TWO*DUMGRV(1)*DUMGRV2(1)
            C10=DUMGRV(1)*DUMGRV2(1)
C     -- CORRELATION
            CDUMB=ZERO
            CDUMBG1=ZERO
            CDUMBG2=ZERO
C     B-AA--1     GA
            CDUMB=CDUMB+C1*EC(IIPT,IRBGA)
            CDUMBG1=CDUMBG1+C1*TWO*EC(IIPT,IGAGB)
            CDUMBG2=CDUMBG2+C1*EC(IIPT,IGAGC)
C     --2        RARA
            CDUMB=CDUMB+C2*EC(IIPT,IRARARB)
            CDUMBG1=CDUMBG1+C2*TWO*EC(IIPT,IRARAGB)
            CDUMBG2=CDUMBG2+C2*EC(IIPT,IRARAGC)
C     --3        RAGA
            CDUMB=CDUMB+C3*EC(IIPT,IRARBGA)
            CDUMBG1=CDUMBG1+C3*TWO*EC(IIPT,IRAGAGB)
            CDUMBG2=CDUMBG2+C3*EC(IIPT,IRAGAGC)
C     --4        RAGA
            CDUMB=CDUMB+C4*EC(IIPT,IRARBGA)
            CDUMBG1=CDUMBG1+C4*TWO*EC(IIPT,IRAGAGB)
            CDUMBG2=CDUMBG2+C4*EC(IIPT,IRAGAGC)
C     --5        RAGC
            CDUMB=CDUMB+C5*EC(IIPT,IRARBGC)
            CDUMBG1=CDUMBG1+C5*TWO*EC(IIPT,IRAGBGC)
            CDUMBG2=CDUMBG2+C5*EC(IIPT,IRAGCGC)
C     --6        RAGC
            CDUMB=CDUMB+C6*EC(IIPT,IRARBGC)
            CDUMBG1=CDUMBG1+C6*TWO*EC(IIPT,IRAGBGC)
            CDUMBG2=CDUMBG2+C6*EC(IIPT,IRAGCGC)
C     --7        GAGA
            CDUMB=CDUMB+C7*EC(IIPT,IRBGAGA)
            CDUMBG1=CDUMBG1+C7*TWO*EC(IIPT,IGAGAGB)
            CDUMBG2=CDUMBG2+C7*EC(IIPT,IGAGAGC)
C     --8        GAGC
            CDUMB=CDUMB+C8*EC(IIPT,IRBGAGC)
            CDUMBG1=CDUMBG1+C8*TWO*EC(IIPT,IGAGBGC)
            CDUMBG2=CDUMBG2+C8*EC(IIPT,IGAGCGC)
C     --9        GAGC
            CDUMB=CDUMB+C9*EC(IIPT,IRBGAGC)
            CDUMBG1=CDUMBG1+C9*TWO*EC(IIPT,IGAGBGC)
            CDUMBG2=CDUMBG2+C9*EC(IIPT,IGAGCGC)
C     --10       GCGC
            CDUMB=CDUMB+C10*EC(IIPT,IRBGCGC)
            CDUMBG1=CDUMBG1+C10*TWO*EC(IIPT,IGBGCGC)
            CDUMBG2=CDUMBG2+C10*EC(IIPT,IGCGCGC)
C     --BB
            C1=TWO*DUMXX(2)
            C2=DUMNV(2)*DUMNV2(2)
            C3=TWO*DUMNV(2)*DUMGRV2(2)
            C4=TWO*DUMGRV(2)*DUMNV2(2)
            C5=DUMGRV(2)*DUMNV2(2)
            C6=DUMNV(2)*DUMGRV2(2)
            C7=FOUR*DUMGRV(2)*DUMGRV2(2)
            C8=TWO*DUMGRV(2)*DUMGRV2(2)
            C9=TWO*DUMGRV(2)*DUMGRV2(2)
            C10=DUMGRV(2)*DUMGRV2(2)
C     -- EXCHANGE
            XDUMB=ZERO
            XDUMBG=ZERO
C     B-BB--1      GB
            XDUMB=XDUMB+C1*EX(IIPT,KRBGB)
            XDUMBG=XDUMBG+C1*TWO*EX(IIPT,KGBGB)
C     --2          RBRB
            XDUMB=XDUMB+C2*EX(IIPT,KRBRBRB)
            XDUMBG=XDUMBG+C2*TWO*EX(IIPT,KRBRBGB)
C     --3          RBGB
            XDUMB=XDUMB+C3*EX(IIPT,KRBRBGB)
            XDUMBG=XDUMBG+C3*TWO*EX(IIPT,KRBGBGB)
C     --4          RBGB
            XDUMB=XDUMB+C4*EX(IIPT,KRBRBGB)
            XDUMBG=XDUMBG+C4*TWO*EX(IIPT,KRBGBGB)
C     --7          GBGB
            XDUMB=XDUMB+C7*EX(IIPT,KRBGBGB)
            XDUMBG=XDUMBG+C7*TWO*EX(IIPT,KGBGBGB)
C     B-BB--1      GB
            CDUMB=CDUMB+C1*EC(IIPT,IRBGB)
            CDUMBG1=CDUMBG1+C1*TWO*EC(IIPT,IGBGB)
            CDUMBG2=CDUMBG2+C1*EC(IIPT,IGBGC)
C     --2        RBRB
            CDUMB=CDUMB+C2*EC(IIPT,IRBRBRB)
            CDUMBG1=CDUMBG1+C2*TWO*EC(IIPT,IRBRBGB)
            CDUMBG2=CDUMBG2+C2*EC(IIPT,IRBRBGC)
C     --3        RBGB
            CDUMB=CDUMB+C3*EC(IIPT,IRBRBGB)
            CDUMBG1=CDUMBG1+C3*TWO*EC(IIPT,IRBGBGB)
            CDUMBG2=CDUMBG2+C3*EC(IIPT,IRBGBGC)
C     --4        RBGB
            CDUMB=CDUMB+C4*EC(IIPT,IRBRBGB)
            CDUMBG1=CDUMBG1+C4*TWO*EC(IIPT,IRBGBGB)
            CDUMBG2=CDUMBG2+C4*EC(IIPT,IRBGBGC)
C     --5        RBGC
            CDUMB=CDUMB+C5*EC(IIPT,IRBRBGC)
            CDUMBG1=CDUMBG1+C5*TWO*EC(IIPT,IRBGBGC)
            CDUMBG2=CDUMBG2+C5*EC(IIPT,IRBGCGC)
C     --6        RBGC
            CDUMB=CDUMB+C6*EC(IIPT,IRBRBGC)
            CDUMBG1=CDUMBG1+C6*TWO*EC(IIPT,IRBGBGC)
            CDUMBG2=CDUMBG2+C6*EC(IIPT,IRBGCGC)
C     --7        GBGB
            CDUMB=CDUMB+C7*EC(IIPT,IRBGBGB)
            CDUMBG1=CDUMBG1+C7*TWO*EC(IIPT,IGBGBGB)
            CDUMBG2=CDUMBG2+C7*EC(IIPT,IGBGBGC)
C     --8        GBGC
            CDUMB=CDUMB+C8*EC(IIPT,IRBGBGC)
            CDUMBG1=CDUMBG1+C8*TWO*EC(IIPT,IGBGBGC)
            CDUMBG2=CDUMBG2+C8*EC(IIPT,IGBGCGC)
C     --9        GBGC
            CDUMB=CDUMB+C9*EC(IIPT,IRBGBGC)
            CDUMBG1=CDUMBG1+C9*TWO*EC(IIPT,IGBGBGC)
            CDUMBG2=CDUMBG2+C9*EC(IIPT,IGBGCGC)
C     --10       GCGC
            CDUMB=CDUMB+C10*EC(IIPT,IRBGCGC)
            CDUMBG1=CDUMBG1+C10*TWO*EC(IIPT,IGBGCGC)
            CDUMBG2=CDUMBG2+C10*EC(IIPT,IGCGCGC)
C     --ABORBA
            C11=DUMXX(3)
            C12=DUMNV(1)*DUMNV2(2)
            C13=TWO*DUMNV(1)*DUMGRV2(2)
            C14=TWO*DUMGRV(1)*DUMNV2(2)
            C15=DUMNV(1)*DUMGRV2(4)
            C16=DUMGRV(3)*DUMNV2(2)
            C17=FOUR*DUMGRV(1)*DUMGRV2(2)
            C18=TWO*DUMGRV(1)*DUMGRV2(4)
            C19=TWO*DUMGRV(3)*DUMGRV2(2)
            C20=DUMGRV(3)*DUMGRV2(4)
C     B-AB--11   GC
            CDUMB=CDUMB+C11*EC(IIPT,IRBGC)
            CDUMBG1=CDUMBG1+C11*TWO*EC(IIPT,IGBGC)
            CDUMBG2=CDUMBG2+C11*EC(IIPT,IGCGC)
C     --12     RARB
            CDUMB=CDUMB+C12*EC(IIPT,IRARBRB)
            CDUMBG1=CDUMBG1+C12*TWO*EC(IIPT,IRARBGB)
            CDUMBG2=CDUMBG2+C12*EC(IIPT,IRARBGC)
C     --13     RAGB
            CDUMB=CDUMB+C13*EC(IIPT,IRARBGB)
            CDUMBG1=CDUMBG1+C13*TWO*EC(IIPT,IRAGBGB)
            CDUMBG2=CDUMBG2+C13*EC(IIPT,IRAGBGC)
C     --14     RBGA
            CDUMB=CDUMB+C14*EC(IIPT,IRBRBGA)
            CDUMBG1=CDUMBG1+C14*TWO*EC(IIPT,IRBGAGB)
            CDUMBG2=CDUMBG2+C14*EC(IIPT,IRBGAGC)
C     --15     RAGC
            CDUMB=CDUMB+C15*EC(IIPT,IRARBGC)
            CDUMBG1=CDUMBG1+C15*TWO*EC(IIPT,IRAGBGC)
            CDUMBG2=CDUMBG2+C15*EC(IIPT,IRAGCGC)
C     --16     RBGC
            CDUMB=CDUMB+C16*EC(IIPT,IRBRBGC)
            CDUMBG1=CDUMBG1+C16*TWO*EC(IIPT,IRBGBGC)
            CDUMBG2=CDUMBG2+C16*EC(IIPT,IRBGCGC)
C     --17     GAGB
            CDUMB=CDUMB+C17*EC(IIPT,IRBGAGB)
            CDUMBG1=CDUMBG1+C17*TWO*EC(IIPT,IGAGBGB)
            CDUMBG2=CDUMBG2+C17*EC(IIPT,IGAGBGC)
C     --18     GAGC
            CDUMB=CDUMB+C18*EC(IIPT,IRBGAGC)
            CDUMBG1=CDUMBG1+C18*TWO*EC(IIPT,IGAGBGC)
            CDUMBG2=CDUMBG2+C18*EC(IIPT,IGAGCGC)
C     --19     GBGC
            CDUMB=CDUMB+C19*EC(IIPT,IRBGBGC)
            CDUMBG1=CDUMBG1+C19*TWO*EC(IIPT,IGBGBGC)
            CDUMBG2=CDUMBG2+C19*EC(IIPT,IGBGCGC)
C     --20     GCGC
            CDUMB=CDUMB+C20*EC(IIPT,IRBGCGC)
            CDUMBG1=CDUMBG1+C20*TWO*EC(IIPT,IGBGCGC)
            CDUMBG2=CDUMBG2+C20*EC(IIPT,IGCGCGC)
C     **BA_TERM=AB_TERM**
            C11=DUMXX(4)
            C12=DUMNV2(1)*DUMNV(2)
            C13=TWO*DUMNV2(1)*DUMGRV(2)
            C14=TWO*DUMGRV2(1)*DUMNV(2)
            C15=DUMNV2(1)*DUMGRV(4)
            C16=DUMGRV2(3)*DUMNV(2)
            C17=FOUR*DUMGRV2(1)*DUMGRV(2)
            C18=TWO*DUMGRV2(1)*DUMGRV(4)
            C19=TWO*DUMGRV2(3)*DUMGRV(2)
            C20=DUMGRV2(3)*DUMGRV(4)
C     B-BA--11   GC
            CDUMB=CDUMB+C11*EC(IIPT,IRBGC)
            CDUMBG1=CDUMBG1+C11*TWO*EC(IIPT,IGBGC)
            CDUMBG2=CDUMBG2+C11*EC(IIPT,IGCGC)
C     --12     RARB
            CDUMB=CDUMB+C12*EC(IIPT,IRARBRB)
            CDUMBG1=CDUMBG1+C12*TWO*EC(IIPT,IRARBGB)
            CDUMBG2=CDUMBG2+C12*EC(IIPT,IRARBGC)
C     --13     RAGB
            CDUMB=CDUMB+C13*EC(IIPT,IRARBGB)
            CDUMBG1=CDUMBG1+C13*TWO*EC(IIPT,IRAGBGB)
            CDUMBG2=CDUMBG2+C13*EC(IIPT,IRAGBGC)
C     --14     RBGA
            CDUMB=CDUMB+C14*EC(IIPT,IRBRBGA)
            CDUMBG1=CDUMBG1+C14*TWO*EC(IIPT,IRBGAGB)
            CDUMBG2=CDUMBG2+C14*EC(IIPT,IRBGAGC)
C     --15     RAGC
            CDUMB=CDUMB+C15*EC(IIPT,IRARBGC)
            CDUMBG1=CDUMBG1+C15*TWO*EC(IIPT,IRAGBGC)
            CDUMBG2=CDUMBG2+C15*EC(IIPT,IRAGCGC)
C     --16     RBGC
            CDUMB=CDUMB+C16*EC(IIPT,IRBRBGC)
            CDUMBG1=CDUMBG1+C16*TWO*EC(IIPT,IRBGBGC)
            CDUMBG2=CDUMBG2+C16*EC(IIPT,IRBGCGC)
C     --17     GAGB
            CDUMB=CDUMB+C17*EC(IIPT,IRBGAGB)
            CDUMBG1=CDUMBG1+C17*TWO*EC(IIPT,IGAGBGB)
            CDUMBG2=CDUMBG2+C17*EC(IIPT,IGAGBGC)
C     --18     GAGC
            CDUMB=CDUMB+C18*EC(IIPT,IRBGAGC)
            CDUMBG1=CDUMBG1+C18*TWO*EC(IIPT,IGAGBGC)
            CDUMBG2=CDUMBG2+C18*EC(IIPT,IGAGCGC)
C     --19     GBGC
            CDUMB=CDUMB+C19*EC(IIPT,IRBGBGC)
            CDUMBG1=CDUMBG1+C19*TWO*EC(IIPT,IGBGBGC)
            CDUMBG2=CDUMBG2+C19*EC(IIPT,IGBGCGC)
C     --20     GCGC
            CDUMB=CDUMB+C20*EC(IIPT,IRBGCGC)
            CDUMBG1=CDUMBG1+C20*TWO*EC(IIPT,IGBGCGC)
            CDUMBG2=CDUMBG2+C20*EC(IIPT,IGCGCGC)
C     ********G_BETA END************DUM"B",DUM"B"G
C     *****F_CORE_END**********************
C
C     ********EDGE****************
C
C     --EXCHANGE
C
C     --GA*
            XDUMAGEA=0
C     --E1 (GA)*RA
            XDUMAGEA=XDUMAGEA+TWO*TWO*DUMNV(1)*EX(IIPT,KRAGA)
C     --E2 (GA)*GA
            XDUMAGEA=XDUMAGEA+TWO*TWO*TWO*DUMGRV(2)*EX(IIPT,KGAGA)
C
C     --GB
            XDUMAGEB=0
C     --E1 (GB)*RB
            XDUMAGEB=XDUMAGEB+TWO*TWO*DUMNV(2)*EX(IIPT,KRBGB)
C     --E2 (GB)*GB
            XDUMAGEB=XDUMAGEB+TWO*TWO*TWO*DUMGRV(2)*EX(IIPT,KGBGB)
C
C     --CORRELATION
C
            CDUMAGEA=ZERO
C     --GA
C     --E1A GA*RA
            CDUMAGEA=CDUMAGEA+TWO*DUMNV(1)*TWO*EC(IIPT,IRAGA)
C     --E2A GA*GA
            CDUMAGEA=CDUMAGEA+TWO*DUMGRV(1)*TWO*TWO*EC(IIPT,IGAGA)
C     --E3A GA*GC !
            CDUMAGEA=CDUMAGEA+TWO*DUMGRV(3)*TWO*EC(IIPT,IGAGC)
C     --E1B GA*RB
            CDUMAGEA=CDUMAGEA+TWO*DUMNV(2)*TWO*EC(IIPT,IRBGA)
C     --E2B GA*GB
            CDUMAGEA=CDUMAGEA+TWO*DUMGRV(2)*TWO*TWO*EC(IIPT,IGAGB)
C     --E3B GA*GC
            CDUMAGEA=CDUMAGEA+TWO*DUMGRV(4)*TWO*EC(IIPT,IGAGC)
C
            CDUMAGEB=ZERO
C     --GB
C     --E1A GB*RA
            CDUMAGEB=CDUMAGEB+TWO*DUMNV(1)*TWO*EC(IIPT,IRAGB)
C     --E2A GB*GA
            CDUMAGEB=CDUMAGEB+TWO*DUMGRV(1)*TWO*TWO*EC(IIPT,IGAGB)
C     --E3A GB*GC !
            CDUMAGEB=CDUMAGEB+TWO*DUMGRV(3)*TWO*EC(IIPT,IGBGC)
C     --E1B GB*RB
            CDUMAGEB=CDUMAGEB+TWO*DUMNV(2)*TWO*EC(IIPT,IRBGB)
C     --E2B GB*GB
            CDUMAGEB=CDUMAGEB+TWO*DUMGRV(2)*TWO*TWO*EC(IIPT,IGBGB)
C     --E3B GB*GC
            CDUMAGEB=CDUMAGEB+TWO*DUMGRV(4)*TWO*EC(IIPT,IGBGC)
C
            CDUMAGEC=ZERO
C     --GC*
C     --E1A GC*RA
            CDUMAGEC=CDUMAGEC+TWO*DUMNV(1)*EC(IIPT,IRAGC)
C     --E2A GCA*GA
            CDUMAGEC=CDUMAGEC+TWO*DUMGRV(1)*TWO*EC(IIPT,IGAGC)
C     --E3A GCA*GC
            CDUMAGEC=CDUMAGEC+TWO*DUMGRV(3)*EC(IIPT,IGCGC)
C     --E1B GCA*RB
            CDUMAGEC=CDUMAGEC+TWO*DUMNV(2)*EC(IIPT,IRBGC)
C     --E2B GCA*GB
            CDUMAGEC=CDUMAGEC+TWO*DUMGRV(2)*TWO*EC(IIPT,IGBGC)
C     --E3B GCA*GC
            CDUMAGEC=CDUMAGEC+TWO*DUMGRV(4)*EC(IIPT,IGCGC)
C
C     ********EDGE****************
C
C     --EXCHANGE
C
C     --GA*
            XDUMAGEA2=0
C     --E1 (GA)*RA
            XDUMAGEA2=XDUMAGEA2+TWO*TWO*DUMNV2(1)*EX(IIPT,KRAGA)
C     --E2 (GA)*GA
            XDUMAGEA2=XDUMAGEA2+TWO*TWO*TWO*DUMGRV2(2)*EX(IIPT,KGAGA)
C
C     --GB
            XDUMAGEB2=0
C     --E1 (GB)*RB
            XDUMAGEB2=XDUMAGEB2+TWO*TWO*DUMNV2(2)*EX(IIPT,KRBGB)
C     --E2 (GB)*GB
            XDUMAGEB2=XDUMAGEB2+TWO*TWO*TWO*DUMGRV2(2)*EX(IIPT,KGBGB)
C
C     --CORRELATION
C
            CDUMAGEA2=ZERO
C     --GA
C     --E1A GA*RA
            CDUMAGEA2=CDUMAGEA2+TWO*DUMNV2(1)*TWO*EC(IIPT,IRAGA)
C     --E2A GA*GA
            CDUMAGEA2=CDUMAGEA2+TWO*DUMGRV2(1)*TWO*TWO*EC(IIPT,IGAGA)
C     --E3A GA*GC !
            CDUMAGEA2=CDUMAGEA2+TWO*DUMGRV2(3)*TWO*EC(IIPT,IGAGC)
C     --E1B GA*RB
            CDUMAGEA2=CDUMAGEA2+TWO*DUMNV2(2)*TWO*EC(IIPT,IRBGA)
C     --E2B GA*GB
            CDUMAGEA2=CDUMAGEA2+TWO*DUMGRV2(2)*TWO*TWO*EC(IIPT,IGAGB)
C     --E3B GA*GC
            CDUMAGEA2=CDUMAGEA2+TWO*DUMGRV2(4)*TWO*EC(IIPT,IGAGC)
C
            CDUMAGEB2=ZERO
C     --GB
C     --E1A GB*RA
            CDUMAGEB2=CDUMAGEB2+TWO*DUMNV2(1)*TWO*EC(IIPT,IRAGB)
C     --E2A GB*GA
            CDUMAGEB2=CDUMAGEB2+TWO*DUMGRV2(1)*TWO*TWO*EC(IIPT,IGAGB)
C     --E3A GB*GC !
            CDUMAGEB2=CDUMAGEB2+TWO*DUMGRV2(3)*TWO*EC(IIPT,IGBGC)
C     --E1B GB*RB
            CDUMAGEB2=CDUMAGEB2+TWO*DUMNV2(2)*TWO*EC(IIPT,IRBGB)
C     --E2B GB*GB
            CDUMAGEB2=CDUMAGEB2+TWO*DUMGRV2(2)*TWO*TWO*EC(IIPT,IGBGB)
C     --E3B GB*GC
            CDUMAGEB2=CDUMAGEB2+TWO*DUMGRV2(4)*TWO*EC(IIPT,IGBGC)
C
            CDUMAGEC2=ZERO
C     --GC*
C     --E1A GC*RA
            CDUMAGEC2=CDUMAGEC2+TWO*DUMNV2(1)*EC(IIPT,IRAGC)
C     --E2A GCA*GA
            CDUMAGEC2=CDUMAGEC2+TWO*DUMGRV2(1)*TWO*EC(IIPT,IGAGC)
C     --E3A GCA*GC
            CDUMAGEC2=CDUMAGEC2+TWO*DUMGRV2(3)*EC(IIPT,IGCGC)
C     --E1B GCA*RB
            CDUMAGEC2=CDUMAGEC2+TWO*DUMNV2(2)*EC(IIPT,IRBGC)
C     --E2B GCA*GB
            CDUMAGEC2=CDUMAGEC2+TWO*DUMGRV2(2)*TWO*EC(IIPT,IGBGC)
C     --E3B GCA*GC
            CDUMAGEC2=CDUMAGEC2+TWO*DUMGRV2(4)*EC(IIPT,IGCGC)
C     ********EDGE END************
C
C     --CONTRUCTION
C     ALPHA
            DUM1A=XDUMA+CDUMA
            DUM2A=XDUMAG+CDUMAG1+CDUMAG2
            DUM3A=XDUMAGEA+CDUMAGEA+CDUMAGEC
            DUM4A=XDUMAGEA2+CDUMAGEA2+CDUMAGEC2
C     BETA
C     DUM1B=XDUMB+CDUMB
C     DUM2B=XDUMBG+CDUMBG1+CDUMBG2
C     DUM3B=XDUMAGEB+CDUMAGEB+CDUMAGEC
C     NOW, ONLY ALPHA..
            COEF(1,IIPT)=DUM1A
            COEF(2,IIPT)=DUM2A
            COEF(3,IIPT)=DUM3A/TWO
            COEF(4,IIPT)=DUM4A/TWO
         ENDIF
      END DO
      RETURN
      END
C*MODULE TDDNLR  *DECK NUMFK2
      SUBROUTINE NUMFK2(RHO,TAU,RCUTOFF,F,DRHOI_,DTRAI_,DTRAI2_,
     *                 DTAUI_,COEF,WGT,GAO,VALGA,IST,IEND,L1,NPTGRD)
C
C     A MODIFIED VERSION OF NUMFK AS IN TDDFXC.SRC
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION F(*)
      DIMENSION DRHOI_(NPTGRD,*)
      DIMENSION DTRAI_(5,*)
      DIMENSION DTRAI2_(5,*)
      DIMENSION COEF(6,*)
      DIMENSION DTAUI_(*)
      DIMENSION WGT(NPTGRD)
      DIMENSION GAO(4,L1,*)
      DIMENSION VALGA(L1)
C
      DATA ZERO      /0.0D+00/
      DATA TWO       /2.0D+00/
C
C     -- GRID LOOP
C
      DO 200 IPT=IST,IEND
         IIPT=IPT-IST+1
         RHOI = DRHOI_(IPT,1)
         IF(RHOI*TWO.LT.RCUTOFF) GOTO 200
         FTOTWT=WGT(IPT)
C
         C1=COEF(1,IIPT)
         C2=COEF(2,IIPT)
         C3=COEF(3,IIPT)
         C4=COEF(4,IIPT)
C
         DRHOIX=DRHOI_(IPT,2)
         DRHOIY=DRHOI_(IPT,3)
         DRHOIZ=DRHOI_(IPT,4)
         DXB=DTRAI_(2,IIPT)
         DYB=DTRAI_(3,IIPT)
         DZB=DTRAI_(4,IIPT)
         DXB2=DTRAI2_(2,IIPT)
         DYB2=DTRAI2_(3,IIPT)
         DZB2=DTRAI2_(4,IIPT)
C
         IND=1
         AOMAX=ZERO
         AMAXVAL=ZERO
         DO M=1,L1
            PM=GAO(1,M,IIPT)
            PMX=GAO(2,M,IIPT)
            PMY=GAO(3,M,IIPT)
            PMZ=GAO(4,M,IIPT)
C
            VALGA(M)=(C1/TWO*PM+C2*DRHOIX*PMX+C2*DRHOIY*PMY+
     *                C2*DRHOIZ*PMZ+C3*DXB2*PMX+C3*DYB2*PMY+
     *                C3*DZB2*PMZ+C4*DXB*PMX+C4*DYB*PMY+
     *                C4*DZB*PMZ)*FTOTWT
C
            VM=VALGA(M)
            AOMAX=MAX(AOMAX,ABS(PM))
            AMAXVAL=MAX(AMAXVAL,ABS(VM))
            DO N=1,M
               PN=GAO(1,N,IIPT)
               F(IND)=F(IND)+PM*VALGA(N)+VM*PN
               IND=IND+1
            END DO
         END DO
C
C     -- DEBUG DENSITY
C
         RHO   =RHO   +TWO*RHOI *WGT(IPT)
         TAU   =TAU   +TWO*DTAUI_(IPT) *WGT(IPT)
  200 CONTINUE
      RETURN
      END
C*MODULE TDDNLR  *DECK XYOM
      SUBROUTINE XYOM(XOM,YOM,K,OMEGA,VLO,
     &VRO,TXYZ,EE,INXOV,LX,L7,NDSR)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION TXYZ(3,NDSR),EE(NDSR)
      DIMENSION XOM(LX,LX),YOM(LX,LX)
      DIMENSION VRO(L7,NDSR)
      DIMENSION VLO(L7,NDSR)
      DIMENSION INXOV(2,*)
C
      DATA ZERO /0.0D+00/
      DATA TWO  /2.0D+00/
C
      CALL VCLR(XOM,1,LX*LX)
      CALL VCLR(YOM,1,LX*LX)
      DO IPR=1,L7
         I=INXOV(1,IPR)
         J=INXOV(2,IPR)
         DUM11=ZERO
         DUM22=ZERO
         DO IST=1,NDSR
            DUM1=EE(IST)*TXYZ(K,IST)*SQRT(TWO)*VRO(IPR,IST)
     &/(EE(IST)*EE(IST)-OMEGA*OMEGA)
            DUM2=OMEGA*TXYZ(K,IST)*SQRT(TWO)*VLO(IPR,IST)
     &/(EE(IST)*EE(IST)-OMEGA*OMEGA)
            DUM11=DUM11+DUM1
            DUM22=DUM22+DUM2
         ENDDO
          XOM(I,J)=(DUM11+DUM22)/2.0D+00
          YOM(I,J)=(DUM11-DUM22)/2.0D+00
      ENDDO
C
      RETURN
      END
