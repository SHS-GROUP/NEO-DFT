      subroutine ddi_acc(g_a, ilo, ihi, jlo, jhi, buf)
      implicit none
      integer g_a, ilo, ihi, jlo, jhi
      double precision buf(*)
      double precision one
      parameter(one = 1.0d0)
      call ga_acc(g_a, ilo, ihi, jlo, jhi, buf, (ihi-ilo)+1, one)
      return
      end subroutine

      subroutine ddi_bcast(tag,type,buf,lenbuf,root)
      implicit none
      character type
      integer buf(*)
      integer lenbuf, root,tag
#include "global.fh"
#include "mafdecls.fh"
      integer gtype
      gtype=MT_F_DBL
      if(type.eq.'i'.or.type.eq.'I') gtype=MT_F_INT
      CALL ga_brdcst(MT_BYTE, buf, ma_sizeof(gtype,lenbuf,MT_BYTE),root)
      return
      end subroutine


      subroutine ddi_create(dim1,dim2,g_a)
      implicit none
      integer dim1,dim2,array_name,g_a
#include "global.fh"
#include "mafdecls.fh"
      if(.not.ga_create(MT_DBL,dim1,dim2,'g_a',dim1,0,g_a)) then
         call ga_error('ddi_create: failed',-1)
      endif
      return
      end subroutine

      subroutine ddi_destroy(handle)
      implicit none
      integer handle
#include "global.fh"
      if(.not.ga_destroy(handle)) then
         call ga_error('ddi_destroy failed',-1)
      endif
      return
      end subroutine

      subroutine ddi_distrib(g_a,iproc, ilo, ihi, jlo, jhi)
      implicit none
      integer g_a,iproc, ilo, ihi, jlo, jhi
#include "global.fh"
      call ga_distribution(g_a, iproc, ilo, ihi, jlo, jhi)
      return
      end subroutine

      subroutine ddi_dlbnext(next)
      implicit none
      integer next
      integer g_dlb,masters
      common /ddi2ga/ g_dlb,masters
#include "global.fh" 
      next = ga_read_inc(g_dlb, 1, 1, 1)      
      return
      end subroutine

      subroutine ddi_dlbreset()
      implicit none
      integer g_dlb,masters
      common /ddi2ga/ g_dlb,masters
#include "global.fh" 
      call ga_sync()
      call ga_fill(g_dlb,0)
      call ga_sync()
      return
      end subroutine

      subroutine ddi_gdlbnext()
      call ga_error('DDI to GA: DDI_GDLBNEXT is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_gdlbreset()

      call ga_error('DDI to GA: DDI_GDLBRESET is not implemented ',
     *               __LINE__ )

      return
      end subroutine

      subroutine ddi_get(g_a, ilo, ihi, jlo, jhi, buf)
      implicit none
      integer g_a, ilo, ihi, jlo, jhi
      integer buf(*)
#include "global.fh"
      call ga_get(g_a, ilo, ihi, jlo, jhi, buf, ihi-ilo+1)
      return
      end subroutine

      subroutine ddi_get_comm()

      call ga_error('DDI to GA: DDI_GET_COMM is not implemented ',
     *               __LINE__ )

      return
      end subroutine

      subroutine ddi_group_create()

      call ga_error('DDI to GA: DDI_GROUP_CREATE is not implemented ',
     *               __LINE__ )

      return
      end subroutine

      subroutine ddi_group_create_custom()

      call ga_error('DDI to GA: GROUP_CREATE_CUSTOM not implemented ',
     *               __LINE__ )

      return
      end subroutine

      subroutine ddi_gsumf(tag,x,len)
      implicit none
      double precision x(*)
      integer len,tag

#include "global.fh"
#include "mafdecls.fh"

      integer max,n,i
      i = 0
      do while (i.ne.len)
         n = min(2**31, len-i)
         call ga_dgop(MT_DBL,x(i+1),n,'+')
         i = i+n
      enddo
      return
      end subroutine

      subroutine ddi_gsumi(tag,x,len)

      implicit none
      integer x(*)
      integer len,tag

#include "global.fh"
#include "mafdecls.fh"

      call ga_igop(MT_F_INT,x,len,'+')

      return
      end subroutine

      subroutine ddi_irecv()

      call ga_error('DDI to GA: DDI_IRECV is not implemented ',
     *               __LINE__ )

      return
      end subroutine

      subroutine ddi_isend()

      call ga_error('DDI to GA: DDI_ISEND is not implemented ',
     *               __LINE__ )

      return
      end subroutine

      subroutine ddi_level(level)
      implicit none
      integer level
      level = 2

      return
      end subroutine

      subroutine ddi_masters_bcast(tag,type,buf,lenbuf,root)
      implicit none
      character type
      integer buf(*)
      integer lenbuf, root,tag
      integer g_dlb,masters
      COMMON /ddi2ga/ g_dlb,masters
#include "global.fh"
#include "mafdecls.fh"
      integer gtype
      gtype=MT_F_DBL
      if(type.eq.'i'.or.type.eq.'I') gtype=MT_F_INT
      CALL ga_PGROUP_brdcst(masters, MT_BYTE, buf,
     $     ma_sizeof(gtype,lenbuf,MT_BYTE), root)
      return
      end subroutine

      subroutine ddi_masters_gsumf(tag,data,size)
      implicit none
      integer tag,size
      double precision data(*)
      integer g_dlb,masters
      COMMON /ddi2ga/ g_dlb,masters
#include "global.fh"
#include "mafdecls.fh"
      integer max,n,i
      i = 0
      do while (i.ne.size)
         n = min(2**27, size-i)
         call GA_PGROUP_DGOP(masters,MT_DBL,data(i+1),n,'+')
         i = i+n
      enddo
      return
      end subroutine

      subroutine ddi_masters_gsumi(tag, data, size)
      implicit none
      integer tag,size
      integer data(*)
      integer g_dlb,masters
      COMMON /ddi2ga/ g_dlb,masters
#include "global.fh"
#include "mafdecls.fh"
      integer max,n,i
      i = 0
      do while (i.ne.size)
         n = min(2**27, size-i)
         call GA_PGROUP_DGOP(masters,MT_F_INT,data(i+1),n,'+')
         i = i+n
      enddo
      return
      end subroutine

      subroutine ddi_memory(mem_rep,mem_ddi,exetyp)
      implicit none
      integer mem_rep,mem_ddi,exetyp
      integer g_dlb,masters
      COMMON /ddi2ga/ g_dlb,masters

      integer global,limit
      integer stack,heap
      LOGICAL STATUS

#include "global.fh"
#include "mafdecls.fh"

      global = max(mem_ddi*(10**6)*8, 1024)
      limit = (global+GA_Nnodes()-1)/GA_Nnodes()
c$$$      write (*,*) "GA limit: ",limit
      heap = 0
      stack = 4*(2**20)
      if (ga_uses_ma()) then
         status = ma_init(MT_BYTE, stack, heap+limit)
      else
         status = ma_init(MT_BYTE, stack, heap)
c$$$         call ga_set_memory_limit(ma_sizeof(MT_BYTE,limit,MT_BYTE)) 
      endif
      if(.not. status) call ga_error('ddi_memory: memory failed',-1)
      call ga_initialize_ltd(limit)

      if(.not.ga_create(MT_F_INT, 1, 1, 'counter', 1, 1, g_dlb)) 
     $     call ga_error('ddi_memory: dlb counter failed',-1)
      call ga_fill(g_dlb,0)
      call ga_sync()

      return
      end subroutine

      subroutine ddi_ndistrib()

      call ga_error('DDI to GA: DDI_NDISTRIB is not implemented ',
     *               __LINE__ )

      return
      end subroutine

      subroutine ddi_ngroup()

      call ga_error('DDI to GA: DDI_NGROUP is not implemented ',
     *               __LINE__ )

      return
      end subroutine

      subroutine ddi_nnode(nn,in)
      integer nn,in
      integer GA_Cluster_nnodes, GA_Cluster_nodeid
      nn = GA_Cluster_nnodes()
      in = GA_Cluster_nodeid()
      return
      end subroutine

      subroutine ddi_nproc(np,ip)
      integer np,ip
      integer ga_nodeid, ga_nnodes

      ip = ga_nodeid()
      np = ga_nnodes() 

      return
      end subroutine

      subroutine ddi_output(output)
      implicit none
      integer output
      return
      end subroutine

      subroutine ddi_pbeg()
      implicit none
      integer level, ierr
#include "global.fh"  
#include "mafdecls.fh"
      call gamess_mpi_init()
      call ga_initialize()
      !write(6,*) "GA Initialized"
c$$$      call ga_set_debug(.true.)
c$$$      if(ga_nodeid().eq.0)   
c$$$     $     write(6,*)'size MT_F_INT',ma_sizeof(MT_F_INT,1,MT_BYTE)
      call ddi_ga_create_masters(GA_Cluster_nnodes())
      return
      end subroutine

      subroutine ddi_ga_create_masters(nnodes)
      integer nnodes
      integer list(nnodes)
      integer g_dlb,masters
      common /ddi2ga/ g_dlb,masters
#include "global.fh"
      do n=1,nnodes
         list(n) = GA_Cluster_procid(n-1,0)
      enddo
      masters = GA_Pgroup_create(list, nnodes)
      return
      end subroutine

      subroutine ddi_pend()
      call ga_terminate()
      call mpi_finalize()
      return
      end subroutine

      subroutine ddi_procdlb_create()
      call ga_error('DDI to GA: DDI_PROCDLB_CREATE is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_procdlb_destroy()
      call ga_error('DDI to GA: DDI_PROCDLB_DESTROY not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_procdlb_next()
      call ga_error('DDI to GA: DDI_PROCDLB_NEXT is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_procdlb_reset()
      call ga_error('DDI to GA: DDI_PROCDLB_RESET is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_put(g_a,ilo,ihi,jlo,jhi,buf)
      implicit none
      integer g_a,ilo,ihi,jlo,jhi
      double precision buf(*)
      call ga_put(g_a, ilo, ihi, jlo, jhi, buf, ihi-ilo+1)
      return
      end subroutine

      subroutine ddi_put_comm()
      call ga_error('DDI to GA: DDI_PUT_COMM is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_recv()
      call ga_error('DDI to GA: DDI_RECV is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_scope()
      call ga_error('DDI to GA: DDI_SCOPE is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_ascope()
      call ga_error('DDI to GA: DDI_ASCOPE is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_send(size, buffer, rank)
      implicit none
      integer size, rank
      double precision buffer(*)
      call ga_error('DDI to GA: DDI_SEND is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_smp_bcast()
      call ga_error('DDI to GA: DDI_SMP_BCAST is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_smp_create()
      call ga_error('DDI to GA: DDI_SMP_CREATE is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_smp_destroy()
      call ga_error('DDI to GA: DDI_SMP_DESTROY is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_smp_gsumf()
      call ga_error('DDI to GA: DDI_SMP_GSUMF is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_smp_nproc(np,ip)
      integer node,np,ip
#include "global.fh"
      node = GA_Cluster_nodeid()
      ip = -1
      np = GA_Cluster_nprocs(node)
      do i=0,np-1
         !write(*,*) 'xxx',node,i,GA_Cluster_procid(node,i),GA_Nodeid()
         if (GA_Cluster_procid(node, i).eq.GA_Nodeid()) ip = i
      enddo
      return
      end subroutine

      subroutine ddi_smp_offset()
      call ga_error('DDI to GA: DDI_SMP_OFFSET is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_smp_sync()
      call ga_error('DDI to GA: DDI_SYMP_SYNC is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_sync(tag)
      implicit none
      integer tag
      call ga_sync()
      return
      end subroutine

      subroutine ddi_timer_reset()
      call ga_error('DDI to GA: DDI_TIMER_RESET is not implemented ',
     *               __LINE__ )
      return
      end subroutine

      subroutine ddi_wait()
      call ga_error('DDI to GA: DDI_WAIT is not implemented ',
     *               __LINE__ )
      return
      end subroutine
C>
C> @brief  completely pointless DOXYGEN line for non-functioning
C>         routines below, needed to satisfy linker external reference.
C>
      subroutine ddi_comm_destroy(comm)
      integer comm
      call ga_error('DDI to GA: DDI_COMM_DESTROY is not implemented ',
     *               __LINE__ )
      return
      end subroutine
c 
      subroutine ddi_scatter_acc( handle, nbuff, ibuff, buff)
      implicit none    
      integer handle, nbuff, ibuff(*)
      double precision buff(*)
      call ga_error('DDI to GA: DDI_SCATTER_ACC is not implemented ',
     *               __LINE__ )
      return            
      end subroutine
