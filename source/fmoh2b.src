c 21 May 13 - HN  - two-electron contributions to FMO Hessian
c
C*MODULE FMOH2B    *DECK JDDDFMO
C>
C>     @brief Calculate Density for two-electron integral
C>
C>     @details Calculate \Delta D^{IJ} * D^{K}.
C>
C>     @author Hiroya Nakata
C>
      SUBROUTINE JDDDFMO(II,JJ,KK,LL,Q4,RHFTYP,IA,DTOT,DSPN,DABMAX,
     *           wrk,wrk1,l1ij)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL RHFTYP
C
      DIMENSION IA(*),DTOT(*),DSPN(*),WRK(*),WRK1(*),inds(4)
C
      PARAMETER (MXGTOT=20000, MXSH=5000)
c
      COMMON /INTJDD/ FDRV(3,4),SDRV(9,4,4),ABDENS(1296)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      common /fmorun/ espscf,e0scf(2),emp2s,IDAFMO,icurfg,jcurfg,kcurfg,
     *                icurlay,icurunt,nat1e,ncursh,ngau,icurpop,ifmostp,
     *                moncor,needr,modrst,norbproj,nunesp,iskipesp,
     *                IESDPPC,idoprop,mp2run,icurit,idmfmo,iddfmo,
     *                iddcur,nddleft,ivmfmo,nzmtfmo
C
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, FOUR=4.0D+00)
C
      DATA NDGTI,NDGTJ,NDGTK,NDGTL /216, 36,  6,  1/
C
C
C     ----- COMPUTE 2 BODY DENSITY FOR RHF,UHF,ROHF -----
C
      DABMAX=ZERO
      if(DABMAX.ne.zero) write(*,*) "dummy=",DSPN(1),DTOT(1),RHFTYP
      MINI=KMIN(II)
      MINJ=KMIN(JJ)
      MINK=KMIN(KK)
      MINL=KMIN(LL)
      MAXI=KMAX(II)
      MAXJ=KMAX(JJ)
      MAXK=KMAX(KK)
      MAXL=KMAX(LL)
      LOCI=KLOC(II)-MINI
      LOCJ=KLOC(JJ)-MINJ
      LOCK=KLOC(KK)-MINK
      LOCL=KLOC(LL)-MINL
      NI=1
C
        indi=1
        indj=2
        indk=3
        indl=4
      if(ii.gt.ncursh.and.jj.gt.ncursh) then
c       set above 
      else if(ii.gt.ncursh.and.kk.gt.ncursh) then
        indi=1
        indj=3
        indk=2
        indl=4
      else if(ii.gt.ncursh.and.ll.gt.ncursh) then
        indi=1
        indj=4
        indk=2
        indl=3
      else if(jj.gt.ncursh.and.kk.gt.ncursh) then
        indi=2
        indj=3
        indk=1
        indl=4
      else if(jj.gt.ncursh.and.ll.gt.ncursh) then
        indi=2
        indj=4
        indk=1
        indl=3
      else if(kk.gt.ncursh.and.ll.gt.ncursh) then
        indi=3
        indj=4
        indk=1
        indl=2
      else
c       We do not really check if more than 2 are .gt.ncursh but that is
c       not needed as long as fmo2ei is sane. 
        call abrt
      endif
C
      DO 1700 I=MINI,MAXI
      NJ=NI
      DO 1600 J=MINJ,MAXJ
      NK=NJ
      DO 1500 K=MINK,MAXK
      NL=NK
      DO 1400 L=MINL,MAXL
      NN=NL
      I1=LOCI+I
      I2=LOCJ+J
      I3=LOCK+K
      I4=LOCL+L
C
      inds(1) = I1
      inds(2) = I2
      inds(3) = I3
      inds(4) = I4
C
      I1=inds(indi)
      I2=inds(indj)
      I3=inds(indk)
      I4=inds(indl)
C
      IF(I1.GE.I2) GO TO 700
      N=I1
      I1=I2
      I2=N
  700 IF(I3.GE.I4) GO TO 1000 
      N=I3
      I3=I4
      I4=N
 1000 continue
C     IJ 
      MIJ=IA(I1-l1ij)+I2-l1ij
      MKL=IA(I3)+I4
C
c1200 CONTINUE
      DFAC= WRK1(MIJ)*WRK(MKL)*FOUR
c     DFAC= WRK1(MIJ)*WRK(MKL)
      IF(I1.EQ.I2) DFAC=DFAC*PT5
      IF(I3.EQ.I4) DFAC=DFAC*PT5
C  this is forbitten
      IF(I1.EQ.I3.AND.I2.EQ.I4) call abrt
C 
      DFAC=DFAC*Q4
      IF(ABS(DFAC).GT.DABMAX) DABMAX=ABS(DFAC)
      ABDENS(NN)=DFAC
 1400 NL=NL+NDGTL
 1500 NK=NK+NDGTK
 1600 NJ=NJ+NDGTJ
 1700 NI=NI+NDGTI
C
      RETURN
      END
c
C*MODULE FMOH2B    *DECK FMOJDDEGH
C>
C>     @brief Add second order contributions to FMOWRK
C>
C>     @details Add second order contributions to FMOWRK.
C>
C>     @author Hiroya Nakata
C>
      SUBROUTINE FMOJDDEGH(EG,EH,ISH,JSH,KSH,LSH,OUT,IAGLOB,lfvesp)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL OUT
C
      DIMENSION EG(3,*),EH(9,*),IAGLOB(*)
C
      PARAMETER (MXATM=2000,ONE=1.0D+00,zero=0.0D+00)
c     PARAMETER (MXGTOT=20000, MXSH=5000)
C
      COMMON /ATMJDD/ NATOM(4),NPASS
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INTJDD/ FDRV(3,4),SDRV(9,4,4),ABDENS(1296)
C
C
      NPASS1 = NPASS + 1
      DO 10 I = 1,NPASS1
      IATOM = NATOM(I)
      izat  = iaglob(iatom)
      DO 11 K = 1,3
   11 EG(K,izat) = EG(K,izat) + FDRV(K,I)
      DO 10 J = 1,I
      JATOM = NATOM(J)
      jzat  = iaglob(jatom)
      SCAL  = one
C
c     IF( izat.eq.jzat) then
        icind=lfvesp+(izat-1)*6
        fracespi= x(icind+1)
        icind=lfvesp+(jzat-1)*6
        fracespj= x(icind+1)
        if(fracespi.ne.one.and.fracespi.ne.zero) go to 10
        if(fracespj.ne.one.and.fracespj.ne.zero) go to 10
c     end if
C
      IF( jzat .GT. izat) GO TO 300
      N = izat*(izat-1)/2 + jzat 
c     if(jzat.eq.izat) SCAL = HALF
      EH(1,    N) = EH(1,    N) + SDRV(1,J,I) * SCAL  
      EH(2,    N) = EH(2,    N) + SDRV(2,J,I) * SCAL
      EH(3,    N) = EH(3,    N) + SDRV(3,J,I) * SCAL
      EH(4,    N) = EH(4,    N) + SDRV(4,J,I) * SCAL
      EH(5,    N) = EH(5,    N) + SDRV(5,J,I) * SCAL
      EH(6,    N) = EH(6,    N) + SDRV(6,J,I) * SCAL
      EH(7,    N) = EH(7,    N) + SDRV(7,J,I) * SCAL
      EH(8,    N) = EH(8,    N) + SDRV(8,J,I) * SCAL
      EH(9,    N) = EH(9,    N) + SDRV(9,J,I) * SCAL
c     IF(jzat.ne.izat) GO TO 10
      GO TO 10
  300 N = jzat*(jzat-1)/2 + izat 
      EH(1,    N) = EH(1,    N) + SDRV(1,J,I) * SCAL
      EH(2,    N) = EH(2,    N) + SDRV(4,J,I) * SCAL
      EH(3,    N) = EH(3,    N) + SDRV(7,J,I) * SCAL
      EH(4,    N) = EH(4,    N) + SDRV(2,J,I) * SCAL
      EH(5,    N) = EH(5,    N) + SDRV(5,J,I) * SCAL
      EH(6,    N) = EH(6,    N) + SDRV(8,J,I) * SCAL
      EH(7,    N) = EH(7,    N) + SDRV(3,J,I) * SCAL
      EH(8,    N) = EH(8,    N) + SDRV(6,J,I) * SCAL
      EH(9,    N) = EH(9,    N) + SDRV(9,J,I) * SCAL
   10 CONTINUE
      IF(OUT) CALL JDDPRT(ISH,JSH,KSH,LSH)
      IF(OUT) CALL HSSPRT(NAT,EG,EH)
      RETURN
      END
c
C*MODULE FMOH2B    *DECK FMOJDDFCK
C>
C>     @brief  Add contributions (ij |kl)^a to V^a 
C>
C>     @details Calculate the derivatives of two electron integral.
C>
C>     @author Hiroya Nakata
C>
      SUBROUTINE FMOJDDFCK(BCPHF,BFIRST,BSECOND,
     &              Q4,DF,GIJKL1,GIJKL2,
     &              GIJKL3,GIJKL4,GIJKL7,GIJKL8,GIJKL9,
     &              wrk,l1ij,wrk1,FDK,l2k,l2ij,IAGLOB,lfvesp)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
c     DOUBLE PRECISION MINUSONE,MULT
      DOUBLE PRECISION MULT
C
      LOGICAL SHLON,SKIP,IANDJ,KANDL,SAME,BCPHF,BFIRST,BSECOND,
     *        NSKIP1,NSKIP2,NSKIP3,NSKIP4,NSKIP5,NSKIP6,
     *        NSKIP7,NSKIP8,NSKIP9
C
      PARAMETER (NIJKLD=3888)
C
      DIMENSION DF(L2IJ,*),FDK(l2k,*),
     *          GIJKL1(NIJKLD),GIJKL2(NIJKLD),GIJKL3(NIJKLD),
     *          GIJKL4(NIJKLD),
     *          GIJKL7(NIJKLD),GIJKL8(NIJKLD),GIJKL9(NIJKLD),
     *          WRK(*),WRK1(*),inds(4),IAGLOB(*)
      DIMENSION MIJ(6,6),MKL(6,6),MIJKL(36),MAD(4),DD(9)
C
      PARAMETER (MXGTOT=20000, MXSH=5000, MXAO=8192)
C
      COMMON /ATMJDD/ NATOM(4),NPASS
      COMMON /IJPAIR/ IA(MXAO)
c     COMMON /FMCOM / X(1)
c     COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /JDDSKP/ MSHL(4),MGETDG(3),SHLON(6),SKIP(4)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SHLJDD/ LIT,LJT,LKT,LLT,LOCI,LOCJ,LOCK,LOCL,
     *                MINI,MINJ,MINK,MINL,MAXI,MAXJ,MAXK,MAXL,
     *                NNIJ,IJD,KLD,IJ,KL
      COMMON /SKPJDD/ NSKIP1,NSKIP2,NSKIP3,NSKIP4,NSKIP5,NSKIP6,
     *                NSKIP7,NSKIP8,NSKIP9
      common /fmorun/ espscf,e0scf(2),emp2s,IDAFMO,icurfg,jcurfg,kcurfg,
     *                icurlay,icurunt,nat1e,ncursh,ngau,icurpop,ifmostp,
     *                moncor,needr,modrst,norbproj,nunesp,iskipesp,
     *                IESDPPC,idoprop,mp2run,icurit,idmfmo,iddfmo,
     *                iddcur,nddleft,ivmfmo,nzmtfmo
C
C
      PARAMETER (zero=0.0D+00)
      PARAMETER (HALF=0.5D+00)
      PARAMETER (ONE=1.0D+00)
C
c     DATA JI10/1,0,0,0, 2,3,0,0, 4,5,6,0, 7,8,9,10/
C
C     write dummy
      if(one.eq.zero) write(*,*) LFVESP
      NDD=3
      IF(BSECOND) NDD=9
C
C     ----- FORM DERIVATIVE FOCK MATRICES -----
C
      I36=3
c     IF(UHFTYP) I36=6
C
C     ----- TRANSFER OF FIRST DERIVATIVE TEI TO CANONICAL ORDER -----
C
      IF(BCPHF.OR.BFIRST) THEN
         CALL VCLR(GIJKL1,1,NIJKLD)
         CALL VCLR(GIJKL2,1,NIJKLD)
         CALL VCLR(GIJKL3,1,NIJKLD)
         CALL VCLR(GIJKL4,1,NIJKLD)
      END IF
C
      NPASS1 = NPASS + 1
C
      IF(BCPHF.OR.BFIRST) NIJPASS=NPASS1
      IF(BSECOND) NIJPASS = (NPASS1*NPASS1+NPASS1)/2
C
      DO 110 I = 1,4
         IATOM = KATOM(MSHL(I))
         DO 100 J = 1,NPASS1
            IF(IATOM .EQ. NATOM(J)) MAD(I) = J
  100    CONTINUE
  110 CONTINUE
C
      ISH = MSHL(1)
      JSH = MSHL(2)
      KSH = MSHL(3)
      LSH = MSHL(4)
C
      indi=1
      indj=2
      indk=3
      indl=4
      if(ish.gt.ncursh.and.jsh.gt.ncursh) then
c       set above 
      else if(ish.gt.ncursh.and.ksh.gt.ncursh) then
        indi=1
        indj=3
        indk=2
        indl=4
      else if(ish.gt.ncursh.and.lsh.gt.ncursh) then
        indi=1
        indj=4
        indk=2
        indl=3
      else if(jsh.gt.ncursh.and.ksh.gt.ncursh) then
        indi=2
        indj=3
        indk=1
        indl=4
      else if(jsh.gt.ncursh.and.lsh.gt.ncursh) then
        indi=2
        indj=4
        indk=1
        indl=3
      else if(ksh.gt.ncursh.and.lsh.gt.ncursh) then
        indi=3
        indj=4
        indk=1
        indl=2
      else
c       We do not really check if more than 2 are .gt.ncursh but that is
c       not needed as long as fmo2ei is sane. 
        call abrt
      endif
C
      CALL JDFIDX(ISH,JSH,KSH,LSH,MIJ,MKL,MIJKL,NIJKL)
C
C
      IF(BCPHF.OR.BFIRST) THEN
         IF(NSKIP1) GO TO 300
         IGO = MAD(1)
         GO TO (210,220,230,300),IGO
 210     CALL JDFCK1(ISH,JSH,KSH,LSH,GIJKL1,GIJKL7,MIJ,MKL,MIJKL,NIJKLD)
         GO TO 300
 220     CALL JDFCK1(ISH,JSH,KSH,LSH,GIJKL2,GIJKL7,MIJ,MKL,MIJKL,NIJKLD)
         GO TO 300
 230     CALL JDFCK1(ISH,JSH,KSH,LSH,GIJKL3,GIJKL7,MIJ,MKL,MIJKL,NIJKLD)
C
 300     CONTINUE
         IF(NSKIP2) GO TO 400
         IGO = MAD(2)
         GO TO (310,320,330,400),IGO
 310     CALL JDFCK2(JSH,ISH,KSH,LSH,GIJKL1,GIJKL8,MIJ,MKL,MIJKL,NIJKLD)
         GO TO 400
 320     CALL JDFCK2(JSH,ISH,KSH,LSH,GIJKL2,GIJKL8,MIJ,MKL,MIJKL,NIJKLD)
         GO TO 400
 330     CALL JDFCK2(JSH,ISH,KSH,LSH,GIJKL3,GIJKL8,MIJ,MKL,MIJKL,NIJKLD)
C
 400     CONTINUE
         IF(NSKIP3) GO TO 500
         IGO = MAD(3)
         GO TO (410,420,430,500),IGO
 410     CALL JDFCK3(KSH,LSH,ISH,JSH,GIJKL1,GIJKL9,MIJ,MKL,MIJKL,NIJKLD)
         GO TO 500
 420     CALL JDFCK3(KSH,LSH,ISH,JSH,GIJKL2,GIJKL9,MIJ,MKL,MIJKL,NIJKLD)
         GO TO 500
 430     CALL JDFCK3(KSH,LSH,ISH,JSH,GIJKL3,GIJKL9,MIJ,MKL,MIJKL,NIJKLD)
C
C     ----- CREATE REDUNDANT FROM GIJKL1 GIJKL2 AND GIJKL3 -----
C
 500     CONTINUE
         NINT = 3 * NIJKL
         GO TO (510,520,530),NPASS
 510     CONTINUE
         DO 515 I = 1,NINT
            GIJKL2(I) = - GIJKL1(I)
 515     CONTINUE
         GO TO 600
 520     CONTINUE
         DO 525 I = 1,NINT
            GIJKL3(I) = - GIJKL1(I) - GIJKL2(I)
 525     CONTINUE
         GO TO 600
 530     CONTINUE
         DO 535 I = 1,NINT
            GIJKL4(I) = - GIJKL1(I) - GIJKL2(I) - GIJKL3(I)
 535     CONTINUE
 600     CONTINUE
      ELSE 
C        remove other case for simplicity
C        if you want to know what it is, please refre 
C        hss2b -->  JDDFCK
         call abrt
      END IF
C
C     ----- DF MATRICES : DF = OEI/DX + DENSTY * (TEI/DX) -----
C
      IANDJ =   ISH .EQ. JSH
      KANDL =   KSH .EQ. LSH
      SAME =.FALSE.
      NKL = 0
      NIJKL = 0
C
C         LOOPS OVER BASIS FUNCTIONS
C
      DO 4300 L = MINL,MAXL
      LNO = LOCL + L
      inds(4) = LNO
      IF(KANDL) MAXK = L
      DO 4200 K = MINK,MAXK
      KNO = LOCK + K
      inds(3) = KNO
      NKL = NKL  + 1
      NIJ = 0
      DO 4100 J = MINJ,MAXJ
      JNO = LOCJ + J
      inds(2) = JNO
      IF(IANDJ) MAXI = J
      DO 4000 I = MINI,MAXI
      INO = LOCI + I
      inds(1) = INO 
      NIJ = NIJ + 1
C
C
      INO =inds(indi)  
      JNO =inds(indj) 
      KNO =inds(indk) 
      LNO =inds(indl) 
C
      IF(.NOT. SAME) GO TO 700
      IF(NKL .LT. NIJ) GO TO 4000
  700 NIJKL = NIJKL + 1
      LIJKL = NDD * (NIJKL-1)
C
      IF(INO .GE. JNO) GO TO 710
      LIJ = IA(JNO-l1ij) + INO - l1ij
      GO TO 755
  710 LIJ = IA(INO-l1ij) + JNO - l1ij
c 715 IF(INO .GE. KNO) GO TO 720
c     LIK = IA(KNO) + INO
c     GO TO 725
c 720 LIK = IA(INO) + KNO
c 725 IF(INO .GE. LNO) GO TO 730
c     LIL = IA(LNO) + INO
c     GO TO 735
c 730 LIL = IA(INO) + LNO
c 735 IF(JNO .GE. KNO) GO TO 740
c     LJK = IA(KNO) + JNO
c     GO TO 745
c 740 LJK = IA(JNO) + KNO
c 745 IF(JNO .GE. LNO) GO TO 750
c     LJL = IA(LNO) + JNO
c     GO TO 755
c 750 LJL = IA(JNO) + LNO
  755 IF(KNO .GE. LNO) GO TO 760
      LKL = IA(LNO) + KNO
      GO TO 800
  760 LKL = IA(KNO) + LNO
C
  800 CONTINUE
C
C     OLIX: THE FOLLOWING CODE REPLACES THE CODE DENOTED BY (1)
C            WHICH CAN BE FOUND A BIT FURTHER
      MULT=ONE
      IF(INO.EQ.JNO) MULT=MULT*HALF
      IF(KNO.EQ.LNO) MULT=MULT*HALF
c     IF(LIJ.EQ.LKL) MULT=MULT*HALF
C      DO 2000 IPASS = 1,NPASS1
c     IF(BSECOND) THEN
c        JPASS = 0
c        IPASS = 1
c     END IF
      DO IJPASS = 1,NIJPASS
C
C     VALX, VALY AND VALZ REPLACED BY DD(1), DD(2) AND DD(3)
C     FOR FIRST DERIVATIVE
C
            IPASS=IJPASS
            GO TO (810,820,830,840),IPASS
C
 810        DD(1)  = Q4 * GIJKL1(LIJKL+1)
            DD(2)  = Q4 * GIJKL1(LIJKL+2)
            DD(3)  = Q4 * GIJKL1(LIJKL+3)
            GO TO 850
 820        DD(1)  = Q4 * GIJKL2(LIJKL+1)
            DD(2)  = Q4 * GIJKL2(LIJKL+2)
            DD(3)  = Q4 * GIJKL2(LIJKL+3)
            GO TO 850
 830        DD(1)  = Q4 * GIJKL3(LIJKL+1)
            DD(2)  = Q4 * GIJKL3(LIJKL+2)
            DD(3)  = Q4 * GIJKL3(LIJKL+3)
            GO TO 850
 840        DD(1)  = Q4 * GIJKL4(LIJKL+1)
            DD(2)  = Q4 * GIJKL4(LIJKL+2)
            DD(3)  = Q4 * GIJKL4(LIJKL+3)
 850        CONTINUE
C
C
            DO IDD=1,NDD
               DD(IDD) = DD(IDD)*MULT
            END DO
C
C
            VALX = DD(1)
            VALY = DD(2)
            VALZ = DD(3)
            VALX2  = VALX + VALX
            VALY2  = VALY + VALY
            VALZ2  = VALZ + VALZ
            VALX4  = VALX2 + VALX2
            VALY4  = VALY2 + VALY2
            VALZ4  = VALZ2 + VALZ2
C
            IATOM = NATOM(IPASS)
            izat  = IAGLOB(iatom)
            IXA   = I36*(izat-1) + 1
            IYA   = IXA + 1
            IZA   = IYA + 1
C
c           IF(RHFTYP.OR.GCI) THEN
C
               DF(LKL,IXA)  = DF(LKL,IXA) + VALX4 * WRK1(LIJ)
C
               DF(LKL,IYA)  = DF(LKL,IYA) + VALY4 * WRK1(LIJ)
C
               DF(LKL,IZA)  = DF(LKL,IZA) + VALZ4 * WRK1(LIJ)
c           end if
c           END IF
               FDK(LIJ,IXA) = FDK(LIJ,IXA) + VALX4 * WRK(LKL)
               FDK(LIJ,IYA) = FDK(LIJ,IYA) + VALY4 * WRK(LKL)
               FDK(LIJ,IZA) = FDK(LIJ,IZA) + VALZ4 * WRK(LKL)
C
c           IF(UHFTYP) THEN
c              IXB   = IZA + 1
c              IYB   = IXB + 1
c              IZB   = IYB + 1
c              DUMKL = DA(LKL)+DB(LKL)
c              DUMIJ = DA(LIJ)+DB(LIJ)
c              DF(LIJ,IXA) = DF(LIJ,IXA) + VALX4 * DUMKL
c              DF(LKL,IXA) = DF(LKL,IXA) + VALX4 * DUMIJ
c              DF(LIK,IXA) = DF(LIK,IXA) - VALX2 * DA(LJL)
c              DF(LIL,IXA) = DF(LIL,IXA) - VALX2 * DA(LJK)
c              DF(LJK,IXA) = DF(LJK,IXA) - VALX2 * DA(LIL)
c              DF(LJL,IXA) = DF(LJL,IXA) - VALX2 * DA(LIK)
c
c              DF(LIJ,IXB) = DF(LIJ,IXB) + VALX4 * DUMKL
c              DF(LKL,IXB) = DF(LKL,IXB) + VALX4 * DUMIJ
c              DF(LIK,IXB) = DF(LIK,IXB) - VALX2 * DB(LJL)
c              DF(LIL,IXB) = DF(LIL,IXB) - VALX2 * DB(LJK)
c              DF(LJK,IXB) = DF(LJK,IXB) - VALX2 * DB(LIL)
c              DF(LJL,IXB) = DF(LJL,IXB) - VALX2 * DB(LIK)
c
c              DF(LIJ,IYA) = DF(LIJ,IYA) + VALY4 * DUMKL
c              DF(LKL,IYA) = DF(LKL,IYA) + VALY4 * DUMIJ
c              DF(LIK,IYA) = DF(LIK,IYA) - VALY2 * DA(LJL)
c              DF(LIL,IYA) = DF(LIL,IYA) - VALY2 * DA(LJK)
c              DF(LJK,IYA) = DF(LJK,IYA) - VALY2 * DA(LIL)
c              DF(LJL,IYA) = DF(LJL,IYA) - VALY2 * DA(LIK)
c
c              DF(LIJ,IYB) = DF(LIJ,IYB) + VALY4 * DUMKL
c              DF(LKL,IYB) = DF(LKL,IYB) + VALY4 * DUMIJ
c              DF(LIK,IYB) = DF(LIK,IYB) - VALY2 * DB(LJL)
c              DF(LIL,IYB) = DF(LIL,IYB) - VALY2 * DB(LJK)
c              DF(LJK,IYB) = DF(LJK,IYB) - VALY2 * DB(LIL)
c              DF(LJL,IYB) = DF(LJL,IYB) - VALY2 * DB(LIK)
c
c              DF(LIJ,IZA) = DF(LIJ,IZA) + VALZ4 * DUMKL
c              DF(LKL,IZA) = DF(LKL,IZA) + VALZ4 * DUMIJ
c              DF(LIK,IZA) = DF(LIK,IZA) - VALZ2 * DA(LJL)
c              DF(LIL,IZA) = DF(LIL,IZA) - VALZ2 * DA(LJK)
c              DF(LJK,IZA) = DF(LJK,IZA) - VALZ2 * DA(LIL)
c              DF(LJL,IXA) = DF(LJL,IZA) - VALZ2 * DA(LIK)
c
c              DF(LIJ,IZB) = DF(LIJ,IZB) + VALZ4 * DUMKL
c              DF(LKL,IZB) = DF(LKL,IZB) + VALZ4 * DUMIJ
c              DF(LIK,IZB) = DF(LIK,IZB) - VALZ2 * DB(LJL)
c              DF(LIL,IZB) = DF(LIL,IZB) - VALZ2 * DB(LJK)
c              DF(LJK,IZB) = DF(LJK,IZB) - VALZ2 * DB(LIL)
c              DF(LJL,IZB) = DF(LJL,IZB) - VALZ2 * DB(LIK)
c           END IF
C
C     DERIVATIVE COULOMB/EXCHANGE OPERATORS, WHICH MUST BE
C     COMBINED LATER TO FORM THE FOCK DERIVATIVES.  SEE
C     EQUATIONS 30-35 IN JACS, 105, 7506-7511(1983).
C
      END DO
C
 4000 CONTINUE
 4100 CONTINUE
 4200 CONTINUE
 4300 CONTINUE
C
C
      RETURN
      END
