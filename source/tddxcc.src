C 23 JUN 10 - FZ  - SMALL CHANGES FOR META-GGA FUNCTIONALS FOR TDDFT
C 14 AUG 09 - KAN - COULOMB ATTENUATED METHODS (CAM) FOR DFT & TDDFT
C
C*MODULE TDDXCC  *DECK CFSLT
      SUBROUTINE CFSLT(EXC,EX0,EX,DRHOI_,XYZWGT,SCALE,RHOMIN,
     *                 ILENG,NPTGRD,NDER,IRU,IST,IEND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION EX0(*),EX(ILENG,*),DRHOI_(NPTGRD,4,*)
      DIMENSION XYZWGT(*)
      DIMENSION DF(55),RO(5)
C
      CHARACTER FUNCLIB*30
C
      COMMON /XDERIX/ NXDIM(3),KRA,KRB,KGA,KGB,KTA,KTB,KRARA,KRAGA,
     *                KRATA,KGAGA,KGATA,KTATA,KRBRB,KRBGB,KRBTB,KGBGB,
     *                KGBTB,KTBTB,KRARARA,KRARAGA,KRARATA,KRAGAGA,
     *                KRAGATA,KRATATA,KGAGAGA,KGAGATA,KGATATA,KTATATA,
     *                KRBRBRB,KRBRBGB,KRBRBTB,KRBGBGB,KRBGBTB,KRBTBTB,
     *                KGBGBGB,KGBGBTB,KGBTBTB,KTBTBTB
C
      DATA ZERO     /0.0D+00/
      DATA TWO      /2.0D+00/
C
      FUNCLIB = 'SLATER'
      INPERR=0
      CALL FUNSET(FUNCLIB,INPERR)
      ESLT=ZERO
      DO IPT=IST,IEND
          IIPT=IPT-IST+1
          RO(1) = DRHOI_(IPT,1,1)
          IF(IRU.EQ.1) THEN
             RO(2) = DRHOI_(IPT,1,1)
          ELSE
             RO(2) = DRHOI_(IPT,1,IRU)
          ENDIF
      RHOT = RO(1) + RO(2)
      IF(RHOT/TWO.GT.RHOMIN) THEN
C
C     SLATER POTENTIAL
C
      EX0(IIPT)=EX0(IIPT)+FUNENERGY(RO)*SCALE
C
C     1ST DERIVATIVE
C
      IF (NDER.EQ.1) CALL FUNFIRST(DF,1.0D+00,RO)
C
      IF (NDER.EQ.2) CALL FUNSECOND(DF,1.0D+00,RO)
C
      IF (NDER.EQ.3) CALL FUNTHIRD(DF,1.0D+00,RO)
C
      EX(IIPT,KRA)=EX(IIPT,KRA)+SCALE*DF(1)
      EX(IIPT,KRB)=EX(IIPT,KRB)+SCALE*DF(2)
C
C     ENERGY & DENSITY CHECK
C
      ESLT=ESLT+FUNENERGY(RO)*SCALE*XYZWGT(IPT)
C
      IF (NDER.EQ.1) GOTO 100
C
C     2ND DERIVATIVE
C
      EX(IIPT,KRARA)=EX(IIPT,KRARA)+SCALE*DF(6)
      EX(IIPT,KRBRB)=EX(IIPT,KRBRB)+SCALE*DF(11)
      IF (NDER.EQ.2) GOTO 100
C
C     3RD DERIVATIVE
C
      EX(IIPT,KRARARA)=EX(IIPT,KRARARA)+SCALE*DF(21)
      EX(IIPT,KRBRBRB)=EX(IIPT,KRBRBRB)+SCALE*DF(36)
      ENDIF
  100 CONTINUE
      END DO
C
C     END GRID LOOP
C
      EXC=EXC+ESLT
C
      RETURN
      END
C*MODULE TDDXCC  *DECK CFUNXL
      SUBROUTINE CFUNXL(EXC,EX0,EX,DRHOI_,XYZWGT,SCALE,RHOMIN,
     *                  ILENG,NPTGRD,NDER,IRU,IST,IEND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION EX0(*),EX(ILENG,*),DRHOI_(NPTGRD,4,*)
      DIMENSION XYZWGT(*)
      DIMENSION DF(55),RO(5)
C
      COMMON /XDERIX/ NXDIM(3),KRA,KRB,KGA,KGB,KTA,KTB,KRARA,KRAGA,
     *                KRATA,KGAGA,KGATA,KTATA,KRBRB,KRBGB,KRBTB,KGBGB,
     *                KGBTB,KTBTB,KRARARA,KRARAGA,KRARATA,KRAGAGA,
     *                KRAGATA,KRATATA,KGAGAGA,KGAGATA,KGATATA,KTATATA,
     *                KRBRBRB,KRBRBGB,KRBRBTB,KRBGBGB,KRBGBTB,KRBTBTB,
     *                KGBGBGB,KGBGBTB,KGBTBTB,KTBTBTB
C
      DATA ZERO     /0.0D+00/
      DATA TWO      /2.0D+00/
C
      ESLT=ZERO
      DO IPT=IST,IEND
          IIPT=IPT-IST+1
          RO(1) = DRHOI_(IPT,1,1)
          IF(IRU.EQ.1) THEN
             RO(2) = DRHOI_(IPT,1,1)
          ELSE
             RO(2) = DRHOI_(IPT,1,IRU)
          ENDIF
      RHOT = RO(1) + RO(2)
      IF(RHOT/TWO.GT.RHOMIN) THEN
C
C     SLATER POTENTIAL
C
      EX0(IIPT)=EX0(IIPT)+FUNENERGY(RO)*SCALE
C
C     1ST DERIVATIVE
C
      IF (NDER.EQ.1) CALL FUNFIRST(DF,1.0D+00,RO)
C
      IF (NDER.EQ.2) CALL FUNSECOND(DF,1.0D+00,RO)
C
      IF (NDER.EQ.3) CALL FUNTHIRD(DF,1.0D+00,RO)
C
      EX(IIPT,KRA)=EX(IIPT,KRA)+SCALE*DF(1)
      EX(IIPT,KRB)=EX(IIPT,KRB)+SCALE*DF(2)
C
C     ENERGY & DENSITY CHECK
C
      ESLT=ESLT+FUNENERGY(RO)*SCALE*XYZWGT(IPT)
C
      IF (NDER.EQ.1) GOTO 100
C
C     2ND DERIVATIVE
C
      EX(IIPT,KRARA)=EX(IIPT,KRARA)+SCALE*DF(6)
      EX(IIPT,KRBRB)=EX(IIPT,KRBRB)+SCALE*DF(11)
      IF (NDER.EQ.2) GOTO 100
C
C     3RD DERIVATIVE
C
      EX(IIPT,KRARARA)=EX(IIPT,KRARARA)+SCALE*DF(21)
      EX(IIPT,KRBRBRB)=EX(IIPT,KRBRBRB)+SCALE*DF(36)
      ENDIF
  100 CONTINUE
      END DO
C
C     END GRID LOOP
C
      EXC=EXC+ESLT
C
      RETURN
      END
C
C*MODULE TDDXCC  *DECK CFUNXG
      SUBROUTINE CFUNXG(EXC,EX0,EX,DRHOI_,XYZWGT,SCALE,RHOMIN,
     *                  ILENG,NPTGRD,NDER,IRU,IST,IEND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION DRHOI_(NPTGRD,4,IRU)
      DIMENSION EX0(*)
      DIMENSION EX(ILENG,*)
      DIMENSION XYZWGT(*)
      DIMENSION DF(55),RO(5)
C
      COMMON /XDERIX/ NXDIM(3),KRA,KRB,KGA,KGB,KTA,KTB,KRARA,KRAGA,
     *                KRATA,KGAGA,KGATA,KTATA,KRBRB,KRBGB,KRBTB,KGBGB,
     *                KGBTB,KTBTB,KRARARA,KRARAGA,KRARATA,KRAGAGA,
     *                KRAGATA,KRATATA,KGAGAGA,KGAGATA,KGATATA,KTATATA,
     *                KRBRBRB,KRBRBGB,KRBRBTB,KRBGBGB,KRBGBTB,KRBTBTB,
     *                KGBGBGB,KGBGBTB,KGBTBTB,KTBTBTB
C
      DATA ZERO/0.0D+00/
      DATA TWO/2.0D+00/
      DATA THREE/3.0D+00/
      DATA FOUR/4.0D+00/
      DATA EIGHT/8.0D+00/
C
      EXCS= ZERO
C
C     GRID LOOP
C
      DO IPT=IST,IEND
          IIPT=IPT-IST+1
          RO(1) = DRHOI_(IPT,1,1)
          GRDAA=DRHOI_(IPT,2,1)**2+DRHOI_(IPT,3,1)**2
     *               +DRHOI_(IPT,4,1)**2
          RO(3) = SQRT(GRDAA)
          IF(IRU.EQ.1) THEN
             RO(2) = DRHOI_(IPT,1,1)
             RO(4) = RO(3)
          ELSE
             RO(2) = DRHOI_(IPT,1,IRU)
             GRDBB=DRHOI_(IPT,2,IRU)**2+DRHOI_(IPT,3,IRU)**2
     *                  +DRHOI_(IPT,4,IRU)**2
             RO(4) = SQRT(GRDBB)
          ENDIF
          RO(5) = RO(3)*RO(4)
      RHO = RO(1) + RO(2)
      IF (RHO.GT.RHOMIN) THEN
C
C     ENERGY
C
      EX0(IIPT)=EX0(IIPT)+FUNENERGY(RO)*SCALE
C
C     1ST DERIVATIVES
C
      IF (NDER.EQ.1) CALL FUNFIRST(DF,1.0D+00,RO)
C
      IF (NDER.EQ.2) CALL FUNSECOND(DF,1.0D+00,RO)
C
      IF (NDER.EQ.3) CALL FUNTHIRD(DF,1.0D+00,RO)
C
      EX(IIPT,KRA)=EX(IIPT,KRA)+SCALE*DF(1)
      EX(IIPT,KRB)=EX(IIPT,KRB)+SCALE*DF(2)
      EX(IIPT,KGA)=EX(IIPT,KGA)+(DF(3)+DF(5)*RO(3))*SCALE/(RO(3)*TWO)
      EX(IIPT,KGB)=EX(IIPT,KGB)+(DF(4)+DF(5)*RO(4))*SCALE/(RO(4)*TWO)
C
C     ENERGY & DENSITY CHECK
C
      EXCS=EXCS+FUNENERGY(RO)*SCALE*XYZWGT(IPT)
      IF (NDER.EQ.1) GOTO 100
C
C     2ND DERIVATIVES
C
      EX(IIPT,KRARA)=EX(IIPT,KRARA)+SCALE*DF(6)
      EX(IIPT,KRBRB)=EX(IIPT,KRBRB)+SCALE*DF(11)
C
      EX(IIPT,KRAGA)=EX(IIPT,KRAGA)+SCALE*DF(8)/(RO(3)*TWO)
      EX(IIPT,KRBGB)=EX(IIPT,KRBGB)+SCALE*DF(13)/(RO(4)*TWO)
      EX(IIPT,KGAGA)=EX(IIPT,KGAGA)+SCALE*(DF(15)/(FOUR*RO(3)*RO(3))
     *               - DF(3)/(FOUR*RO(3)*RO(3)*RO(3)))
      EX(IIPT,KGBGB)=EX(IIPT,KGBGB)+SCALE*(DF(18)/(FOUR*RO(4)*RO(4))
     *               - DF(4)/(FOUR*RO(4)*RO(4)*RO(4)))
C
      IF (NDER.EQ.2) GOTO 100
C
C     B88 3RD DERIVATIVES
C
      EX(IIPT,KRARARA)=EX(IIPT,KRARARA)+SCALE*DF(21)
      EX(IIPT,KRBRBRB)=EX(IIPT,KRBRBRB)+SCALE*DF(36)
C
      EX(IIPT,KRARAGA)=EX(IIPT,KRARAGA)+SCALE*DF(23)/(RO(3)*TWO)
      EX(IIPT,KRBRBGB)=EX(IIPT,KRBRBGB)+SCALE*DF(38)/(RO(4)*TWO)
C
      EX(IIPT,KRAGAGA)=EX(IIPT,KRAGAGA)+SCALE*(DF(30)/(FOUR*RO(3)*
     * RO(3)) - DF(8)/(FOUR*RO(3)*RO(3)*RO(3)))
      EX(IIPT,KRBGBGB)=EX(IIPT,KRBGBGB)+SCALE*(DF(43)/(FOUR*RO(4)*
     * RO(4)) - DF(8)/(FOUR*RO(4)*RO(4)*RO(4)))
C
      EX(IIPT,KGAGAGA)=EX(IIPT,KGAGAGA)+SCALE*(DF(46)/(EIGHT*RO(3)*
     * RO(3)*RO(3)) - DF(15)*THREE/(EIGHT*RO(3)*RO(3)*RO(3)*RO(3)) +
     * DF(3)*THREE/(EIGHT*RO(3)*RO(3)*RO(3)*RO(3)*RO(3)))
C
      EX(IIPT,KGBGBGB)=EX(IIPT,KGBGBGB)+SCALE*(DF(52)/(EIGHT*RO(4)*
     * RO(4)*RO(4)) - DF(18)*THREE/(EIGHT*RO(4)*RO(4)*RO(4)*RO(4)) +
     * DF(4)*THREE/(EIGHT*RO(4)*RO(4)*RO(4)*RO(4)*RO(4)))
C
      ENDIF
  100 CONTINUE
      END DO
C
C     GRID LOOP END
C
      EXC=EXC+EXCS
C
      RETURN
      END
C*MODULE TDDXCC  *DECK CFVWN
      SUBROUTINE CFVWN(ECOR,EC0,EC,DRHOI_,XYZWGT,SCALE,RHOMIN,
     *                 ILENG,NPTGRD,NDER,IRU,IST,IEND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION DRHOI_(NPTGRD,4,IRU)
      DIMENSION EC0(*)
      DIMENSION EC(ILENG,*)
      DIMENSION XYZWGT(*)
      DIMENSION DF(55),RO(5)
C
      COMMON /CDERIX/ NCDIM(3),IRA,IRB,IGA,IGB,IGC,ITA,ITB,IRARA,IRARB,
     *                IRAGA,IRAGB,IRAGC,IRATA,IRATB,IRBRB,IRBGA,IRBGB,
     *                IRBGC,IRBTA,IRBTB,IGAGA,IGAGB,IGAGC,IGATA,IGATB,
     *                IGBGB,IGBGC,IGBTA,IGBTB,IGCGC,IGCTA,IGCTB,ITATA,
     *                ITATB,ITBTB,IRARARA,IRARARB,IRARAGA,IRARAGB,
     *                IRARAGC,IRARATA,IRARATB,IRARBRB,IRARBGA,IRARBGB,
     *                IRARBGC,IRARBTA,IRARBTB,IRAGAGA,IRAGAGB,IRAGAGC,
     *                IRAGATA,IRAGATB,IRAGBGB,IRAGBGC,IRAGBTA,IRAGBTB,
     *                IRAGCGC,IRAGCTA,IRAGCTB,IRATATA,IRATATB,IRATBTB,
     *                IRBRBRB,IRBRBGA,IRBRBGB,IRBRBGC,IRBRBTA,IRBRBTB,
     *                IRBGAGA,IRBGAGB,IRBGAGC,IRBGATA,IRBGATB,IRBGBGB,
     *                IRBGBGC,IRBGBTA,IRBGBTB,IRBGCGC,IRBGCTA,IRBGCTB,
     *                IRBTATA,IRBTATB,IRBTBTB,IGAGAGA,IGAGAGB,IGAGAGC,
     *                IGAGATA,IGAGATB,IGAGBGB,IGAGBGC,IGAGBTA,IGAGBTB,
     *                IGAGCGC,IGAGCTA,IGAGCTB,IGATATA,IGATATB,IGATBTB,
     *                IGBGBGB,IGBGBGC,IGBGBTA,IGBGBTB,IGBGCGC,IGBGCTA,
     *                IGBGCTB,IGBTATA,IGBTATB,IGBTBTB,IGCGCGC,IGCGCTA,
     *                IGCGCTB,IGCTATA,IGCTATB,IGCTBTB,ITATATA,ITATATB,
     *                ITATBTB,ITBTBTB
C
      DATA ZERO /0.0D+00/
      DATA TWO  /2.0D+00/
C
      EVWN=ZERO
      DO IPT=IST,IEND
      IIPT=IPT-IST+1
          RO(1) = DRHOI_(IPT,1,1)
          IF(IRU.EQ.1) THEN
             RO(2) = DRHOI_(IPT,1,1)
          ELSE
             RO(2) = DRHOI_(IPT,1,IRU)
          ENDIF
      RHOT = RO(1) + RO(2)
      IF (RHOT/TWO.GT.RHOMIN) THEN
C
C     VWN ENERGY
C
           EC0(IIPT) = EC0(IIPT)+SCALE*FUNENERGY(RO)
C
C     1ST DERIVATIVE
C
      IF (NDER.EQ.1) CALL FUNFIRST(DF,1.0D+00,RO)
C
      IF (NDER.EQ.2) CALL FUNSECOND(DF,1.0D+00,RO)
C
      IF (NDER.EQ.3) CALL FUNTHIRD(DF,1.0D+00,RO)
C
      EC(IIPT,IRA) = EC(IIPT,IRA) + SCALE*DF(1)
      EC(IIPT,IRB) = EC(IIPT,IRB) + SCALE*DF(2)
           EVWN=EVWN+FUNENERGY(RO)*SCALE*XYZWGT(IPT)
           IF(NDER.EQ.1) GOTO 100
C
C     2ND DERIVATIVE
C
           EC(IIPT,IRARA) =EC(IIPT,IRARA)+ SCALE*DF(6)
           EC(IIPT,IRARB) =EC(IIPT,IRARB)+ SCALE*DF(7)
           EC(IIPT,IRBRB) =EC(IIPT,IRBRB)+ SCALE*DF(11)
           IF(NDER.EQ.2) GOTO 100
C
C     3RD DERIVATIVE
C
           EC(IIPT,IRARARA)=EC(IIPT,IRARARA)+SCALE*DF(21)
           EC(IIPT,IRARARB)=EC(IIPT,IRARARB)+SCALE*DF(22)
           EC(IIPT,IRARBRB)=EC(IIPT,IRARBRB)+SCALE*DF(26)
           EC(IIPT,IRBRBRB)=EC(IIPT,IRBRBRB)+SCALE*DF(36)
      ENDIF
  100 CONTINUE
      END DO
      ECOR=ECOR+EVWN
C
      RETURN
      END
C*MODULE TDDXCC  *DECK CFLYP
      SUBROUTINE CFLYP(ECOR,EC0,EC,DRHOI_,XYZWGT,SCALE,RHOMIN,
     *                 ILENG,NPTGRD,NDER,IRU,IST,IEND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION EC(ILENG,*)
      DIMENSION EC0(*)
      DIMENSION DRHOI_(NPTGRD,4,IRU)
      DIMENSION DF(55),RO(5)
      DIMENSION XYZWGT(*)
C
      COMMON /CDERIX/ NCDIM(3),IRA,IRB,IGA,IGB,IGC,ITA,ITB,IRARA,IRARB,
     *                IRAGA,IRAGB,IRAGC,IRATA,IRATB,IRBRB,IRBGA,IRBGB,
     *                IRBGC,IRBTA,IRBTB,IGAGA,IGAGB,IGAGC,IGATA,IGATB,
     *                IGBGB,IGBGC,IGBTA,IGBTB,IGCGC,IGCTA,IGCTB,ITATA,
     *                ITATB,ITBTB,IRARARA,IRARARB,IRARAGA,IRARAGB,
     *                IRARAGC,IRARATA,IRARATB,IRARBRB,IRARBGA,IRARBGB,
     *                IRARBGC,IRARBTA,IRARBTB,IRAGAGA,IRAGAGB,IRAGAGC,
     *                IRAGATA,IRAGATB,IRAGBGB,IRAGBGC,IRAGBTA,IRAGBTB,
     *                IRAGCGC,IRAGCTA,IRAGCTB,IRATATA,IRATATB,IRATBTB,
     *                IRBRBRB,IRBRBGA,IRBRBGB,IRBRBGC,IRBRBTA,IRBRBTB,
     *                IRBGAGA,IRBGAGB,IRBGAGC,IRBGATA,IRBGATB,IRBGBGB,
     *                IRBGBGC,IRBGBTA,IRBGBTB,IRBGCGC,IRBGCTA,IRBGCTB,
     *                IRBTATA,IRBTATB,IRBTBTB,IGAGAGA,IGAGAGB,IGAGAGC,
     *                IGAGATA,IGAGATB,IGAGBGB,IGAGBGC,IGAGBTA,IGAGBTB,
     *                IGAGCGC,IGAGCTA,IGAGCTB,IGATATA,IGATATB,IGATBTB,
     *                IGBGBGB,IGBGBGC,IGBGBTA,IGBGBTB,IGBGCGC,IGBGCTA,
     *                IGBGCTB,IGBTATA,IGBTATB,IGBTBTB,IGCGCGC,IGCGCTA,
     *                IGCGCTB,IGCTATA,IGCTATB,IGCTBTB,ITATATA,ITATATB,
     *                ITATBTB,ITBTBTB
C
      DATA ZERO/0.0D+00/
      DATA TWO /2.0D+00/
C
C     DENSITY SETTING
C
      RHOCHECK=ZERO
      E_LYP=ZERO
      DO IPT=IST,IEND
      IIPT=IPT-IST+1
          RO(1) = DRHOI_(IPT,1,1)
          IF(IRU.EQ.1) THEN
             RO(2) = DRHOI_(IPT,1,1)
          ELSE
             RO(2) = DRHOI_(IPT,1,IRU)
          ENDIF
      RHOT = RO(1) + RO(2)
      IF(RHOT/TWO.GT.RHOMIN) THEN
      DXA=DRHOI_(IPT,2,1)
      DYA=DRHOI_(IPT,3,1)
      DZA=DRHOI_(IPT,4,1)
      DXB=DRHOI_(IPT,2,IRU)
      DYB=DRHOI_(IPT,3,IRU)
      DZB=DRHOI_(IPT,4,IRU)
      GRDAA=DXA*DXA + DYA*DYA + DZA*DZA
      RO(3) = SQRT(GRDAA)
      GRDBB=DXB*DXB + DYB*DYB + DZB*DZB
      RO(4) = SQRT(GRDBB)
      RO(5) = RO(3)*RO(4)
C
      IF (NDER.EQ.1) CALL FUNFIRST(DF,1.0D+00,RO)
C
      IF (NDER.EQ.2) CALL FUNSECOND(DF,1.0D+00,RO)
C
      IF (NDER.EQ.3) CALL FUNTHIRD(DF,1.0D+00,RO)
C
C     LYP ENERGY TERM
C
      ELYP    =  FUNENERGY(RO)
      EC0(IIPT) =EC0(IIPT)+ ELYP*SCALE
C
C     1ST DERIVATIVE
C
      EC(IIPT,IRA)=EC(IIPT,IRA)+SCALE*DF(1)
      EC(IIPT,IRB)=EC(IIPT,IRB)+SCALE*DF(2)
      EC(IIPT,IGA)=EC(IIPT,IGA)+SCALE*DF(3)/(RO(3)*TWO)
      EC(IIPT,IGB)=EC(IIPT,IGB)+SCALE*DF(4)/(RO(4)*TWO)
      EC(IIPT,IGC) = EC(IIPT,IGC)+SCALE*DF(5)
C
C     DEBUG DENSITY
C
      RHOCHECK=RHOCHECK+RHOT*XYZWGT(IPT)
      E_LYP=E_LYP+ELYP*SCALE*XYZWGT(IPT)
      IF(NDER.EQ.1) GOTO 100
C
C     2ND DERIVATIVE
C
      EC(IIPT,IRARA)=EC(IIPT,IRARA) + SCALE*DF(6)
      EC(IIPT,IRBRB)=EC(IIPT,IRBRB) + SCALE*DF(11)
      EC(IIPT,IRARB)=EC(IIPT,IRARB) + SCALE*DF(7)
      EC(IIPT,IRAGA)=EC(IIPT,IRAGA) + SCALE*DF(8)/(RO(3)*TWO)
      EC(IIPT,IRBGA)=EC(IIPT,IRBGA) + SCALE*DF(12)/(RO(3)*TWO)
C
      EC(IIPT,IRAGB)=EC(IIPT,IRAGB) + SCALE*DF(9)/(RO(4)*TWO)
      EC(IIPT,IRBGB)=EC(IIPT,IRBGB) + SCALE*DF(13)/(RO(4)*TWO)
      EC(IIPT,IRAGC)=EC(IIPT,IRAGC) + SCALE*DF(10)
      EC(IIPT,IRBGC)=EC(IIPT,IRBGC) + SCALE*DF(14)
C
      IF(NDER.EQ.2) GOTO 100
C
C     3RD DERIVATIVES
C
      EC(IIPT,IRARARA)=EC(IIPT,IRARARA)+ SCALE*DF(21)
      EC(IIPT,IRARARB)=EC(IIPT,IRARARB)+ SCALE*DF(22)
      EC(IIPT,IRARAGA)=EC(IIPT,IRARAGA)+ SCALE*DF(23)/(RO(3)*TWO)
      EC(IIPT,IRARAGB)=EC(IIPT,IRARAGB)+ SCALE*DF(24)/(RO(4)*TWO)
C
      EC(IIPT,IRARAGC)=EC(IIPT,IRARAGC)+ SCALE*DF(25)
      EC(IIPT,IRARBRB)=EC(IIPT,IRARBRB)+ SCALE*DF(26)
      EC(IIPT,IRARBGA)=EC(IIPT,IRARBGA)+ SCALE*DF(27)/(RO(3)*TWO)
      EC(IIPT,IRARBGB)=EC(IIPT,IRARBGB)+ SCALE*DF(28)/(RO(4)*TWO)
C
      EC(IIPT,IRARBGC)=EC(IIPT,IRARBGC)+ SCALE*DF(29)
      EC(IIPT,IRBRBRB)=EC(IIPT,IRBRBRB)+ SCALE*DF(36)
      EC(IIPT,IRBRBGA)=EC(IIPT,IRBRBGA)+ SCALE*DF(37)/(RO(3)*TWO)
      EC(IIPT,IRBRBGB)=EC(IIPT,IRBRBGB)+ SCALE*DF(38)/(RO(4)*TWO)
      EC(IIPT,IRBRBGC)=EC(IIPT,IRBRBGC)+ SCALE*DF(39)
C
  100 CONTINUE
      ENDIF
      END DO
      ECOR=ECOR+E_LYP
C
      RETURN
      END
C*MODULE TDDXCC  *DECK FFLYP
      SUBROUTINE FFLYP(ECOR,EC0,EC,DRHOI_,XYZWGT,SCALE,RHOMIN,
     *                 ILENG,NPTGRD,NDER,IRU,IST,IEND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION EC(ILENG,*)
      DIMENSION EC0(*)
      DIMENSION DRHOI_(NPTGRD,4,IRU)
      DIMENSION XYZWGT(*)
C
      COMMON /CDERIX/ NCDIM(3),IRA,IRB,IGA,IGB,IGC,ITA,ITB,IRARA,IRARB,
     *                IRAGA,IRAGB,IRAGC,IRATA,IRATB,IRBRB,IRBGA,IRBGB,
     *                IRBGC,IRBTA,IRBTB,IGAGA,IGAGB,IGAGC,IGATA,IGATB,
     *                IGBGB,IGBGC,IGBTA,IGBTB,IGCGC,IGCTA,IGCTB,ITATA,
     *                ITATB,ITBTB,IRARARA,IRARARB,IRARAGA,IRARAGB,
     *                IRARAGC,IRARATA,IRARATB,IRARBRB,IRARBGA,IRARBGB,
     *                IRARBGC,IRARBTA,IRARBTB,IRAGAGA,IRAGAGB,IRAGAGC,
     *                IRAGATA,IRAGATB,IRAGBGB,IRAGBGC,IRAGBTA,IRAGBTB,
     *                IRAGCGC,IRAGCTA,IRAGCTB,IRATATA,IRATATB,IRATBTB,
     *                IRBRBRB,IRBRBGA,IRBRBGB,IRBRBGC,IRBRBTA,IRBRBTB,
     *                IRBGAGA,IRBGAGB,IRBGAGC,IRBGATA,IRBGATB,IRBGBGB,
     *                IRBGBGC,IRBGBTA,IRBGBTB,IRBGCGC,IRBGCTA,IRBGCTB,
     *                IRBTATA,IRBTATB,IRBTBTB,IGAGAGA,IGAGAGB,IGAGAGC,
     *                IGAGATA,IGAGATB,IGAGBGB,IGAGBGC,IGAGBTA,IGAGBTB,
     *                IGAGCGC,IGAGCTA,IGAGCTB,IGATATA,IGATATB,IGATBTB,
     *                IGBGBGB,IGBGBGC,IGBGBTA,IGBGBTB,IGBGCGC,IGBGCTA,
     *                IGBGCTB,IGBTATA,IGBTATB,IGBTBTB,IGCGCGC,IGCGCTA,
     *                IGCGCTB,IGCTATA,IGCTATB,IGCTBTB,ITATATA,ITATATB,
     *                ITATBTB,ITBTBTB
C
      DATA ZERO/0.0D+00/
      DATA TWO /2.0D+00/
C
C     DENSITY SETTING
C
      E_LYP=ZERO
      DO IPT=IST,IEND
      IIPT=IPT-IST+1
          ROA = DRHOI_(IPT,1,1)
          IF(IRU.EQ.1) THEN
             ROB = DRHOI_(IPT,1,1)
          ELSE
             ROB = DRHOI_(IPT,1,IRU)
          ENDIF
      RHOT = ROA + ROB
      IF(RHOT/TWO.GT.RHOMIN) THEN
      DXA=DRHOI_(IPT,2,1)
      DYA=DRHOI_(IPT,3,1)
      DZA=DRHOI_(IPT,4,1)
      DXB=DRHOI_(IPT,2,IRU)
      DYB=DRHOI_(IPT,3,IRU)
      DZB=DRHOI_(IPT,4,IRU)
      GRDAA=DXA*DXA + DYA*DYA + DZA*DZA
      GRDBB=DXB*DXB + DYB*DYB + DZB*DZB
      GRDAB=DXA*DXB + DYA*DYB + DZA*DZB
C
      IF(NDER.EQ.1) CALL LYP_FUNF_FIRST(ROA,ROB,GRDAA,GRDBB,GRDAB,
     &    DFDRA,DFDRB,DFDGA,DFDGB,DFDGAB)
C
      IF(NDER.EQ.2) CALL LYP_FUNF_SECOND(ROA,ROB,GRDAA,GRDBB,
     & GRDAB,DFDRA,DFDRB,DFDGA,DFDGB,DFDGAB,D2FDRARA,D2FDRARB,
     & D2FDRAGA,D2FDRAGB,D2FDRAAB,D2FDRBRB,D2FDRBGA,D2FDRBGB,
     & D2FDRBGAB,D2FDGAGA,D2FDGAGB,D2FDGAGAB,
     & D2FDGBGB,D2FDGBGAB,D2FDGABGAB)
C
      IF(NDER.EQ.3) CALL LYP_FUNF_THIRD(ROA,ROB,GRDAA,GRDBB,GRDAB,
     & DFDRA,DFDRB,DFDGA,DFDGB,DFDGAB,D2FDRARA,D2FDRARB,D2FDRAGA,
     & D2FDRAGB,D2FDRAAB,D2FDRBRB,D2FDRBGA,D2FDRBGB,
     & D2FDRBGAB,D2FDGAGA,D2FDGAGB,D2FDGAGAB,
     & D2FDGBGB,D2FDGBGAB,D2FDGABGAB,
     & D3FDRARARA,D3FDRARARB, D3FDRARAGA,
     & D3FDRARAGB,D3FDRARAAB, D3FDRARBRB,
     & D3FDRARBGA,D3FDRARBGB, D3FDRARBAB,
     & D3FDRAGAGA,D3FDRAGAGB, D3FDRAGAAB,
     & D3FDRAGBGB,D3FDRAGBAB, D3FDRAABAB,
     & D3FDRBRBRB,D3FDRBRBGA, D3FDRBRBGB,
     & D3FDRBRBAB,D3FDRBGAGA, D3FDRBGAGB,
     & D3FDRBGAAB,D3FDRBGBGB, D3FDRBGBAB,
     & D3FDRBABAB,D3FDGAGAGA, D3FDGAGAGB,
     & D3FDGAGAAB,D3FDGAGBGB, D3FDGAGBAB,
     & D3FDGAABAB,D3FDGBGBGB, D3FDGBGBAB,
     & D3FDGBABAB,D3FDABABAB)
C
C     LYP ENERGY TERM
C
      CALL LYP_FUNF_ENERGY(ROA,ROB,GRDAA,GRDBB,GRDAB,ELYP)
      EC0(IIPT) =EC0(IIPT)+ ELYP*SCALE
C
C     1ST DERIVATIVE
C
      EC(IIPT,IRA)=EC(IIPT,IRA)+SCALE*DFDRA
      EC(IIPT,IRB)=EC(IIPT,IRB)+SCALE*DFDRB
      EC(IIPT,IGA)=EC(IIPT,IGA)+SCALE*DFDGA
      EC(IIPT,IGB)=EC(IIPT,IGB)+SCALE*DFDGB
      EC(IIPT,IGC) = EC(IIPT,IGC)+SCALE*DFDGAB
C
      E_LYP=E_LYP+ELYP*SCALE*XYZWGT(IPT)
      IF(NDER.EQ.1) GOTO 200
C
C     2ND DERIVATIVE
C
      EC(IIPT,IRARA)=EC(IIPT,IRARA) + SCALE*D2FDRARA
      EC(IIPT,IRBRB)=EC(IIPT,IRBRB) + SCALE*D2FDRBRB
      EC(IIPT,IRARB)=EC(IIPT,IRARB) + SCALE*D2FDRARB
      EC(IIPT,IRAGA)=EC(IIPT,IRAGA) + SCALE*D2FDRAGA
      EC(IIPT,IRBGA)=EC(IIPT,IRBGA) + SCALE*D2FDRBGA
C
      EC(IIPT,IRAGB)=EC(IIPT,IRAGB) + SCALE*D2FDRAGB
      EC(IIPT,IRBGB)=EC(IIPT,IRBGB) + SCALE*D2FDRBGB
      EC(IIPT,IRAGC)=EC(IIPT,IRAGC) + SCALE*D2FDRAAB
      EC(IIPT,IRBGC)=EC(IIPT,IRBGC) + SCALE*D2FDRBGAB
C
      IF(NDER.EQ.2) GOTO 200
C
C     3RD DERIVATIVES
C
      EC(IIPT,IRARARA)=EC(IIPT,IRARARA)+ SCALE*D3FDRARARA
      EC(IIPT,IRARARB)=EC(IIPT,IRARARB)+ SCALE*D3FDRARARB
      EC(IIPT,IRARAGA)=EC(IIPT,IRARAGA)+ SCALE*D3FDRARAGA
      EC(IIPT,IRARAGB)=EC(IIPT,IRARAGB)+ SCALE*D3FDRARAGB
C
      EC(IIPT,IRARAGC)=EC(IIPT,IRARAGC)+ SCALE*D3FDRARAAB
      EC(IIPT,IRARBRB)=EC(IIPT,IRARBRB)+ SCALE*D3FDRARBRB
      EC(IIPT,IRARBGA)=EC(IIPT,IRARBGA)+ SCALE*D3FDRARBGA
      EC(IIPT,IRARBGB)=EC(IIPT,IRARBGB)+ SCALE*D3FDRARBGB
C
      EC(IIPT,IRARBGC)=EC(IIPT,IRARBGC)+ SCALE*D3FDRARBAB
      EC(IIPT,IRBRBRB)=EC(IIPT,IRBRBRB)+ SCALE*D3FDRBRBRB
      EC(IIPT,IRBRBGA)=EC(IIPT,IRBRBGA)+ SCALE*D3FDRBRBGA
      EC(IIPT,IRBRBGB)=EC(IIPT,IRBRBGB)+ SCALE*D3FDRBRBGB
      EC(IIPT,IRBRBGC)=EC(IIPT,IRBRBGC)+ SCALE*D3FDRBRBAB
C
      ENDIF
  200 CONTINUE
      END DO
      ECOR=ECOR+E_LYP
C
      RETURN
      END
C
C*MODULE TDDXCC  *DECK FFB88
      SUBROUTINE FFB88(EXC,EX0,EX,DRHOI_,XYZWGT,SCALE,RHOMIN,
     *                 ILENG,NPTGRD,NDER,IRU,IST,IEND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION DRHOI_(NPTGRD,4,IRU)
      DIMENSION EX0(*)
      DIMENSION EX(ILENG,*)
      DIMENSION XYZWGT(*)
C
      COMMON /XDERIX/ NXDIM(3),KRA,KRB,KGA,KGB,KTA,KTB,KRARA,KRAGA,
     *                KRATA,KGAGA,KGATA,KTATA,KRBRB,KRBGB,KRBTB,KGBGB,
     *                KGBTB,KTBTB,KRARARA,KRARAGA,KRARATA,KRAGAGA,
     *                KRAGATA,KRATATA,KGAGAGA,KGAGATA,KGATATA,KTATATA,
     *                KRBRBRB,KRBRBGB,KRBRBTB,KRBGBGB,KRBGBTB,KRBTBTB,
     *                KGBGBGB,KGBGBTB,KGBTBTB,KTBTBTB
C
      DATA ZERO/0.0D+00/
C
      EXCS= ZERO
C     -- GRID LOOP
      DO IPT=IST,IEND
          IIPT=IPT-IST+1
          ROA = DRHOI_(IPT,1,1)
          GRDAA=DRHOI_(IPT,2,1)**2+DRHOI_(IPT,3,1)**2
     *               +DRHOI_(IPT,4,1)**2
          IF(IRU.EQ.1) THEN
             ROB = DRHOI_(IPT,1,1)
             GRDBB = GRDAA
          ELSE
             ROB = DRHOI_(IPT,1,IRU)
             GRDBB=DRHOI_(IPT,2,IRU)**2+DRHOI_(IPT,3,IRU)**2
     *                  +DRHOI_(IPT,4,IRU)**2
          ENDIF
      RHO = ROA + ROB
      IF (RHO.GT.RHOMIN) THEN
C
C     B88 ENERGY
C
      CALL BECKE_FUNF_ENERGY(ROA,ROB,GRDAA,GRDBB,EB88)
      EX0(IIPT)=EX0(IIPT)+EB88*SCALE
      EXCS=EXCS+EB88*SCALE*XYZWGT(IPT)
C
      IF(NDER.EQ.1) CALL BECKE_FUNF_FIRST(ROA,ROB,GRDAA,GRDBB,
     &    DFDRA,DFDRB,DFDGA,DFDGB)
C
      IF(NDER.EQ.2) CALL BECKE_FUNF_SECOND(ROA,ROB,GRDAA,GRDBB,
     & DFDRA,DFDRB,DFDGA,DFDGB,D2FDRARA,D2FDRAGA,
     & D2FDRBRB,D2FDRBGB,D2FDGAGA,D2FDGBGB)
C
      IF(NDER.EQ.3) CALL BECKE_FUNF_THIRD(ROA,ROB,GRDAA,GRDBB,
     & DFDRA,DFDRB,DFDGA,DFDGB,D2FDRARA,D2FDRAGA,
     & D2FDRBRB,D2FDRBGB,D2FDGAGA,D2FDGBGB,D3FDRARARA,
     & D3FDRARAGA,D3FDRAGAGA,D3FDRBRBRB,D3FDRBRBGB,D3FDRBGBGB,
     & D3FDGAGAGA,D3FDGBGBGB)
C
C     1ST DERIVATIVE
C
      EX(IIPT,KRA)=EX(IIPT,KRA)+SCALE*DFDRA
      EX(IIPT,KRB)=EX(IIPT,KRB)+SCALE*DFDRB
      EX(IIPT,KGA)=EX(IIPT,KGA)+SCALE*DFDGA
      EX(IIPT,KGB)=EX(IIPT,KGB)+SCALE*DFDGB
C
      IF (NDER.EQ.1) GOTO 100
C
C     2ND DERIVATIVES
C
      EX(IIPT,KRARA)=EX(IIPT,KRARA)+SCALE*D2FDRARA
      EX(IIPT,KRBRB)=EX(IIPT,KRBRB)+SCALE*D2FDRBRB
C
      EX(IIPT,KRAGA)=EX(IIPT,KRAGA)+SCALE*D2FDRAGA
      EX(IIPT,KRBGB)=EX(IIPT,KRBGB)+SCALE*D2FDRBGB
      EX(IIPT,KGAGA)=EX(IIPT,KGAGA)+SCALE*D2FDGAGA
      EX(IIPT,KGBGB)=EX(IIPT,KGBGB)+SCALE*D2FDGBGB
      IF (NDER.EQ.2) GOTO 100
C
C     3RD DERIVATIVES
C
      EX(IIPT,KRARARA)=EX(IIPT,KRARARA)+SCALE*D3FDRARARA
      EX(IIPT,KRBRBRB)=EX(IIPT,KRBRBRB)+SCALE*D3FDRBRBRB
C
      EX(IIPT,KRARAGA)=EX(IIPT,KRARAGA)+SCALE*D3FDRARAGA
      EX(IIPT,KRBRBGB)=EX(IIPT,KRBRBGB)+SCALE*D3FDRBRBGB
C
      EX(IIPT,KRAGAGA)=EX(IIPT,KRAGAGA)+SCALE*D3FDRAGAGA
      EX(IIPT,KRBGBGB)=EX(IIPT,KRBGBGB)+SCALE*D3FDRBGBGB
      EX(IIPT,KGAGAGA)=EX(IIPT,KGAGAGA)+SCALE*D3FDGAGAGA
      EX(IIPT,KGBGBGB)=EX(IIPT,KGBGBGB)+SCALE*D3FDGBGBGB
C
      ENDIF
  100 CONTINUE
      END DO
C
C     GRID LOOP END
C
      EXC=EXC+EXCS
C
      RETURN
      END
C*MODULE TDDXCC  *DECK FFAB88
      SUBROUTINE FFAB88(EXC,EX0,EX,DRHOI_,XYZWGT,SCALE,RHOMIN,
     *                  ILENG,NPTGRD,NDER,IRU,IST,IEND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION DRHOI_(NPTGRD,4,IRU)
      DIMENSION EX0(*)
      DIMENSION EX(ILENG,*)
      DIMENSION XYZWGT(*)
C
      COMMON /XDERIX/ NXDIM(3),KRA,KRB,KGA,KGB,KTA,KTB,KRARA,KRAGA,
     *                KRATA,KGAGA,KGATA,KTATA,KRBRB,KRBGB,KRBTB,KGBGB,
     *                KGBTB,KTBTB,KRARARA,KRARAGA,KRARATA,KRAGAGA,
     *                KRAGATA,KRATATA,KGAGAGA,KGAGATA,KGATATA,KTATATA,
     *                KRBRBRB,KRBRBGB,KRBRBTB,KRBGBGB,KRBGBTB,KRBTBTB,
     *                KGBGBGB,KGBGBTB,KGBTBTB,KTBTBTB
C
      DATA ZERO/0.0D+00/
C
      EXCS= ZERO
C
C     GRID LOOP
C
      DO IPT=IST,IEND
          IIPT=IPT-IST+1
          ROA = DRHOI_(IPT,1,1)
          GRDAA=DRHOI_(IPT,2,1)**2+DRHOI_(IPT,3,1)**2
     *               +DRHOI_(IPT,4,1)**2
          IF(IRU.EQ.1) THEN
             ROB = DRHOI_(IPT,1,1)
             GRDBB = GRDAA
          ELSE
             ROB = DRHOI_(IPT,1,IRU)
             GRDBB=DRHOI_(IPT,2,IRU)**2+DRHOI_(IPT,3,IRU)**2
     *                  +DRHOI_(IPT,4,IRU)**2
          ENDIF
      RHO = ROA + ROB
      IF (RHO.GT.RHOMIN) THEN
C
C     ENERGY
C
      IF(NDER.EQ.1) CALL ABECKE_FUNF_FIRST(ROA,ROB,GRDAA,GRDBB,
     &    EB88,DFDRA,DFDRB,DFDGA,DFDGB)
C
      IF(NDER.EQ.2) CALL ABECKE_FUNF_SECOND(ROA,ROB,GRDAA,GRDBB,EB88,
     & DFDRA,DFDRB,DFDGA,DFDGB,D2FDRARA,D2FDRAGA,
     & D2FDRBRB,D2FDRBGB,D2FDGAGA,D2FDGBGB)
C
      IF(NDER.EQ.3) CALL ABECKE_FUNF_THIRD(ROA,ROB,GRDAA,GRDBB,EB88,
     & DFDRA,DFDRB,DFDGA,DFDGB,D2FDRARA,D2FDRAGA,
     & D2FDRBRB,D2FDRBGB,D2FDGAGA,D2FDGBGB,D3FDRARARA,
     & D3FDRARAGA,D3FDRAGAGA,D3FDRBRBRB,D3FDRBRBGB,D3FDRBGBGB,
     & D3FDGAGAGA,D3FDGBGBGB)
C
C     ENERGY
C
      EX0(IIPT)=EX0(IIPT)+EB88*SCALE
      EXCS=EXCS+EB88*SCALE*XYZWGT(IPT)
C
C     1ST DERIVATIVE
C
      EX(IIPT,KRA)=EX(IIPT,KRA)+SCALE*DFDRA
      EX(IIPT,KRB)=EX(IIPT,KRB)+SCALE*DFDRB
      EX(IIPT,KGA)=EX(IIPT,KGA)+SCALE*DFDGA
      EX(IIPT,KGB)=EX(IIPT,KGB)+SCALE*DFDGB
C
      IF (NDER.EQ.1) GOTO 100
C
C     2ND DERIVATIVES
C
      EX(IIPT,KRARA)=EX(IIPT,KRARA)+SCALE*D2FDRARA
      EX(IIPT,KRBRB)=EX(IIPT,KRBRB)+SCALE*D2FDRBRB
C
      EX(IIPT,KRAGA)=EX(IIPT,KRAGA)+SCALE*D2FDRAGA
      EX(IIPT,KRBGB)=EX(IIPT,KRBGB)+SCALE*D2FDRBGB
      EX(IIPT,KGAGA)=EX(IIPT,KGAGA)+SCALE*D2FDGAGA
      EX(IIPT,KGBGB)=EX(IIPT,KGBGB)+SCALE*D2FDGBGB
C
      IF (NDER.EQ.2) GOTO 100
C
C     3RD DERIVATIVES
C
      EX(IIPT,KRARARA)=EX(IIPT,KRARARA)+SCALE*D3FDRARARA
      EX(IIPT,KRBRBRB)=EX(IIPT,KRBRBRB)+SCALE*D3FDRBRBRB
C
      EX(IIPT,KRARAGA)=EX(IIPT,KRARAGA)+SCALE*D3FDRARAGA
      EX(IIPT,KRBRBGB)=EX(IIPT,KRBRBGB)+SCALE*D3FDRBRBGB
C
      EX(IIPT,KRAGAGA)=EX(IIPT,KRAGAGA)+SCALE*D3FDRAGAGA
      EX(IIPT,KRBGBGB)=EX(IIPT,KRBGBGB)+SCALE*D3FDRBGBGB
      EX(IIPT,KGAGAGA)=EX(IIPT,KGAGAGA)+SCALE*D3FDGAGAGA
      EX(IIPT,KGBGBGB)=EX(IIPT,KGBGBGB)+SCALE*D3FDGBGBGB
C
      ENDIF
  100 CONTINUE
      END DO
C
C     GRID LOOP END
C
      EXC=EXC+EXCS
C
      RETURN
      END
C*MODULE TDDXCC  *DECK FFSLT
      SUBROUTINE FFSLT(EXC,EX0,EX,DRHOI_,XYZWGT,SCALE,RHOMIN,
     *                 ILENG,NPTGRD,NDER,IRU,IST,IEND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      COMMON /XDERIX/ NXDIM(3),KRA,KRB,KGA,KGB,KTA,KTB,KRARA,KRAGA,
     *                KRATA,KGAGA,KGATA,KTATA,KRBRB,KRBGB,KRBTB,KGBGB,
     *                KGBTB,KTBTB,KRARARA,KRARAGA,KRARATA,KRAGAGA,
     *                KRAGATA,KRATATA,KGAGAGA,KGAGATA,KGATATA,KTATATA,
     *                KRBRBRB,KRBRBGB,KRBRBTB,KRBGBGB,KRBGBTB,KRBTBTB,
     *                KGBGBGB,KGBGBTB,KGBTBTB,KTBTBTB
      DIMENSION EX0(*),EX(ILENG,*),DRHOI_(NPTGRD,4,*)
      DIMENSION XYZWGT(*)
C
      DATA ZERO     /0.0D+00/
      DATA TWO      /2.0D+00/
C
      ESLT=ZERO
      DO IPT=IST,IEND
          IIPT=IPT-IST+1
          ROA = DRHOI_(IPT,1,1)
          IF(IRU.EQ.1) THEN
             ROB = DRHOI_(IPT,1,1)
          ELSE
             ROB = DRHOI_(IPT,1,IRU)
          ENDIF
      RHOT = ROA + ROB
      IF(RHOT/TWO.GT.RHOMIN) THEN
C
C     SLATER POTENTIAL
C
      CALL SLATER_FUNF_ENERGY(ROA,ROB,RES)
      EX0(IIPT)=EX0(IIPT)+RES*SCALE
      ESLT=ESLT+RES*SCALE*XYZWGT(IPT)
C
      IF(NDER.EQ.1) CALL SLATER_FUNF_FIRST(ROA,ROB,DFDRA,
     & DFDRB)
C
      IF(NDER.EQ.2) CALL SLATER_FUNF_SECOND(ROA,ROB,DFDRA,
     & DFDRB,D2FDRARA,D2FDRBRB)
C
      IF(NDER.EQ.3) CALL SLATER_FUNF_THIRD(ROA,ROB,DFDRA,
     & DFDRB,D2FDRARA,D2FDRBRB,D3FDRARARA,
     & D3FDRBRBRB)
C
C     1ST DERIVATIVE
C
      EX(IIPT,KRA)=EX(IIPT,KRA)+SCALE*DFDRA
      EX(IIPT,KRB)=EX(IIPT,KRB)+SCALE*DFDRB
C
      IF (NDER.EQ.1) GOTO 100
C
C     2ND DERIVATIVE
C
      EX(IIPT,KRARA)=EX(IIPT,KRARA)+SCALE*D2FDRARA
      EX(IIPT,KRBRB)=EX(IIPT,KRBRB)+SCALE*D2FDRBRB
      IF (NDER.EQ.2) GOTO 100
C
C     3RD DERIVATIVE
C
      EX(IIPT,KRARARA)=EX(IIPT,KRARARA)+SCALE*D3FDRARARA
      EX(IIPT,KRBRBRB)=EX(IIPT,KRBRBRB)+SCALE*D3FDRBRBRB
      ENDIF
  100 CONTINUE
      END DO
C
C     END GRID LOOP
C
      EXC=EXC+ESLT
C
      RETURN
      END
