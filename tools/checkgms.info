The FTNCHEK program is available on the web, but I can also send
you a lightly modified copy.  My initials are in the code where
the changes are, with the most important being one that raises
a table size limit to the point that all source lines of GAMESS
can be checked together.

Compiling ftnchek is easy.  Unpack the tar file, which will
give you a directory called ftnchek.  chdir into this directory,
and type 
    ./configure
    make >& make.log &
There is a verification step, which is optional, 
    make check
although there's not too much point to this.  If you have access
to 'root' permissions, the best way to install the program is
to copy the man page as well as the binary, to system directories:
    mv ftnchek /usr/local/bin
    cp ftnchek.man /usr/man/manl/ftnchek.l  (2 ell's in this, 0 one's)
If not, all you need is to copy "ftnchek" to some directory that is
on your execution path.  This all takes about 3 minutes.

The script to run this is in your distribution, ~/gamess/tools/checkgms,
which I typically copy to the source directory that I am working from.
It may need a path name customized to locate the working copy, and a
path that points to a pristine, complete GAMESS distribution's source.

The top of the checkgms script tests one source file at a time.  
You can for example change the *.src to just abcxyz.src (or whatever 
its name is), and verify that file.  A correct result is no warnings,
no errors, and a few messages about using a common which is not
initialized (in this file itself).  For example,

FTNCHEK Version 3.3 November 2004

File /u1/mike/scr/inputa.f:
 0 syntax errors detected in file /u1/mike/scr/inputa.f
Warning: Common block COORDN No elements are set, but some are used.
Warning: Common block CORE No elements are set, but some are used.
   ...similar messages snipped...
Warning: Common block TINOPT No elements are set, but some are used.
Warning: Common block VBINTF No elements are used, but some are set.
Warning: Common block ZRFPAR No elements are set, but some are used.

A module that has never been to visit FTNCHEK before may generate
100 or more warnings, even if it compiles without any messages.
Typically 98 or so of the 100 will be related to assigning variables
but not using them, or commons that don't need to be present, or
arguments that aren't actually used.  Perhaps 2 of the 100 messages
may be of substance, such as using a variable that is not initialized.
It is my policy to take out all the warnings, even the 98 that don't
matter, so that future execution of FTNCHEK will not have the 98 
messages that obscure the 2 important ones.  Save a working copy
of the code as you work through removing the warnings, just in case.

Once a file is clean by itself, it is time to check it against the
rest of GAMESS.  Arguments to subroutines, and data in common blocks
are verified in this step.  This is done by "checkgms all".  Since
your new module, abcxyz.src for the sake of argument, is not presently
in GAMESS, you need to look for the line that says 'xxx' in checkgms.
Uncomment this, and replace xxx with the true name 'abcxyz' although
I'm sure you are using a much more sensible name for your addin code.

The end of a "checkgms all" log file will have only a few warnings
about unused subroutines after "zmatrx" (pre-existing warnings from 
our GAMESS).

Any new errors, like calling a routine from your code with 10 
arguments, while this subroutine in GAMESS has just 9 dummy args,
will be reported down here.  You may also see something about common
block lengths or types not matching the same common elsewhere in GAMESS.

I know this may seem fussy, but FTNCHEK is really the secret to why
GAMESS works on many machines, and without having that all many bugs
in it.
