There are pictures related to the lysine example in the article
   V. Kairys, J. H. Jensen
   J. Phys. Chem. A  104, 6656-6665(2000)

Date: Wed, 15 Mar 2000 13:24:53 -0600 (CST)
From: Visvaldas Kairys <vis@gly.chem.uiowa.edu>
To: mike@si.fi.ameslab.gov
Subject: README.1ST

This is few tools which hopefully will be useful
when preparing files for different stages of QM/MM run.
Some of them are Fortran files, and some of them are C-shell scripts.


To use Fortran files one just has to compile the source file.
Run the C-shell script runs by issuing the name of the
script followed by name of EFP points containing file(s).
View the files listed below before using them 
for additional instructions.


Visvaldas Kairys, U. of Iowa, 1999 (vis@gly.chem.uiowa.edu)

delaomo.f       This Fortran program removes select MO-s and
                a selected range of AO-s from the $VEC file.
                Inside the file there should be only 
                one $VEC group, terminated by $END, but you
                don't have to remove the rest ("junk")
                of the file.

addzeros.f      Fortran program which adds more AO-s to 
                the vectors and pads them with zeroes.
                As above, there should be only one $VEC group
                in a file.

name_efp        C-shell script which renumbers the EFPs.
                The problem is that when one tries to combine several 
                $FRAGNAME together one almost surely will have   
                EFP points with same names (such as "C" of "BO13"), 
                and GAMESS does not like it. The script adds
                a number to a name and thus (with some care)
                makes the EFP name unique.

match_efp       Finds (most of) overlapping EFP points between two
                sets of EFPs and print out additional files 
                which help to work with these EFPs. 

match_pol       Same as above, for polarizabilities.

weed_efp        Removes extraneous multipoles from the $FRAGNAME.
                Use it if GAMESS complains that you have some
                multipoles for which coordinates are unknown.
                (You have removed coordinates of the overlapping 
                EFP regions with the help of match_efp,
                so no wonder!).
                 
scale_efp       Scales the monopoles to the nearest whole number.
                The file containing unscaled monoples should contain
                only the monopoles you want to scale - name of the
                EFP point followed by the electronic and nuclear charges.
                The script will not work correctly if it sees any other 
                lines from the EFP file, such as STOP, etc.
---------------------------------------------------------------------
Date: Wed, 15 Mar 2000 09:22:23 -0600 (CST)
From: Visvaldas Kairys <vis@gly.chem.uiowa.edu>
To: mike@si.fi.ameslab.gov
Subject: Instructions (REFS.DOC?)

The QM/MM  calculations are normally done in three steps: 
  (1) truncation/projection run
  (2) MAKEFP run
  (3) hybrid QM/MM run

The most important step is the correct set up of the projection run.
The task of this run is to prepare the buffer MO-s which will be 
always frozen in the subsequent runs, and to generate the input decks 
for the steps (2) and (3).  The preparation of the input file is quite 
straightforward:

   (a) the atoms in $DATA should be arranged as follows: first, the atoms in the 
ab initio region, second, buffer atoms and third, the EFP region atoms. 
The program will know which  atoms belong to which zone from the information 
supplied in the $TRUNCN group.
A useful thing to do is to number the atoms in your projection run, for example, 
H1, C2, H3, etc. That way it is easier to keep track of the individual atoms.
Also, it is most convenient to keep the active group where the most chemical 
changes will occur in front of the $DATA  deck. For example, if you want to 
calculate the proton affinity, the proton to be removed 
should probably be placed first in $DATA.

  (b) include the $TRUNCN group in your input file:

  $TRUNCN DOPROJ=.T. NATAB=n NATBF=m $end

  where n is the number of atoms in the "ab initio" zone and m is the number of atoms in
the "buffer zone". 

  (c) set up correctly localization (see an example below). 
You must specify MOIDON=.T. in the $LOCAL card.

  (d) it is possible to use either Boys of Edmiston-Ruedenberg localization.
Since Boys localization is way faster and it uses much less memory, it is
the default.

 An example of the input file follows:

 $CONTRL SCFTYP=RHF icharg=1 RUNTYP=energy local=boys MAXIT=70 MULT=1 $end
 $LOCAL FCORE=.t. moidon=.t. $end
 $SYSTEM TIMLIM=72000 MEMORY=2000000 $END
 $BASIS GBASIS=MINI $END
!dirscf and npunch=1 because your molecule is likely to be big
 $scf dirscf=.t. npunch=1 $end
 $TRUNCN DOPROJ=.T. natab=13 natbf=5 $end
 $DATA
**********Lysine************
C1
 H1           1.0   5.2212722503   0.6959139139   0.7941076868
 N2         7.0   4.5600163226   0.3902960947   0.0930036092
 H3         1.0   4.5610152064   1.0805690359  -0.6456365990
 H4         1.0   4.9122133859  -0.4710181198  -0.3017852620
 C5         6.0   3.1647366134   0.2052681089   0.6675352606
 H6         1.0   3.2601587706  -0.5290432426   1.4539798539
 H7         1.0   2.8939761108   1.1566140237   1.1013514785
 C8         6.0   2.1944046756  -0.2266540203  -0.4217858236
 H9         1.0   2.5243001931  -1.1686737254  -0.8543890962
 H10         1.0   2.1913596283   0.5143578523  -1.2175680822
 C11        6.0   0.7782571402  -0.3706988360   0.1480019244
 H12        1.0   0.7677646943  -1.1212821250   0.9294741261
 H13        1.0   0.4865818951   0.5685798896   0.6009603661
 C14        6.0  -0.2323463640  -0.7424639300  -0.9402203751
 H15        1.0  -0.0075964170  -1.7360174569  -1.3217078352
 H16       1.0  -0.1459013313  -0.0561720987  -1.7748182464
 C17        6.0  -1.6855633649  -0.7345359675  -0.4629306995
 H18        1.0  -2.3124809086  -1.0358736419  -1.3050983599
 C19        6.0  -2.1469047234   0.6750468600  -0.1269607421
 N20        7.0  -1.8568947050  -1.5922054448   0.6986236532
 H21        1.0  -2.7877134253  -1.5230963027   1.0609039749
 H22        1.0  -1.7098518449  -2.5502485827   0.4442839846
 O23        8.0  -3.3377044155   0.6773716468   0.4511861323
 O24        8.0  -1.5492963747   1.6714370229  -0.3787168700
 H25       1.0  -3.6030096260   1.5776866126   0.6190152854
 $END

After the run finishes, you might want to inspect the output file and check if
the truncation parameters are what you would expect.

(Note: If you will be running several projection runs having the same $DATA deck,
you might want to save time on localization by taking advantage of AUTOID
switch in $TRUNCN - see description of $TRUNCN keyword for details.)

After this, examine the *.DAT file. At the end of the file you will find two
input decks separated by ===== lines. Save them into two separate input files. 
The first input deck is the final QM/MM calculation deck, the second one is
the MAKEFP calculation. Notice that the ordering of atoms 
in these files is the same as in the original truncation/projection $DATA run.
However, the QM/MM inp file has only the ab initio and buffer atoms, and
MAKEFP calculation has the buffer and efp atoms (in that order). The $VEC group
is prepared having in mind this order of atoms, naturally.

Run the MAKEFP calculation first (it is the
second of the two input decks). Before the run, examine the comments in 
the input file and make necessary adjustments, normally very few. 

MAKEFP run will generate a set of EFP parameters. They
are in the $FRAGNAME card at the end of the .DAT file. Presently,
you can get rid of the lines following (and including) the word PROJECTION.
Change $FRAGNAME into something you like, such as $MYEFP. Add $END at the end!
Also, delete everything before $FRAGNAME.

Now, set up the QM/MM run, which you have saved from the projection run. 
Append the $MYEFP card from the previous paragraph to the file. 
Examine the comments, make necessary changes. The major changes are 
required in the $EFRAG group. In it, replace xxxxx with the string MYEFP.
The centers in the angular brackets should be replaced  with the last 
atomic centers from the COORDINATES list in $MYEFP
together with the corresponding coordinates in Angstroms (the coordinates 
in $FRAGNAME are in Bohrs!). In the lysine 
example, those centers will be O23, O24 and H25.

Then, perform the run. Note: If you are reusing the same QM/MM input deck, say, to
run the unprotonated form of lysine, some more tricks will be required:
changing ICHARG in $CONTRL, IFREEZ(1) in $STATPT and truncation of the 
$VEC group (the latter can be done with utility program delaomo in tools/QMMM).

In general, it is a good idea to examine each line in the input file making sure
everything makes sense, especially if some additional manipulations are done
on the atoms/vectors.

Warning! The output and .dat files generated during steps 1 and 2 can be
quite big, and it is a good idea to remove the unnecessary information,
such as intermediate vector matrices.
 
****
Some more comments

(Step 2)
The instructions above are for simple case where the EFP region is the 
same as it is in the first step, i.e. for a molecule specified in the 
$DATA of the truncation/projection run. In real systems involving modeling
of large molecules, though, you will probably want to include more atoms
into the MM region. You can do that - just add the additional atoms anyplace 
behind the buffer atoms! 

Remember: whatever you do, NEVER change the coordinates of the atoms
from the original file, otherwise your fragment and ab initio positions 
will not make sense! In particular, do not use graphic programs which always
center the molecule!

Another thing you might want to do is to split the buffer in step (1)
into several pieces. For example, your buffer might consist of two or
more independent fragments, if you are looking at the two amino acid residues
interacting with each other. You might want to perform two MAKEFP runs
for each of the two buffer regions - to reduce the size of the system.
Whatever you do, remember that the buffer orbitals should be kept 
frozen (unchanged) at all times.
Which means that you will have to tinker with the $VEC file.
If you look at the $VEC files generated by the truncation run,
you will notice that the first few orbitals have plenty of zeroes in them.
Those are the buffer orbitals. 

Now, splitting of the buffer into, say, two regions involves
removal of some MOs from the $VEC group, as well as removal of some AOs.
It is possible to do that since each LMO in the buffer, as well as
each AO clearly belong to one or the other fragment of the buffer!
Utility program delaomo in tools/QMMM will prove to be handy in
accomplishing this task.

Make sure various parameters and options in the MAKEFP input file make sense.
If the input file was modified as just described above, the $MOFRZ and
$GUESS cards have to be probably changed having in mind the number of buffer
MOs left in the $VEC group. See if ICHARG in $CONTRL needs to be changed.

(Step 3)

1. What to do if some of numeric polarizabilities are wrong?

The answer would be: run a smaller calculation which would include
the troubling 'region' of the molecule. In particular, it is very likely
that aromatic systems will have unphysically large polarizabilities.
For example, if amino acid tyrosine phenyl ring has the wrong polarizabilities
you might want to run the analytical makefp calculation (just set POLNUM=.F. in
$LOCAL) on the whole amino acid Tyr residue using exactly the same geometry
as in the original large molecule. To make the run go faster, crank up
all possible memory in the system.
After the run finishes, replace the wrong polarizabilities in the .dat
$FRAGNAME card (look for them in the .dat file, under the header 
POLARIZABLE POINTS) with the corresponding analytic polarizabilities.
To identify which polarizability is where, the match_pol utility 
might help you.  See point 2 below on how to do that.

Some experience indicates that the polarizabilities of the bonds which are
(a) in the aromatic ring, (b) originate from the aromatic ring, and 
(c) which are connected to atoms connected to the ring,
have to be calculated analytically.

2. How to handle overlapping EFP regions.

After generation of several EFP fragments, one has to put 
them together. Which is a little bit complicated if the fragments overlap.
You probably want them to overlap in step 2 runs to presumably 
decrease errors related to the edge effects when joining two fragments.
In the overlapping region one has to  take some points
from one fragment and the rest from the other. 

First, the EFP points _have_ to be renamed (for polarizabilities
it is not necessary, but we do it anyway).
This is accomplished by running script called name_efp in tools/QMMM
directory, which renumbers EFP points in a given fragent 
(see the comments inside name_efp how to use it).
The new name will be the atomic symbol followed by a number.
It is useful to number EFP points so that you know which fragment that
particular point is coming from. For example, in the first hypothetical 
fragment the EFPs might start from 1 and in the second from 701.

Then you have to look at each and every EFP point and compare to each 
and every EFP from the second fragment to see if they match, or, in
other words to check if their coordinates are the same or nearly the same.
Since this would take _quite_ a while, in tools/QMMM there is
another utility, script match_efp. View the text of  match_efp 
to see how to use it. In short, it will generate two files, coords.1 and coords.2
containing coordinates of the EFP points of the two fragments which you
can paste into some graphics program such as MacMolPlt. If the script 
suspects the EFP point is the same in the two EFP sets, it makes it look
different, i.e. as a fluorine atom (fluorine can be replaced by any other atom type
by making a little change in a script).
The script also prints out table_of_matches. The left column in it contain 
matching points in fragment I and the right one contains points from II.
Your final joint fragment will have just one of the two matching EFP points,
so make a decision which one you want to get rid of.
Remember that it is likely that the script will not find all matches,
due to the fact that you terminate ends of the chain with hydrogens
but it is usually easy to notice those points when looking at the molecule.

After all the points that have to be removed are determined, go to COORDINATES
section the original (renamed) fragments I and II and delete lines 
corresponding to the EFPs which you want to get rid of. Don't remove the
same set of points from MONOPOLES, DIPOLES, etc. by hand  since it can be done
using utility weed_efp.

Repeat the same procedure with polarizabilities using utility match_pol.

After you clean up the fragments until they reach the condition which satisfies you
join them together using some editor.

Then the joint EFP fragment is pasted into the QM/MM input file.

