C 14 OCT 09 - TN  - DELETE DIPITFMO
C  1 MAY 09 - NMT - NEW DIMENSION FOR EFPBAS
C 12 JAN 09 - TN  - EFP2 BUG FIX
C 15 DEC 08 - HL  - EFPCMPFMO: VARIATIONAL INDUCED-DIPOLE OPERATOR
C                   DELETE FLDINDFMO
C 23 OCT 08 - LVS - CLEAN UP JIE'S CODE
C  4 MAR 08 - MWS - RAISE EFP PROCESSOR LIMIT FROM 64 TO 1024
C 20 AUG 07 - DDK,LVS - SMALL CHANGE TO GEXREP CALL, PBC-EFP CLEANED
C 24 MAR 07 - LVS - POLARIZATION SCREENING ADDED, EL.DERIV. MOVED OUT
C 22 DEC 06 - TN  - FMO/EFP GRADIENT
C  6 NOV 06 - MWS - ADJUST WAVEFUNCTION COMMON BLOCK
C 22 FEB 06 - TN  - EFP/FMO INTERFACING
C
C*MODULE EFPFMO  *DECK EFFMOIN
      SUBROUTINE EFFMOIN(ITASK,IPFMO,IPEFP,IOFMO,IOEFP)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL DOEFPIEA
C
      PARAMETER (
     *           MXFRG=1050, MXDFG=5,
     *           MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (NNAM=4)
      DIMENSION QNAM(NNAM),KQNAM(NNAM)
      DIMENSION IPFMO(1), IPEFP(1), IOFMO(1), IOEFP(1)
C
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /EFPFMO/ IEFPFMO,ISWENUC,REPNUCEFP,EFPEFP,RUNEFP
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
C
      DATA FMOEFP/8HFMOEFP  /
      DATA QNAM/8HIEACAL  ,8HIPFMO   ,8HIPEFP   ,8HNPRINT  /
      DATA KQNAM /1,1,1,1/
C
C     IF BOTH $FMO AND $EFRAG EXIST,
C     FMO/EFP CALCULATION WILL BE CARRIED OUT.
C
      IF (ITASK.NE.1.AND.ITASK.NE.2) THEN
        WRITE(IW,*) 'ITASK IS WRONG IN $FMOEFP GROUP'
        CALL ABRT
      END IF
C
      IF (ITASK.EQ.1) THEN
        IEFPFMO = 0
        ISWENUC = 1
        IEACAL  = 0
        DOEFPIEA=.FALSE.
C
C       NPRIEA IS BIT ADDITIVE
C       0: NO PRINT
C       1: FRAGMENT INTERACTION (DEFAULT)
C       2: EFP POINTS AND FMO ATOMS
C
        NPRIEA  = 0
C
        IEOF    = 0
        CALL SEQREW(IR)
        CALL FNDGRP(IR,' $EFRAG ',IEOF)
        IF(IEOF.NE.0) THEN
          RETURN
        ELSE
          IEOF = 0
          CALL SEQREW(IR)
          CALL FNDGRP(IR,' $FMO   ',IEOF)
          IF (IEOF.NE.0) THEN
            RETURN
          ELSE
            IEFPFMO = 1
            ISWENUC = 0
          END IF
        END IF
C
        IF (MASWRK) WRITE(IW,9000)
      END IF
C
CZ
CZ    READ IN $FMOEFP GROUP
CZ    ITASK = 1: LIGHT VERSION. JUST READ IEACAL WHETHER OR
CZ               NOT TO ALLOCATE MEMORY FOR IPFMO AND IPEFP
CZ    ITASK = 2: HEAVY VERSION: SUPPOSE THAT IPFMO AND IPEFP ARE
CZ               ALLOCATED, IN WHICH THE VALUES ARE STORED.
CZ
      IF (ITASK.EQ.2) THEN
        CALL VICLR(IPFMO,1,NFG)
        CALL VICLR(IOFMO,1,NFG)
        CALL VICLR(IPEFP,1,NFRG)
        CALL VICLR(IOEFP,1,NFRG)
        KQNAM(2)=NFG *10+1
        KQNAM(3)=NFRG*10+1
      ELSE
        KQNAM(2)=1*10+9
        KQNAM(3)=1*10+9
      END IF
C
C
C        ----- READ NAMELIST $FMOEFP  -----
C
      JRET = 0
      CALL NAMEIO(IR,JRET,FMOEFP,NNAM,QNAM,KQNAM,
     *            IEACAL,IPFMO,IPEFP,NPRIEA,
     *   0,0,0,0,0,    0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,
     *   0,0,0,0,0,    0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0,
     *   0,0,0,0,0,    0,0,0,0,0,   0,0,0,0,0,   0,0,0,0,0)
C
      IF(JRET .EQ. 1) RETURN
      IF(JRET .EQ. 2) THEN
        IF (MASWRK) WRITE (IW,9005)
        CALL ABRT
      END IF
C
      IF (IEACAL.NE.0.AND.IEACAL.NE.1) THEN
        IF (MASWRK) WRITE (IW,9010)
        CALL ABRT
      END IF
C
      IF (ITASK.EQ.1) RETURN
C
C
C     FOR ITASK=2 HEREAFTER
C
      IF (IEACAL.EQ.1.AND.NPRIEA.EQ.0) NPRIEA=1
C
      NFGIEA = 0
      DO I = 1, NFG
        IF (IPFMO(I).GT.NFG.OR.IPFMO(I).LT.0) THEN
          IF (MASWRK) WRITE(IW,9015) IPFMO(I)
          CALL ABRT
        END IF
        IF (IPFMO(I).GT.0) THEN
          DO J = 1, I-1
            IF (IPFMO(I).EQ.IPFMO(J)) THEN
              IF (MASWRK) WRITE(IW,9020)
              CALL ABRT
            END IF
          END DO
C
          ! RELABEL FMO FRAGMENTS FOR IEA
          NFGIEA = NFGIEA + 1
          IOFMO(NFGIEA) = IPFMO(I)
        END IF
      END DO
C
      NFRGIEA = 0
      DO I = 1, NFRG
        IF (IPEFP(I).GT.NFRG.OR.IPEFP(I).LT.0) THEN
          IF (MASWRK) WRITE(IW,9025) IPFMO(I)
          CALL ABRT
        END IF
        IF (IPEFP(I).GT.0) THEN
          DO J = 1, I-1
            IF (IPEFP(I).EQ.IPEFP(J)) THEN
              IF (MASWRK) WRITE(IW,9030)
              CALL ABRT
            END IF
          END DO
C
          NFRGIEA = NFRGIEA + 1
          IOEFP(NFRGIEA) = IPEFP(I)
        END IF
      END DO
C
      IF (MASWRK) THEN
        WRITE(IW,9035) IEACAL
        WRITE(IW,9040) (IPFMO(I),I=1,NFG)
        WRITE(IW,9045) (IPEFP(I),I=1,NFRG)
        WRITE(IW,9050) (IOFMO(I),I=1,NFGIEA)
        WRITE(IW,9055) (IOEFP(I),I=1,NFRGIEA)
        WRITE(IW,9060) NFGIEA, NFRGIEA
      END IF
      RETURN
 9000 FORMAT(/3X,44(1H-)/
     *   3X,'   ***** FMO/EFP CALCULATION STARTS *****   '/
     *   3X,44(1H-))
 9005 FORMAT(1X,' ERROR READING $FMOEFP GROUP')
 9010 FORMAT(1X,' IEACAL MUST BE EITHER 0 OR 1.')
 9015 FORMAT(1X,' NO SUCH A NUMBER IS ALLOWED IN IPFMO: ',I8)
 9020 FORMAT(1X,' THE SAME FRAGMENT NUMBERS ARE ALLOWED IN IPFMO')
 9025 FORMAT(1X,' NO SUCH A NUMBER IS ALLOWED IN IPEFP: ',I8)
 9030 FORMAT(1X,' THE SAME FRAGMENT NUMBERS ARE ALLOWED IN IPEFP')
 9035 FORMAT(/5X,'$FMOEFP OPTIONS'/5X,15(1H-)/
     *        5X,'IEACAL=',I8)
 9040 FORMAT(5X,'IPFMO(1)=',8I6)
 9045 FORMAT(5X,'IPEFP(1)=',8I6)
 9050 FORMAT(5X,'IOFMO(1)=',8I6)
 9055 FORMAT(5X,'IOEFP(1)=',8I6)
 9060 FORMAT(5X,'NUMBER OF FMO AND EFP FRAGMENTS FOR IEA:',2I8/)
      END
C*MODULE EFPFMO  *DECK DEFEFCL
      SUBROUTINE DEFEFCL(QUA)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      CHARACTER*8 POLNAM,DPOLNAM
C
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12,
     *           MXFGPT=12000,MXIFRQ=12)
      DIMENSION QUA(6,*)
C
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FMCOM / XX(1)
      COMMON /EFFMOP/ LEFLDF,LEFADDF,LDINDF,LDINDDF,
     *                LDIND2F,LDINDD2F,LDEFEF,LDEFTF,LTORQF
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
C
C     NOTE: XX(LDEFEF) IS CALCULATED FOR BEING SUBTRACTED FROM FULL
C           INDUCED DIPOLE DERIVATIVES THAT WILL BE CALCULATED IN VNNDER
C           TO AVOID DOUBLE COUNTING THAT HAPPENS IN THE FMO LOOP.
C           DIND AND DINDD HERE, WHICH ARISES FROM EFP-EFP POTENTIALS,
C           HAVE BEEN CALCULATED IN EFEFCL.
C
      IF (IEFP.EQ.1) THEN
        IF (IEFC.EQ.1) THEN
          CALL DCHIND(DIND,DINDD,XX(LDEFEF),1)
        END IF
        IF (IEFD.EQ.1) THEN
          CALL DDPIND(DIND,DINDD,XX(LDEFEF),1)
        END IF
        IF (IEFQ.EQ.1) THEN
          CALL DQDIND(QUA,DIND,DINDD,XX(LDEFEF),1)
        END IF
        CALL DININ(DIND,DINDD,XX(LDEFEF),1)
      END IF
C
      IF(GOPARR) CALL DDI_GSUMF(1520,XX(LDEFEF),6*NFRG)
C
C     AMEMA = 0.0D+00
C     IF (MASWRK) THEN
C       DO I = 1, 6*NFRG
C         AMEMA = AMEMA + (XX(LDEFEF+I-1))**2
C       END DO
C       AMEMA = SQRT(AMEMA/(6*NFRG))
C       WRITE (6,*) 'DEFEF RMS', AMEMA
C     ENDIF
C
C     IF (MASWRK) THEN
C     WRITE(6,*) 'TEST DEFEF DEFT'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DEFEF(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST DEFEF TORQ'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DEFEF(J,I),J=4,6)
C     END DO
C     ENDIF
C
CZCZ  CLEAR FOR THE LATER CALCULATION
      CALL VCLR(DIND, 1,3*NPTTPT)
      CALL VCLR(DINDD,1,3*NPTTPT)
CZCZ
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPDEG
      SUBROUTINE EFPDEG(IDA, IBODY)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
C
      PARAMETER (MXFRG=1050, MXFGPT=12000, MXDFG=5,
     *           MXDPPT=MXFRG*MXDFG*12)
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FMCOM / XX(1)
      COMMON /EFFMOP/ LEFLDF,LEFADDF,LDINDF,LDINDDF,
     *                LDIND2F,LDINDD2F,LDEFEF,LDEFTF,LTORQF
C
C     ONLY MASTER CAN COME
C
C
      IF (IDA.EQ.0) RETURN
      DA = IDA
C
C     IF (MASWRK) THEN
C     WRITE (6,*) 'NFIRST NEND', NFIRST,NEND
C     WRITE (6,*) 'DA ISWENUC', DA, ISWENUC
C     WRITE(6,*) 'TEST DEFT BEFORE'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DEFT(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST TORQ BEFORE'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (TORQ(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST DESFRG DEFT'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DESFRG(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST DESFRG TORQ'
C     DO I = 1, NFRG
C       WRITE (6,'(3F16.8)') (DESFRG(J,I),J=4,6)
C     END DO
C     END IF
C
      II = (IBODY-1)*NFRG*3
      JJ = LDEFTF + II
      KK = LTORQF + II
      MM = -1
      NN = -1
      DO I = 1, NFRG
        LD = JJ + MM
        LT = KK + MM
        LF = LDEFEF + NN
        LL = LF + 3
        DO J = 1, 3
          XX(LD+J) = XX(LD+J) + DA*(DEFT(J,I) - XX(LF+J))
          XX(LT+J) = XX(LT+J) + DA*(TORQ(J,I) - XX(LL+J))
        END DO
        MM = MM + 3
        NN = NN + 6
      END DO
C     IF (MASWRK) THEN
C     WRITE(6,*) 'TEST DEFTTMP'
C     DO I = 1, NFRG*3
C       WRITE (6,'(3F16.8)') (DEFTTMP(J,I),J=1,3)
C     END DO
C     WRITE(6,*) 'TEST TORQTTMP'
C     DO I = 1, NFRG*3
C       WRITE (6,'(3F16.8)') (TORQTMP(J,I),J=1,3)
C     END DO
C     END IF
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPFMOIO
      SUBROUTINE EFPFMOIO(IO)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (MXPT=2000, MXFRG=1050, MXFGPT=12000, MXDFG=5,
     *           MXAO=8192, MXDPPT=MXFRG*MXDFG*12)
C
C
      COMMON /FMCOM / XX(1)
      COMMON /EFPCMO/ NOCC(MXDFG),NVIR(MXDFG),NAO(MXDFG),NTAO,
     *                CANFOK(MXAO,MXDFG)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
      COMMON /EFFMIO/ L75,L81,L267,L268,L269
      COMMON /EFPMP2/ MP2TYP
C
C     IF (MASWRK) WRITE(6,*) L75,L81,L267,L268,L269
      MXMO=0
      MXBF=0
      DO I=1,NFRG
        MXMO=MAX(MXMO,NORB(I))
        MXBF=MAX(MXBF,NPBF(I))
      END DO
      MXMO2=(MXMO*MXMO+MXMO)/2
      LENPV=MXBF*NTMO
      LENFM=MXMO2*NFRG
      LENCV=MXBF*NTAO
      MXRPTS=0
      DO IFRG=1,NFRG
        MXRPTS = MAX(NRPTS(IFRG),MXRPTS)
      END DO
      MXRPTS=MXRPTS+1
      NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
      LEN = MXRPTS*MXRPTS*NDFRG2
C     IF (MASWRK) WRITE(6,*) LEN,LENPV,LENFM,LENCV
      IF (IO.EQ.1) THEN
C
        IF (NFRG.GT.1) THEN
C         IF (MASWRK) THEN
C           WRITE (6,*) 'WRITING EFP1 PARAMETERS'
C           WRITE (6,'(6F16.8)') (XX(L75+JK),JK=0,2*LEN-1)
C         ENDIF
          IF (IREP.EQ.1) CALL DAWRIT(IDAF,IODA,XX(L75),2*LEN,75,0)
          IF (NTMO.GT.0) THEN
            CALL DAWRIT(IDAF,IODA,XX(L267),LENPV,267,0)
            CALL DAWRIT(IDAF,IODA,XX(L268),LENFM,268,0)
          ENDIF
          IF (NTAO.GT.0) THEN
            CALL DAWRIT(IDAF,IODA,XX(L269),LENCV,269,0)
          ENDIF
C
          IF (MP2TYP.EQ.1) THEN
            MXDPTS=0
            DO IFRG=1,NFRG
              MXDPTS = MAX(NDPTS(IFRG),MXDPTS)
            END DO
            MXDPTS=MXDPTS+1
            NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
            LEN = MXDPTS*MXDPTS*NDFRG2
            CALL DAWRIT(IDAF,IODA,XX(L81),6*LEN,81,0)
          ENDIF
        END IF
      ELSE
C
        IF (NFRG.GT.1) THEN
          IF(IREP.EQ.1) CALL DAREAD(IDAF,IODA,XX(L75),2*LEN,75,0)
          IF (NTMO.GT.0) THEN
            CALL DAREAD(IDAF,IODA,XX(L267),LENPV,267,0)
            CALL DAREAD(IDAF,IODA,XX(L268),LENFM,268,0)
          ENDIF
          IF (NTAO.GT.0) THEN
            CALL DAREAD(IDAF,IODA,XX(L269),LENCV,269,0)
          END IF
          IF (MP2TYP.EQ.1) THEN
            MXDPTS=0
            DO IFRG=1,NFRG
              MXDPTS = MAX(NDPTS(IFRG),MXDPTS)
            END DO
            MXDPTS=MXDPTS+1
            NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
            LEN = MXDPTS*MXDPTS*NDFRG2
            CALL DAREAD(IDAF,IODA,XX(L81),6*LEN,81,0)
          ENDIF
        END IF
      ENDIF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK DEFPCLR
      SUBROUTINE DEFPCLR
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      PARAMETER (MXFRG=1050)
C
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /EFPGCX/ DCTFRG(6,MXFRG),DXRFRG(6,MXFRG)
      CALL VCLR(DESFRG,1,6*MXFRG)
      CALL VCLR(DCTFRG,1,6*MXFRG)
      CALL VCLR(DXRFRG,1,6*MXFRG)
C
      RETURN
      END
C
C*MODULE EFPFMO  *DECK EFPMEM
      SUBROUTINE EFPMEM(NDER,LAST,NEEDEFP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MXPT=2000,MXFRG=1050,MXFGPT=12000,MXAO=8192,MXDFG=5,
     *           MXDPPT=MXFRG*MXDFG*12)
      COMMON /EFFMIO/ L75,L81,L267,L268,L269
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDIND2FMO,LDINDD2FMO,LDEFEF,LDEFTF,LTORQF
      COMMON /EFPCMO/ NOCC(MXDFG),NVIR(MXDFG),NAO(MXDFG),NTAO,
     *                CANFOK(MXAO,MXDFG)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB1(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /EFPMP2/ MP2TYP
C
      LEFLDFMO   = LAST
      LEFADDFMO  = LEFLDFMO   + NPTTPT*3
      LDINDFMO   = LEFADDFMO  + NPTTPT*3
      LDINDDFMO  = LDINDFMO   + NPTTPT*3
      LAST       = LDINDDFMO  + NPTTPT*3
      IF (NDER.GT.0) THEN
        LDEFEF = LAST
        LDEFTF = LDEFEF + 6*NFRG
        LTORQF = LDEFTF + 3*NFRG*NBODY
        LAST   = LTORQF + 3*NFRG*NBODY
      ELSE
        LDEFEF = LAST
        LDEFTF = LAST
        LTORQF = LAST
      ENDIF
C
      IF (NFRG.GT.1) THEN
        MXRPTS=0
        DO IFRG=1,NFRG
          MXRPTS = MAX(NRPTS(IFRG),MXRPTS)
        END DO
        MXRPTS=MXRPTS+1
        NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
        LENN1 = MXRPTS*MXRPTS*NDFRG2
        IF (IREP.EQ.1) THEN
          L75  = LAST
          LAST = L75 + LENN1*2
        END IF
C
        MXDPTS=0
        DO IFRG=1,NFRG
          MXDPTS = MAX(NDPTS(IFRG),MXDPTS)
        END DO
        MXDPTS=MXDPTS+1
        NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
        LENN2 = MXDPTS*MXDPTS*NDFRG2
        IF (MP2TYP.EQ.1) THEN
          L81  = LAST
          LAST = L81 + LENN2*6
        END IF
C
        MXMO=0
        MXBF=0
        DO I=1,NFRG
          MXMO=MAX(MXMO,NORB1(I))
          MXBF=MAX(MXBF,NPBF(I))
        END DO
        MXMO2=(MXMO*MXMO+MXMO)/2
        LENPV=MXBF*NTMO
        LENFM=MXMO2*NFRG
        LENCV=MXBF*NTAO
        IF (NTMO.GT.0) THEN
          L267 = LAST
          L268 = L267 + LENPV
          LAST = L268 + LENFM
        END IF
        IF (NTAO.GT.0) THEN
          L269 = LAST
          LAST = L269 + LENCV
        END IF
      ENDIF
C
      NEEDEFP=LAST-LEFLDFMO
      RETURN
      END
C*MODULE EFPFMO  *DECK EFEFDER
      SUBROUTINE EFEFDER(EF3)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL OUT
C
      PARAMETER (MXDFG=5, MXPT=2000, MXFRG=1050,
     *           MXFGPT=12000, MXDPPT=MXFRG*MXDFG*12)
C
      DIMENSION EF3(3,*)
C
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /EFPOTD/ METHOD,INABIO,MOVE
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FMCOM / XX(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C
C     COSMO CHANGES
C
C
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
      COMMON /INTFRG/ EFF(3,MXFRG),EFF2(3,MXFRG)
      COMMON /EFPMP2/ MP2TYP
C
      INTEGER DDI_NP, DDI_ME
C
      DATA DEBUG/8HDEBUG   /, DBUGME/8HVNNDER  /, GRD1/8HGRD1    /
C
C     ----- GRADIENT OF NUCLEAR REPULSION ENERGY -----
C     PLUS NUCLEAR CONTRIBUTIONS FROM VARIOUS SOLVENT MODELS
C
C
C     DERIVATIVES OF EFP-EFP INTERACTIONS (MULTIPOLES, REPULSION)
C     FOR EFP/FMO ARE CALCULATED HERE. THIS IS TAKEN FROM VNNDER.
C     ONLY INDUCED DIPOLE TERMS ARE CALCULATED IN VNNDER.
C
      CALL DDI_NPROC( DDI_NP, DDI_ME )
C
C        NOTE THAT -OUT- DOES NOT INCLUDE -MASWRK- SO ALL NODES
C        CAN CALL THE PARALLEL DEBUGGING ROUTINE (W/GLOBAL SUM).
C
      OUT = (EXETYP.EQ.DEBUG  .OR.  EXETYP.EQ.DBUGME  .OR.
     *       EXETYP.EQ.GRD1   .OR.  NPRINT.EQ.-3)
C
C     ----- EFFECTIVE FRAGMENT POTENTIAL -----
C     MULTIPOLE DERIVATIVE TERMS ARE NOW DONE ELSEWHERE, IN -ENUC-
C     EFP2 EXCHANGE-REPULSION IS ALSO IN ENUC
C     CHARGE-TRANSFER SHOULD BE ADDED HERE OR TO ENUC - LETS WORRY LATER
C
      IF(NFRG.GT.1) THEN
C
         IF(OUT) CALL EFP_GRD_DBG0('NUCLEAR ',EF3,ATORQ)
C
         IF (METHOD .GE. 4) GO TO 400
C
C   ----- GRADIENT TERMS SPECIFIC TO THE -EFP1- MODEL:
C
         IF(NTMO.EQ.0) THEN
C
C                GRADIENT OF THE FITTED EXCHANGE REPULSION TERM
C
            IF(IREP.EQ.1) THEN
               MXRPTS=0
               DO IFRG=1,NFRG
                  MXRPTS = MAX(NRPTS(IFRG),MXRPTS)
               ENDDO
               MXRPTS=MXRPTS+1
               NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
               LEN = MXRPTS*MXRPTS*NDFRG2
               CALL VALFM(LOADFM)
               LAREL = LOADFM + 1
               LCREL = LAREL  + LEN
               LAST  = LCREL  + LEN
               NEED = LAST - LOADFM - 1
               CALL GETFM(NEED)
               CALL DAREAD(IDAF,IODA,XX(LAREL),2*LEN,75,0)
               CALL DREPUL(XX(LAREL),XX(LCREL),MXRPTS,NDFRG2)
               IF(OUT) CALL EFP_GRD_DBG('DREPUL  ',DESFRG)
               CALL RETFM(NEED)
            END IF
C
C    THERE IS A DISPERSON TERM IN THE MP2 FLAVOR OF -EFP1- MODEL
C
            IF(MP2TYP.EQ.1) THEN
               MXDPTS=0
               DO IFRG=1,NFRG
                  MXDPTS = MAX(NDPTS(IFRG),MXDPTS)
               ENDDO
               MXDPTS=MXDPTS+1
               NDFRG2 = (NDFRG*NDFRG+NDFRG)/2
               LEN = MXDPTS*MXDPTS*NDFRG2
               CALL VALFM(LOADFM)
               LAREL = LOADFM + 1
               LDREL = LAREL  + LEN
               LCREL = LDREL  + LEN
               LXREL = LCREL  + LEN
               LBREL = LXREL  + LEN
               LEREL = LBREL  + LEN
               LAST  = LEREL  + LEN
               NEED  = LAST - LOADFM - 1
               CALL GETFM(NEED)
               CALL DAREAD(IDAF,IODA,XX(LAREL),6*LEN,81,0)
C
C     THERE'S BOTH A C6 AND C8 CONTRIBUTION TO DISPERSION
C     NOTE THAT THE -EFF2- VALUES DON'T GET PUT INTO THE GRADIENT
C     UNTIL THE CALL TO THE -EFFT- ROUTINE CALLED DURING INTEGRALS.
C
               CALL VCLR(EFF2,1,3*NFRG)
C
               CN=6.0D+00
               CALL DDISPR(XX(LAREL),XX(LDREL),XX(LCREL),
     *                     MXDPTS,NDFRG2,CN)
               IF(OUT) CALL EFP_GRD_DBG('DDISPR-6',DESFRG)
C
               CN=8.0D+00
               CALL DDISPR(XX(LXREL),XX(LBREL),XX(LEREL),
     *                     MXDPTS,NDFRG2,CN)
               IF(OUT) CALL EFP_GRD_DBG('DDISPR-8',DESFRG)
               CALL RETFM(NEED)
            END IF
         END IF
C
      END IF
C
C         THIS ENDS ALL COMPUTATIONS OF EFP GRADIENTS,
C         EXCEPT CLEANUPS, SUMS, ETC.
C
C     ----- FRAGMENT TORQUES -----
C
  400 CONTINUE
C
      RETURN
C
      END
C*MODULE EFPFMO  *DECK EFEFCL
      SUBROUTINE EFEFCL
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXFRG=1050, MXFGPT=12000,MXIFRQ=12,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
C
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00)
C
C
      LOGICAL GOPARR,MASWRK,DSKWRK
      LOGICAL DOEFPIEA
      CHARACTER*8 POLNAM,DPOLNAM
CZ    EFPOTD IS ADDED ON 5/17/08
      COMMON /FMCOM / XX(1)
      COMMON /FRFD  / PPEFX(MXFGPT), PPEFY(MXFGPT), PPEFZ(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /EFPFMO/ IEFPFMO,ISWENUC,REPNUCEFP,EFPEFP,RUNEFP
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDIND2FMO,LDINDD2FMO,LDEFEF,LDEFTF,LTORQF
CZCZ
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LREMPOL
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
CZCZ
C
      CALL VCLR(XX(LEFLDFMO),  1,NPTTPT*3)
      CALL VCLR(XX(LEFADDFMO), 1,NPTTPT*3)
      CALL VCLR(XX(LDINDFMO),  1,NPTTPT*3)
      CALL VCLR(XX(LDINDDFMO), 1,NPTTPT*3)
CZCZ
      IF (IEACAL.EQ.1) DOEFPIEA = .TRUE.
      IF (DOEFPIEA) THEN
        NPALL = 0
        DO I = 1, NFRGIEA
          IOE = IXFTCH(XX(LIOEFP),I)
          NPALL = NPALL + NPPTS(IOE)
        END DO
        CALL VCLR(XX(LEFEFPT),1,NPALL*3)
C
        CALL VALFM(LOADFM)
        LDOCNT = LOADFM + 1
        LAST   = LDOCNT + NPTTPT
        NDIEA  = LAST - LOADFM - 1
        CALL GETFM(NDIEA)
        CALL LOGIEA(1,NFRGIEA,NPTTPT,XX(LDOCNT),XX(LDOCNT),XX(LIOEFP),
     *              NPPTS)
      END IF
CZCZ
C
      II = 0
      DO LEFP = 1, NPTTPT
        XX(LEFLDFMO+II  ) = PPEFX(LEFP)
        XX(LEFLDFMO+II+1) = PPEFY(LEFP)
        XX(LEFLDFMO+II+2) = PPEFZ(LEFP)
        II = II + 3
      ENDDO
C
C     THE FOLLOWING IS VERY IMPORTANT FOR GETTING THE PURE EFP DIND
C     AND DINDD.
C
      CALL VCLR(DIND, 1,3*NPTTPT)
      CALL VCLR(DINDD,1,3*NPTTPT)
C
C     ALWAYS CALL TO DIPIT !
C
      CALL VALFM(LOADFM)
      LDIPNEW  = LOADFM   + 1
      LDIPNWD  = LDIPNEW  + NFRG
      LDINDC   = LDIPNWD  + NFRG
      LDINDDC  = LDINDC   + 3*NPTTPT
      LDIND_W  = LDINDDC  + 3*NPTTPT
      LDIND_C  = LDIND_W  + 6*NPTTPT
      LEWLD1   = LDIND_C  + 6*NPTTPT
      LEWLD2   = LEWLD1   + 3*NPTTPT
      LAST     = LEWLD2   + 3*NPTTPT
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
      CALL DIPIT(XX(LEFLDFMO),XX(LEFADDFMO),XX(LDINDC),XX(LDINDDC),
     *           XX(LDIND_W),XX(LDIND_C),
     *           NPTTPT,XX(LDIPNEW),XX(LDIPNWD),
     *           XX(LEWLD1),XX(LEWLD2),NFRG)
      CALL RETFM(NEED)
C
C     EFP-EFP INTERACTION ENERGY
C
      IPCOUNT = ME - 1
      EFPEFP = ZERO
      DO 24 LEFP=1,NPTTPT
        IF (GOPARR) THEN
          IPCOUNT = IPCOUNT + 1
          IF (MOD(IPCOUNT,NPROC).NE.0) THEN
            GO TO 24
          END IF
        END IF
C
C       FIELD JUST DUE TO EFP
C
        PEFPX=PPEFX(LEFP)
        PEFPY=PPEFY(LEFP)
        PEFPZ=PPEFZ(LEFP)
C
C       INDUCED DIPOLE
C
        PMUX   =  DIND(1,LEFP)
        PMUY   =  DIND(2,LEFP)
        PMUZ   =  DIND(3,LEFP)
        PMUXD  = DINDD(1,LEFP)
        PMUYD  = DINDD(2,LEFP)
        PMUZD  = DINDD(3,LEFP)
        TOTMUX = PMUX + PMUXD
        TOTMUY = PMUY + PMUYD
        TOTMUZ = PMUZ + PMUZD
C
        EFPEFP = EFPEFP - ( TOTMUX*PEFPX
     *                     +TOTMUY*PEFPY
     *                     +TOTMUZ*PEFPZ)*PT5*PT5
CZCZ
        IF (DOEFPIEA) THEN
          CALL EFEFIEA(LEFP,XX(LEFEFPT),XX(LDOCNT),TOTMUX,TOTMUY,TOTMUZ)
        END IF
CZCZ
 24   CONTINUE
CZCZ
      IF (DOEFPIEA) THEN
        CALL RETFM(NDIEA)
        CALL DDI_GSUMF(683,XX(LEFEFPT),NPALL*3)
        DOEFPIEA = .FALSE.
      END IF
CZCZ
C
      IF (GOPARR) CALL DDI_GSUMF(684,EFPEFP,1)
      REPNUCEFP = REPNUCEFP + EFPEFP
      IF (MASWRK) THEN
        WRITE(6,'(A,F16.8)') ' PURE EFP-EFP CONTRIBUTION', REPNUCEFP
      END IF
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPFMODER
      SUBROUTINE EFPFMODER(NDER,DEFTF,TORQF,DEFEF)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,MASWRK,DSKWRK
C
      PARAMETER (MXATM=2000, MXSHEF=1000, MXGEFP=4000,
     *           MXPT=2000, MXFRG=1050, MXFGPT=12000, MXDFG=5,
     *           MXDPPT=MXFRG*MXDFG*12)
C
      DIMENSION DEFTF(3,*), TORQF(3,*), DEFEF(6,*)
C
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /FMCOM / XX(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NATEF(MXDFG),NUMEF(MXDFG),NTPATM
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
      COMMON /EFPFMO/ IEFPFMO,ISWENUC,REPNUCEFP,EFPEFP,RUNEFP
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /EFPGCX/ DCTFRG(6,MXFRG),DXRFRG(6,MXFRG)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /EFFMOP/ LEFLDFMO,LEFADDFMO,LDINDFMO,LDINDDFMO,
     *                LDIND2FMO,LDINDD2FMO,LDEFEF,LDEFTF,LTORQF
C
C     THIS SUBROUTINE IS IN WORLD SCOPE
C
C     (1). THIS SUBROUTINE CALCULATES FIELD AT POLARIZABLE POINTS
C          DUE TO MULTIPOLES IN FRGFLD --> GET PPEFX TO PPEFZ
C
C     (2). DERIVATIVES OF PURE EFP-EFP INDUCED DIPOLES IN DEFEFCL
C          AND THE OTHER DERIVATIVES OF THE PURE EFP-EFP INTERACTIONS
C          IN EFEFDER
C
C     NOTE: MULT-MULT DERIV. ARE CALCULATED IN ENUC (CALL FFELEC)
C           CONTRIBUTIONS ARE STORED IN DESFRG.
C
      ISWENUC = 1
      TMPNUC  = 0
      TMPNUC  = TMPNUC+ENUC(NAT,ZAN,C)
      ISWENUC = 0
C
      IF (NFRG.LE.1) RETURN
      IF (IEFP.EQ.1) THEN
        CALL FRGFLD
        CALL EFEFCL
      END IF
      IF (NDER.GT.0) THEN
        NFRPTS = NMTTPT + NPTTPT + NRTTPT + NTPATM + NTMO + NDTTPT
        CALL VALFM(LOADFM)
        LWORK = LOADFM + 1
        LEF3  = LWORK  + 10*NMTTPT
        LAST  = LEF3   +  3*NFRPTS
        NEED = LAST - LOADFM - 1
        CALL GETFM(NEED)
C
C       DEFEFCL: EFP-EFP INDUCED DIPOLE DERIVATIVES
C
        CALL DEFEFCL(XX(LWORK))
C
C       THE DERIVATIVES OF EFP-EFP REPULSION
C
        CALL EFEFDER(XX(LEF3))
C
        CALL RETFM(NEED)
C
        IF(GOPARR) CALL DDI_GSUMF(778,DESFRG,6*MXFRG)
        IF (MASWRK) THEN
          DO IFRG = 1, NFRG
            DO ICRD = 1, 3
              DEFTF(ICRD,IFRG) = DEFTF(ICRD,IFRG) + DCTFRG(ICRD,IFRG)
     *                                            + DXRFRG(ICRD,IFRG)
     *                                            + DESFRG(ICRD,IFRG)
     *                                            + DEFEF(ICRD,IFRG)
              TORQF(ICRD,IFRG) = TORQF(ICRD,IFRG) + DCTFRG(ICRD+3,IFRG)
     *                                            + DXRFRG(ICRD+3,IFRG)
     *                                            + DESFRG(ICRD+3,IFRG)
     *                                            + DEFEF(ICRD+3,IFRG)
            END DO
          END DO
C
          NFRG_3 = 3*NFRG
          DO I = 1, NBODY - 1
            CALL DCOPY(NFRG_3,DEFTF,1,XX(LDEFTF+NFRG_3*I),1)
            CALL DCOPY(NFRG_3,TORQF,1,XX(LTORQF+NFRG_3*I),1)
          END DO
        END IF
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPPARL
      SUBROUTINE EFPPARL
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXFRG=1050, MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (MXCPUEFP=1024)
C
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /EFPAR / LOCNFG,NLOW,NUP
      COMMON /EFPAR2/ NFRGAL(MXCPUEFP),NLOWAL(MXCPUEFP),NUPAL(MXCPUEFP),
     *                NPPTAL(MXCPUEFP)
      INTEGER DDI_NP,DDI_ME,FLO,CEIL,DIFF
C
C     PARTITION EFP'S OVER PROCESSORS
C
C
C     THIS IS TAKEN FROM SUBROUTINE START. THIS SETS UP THE PARAMETERS
C     FOR EFP PARALLELIZATION SCHEME.
C     WHEN ONE USES GDDI COMMUNICATER, THE PARALLELIZATION PARAMETER
C     FOR EFP MUST BE RESET.
C
      IF(NFRG.GT.0) THEN
        DDI_ME = ME
        DDI_NP = NPROC
        IF (MOD(NFRG,DDI_NP) .EQ. 0) THEN
          LOCNFG = NFRG / DDI_NP
          NLOW = DDI_ME * LOCNFG + 1
        ELSE
          CEIL = NFRG/DDI_NP + 1
          FLO = NFRG/DDI_NP
          DIFF = NFRG - DDI_NP*FLO
C
          IF (DDI_ME .GT. (DDI_NP-1-DIFF)) THEN
            LOCNFG = CEIL
            NLOW = DDI_ME * LOCNFG - (DDI_NP-1-DIFF)
          ELSE
            LOCNFG = FLO
            NLOW = DDI_ME * LOCNFG + 1
          END IF
        END IF
        NUP =  NLOW + LOCNFG - 1
        IF(GOPARR) THEN
C    THERE IS AN UNFORTUNATE COMMON BLOCK DIMENSION USED HERE.
          IF(DDI_NP.GT.MXCPUEFP) THEN
             IF(MASWRK) WRITE(IW,*)
     *          'ERROR IN PARALLEL EFP, MXCPUEFP,NPROC=',MXCPUEFP,DDI_NP
             CALL ABRT
          END IF
          CALL VICLR(NFRGAL,1,MXCPUEFP)
          CALL VICLR(NLOWAL,1,MXCPUEFP)
          CALL VICLR( NUPAL,1,MXCPUEFP)
          NFRGAL(DDI_ME+1) = LOCNFG
          NLOWAL(DDI_ME+1) = NLOW
           NUPAL(DDI_ME+1) = NUP
          CALL DDI_GSUMI(660,NFRGAL,DDI_NP)
          CALL DDI_GSUMI(661,NLOWAL,DDI_NP)
          CALL DDI_GSUMI(662, NUPAL,DDI_NP)
        ELSE
          NFRGAL(1) = NFRG
          NLOWAL(1) = 1
           NUPAL(1) = NFRG
        END IF
      END IF
      RETURN
      END
C*MODULE EFPFMO  *DECK IEAMEM1
      SUBROUTINE IEAMEM1(LAST)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOEFPIEA
C
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LREMPOL
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
C
      IF (IEACAL.EQ.0) RETURN
C
      LIPFMO  = LAST
      LIPEFP  = LIPFMO  +  NFG
      LIOFMO  = LIPEFP  +  NFRG
      LIOEFP  = LIOFMO  +  NFG
      LAST    = LIOEFP  +  NFRG
C
      RETURN
      END
C*MODULE EFPFMO  *DECK IEAMEM2
      SUBROUTINE IEAMEM2(LAST,IOEFP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12)
C
      LOGICAL DOEFPIEA
      DIMENSION IOEFP(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
     *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LREMPOL
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
C
      IF (IEACAL.EQ.0) RETURN
C
      MXEFPT = 0
      NPALL  = 0
      DO I = 1, NFRGIEA
        IPEFPC = IOEFP(I)
        MXEFPT = MAX(MXEFPT, NMPTS(IPEFPC))
        MXEFPT = MAX(MXEFPT, NPPTS(IPEFPC))
        MXEFPT = MAX(MXEFPT, NRPTS(IPEFPC))
        MXEFPT = MAX(MXEFPT,NDPPTS(IPEFPC))
        NPALL = NPALL + NPPTS(IPEFPC)
      END DO
C
      LEFPIEA = LAST
      LEFEFPT = LEFPIEA + MXEFPT*NFRGIEA*MAXNAT*NFGIEA*8
      LREMPOL = LEFEFPT + NPALL*3
      LAST    = LREMPOL + MXEFPT*NFRGIEA*NFGIEA
C
      RETURN
      END
C*MODULE EFPFMO  *DECK CALCIEA
      SUBROUTINE CALCIEA(L1,L2,DD)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOEFPIEA
      LOGICAL DOMONO,DODIPO,DOQUAD,DOOCTU
      LOGICAL GOPARR,DSKWRK,MASWRK,NOTRF
C
      DIMENSION DD(1)
C
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (MXATM=2000,MXFGPT=12000,MXPT=2000)
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /DOMULT/ DOMONO(MXFGPT),DODIPO(MXFGPT),DOQUAD(MXFGPT),
     *                DOOCTU(MXFGPT)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LREMPOL
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
      COMMON /NTNOPT/ ENERGY,ENERG0,DEMAX,SQCDF,ITER,MICRO,NOTRF
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
C
C
C
      IFLAG = 0
      DO II = 1, NFGIEA
        IOF = IXFTCH(X(LIOFMO),II)
        IF (IOF.EQ.ICURFG) IFLAG = IFLAG + 1
      END DO
      IF (IFLAG.EQ.0) RETURN
      IF (IFLAG.GT.1) THEN
        IF (MASWRK) WRITE(IW,*) 'IOFMO IS WRONG. CHECK EFFMOIN'
        CALL ABRT
      END IF
C
      DOEFPIEA = .TRUE.
C
      NPMAX = MAX(NMTTPT,NPTTPT,NRTTPT,NDTTPT)
C
      NEFPTMP = IEFC + IEFD + IEFQ + IEFO + IEFP + IREP
      IF (NEFPTMP.GT.0) THEN
        CALL VALFM(LOADFM)
        LWRKIEA  = LOADFM   + 1
        LDOCNT   = LWRKIEA  + NFRGIEA*MXEFPT*225
        LTMP     = LDOCNT   + NPMAX
        LAST     = LTMP     + L2
        NEED = LAST - LOADFM - 1
        CALL GETFM(NEED)
      END IF
C
CZ
CZ    THE FOLLOWINGS ARE JUST DUMMY ARRAYS HERE.
CZ
      LDUM = LAST
      LDAV = 1
CZ
      IF(IEFC.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NMTTPT,DOMONO,X(LDOCNT),X(LIOEFP),NMPTS)
        DUM = ENUCC(NAT,ZAN,C)
C       IF (MASWRK) WRITE(6,'(A,F12.2)') 'ENUCC',DUM*2625.5
        CALL EFCINT(DD,X(LWRKIEA))
        CALL LOGIEA(0,NFRGIEA,NMTTPT,X(LDOCNT),DOMONO,X(LIOEFP),NMPTS)
      END IF
      IF(IEFD.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NMTTPT,DODIPO,X(LDOCNT),X(LIOEFP),NMPTS)
        DUM = ENUCD(NAT,ZAN,C)
C       IF (MASWRK) WRITE(6,'(A,F12.2)') 'ENUCD',DUM*2625.5
        CALL EFDINT(DD,X(LWRKIEA),X(LDUM),X(LDUM),LDAV,X(LDUM),X(LDUM))
        CALL LOGIEA(0,NFRGIEA,NMTTPT,X(LDOCNT),DODIPO,X(LIOEFP),NMPTS)
      END IF
      IF(IEFQ.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NMTTPT,DOQUAD,X(LDOCNT),X(LIOEFP),NMPTS)
        CALL ENUCQ(DUM,NAT,ZAN,C)
C       IF (MASWRK) WRITE(6,'(A,F12.2)') 'ENUCQ',DUM*2625.5
        CALL EFQINT(DD,X(LWRKIEA),X(LDUM),X(LDUM),LDAV,X(LDUM),X(LDUM))
        CALL LOGIEA(0,NFRGIEA,NMTTPT,X(LDOCNT),DOQUAD,X(LIOEFP),NMPTS)
      END IF
      IF(IEFO.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NMTTPT,DOOCTU,X(LDOCNT),X(LIOEFP),NMPTS)
        DUM = ENUCO(NAT,ZAN,C)
C       IF (MASWRK) WRITE(6,'(A,F12.2)') 'ENUCO',DUM*2625.5
        CALL EFOINT(DD,X(LWRKIEA),X(LDUM),X(LDUM),LDAV,X(LDUM),X(LDUM))
        CALL LOGIEA(0,NFRGIEA,NMTTPT,X(LDOCNT),DOOCTU,X(LIOEFP),NMPTS)
      END IF
C
C
      IF (IEFP.EQ.1) THEN
        CALL VALFM(LOADFM)
        LDIP   = LOADFM + 1
        LODIP  = LDIP   + L2
        LXEFI  = LODIP  + L2
        LYEFI  = LXEFI  + L2
        LZEFI  = LYEFI  + L2
        LEFLD  = LZEFI  + L2
        LEFADD = LEFLD  + 3*NPTTPT
        LABFLD = LEFADD + 3*NPTTPT
        LAST   = LABFLD + 3*NPTTPT
        NEED1  = LAST - LOADFM - 1
        CALL GETFM(NEED1)
C
        CALL LOGIEA(1,NFRGIEA,NPTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NPPTS)
        CALL EFPCMP(X(LODIP),X(LODIP),X(LODIP),DD,X(LDIP),X(LODIP),
     *              X(LXEFI),X(LYEFI),X(LZEFI),X(LEFLD),X(LEFADD),
     *              X(LABFLD),L2,L1,ITER)
C       MCITER HAD BEEN UNDEFINED. ITER WAS USED INSTEAD.
        CALL RETFM(NEED1)
      END IF
C
      IF (IREP.EQ.1) THEN
        CALL LOGIEA(1,NFRGIEA,NRTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NRPTS)
        CALL REPINT(DD,X(LWRKIEA),X(LDOCNT))
      END IF
C
C
      DOEFPIEA = .FALSE.
      IF (NEFPTMP.GT.0) CALL RETFM(NEED)
C
      RETURN
      END
C*MODULE EFPFMO  *DECK LOGIEA
      SUBROUTINE LOGIEA(IMODE,NFRGIEA,NFGPT,DOIN,DOOUT,IOEFP,NPTS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOIN, DOOUT
      DIMENSION DOIN(1), DOOUT(1)
      DIMENSION IOEFP(1),NPTS(1)
C
C
C     IMODE = 0: JUST COPY DOIN INTO DOOUT
C     IMODE = 1: COPY DOIN INTO DOOUT AND THEN CHANGE DOIN
C
      DO II = 1, NFGPT
        DOOUT(II) = DOIN(II)
      END DO
C
      IF (IMODE.EQ.1) THEN
        DO II = 1, NFGPT
          DOIN(II) = .FALSE.
        END DO
        DO II = 1, NFRGIEA
          IST = 0
          IED = 0
          DO JJ = 1, IOEFP(II)
            IST = IED + 1
            IED = IED + NPTS(JJ)
          END DO
          DO JJ = IST, IED
            DOIN(JJ) = .TRUE.
          END DO
        END DO
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK GETCHX
      SUBROUTINE GETCHX(IMUL,IJ,DOMUL,CHXINT,SQWRK)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOMUL
      DIMENSION CHXINT(1), SQWRK(225,*)
      DIMENSION DOMUL(1)
C
      ICNT = 0
      DO I = 1, IMUL
        IF (DOMUL(I)) ICNT = ICNT + 1
      END DO
C
      CALL VADD(SQWRK(1,ICNT),1,CHXINT,1,SQWRK(1,ICNT),1,IJ)
C
      RETURN
      END
C*MODULE EFPFMO  *DECK GETCNT
      SUBROUTINE GETCNT(IAT,JAT,MINI,MAXI,MINJ,MAXJ,LOCI,LOCJ,IANDJ,
     *                  NCNT,ITYP,DOCALC,DD,SQWRK,EFPIEA)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ, DOCALC
      LOGICAL DOEFPIEA
C
      PARAMETER (AU2KJ=2625.5D+00)
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00)
      DIMENSION DD(1), SQWRK(225,*)
      DIMENSION EFPIEA(MXEFPT*NFRGIEA,MAXNAT,NFGIEA,*)
      DIMENSION DOCALC(1)
C
      COMMON /FMCOM / X(1)
      COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
     *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LREMPOL
C
C
      ICNT = 0
      DO II = 1, NFGIEA
        IOF = IXFTCH(X(LIOFMO),II)
        IF (IOF.EQ.ICURFG) ICNT = II
      END DO
      IF (ICNT.EQ.0) THEN
        WRITE(IW,*) 'THERE IS A BUG IN GETCNT'
        CALL ABRT
      END IF
C
      IEFPT = 0
      DO IC = 1, NCNT
        IF (DOCALC(IC)) THEN
          IEFPT = IEFPT + 1
          AA = ZERO
          MAX = MAXJ
          NN = 0
          DO I = MINI,MAXI
             LI = LOCI+I
             IN = (LI*(LI-1))/2
             IF (IANDJ) MAX = I
             DO J = MINJ,MAX
                LJ = LOCJ+J
                JN = LJ+IN
                NN = NN+1
                DUM = DD(JN)
                IF (LI.EQ.LJ) DUM = DUM * PT5
                AA = AA + SQWRK(NN,IEFPT) * DUM
             END DO
          END DO
C
          AA = AA * AU2KJ
          EFPIEA(IEFPT,IAT,ICNT,ITYP)=EFPIEA(IEFPT,IAT,ICNT,ITYP)+AA
          EFPIEA(IEFPT,JAT,ICNT,ITYP)=EFPIEA(IEFPT,JAT,ICNT,ITYP)+AA
C
        END IF
      END DO
C
      RETURN
      END
C*MODULE EFPFMO  *DECK GETPOLCNT
      SUBROUTINE GETPOLCNT(IPOL,NAT,IOFMO,DOPOL,EFPIEA,EFEFPT,REMPOL,
     *                     DA,C,Z,XEFI,YEFI,ZEFI,PEFX,PEFY,PEFZ,
     *                     TMUX,TMUY,TMUZ)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ
      LOGICAL DOPOL, DOEFPIEA
      CHARACTER*8 POLNAM,DPOLNAM
C
      PARAMETER (MXSH=5000,MXGTOT=20000,MXAO=8192,
     *           MXIFRQ=12,MXFGPT=12000)
      PARAMETER (PT5=0.5D+00)
      PARAMETER (AU2KJ=2625.5D+00)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, GLIM=1.0D-03)
C
      DIMENSION DOPOL(1),DA(1)
      DIMENSION XEFI(1),YEFI(1),ZEFI(1),C(3,*),Z(1)
      DIMENSION EFPIEA(MXEFPT*NFRGIEA,MAXNAT,NFGIEA,*)
      DIMENSION IOFMO(1)
      DIMENSION EFEFPT(3,*),REMPOL(MXEFPT*NFRGIEA,*)
C
      COMMON /EFPBUF/ POLCHG(10),NBUFMO,LBUFF(MXAO),LBF,NAPOL,IAPOL(10)
      COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
     *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
C
C
C     THE FACTOR OF 2 IN DENSITY IS CONPENSATED BY THE FACTOR OF 1/2
C     IN THE INDUCED DIPOLE POTENTIAL
C
      IF (.NOT.DOPOL(IPOL)) RETURN
C
      ICUE = 0
      DO I = 1, IPOL
        IF (DOPOL(I)) ICUE = ICUE + 1
      END DO
      ICUF = 0
      DO II = 1, NFGIEA
        IF (IOFMO(II).EQ.ICURFG) ICUF = II
      END DO
      IF (ICUF.EQ.0) THEN
        WRITE(IW,*) 'THERE IS A BUG IN IEA CODE'
        CALL ABRT
      END IF
C
C     DINDX TO DINDDZ ARE THE INDUCED DIPOLES DUE TO THE MULTIPOLES
C
CZ    DINDX = PEFX*EFPOL(1,IPOL)
CZ   *      + PEFY*EFPOL(4,IPOL)
CZ   *      + PEFZ*EFPOL(5,IPOL)
CZ    DINDY = PEFX*EFPOL(7,IPOL)
CZ   *      + PEFY*EFPOL(2,IPOL)
CZ   *      + PEFZ*EFPOL(6,IPOL)
CZ    DINDZ = PEFX*EFPOL(8,IPOL)
CZ   *      + PEFY*EFPOL(9,IPOL)
CZ   *      + PEFZ*EFPOL(3,IPOL)
CZ    DINDDX= PEFX*EFPOL(1,IPOL)
CZ   *      + PEFY*EFPOL(7,IPOL)
CZ   *      + PEFZ*EFPOL(8,IPOL)
CZ    DINDDY= PEFX*EFPOL(4,IPOL)
CZ   *      + PEFY*EFPOL(2,IPOL)
CZ   *      + PEFZ*EFPOL(9,IPOL)
CZ    DINDDZ= PEFX*EFPOL(5,IPOL)
CZ   *      + PEFY*EFPOL(6,IPOL)
CZ   *      + PEFZ*EFPOL(3,IPOL)
C
CZ    DINDTX = DINDX + DINDDX
CZ    DINDTY = DINDY + DINDDY
CZ    DINDTZ = DINDZ + DINDDZ
C
C
C     THIS PART IS A CLONE OF SUBROUTINE EFNUCP
C     TOTAL INDUCED DIPLE * FIELD DUE TO AB INITIO NUCLEI
C
      IF (NBUFMO .EQ. 0) THEN
        DO J = 1,NAT
          RR = ZERO
          DO K = 1,3
            RR = RR + (EFP(K,IPOL) - C(K,J))**2
          END DO
          IF(RR.GE.GLIM) THEN
            FACT=ONE
            RR3 = RR * SQRT(RR)
CZ          PNX(J) = PNX(J) + FACT*Z(J) *(EFP(1,IPOL)-C(1,J))/RR3
CZ          PNY(J) = PNY(J) + FACT*Z(J) *(EFP(2,IPOL)-C(2,J))/RR3
CZ          PNZ(J) = PNZ(J) + FACT*Z(J) *(EFP(3,IPOL)-C(3,J))/RR3
            TMP = FACT*Z(J)/RR3
            TX = TMP*(EFP(1,IPOL)-C(1,J))
            TY = TMP*(EFP(2,IPOL)-C(2,J))
            TZ = TMP*(EFP(3,IPOL)-C(3,J))
C           AA = -PT5*PT5*( (TMUX+DINDTX)*TX
C    *                     +(TMUY+DINDTY)*TY
C    *                     +(TMUZ+DINDTZ)*TZ)
            AA = -PT5*PT5*(TMUX*TX+TMUY*TY+TMUZ*TZ)
            AA = AA *AU2KJ
            EFPIEA(ICUE,J,ICUF,5)=EFPIEA(ICUE,J,ICUF,5)+AA
          END IF
        END DO
      ELSE
C       ---TAKE INTO ACCOUNT POSSIBLE PRESENCE OF BUFFER IN QM/MM ----
C       INTERACTIONS ONLY WITH THE AB INITIO ZONE NUCLEI AND
C       THE 'BORDER' ATOMS WITH A SPECIAL CHARGE ARE CONSIDERED ONLY
CZCZ
        WRITE(IW,*) 'IEA IS NOT IMPLEMENTED WITH EFP-QM/MM-LIKE SCHEME'
        CALL ABRT
CZCZ
        NATAB = NAT - LBF
        DO JJ = 1, NATAB + NAPOL
          IF(JJ.GT.NATAB) THEN
            NUMP=JJ-NATAB
            J=IAPOL(NUMP)
            CHARGE=POLCHG(NUMP)
          ELSE
            J=JJ
            CHARGE=Z(J)
          END IF
          RR = ZERO
          DO K = 1,3
            RR = RR + (EFP(K,IPOL) - C(K,J))**2
          END DO
          IF(RR.GE.GLIM) THEN
            FACT=ONE
            RR3 = RR * SQRT(RR)
CZ          PNX(J) = PNX(J) + FACT*CHARGE *(EFP(1,IPOL)-C(1,J))/RR3
CZ          PNY(J) = PNY(J) + FACT*CHARGE *(EFP(2,IPOL)-C(2,J))/RR3
CZ          PNZ(J) = PNZ(J) + FACT*CHARGE *(EFP(3,IPOL)-C(3,J))/RR3
            TMP = FACT*CHARGE/RR3
            TX = TMP*(EFP(1,IPOL)-C(1,J))
            TY = TMP*(EFP(2,IPOL)-C(2,J))
            TZ = TMP*(EFP(3,IPOL)-C(3,J))
C           AA = -PT5*PT5*( (TMUX+DINDTX)*TX
C    *                     +(TMUY+DINDTY)*TY
C    *                     +(TMUZ+DINDTZ)*TZ)
            AA = -PT5*PT5*(TMUX*TX+TMUY*TY+TMUZ*TZ)
            AA = AA * AU2KJ
            EFPIEA(ICUE,J,ICUF,5)=EFPIEA(ICUE,J,ICUF,5)+AA
          END IF
        END DO
      END IF
C
C
C     TOTAL INDUCED DIPLE * FIELD DUE TO AB INITIO ELECTRON DENSITY
C
      DO II=1,NSHELL
        IAT=KATOM(II)
        MINI=KMIN(II)
        MAXI=KMAX(II)
        LOCI=KLOC(II)-MINI
        DO JJ=1, II
          JAT=KATOM(JJ)
          MINJ=KMIN(JJ)
          MAXJ=KMAX(JJ)
          LOCJ=KLOC(JJ)-MINJ
          IANDJ = II .EQ. JJ
C
          MAX=MAXJ
          DO I=MINI,MAXI
            LI=LOCI+I
            IN= (LI*(LI-1))/2
            IF(IANDJ) MAX=I
            DO J=MINJ,MAX
              LJ=LOCJ+J
              JN=LJ+IN
              DUM = DA(JN) * PT5 * PT5
              IF (LI.EQ.LJ) DUM = DUM * PT5
C             AA = -( (TMUX+DINDTX)*XEFI(JN)
C    *               +(TMUY+DINDTY)*YEFI(JN)
C    *               +(TMUZ+DINDTZ)*ZEFI(JN))*DUM
              AA = -( TMUX*XEFI(JN)
     *               +TMUY*YEFI(JN)
     *               +TMUZ*ZEFI(JN))*DUM
              AA = AA * AU2KJ
              EFPIEA(ICUE,IAT,ICUF,5)=EFPIEA(ICUE,IAT,ICUF,5)+AA
              EFPIEA(ICUE,JAT,ICUF,5)=EFPIEA(ICUE,JAT,ICUF,5)+AA
            END DO
          END DO
C
        END DO
      END DO
C
C     REMINDING TERM: HARD TO DECOMPOSE
C
CZCZ  REMPOL(ICUE,ICUF) = REMPOL(ICUE,ICUF)
      REMPOL(ICUE,ICUF) =
     *                   -PT5*PT5*( (TMUX-EFEFPT(1,ICUE))*PEFX
     *                             +(TMUY-EFEFPT(2,ICUE))*PEFY
     *                             +(TMUZ-EFEFPT(3,ICUE))*PEFZ)*AU2KJ
      RETURN
      END
C*MODULE EFPFMO  *DECK EFEFIEA
      SUBROUTINE EFEFIEA(LEFP,EFEFPT,DOPOL,TOTMUX,TOTMUY,TOTMUZ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOPOL
      DIMENSION EFEFPT(3,*), DOPOL(1)
C
C     IN EFEFCL, POLARIZATION CONTRIBUTIONS ARE CALCULATED
C     OUT: ICNT RETURNS THE MAX NUMBER OF EFEFPT MAT ELEMENTS
C
      IF (DOPOL(LEFP)) THEN
        ICNT = 0
        DO I = 1, LEFP
          IF (DOPOL(I)) ICNT = ICNT + 1
        END DO
        EFEFPT(1,ICNT) = EFEFPT(1,ICNT) + TOTMUX
        EFEFPT(2,ICNT) = EFEFPT(2,ICNT) + TOTMUY
        EFEFPT(3,ICNT) = EFEFPT(3,ICNT) + TOTMUZ
      END IF
C
      RETURN
      END
C*MODULE EFPFMO  *DECK EFPIEAOUT
      SUBROUTINE EFPIEAOUT(NATFRG,IATFRG)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL DOEFPIEA
      PARAMETER (MXFRG=1050,MXDFG=5,MXDPPT=MXFRG*MXDFG*12,MXPT=2000)
      PARAMETER (ZERO=0.00D+00)
      DIMENSION NATFRG(1), IATFRG(1)
C
      COMMON /FMCOM / X(1)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
CZ    COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
CZ   *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /IEAMEM/ LIPFMO,LIPEFP,LIOFMO,LIOEFP,LEFPIEA,LWRKIEA,
     *                LDOCNT,LEFEFPT,LREMPOL
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
      COMMON /POLTMP/ TCLPD(4*MXPT),TZLPD(4*MXPT),
     *                JNLPR(4*MXPT),JKFR(MXPT),JKLR(MXPT),
     *                NDPTS(MXFRG),NDTTPT
C
C     TYPE1: FMO-EFP MONOPOLE CONTRIBUTION
C
      NPMAX = MAX(NMTTPT,NPTTPT,NRTTPT,NDTTPT)
      CALL VALFM(LOADFM)
      LDOCNT =  LOADFM + 1
      LFGINT =  LDOCNT + NPMAX
      LAST   =  LFGINT + NFRGIEA*NFGIEA
      NEED   = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      TOTINT = ZERO
C
      IF (MASWRK) WRITE(IW,9000)
      IF (IEFC.EQ.1) THEN
        IF (MASWRK) WRITE(IW,9005) 'MONOPOLE'
        CALL LOGIEA(1,NFRGIEA,NMTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NMPTS)
        CALL IEACNTOUT(1,NMTTPT,X(LEFPIEA),X(LREMPOL),X(LDOCNT),
     *         X(LIOFMO),X(LIOEFP),X(LFGINT),NMPTS,IATFRG,NATFRG,TOTINT)
      END IF
C
C     TYPE2: FMO-EFP DIPOLE CONTRIBUTION
C
      IF (IEFD.EQ.1) THEN
        WRITE(IW,9005) 'DIPOLE'
        CALL LOGIEA(1,NFRGIEA,NMTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NMPTS)
        CALL IEACNTOUT(2,NMTTPT,X(LEFPIEA),X(LREMPOL),X(LDOCNT),
     *         X(LIOFMO),X(LIOEFP),X(LFGINT),NMPTS,IATFRG,NATFRG,TOTINT)
      END IF
C
C
C     TYPE3: FMO-EFP QUADRUPOLE CONTRIBUTION
C
      IF (IEFQ.EQ.1) THEN
        WRITE(IW,9005) 'QUADRUPOLE'
        CALL LOGIEA(1,NFRGIEA,NMTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NMPTS)
        CALL IEACNTOUT(3,NMTTPT,X(LEFPIEA),X(LREMPOL),X(LDOCNT),
     *         X(LIOFMO),X(LIOEFP),X(LFGINT),NMPTS,IATFRG,NATFRG,TOTINT)
      END IF
C
C
C     TYPE4: FMO-EFP OCTUPOLE CONTRIBUTION
C
      IF (IEFO.EQ.1) THEN
        WRITE(IW,9005) 'OCTUPOLE'
        CALL LOGIEA(1,NFRGIEA,NMTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NMPTS)
        CALL IEACNTOUT(4,NMTTPT,X(LEFPIEA),X(LREMPOL),X(LDOCNT),
     *         X(LIOFMO),X(LIOEFP),X(LFGINT),NMPTS,IATFRG,NATFRG,TOTINT)
      END IF
C
      IF (IEFC+IEFD+IEFQ+IEFO.NE.0) WRITE(IW,9006) TOTINT
C
C
C     TYPE5: FMO-EFP POLARIZATION CONTRIBUTION
C
      IF (IEFP.EQ.1) THEN
        WRITE(IW,9010)
        CALL LOGIEA(1,NFRGIEA,NPTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NPPTS)
        CALL IEACNTOUT(5,NPTTPT,X(LEFPIEA),X(LREMPOL),X(LDOCNT),
     *         X(LIOFMO),X(LIOEFP),X(LFGINT),NPPTS,IATFRG,NATFRG,TOTINT)
      END IF
C
C
C     TYPE6: FMO-EFP REPULSION CONTRIBUTION
C
      IF (IREP.EQ.1) THEN
        WRITE(IW,9015)
        CALL LOGIEA(1,NFRGIEA,NRTTPT,X(LDOCNT),X(LDOCNT),X(LIOEFP),
     *              NRPTS)
        CALL IEACNTOUT(6,NRTTPT,X(LEFPIEA),X(LREMPOL),X(LDOCNT),
     *         X(LIOFMO),X(LIOEFP),X(LFGINT),NRPTS,IATFRG,NATFRG,TOTINT)
      END IF
C
C     TOTAL INTERACTION
C
      IF (MASWRK.AND.IAND(NPRIEA,1).NE.0) THEN
        WRITE(IW,'(/A,F12.2/)') 'TOTAL FMO-EFP INTERACTION:',TOTINT
      END IF
C
      CALL RETFM(NEED)
      RETURN
 9000 FORMAT(/3X,44(1H-)/
     *   3X,'   FMO/EFP INTERACTION ENERGY ANALYSIS   '/
     *   3X,44(1H-))
 9005 FORMAT(/3X,'  ELECTROSTATIC INTERACTION ENERGY CONTRIBUTION: ',A)
 9006 FORMAT(/3X,'  TOTAL ES INTERACTION ENERGY: ',F12.2)
 9010 FORMAT(/3X,'   POLARIZATION INTERACTION ENERGY CONTRIBUTION')
 9015 FORMAT(/3X,'    EXCH-REP/CT INTERACTION ENERGY CONTRIBUTION')
      END
C*MODULE EFPFMO  *DECK IEACNTOUT
      SUBROUTINE IEACNTOUT(ITYP,NEFPT,EFPIEA,REMPOL,DOCNT,IOFMO,IOEFP,
     *                     FGINT,NPTS,IATFRG,NATFRG,TOTINT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL DOCNT
      LOGICAL DOEFPIEA
C
      DIMENSION EFPIEA(MXEFPT*NFRGIEA,MAXNAT,NFGIEA,8)
      DIMENSION DOCNT(1),IOFMO(1),IOEFP(1),IATFRG(1),NATFRG(1)
      DIMENSION NPTS(1)
      DIMENSION FGINT(NFRGIEA,NFGIEA),REMPOL(MXEFPT*NFRGIEA,*)
C
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
     *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
C
      PARAMETER (ZERO=0.00D+00)
C
C
C
      CALL VCLR(FGINT,1,NFGIEA*NFRGIEA)
C
      ICNT = 0
      DO I = 1, NEFPT
        IF (DOCNT(I)) THEN
          ICNT = ICNT + 1
C
          ! WHICH FRG. EFP POINT I BELONGS TO
          IPP = 0
          DO I1 = 1, NFRGIEA
            IST = 0
            IED = 0
            DO I2 = 1, IOEFP(I1)
              IST = IED + 1
              IED = IED + NPTS(I2)
            END DO
            IF (I.GE.IST.AND.I.LE.IED) THEN
              IPP = I1
              IST1 = IST
              IED1 = IED
            END IF
          END DO
C
          IF (IPP.NE.0) THEN
C
            IF (MASWRK.AND.IAND(NPRIEA,2).NE.0) THEN
              WRITE(IW,9000) IOEFP(IPP), IED1-IST1+1, I
            END IF
            DO J = 1, NFGIEA
              IOF  = IOFMO(J)
              IST2 = 0
              IED2 = 0
              DO I2 = 1, IOF
                IST2 = IED2 + 1
                IED2 = IED2 + NATFRG(I2)
              END DO
C
C
              NTFG = NATFRG(IOF)
              IF (IAND(NPRIEA,1).NE.0) THEN
                DUM = ZERO
                DO K = 1, NTFG
                  DUM = DUM + EFPIEA(ICNT,K,J,ITYP)
                END DO
                FGINT(IPP,J) = FGINT(IPP,J) + DUM
                IF (ITYP.EQ.5) THEN
                  FGINT(IPP,J) = FGINT(IPP,J) + REMPOL(ICNT,J)
                END IF
              END IF
C
              IF (MASWRK.AND.IAND(NPRIEA,2).NE.0) THEN
                WRITE(IW,9005) IOF
                WRITE(IW,9006) (IATFRG(K),K=IST2,IED2)
                WRITE(IW,9010) (EFPIEA(ICNT,K,J,ITYP),K=1,NTFG)
              END IF
            END DO
          END IF
C
        END IF
      END DO
C
      IF (MASWRK.AND.IAND(NPRIEA,1).NE.0) THEN
        WRITE(IW,9015)
        IJO  = NFGIEA/8 + 1
        MMAX = 0
        DO LP = 1, IJO
          MMIN = MMAX + 1
          MMAX = MMAX + 8
          IF (LP.EQ.IJO) MMAX = NFGIEA
          WRITE(IW,9020) (IOFMO(J),J=MMIN,MMAX)
          DO I = 1, NFRGIEA
            WRITE(IW,9025) IOEFP(I),(FGINT(I,J),J=MMIN,MMAX)
          END DO
        END DO
C
        TOTCNT = ZERO
        DO J = 1, NFGIEA
          DO I = 1, NFRGIEA
            TOTCNT = TOTCNT + FGINT(I,J)
          END DO
        END DO
        WRITE(IW,9030) TOTCNT
        TOTINT = TOTINT + TOTCNT
      END IF
C
      RETURN
 9000 FORMAT(/3X,I6,'-TH EFP FRAG. WITH',I6,1X,'POINTS',
     *        I8,'-TH EFP POINT')
 9005 FORMAT(/3X,I6,'-TH FMO FRAGMENT')
 9006 FORMAT( 3X,'THE CORRESPONDING ATOMS:',6I10)
 9010 FORMAT( 3X,'  INT. ENERGY IN KJ/MOL:',6F10.2)
 9015 FORMAT(/3X,'FRAGMENT INTERACTIONS (KJ/MOL)')
 9020 FORMAT( 3X,'FMO FRAG.:',8X,8I8)
 9025 FORMAT( 3X,'EFP FRAG.:',I8,8F8.2/)
 9030 FORMAT(/3X,'TOTAL CONTRIBUTION:',F10.2/)
      END
C*MODULE EFPFMO  *DECK CALNUCIEA
      SUBROUTINE CALNUCIEA(ITYP,IMUL,IAT,DOCNT,IOFMO,EFPIEA,TMP1)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL DOEFPIEA,DOCNT
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION EFPIEA(MXEFPT*NFRGIEA,MAXNAT,NFGIEA,8)
      DIMENSION DOCNT(1), IOFMO(1)
C
      PARAMETER (AU2KJ=2625.5D+00)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /FMODIM/ MAXBND,MAXKND,MAXCBS,MAXCAO,MAXVEC,MAXL1,MAXNAT,
     *                MAXABD,MAXBAS,MAXBBD,MAXLMO,MAXSLO,MAXABD2
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT
      COMMON /IEACAL/ IEACAL,DOEFPIEA,NFGIEA,NFRGIEA,MXEFPT,NPRIEA
C
C     ENUCC, ENUCD... ARE NOT PARALLELIZED?
C
      IF (MASWRK) THEN
        ICUF = 0
        DO II = 1, NFGIEA
          IF (IOFMO(II).EQ.ICURFG) ICUF = II
        END DO
C
        IFCN = 0
        DO I = 1, IMUL
          IF (DOCNT(I)) IFCN = IFCN + 1
        END DO
C
        EFPIEA(IFCN,IAT,ICUF,ITYP) = EFPIEA(IFCN,IAT,ICUF,ITYP)
     *                             + TMP1 * AU2KJ
      END IF
C
      RETURN
      END
