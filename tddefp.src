C 11 AUG 10 - NM  - IMPLEMENT NUCLEAR GRADIENT FOR EFP1 WITH TD-DFT,
C                   TDEFP,TDEFP_MULTI,TDEFP_DIPIT: ADD INTER-EFP1 TERMS
C 23 OCT 08 - NM  - TDEFP: CHANGE SIGN AND DOUBLE POLARIZATION TERM
C 21 APR 08 - SHY - GENERATE ELECTRIC FIELD INTEGRALS
C  4 MAR 08 - SHY - FINALIZE INITIAL IMPLEMENTATION OF EFP WITH TD-DFT
C 28 AUG 07 - SHY - NEW MODULE FOR INCLUDING EFP WITH TD-DFT
C
C*MODULE TDDEFP  *DECK TDEFPINIT
      SUBROUTINE TDEFPINIT
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      LOGICAL         GOPARR,MASWRK,DSKWRK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      IF (MASWRK) THEN
         CALL TDEFPPOL
      END IF
C
      RETURN
C
      END
C*MODULE TDDEFP  *DECK TDEFP
      SUBROUTINE TDEFP (PA,F,XEFI,YEFI,ZEFI,L2,L1,NV)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      PARAMETER (MXFRG=1050,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
C
      COMMON /FMCOM / X(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
C
      DIMENSION PA(L1,L1,NV)
      DIMENSION F(L2,NV)
      DIMENSION XEFI(L2), YEFI(L2), ZEFI(L2)
C
      IF(IEFP.NE.1) RETURN

      CALL VALFM(LOADFM)
      LEFLD   = LOADFM  + 1
      LDINDC  = LEFLD   + 3*NPTTPT*NV
      LDINDDC = LDINDC  + 3*NPTTPT
      LDIND_W = LDINDDC + 3*NPTTPT
      LDIND_C = LDIND_W + 6*NPTTPT
      LDIPNEW = LDIND_C + 6*NPTTPT
      LDIPNWD = LDIPNEW + NFRG
      LWORK   = LDIPNWD + NFRG
      LDUMMY  = LWORK   + 6*NPTTPT
      LAST    = LDUMMY  + 3*NPTTPT
      NEED    = LAST - LOADFM - 1
      CALL GETFM(NEED)
      CALL TDEFP_MULTI(PA,F,XEFI,YEFI,ZEFI,L2,L1,NV,
     *                 X(LEFLD),X(LEFLD),X(LDINDC),X(LDINDDC),
     *                 X(LDIND_W),X(LDIND_C),NPTTPT,X(LDIPNEW),
     *                 X(LDIPNWD),X(LWORK),X(LDUMMY))
      CALL RETFM(NEED)
C$$$C
C$$$      NFT25 = 25
C$$$C
C$$$      CALL SEQREW (NFT25)
C$$$C
C$$$      DO IFP = 1, NPTTPT
C$$$         CALL SQREAD(NFT25,XEFI,L2)
C$$$         CALL SQREAD(NFT25,YEFI,L2)
C$$$         CALL SQREAD(NFT25,ZEFI,L2)
C$$$         POLXX = EFPOL(1,IFP)
C$$$         POLYY = EFPOL(2,IFP)
C$$$         POLZZ = EFPOL(3,IFP)
C$$$         POLXY = EFPOL(4,IFP)
C$$$         POLXZ = EFPOL(5,IFP)
C$$$         POLYZ = EFPOL(6,IFP)
C$$$         POLYX = EFPOL(7,IFP)
C$$$         POLZX = EFPOL(8,IFP)
C$$$         POLZY = EFPOL(9,IFP)
C$$$C
C$$$         DO IMO=1,NV
C$$$C---  FOR \INT \PSI_I \PSI_A .. DR
C$$$            ABFLDX = 0.0D+00
C$$$            ABFLDY = 0.0D+00
C$$$            ABFLDZ = 0.0D+00
C$$$            DO I=1,L1
C$$$               DO J=1,I
C$$$                  DIJ = PA(I,J,IMO) + PA(J,I,IMO)
C$$$                  IF (I.EQ.J) THEN
C$$$                     DIJ = HALF*DIJ
C$$$                  END IF
C$$$                  NIJ=IA(I)+J
C$$$                  XI = XEFI(NIJ)
C$$$                  YI = YEFI(NIJ)
C$$$                  ZI = ZEFI(NIJ)
C$$$                  ABFLDX = ABFLDX + XI * DIJ
C$$$                  ABFLDY = ABFLDY + YI * DIJ
C$$$                  ABFLDZ = ABFLDZ + ZI * DIJ
C$$$               END DO
C$$$            END DO
C$$$C
C$$$            PMUX = POLXX*ABFLDX + POLXY*ABFLDY + POLXZ*ABFLDZ
C$$$            PMUY = POLYX*ABFLDX + POLYY*ABFLDY + POLYZ*ABFLDZ
C$$$            PMUZ = POLZX*ABFLDX + POLZY*ABFLDY + POLZZ*ABFLDZ
C$$$C                  IF (I.EQ.J) FACTIJ=FACTIJ+FACTIJ
C$$$            DO K=1, L1
C$$$               DO  L=1,K
C$$$                  NKL=IA(K)+L
C$$$                  XK = XEFI(NKL)
C$$$                  YK = YEFI(NKL)
C$$$                  ZK = ZEFI(NKL)
C$$$C
C$$$                  PMUXK = POLXX*XK + POLXY*YK + POLXZ*ZK
C$$$                  PMUYK = POLYX*XK + POLYY*YK + POLYZ*ZK
C$$$                  PMUZK = POLZX*XK + POLZY*YK + POLZZ*ZK
C$$$C
C$$$                  FKI = XK*PMUX + YK*PMUY + ZK*PMUZ
C$$$                  FIK = ABFLDX*PMUXK + ABFLDY*PMUYK + ABFLDZ*PMUZK
C$$$C
C$$$C       POLARIZATION AND ELECTROSTATICS SHOULD HAVE OPPOSITE
C$$$C       SIGN CONTRIBUTIONS.  DOUBLING IS NEEDED SINCE THIS IS
C$$$C       CLOSED SHELL, SO THE CONTRIBUTION ALPHA=BETA.
C$$$C-ORIG-           VAL = 0.5D+00*(FIK + FKI)
C$$$C
C$$$                  VAL = -(FIK + FKI)
C$$$                  F(NKL,IMO)=F(NKL,IMO) + VAL + VAL
C$$$               END DO
C$$$            END DO
C$$$         END DO
C$$$      END DO
C$$$C
      RETURN
      END
C*MODULE TDDEFP  *DECK TDEFPPOL
      SUBROUTINE TDEFPPOL
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXATM=2000)
C
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
      L1 = NUM
      L2 = (L1*L1+L1)/2
C
      CALL VALFM(LOADFM)
      LPEX = LOADFM + 1
      LPEY = LPEX + L2
      LPEZ = LPEY + L2
      LAST = LPEZ + L2
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      CALL TDEFPPOLINT(X(LPEX),X(LPEY),X(LPEZ),L2)
C
      CALL RETFM(NEED)
C
      END
C
C*MODULE TDDEFP  *DECK TDEFPPOLINT
      SUBROUTINE TDEFPPOLINT(PEX,PEY,PEZ,NUM2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      LOGICAL IANDJ,NORM,DOUBLE,OUT
C
      PARAMETER (MXATM=2000, MXSH=5000, MXGTOT=20000,
     *           MXFRG=1050, MXFGPT=12000, MXIFRQ=12,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
C
      DIMENSION PEX(NUM2),PEY(NUM2),PEZ(NUM2)
C
      DIMENSION XIN(128),YIN(128),ZIN(128),
     1          PLX(100),PLY(100),PLZ(100)
      DIMENSION DIJ(100),FIJ(100)
      DIMENSION IX(20),IY(20),IZ(20),JX(20),JY(20),JZ(20)
      DIMENSION IJX(100),IJY(100),IJZ(100)
C
      COMMON /CSSTV / CX,CY,CZ
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     1                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     2                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     1          3, 0, 0, 2, 2, 1, 0, 1, 0, 1/
      DATA IX / 1, 5, 1, 1, 9, 1, 1, 5, 5, 1,
     1         13, 1, 1, 9, 9, 5, 1, 5, 1, 5/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     1          0, 3, 0, 1, 0, 2, 2, 0, 1, 1/
      DATA IY / 1, 1, 5, 1, 1, 9, 1, 5, 1, 5,
     1          1,13, 1, 5, 1, 9, 9, 1, 5, 5/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     1          0, 0, 3, 0, 1, 0, 1, 2, 2, 1/
      DATA IZ / 1, 1, 1, 5, 1, 1, 9, 1, 5, 5,
     1          1, 1,13, 1, 5, 1, 5, 9, 9, 5/
C
      DATA ZERO,ONE/0.0D+00,1.0D+00/
      DATA PI212 /1.1283791670955D+00/
      DATA SQRT3 /1.73205080756888D+00/
      DATA SQRT5 /2.23606797749979D+00/
      DATA RLN10 /2.30258D+00/
      DATA DBUGME  /8HINT1    /
C
C------- THIS VERSION HAS THE METHOD=1 STUFF OF HONDO CUT OUT.
C
      OUT = NPRINT.EQ.3 .OR. EXETYP.EQ.DBUGME
C
      NEFP = NPTTPT
      TOL=RLN10*ITOL
      NORM=NORMF.NE.1.OR.NORMP.NE.1
C
C        THE ELECTRIC FIELD INTEGRAL IS TO BE A DISTRIBUTED FILE
C
      NFT25 = 25
      CALL SEQREW(NFT25)
C
      DO 9200 IC=1,NEFP
C
      DO 41 I=1,NUM2
      PEX(I) = ZERO
      PEY(I) = ZERO
      PEZ(I) = ZERO
  41  CONTINUE
C     IF(MASWRK) WRITE(6,*)'FOR POLARIZABLE POINT ',IC
      CX=EFP(1,IC)
      CY=EFP(2,IC)
      CZ=EFP(3,IC)
C
C     ----- ISHELL
C
      DO 9000 II=1,NSHELL
      I=KATOM(II)
      XI=C(1,I)
      YI=C(2,I)
      ZI=C(3,I)
      I1=KSTART(II)
      I2=I1+KNG(II)-1
      LIT=KTYPE(II)
      MINI=KMIN(II)
      MAXI=KMAX(II)
      LOCI=KLOC(II)-MINI
C
C     ----- JSHELL
C
      DO 8000 JJ=1,II
C
      J=KATOM(JJ)
      XJ=C(1,J)
      YJ=C(2,J)
      ZJ=C(3,J)
      J1=KSTART(JJ)
      J2=J1+KNG(JJ)-1
      LJT=KTYPE(JJ)
      MINJ=KMIN(JJ)
      MAXJ=KMAX(JJ)
      LOCJ=KLOC(JJ)-MINJ
      NROOTS=(LIT+LJT+1-2)/2 + 1
      RR=(XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
      IANDJ=II.EQ.JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
      IJ=0
      MAX=MAXJ
      DO 50 I=MINI,MAXI
      NX=IX(I)
      NY=IY(I)
      NZ=IZ(I)
      IF(IANDJ) MAX=I
      DO 50 J=MINJ,MAX
      IJ=IJ+1
      IJX(IJ)=NX+JX(J)
      IJY(IJ)=NY+JY(J)
      IJZ(IJ)=NZ+JZ(J)
   50 CONTINUE
      DO 60 I=1,IJ
      PLX(I) = ZERO
      PLY(I) = ZERO
  60  PLZ(I) = ZERO
C
C     ----- I PRIMITIVE
C
      JGMAX=J2
      DO 7000 IG=I1,I2
      AI=EX(IG)
      ARRI=AI*RR
      AXI=AI*XI
      AYI=AI*YI
      AZI=AI*ZI
      CSI=CS(IG)
      CPI=CP(IG)
      CDI=CD(IG)
      CFI=CF(IG)
C
C     ----- J PRIMITIVE
C
      IF(IANDJ) JGMAX=IG
      DO 6000 JG=J1,JGMAX
      AJ=EX(JG)
      AA=AI+AJ
      AA1=ONE/AA
      DUM=AJ*ARRI*AA1
      IF(DUM.GT.TOL) GO TO 6000
      FAC=EXP(-DUM)
      CSJ=CS(JG)
      CPJ=CP(JG)
      CDJ=CD(JG)
      CFJ=CF(JG)
      AX=(AXI+AJ*XJ)*AA1
      AY=(AYI+AJ*YJ)*AA1
      AZ=(AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
      DOUBLE=IANDJ.AND.IG.NE.JG
      MAX=MAXJ
      NN=0
      DO 310 I=MINI,MAXI
      GO TO ( 70, 80,180,180, 90,180,180,100,180,180,
     1       110,180,180,120,180,180,180,180,180,130),I
   70 DUM1=CSI*FAC
      GO TO 180
   80 DUM1=CPI*FAC
      GO TO 180
   90 DUM1=CDI*FAC
      GO TO 180
  100 IF(NORM) DUM1=DUM1*SQRT3
      GO TO 180
  110 DUM1=CFI*FAC
      GO TO 180
  120 IF(NORM) DUM1=DUM1*SQRT5
      GO TO 180
  130 IF(NORM) DUM1=DUM1*SQRT3
  180 IF(IANDJ) MAX=I
      DO 310 J=MINJ,MAX
      GO TO (190,200,300,300,210,300,300,220,300,300,
     1       230,300,300,240,300,300,300,300,300,250),J
  190 DUM2=DUM1*CSJ
      IF(.NOT.DOUBLE) GO TO 300
      IF(I.GT.1) GO TO 195
      DUM2=DUM2+DUM2
      GO TO 300
  195 DUM2=DUM2+CSI*CPJ*FAC
      GO TO 300
  200 DUM2=DUM1*CPJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  210 DUM2=DUM1*CDJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  220 IF(NORM) DUM2=DUM2*SQRT3
      GO TO 300
  230 DUM2=DUM1*CFJ
      IF(DOUBLE) DUM2=DUM2+DUM2
      GO TO 300
  240 IF(NORM) DUM2=DUM2*SQRT5
      GO TO 300
  250 IF(NORM) DUM2=DUM2*SQRT3
  300 NN=NN+1
  310 DIJ(NN)=DUM2
C
      AAX=AA*AX
      AAY=AA*AY
      AAZ=AA*AZ
      DUM=PI212*AA1
      DUM=DUM+DUM
      DO 800 I=1,IJ
  800 FIJ(I)=DIJ(I)*DUM
C
      XX=AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
      IF(NROOTS.LE.3) CALL RT123
      IF(NROOTS.EQ.4) CALL ROOT4
      MM=0
      DO 830 K=1,NROOTS
      UU=AA*U(K)
      WW=W(K)
      WW=WW*UU
      TT=ONE/(AA+UU)
      T=SQRT(TT)
      X0=(AAX+UU*CX)*TT
      Y0=(AAY+UU*CY)*TT
      Z0=(AAZ+UU*CZ)*TT
      IN=-4+MM
      DO 820 I=1,LIT
      IN=IN+4
      NI=I
      DO 820 J=1,LJT
      JN=IN+J
      NJ=J
      CALL STVINT
      XIN(JN)=XINT
      YIN(JN)=YINT
      ZIN(JN)=ZINT*WW
      CALL POLXYZ
      XIN(JN+64)=XINT
      YIN(JN+64)=YINT
      ZIN(JN+64)=ZINT*WW
  820 CONTINUE
  830 MM=MM+16
      DO 850 I=1,IJ
      NX=IJX(I)
      NY=IJY(I)
      NZ=IJZ(I)
      DUMX=ZERO
      DUMY=ZERO
      DUMZ=ZERO
      MM=0
      DO 840 K=1,NROOTS
      DUMX=DUMX+XIN(NX+MM+64)*YIN(NY+MM   )*ZIN(NZ+MM   )
      DUMY=DUMY+XIN(NX+MM   )*YIN(NY+MM+64)*ZIN(NZ+MM   )
      DUMZ=DUMZ+XIN(NX+MM   )*YIN(NY+MM   )*ZIN(NZ+MM+64)
  840 MM=MM+16
      DUM=FIJ(I)
      PLX(I) = PLX(I) + DUM*DUMX
      PLY(I) = PLY(I) + DUM*DUMY
      PLZ(I) = PLZ(I) + DUM*DUMZ
  850 CONTINUE
C
 6000 CONTINUE
 7000 CONTINUE
C
C
      MAX=MAXJ
      NN=0
      DO 7500 I=MINI,MAXI
      LI=LOCI+I
      IN = (LI*(LI-1))/2
      IF(IANDJ) MAX=I
      DO 7500 J=MINJ,MAX
      LJ=LOCJ+J
      JN=LJ+IN
      NN=NN+1
      PEX(JN)=PLX(NN)
      PEY(JN)=PLY(NN)
      PEZ(JN)=PLZ(NN)
 7500 CONTINUE
C     ----- END
 8000 CONTINUE
 9000 CONTINUE
C
C  COLLECT MATRICES ON DISK FOR TWO ELECTRON OPERATOR CONSTRUCTION
C
      CALL SQWRIT(NFT25,PEX,NUM2)
      CALL SQWRIT(NFT25,PEY,NUM2)
      CALL SQWRIT(NFT25,PEZ,NUM2)
C
      IF(OUT) THEN
         WRITE(IW,9500)
      END IF
C
 9200 CONTINUE
C
      RETURN
 9500 FORMAT(/1X,'X, Y, AND Z COMPONENTS OF THE INDUCED DIPOLE',
     *       ' ONE ELECTRON INTEGRALS')
      END
C*MODULE TDDEFP  *DECK TDEFP_MULTI
      SUBROUTINE TDEFP_MULTI(PA,F,XEFI,YEFI,ZEFI,L2,L1,NV,
     *                       EFLD,DINTMP,DINDC,DINDDC,DIND_W,DIND_C,N,
     *                       DIPNEW,DIPNWD,WORK,DUMMY)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*8     POLNAM,DPOLNAM
C
      PARAMETER (HALF=0.5D+00)
      PARAMETER (MXFRG=1050, MXFGPT=12000,MXIFRQ=12,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12, MXAO=8192)
C
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IJPAIR/ IA(MXAO)
C
      DIMENSION PA(L1,L1,NV)
      DIMENSION F(L2,NV)
      DIMENSION XEFI(L2), YEFI(L2), ZEFI(L2)
C N ... NPTTPT
      DIMENSION EFLD(3,N,NV),DINTMP(3,N,NV)
C EFLD AND DINTMP HAVE THE SAME ADDRESS.
      DIMENSION WORK(6,N),
     *          DINDC(*),DINDDC(*),DIND_W(*),DIND_C(*),
     *          DIPNEW(*),DIPNWD(*),DUMMY(*)
C
      NFT25 = 25
      CALL SEQREW (NFT25)
C
      DO IFP=1,NPTTPT
         CALL SQREAD(NFT25,XEFI,L2)
         CALL SQREAD(NFT25,YEFI,L2)
         CALL SQREAD(NFT25,ZEFI,L2)
         DO IMO=1,NV
            ABFLDX = 0.0D+00
            ABFLDY = 0.0D+00
            ABFLDZ = 0.0D+00
            DO I=1,L1
               DO J=1,I
                  DIJ = PA(I,J,IMO) + PA(J,I,IMO)
                  DIJ = DIJ*2.0D+00
                  IF (I.EQ.J) THEN
                     DIJ = HALF*DIJ
                  END IF
                  NIJ=IA(I)+J
                  XI = XEFI(NIJ)
                  YI = YEFI(NIJ)
                  ZI = ZEFI(NIJ)
                  ABFLDX = ABFLDX + XI * DIJ
                  ABFLDY = ABFLDY + YI * DIJ
                  ABFLDZ = ABFLDZ + ZI * DIJ
               END DO
            END DO
C "ELECTRIC FIELD" ... TRACE[EFI*BVEC]
            EFLD(1,IFP,IMO) = ABFLDX
            EFLD(2,IFP,IMO) = ABFLDY
            EFLD(3,IFP,IMO) = ABFLDZ
         END DO ! IMO
      END DO ! IFP
C
C     ----- SAVE DIND AND DINDD -----
C
      DO IFP=1,NPTTPT
         DO IXYZ=1,3
            WORK(IXYZ  ,IFP) =  DIND(IXYZ,IFP)
            WORK(IXYZ+3,IFP) = DINDD(IXYZ,IFP)
         END DO
      END DO
C
C     ----- "INDUCED DIPOLE MOMENT" -----
C
C           D^{-1}*TRACE[EFI*BVEC] AND
C TRANSPOSE D^{-1}*TRACE[EFI*BVEC]
C
C ...ITERATIVE METHOD IS USED.
C
      DO IMO=1,NV
         DO IFP=1,NPTTPT
C
C INITIAL GUESS:
C           D^{-1} ... ALPHA           AND
C TRANSPOSE D^{-1} ... TRANSPOSE ALPHA
C
            POLXX = EFPOL(1,IFP)
            POLYY = EFPOL(2,IFP)
            POLZZ = EFPOL(3,IFP)
            POLXY = EFPOL(4,IFP)
            POLXZ = EFPOL(5,IFP)
            POLYZ = EFPOL(6,IFP)
            POLYX = EFPOL(7,IFP)
            POLZX = EFPOL(8,IFP)
            POLZY = EFPOL(9,IFP)
C
            ABFLDX = EFLD(1,IFP,IMO)
            ABFLDY = EFLD(2,IFP,IMO)
            ABFLDZ = EFLD(3,IFP,IMO)
C
             DIND(1,IFP) =  POLXX*ABFLDX + POLXY*ABFLDY + POLXZ*ABFLDZ
             DIND(2,IFP) =  POLYX*ABFLDX + POLYY*ABFLDY + POLYZ*ABFLDZ
             DIND(3,IFP) =  POLZX*ABFLDX + POLZY*ABFLDY + POLZZ*ABFLDZ
            DINDD(1,IFP) =  POLXX*ABFLDX + POLYX*ABFLDY + POLZX*ABFLDZ
            DINDD(2,IFP) =  POLXY*ABFLDX + POLYY*ABFLDY + POLZY*ABFLDZ
            DINDD(3,IFP) =  POLXZ*ABFLDX + POLYZ*ABFLDY + POLZZ*ABFLDZ
         END DO
C
C GET "INDUCED DIPOLES" BY ITERATIVE METHOD
C
         CALL DIPIT(EFLD(1,1,IMO),DUMMY,DINDC,DINDDC,
     *              DIND_W,DIND_C,NPTTPT,
     *              DIPNEW,DIPNWD,DUMMY,DUMMY,NFRG)
C
C   DIND:           D^{-1}*TRACE[EFI*BVEC]
C  DINDD: TRANSPOSE D^{-1}*TRACE[EFI*BVEC]
C
         DO IFP=1,NPTTPT
            DO IXYZ=1,3
               DINTMP(IXYZ,IFP,IMO) = DIND(IXYZ,IFP) + DINDD(IXYZ,IFP)
            END DO
         END DO
      END DO ! IMO
C
C     ----- RECOVER DIND AND DINDD -----
C
      DO IFP=1,NPTTPT
         DO IXYZ=1,3
             DIND(IXYZ,IFP) = WORK(IXYZ  ,IFP)
            DINDD(IXYZ,IFP) = WORK(IXYZ+3,IFP)
         END DO
      END DO
C
C     ----- FORM DOT PRODUCT -----
C
      CALL SEQREW(NFT25)
C
      DO IFP=1,NPTTPT
         CALL SQREAD(NFT25,XEFI,L2)
         CALL SQREAD(NFT25,YEFI,L2)
         CALL SQREAD(NFT25,ZEFI,L2)
         DO IMO=1,NV
            PMUX = DINTMP(1,IFP,IMO)
            PMUY = DINTMP(2,IFP,IMO)
            PMUZ = DINTMP(3,IFP,IMO)
            DO K=1,L1
               DO L=1,K
                  NKL = IA(K) + L
                  XK = XEFI(NKL)
                  YK = YEFI(NKL)
                  ZK = ZEFI(NKL)
C
                  DUM = PMUX*XK + PMUY*YK + PMUZ*ZK
                  F(NKL,IMO) = F(NKL,IMO) - DUM
               END DO
            END DO
         END DO ! IMO
      END DO ! IFP
C
      RETURN
      END
C*MODULE TDDEFP  *DECK TDEFP_DNUCP
      SUBROUTINE TDEFP_DNUCP(DE,EF3,WORK)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,
     *           MXIFRQ=12, MXDPPT=MXFRG*MXDFG*12)
C
      COMMON /DEIDIP/ PMIND(3,MXFGPT),PMINDD(3,MXFGPT),
     *                XYIND(3,MXFGPT),XYINDD(3,MXFGPT)
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ,MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
C
      DIMENSION DE(3,*),EF3(3,*),WORK(6,*)
C
C     ----- SAVE DIND AND DINDD -----
C
      DO LEFP=1,NPTTPT
         WORK(1,LEFP) =  DIND(1,LEFP)
         WORK(2,LEFP) =  DIND(2,LEFP)
         WORK(3,LEFP) =  DIND(3,LEFP)
         WORK(4,LEFP) = DINDD(1,LEFP)
         WORK(5,LEFP) = DINDD(2,LEFP)
         WORK(6,LEFP) = DINDD(3,LEFP)
      END DO
C
C     CORRECTION TO -DNUCP-
C         -(1/2)*[M +  ( M~)]*DE(NUC)/DX
C     ADD
C     (A) -(1/2)*[DM + (DM~)]*DE(NUC)/DX
C
C****          *********************************************************
C**** TERM (A) *********************************************************
C****          *********************************************************
      CALL DCOPY(3*NPTTPT,PMIND ,1,DIND ,1)
      CALL DCOPY(3*NPTTPT,PMINDD,1,DINDD,1)
C NOW DIND AND DIND ... DM AND DM~
       CALL DNUCP(DE,EF3)
C
C     ----- RECOVER DIND AND DINDD -----
C
      DO LEFP=1,NPTTPT
          DIND(1,LEFP) = WORK(1,LEFP)
          DIND(2,LEFP) = WORK(2,LEFP)
          DIND(3,LEFP) = WORK(3,LEFP)
         DINDD(1,LEFP) = WORK(4,LEFP)
         DINDD(2,LEFP) = WORK(5,LEFP)
         DINDD(3,LEFP) = WORK(6,LEFP)
      END DO
C
      RETURN
      END
C*MODULE TDDEFG  *DECK TDEFP_FRGDER
      SUBROUTINE TDEFP_FRGDER
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL TRIPLET,SG1T,TAMMD
C
      PARAMETER (ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (MXATM=2000)
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,
     *           MXIFRQ=12,MXDPPT=MXFRG*MXDFG*12)
C
      COMMON /DEIDIP/ PMIND(3,MXFGPT),PMINDD(3,MXFGPT),
     *                XYIND(3,MXFGPT),XYINDD(3,MXFGPT)
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /EFPOTD/ METHOF,ISCCHG,MOVE
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FMCOM / X(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /INFOTD/ CNVTOL,TRIPLET,SG1T,JANST,NRADT,NTHET,NPHIT,NLEBT,
     *                NSTAT,NTRIAL,MAXVEC,NTHST,IRECTD,ITDFG,NONEQR,
     *                ITDPRP,TAMMD
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C
      DATA CHECK/8HCHECK   /
C
C     ----- TDDFT-EFP GRADIENT CALCULATION -----
C
      L1 = NUM
      L2 = (NUM*(NUM+1))/2
      L3 = NUM*NUM
C
      NGREAT = MAX(NMTTPT,NPTTPT,4*NRTTPT)
      NTOTPT = NMTTPT + NPTTPT + NRTTPT
      L4 = 300*NGREAT
C
      CALL VALFM(LOADFM)
      LDUM1 = LOADFM+ 1
      LDUM2 = LDUM1 + L2
      LBUF  = LDUM2 + L3
      LCH   = LBUF  + 6*NPTTPT
      LAST  = LCH   + L4
      NEED  = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      IF(EXETYP.EQ.CHECK) GO TO 1000
C
C  IF PARALLEL, SCALE NUCLEAR CONTRIBUTIONS TO FRAGMENT GRADIENT.
C   ...AND TORQUE CORRECTIONS (ATORQ)
C
      IF(GOPARR) CALL DSCAL(3*NTOTPT,ONE/NPROC,DEF,1)
      IF(GOPARR) CALL DSCAL(3*NFRG,ONE/NPROC,ATORQ,1)
C
C     ----- QM-EFP ELECTROSTATIC CONTRIBUTION -----
C
C     NOTE: DAF #16 HOLDS THE FULL TDDFT DENSITY MATRIX (=D+P)
C
C     DNUCC , DNUCD , DNUCQ , DNUCO  ... SKIP
C     EFCDER, EFDDER, EFQDER, EFODER ... SKIP
C     EFCDEF, EFDDEF, EFQDEF, EFODEF ... SKIP
C     EFTORD, EFQTOR, EFTORO         ... SKIP
C
C     ----- QM-EFP REPULSIVE CONTRIBUTION -----
C
C     REPDER AND REPDEF ... SKIP
C
      IF(IEFP.NE.1) GO TO 1000
C
C     ----- POLARIZATION CONTRIBUTION -----
C
C SAVE DIND AND DINDD
C
      IC = LBUF - 6
      DO LEFP=1,NPTTPT
         IC = IC + 6
         X(IC  ) =  DIND(1,LEFP)
         X(IC+1) =  DIND(2,LEFP)
         X(IC+2) =  DIND(3,LEFP)
         X(IC+3) = DINDD(1,LEFP)
         X(IC+4) = DINDD(2,LEFP)
         X(IC+5) = DINDD(3,LEFP)
      END DO
C
C     CORRECTION TO -EFPDER- AND -EFPDEF-
C         -(1/2)*[ M + ( M~)]*TRACE[   D   * D(EFI)/DX]
C     ADD
C     (B) -(1/2)*[ M + ( M~)]*TRACE[   P   * D(EFI)/DX]
C     (C) -(1/2)*[DM + (DM~)]*TRACE[   D   * D(EFI)/DX]
C     (D) -(1/2)*[DN + (DN~)]*TRACE[2*(X+Y)* D(EFI)/DX]
C
C     CORRECTION TO -EFTORP-: TORQUE ON THE INDUCED DIPOLE
C     ... VECTOR PRODUCT OF
C          (1/2)*[ M + ( M~)] AND TRACE[   D   *   EFI    ]
C     ADD
C     (E)  (1/2)*[ M + ( M~)] AND TRACE[   P   *   EFI    ]
C     (F)  (1/2)*[DM + (DM~)] AND TRACE[   D   *   EFI    ]
C     (G)  (1/2)*[DN + (DN~)] AND TRACE[2*(X+Y)*   EFI    ]
C
C     WHERE DM=PMIND, (DM~)=PMINDD, DN=XYIND, AND (DN~)=XYINDD.
C
C****                   ************************************************
C**** TERMS (C) AND (F) ************************************************
C****                   ************************************************
      CALL DAREAD(IDAF,IODA,X(LDUM1),L2,308,0)
C X(LDUM1) ... GROUND STATE DENSITY
      CALL DCOPY(3*NPTTPT,PMIND ,1,DIND ,1)
      CALL DCOPY(3*NPTTPT,PMINDD,1,DINDD,1)
C NOW DIND AND DINDD ARE DM AND DM~
      CALL EFPDER(X(LDUM1))
      IF(MOVE.NE.0) CALL EFPDEF(X(LDUM1),X(LCH),L4)
      CALL EFTORP(X(LDUM1),X(LCH),L4)
C****                   ************************************************
C**** TERMS (D) AND (G) ************************************************
C****                   ************************************************
      CALL DAREAD(IDAF,IODA,X(LDUM2),L3,IRECTD+2,0)
      CALL TDPCMDEN(X(LDUM1),X(LDUM2),L1)
      CALL DSCAL(L2,TWO,X(LDUM1),1)
C X(LDUM1) ... 2*(X+Y)
      CALL DCOPY(3*NPTTPT,XYIND ,1,DIND ,1)
      CALL DCOPY(3*NPTTPT,XYINDD,1,DINDD,1)
C NOW DIND AND DINDD ARE DN AND DN~.
      CALL EFPDER(X(LDUM1))
      IF(MOVE.NE.0) CALL EFPDEF(X(LDUM1),X(LCH),L4)
      CALL EFTORP(X(LDUM1),X(LCH),L4)
C**** RECOVER DIND AND DINDD *******************************************
      IC = LBUF - 6
      DO LEFP=1,NPTTPT
         IC = IC + 6
          DIND(1,LEFP) = X(IC  )
          DIND(2,LEFP) = X(IC+1)
          DIND(3,LEFP) = X(IC+2)
         DINDD(1,LEFP) = X(IC+3)
         DINDD(2,LEFP) = X(IC+4)
         DINDD(3,LEFP) = X(IC+5)
      END DO
C
C        SUM CONTRIBUTIONS FROM ALL NODES FOR PARALLEL RUNS
C
      IF(GOPARR) CALL DDI_GSUMF(1505,DEF,3*NTOTPT)
      IF(GOPARR) CALL DDI_GSUMF(1506,ATORQ,3*NFRG)
C
 1000 CONTINUE
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE TDDEFG  *DECK TDEFP_DININ
      SUBROUTINE TDEFP_DININ(WORK,OUT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      LOGICAL OUT
C
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,
     *           MXIFRQ=12, MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (TWO=2.0D+00)
C
      COMMON /DEIDIP/ PMIND(3,MXFGPT),PMINDD(3,MXFGPT),
     *                XYIND(3,MXFGPT),XYINDD(3,MXFGPT)
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ,MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FMCOM / XX(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
C
      DIMENSION WORK(6,*)
C
C * * * THE FOLLOWING TERMS ARE REQUIRED ONLY WHEN NFRG > 1. * * *
C
C     CORRECTION TO -DININ-: INDUCED DIPOLE-INDUCED DIPOLE
C         -(1/2)*[    M~ ]*(DT/DX)*  M
C     ADD
C     (H) -(1/2)*[    M~ ]*(DT/DX)* DM
C     (I) -(1/2)*[   DM~ ]*(DT/DX)*  M
C     (J) -(1/2)*[2*(DN~)]*(DT/DX)* DN
C
C     WHERE DM=PMIND, (DM~)=PMINDD, DN=XYIND, AND (DN~)=XYINDD.
C
      IF(NFRG.LE.1) RETURN
C
C     ----- SAVE DIND AND DINDD -----
C
      DO LEFP=1,NPTTPT
         WORK(1,LEFP) =  DIND(1,LEFP)
         WORK(2,LEFP) =  DIND(2,LEFP)
         WORK(3,LEFP) =  DIND(3,LEFP)
         WORK(4,LEFP) = DINDD(1,LEFP)
         WORK(5,LEFP) = DINDD(2,LEFP)
         WORK(6,LEFP) = DINDD(3,LEFP)
      END DO
C****          *********************************************************
C**** TERM (H) *********************************************************
C****          *********************************************************
      IFMO = 0
      CALL VALFM(LOADFM)
      LDIP1 = LOADFM + 1
      LDIP2 = LDIP1  + 3
      LDFRG = LDIP2  + 3
      LWORK = LDFRG  + 3
      LAST  = LWORK  + 6*NMTTPT
      NEED  = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      DO LEFP=1,NPTTPT
         DO IXYZ=1,3
             DIND(IXYZ,LEFP) =  DIND(IXYZ,LEFP) + PMIND(IXYZ,LEFP)
         END DO
      END DO
C NOW DIND AND DINDD ... M+DM AND M~
      CALL DININ(XX(LDIP1),XX(LDIP2),XX(LDFRG),IFMO)
      IF(OUT) CALL EFP_GRD_DBG('DININ   ',DESFRG)
C****          *********************************************************
C**** TERM (I) *********************************************************
C****          *********************************************************
      DO LEFP=1,NPTTPT
         DO IXYZ=1,3
             DIND(IXYZ,LEFP) =   WORK(IXYZ,LEFP)
            DINDD(IXYZ,LEFP) = PMINDD(IXYZ,LEFP)
         END DO
      END DO
C NOW DIND AND DINDD ... M AND DM~
      CALL DININ(XX(LDIP1),XX(LDIP2),XX(LDFRG),IFMO)
      IF(OUT) CALL EFP_GRD_DBG('DININ   ',DESFRG)
C****          *********************************************************
C**** TERM (J) *********************************************************
C****          *********************************************************
      DO LEFP=1,NPTTPT
         DO IXYZ=1,3
             DIND(IXYZ,LEFP) =  XYIND(IXYZ,LEFP)
            DINDD(IXYZ,LEFP) = XYINDD(IXYZ,LEFP)*TWO
         END DO
      END DO
C NOW DIND AND DINDD ... DN AND 2*DN~
      CALL DININ(XX(LDIP1),XX(LDIP2),XX(LDFRG),IFMO)
      IF(OUT) CALL EFP_GRD_DBG('DININ   ',DESFRG)
C
C     ----- RECOVER DIND AND DINDD -----
C
      DO LEFP=1,NPTTPT
          DIND(1,LEFP) = WORK(1,LEFP)
          DIND(2,LEFP) = WORK(2,LEFP)
          DIND(3,LEFP) = WORK(3,LEFP)
         DINDD(1,LEFP) = WORK(4,LEFP)
         DINDD(2,LEFP) = WORK(5,LEFP)
         DINDD(3,LEFP) = WORK(6,LEFP)
      END DO
C
      CALL RETFM(NEED)
      RETURN
      END
C*MODULE TDDEFG  *DECK TDEFP_MPIND
      SUBROUTINE TDEFP_MPIND(WORK,OUT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*8 POLNAM,DPOLNAM
C
      LOGICAL OUT
C
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,
     *           MXIFRQ=12, MXDPPT=MXFRG*MXDFG*12)
C
      COMMON /DEIDIP/ PMIND(3,MXFGPT),PMINDD(3,MXFGPT),
     *                XYIND(3,MXFGPT),XYINDD(3,MXFGPT)
      COMMON /EFPGES/ DESFRG(6,MXFRG)
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ,MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FMCOM / XX(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
C
      DIMENSION WORK(6,*)
C
C * * * THE FOLLOWING TERM IS REQUIRED ONLY WHEN NFRG > 1. * * *
C
C     CORRECTION TO -DCHIND- ETC.: INDUCED DIPOLE-MULTIPOLE
C         -(1/2)*[ M + ( M~)]*[D(E_EFP)/DX]
C     ADD
C     (K) -(1/2)*[DM + (DM~)]*[D(E_EFP)/DX]
C
C     WHERE DM=PMIND, (DM~)=PMINDD, DN=XYIND, AND (DN~)=XYINDD.
C
      IF(NFRG.LE.1) RETURN
C
      IFMO = 0
      CALL VALFM(LOADFM)
      LDIP1 = LOADFM + 1
      LDIP2 = LDIP1  + 3
      LDFRG = LDIP2  + 3
      LWORK = LDFRG  + 3
      LAST  = LWORK  + 6*NMTTPT
      NEED  = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
C     ----- SAVE DIND AND DINDD -----
C
      DO LEFP=1,NPTTPT
         WORK(1,LEFP) =  DIND(1,LEFP)
         WORK(2,LEFP) =  DIND(2,LEFP)
         WORK(3,LEFP) =  DIND(3,LEFP)
         WORK(4,LEFP) = DINDD(1,LEFP)
         WORK(5,LEFP) = DINDD(2,LEFP)
         WORK(6,LEFP) = DINDD(3,LEFP)
      END DO
C****          *********************************************************
C**** TERM (K) *********************************************************
C****          *********************************************************
      DO LEFP=1,NPTTPT
         DO IXYZ=1,3
             DIND(IXYZ,LEFP) =  DIND(IXYZ,LEFP) +  PMIND(IXYZ,LEFP)
            DINDD(IXYZ,LEFP) = DINDD(IXYZ,LEFP) + PMINDD(IXYZ,LEFP)
         END DO
      END DO
C NOW DIND AND DINDD ... M+DM AND (M~)+(DM~)
C CHARGE-INDUCED DIPOLE
      IF(IEFC.EQ.1) THEN
         CALL DCHIND(XX(LDIP1),XX(LDIP2),XX(LDFRG),IFMO)
         IF(OUT) CALL EFP_GRD_DBG('DCHIND  ',DESFRG)
      END IF
C PERMANENT DIPOLE-INDUCED DIPOLE
      IF(IEFD.EQ.1) THEN
         CALL DDPIND(XX(LDIP1),XX(LDIP2),XX(LDFRG),IFMO)
         IF(OUT) CALL EFP_GRD_DBG('DDPIND  ',DESFRG)
      END IF
C QUADRUPOLE-INDUCED DIPOLE
      IF(IEFQ.EQ.1) THEN
         CALL DQDIND(XX(LWORK),XX(LDIP1),XX(LDIP2),XX(LDFRG),IFMO)
         IF(OUT) CALL EFP_GRD_DBG('DQDIND  ',DESFRG)
      END IF
C
C     ----- RECOVER DIND AND DINDD -----
C
      DO LEFP=1,NPTTPT
          DIND(1,LEFP) = WORK(1,LEFP)
          DIND(2,LEFP) = WORK(2,LEFP)
          DIND(3,LEFP) = WORK(3,LEFP)
         DINDD(1,LEFP) = WORK(4,LEFP)
         DINDD(2,LEFP) = WORK(5,LEFP)
         DINDD(3,LEFP) = WORK(6,LEFP)
      END DO
C
      CALL RETFM(NEED)
      RETURN
      END
