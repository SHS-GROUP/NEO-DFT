Converting GAMESS to 64 bits is important in order to allow for
the allocation of more than 2 GBytes of RAM for the calculation.
In fact, it is higly desirable to see all 32 bit systems eliminated
from the face of the planet.  So, if you encounter a new system
that supports both 32 and 64 bit models, don't even bother about
porting for 32 bit mode.  Its the past, not the future.

GAMESS has "always" run in 64 bit mode, on Cray and CDC equipment 
back in 1986.  The first workstation class machine to be run in
64 bit mode was the Digital AXP, as that company's 1992 product 
was revolutionary in getting past 32 bit computing.  The late '90s
saw various companies (IBM, Sun, HP, SGI) introducing 64 bit 
chips extending older 32 bit systems, and for these brands, GAMESS
typically exists in both 32 and 64 bit versions.  The new chips
named Itanium and Opteron appear poised in 2004 to finally eliminate
the main 32 bit problem left: Pentium-type processors.  

It should be clear if you are trying to port to a new system that
GAMESS is already correct for 64 bit computing, with only a few
details left to attend to.  These are primarily in the four scripts
related to compiling and linking: compddi, compall, comp, and lked
with code changes almost certainly limited to unport.src and zunix.c.
Here is what you must consider:

1. force the compiler to select 8 bit LOGICAL and INTEGER types,
   with a compiler flag such as -qintsize=8 or -i8 or whatever.

2. ensure that NWDVAR is 1 in unport.src's BEGING.  This may be
   done directly for a new machine type (new *XXX in unport.src),
   if you have to write code in this file for a new system.  It
   can also be done as a 'sed hack' in the 'comp' script if the
   brand has legacy 32 bit machines, e.g. *IBM lines work on both
   32 and 64 bit AIX systems, *SUN on both 32 and 64 bit Sun, etc.

3. modify zunix.c to expect 8-byte arguments coming from the
   FORTRAN of GAMESS, usually this involves adding a new section
   with #define.  zunix.c should be the only other coding needed.

4. the 'comp' script must activate *I64 lines instead of *I32 so 
   that the bit packing code presumes 8-byte integers.

5. the 'compddi' script can be changed to support 64 instead of 32
   bit arguments coming from GAMESS, again compare any 32 to 64
   bit version, and note especially the -DINT_SIZE=int/long option.
   It seems unlikely that you should have to change DDI sources.

6. link against system libraries that can deal with 8-byte
   quantities from GAMESS, e.g. in the malloc call that is inside
   zunix.  The entire memory block for GAMESS must be allocatable
   in a single malloc, of over 2 GBytes, as GAMESS does not know
   how to deal with 1.99 + 1.99 + 1.99... allocations.  This may
   involve a flag like IBM's -q64 or SGI's -64 to request a large
   address space model.

7. BLAS is sometimes a problem.  In case the BLAS library insists
   on having 32 bit quantities passed to it, there is a 'blaswrap'
   workaround.  See 'comp' script for the string 'blaswrap' to
   learn more.
