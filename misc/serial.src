c 18 May 10 - MWS - purely serial DDI code
c
c This does not pretend to work properly, apart from very simple things
c like setting 1 core and 1 node, ignoring broadcasts or global sums,
c and providing a serial DLB counter.  Anything more sophisticated,
c such as distributed or node-replicated memory, or subgroup usage,
c causes a termination of the run.
c
c                     a. basic initializations
c
      subroutine ddi_level(implementation)
      integer implementation
c
c         0 means serial
c         1 means distributed memory, but no subgroups
c         2 means distributed memory, and subgroups (full version)
c
      implementation = 0
      return
      end
c
      subroutine ddi_init
      implicit none
      integer me,master,nproc,ibtyp,iptim
      logical goparr,dskwrk,maswrk
      common /par   / me,master,nproc,ibtyp,iptim,goparr,dskwrk,maswrk
      me     = 0
      master = 0
      nproc  = 1
      goparr = nproc.gt.1
      maswrk = me.eq.master
      dskwrk = .false.
      return
      end
c
      subroutine ddi_pbeg(nwdvar)
      implicit none
      integer nwdvar
      integer me,master,nproc,ibtyp,iptim
      logical goparr,dskwrk,maswrk
      common /par   / me,master,nproc,ibtyp,iptim,goparr,dskwrk,maswrk
      me     = 0
      master = 0
      nproc  = 1
      goparr = nproc.gt.1
      maswrk = me.eq.master
      dskwrk = .false.
      return
      end
c
      subroutine ddi_finalize
      implicit none
      return
      end
c
      subroutine ddi_pend(istat)
      implicit none
      integer istat
      return
      end
c
      subroutine ddi_nproc( ddi_np, ddi_me )
      implicit none
      integer ddi_np, ddi_me
      ddi_np=1
      ddi_me=0
      return
      end
c
      subroutine ddi_nnode( ddi_nn, ddi_my )
      implicit none
      integer ddi_nn,ddi_my
      ddi_nn=1
      ddi_my=0
      return
      end
c
      subroutine ddi_memory( memrep, memddi , exetyp)
      implicit none
      integer memrep, memddi
      double precision exetyp
      return
      end
c
c                     b. all to all messages
c
      subroutine ddi_sync( snctag )
      implicit none
      integer snctag
      return
      end
c
      subroutine ddi_gsumf( msgtag, buff, msglen )
      implicit none
      integer msgtag, msglen
      double precision buff(*)
      return
      end
c
      subroutine ddi_gsumi( msgtag, buff, msglen )
      implicit none
      integer msgtag, msglen, buff(msglen)
      return
      end
c
      subroutine ddi_bcast( msgtag, type, buff, len, from )
      implicit none
      integer msgtag, buff(*), len, from
      character*1 type
      return
      end
c
c                     c. point to point messages
c
      subroutine ddi_send( sndbuf, len, to )
      implicit none
      double precision sndbuf(*)
      integer len, to
      return
      end
c
      subroutine ddi_recv( rcvbuf, len, from )
      implicit none
      double precision rcvbuf(*)
      integer len, from
      return
      end
c
      subroutine ddi_isend( sndbuf, len, to, ireqsnd)
      implicit none
      double precision sndbuf(*)
      integer len, to, ireqsnd
      return
      end
c
      subroutine ddi_irecv( rcvbuf, len, from, ireqrcv )
      implicit none
      double precision rcvbuf(*)
      integer len, from, ireqrcv
      return
      end
c
      subroutine ddi_wait(ireq)
      implicit none
      integer ireq
      return
      end
c
c                     d. dynamic load balancing
c
      subroutine ddi_dlbnext( dlb_counter )
      implicit none
      integer dlb_counter
      integer icount
      common /dlbval/ icount
      dlb_counter = icount
      icount=icount+1
      return
      end
c
      subroutine ddi_dlbreset
      implicit none
      integer icount
      common /dlbval/ icount
      icount=0
      return
      end
c
      subroutine ddi_procdlb_create(hnd)
      implicit none
      integer hnd,ddi_np,ddi_me
      call ddi_nproc(ddi_np,ddi_me)
      call ddi_create(1,ddi_np,hnd)
      return
      end
c
      subroutine ddi_procdlb_destroy(hnd)
      implicit none
      integer hnd
      call ddi_destroy(hnd)
      return
      end
c
      subroutine ddi_procdlb_reset(hnd)
      implicit none
      integer hnd,ddi_np,ddi_me
      double precision buff
      buff = 0.0d+00
      call ddi_nproc(ddi_np,ddi_me)
      call ddi_sync(1)
      call ddi_put(hnd,1,1,ddi_me+1,ddi_me+1,buff)
      call ddi_sync(2)
      return
      end
c
      subroutine ddi_procdlb_next(hnd,proc,value)
      implicit none
      integer hnd,proc,value
      double precision buff
      buff = 1.0d+00
      call ddi_getacc(hnd,1,1,proc+1,proc+1,buff)
      value = int(buff+0.01d+00)
      return
      end
c
c                     e. distributed memory
c
      subroutine ddi_create( idim, jdim, handle )
      implicit none
      integer idim, jdim, handle
      call ddi_arimasen('ddi_create')
      return
      end
c
      subroutine ddi_output(ddi_on_off)
      implicit none
      logical ddi_on_off
      return
      end
c
      subroutine ddi_destroy( handle )
      implicit none
      integer handle
      call ddi_arimasen('ddi_destroy')
      return
      end
c
      subroutine ddi_zero(handle)
      implicit none
      integer handle
      call ddi_arimasen('ddi_zero')
      return
      end
c
      subroutine ddi_distrib( handle, node, iloc, ihic, jloc, jhic )
      implicit none
      integer  handle, node, iloc, ihic, jloc, jhic
      call ddi_arimasen('ddi_distrib')
      return
      end
c
      subroutine ddi_ndistrib(handle,node,iloc,ihic,jloc,jhic)
      implicit none
      integer  handle, node, iloc, ihic, jloc, jhic
      call ddi_distrib(handle,node,iloc,ihic,jloc,jhic)
      return
      end
c
      subroutine ddi_get( handle, ilo, ihi, jlo, jhi, buff )
      implicit none
      integer handle, ilo, ihi, jlo, jhi
      double precision buff(*)
      call ddi_arimasen('ddi_get')
      return
      end
c
      subroutine ddi_put( handle, ilo, ihi, jlo, jhi, buff )
      implicit none
      integer handle, ilo, ihi, jlo, jhi
      double precision buff(*)
      call ddi_arimasen('ddi_put')
      return
      end
c
      subroutine ddi_acc( handle, ilo, ihi, jlo, jhi, buff)
      implicit none
      integer handle, ilo, ihi, jlo, jhi
      double precision buff(*)
      call ddi_arimasen('ddi_acc')
      return
      end
c
      subroutine ddi_getacc( handle, ilo, ihi, jlo, jhi, buff)
      implicit none
      integer handle, ilo, ihi, jlo, jhi
      double precision buff(*)
      call ddi_arimasen('ddi_getacc')
      stop
      end
c
      subroutine ddi_scatter_acc( handle, nbuff, ibuff, buff)
      implicit none
      integer handle, nbuff, ibuff(*)
      double precision buff(*)
      call ddi_arimasen('ddi_scatter_acc')
      stop
      end
c
c                     f. node-replicated memory
c
      subroutine ddi_smp_nproc(nproc,me)
      implicit double precision(a-h,o-z)
      call ddi_arimasen('ddi_smp_nproc')
      return
      end
c
      subroutine ddi_smp_sync()
      implicit double precision(a-h,o-z)
      call ddi_arimasen('ddi_smp_sync')
      return
      end
c
      subroutine ddi_smp_bcast(msgtag, type, buff, len, ifrom)
      implicit double precision(a-h,o-z)
      character*(*) type
      dimension buff(*)
      call ddi_arimasen('ddi_smp_bcast')
      return
      end
c
      subroutine ddi_smp_gsumi(msgtag,buff,len)
      integer msgtag,len
      dimension buff(*)
      call ddi_arimasen('ddi_smp_gsumi')
      return
      end
c
      subroutine ddi_smp_gsumf(msgtag,buff,len)
      integer msgtag,len
      dimension buff(*)
      call ddi_arimasen('ddi_smp_gsumf')
      return
      end
c
      subroutine ddi_masters_bcast(msgtag, type, buff, len, ifrom)
      implicit double precision(a-h,o-z)
      character*(*) type
      dimension buff(*)
      call ddi_arimasen('ddi_masters_bcast')
      return
      end
c
      subroutine ddi_masters_gsumi(msgtag,buff,len)
      integer msgtag,len
      dimension buff(*)
      call ddi_arimasen('ddi_masters_gsumi')
      return
      end
c
      subroutine ddi_masters_gsumf(msgtag,buff,len)
      integer msgtag,len
      dimension buff(*)
      call ddi_arimasen('ddi_masters_gsumf')
      return
      end
c
      subroutine ddi_smp_create(isize,ihandle)
      integer isize,ihandle
      call ddi_arimasen('ddi_smp_create')
      return
      end
c
      subroutine ddi_smp_destroy(ihandle)
      integer ihandle
      call ddi_arimasen('ddi_smp_destroy')
      return
      end
c
      subroutine ddi_smp_offset(ihandle, addr, ioffset)
      integer ihandle, ioffset
      character*(*) addr
      call ddi_arimasen('ddi_smp_offset')
      return
      end
c
      subroutine ddi_addr_test(addr)
      character*(*) addr
      call ddi_arimasen('ddi_addr_test')
      return
      end
c
c                     g. subgroup computing
c
      subroutine ddi_group_create(ngroups,comm_world,comm_group,
     *                            comm_masters)
      implicit none
      integer ngroups, comm_world, comm_group, comm_masters
      call ddi_arimasen('ddi_group_create')
      return
      end
c
      subroutine ddi_group_create_custom(ngroups,mannod,comm_world,
     *                                   comm_group,comm_masters)
      implicit none
      integer ngroups,mannod(ngroups),comm_world,comm_group,comm_masters
      call ddi_arimasen('ddi_group_create_custom')
      return
      end
c
      subroutine ddi_ngroup(ngroup,mygroup)
      implicit double precision(a-h,o-z)
      call ddi_arimasen('ddi_ngroup')
      return
      end
c
      subroutine ddi_scope(iscope)
      implicit double precision(a-h,o-z)
      call ddi_arimasen('ddi_scope')
      return
      end
c
      subroutine ddi_ascope(iscope)
      implicit double precision(a-h,o-z)
      call ddi_arimasen('ddi_scope')
      return
      end
c
      subroutine ddi_gdlbreset
      implicit double precision(a-h,o-z)
      call ddi_arimasen('ddi_gdlbreset')
      return
      end
c
      subroutine ddi_gdlbnext(nxtval)
      implicit double precision(a-h,o-z)
      call ddi_arimasen('ddi_gdlbnext')
      return
      end
c
      subroutine ddi_get_comm(handle,ilo,ihi,jlo,jhi,buff,commid)
      integer handle,commid
      double precision buff(*)
c        if operating w/o groups, just ignore the communicator
      call ddi_get(handle, ilo, iji, jlo, jhi, buff)
      return
      end
c
      subroutine ddi_put_comm(handle,ilo,ihi,jlo,jhi,buff,commid)
      integer handle,commid
      double precision buff(*)
c        if operating w/o groups, just ignore the communicator
      call ddi_put(handle, ilo, iji, jlo, jhi, buff)
      return
      end
c
      subroutine ddi_comm_destroy(comm)
      integer comm
      call ddi_arimasen('ddi_comm_destroy')
      return
      end
c
c                     h. array operations
c
      subroutine ddi_arr_zero(handle,ilo,ihi,jlo,jhi)
      integer handle,ilo,ihi,jlo,jhi
      call ddi_arimasen('ddi_masters_bcast')
      return
      end
c
      subroutine ddi_arr_fill(handle,ilo,ihi,jlo,jhi,value)
      integer handle,ilo,ihi,jlo,jhi
      double precision value
      call ddi_arimasen('ddi_masters_bcast')
      return
      end
c
      subroutine ddi_arr_scale(handle,ilo,ihi,jlo,jhi,value)
      integer handle,ilo,ihi,jlo,jhi
      double precision value
      call ddi_arimasen('ddi_masters_bcast')
      return
      end
c
      subroutine ddi_arr_min(handle,ilo,ihi,jlo,jhi,value,irow,icol)
      integer handle,ilo,ihi,jlo,jhi,irow,icol
      double precision value
      call ddi_arimasen('ddi_masters_bcast')
      return
      end
c
      subroutine ddi_arr_max(handle,ilo,ihi,jlo,jhi,value,irow,icol)
      integer handle,ilo,ihi,jlo,jhi,irow,icol
      double precision value
      call ddi_arimasen('ddi_masters_bcast')
      return
      end
c
      subroutine ddi_arr_dot(handle1,ilo1,ihi1,jlo1,jhi1,
     *                       handle2,ilo2,ihi2,jlo2,jhi2,dots)
      integer handle1,ilo1,ihi1,jlo1,jhi1,
     *        handle2,ilo2,ihi2,jlo2,jhi2
      double precision dots(*)
      call ddi_arimasen('ddi_masters_bcast')
      return
      end
c
      subroutine ddi_arr_add(handle1,ilo1,ihi1,jlo1,jhi1,alpha,
     *                       handle2,ilo2,ihi2,jlo2,jhi2,beta,
     *                       handle3,ilo3,ihi3,jlo3,jhi3)
      integer handle1,ilo1,ihi1,jlo1,jhi1,
     *        handle2,ilo2,ihi2,jlo2,jhi2,
     *        handle3,ilo3,ihi3,jlo3,jhi3
      double precision alpha,beta
      call ddi_arimasen('ddi_masters_bcast')
      return
      end
c
      subroutine ddi_arr_acc(handle1,ilo1,ihi1,jlo1,jhi1,alpha,values)
      integer handle1,ilo1,ihi1,jlo1,jhi1
      double precision alpha,values(*)
      call ddi_arimasen('ddi_masters_bcast')
      return
      end
c
c                     i. miscellaneous calls
c
      subroutine ddi_debug(level)
      integer level
c
c        in fond memory of General Douglas MacArthur...
c
      return
      end
c
      subroutine ddi_timer_output
      return
      end
c
      subroutine ddi_timer_reset
      return
      end
c
      subroutine ddi_arimasen(routine)
      character*(*) routine
c
c        "arimasen" is Japanese for "does not exist"
c
      write(6,900) routine
      stop
  900 format(/1x,'Your program is linked to a serial-only DDI code,'/
     *       1x,'but your run has tried to call DDI routine ',a,','/
     *       1x,'which is inherently parallel, and thus conceptually'/
     *       1x,'illogical.  The run is therefore killed.'/)
      end
