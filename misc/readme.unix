         Step-by-step directions for UNIX compilation.  
         These directions were updated on May 10, 2010.
  Please note that this has absolutely nothing to do with MAKE!

This file is just one information source about installing and
executing GAMESS.  It is meant to be the step 1,2,3, ... file,
so this might be the only thing you need to read, if you have
installed GAMESS in the past.

Additional information is available, as indicated:
  a) a general overview of the process of installing and running
     GAMESS, and a summary of the files provided: PROG.DOC
  b) specific notes about machines: IRON.DOC
     specific notes about compiler versions: comp script
  c) compiling the Distributed Data Interface (DDI) message passing
     layer, doing the necessary system configuration, and definition
     of the arguments to the process kickoff program used to fire
     up GAMESS: ddi/readme.ddi
  d) user oriented information about running GAMESS, especially
     in parallel jobs: PROG.DOC
  
Step by step:

 1) If you are reading this, you must have succeeded in unpacking
    the tar file, by
        chdir ~            # to your home directory
        mv gamess oldgms   # save any previous version
        zcat gamess.tar.Z | tar -xvf -
    Unpacking will give you the following subdirectories:
        source   - GAMESS quantum chemistry source code, in FORTRAN,
                   with a tiny amount of C source code.
        ddi      - Distributed Data Interface (DDI), which allows
                   parallel execution of GAMESS using message
                   passing software (in C)
        object   - empty at first, to contain the .o files
        tests    - sample inputs, for testing and for education
        machines/unix - backup copies of the scripts
        tools    - utility programs, such as model builder (MBLDR).
                   information or help for topics such as:
                     Fragment Molecular Orbital tutorial,
                     Effective Fragment Potential information,
                     Correlation Energy Extrapolation by Intrinsic Scaling
        graphics - some X-windows/Postscript graphics applications
        misc     - odds and ends
    Do not try to change directory names, as the compiling scripts
    expect them to remain exactly as they are.
 
 2) Your main GAMESS directory contains 6 *.DOC files.  These
    describe the input, give references, etc. and so forth.
    The versions of these in the gamess.tar file are flat ASCII
    files, for convenient searching from the command line.

    There are word processed PDF files of the same files on our
    web page, which you can download for printing:
       http://www.msg.chem.iastate.edu/GAMESS/GAMESS.html

    Anyone using the program should print and read the first four
    chapters, while installers and programmers will learn something
    useful from the final two chapters.
  
 3) The top level directory contains six scripts to compile, link,
    and execute the quantum chemistry portion of GAMESS:
        config compall comp lked rungms runall
    and there is one script for compiling the computer science (DDI):
        ddi/compddi
    The execution scripts rungms and runall aren't used until step 8.

    Backup copies can be found in subdirectory 'machines', if needed.
 
4)  The 'config' script is intended to select the machine target, its
    FORTRAN compiler, the math library, and on 64-bit Linux clusters,
    you will be able to select the parallel message passing library.

    Go to the GAMESS directory, probably this means
        chdir ~/gamess
        ./config
    and xecute 'config', answering any questions which it asks you.
    If your machine target requests that you pick a communication
    model, see step 5 just below for some extra information.

    When 'config' is completed, the information it gathered will be
    stored in a file 'install.info'.  If you want to change any of
    this information, after reviewing it, simply run 'config' again.  

    The 'config' step also compiles a "source code activator", creating
        tools/actvte.x
    using the information you provide to 'config'.

    In principal, the information gathered by 'config' is sufficient
    to allow steps 5, 6, and 7 to proceed without complications.

    However, 'config' does not pretend to deal with the complexity
    of executing GAMESS, at step 8.

    The 'config' script will ask you your target machine, giving a very
    short summary of the acceptable answers.  Somewhat longer descriptions
    of the possible targets are given below:

      axp64      - Alpha processor workstation using f77 compiler, but
                   read the 'comp' script if you have the f90 compiler.
                   The box may say Digital or Compaq or HP or even other
                   names.  It may be running the vendor Unix Tru64 or
                   Digital Unix or OSF1, or even Linux.  No matter what,
                   this target requires installation of the Compaq FORTRAN
                   and C compilers.  If you don't have these, look at
                   linux64 below.
      cray-xt    - Cray's massively parallel systems, using 64 bit integers
      hpux32     - HP PA-RISC series workstations, using 32 bit integers
      hpux64     - HP Itanium2 or PA-RISC workstations, using 64 bit integers
      ibm32      - IBM RS/6000 workstation, using 32 bit ints, any model
      ibm64      - IBM RS/6000 workstation, 64 bit ints, Power3 or newer
      ibm64-sp   - IBM SP parallel system, 64 bit ints
      ibm-bg     - IBM Blue Gene, 32 bit integers.
                   L or P models should work: L using ARMCI, P using MPI.
      linux32    - Linux for 32 bit processors. (probably Intel/AMD)
                   This is supposed to be a completely generic version,
                   so the chip can be a SPARC or a Power1 or even an
                   AMD or Intel chip...so long as it has a 32 bit Linux,
                   appropriate compilers, and a math library.  You will
                   be queried about what these are.
      linux64    - Linux for 64 bit processors. (probably Intel/AMD)
                   This includes the SGI Altix or ICE products.
                   This is supposed to be a completely generic version,
                   so the chip can be AXP, SPARC, AMD, Intel, PowerPC...
                   You must have an appropriate 64 bit Linux, FORTRAN
                   and C compilers, and a BLAS math library installed.
                   You will be queried about these choices!
      mac32      - MacOS X, any chip (Apple Xcode Tools and gfortran/g77)
                   The comp script tells how to get Xcode and a compiler,
                   which applies also to the next target.
      mac64      - MacOS X, any chip (Apple Xcode Tools and gfortran)
      sgi32      - Silicon Graphics Inc., using 32 bit ints, MIPS only
      sgi64      - Silicon Graphics Inc., using 64 bit ints, MIPS only
                   These two are very old machines, so few exist any more.
                   An SGI Altix or ICE should choose target=linux64.
      sun32      - Sun ultraSPARC systems, using 32 bit integers.
      sun64      - Sun ultraSPARC or Opteron systems, using 64 bit integers.

Note: Step 5 (compiling computer science) and Steps 6 (compiling
quantum chemistry) may be done at the same time, but both steps 
must be finished before going on to Step 7.
 
 5) The subdirectory gamess/ddi contains a script 'compddi' to compile
    the computer science support for parallel GAMESS, known as the
    Distributed Data Interface (DDI).

    There is one possible customization of 'compddi' that must be done
    by hand-editing 'compddi', prior to running it.  If your system's
    number of cores per node or total number of nodes is large, reset 
    the defaults of MAXCPUS=8 and MAXNODES=128.

    The DDI library will default to using 'sockets' on most machines, but
    will select specialized communication libraries on high-end systems.
    
    For 'linux64' targets, 'config' will prompt you to choose a particular
    communications model: sockets or mpi.  If the network in your computer
    is ordinary Gigabit Ethernet (GE), select 'sockets'.  On the other hand,
    if you have a fast network such as Infiniband, and if your computer
    has an MPI library correctly installed, select 'mpi'.

    The 'config' process will be able to use some, but not all, of the
    many MPI libraries available for Linux correctly.  See ddi/readme.ddi
    about which MPI choices will work, how to execute with them, etc.

    The script named 'compddi' should be executed to build the DDI
    library named libddi.a, and perhaps a kickoff program, ddikick.x.  
    If the latter is created after the successful execution of 'compddi',
    move the kickoff program to the main directory, 
         chdir ~/gamess/ddi
         ./compddi >& compddi.log &
         mv ddikick.x ..
    The library libddi.a should remain in gamess/ddi!
    The kickoff program ddikick.x is not created if MPI is being used.

    On most systems, the Distributed Data Interface relies on TCP/IP 
    socket calls and System V shared memory subroutines, found in all 
    modern Unix systems.  However use of the latter often requires 
    system configuration, and a reboot.  Please see readme.ddi in this 
    file for more details.  (The possible need for system configuration
    is going to be repeated at step 8, to give you twice as many chances
    to notice that SysV configuration may be necessary).
 
 6) Compile all of the GAMESS source code by the command
        chdir ~/gamess
        ./compall >& compall.log &
    This takes a while, so go for coffee, or check the SF Giants web page.

    When the job finishes, inspect 'compall.log' carefully for any
    compile-time errors.  This step will create many object code
    files in your object subdirectory.
 
 7) Link an executable form of GAMESS by the command
        chdir ~/gamess
        ./lked gamess 01 >& lked.log &
    This should produce the executable image 'gamess.01.x'.
    Inspect 'lked.log' for any error messages.
 
    The number is a "version number", each successive link
    should choose 01, 02, 03, ...  This is just a way of
    generating unique file names, the true version of GAMESS
    is a date string, printed in the box at the top of every
    output file.

    The binary you have just created is suitable for parallel
    execution, if you configure 'rungms' correctly.  Of course
    you may run this GAMESS binary on only one CPU, if you wish,
    simply by configuring 'rungms' to fire up only one compute
    process.
 
 8) Edit 'rungms' and 'runall' so the default version number
    is not 00, but rather what you what you used in Step 7.

    You will need a scratch subdirectory under your home directory
    on your file server, for storage of possible ASCII supplementary
    output files,
        mkdir ~$USER/scr
    as well as access to a large, directly attached disk on
    the processor running the job, e.g. /scr/$USER, where the
    large binary files are to be stored.  Please note the
    distinction between small files that may be sent over the
    network (~/scr) and large files that should not be accessed
    over a network (the $SCR variable, which will be some local
    disk, with a name like /scr/$USER)

    The 'rungms' itself contains information about other required
    customizations.

    Extensive directions about the arguments to ddikick.x may be
    found in ~/gamess/ddi/readme.ddi.  A little bit of customization
    for your computer's name, and how many CPUs are included inside
    it may be necessary.  Serial execution is of course possible with
    this parallel linked program, simply by selecting NCPUS=1.  If
    you prefer to run in parallel, make sure the SMP nature of your
    system is accounted for, by following examples shown in 'rungms'.

    Most machine types now use System V shared memory calls to
    allocate the memory for distributed arrays, input value MEMDDI.
    Some system re-configuration by 'root' may be needed to enable
    this, along with a reboot.  See 'readme.ddi' for full details.

 9) Test the program by running all of the short tests.

    The script 'runall' needs a few simple edits to run the tests.
        chdir ~/gamess
        ./runall >& runall.log &
    The correct answers for the jobs are in comments in
    the input decks, and are echoed on the outputs.

    A script to check all test results automatically can be found
    in the file ~/gamess/tools/checktst/checktst.  Just customize
    the pathname at the top of this file, and execute it.

    Checking can also be done manually, for example, type
        grep -i 'terminated' exam*.log
        grep -i 'final' exam02.log
        grep -i 'rms' exam04.log
    and so on, to verify the program produced correct results.
 
    The paragraph in IRON.DOC should have given you some idea of 
    how carefully and/or recently we have tested each machine type.
    Be extra careful with checking the test jobs on the more flaky
    sounding systems.

    Note that we use the code daily on IBM RS/6000, Sun UltraSPARC,
    Compaq AXP, SGI Altix, HP Itanium2 workstations, and various
    64 bit processors running Redhat.  Therefore, it is prudent
    to regard everything else as requiring cautious verification.
 
10) Tell each user how to access the 'rungms' script, and let 
    them have at it!  You should have everyone share this same
    script, so that if changes to it are needed in future, they
    are needed only to one file.

    For example, defining an alias in their .login files such as
       alias gms '/u1/mike/gamess/rungms'
    together with creating a scratch directory below their home
       mkdir ~/scr
    will allow them to execute their input file xxx.inp using
    this universal script, by
       gms xxx >& xxx.log &
    When only one argument is given, the version number will be
    what you customized in 'rungms' and the number of processors
    will default itself to 1.

    If you have a batch manager on your computer, look at the
    script ~/gamess/misc/gms, as an example of how to run a job
    using the Sun Grid Engine or Portable Batch System schedulars.
    The MPI part of 'rungms' works with either schedular.
    It is possible to modify the front end 'gms' and the back
    end 'rungms' to suit your local preferences:
       your favorite batch manager
       your choice between sockets and MPI
       your rules about queue time limits, number of cores, RAM, ...

    If you have built GAMESS for a single user on a desktop platform,
    there is a simple batch manager for Apple OS X, Linux, or Windows:
         http://www.msg.chem.iastate.edu/GAMESS/GamessQ
 
11) This completes the installation of GAMESS itself.
 
    The script gamess/tools/gmshelp gives the Unix user online
    access to the INPUT.DOC chapter's description of each 
    input group.  This file needs to be customized to point 
    to the correct path.

    Add-on programs ("plug-ins") such as Tinker for surface
    chemistry, or two valence bond programs, are available.
    See INTRO.DOC for more details.
  
12) Graphics utilities

    The program MacMolPlt found at
        http://www.msg.chem.iastate.edu/GAMESS/GAMESS.html
    is very helpful in diplaying the results in output files
    in graphical format.  MacMolPlt also has an interactive
    version of the MBLDR/MOLPLT structure building process.

    The official name of this program is now wxMacMolPlt, to
    show that it runs on Windows and Linux, as well as Apple.
    Everyone can now take advantage of this visualization tool.

    The program Avogadro found at
       http://avogadro.openmolecules.net/wiki/Main_Page
    contains a useful molecular builder tool, and the ability
    to generate template input files for GAMESS.

