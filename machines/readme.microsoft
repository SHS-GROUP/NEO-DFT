Installing GAMESS on Microsoft Windows systems with PGI or Intel Compilers
   Sep 29, 2011 - Sarom Sok Leang - Iowa State University (Intel/64-bit support)
   May 11, 2010 - Sarom Sok - Iowa State University (PGI/32 & 64-bit support)

Software requirements
=====================

1) Windows operating system:
   Windows 32-bit (Windows XP, Vista, 7, Compute Cluster, Server 2003/2008 HPC Edition)
   Windows 64-bit (Windows XP, Vista, 7, Compute Cluster, Server 2003/2008 HPC Edition)

2a)The Portland Group PGI Workstation 10.4 - http://www.pgroup.com/
   You will want to install the Cygwin package that is included with the PGI Workstation package. 

   PGI offers a 15 day trial license for PGI Workstation.

2b)The Intel Composer XE 2011 for Windows - http://software.intel.com/en-us/articles/intel-composer-xe/

3) Microsoft MS-MPI.  You can get the stand-alone package here:
   http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=a9cb0038-26f2-45a5-9ca7-4e5c89727a1d

   If for some reason the link does not work then you may want to just want to perform a search
   for "HPC Pack 2008 SP1 MS-MPI Stand-alone Package".

   If you are on a 32-bit system, install the 32-bit version of MS-MPI.
   If you are on a 64-bit system, install the 64-bit version of MS-MPI.

   ** PLEASE RESTART YOUR COMPUTER AFTER INSTALLING MS-MPI **

   This will allow Windows to update the PATH variable.

Contents of the "gamess/machines/microsoft" folder:
===================================================

parameters.gms
 - This file is  used by rungms.bat 

parameters.hpc.gms
 - This file is used by rungms.hpc.beta.bat and rungms.hpc.release.bat

runall.bat
 - A batch file that will run all the exam files in gamess/tests
 - This file is only executable under Windows's command prompt, cmd.exe

runall.parallel
 - The Windows version of the runall shell script.
 - This file is only executable under Cygwin
 - This shell script will run all the exam files in parallel mode (4 compute processes).

runall.serial
 - The Windows version of the runall shell script.
 - This file is only executable under Cygwin
 - This shell script will run all the exam files in serial mode (1 compute process).

rungms.windows
 - The Windows version of the rungms shell script. 
 - This file is only executable under Cygwin

rungms.bat
 - A batch file equivalent to the rungms shell script specifically written for non-HPC server Windows machines.
 - This file is only executable under Windows's command prompt, cmd.exe
rungms.hpc.beta.bat
 - A batch file equivalent to the rungms shell script specifically written for Windows HPC Server 2008 Release Beta.
 - This file is only executable under Windows's command prompt, cmd.exe
rungms.hpc.release.bat
 - A batch file equivalent to the rungms shell script specifically written for Windows HPC Server 2008.
 - This file is only executable under Windows's command prompt, cmd.exe

scr
 - The RESTART folder used to store GAMESS restart files (.dat, .rst, .trj, .efp, etc)
 - This folder is empty.

tmp
 - The SCRATCH folder used to store scratch files during a GAMESS run
 - This folder is empty.

Contents of the "gamess/machines/microsoft/windows" folder:

gamess.append.diskusage.bat
 - A batch file used by Windows HPC runs.
gamess.clean.bat
 - A batch file used by Windows HPC runs.
gamess.diskusage.bat
 - A batch file used by Windows HPC runs.
gamess.finish.bat
 - A batch file used by Windows HPC runs.
gamess.finish.gddi.bat
 - A batch file used by Windows HPC runs.
gamess.gddi.output.bat
 - A batch file used by Windows HPC runs.
gamess.start.bat
 - A batch file used by Windows HPC runs.
gamess.start.gddi.bat
 - A batch file used by Windows HPC runs.
gmsenv.bat
 - A batch file used by non-HPC runs.
gmsenv.hpc.bat
 - A batch file used by Windows HPC runs.

Compiling and Linking GAMESS (PGI Compilers)
============================

This is very much like Unix, using the same scripts.
Hence, the file "gamess/machines/readme.unix" may be helpful.

a) Use the "gamess/config" script to configure GAMESS and DDI for Windows.

b) Go inside "gamess/ddi" and run "./compddi" to compile DDI.  This will 
produce a file "libddi.a"

c) Go inside "gamess" and run "./compall" to compile the GAMESS object files.

d) Then run "./lked" to link the GAMESS object files to the DDI library,
which will produce gamess.00.x

** If you plan to run with the batch script then you will need to rename gamess.00.x to gamess.00.exe

At this stage you have successfully built the GAMESS binary.

Compiling and Linking GAMESS (INTEL Compiler)
============================
The following instructions are provided by Tushar Mohan from Samara Technology Group LLC

Only 64-bit support, currently.

        Contents:
        ========

        A. Install Dependent Tools
        B. Prepare Cygwin Environment for Build
        C. Building GAMESS with Intel on Windows

        -----------------------------------

        A. Install Dependent Tools:
           =======================
        It's recommended you install programs in their default locations.

        1. Install Windows Visual Studio Professional 2010 (works with 2008)
           Choose "Custom" install to make sure that 
           X64 Compilers and Tools is selected (under the C++ component).
           You will need at least the C++ component. We have tested
           with the default option, where all the components were
           installed. It's expected that only installing the C++
           component (and it's sub-components) should be adequate.

        2. Install Intel Parallel Studio
           Choose the "Full Installation" option, with the default paths.
           (Location: Default
            C:\Program Files (x86)\Intel)

        3. Install MS-MPI 64-bit (if not already installed as part of HPC Pack)
           (Location: Default
            C:\Program Files\Microsoft HPC Pack 2008 R2\)
           Reboot after install.

        4. Install Cygwin (installed in C:\Cygwin)
           - In Devel make sure no compiler toolchains
             and binutils are selected, except mingw-x86_64-binutils
           - Install Devel >> mingw64-x86_64-binutils (needed for ar.exe)
           - Install Utils >> patch (for patching the sources)
           - Install Utils >> ncurses (for tput needed by config script)
           - Install Shells >> tcsh (for running gamess shell scripts)
           - Install your favorite editor (e.g., Editors >> vim)

        B. Preparing Cygwin Environment for Build (tested with 1.7)
           ========================================================

        1. Fixing stack limit sizes in bash.exe and tcsh.exe

           The Intel build requires bash.exe and tcsh.exe to permit
           large stack sizes. You can either replace the default
           cygwin bash and tcsh with the modified bash/tcsh included
           in this drop, or edit the cygwin bash and tcsh by
           following the steps below.

          a) create backups of original binaries
             In cygwin shell:
             $ cp /bin/bash.exe bash.exe.org
             $ cp /bin/tcsh.exe tcsh.exe.org

          b) Log in as Administrator and run:
             All Programs >> Intel Parallel Studio XE 2011 >>
              Command Prompt >> Intel Parallel Studio XE with Intel Compiler XE

             ----------
             editbin /stack:81920000 C:\cygwin\bin\bash.exe
             editbin /stack:81920000 C:\cygwin\bin\tcsh.exe
             ---------
           
          c) Now log back into the cygwin shell. On running 'ulimit -a'
             the stack size reported should be 79986. If you see 2034
             then you have not properly fixed the stack size
             
             tushar@gulftown ~
             $ ulimit -a|grep stack
             stack size              (kbytes, -s) 79986

        2. Make sure 64-bit ar.exe is in the PATH
           (Note: You must have installed the cygwin package
                  Devel >> mingw64-x86_64-binutils)
           
           a) Log into the Cygwin shell
              Add the following line to the bottom your .bash_profile

              export PATH="/usr/x86_64-w64-mingw32/bin:$PATH"

           b) Re-login into the cygwin shell and see you are picking the right ar
         
              $ which ar
              /usr/x86_64-w64-mingw32/bin/ar

        C. Building GAMESS with Intel on Windows:
           =====================================
        In all that follows it's assumed the GAMESS sources are lying in C:\gamess

        1. Open an Intel command prompt from:
             All Programs >> Intel Parallel Studio XE 2011 >>
              Command Prompt >> Intel Parallel Studio XE with Intel Compiler XE
        2. Run the cygwin shell *within* this command-prompt:
           C:\Program Files (x86)\Intel\ComposerXE-2011> C:\cygwin\Cygwin.bat

        3. Navigate to the gamess sources (in this example C:\gamess)
        4. Make sure the patches are applied.

        5. Now build:
        $ cd "C:\gamess"
        $ ./config 
          - Choose win64 (for platform/machine)
          - Hit Enter to accpet GAMESS directory (/cygdrive/c/gamess)
          - Choose ifort (for compiler)
          - Enter 12 (for ifort version number)
          - Choose optimization settings
            For performance runs, it's recommended you build for 'fast' and verify
            the output for accuracy.
          - Choose mkl (for math library)
          - Hit Enter to accept default MKL path. ifort anyway is aware of the
            location of MKL, so the path supplied is ignored.
          - Enter 10 (for MKL version)
          - Choose 'msmpi' for the MPI library
          An install.info will be created.

        Please ignore warnings issued in the following compilation and link phases.
          
        $ cd ddi; ./compddi

        $ cd "C:\gamess"

        $ ./compall

        $ ./lked 

        You should now have an executable like gamess.00.x

        *********************
        ***IMPORTANT NOTES***
        *********************
         1. This build defaults to MAXNODES=384 and MAXCPUS=8.
            That means the executable can be used for a maximum
            run size of 384 process pairs (384 compute + 384 mem),
            with a maximum of 8 process pairs per node.
            For using with higher process counts, edit
            ddi/compddi (line 84 and 85) and set MAXNODES and
            MAXCPUS appropriately.

         2. The default build does not include symbolic information.
            The symbol information is necessary for debugging and
            performance analysis.
            To include symbols:
              a) edit ddi/compddi (line 972) and add -g as shown below:
                  set CFLAGS = "$CFLAGS $GMS_WIN_TP -g -I./include"
              b) edit comp (line 2050) and add -Zi as shown below:
                  set EXTRAOPT = '-QxHost -Zi'
              c) edit lked (line 783) and -debug as shown below:
                  set LDOPTS='-i8 -debug'

          Describes at a high-level the changes made to the gamess sources/
          build scripts as part of the Samara Intel port of gamess, and the 
          motivations and reasons for doing so.
          ==================================================================

        * Added clauses for the intel compilers (ifort and icl)
          to the build scripts (config, comp, compall, compddi and lked). 
          These clauses included linkage with the Intel's MKL and 
          Microsoft's MPI. These changes were to the win64 sections 
          of the build.

        * Renamed certain DDI operation names to avoid namespace
          conflict resulting from the ifort compilers name mangling.
          These operator names have been suffixed with "_OP" to 
          distinguish them from method names. These operation names
          are distributed across the DDI sources. The change was 
          necessitated purely to allow the compile/link to happen
          with the Intel compilers.

        * A typecast in ddi_comm_bcast.c to allow compilation to
          happen while using the MPI library's collectives. This
          change is expected to be needed for all compiles that
          do not set USE_DDI_COLLECTIVE_ROUTINES

        * Added code to use appropriate timers on 64-bit Windows,
          when building with the Intel compilers.

        * Mapping macros were added for missing f77 symbols in
          ddi_fortran.h. These macros are necessary for the 
          Fortran-C linkage.

Execution of GAMESS
===================

This is in fact rather different from Unix!

However, in order to run GAMESS you will need to copy all the contents 
of "gamess/machines/microsoft" into "gamess"

** You will need to modify "rungms.windows"

** You will need to modify "parameters.gms" before you can use "rungms.bat" - 
change "parameters.gms" to the appropriate values.

You can run GAMESS by executing "./rungms.windows" under PGI-CYGWIN or by 
executing "rungms.bat" under the Windows Command Prompt (cmd.exe)

Examples:

The following example will run exam01 with 4 compute processes using 
gamess.00.x with rungms.windows

./rungms.windows exam01 00 4 0

The following example will run exam01 with 4 compute processes using 
gamess.00.exe with rungms.bat

rungms.bat exam01 00 4 0

Known Issues
============

May 11, 2010 - 2 GB physical file size limitations on both Windows 32-bit and Windows-64 bit.
             - We are currently looking into this.
             - Workarounds - push everything into memory.
             - Use: $SCF   DIRSCF=.T. $END
             - Use: $TRANS DIRTRF=.T. $END

