C 12 DEC 10 - HL  - ADD CALLS TO INDCHG,INDDPL,INDQUA,INDIND
C  1 OCT 10 - CS  - EFMO FUNCTIONS AND UTILITIES
C
C*MODULE EFMO     *DECK EFMOGFRG
      SUBROUTINE EFMOGFRG
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER(MXATM=2000,MXAO=8192,MXIFRQ=12,NMO=500)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
      LOGICAL MOIDON,EDCOMP,DIPDCM,QADDCM,DEPRNT,ZDO,POLDCM,POLANG,
     *        POLNUM,POLAPP,KMIDPT,POLDYN
      LOGICAL OPOLNUM, OPOLDYN, OPOLDCM
      INTEGER OILOCAL
      LOGICAL POLAR,DISPER,EXREP,CHGTRN
      INTEGER EFMODIM
C
      COMMON /EFMO  / EFMOETOT,EFMOESERG,EFMOPOLERG,IEFMORUN,
     *                IEFMORT,IEFMOCFRG,IEFMONFRG,EFMODIM(2)
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /EDCMP / ZIJ(NMO),ZMO(5,NMO),OCCUP(NMO),DPFREQ(50),
     *                MOIDNO(5,NMO),IJMO(2,NMO),MOIJ(NMO),NMOIJ(NMO),
     *                NMOAT(NMO),NDPFREQ,IPROT(5),NPROT,
     *                MOIDON,EDCOMP,DIPDCM,DEPRNT,QADDCM,ZDO,POLDCM,
     *                POLANG,POLAPP,KMIDPT,POLDYN
      COMMON /FMCOM / X(1)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /OPTLOC/ CVGLOC,MAXLOC,IPRTLO,ISYMLO,IFCORE,NOUTA,NOUTB,
     *                MOOUTA(MXAO),MOOUTB(MXAO)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /POLNMP/ POLNUM
      COMMON /PRPOPT/ ETOLLZ,ILOCAL,IAHARD
C
C     --- GENERATES EFP-STATS FOR THE CURRENT FMO FRAGMENT ---
C
      IF( MASWRK ) WRITE(IW,9000) IEFMOCFRG
      POLAR =.TRUE.
      DISPER=.FALSE.
      EXREP =.FALSE.
      CHGTRN=.FALSE.
C
C     THE FORMAT IS OVARNAME FOR OLD VALUES
      OILOCAL = ILOCAL
      OPOLDYN = POLDYN
      OPOLDCM = POLDCM
      OPOLNUM = POLNUM
C
C     GENERATE ELECTROSTATICS
      CALL STONE(1,'FRAGNAME',0)
C
C     INITIALIZE LOCALOZED MOLECULAR ORBITAL CALCULATIONS
      IEFMORT=0
      ILOCAL = 1
      CALL LMOINP
      CALL LMOX
      ILOCAL = 0
      IEFMORT=1
C
C     ALLOCATE MEMORY FOR PAULIX ROUTINE
      LNA = NA - NOUTA
      LNA2 = (LNA*LNA+LNA)/2
      L1 = NUM
      L2 = (L1*L1+L1)/2
      L3 = L1*L1
C
      CALL VALFM(LOADFM)
      LVEC    = 1       + LOADFM
      LARRAY  = LVEC    + L1*NA
      LFMO    = LARRAY  + L2
      LCCHG   = LFMO    + LNA2
      LWRK2   = LCCHG   + 3*NA
      LDLPOL  = LWRK2   + L1
      LIDMYP  = LDLPOL  + 9*LNA
      LNNOPRT = LIDMYP  + L1
      LPOL    = LNNOPRT + L1
      LCANVEC = LPOL    + 9*LNA*MXIFRQ
      LCANFOK = LCANVEC + L3
      LAST    = LCANFOK + L2
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
C     STORE RESULTS IN COMMON
      CALL EFP2X(X(LVEC),X(LARRAY),X(LFMO),X(LCCHG),X(LWRK2),
     *            X(LDLPOL),X(LIDMYP),X(LNNOPRT),X(LPOL),X(LCANVEC),
     *            X(LCANFOK),LNA,LNA2,L1,L2,
     *            POLAR,DISPER,EXREP,CHGTRN,1)
      CALL RETFM(NEED)
C
      ILOCAL = OILOCAL
      POLDYN = OPOLDYN
      POLDCM = OPOLDCM
      POLNUM = OPOLNUM
C
      IEFPFMO = 0
C
 9000 FORMAT (/5X,50(1H-)/
     *         5X,'GENERATING EFMO PARAMETERS FOR FMO MONOMER #',I5/
     *         5X,50(1H-))
      RETURN
      END
C
C
C*MODULE EFMO     *DECK EFMOTOT
      SUBROUTINE EFMOTOT(FMODE)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER(MXFGPT=12000,MXFRG=1050,MXDFG=5,
     *          MXDPPT=MXFRG*MXDFG*12,MXIFRQ=12,MXPT=2000)
      PARAMETER (MXEFMOPTS=50,MXEFMOPPTS=60,MXNEFMOPTS=17,
     *           MXNEFMOPPTS=15)
C
      CHARACTER*8 POLNAM,DPOLNAM,FRGNME
      INTEGER DDI_WORLD,DDI_GROUP
      LOGICAL GOPARR,DSKWRK,MASWRK,ISGDDI,PAROUT,INITGDDI
      PARAMETER(DDI_WORLD=0,DDI_GROUP=1)
      INTEGER OILOCAL,OICOORD
      INTEGER EFMODIM
C
      COMMON /EFMO  / EFMOETOT,EFMOESERG,EFMOPOLERG,IEFMORUN,
     *                IEFMORT,IEFMOCFRG,IEFMONFRG,EFMODIM(2)
      COMMON /EFMOPO/ LNEFMOPTS,LEFMOPTS,LEFMOPPTS,LEFMODIMG,LEFMOTOTG
      COMMON /EFMULT/ EFC(3,MXFGPT),EFCHG(2,MXFGPT),EFATRM(MXFGPT),
     *                EFBTRM(MXFGPT),EFATRM2(MXFGPT),EFBTRM2(MXFGPT),
     *                EFDIP(3,MXFGPT),EFQAD(6,MXFGPT),
     *                EFOCT(10,MXFGPT),FRGNME(MXFGPT)
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /EFPSCR/ POLAB(MXFRG),B,SCROFF,IELECS,IDISPS,NEW_POL
      COMMON /FMCOM / X(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FMOPNT/ LICHFG,LMULFG,LIDMREC,LFRGNAM,LLAYFRG,LINDAT,
     *                LNCBS,LFMOZAN,LFMOC,LFMOMAS,LIZBAS,LIAGLOB,LIBDGH,
     *                LIABDFG,LJABDFG,LNCAO,LIDXCAO,LIAPRJO,LJAPRJO,
     *                LCOREAO,LOCCCOR,LSHIFTB,LIODFMO,LFMODA,LFMODB,
     *                LFMOESPA,LFMOESPB,LLOCFMO,LSCFFRG,LFMOSCF,LRIJ,
     *                LPOPMUL,LPOPMAT,LIALOC,LINDBD,LIATFRG,LINDFRG,
     *                LINDGFRG,LNATFRG,LNAT0FRG,LIANFRG,LZANFRG,LCFRG,
     *                LLIBISH,LLIBNSH,LLIBNG,LINDATG,LFMOBUF(3),LFMODE,
     *                LNUMFRG,LLOCTAT,LIAOGLOB,LLOADM,LFMOGE,LDGRID,
     *                LIODCFMO,LJOB2GRP,LFMOPG,LEMOCDR,LUNTXYZ,LUNTROT,
     *                LSTONEP,LMAPSU,LFRGMUL,LCLMO,LIALMO,LINDLMO,
     *                LATCLMO,LLMOBDF,LFGFLMO,LNFGLMO,LLFGLMO,LPFGLMO,
     *                LPOPDMAT,LIDMPNT,LIDDPNT,LIVMPNT
      COMMON /FRGMSS/ FPMASS(MXPT),FMASS(MXFGPT),
     *                FPNUC(MXPT),FGNUC(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /GDDI/   ISCOPE,NGROUPS,MYGROUP,MEGLOB,NPGLOB,NNGLOB,JBTYP,
     *                ISGDDI,PAROUT,INITGDDI
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PRPOPT/ ETOLLZ,ILOCAL,IAHARD
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /ZMTALT/ NZMAT2,NZVAR2,NVAR2,NZMTRD,ICOORD
C
      DIMENSION FMODE(3,NATFMO,*)
C
      DATA OPTMIZ /8HOPTIMIZE/, SADPT  /8HSADPOINT/
      DATA GRAD  /8HGRADIENT/
C
C     --- CALCULATE TOTAL EFP POLARIZATION ENERGY ---
C
      NFRG  = IEFMONFRG
      CALL VCLR(X(LEFMODIMG),1,3*NATFMO)
      CALL VCLR(X(LEFMOTOTG),1,3*NATFMO)
      L1 = 2*NFRG
      L2 = NFRG*MXEFMOPTS*MXNEFMOPTS
      L3 = NFRG*MXEFMOPPTS*MXNEFMOPPTS

C
      IF( ISGDDI )
     *  CALL EFMOEXCH(NFRG,X(LNEFMOPTS),X(LEFMOPTS),X(LEFMOPPTS),
     *                L1,L2,L3)
C
      IF( GOPARR ) THEN
        CALL DDI_BCAST(2614,'I',X(LNEFMOPTS),L1,MASTER)
        CALL DDI_BCAST(2615,'F',X(LEFMOPTS),L2,MASTER)
        CALL DDI_BCAST(2616,'F',X(LEFMOPPTS),L3,MASTER)
      ENDIF
      IF(MASWRK) WRITE(IW,9000)
C
      OILOCAL = ILOCAL
      OICOORD = ICOORD
C     SETUP DEFAULT VALUES FOR EFP RUN. (TAKEN FROM ROUTINE START/EFPX)
      ILOCAL = 2
      ICOORD = 4
      SCROFF= 1.0D+04
      NEW_POL = 1
      IPLSCR = 0
      IDISPS = 0
      IELECS = 0
      IPLSCR = 0
      ICHGP = 0
C
      CALL EFMOPOPEFP(IEFMONFRG,X(LNEFMOPTS),X(LEFMOPTS),X(LEFMOPPTS))
      IEFP = 1
      IF( ISGDDI ) CALL GDDI_SCOPE( DDI_WORLD )
      CALL EFSP
      IEFP = 0
C
C     GET THE GRADIENTS. NOTICE THAT THIS IS SLIGHTLY MODIFIED
C     FROM WHAT IS DONE ELSEWHERE WITH REGULAR FMO-EFP.
C     ALSO, WE USE EFMODIMG COMMON STORAGE TEMPORARILY HERE.
      IF( RUNTYP.EQ.OPTMIZ .OR. RUNTYP.EQ.SADPT
     * .OR. RUNTYP.EQ.GRAD ) THEN
        CALL VALFM(LOADFM)
        LDIP1 = LOADFM + 1
        LDIP2 = LOADFM + 1
        LDFRG = LOADFM + 1
        LWORK = LDFRG + 1
        LGFIX = LWORK + MAX(1,10*NMTTPT)
        LAST = LGFIX + 3*NMTTPT
        NEED = LAST - LOADFM - 1
        CALL GETFM(NEED)
        CALL DCHIND(LDIP1,LDIP2,LDFRG,0)
        CALL DININ(LDIP1,LDIP2,LDFRG,0)
        CALL DDPIND(LDIP1,LDIP2,LDFRG,0)
        CALL DQDIND(X(LWORK),LDIP1,LDIP2,LDFRG,0)
        CALL INDCHG(0)
        CALL INDIND(0)
        CALL INDDPL(0)
        CALL INDQUA(0)
        CALL RETFM(NEED)
      ENDIF
      IF( ISGDDI ) CALL GDDI_SCOPE( DDI_GROUP )
      IF( GOPARR ) CALL DDI_GSUMF(2405,X(LEFMODIMG),3*NATFMO)
      CALL DCOPY(3*NATFMO,X(LEFMODIMG),1,X(LEFMOTOTG),1)
      EFMOETOT = EFMOPOLERG
      IF(MASWRK) CALL EFMODEG(1,FMODE(1,1,2),X(LIATFRG), X(LEFMOTOTG))
C
C AND RESTORE VALUES
      ILOCAL = OILOCAL
      ICOORD = OICOORD
C
C  RESET EVERYTHING!
      IEFPFMO = 0
      NFRG = 0
      NMTTPT = 0
      NPTTPT = 0
      CALL VICLR(NMPTS,1,MXFRG)
      CALL VICLR(NPPTS,1,MXFRG)
      CALL VICLR(LSTMPTS,1,MXFRG)
      CALL VCLR(EFC,1,3*MXFGPT)
      CALL VCLR(FMASS,1,MXFGPT)
      CALL VCLR(EFCHG,1,2*MXFGPT)
      CALL VCLR(EFDIP,1,3*MXFGPT)
      CALL VCLR(EFQAD,1,6*MXFGPT)
      CALL VCLR(EFP,1,3*MXFGPT)
      CALL VCLR(EFPOL,1,9*MXFGPT)
C
      IF(MASWRK) WRITE(IW,9021)
      IF(MASWRK)CALL TIMIT(1)
C
 9000 FORMAT (/5X,38(1H-)/
     *         5X,'EFP TOTAL POLARIZATION CALCULATION'/
     *         5X,38(1H-))
 9021 FORMAT(/,'..... END OF TOTAL POLARIZATION ENERGY .....')
      RETURN
      END
C
C
C
C*MODULE EFMO     *DECK EFMOFRGS
      SUBROUTINE EFMOFRGS(IFG,JFG,ECHNRG,EPOLNRG)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER(MXFGPT=12000,MXFRG=1050,MXDFG=5,
     *          MXDPPT=MXFRG*MXDFG*12,MXIFRQ=12,MXPT=2000)

      CHARACTER*8 POLNAM,DPOLNAM,FRGNME
      LOGICAL DSKWRK,MASWRK,GOPARR
      LOGICAL EFMODOEFPC
      INTEGER OILOCAL,OICOORD
      INTEGER EFMODIM
      COMMON /EFMO  / EFMOETOT,EFMOESERG,EFMOPOLERG,IEFMORUN,
     *                IEFMORT,IEFMOCFRG,IEFMONFRG,EFMODIM(2)
      COMMON /EFMOPO/ LNEFMOPTS,LEFMOPTS,LEFMOPPTS,LEFMODIMG,LEFMOTOTG
      COMMON /EFPFMO/ RUNEFP,REFFMO,REPNUCEFP,IEFPFMO,ISWENUC,EFPEFP
      COMMON /EFMULT/ EFC(3,MXFGPT),EFCHG(2,MXFGPT),EFATRM(MXFGPT),
     *                EFBTRM(MXFGPT),EFATRM2(MXFGPT),EFBTRM2(MXFGPT),
     *                EFDIP(3,MXFGPT),EFQAD(6,MXFGPT),
     *                EFOCT(10,MXFGPT),FRGNME(MXFGPT)
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /FMCOM / X(1)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /FRGMSS/ FPMASS(MXPT),FMASS(MXFGPT),
     *                FPNUC(MXPT),FGNUC(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PRPOPT/ ETOLLZ,ILOCAL,IAHARD
      COMMON /ZMTALT/ NZMAT2,NZVAR2,NVAR2,NZMTRD,ICOORD
      COMMON /EFPSCR/ POLAB(MXFRG),B,SCROFF,IELECS,IDISPS,NEW_POL
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      DATA OPTMIZ /8HOPTIMIZE/, SADPT  /8HSADPOINT/
      DATA GRAD  /8HGRADIENT/
C
C     --- CALCULATE EFP DIMER INTERACTION ENERGY ---
C
      EFMODIM(1) = IFG
      EFMODIM(2) = JFG
C
      IF( MASWRK ) WRITE(IW,9000) EFMODIM(1),EFMODIM(2)
C
C     THE FORMAT IS OVARNAME FOR OLD VALUES
      OILOCAL = ILOCAL
      OICOORD = ICOORD
C
C     SETUP DEFAULT VALUES FOR EFP RUN. (TAKEN FROM SUBROUTINE START)
      ILOCAL = 2
      ICOORD = 4
      SCROFF= 1.0D+04
      NEW_POL = 1
      IPLSCR = 0
      IDISPS = 0
      IELECS = 0
      IPLSCR = 0
      ICHGP = 0
      NFRG  = 2
      CALL VCLR(X(LEFMODIMG),1,3*NATFMO)
      CALL EFMOPOPEFP(IEFMONFRG,X(LNEFMOPTS),X(LEFMOPTS),X(LEFMOPPTS))
      IEFP = 0
      IF(.NOT.EFMODOEFPC(IFG,JFG)) IEFP = 1
      CALL EFSP
      IEFP = 0
C
C     GET THE GRADIENTS OF THE INDUCED DIPOLES FOR FRAGMENTS
C     I AND J, BUT ONLY IF WE ARE DOING QM     
      IF( RUNTYP.EQ.OPTMIZ .OR. RUNTYP.EQ.SADPT
     * .OR. RUNTYP.EQ.GRAD ) THEN
        IF(.NOT.EFMODOEFPC(IFG,JFG)) THEN
C
          CALL VALFM(LOADFM)
          LDIP1 = LOADFM + 1
          LDIP2 = LOADFM + 1
          LDFRG = LOADFM + 1
          LWORK = LDFRG + 1
          LAST = LWORK + MAX(1,10*NMTTPT)
          NEED = LAST - LOADFM - 1
          CALL GETFM(NEED)
          CALL DCHIND(LDIP1,LDIP2,LDFRG,0)
          CALL DININ(LDIP1,LDIP2,LDFRG,0)
          CALL DDPIND(LDIP1,LDIP2,LDFRG,0)
          CALL DQDIND(X(LWORK),LDIP1,LDIP2,LDFRG,0)
          CALL INDCHG(0)
          CALL INDIND(0)
          CALL INDDPL(0)
          CALL INDQUA(0)
          CALL RETFM(NEED)
        ENDIF
      ENDIF
      IF( GOPARR ) CALL DDI_GSUMF(2406,X(LEFMODIMG),3*NATFMO)
C
      ECHNRG  = EFMOESERG
      EPOLNRG = EFMOPOLERG

C     RESTORE VALUES
      ILOCAL = OILOCAL
      ICOORD = OICOORD
C
C     RESET EVERYTHING!
      NMTTPT = 0
      NPTTPT = 0
      IEFPFMO = 0
      NFRG = 0
      CALL VICLR(NMPTS,1,MXFRG)
      CALL VICLR(NPPTS,1,MXFRG)
      CALL VICLR(LSTMPTS,1,MXFRG)
      CALL VCLR(EFC,1,3*MXFGPT)
      CALL VCLR(FMASS,1,MXFGPT)
      CALL VCLR(EFCHG,1,2*MXFGPT)
      CALL VCLR(EFDIP,1,3*MXFGPT)
      CALL VCLR(EFQAD,1,6*MXFGPT)
      CALL VCLR(EFP,1,3*MXFGPT)
      CALL VCLR(EFPOL,1,9*MXFGPT)
C
      IF(MASWRK) WRITE(IW,9020)
      IF(MASWRK) CALL TIMIT(1)

 9000 FORMAT (/5X,49(1H-)/
     *         5X,'CALCULATING PROPERTIES FOR FRAGMENTS',I3,
     *         ' AND ',I3/
     *         5X,49(1H-))
 9020 FORMAT(/,'..... END OF EFMO DIMER CALCULATION .....')
      RETURN
      END
C
C
C*MODULE EFMO     *DECK EFMODOEFPC
      LOGICAL FUNCTION EFMODOEFPC(IFRG,JFRG)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER IFRG,JFRG
      COMMON /FMOOPT/ ESPSCA(9),RESPAP(2),RESPPC(2),RESDIM,RESTRI(4),
     *                RCORSD,RESPCT,CONVFG,CNVDMP,COROFF,RFLMO(4),
     *                ORSHFT,ORSHFT2,CNVAFO,ASCREEN(4),IXESP,MXITFG,
     *                NGUESS,NBSSE,MODORB,MODPAR,IRSTSTP,IRSTLAY,NPRFMO,
     *                NFMOPAL,MODPRP,MAXL1C,IPIEDA,MODGRD,MODESP,IVMUL,
     *                MODLMO,NOPDEN,MOFOCK
C
C     --- RETURNS TRUE/FALSE WHETHER TO DO EFP CALCULATION ---
C
      R = FMODIST(IFRG,0,0,JFRG)
      EFMODOEFPC = R.GT.RESDIM
      RETURN
      END
C
C
C*MODULE EFMO     *DECK EFMOESG
      SUBROUTINE EFMOESG(IFRG,JFRG,IC1,IC2,DXT,DYT,DZT,
     * TIX,TIY,TIZ,TJX,TJY,TJZ,EFMODIMG)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      INTEGER IFRG,JFRG,IC1,IC2, IP,JP,ATMI,ATMJ,ATMA,ATMC,
     *        ATMIP,ATMJP
      DIMENSION ATMS(3,3),DA(3),DI(3),DJ(3),DC(3),EFMODIMG(3,*)
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      DATA OPTMIZ /8HOPTIMIZE/, SADPT  /8HSADPOINT/
      DATA GRAD  /8HGRADIENT/
C
C     --- CALCULATE GRADIENT CONTRIBUTION FROM MULTIPOLES
C         AND POLARIZABLE POINTS
C
      IF( RUNTYP.EQ.OPTMIZ .OR. RUNTYP.EQ.SADPT
     * .OR. RUNTYP.EQ.GRAD ) THEN
C
C       GET INTERACTING MULTIPOLES
        IP = IC1
        JP = IC2
C  
C       DO THE CORRECT SIGN ON THE GRADIENT. J AND I ARE "SWITCHED"
C       AROUND DUE TO HOW FFELEC COUNTS. THE MINUS SIGN HERE CORRECTS
C       THE FORMULAS BELOW.
C
        DX = -DXT
        DY = -DYT
        DZ = -DZT
C  
        ATMI = IP
        ATMIP = IP
        ATMJ = JP
        ATMJP = JP
C  
C       DO TORQUE CONTRIBUTION ON NEIGHBOURS FROM TORQUE ON I
C  
        CALL VCLR(DI,1,3)
        CALL VCLR(DA,1,3)
        CALL VCLR(DC,1,3)
        CALL EFMOGCMPMP(IFRG,ATMI,ATMS)
        ATMA = INT(ATMS(1,1))
        ATMC = INT(ATMS(2,1))
        CALL EFMOTRQTOG(ATMA,ATMI,ATMC,TIX,TIY,TIZ,DA,DI,DC)
        EFMODIMG(1,ATMA) = EFMODIMG(1,ATMA) + DA(1)
        EFMODIMG(2,ATMA) = EFMODIMG(2,ATMA) + DA(2)
        EFMODIMG(3,ATMA) = EFMODIMG(3,ATMA) + DA(3)
        EFMODIMG(1,ATMC) = EFMODIMG(1,ATMC) + DC(1)
        EFMODIMG(2,ATMC) = EFMODIMG(2,ATMC) + DC(2)
        EFMODIMG(3,ATMC) = EFMODIMG(3,ATMC) + DC(3)
C  
C       DO TORQUE CONTRIBUTION ON NEIGHBOURS FROM TORQUE ON J
C  
        CALL VCLR(DJ,1,3)
        CALL VCLR(DA,1,3)
        CALL VCLR(DC,1,3)
        CALL EFMOGCMPMP(JFRG,ATMJ,ATMS)
        ATMA = INT(ATMS(1,1))
        ATMC = INT(ATMS(2,1))
        CALL EFMOTRQTOG(ATMA,ATMJ,ATMC,TJX,TJY,TJZ,DA,DJ,DC)
        EFMODIMG(1,ATMA) = EFMODIMG(1,ATMA) + DA(1)
        EFMODIMG(2,ATMA) = EFMODIMG(2,ATMA) + DA(2)
        EFMODIMG(3,ATMA) = EFMODIMG(3,ATMA) + DA(3)
        EFMODIMG(1,ATMC) = EFMODIMG(1,ATMC) + DC(1)
        EFMODIMG(2,ATMC) = EFMODIMG(2,ATMC) + DC(2)
        EFMODIMG(3,ATMC) = EFMODIMG(3,ATMC) + DC(3)
C  
C       DO RESULTING ROTATION ON I AND J
C
        EFMODIMG(1,ATMIP) = EFMODIMG(1,ATMIP) + DX + DI(1)
        EFMODIMG(1,ATMJP) = EFMODIMG(1,ATMJP) - DX + DJ(1)
        EFMODIMG(2,ATMIP) = EFMODIMG(2,ATMIP) + DY + DI(2)
        EFMODIMG(2,ATMJP) = EFMODIMG(2,ATMJP) - DY + DJ(2)
        EFMODIMG(3,ATMIP) = EFMODIMG(3,ATMIP) + DZ + DI(3)
        EFMODIMG(3,ATMJP) = EFMODIMG(3,ATMJP) - DZ + DJ(3)
      ENDIF
      RETURN
      END
C
C
C
*MODULE EFMO     *DECK EFMOGCMPMP
      SUBROUTINE EFMOGCMPMP(IFRG,IP,ATMS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER(MXFGPT=12000,MXFRG=1050,MXDFG=5,
     *          MXDPPT=MXFRG*MXDFG*12)
C
      CHARACTER*8 FRGNME
      INTEGER EFMODIM
C
      COMMON /EFMO  / EFMOETOT,EFMOESERG,EFMOPOLERG,IEFMORUN,
     *                IEFMORT,IEFMOCFRG,IEFMONFRG,EFMODIM(2)
      COMMON /EFMULT/ EFC(3,MXFGPT),EFCHG(2,MXFGPT),EFATRM(MXFGPT),
     *                EFBTRM(MXFGPT),EFATRM2(MXFGPT),EFBTRM2(MXFGPT),
     *                EFDIP(3,MXFGPT),EFQAD(6,MXFGPT),
     *                EFOCT(10,MXFGPT),FRGNME(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
C
      INTEGER I,IFRG,IP,OFFSET
      DIMENSION ATMS(3,3)
C
C     --- GET NEAREST MULTIPOLES FROM MULTIPOLE IP IN IFRG ---
C
      IF( IEFMORUN.EQ.0 ) RETURN 
C
      ATMS(1,1)=-1
      ATMS(1,2)=-1
      ATMS(1,3)=1.0D+30
      ATMS(2,1)=-1
      ATMS(2,2)=-1
      ATMS(2,3)=1.0D+30
      ATMS(3,1)=-1
      ATMS(3,2)=-1
      ATMS(3,3)=1.0D+30
C
      OFFSET = 0
      IF( IEFMORT.EQ.4 ) THEN
C       WE KNOW THAT IFRG IS THE TRUE FRAGMENT
C       SO WE CAN COUNT USING THE NUMBER OF
C       MULTIPOLES
        DO I=1,NFRG
          IF(I.EQ.IFRG) GOTO 10
          OFFSET = OFFSET + NMPTS(I)
        ENDDO
      ELSEIF( IEFMORT.EQ.3 ) THEN
C
        DO I=1,NFRG
          IF(I.EQ.IFRG) GOTO 10
          OFFSET = OFFSET + NMPTS(I)
        ENDDO
      ENDIF
   10 CONTINUE
C
C     GET COORDINATES OF IP'TH MULTIPOLE
      BX = EFC(1,IP)
      BY = EFC(2,IP)
      BZ = EFC(3,IP)

C     LOOP OVER EACH MULTIPOLE IN THE CURRENT FRAGMENT
      DO 20 I=1,NMPTS(IFRG)
C
C       IF IT IS AN ATOM, THEN CHECK THE DISTANCE
        IF(EFCHG(2,I).GT.0.0D+00) THEN
          AX = EFC(1,OFFSET+I)
          AY = EFC(2,OFFSET+I)
          AZ = EFC(3,OFFSET+I)
          R  = (AX-BX)**2 + (AY-BY)**2 + (AZ-BZ)**2
C         JUST SOME SMALL "IMPOSSIBLE" VALUE
          IF( R.LT.1.0D-02 ) GOTO 20
C         IF THE ATOM DISTANCE IS THE SHORTEST ONE, INSERT IT
          IF(R.LT.ATMS(1,3)) THEN
C         COPY DOWN STUFF FIRST
            ATMS(3,1) = ATMS(2,1)
            ATMS(3,2) = ATMS(2,2)
            ATMS(3,3) = ATMS(2,3)
            ATMS(2,1) = ATMS(1,1)
            ATMS(2,2) = ATMS(1,2)
            ATMS(2,3) = ATMS(1,3)
C           THEN INSERT LOWER VALUES
            ATMS(1,1) = OFFSET +I
            ATMS(1,2) = -1
            ATMS(1,3) = R
C           AVOID TO INSERT THE LOWEST VALUE
C           FIRST AT BOTH PLACES
            GOTO 20
          ENDIF

C         IF THE ATOM DISTANCE IS THE SECOND SHORTEST, INSERT IT
          IF(R.LT.ATMS(2,3)) THEN
C           COPY DOWN STUFF FIRST
            ATMS(3,1) = ATMS(2,1)
            ATMS(3,2) = ATMS(2,2)
            ATMS(3,3) = ATMS(2,3)
            ATMS(2,1) = OFFSET +I
            ATMS(2,2) = -1
            ATMS(2,3) = R
C           AVOID TO INSERT THE LOWEST VALUE
C           FIRST AT BOTH PLACES
            GOTO 20
          ENDIF

          IF(R.LT.ATMS(3,3)) THEN
            ATMS(3,1) = OFFSET +I
            ATMS(3,2) = -1
            ATMS(3,3) = R
          ENDIF
        ENDIF
   20 CONTINUE
      RETURN
      END
C
C
C
C
C*MODULE EFMO     *DECK EFMOGCMPPOL
      SUBROUTINE EFMOGCMPPOL(IFRG,IP,ATMS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER(MXIFRQ=12,
     *          MXFGPT=12000,MXFRG=1050,MXDFG=5,
     *          MXDPPT=MXFRG*MXDFG*12)
C
      CHARACTER*8 POLNAM,DPOLNAM,FRGNME
      INTEGER EFMODIM
C
      COMMON /EFMO  / EFMOETOT,EFMOESERG,EFMOPOLERG,IEFMORUN,
     *                IEFMORT,IEFMOCFRG,IEFMONFRG,EFMODIM(2)
      COMMON /EFMULT/ EFC(3,MXFGPT),EFCHG(2,MXFGPT),EFATRM(MXFGPT),
     *                EFBTRM(MXFGPT),EFATRM2(MXFGPT),EFBTRM2(MXFGPT),
     *                EFDIP(3,MXFGPT),EFQAD(6,MXFGPT),
     *                EFOCT(10,MXFGPT),FRGNME(MXFGPT)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
C
      INTEGER I,IFRG,IP,OFFSET
      DIMENSION ATMS(3,3)
C
C     --- GET NEAREST MULTIPOLES FROM MULTIPOLE IP IN IFRG ---
C
      IF( IEFMORUN.EQ.0 ) RETURN 
C
C INITIALIZATION
C
      ATMS(1,1)=-1
      ATMS(1,2)=-1
      ATMS(1,3)=1.0D+30
      ATMS(2,1)=-1
      ATMS(2,2)=-1
      ATMS(2,3)=1.0D+30
      ATMS(3,1)=-1
      ATMS(3,2)=-1
      ATMS(3,3)=1.0D+30
C
      OFFSET = 0
      IF( IEFMORT.EQ.4 ) THEN
C       WE KNOW THAT IFRG IS THE TRUE FRAGMENT
C       SO WE CAN COUNT USING THE NUMBER OF
C       MULTIPOLES SINCE THEY ARE ONLY ON ATOMS
        DO I=1,NFRG
          IF(I.EQ.IFRG) GOTO 10
          OFFSET = OFFSET + NMPTS(I)
        ENDDO
      ELSEIF( IEFMORT.EQ.3 ) THEN
C
        DO I=1,NFRG
          IF(I.EQ.IFRG) GOTO 10
          OFFSET = OFFSET + NMPTS(I)
        ENDDO
      ENDIF
   10 CONTINUE
C
C     GET COORDINATES OF IP'TH MULTIPOLE
      BX = EFP(1,IP)
      BY = EFP(2,IP)
      BZ = EFP(3,IP)

C     LOOP OVER EACH MULTIPOLE IN THE CURRENT FRAGMENT
      DO 20 I=1,NMPTS(IFRG)
C
C       IF IT IS AN ATOM, THEN CHECK THE DISTANCE
        IF(EFCHG(2,I).GT.0.0D+00) THEN
          AX = EFC(1,OFFSET+I)
          AY = EFC(2,OFFSET+I)
          AZ = EFC(3,OFFSET+I)
          R  = (AX-BX)**2 + (AY-BY)**2 + (AZ-BZ)**2
C
C         IF THE ATOM DISTANCE IS THE SHORTEST ONE, INSERT IT
          IF(R.LT.ATMS(1,3)) THEN
C           COPY DOWN STUFF FIRST
            ATMS(3,1) = ATMS(2,1)
            ATMS(3,2) = ATMS(2,2)
            ATMS(3,3) = ATMS(2,3)
            ATMS(2,1) = ATMS(1,1)
            ATMS(2,2) = ATMS(1,2)
            ATMS(2,3) = ATMS(1,3)
C           THEN INSERT LOWER VALUES
            ATMS(1,1) = OFFSET +I
            ATMS(1,2) = -1
            ATMS(1,3) = R
C           AVOID TO INSERT THE LOWEST VALUE
C           FIRST AT BOTH PLACES
            GOTO 20
          ENDIF

C         IF THE ATOM DISTANCE IS THE SECOND SHORTEST, INSERT IT
          IF(R.LT.ATMS(2,3)) THEN
C           COPY DOWN STUFF FIRST
            ATMS(3,1) = ATMS(2,1)
            ATMS(3,2) = ATMS(2,2)
            ATMS(3,3) = ATMS(2,3)
            ATMS(2,1) = OFFSET +I
            ATMS(2,2) = -1
            ATMS(2,3) = R
C           AVOID TO INSERT THE LOWEST VALUE
C           FIRST AT BOTH PLACES
            GOTO 20
          ENDIF

          IF(R.LT.ATMS(3,3)) THEN
            ATMS(3,1) = OFFSET +I
            ATMS(3,2) = -1
            ATMS(3,3) = R
          ENDIF
        ENDIF
   20 CONTINUE
      RETURN
      END
C
C
C
C*MODULE EFMO     *DECK EFMOTRQTOG
      SUBROUTINE EFMOTRQTOG(IA,IB,IC,TBX,TBY,TBZ,DA,DB,DC)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER(MXFGPT=12000)
C
      INTEGER IA,IB,IC,I
      CHARACTER*8 FRGNME
      DIMENSION U(3),V(3),W(3),DA(3),DB(3),DC(3),UV(3),UW(3)
C
      COMMON /EFMULT/ EFC(3,MXFGPT),EFCHG(2,MXFGPT),EFATRM(MXFGPT),
     *                EFBTRM(MXFGPT),EFATRM2(MXFGPT),EFBTRM2(MXFGPT),
     *                EFDIP(3,MXFGPT),EFQAD(6,MXFGPT),
     *                EFOCT(10,MXFGPT),FRGNME(MXFGPT)
C
C     --- GET GRADIENT(ROTATION) DUE TO TORQUES. ---
C
C         THIS SUBROUTINE ASSUMES THAT A,B AND C ARE ATOMS!
C
C     CREATE LOCAL COORDINATE SYSTEM
      U(1) = EFC(1,IA) - EFC(1,IB)
      U(2) = EFC(2,IA) - EFC(2,IB)
      U(3) = EFC(3,IA) - EFC(3,IB)
      UNRM = SQRT(U(1)*U(1) + U(2)*U(2) + U(3)*U(3))
      V(1) = EFC(1,IC) - EFC(1,IB)
      V(2) = EFC(2,IC) - EFC(2,IB)
      V(3) = EFC(3,IC) - EFC(3,IB)
      VNRM = SQRT(V(1)*V(1) + V(2)*V(2) + V(3)*V(3))
      W(1) = U(2)*V(3) - U(3)*V(2)
      W(2) = U(3)*V(1) - U(1)*V(3)
      W(3) = U(1)*V(2) - U(2)*V(1)
      WNRM = SQRT(W(1)*W(1) + W(2)*W(2) + W(3)*W(3))
C
      DO I = 1,3
        U(I) = U(I) / UNRM
        V(I) = V(I) / VNRM
        W(I) = W(I) / WNRM
      ENDDO
C
C     GET PERPENDICULARS TO U AND V I.E. THE DIRECTION
C     OF ROTATION
C
      UV(1) = U(2)*V(3) - U(3)*V(2)
      UV(2) = U(3)*V(1) - U(1)*V(3)
      UV(3) = U(1)*V(2) - U(2)*V(1)
      UW(1) = U(2)*W(3) - U(3)*W(2)
      UW(2) = U(3)*W(1) - U(1)*W(3)
      UW(3) = U(1)*W(2) - U(2)*W(1)
C
C     NEGATIVE OF DOT PRODUCT OF TORQUE AND UNIT VECTORS GIVE
C     INFINETISMAL ROTATION.
C
      DPHIDU = -TBX*U(1) - TBY*U(2) - TBZ*U(3)
      DPHIDV = -TBX*V(1) - TBY*V(2) - TBZ*V(3)
      DPHIDW = -TBX*W(1) - TBY*W(2) - TBZ*W(3)
C
C      PROJECTED DISTANCES BETWEEN U AND V
C
C      C = U(1)*V(1) + U(2)*V(2) + U(3)*V(3)
C      S = SQRT(1.0D+00 - C*C)
C      UVDIS = UNRM*S
C      VUDIS = VNRM*S
C
C     DISTRIBUTE FORCE TO GRADIENT
      DO I = 1,3
        DA(I) = 0.0D+00
        DB(I) = 0.0D+00
        DC(I) = 0.0D+00
      ENDDO
      DO I = 1,3
C       NOTICE THAT U AND V ARE UNIT VECTORS SO WE
C       MUST DIVIDE BY THE LENGTH OF THE ORIGINAL ONES
C       TO GET THE REAL SIZE OF THE ROTATION
        DU =  (UV(I)*DPHIDV + UW(I)*DPHIDW) / UNRM
        DV = -(UW(I)*DPHIDU + UW(I)*DPHIDW) / VNRM
        DA(I) = DA(I) + DU
        DC(I) = DC(I) + DV
        DB(I) = DB(I) - DV - DU
      ENDDO
      RETURN
      END
C
C
C
C*MODULE EFMO     *DECK EFMOM
      SUBROUTINE EFMOM(NEFMOPTS,EFMOPTS,EFMOPPTS,EFMODIMG,EFMOTOTG,
     *                 IREQMEM)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      DIMENSION EFMOPTS(*), EFMOPPTS(*),NEFMOPTS(*),EFMODIMG(*),
     *          EFMOTOTG(*)
      PARAMETER (MXEFMOPTS=50,MXEFMOPPTS=60,MXNEFMOPTS=17,
     *           MXNEFMOPPTS=15)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     --- EFMO DYNAMIC MEMORY INITIALIZATION ---
C
      CALL VICLR(NEFMOPTS,1,2*NFG)
      CALL VCLR(EFMOPTS,1,NFG*MXNEFMOPTS*MXEFMOPTS)
      CALL VCLR(EFMOPPTS,1,NFG*MXNEFMOPPTS*MXEFMOPPTS)
      CALL VCLR(EFMODIMG,1,3*NATFMO)
      CALL VCLR(EFMOTOTG,1,3*NATFMO)
C
      IF( MASWRK ) WRITE(IW,9000)
      IF( MASWRK ) WRITE(IW,9005) IREQMEM
      IF( MASWRK ) WRITE(IW,9010)
C
 9000 FORMAT (/1X,70(1H-)/
     * 1X,'THIS IS AN EFFECTIVE FRAGMENT MOLECULAR ORBITAL (EFMO)',
     * ' RUN.',/3X,'USING EFP MODELS',
     *            ' FOR MANY-BODY INTERACTIONS.',//,3X,
     *            'ALL PUBLICATIONS USING EFMO SHOULD REFERENCE:'/,
     *            5X,'C. STEINMANN, D.G. FEDOROV, J.H. JENSEN, ',
     *            'J. CHEM. PHYS. A 114, 8705 (2010)')
 9005 FORMAT (/5X,'EFMO STORAGE REQUIRES',I10,' WORDS.')
 9010 FORMAT(/1X,70(1H-))
      RETURN
      END
C
C
C
C*MODULE EFMO     *DECK EFMOSTOR
      SUBROUTINE EFMOSTOR(I,K,IDX,EFMOPTS,N,VALUE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MXEFMOPTS=50,MXNEFMOPTS=17)
      DIMENSION EFMOPTS(N,MXEFMOPTS,MXNEFMOPTS)
      LOGICAL GOPARR,DSKWRK,MASWRK
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     --- STORE EFP-MULTIPOLE INFORMATION IN DYNAMIC STORAGE ---
C
      IERR = 0
      IF( I.GT.N ) IERR = IERR + 1
      IF( K.GT.MXEFMOPTS ) IERR = IERR + 1
      IF( IDX.GT.MXNEFMOPTS ) IERR = IERR + 1
      IF( IERR.GT.0 ) THEN
        IF( MASWRK ) WRITE(IW,9000)
        CALL ABRT
      ENDIF
C
C     NO ERRORS, STORE THE VALUE
      EFMOPTS(I,K,IDX) = VALUE
C
 9000 FORMAT (/5X,"EFMO STORAGE FAILED.",/)
      RETURN
      END
C
C
C
C*MODULE EFMO     *DECK EFMOSTORP
      SUBROUTINE EFMOSTORP(I,K,IDX,EFMOPPTS,N,VALUE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MXEFMOPPTS=60,MXNEFMOPPTS=15)
      DIMENSION EFMOPPTS(N,MXEFMOPPTS,MXNEFMOPPTS)
      LOGICAL GOPARR,DSKWRK,MASWRK
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
C     --- STORE EFP-POLARIZABLE POINT INFORMATION IN DYNAMIC STORAGE ---
C
      IERR = 0
      IF( I.GT.N ) IERR = IERR + 1
      IF( K.GT.MXEFMOPPTS ) IERR = IERR + 1
      IF( IDX.GT.MXNEFMOPPTS ) IERR = IERR + 1
      IF( IERR.GT.0 ) THEN
        IF( MASWRK ) WRITE(IW,9000)
        CALL ABRT
      ENDIF
C
C     NO ERRORS, STORE THE VALUE
      EFMOPPTS(I,K,IDX) = VALUE
C
 9000 FORMAT (/5X,"EFMO STORAGE FAILED.",/)
      RETURN
      END
C
C
C
C*MODULE EFMO     *DECK EFMOPNTSAV
      SUBROUTINE EFMOPTNSAV(NEFMOPTS,NFG,N,MODE,IVALUE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION NEFMOPTS(2,NFG)
C
C     --- STORE NUMBER OF MULTIPOLE/POLARIZABLE POINTS ---
C
C        MODE = 1  :        STATIC MULTIPOLE POINT
C        MODE = 2  :        POLARIZABLE POINT
C
      NEFMOPTS(MODE,N) = IVALUE
C
      RETURN
      END
C
C
C
C*MODULE EFMO     *DECK EFMOPOPEFP
      SUBROUTINE EFMOPOPEFP(NFG,NEFMOPTS,EFMOPTS,EFMOPPTS)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      INTEGER EFMODIM
      CHARACTER*8 POLNAM,DPOLNAM,FRGNME
      LOGICAL DOMONO,DODIPO,DOQUAD,DOOCTU
C
      PARAMETER(MXFGPT=12000,MXFRG=1050,MXDFG=5,
     *          MXDPPT=MXFRG*MXDFG*12,MXIFRQ=12,MXPT=2000)
      PARAMETER (MXEFMOPTS=50,MXEFMOPPTS=60,MXNEFMOPTS=17,
     *           MXNEFMOPPTS=15)
C
      DIMENSION EFMOPTS(NFG,MXEFMOPTS,MXNEFMOPTS),
     *          EFMOPPTS(NFG,MXEFMOPPTS,MXNEFMOPPTS),
     *          NEFMOPTS(2,NFG)
C
      COMMON /DOMULT/ DOMONO(MXFGPT),DODIPO(MXFGPT),DOQUAD(MXFGPT),
     *                DOOCTU(MXFGPT)
      COMMON /EFMO  / EFMOETOT,EFMOESERG,EFMOPOLERG,IEFMORUN,
     *                IEFMORT,IEFMOCFRG,IEFMONFRG,EFMODIM(2)
      COMMON /EFMULT/ EFC(3,MXFGPT),EFCHG(2,MXFGPT),EFATRM(MXFGPT),
     *                EFBTRM(MXFGPT),EFATRM2(MXFGPT),EFBTRM2(MXFGPT),
     *                EFDIP(3,MXFGPT),EFQAD(6,MXFGPT),
     *                EFOCT(10,MXFGPT),FRGNME(MXFGPT)
      COMMON /EFPPAR/ EFP(3,MXFGPT),EFPOL(9,MXFGPT),
     *                EFDP(3,MXIFRQ*MXFGPT),EFDPOL(9,MXIFRQ*MXFGPT),
     *                ENO,DIND(3,MXFGPT),DINDD(3,MXFGPT),
     *                POLNAM(MXFGPT),DPOLNAM(MXIFRQ*MXFGPT),
     *                POLSCR(MXFGPT),IPLSCR,INDSCR
      COMMON /EFPSCR/ POLAB(MXFRG),B,SCROFF,IELECS,IDISPS,NEW_POL
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGMSS/ FPMASS(MXPT),FMASS(MXFGPT),
     *                FPNUC(MXPT),FGNUC(MXFGPT)
CC
C     --- POPULATE EFP COMMON BLOCKS WITH EFMO DATA ---
C
      NMTTPT = 0
      NPTTPT = 0
      CALL VICLR(NMPTS,1,MXFRG)
      CALL VICLR(NPPTS,1,MXFRG)
      CALL VICLR(LSTMPTS,1,MXFRG)
      CALL VCLR(EFDIP,1,3*MXFGPT)
      CALL VCLR(EFQAD,1,6*MXFGPT)
C
C
      DO I=1,NFRG
        IF( NFRG.EQ.2 ) THEN
          NMPTS(I) = NEFMOPTS(1,EFMODIM(I))
          NPPTS(I) = NEFMOPTS(2,EFMODIM(I))
        ELSE
          NMPTS(I) = NEFMOPTS(1,I)
          NPPTS(I) = NEFMOPTS(2,I)
        ENDIF
      ENDDO
      LSTMPTS(1) = 1
      DO I=1,NFRG
        NMTTPT = NMTTPT + NMPTS(I)
        NPTTPT = NPTTPT + NPPTS(I)
        LSTMPTS(I+1) = LSTMPTS(I) + NMPTS(I)
      ENDDO
      IMULPOL = 0
      IPOLPOL = 0
      DO IDX=1,NFRG
        I = IDX
        IF( NFRG.EQ.2 ) I = EFMODIM(IDX)
        DO J=1,NMPTS(IDX)
          IMULPOL = IMULPOL +1
          EFC(1,IMULPOL)   = EFMOPTS(I,J,1)
          EFC(2,IMULPOL)   = EFMOPTS(I,J,2)
          EFC(3,IMULPOL)   = EFMOPTS(I,J,3)
          FMASS(IMULPOL)   = EFMOPTS(I,J,4)
          EFCHG(1,IMULPOL) = EFMOPTS(I,J,6)
          EFCHG(2,IMULPOL) = EFMOPTS(I,J,5)
          EFDIP(1,IMULPOL) = EFMOPTS(I,J,7)
          EFDIP(2,IMULPOL) = EFMOPTS(I,J,8)
          EFDIP(3,IMULPOL) = EFMOPTS(I,J,9)
          EFQAD(1,IMULPOL) = EFMOPTS(I,J,10)
          EFQAD(2,IMULPOL) = EFMOPTS(I,J,11)
          EFQAD(3,IMULPOL) = EFMOPTS(I,J,12)
          EFQAD(4,IMULPOL) = EFMOPTS(I,J,13)
          EFQAD(5,IMULPOL) = EFMOPTS(I,J,14)
          EFQAD(6,IMULPOL) = EFMOPTS(I,J,15)
          DOMONO(IMULPOL)  = .TRUE.
          DODIPO(IMULPOL)  = .TRUE.
          DOQUAD(IMULPOL)  = .TRUE.
          DOOCTU(IMULPOL)  = .FALSE.
        ENDDO
        DO J=1,NPPTS(IDX)
          IPOLPOL = IPOLPOL + 1
          IOFFSET = 3
          EFP(1,IPOLPOL)   = EFMOPPTS(I,J,1)
          EFP(2,IPOLPOL)   = EFMOPPTS(I,J,2)
          EFP(3,IPOLPOL)   = EFMOPPTS(I,J,3)
          EFPOL(1,IPOLPOL) = EFMOPPTS(I,J,IOFFSET + 1)
          EFPOL(2,IPOLPOL) = EFMOPPTS(I,J,IOFFSET + 5)
          EFPOL(3,IPOLPOL) = EFMOPPTS(I,J,IOFFSET + 9)
          EFPOL(4,IPOLPOL) = EFMOPPTS(I,J,IOFFSET + 2)
          EFPOL(5,IPOLPOL) = EFMOPPTS(I,J,IOFFSET + 3)
          EFPOL(6,IPOLPOL) = EFMOPPTS(I,J,IOFFSET + 6)
          EFPOL(7,IPOLPOL) = EFMOPPTS(I,J,IOFFSET + 4)
          EFPOL(8,IPOLPOL) = EFMOPPTS(I,J,IOFFSET + 7)
          EFPOL(9,IPOLPOL) = EFMOPPTS(I,J,IOFFSET + 8)
        ENDDO
        POLAB(IDX) = 0.60D+00
      ENDDO
      RETURN
      END
C
C
C
C*MODULE EFMO     *DECK EFMODEG
      SUBROUTINE EFMODEG(IDA,FMODE,IAGLOB,EFMOG)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION FMODE(3,*),IAGLOB(*),EFMOG(3,*)
      INTEGER EFMODIM
      PARAMETER (MXATM=2000)
      COMMON /EFMO  / EFMOETOT,EFMOESERG,EFMOPOLERG,IEFMORUN,
     *                IEFMORT,IEFMOCFRG,IEFMONFRG,EFMODIM(2)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /FMOINF/ NFG,NLAYER,NATFMO,NBDFG,NAOTYP,NBODY
C
C     --- EFMO GRADIENT UPDATER ---
C
      NNAT = NAT
      DA = IDA
      IF(DA.EQ.1 .AND. IEFMORT.EQ.4) NAT = NATFMO
      DO I=1,NAT
        IG=IAGLOB(I)
C        WRITE(6,'(A,2I4,3F16.9)'),'CSS: GRAD',I,IG,(EFMOG(K,I),K=1,3)
        DO J=1,3
          FMODE(J,IG) = FMODE(J,IG)+DA*EFMOG(J,I)
        ENDDO
      ENDDO
      NAT = NNAT
      RETURN
      END
C
C
C*MODULE EFMO     *DECK EFMOEXCH
      SUBROUTINE EFMOEXCH(NFG,NEFMOPTS,EFMOPTS,EFMOPPTS,L1,L2,L3)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXEFMOPTS=50,MXEFMOPPTS=60,MXNEFMOPTS=17,
     *           MXNEFMOPPTS=15)
      INTEGER DDI_WORLD,DDI_GROUP
      PARAMETER(DDI_WORLD=0,DDI_GROUP=1)
      DIMENSION EFMOPTS(NFG,MXEFMOPTS,MXNEFMOPTS),
     *          EFMOPPTS(NFG,MXEFMOPPTS,MXNEFMOPPTS),
     *          NEFMOPTS(2,NFG)
C
C     --- BROADCAST AND ACCUMULATE EFMO DATA ACROSS NODES ---
C
C     SUM UP ACROSS GROUPS IF GDDI
      CALL GDDI_SCOPE(DDI_WORLD)
      CALL DDI_GSUMI(2601,NEFMOPTS,L1)
      CALL DDI_GSUMF(2602,EFMOPTS,L2)
      CALL DDI_GSUMF(2603,EFMOPPTS,L3)
      CALL GDDI_SCOPE(DDI_GROUP)
      RETURN
      END
