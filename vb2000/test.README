The "tests" sub-directory contains tests that can be run after installing 
VB2000 as part of Gamess(US). 

In this "$GMSPATH/vb2000" directory, you will find:-

a) runallvb used for running the tests, 
b) checkvbtst used for checking the test runs. This uses a series of files,
examvbXY (with XY = 01 --> 23), which are in the "./checktst" sub-directory.
c) this README and gamess.README,

All output files from 32 bit Linux runs with code compiled by gfortran
(gcc version 4.2.4) are in the "test_results" sub-directory.

The "runallvb" script assumes your working "rungms" script is in the
$GMSPATH directory, one up from where the "runallvb" script is. The
rungms script should define VB2000PATH (see gamess.README), if it is i
not defined in your .bashrc or .cshrc file 

Run the tests jobs with:-

./runallvb &

The results should be checked against the values in the input files,
which of course also appears near the top of the output. Remember to
delete the *.dat files before rerunning the tests. Note that the scratch
files used by VB2000 are left in the directory defined in rungms as
$SCR. For some tests they need to remain there for a restart in the
following test.

You can check the results with the "checkvbtst" script which works much
like $GMSPATH/tools/checktst/checktst for the regular tests. It uses
the files ./checktst/examvb??.

Type:-

./checkvbtst

at the shell prompt and indicate at the first prompt that the output
*.log files are in $GMSPATH/vb2000 (since you are probably already in
that directory, you can just select the default "."). You can also
compare your results directly with the output *.log files in
$GMSPATH/vb2000/test_results.

The tests are:-

1. A straight Gamess run to show that the VB2000 code is ignored if
there is no $VB2000 group.

2. A run to show the VB2000 code aborting if the $VB2000 group is not
present or it does not contain a #! command line.

3. A standard VB2000 run for a closed shell case.

This also tests four of the visualisation possabilities, MOLPLT, PLTORB,
MOLDEN and CUBE. MOLPLT and PLTORB are present in Gamess but behave
differently in the VB2000 implementation as follows:-

a) MOLPLT 

If the $MOLPLT directive is present in the VB2000 data block, the MOLPLT 
data is created by the VB2000 routines as exam-vb03.mol and the call for 
MOLPLT in the Gamess $CONTRL group, if present as in this test, is ignored.

b) PLTORB

If the $PLTORB directive is present in the VB2000 data block, then the
the VB orbitals are put into a VEC file (exam-vb03.vec) and the PLTORB
input is output as an ORB file (exam-vb03.orb). If PLTORB is set true in
the GAMESS $CONTRL block, separate pltorb data is added to the PUNCH
file (exam0vb03.dat). The VB2000 $PLTORB directive reads more
information, leading to an ORB file which should work without change,
although it can be changed to modify the original setup. The data in
the PUNCH file always requires editing.

c) MOLDEN

This generates a general molden format file with *.molf extension. 

d) CUBE

If the $CUBE directive is present in the VB2000 data block, in this case
as:-

 $CUBE
 4
 4 5 6 7
 WATER STO-3G
 8

then 4 cube files are created as exam-vb03-004.cube, exam-vb03-005, etc. 
Each of these contains the cube data for the appropriate VB orbital (4,
5, 6  or 7) using 8 grid points on each axis. Note that 8 is far too
small, but gives a reasonable size cube file for a test. In real runs
this should be in the range 50 - 100. 100 is the maximum allowed and if
0 is given, it defaults to 80.

The files are initially created in the scratch directory, but are moved
in runallvb to the current working directory if you set $SCR correctly
in that script. 

4. Same as test 3, but illustrates how symmetry can be used to define
the data and then switched off.

This also tests another three of the visualisation possabilities,
MOLEKEL, GENGRID and XYZFILE as follows:-

a) MOLEKEL

If the $MOLEKEL directive is present in the VB2000 data block, optionally 
followed by root of a file name MKLNAME, a file in the Molekel native
mkl format is output. The file name is MKLNAME.mkl or if that line is
absent, JOB.mkl (exam-vb04.mkl).

b) GENGRID

The data is similar to the $CUBE date.

 $GENGRID
 4
 4 5 6 7
 WATER cc-pVDZ
 8

c) XYZFILE

If the $XYZFIKE directive is present in the VB2000 data block, a file
(exam-vb04.xyz) is created. This is the simplest format for the
molecular coordinates and can be read by a large number of visualisation
codes. The data is $XYZFILE folloed bu an optional, but recomended title
on the second line

 $XYZFILE
 Water

The files are initially created in the scratch directory, but are moved
in runallvb to the current working directory if you set $SCR correctly
in that script. 
 
5. A standard VB2000 run, but with inclusion of f orbitals in the basis
set. This is not possible with the stand-alone VB2000 code.

6. A similar run but with an even larger basis set including a g
orbital.

7. Shows a TRUDGE run to optimize the geometry.

8. A similar run to test7, but illustrates a way in which the
coordinate variables can be constrained. In this case, only two
variables are used for water, with the second O-H length constrained to
be equal to the first. In test 7, three variables are optimized.

9. A simple test of the VB2000 part of Gamess with EXETYP=CHECK.

10. A very simple and quick reaction path run of H2O going from bent to 
linear.

This also tests one of the visualisation possabilities, XYZFILE, but unlike
test4, this gives a multi-step XYZ file with the coordinates for each
step of the reaction path. This file can be used for an animation of the
reaction path.

a) XYZFILE

If the $XYZFIKE directive is present in the VB2000 data block, a file
(exam-vb10.xyz) is created. 

11. A test of the "SPHER" keyword that forces the use of speherical
harmonic d, f and g functions for the VB calculation.

12. This uses RUNTYP=OPTIMIZE and NUMGRD=.TRUE. to optimize the VB
geometry using numerical gradients.

13. This uses the geometry from test 18 to evaluate the VB frequencies,
using the $FORCE METHOD=FULLNUM $END group.

14. This tests how a wider range of properties other than the dipole
moment can be evaluated from the VB wavefunction.

15. A test of CH2S with the cc-VDZ basis that has a larger number of
primitive Gaussians per contracted function than previous studies.

16. This uses the $RESTARTFILE from test 3 to do just one macroiteration
at SCVB(4) level rather than VB(4).

17. This does a restart from test 16, and must therefore follow that
run. It does a full number of macroiterations.

18. This tests demonstrates that effective core potential calculations
can be run, in this case with the built-in SBKJC potential. It also
tests the creation of CUBE files for effective core potential
calculations.

19. This tests demonstrates that effective core potential calculations
can be run, in this case with the built-in Heys-Wadt potential.

20. A test of an open shell system with general basis (D95) entered in
$DATA group.

21. An open shell CASVB calculation which illustrates the action taken
if the data tries to evaluate properties.

22. Another open shell CASVB test, using a basis set not built into
GAMESS.

23. A test of H2O with the D95 basis set using localization enhancement
control and DIIS plus damping for convergence.

Note that "grep TERMINATED e*.log" should show all tests to have
terminated normally.

