USE OF GAMESS/VB2000.
---------------------

Why would you want to use the Gamess/VB2000 program rather then the
VB2000 stand-alone code?

A. It allows a greater choice of basis functions as Gamess has many
built-in basis sets that are not available in the stand-alone VB2000.
In particular it can handle f and g and in the latest release of May
2013, h and i) functions, which is not yet possible in the stand-alone
version. You can also use Gamess to generate the PUNCH file and then
modify a basis set for later input into the Gamess/VB2000 program. While
the stand-alone version allows general basis set data, using Gamess is
easier.

B. It can compute the VB dipole moment, and some other one electron
properties, but the latter are only for closed shell systems at this 
time.

C. It can do geometry optimization with either TRUDGE or NUMGRD.

D. It can do numerical frequencies although these are not too accurate
because of the use of numerical first and second derivatives.

E. It allows effective core or pseudo potential calculations.

F. It calculates the centroids and extents of the VB orbitals.

INCLUDING VB2000 IN GAMESS.
---------------------------

VB2000, since version 2.6 in early 2012, is now distributed with the
GAMESS source code and is compiled by default.  If you get a later
version of the full VB2000 including the stand-alone version, without
upgrading GAMESS, please check the VB2000 web site for up to date
information. 

WinGamess used to have VB2000 built-in, but the current situation with
WinGamess is uncertain. The Windows release of GAMESS from the Gordon
Group has VB2000 included, but release of that version is often later
than the main release.  

$VB2000PATH
-----------

VB2000PATH is the path where the program finds the directories MAP and
VBOLIB. It is set in the gms-files.csh file included in the rungms
script by:

setenv VB2000PATH $GMSPATH/vb2000

If you are also using the stand-alone code, you may define the
VB2000PATH variable in the gms-files.csh file to point to your VB2000
directory for the stand-alone version. Note that the MAP files in the
GAMESS version only go up to 12-electron singlet molecules, while in the
stand-alone version they go to 14-electron singlet molecules and the MAP
file for 15-electron singlet molecules can be obtained from the VB2000
web site. If you want to run molecules larger than 12-electron singlet
molecules, you need to either get the extra files from the VB2000
authors or get the stand-alone version and then either copy the extra
MAP files into the GAMESS/vb2000/MAP directory or alter VB2000PATH to
point to the stand-alone VB2000 directory. In the latter case it will
then also get VBOLIB files from the stand-alone version.

Other changes you may need to make are:

1) If this is your first time to install both GAMESS and VB2000, you
also need to make appropriate changes for $SCR, $USERSCR and $GMSPATH in
rungms as specified in $GMSPATH/machines/readme.unix. You need to make
similar changes to runallvb. $USERSCR is where the PUNCH and similar files,
the VB2000 restart files *.V84, and the visualisation files finish up.
If you want the PUNCH file or similar files to finish in a different in
a different place, you have to edit gms-files.csh.

2) Change the VBPATH variable in comp if the VB2000 source files are
not in gamess/vb2000/SRC. However, they should be there and a way to
keep the sources synchronied with the sources for the stand-alone
version is suggested below for the "compvb' script'. 

3) Then compile the whole gamess source code. Compiling the VB2000
source code is now the default. If, however, you have already compiled
it without the VB2000 source code by changing the compall script, you
can just type the following commands in the main gamess directory: 

	./comp vb2000 
	./comp vb2gms

4) Again, linking in VB2000 is now the default. You can edit lked to
change that behaviour and set the version number you want for the
executable. Then link by typing "./lked". To just do the two compiles of
vb2000 and vb2gms, followed by a link, you can use the "compvb" script.
Check that it is using the VERNO that you want. This script can be
modified in several easy ways.  If you uncomment the "cp" lines, it will
copy the source files from the stand-alone VB2000 directory tree,
allowing you to maintain only one copy of the source files. This is
recommended if you want to alter the code and you can then ensure that
your alterations work in both the GAMESS version and the stand-alone
versions.

5) Test the GAMESS code as usual by running the tests in the tests
directory with the runall script. Then test VB2000 in the vb2000
directory below the gamess directory defined by $GMSPATH.  Edit
"runallvb" to refer to the correct version number and some directories.
Then use it for the tests of the VB version as described in section (7)
of the next section. 

6) You can find the VB2000 manual in the ./DOC sub-directory. The
utility "vbhelp" allows you to search the manual for details about a
particular directive. For example, if you type:-

vbhelp BRILLMASK

you will get details about the Brillmask command. Type "vbhelp -h" for
some more information. Note that you can run it from the $GMSPATH/vb2000
directory by typing "./vbhelp -h". For running it from elsewhere, edit
"vbhelp" to correct the "set doc" line near the top of the script and
put it somewhere on your path.

RUNNING VB2000/GAMESS.
----------------------

1) VB2000 is instigated in Gamess by the VBTYP=VB2000 command in the
$CONTRL block and the presence of the

 $VB2000
.. 
.. 
 $END 

block in the Gamess input file. The lines between $VB2000 and $END are
the normal vb2000 data. It must contain the usual #! command line. All
commands in that line are obeyed except for UNITS=BOHR (the coordinates
are taken from the Gamess run). The basis set is taken from the Gamess
run, but the basis set name must be present in order to select the
correct VBOLIB. However, if you are using a Gamess basis set that does
not have a VBOLIB, then use "GEN" as the basis set name in the #!
command line. Note that there are libraries that correspond to basis
sets that are not in the stand-alone VB2000, but can be run in
GAMESS/VB2000. The title must be present. The charge, multiplicity and
coordinates are taken from the Gamess run, but these lines are ignored
if present. All other VB2000 directives can appear.

You must run Gamess from rungms as this sets the variable GMSJOBNAME.
This ensures that the scratch files are correctly named $GMSJOBNAME.V80 
etc.

2) If you are running a RESTART job, you should make sure that the *.V84 
file is in the $SCR directory before running the job.

3) You can use symmetry with COORD=UNIQUE, COORD=ZMAT or COORD=HINT 
to give the data, but you must then switch it off with NOSYM=1 in 
$CONTRL. Do not use COORD=CART.

4) You must not use PK integrals (the default is not to use them) and 
not use DIRSCF=.TRUE. in $SCF (again not doing this is the default).
 
5) The memory can be set in two ways. First, you must set the normal
MWORDS or MEMORY commands in the $SYSTEM block. The VB2000 will use the
the memory still available after the early MO calculation by the GAMESS
code, or 6400000 whichever is largest. Secondly, there is a separate 
memory command for the VB2000 code as in the stand-alone version of
VB2000. If more memory is needed you can alter either the $SYSTEM block
or the $MEMORY command in the $VB2000 block. It uses which ever is
largest.

6) Either TRUDGE or NUMGRD can be used to optimize VB geometries, and NUMGRD 
can be also to evaluate harmonic frequencies. Some properties other than the 
dipole moment can also be evaluated. 

a) Geometry optimizations using RUNTYP=TRUDGE. You need $TRUDGE and 
maybe $TRURST data blocks. 
b) Geometry optimizations using RUNTYP=OPTIMIZE need NUMGRD=.TRUE.
c) Numerical frequencies using RUNTYP=HESSIAN need METHOD=FULLNUM in the 
$FORCE group.
d) The dipole moment is calculated in the Gamess code after exiting
from the VB code. More moments can be calculated in the GAMESS code with 
the $ELMOM group or field gradients can be calculated with the $ELFLDG 
group.

7) In the directory "$GMSPATH/vb0000", read the test.README file and
follow the instructions (repeated in part below for convenience) to run
the test files with "runallvb". 

Run the tests jobs with:-

./runallvb &

The results should be checked against the values in the input files,
which of course also appears near the top of the output. Remember to
delete the *.dat files in the directory defined by $USERSCR before
rerunning the tests. Note that the scratch files used by VB2000 in the
directory defined by $SCR are deleted by rungms. For some tests the
restart file $JOB.V84 needs to be copied back from $USERSCR to $SCR.
This is done in runallvb. For regular runs, you have to make sure this
is done. If you want to alter the behaviour of rungms in deleted VB2000
files in $SCR, you can edit rungms near the end. Search for the line
"Clean/Rescue any files created by the VB2000 plug-in".

You can check the results with the "checkvbtst" script which works
rather like $GMSPATH/tools/checktst/checktst for the regular tests. It
uses the files ./checktst/examvb??. Actually it works more like checktst
worked in earlier versions of GAMESS than the current checktst script.

Type:-

./checkvbtst

at the shell prompt and indicate at the first prompt that the output
*.log files are in $GMSPATH/vb2000 (since you are probably already in
that directory, you can just select the default "."). You can also
compare your results directly with the output *.log files in
$GMSPATH/vb2000/test_results.

Three of the tests, test the directives to give data files for
visualisation programs. There are several comments about these after the
brief information about each test in the test.README file and these will
add to the understanding of the visualisation directives gained from the
manual. 

8) Since July 2010, the GAMESS EXETYP=CHECK command in the $CONTRL block
has been extended to be more useful for VB2000 runs. The vb2000 routines
are in general entered twice from the GAMESS routines. The first time is
just to read the $VB2000 block. EXETYP=CHECK at this point prints the
header information and the name of each VB directive. It now also enters
the vb2000 code on the second occasion, going down sufficiently to give
useful information about the memory requirements, printing other useful
information up to that point. In some cases the information that is
output after the vb2000 code returns to the gamess routines seems
confusing and rather long, but it is exactly the same output that would
be obtained by just removing the VBTYP call in the $CONTRL group and the
$VB2000 group.

OTHER POINTS.
-------------

1) A note on unit numbers.

VB2000 uses the unit numbers 78 - 89. These could possibly clash with
some gamess unit numbers, but only if equation of motion coupled cluster
is used. Since this is for excited states, this use is unlikely.
 
2) There is one directive that can appear in the $VB2000 .. $END block that
is used only in the gamess version of VB2000. It defines the constraints
used in a TRUDGE optimization:-

 $TRUDGECONSTRAINTS
 n
 ab,cd
 etc.

n = no. of constraints. The following lines constrain variable b on line
a of the HINT geometry definition to be constrained to be equal to
variable d on line c. Example:-

Water (Test 08).

 $TRUDGE OPTMIZ=GEOMETRY NPAR=2
   IEX(1)=21,32 $END

Two variables are to be optimized - 21 (the first O-H bond (initially
1.00) - the first variable on the 2nd line) and 32 (the H-O-H angle 
(initially 100.0) - the second variable on the 3rd line), from the 
geometry data below.

O  8.0  LC 0.00 0.00  0.00 - O K
H  1.0  PCC 1.00 0.0 0.00 + O K I
H  1.0  PCC 1.00 100.0 0.00 + O K I

 $TRUDGECONSTRAINTS
 1
 31,21

This constrains the second O-H bond to be equal to the first O-H bond.

3) Gamess with VB2000 included will still run normal gamess jobs.
Similarly, Gamess with tinker as well as VB2000 included will run normal
gamess jobs, normal tinker jobs and VB2000 jobs. However VB energies can
not be used for the ab initio part of a tinker job - maybe in the
future.

4) A note on different systems

The current version has been tested by Mike Schmidt, the GAMESS
administrator, with the following targets -linux64, axp64, sun64, mac32,
hpux64 and ibm64. The VB2000 authors have also tested it for the linux32
target. There is no longer the earlier restriction in the compall script
to the linux64, linux32 and mac64 targets. All targets are allowed, but
you should take care with targets that have not been tested by Mike
Schmidt or the VB2000 authors.

Most testing over the years has been done on linux, which is well tested
for Gamess, most recently only on 64 bit machines. The TARGET=linux32
Gamess with vb2000 has been trialled with the g77 compiler (various
versions), and the gfortran compiler (versions 4.2, 4.3, 4.4 and 4.5)
which is highly recommended. We have also used several versions of the
Intel compilers such as the ifort (version 8, 10 and 11) compiler, and
the Portland compiler (version 7.1-2). We have had success with the g95
compiler (versions 0.90). The TARGET=linux64 Gamess with vb2000 has been
trialled with the gfortran compiler (versions 4.1.2, 4.3, 4.4, 4.6 and
4.7) and ifort version 11.1 and 12.1, and pgf77 versions 6.1-1, 8.0-5
and 10.6. GAMESS does not yet work with gfortran 4.8. We recommend
gfortran over g95, as does the Gamess team. Note that g95 is not
supported in the gamess "comp" script, but the g77 section can be
readily utilised for g95 as a new "case" section under TARGET=linux32.

It works fine in the cygwin environment. With g77, set SYSV = false in
compddi, and all should be fine. If you find problems, particularly with
other compilers, we suggest using the old style ddikick. We have
successfully used gfortran versions 4.3 and 4.4 and g95 version 0.91.

Earlier, we used the Itanium 64 bit machine using the linux-ia64 target
and the ifort compiler versions 10.1 and 11.0. We can no longer test on
these machines. 

Note that the stand-alone VB2000 does not work with 64 bit integers.

With the SGI Irix64 computers several years back, it worked fine. We
chose "sockets" to build ddi and then found we had to alter the
libraries at Gamess link time to use -lpthread, rather than the ones
included in lked. The compile flags as suggested in comp are fine (i.e
-i8 in particular).  However with the stand-alone VB2000, we had to
replace -i8 with -i4.  We can no longer test on this system, so we can
not be sure that this compiler will work with the latest versions of
Gamess and VB2000.

In all these tests we have used different blas libraries. The vb2000
modules do not seem to lead to any particular problems with blas
libraries different from Gamess on its own. If problems arise, fall back
to the blas module in Gamess, but seek local advice on your system for
the best blas libraries.

One error that can occur is a failure to converge the roots of the
initial guess in the Hartree-Fock calculation in GAMESS prior to
entering the VB code. The output may be something like:-

HUCKEL GUESS REQUIRES      3276 WORDS.
 EQLRAT HAS FAILED TO CONVERGE FOR ROOT    5
0*** EVVRSP PARAMETERS ***
 ***      N =        8 ***
 ***  NVECT =        8 ***
 ***   LENA =       36 ***
 ***     NV =       12 ***
 *** IORDER =        0 ***
 ***   IERR =        5 ***
 UNABLE TO DIAGONALIZE IN COPROJ

This can occur with the use of all compilers but the ifort compiler
seems to be more sensitive. It can usually be fixed by adding KDIAG=3 to
the GAMESS $SYSTEM group.

We welcome comments from users who can test the code on other systems.

