C 25 MAR 10 - DDK - EFHFDR,EFAIE,EFAIV2,UNPVXR,UNPTEI:
C                   FIX BUGS FOR MULTIPLE EFP2S  (AND MANY NEW COMMENTS)
C 14 OCT 09 - DDK - IMPLEMENT NEW EFP2/QM EXCHANGE REPULSION FORMULA,
C                   DELETE OLD CODE PAULIA,REPAUL,VSZERO,VSONE,VSTWO
C  1 MAY 09 - LVS - GATHER EFP FORCES AT FORCE POINTS
C  1 MAY 09 - NMT - NEW DIMENSION FOR EFPBAS
C 15 DEC 08 - DGF - PAD PRPOPT
C 23 OCT 08 - LVS - DISPERSION DAMPING, OVERLAP ELECTROSTATICS DAMPING
C  7 DEC 07 - LVS - TFSQP: FIX ITSELF, AS WELL AS ITS PARALLEL USAGE
C 20 AUG 07 - DDK,LVS - FIX PARALLEL MD BUG, CLEAN UP MD
C 24 MAR 07 - DDK - FIX 7-SEP-06 BUGS, MORE OPEN SHELL EFP WORK
C  7 SEP 06 - DDK - INCLUDE SOME OPEN SHELL EFP WORK
C 17 JAN 06 - HL  - SWITCHING FUNCTIONS FOR MD, FIX PBC BUGS
C 19 SEP 05 - DDK - EXREP,GEXREP: FIX SAB TEST LOOP'S INDEX ORDER
C  5 JUL 05 - MWS - SELECT NEW ATOM,BASIS,EFP,PCM,DAF DIMENSIONS
C 27 JUN 05 - HL  - PERIODIC BOUNDARY COND. FOR EFP
C 14 MAR 05 - HL  - SOUP UP EFP-EFP EX-REP, COMMON PAULIN BECOMES EFPBAS
C  7 MAR 05 - IA  - FIX COMMON BLOCK FRGINF
C 13 FEB 05 - MWS - PAD COMMON BLOCK NSHEL, ROOT, FRGINF
C  7 SEP 04 - MWS - PAD COMMON BLOCK INTFIL
C  9 DEC 03 - OQ  - SYNCH ARGUMENTS TO DIPDER
C  7 AUG 02 - JMS - DABPAU: CHANGES RELATED TO NEW SP GRADIENTS
C  7 AUG 02 - HT  - USE DYNAMIC MEMORY FOR PAULI REPULSION
C 17 APR 02 - PND - SMALL PRINTING CHANGE
C 24 JAN 02 - MWS - UPDATE CALL TO AOCPHF ROUTINE
C 20 FEB 01 - MWS - PAD PAULMO COMMON
C 26 OCT 00 - MWS - INTRODUCE MXAO PARAMETER
C 28 SEP 97 - MWS - CONVERT PARALLEL CALLS FROM TCGMSG TO DDI
C 24 JUN 97 - MWS - FZMAT: REMOVE UNUSED CALLING ARG TO AOCPHF
C 14 FEB 97 - JHJ - CORRECT TORQUE CONTRIBUTION TO GRADIENT
C 18 DEC 96 - JHJ - NEW MODULE TO COMPUTE EXCHANGE REPULSION ENERGY.
C
C*MODULE EFPAUL  *DECK SANDT
      SUBROUTINE SANDT(MODE,SMATCO,TMATCO,L1,L1CO,NATM,NATMCO,
     *                 NGAU,NSHL,EX,CS,CP,CD,CF,CG,
     *                 KSTART,KATOM,KTYPE,KNG,KLOC,KMIN,KMAX,
     *                 NGAUCO,NSHLCO,EXCO,CSCO,CPCO,CDCO,CFCO,CGCO,
     *                 KSTRCO,KATMCO,KTYPCO,KNGCO,KLOCCO,KMINCO,
     *                 KMAXCO,C,CCO)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL IANDJ,NORM,DOUBLE
C
      DIMENSION EX(NGAU),CS(NGAU),CP(NGAU),CD(NGAU),
     *          CF(NGAU),CG(NGAU),KSTART(NSHL),KATOM(NSHL),
     *          KTYPE(NSHL),KNG(NSHL),KLOC(NSHL),KMIN(NSHL),KMAX(NSHL),
     *          EXCO(NGAUCO),CSCO(NGAUCO),CPCO(NGAUCO),CDCO(NGAUCO),
     *          CFCO(NGAUCO),CGCO(NGAUCO),KSTRCO(NSHLCO),KATMCO(NSHLCO),
     *          KTYPCO(NSHLCO),KNGCO(NSHLCO),KLOCCO(NSHLCO),
     *          KMINCO(NSHLCO),KMAXCO(NSHLCO),SMATCO(L1CO,L1),
     *          C(3,NATM),CCO(3,NATMCO),TMATCO(L1CO,L1)
      DIMENSION DIJ(225),XIN(125),YIN(125),ZIN(125),FT(225),
     *          IX(35),IY(35),IZ(35),JX(35),JY(35),JZ(35),
     *          S(225),IJX(225),IJY(225),IJZ(225),TBLK(225)
C
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /SYMIND/ TOL,II,JJ,LIT,LJT,MINI,MINJ,MAXI,MAXJ,IANDJ
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00,
     *           SQRT3=1.73205080756888D+00,
     *           SQRT5=2.23606797749979D+00, SQRT7=2.64575131106459D+00,
     *           RLN10=2.30258D+00)
      PARAMETER (TWO=2.0D+00, PT5=ONE/TWO, THREE=3.0D+00, FIVE=5.0D+00)
      PARAMETER (SEVEN=7.0D+00, ANINE=9.0D+00, ELEVEN=11.0D+00)
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     *          3, 0, 0, 2, 2, 1, 0, 1, 0, 1,
     *          4, 0, 0, 3, 3, 1, 0, 1, 0, 2,
     *          2, 0, 2, 1, 1/
      DATA IX / 1, 6, 1, 1,11, 1, 1, 6, 6, 1,
     *         16, 1, 1,11,11, 6, 1, 6, 1, 6,
     *         21, 1, 1,16,16, 6, 1, 6, 1,11,
     *         11, 1,11, 6, 6/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     *          0, 3, 0, 1, 0, 2, 2, 0, 1, 1,
     *          0, 4, 0, 1, 0, 3, 3, 0, 1, 2,
     *          0, 2, 1, 2, 1/
      DATA IY / 1, 1, 6, 1, 1,11, 1, 6, 1, 6,
     *          1,16, 1, 6, 1,11,11, 1, 6, 6,
     *          1,21, 1, 6, 1,16,16, 1, 6,11,
     *          1,11, 6,11, 6/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     *          0, 0, 3, 0, 1, 0, 1, 2, 2, 1,
     *          0, 0, 4, 0, 1, 0, 1, 3, 3, 0,
     *          2, 2, 1, 1, 2/
      DATA IZ / 1, 1, 1, 6, 1, 1,11, 1, 6, 6,
     *          1, 1,16, 1, 6, 1, 6,11,11, 6,
     *          1, 1,21, 1, 6, 1, 6,16,16, 1,
     *         11,11, 6, 6,11/
C
C     ----- CALCULATE OVERLAP INTEGRALS -----
C     MODE=0 - SYMMETRIC OVERLAP MATRIX FOR ONE BASIS SET, USING
C              THE DATA IN NSHL,EX,...  ALL OF THE CALLING
C              ARGUMENTS NAMED *CO ARE UNUSED IN THIS CASE.
C     MODE=1 - RECTANGULAR OVERLAP MATRIX BETWEEN TWO BASIS SETS.
C              ONLY INTER-BASIS OVERLAPS ARE COMPUTED, FOR THE
C              TWO BASES GIVEN BY NSHL,EX,... AND NSHLCO,EXCO,...
C
      TOL = RLN10*ITOL
      NORM = NORMF.NE.1 .OR. NORMP.NE.1
      CSI = ZERO
      CPI = ZERO
      CDI = ZERO
      CFI = ZERO
      CGI = ZERO
      CSJ = ZERO
      CPJ = ZERO
      CDJ = ZERO
      CFJ = ZERO
      CGJ = ZERO
      CALL VCLR(SMATCO,1,L1CO*L1)
      CALL VCLR(TMATCO,1,L1CO*L1)
C
C     ----- I SHELL
C
      IF(MODE.EQ.0) THEN
         IIMAX = NSHL
      ELSE
         IIMAX = NSHLCO
      END IF
C
      DO 720 II = 1,IIMAX
         IF(MODE.EQ.0) THEN
            I = KATOM(II)
            XI = C(1,I)
            YI = C(2,I)
            ZI = C(3,I)
            I1 = KSTART(II)
            I2 = I1+KNG(II)-1
            LIT = KTYPE(II)
            MINI = KMIN(II)
            MAXI = KMAX(II)
            LOCI = KLOC(II)-MINI
         ELSE
            I = KATMCO(II)
            XI = CCO(1,I)
            YI = CCO(2,I)
            ZI = CCO(3,I)
            I1 = KSTRCO(II)
            I2 = I1+KNGCO(II)-1
            LIT = KTYPCO(II)
            MINI = KMINCO(II)
            MAXI = KMAXCO(II)
            LOCI = KLOCCO(II)-MINI
         END IF
C
C     ----- J SHELL
C
         IF(MODE.EQ.0) THEN
            JJMAX = II
         ELSE
            JJMAX = NSHL
         END IF
C
         DO 700 JJ = 1,JJMAX
            J = KATOM(JJ)
            XJ = C(1,J)
            YJ = C(2,J)
            ZJ = C(3,J)
            J1 = KSTART(JJ)
            J2 = J1+KNG(JJ)-1
            LJT = KTYPE(JJ)
            MINJ = KMIN(JJ)
            MAXJ = KMAX(JJ)
            LOCJ = KLOC(JJ)-MINJ
            NROOTS = (LIT+LJT-2)/2+1
            RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
            IF(MODE.EQ.0) THEN
               IANDJ = II.EQ.JJ
            ELSE
               IANDJ = .FALSE.
            END IF
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
            IJ = 0
            MAX = MAXJ
            DO 160 I = MINI,MAXI
               NX = IX(I)
               NY = IY(I)
               NZ = IZ(I)
               IF (IANDJ) MAX = I
               DO 140 J = MINJ,MAX
                  IJ = IJ+1
                  IJX(IJ) = NX+JX(J)
                  IJY(IJ) = NY+JY(J)
                  IJZ(IJ) = NZ+JZ(J)
                  IF (J.LE.1) FT(IJ) = THREE
                  IF ((J.GT.1).AND.(J.LE.4)) FT(IJ) = FIVE
                  IF ((J.GT.4).AND.(J.LE.10)) FT(IJ) = SEVEN
                  IF ((J.GT.10).AND.(J.LE.20)) FT(IJ) = ANINE
                  IF (J.GT.20) FT(IJ) = ELEVEN
  140          CONTINUE
  160       CONTINUE
            DO 180 I = 1,IJ
               S(I) = ZERO
               TBLK(I) = ZERO
  180       CONTINUE
C
C     ----- I PRIMITIVE
C
            JGMAX = J2
            DO 520 IG = I1,I2
               IF(MODE.EQ.0) THEN
                  IF(LIT.LE.2) CSI = CS(IG)
                  IF(LIT.LE.2) CPI = CP(IG)
                  IF(LIT.EQ.3) CDI = CD(IG)
                  IF(LIT.EQ.4) CFI = CF(IG)
                  IF(LIT.EQ.5) CGI = CG(IG)
                  AI = EX(IG)
               ELSE
                  IF(LIT.LE.2) CSI = CSCO(IG)
                  IF(LIT.LE.2) CPI = CPCO(IG)
                  IF(LIT.EQ.3) CDI = CDCO(IG)
                  IF(LIT.EQ.4) CFI = CFCO(IG)
                  IF(LIT.EQ.5) CGI = CGCO(IG)
                  AI = EXCO(IG)
               END IF
               ARRI = AI*RR
               AXI = AI*XI
               AYI = AI*YI
               AZI = AI*ZI
C
C     ----- J PRIMITIVE
C
               IF (IANDJ) JGMAX = IG
               DO 500 JG = J1,JGMAX
                  AJ = EX(JG)
                  AA = AI+AJ
                  AA1 = ONE/AA
                  DUM = AJ*ARRI*AA1
                  IF (DUM .GT. TOL) GO TO 500
                  FAC = EXP(-DUM)
                  IF(LJT.LE.2) CSJ = CS(JG)
                  IF(LJT.LE.2) CPJ = CP(JG)
                  IF(LJT.EQ.3) CDJ = CD(JG)
                  IF(LJT.EQ.4) CFJ = CF(JG)
                  IF(LJT.EQ.5) CGJ = CG(JG)
                  AX = (AXI+AJ*XJ)*AA1
                  AY = (AYI+AJ*YJ)*AA1
                  AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
                  DOUBLE=IANDJ.AND.IG.NE.JG
                  MAX = MAXJ
                  NN = 0
                  DUM1 = ZERO
                  DUM2 = ZERO
                  DO 220 I = MINI,MAXI
                     IF (I.EQ.1) DUM1=CSI*FAC
                     IF (I.EQ.2) DUM1=CPI*FAC
                     IF (I.EQ.5) DUM1=CDI*FAC
                     IF ((I.EQ.8).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.11) DUM1=CFI*FAC
                     IF ((I.EQ.14).AND.NORM) DUM1=DUM1*SQRT5
                     IF ((I.EQ.20).AND.NORM) DUM1=DUM1*SQRT3
                     IF (I.EQ.21) DUM1=CGI*FAC
                     IF ((I.EQ.24).AND.NORM) DUM1=DUM1*SQRT7
                     IF ((I.EQ.30).AND.NORM) DUM1=DUM1*SQRT5/SQRT3
                     IF ((I.EQ.33).AND.NORM) DUM1=DUM1*SQRT3
                     IF (IANDJ) MAX = I
                     DO 200 J = MINJ,MAX
                        IF (J.EQ.1) THEN
                           DUM2=DUM1*CSJ
                           IF (DOUBLE) THEN
                              IF (I.LE.1) THEN
                                 DUM2=DUM2+DUM2
                              ELSE
                                 DUM2=DUM2+CSI*CPJ*FAC
                              END IF
                           END IF
                        ELSE IF (J.EQ.2) THEN
                           DUM2=DUM1*CPJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF (J.EQ.5) THEN
                           DUM2=DUM1*CDJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.8).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.11) THEN
                           DUM2=DUM1*CFJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.14).AND.NORM) THEN
                           DUM2=DUM2*SQRT5
                        ELSE IF ((J.EQ.20).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        ELSE IF (J.EQ.21) THEN
                           DUM2=DUM1*CGJ
                           IF (DOUBLE) DUM2=DUM2+DUM2
                        ELSE IF ((J.EQ.24).AND.NORM) THEN
                           DUM2=DUM2*SQRT7
                        ELSE IF ((J.EQ.30).AND.NORM) THEN
                           DUM2=DUM2*SQRT5/SQRT3
                        ELSE IF ((J.EQ.33).AND.NORM) THEN
                           DUM2=DUM2*SQRT3
                        END IF
                        NN = NN+1
                        DIJ(NN) = DUM2
  200                CONTINUE
  220             CONTINUE
C
C      ----- DO OVERLAP INTEGRAL -----
C
                  T = SQRT(AA1)
                  T1 = -TWO*AJ*AJ*T
                  T2 = -PT5*T
                  X0 = AX
                  Y0 = AY
                  Z0 = AZ
                  IN = -5
                  DO 320 I = 1,LIT
                     IN = IN+5
                     NI = I
                     DO 300 J = 1,LJT
                        JN = IN+J
                        NJ = J
                        CALL STVINT
                        XIN(JN) = XINT*T
                        YIN(JN) = YINT*T
                        ZIN(JN) = ZINT*T
                        NJ = J+2
                        CALL STVINT
                        XIN(JN+25) = XINT*T1
                        YIN(JN+25) = YINT*T1
                        ZIN(JN+25) = ZINT*T1
                        NJ = J-2
                        IF (NJ .GT. 0) THEN
                           CALL STVINT
                        ELSE
                           XINT = ZERO
                           YINT = ZERO
                           ZINT = ZERO
                        END IF
                        N = (J-1)*(J-2)
                        DUM = N * T2
                        XIN(JN+50) = XINT*DUM
                        YIN(JN+50) = YINT*DUM
                        ZIN(JN+50) = ZINT*DUM
  300                CONTINUE
  320             CONTINUE
                  DO 340 I = 1,IJ
                     NX = IJX(I)
                     NY = IJY(I)
                     NZ = IJZ(I)
                     DUM = XIN(NX)*YIN(NY)*ZIN(NZ)
                     DUM1 = (XIN(NX+25)+XIN(NX+50))*YIN(NY)*ZIN(NZ)+
     *                      (YIN(NY+25)+YIN(NY+50))*XIN(NX)*ZIN(NZ)+
     *                      (ZIN(NZ+25)+ZIN(NZ+50))*XIN(NX)*YIN(NY)
                     S(I) = S(I)+DIJ(I)*DUM
                     TBLK(I) = TBLK(I) + DIJ(I)*(DUM*AJ*FT(I)+DUM1)
  340             CONTINUE
C
C     ----- END PRIMITIVES -----
C
  500          CONTINUE
  520       CONTINUE
C
C     ----- STORE THE OVERLAPS FOR THESE SHELLS -----
C
            MAX = MAXJ
            NN = 0
            DO 620 I = MINI,MAXI
               LI = LOCI+I
               IN = (LI*LI-LI)/2
               IF (IANDJ) MAX = I
               DO 600 J = MINJ,MAX
                  NN = NN+1
                  IF(MODE.EQ.0) THEN
                     JN = IN+LOCJ+J
C                    SMAT(JN) = S(NN)
                  ELSE
                     LJ = LOCJ + J
                     SMATCO(LI,LJ) = S(NN)
                     TMATCO(LI,LJ) = TBLK(NN)
                  END IF
  600          CONTINUE
  620       CONTINUE
C
C     ----- END SHELLS -----
C
  700    CONTINUE
  720 CONTINUE
      RETURN
      END
C*MODULE EFPAUL  *DECK TFSQP
      SUBROUTINE TFSQP(H,F,T1,T2,WRK,N1,N2,M1,M2,MD1,MD2,ASKPARR)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION H(MD1,MD2),F(N1,N2),T1(N1,M1),T2(N2,M2),WRK(N2)
C
      LOGICAL GOPARR,DSKWRK,MASWRK,NXT,PARR
      LOGICAL ASKPARR
C
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      PARAMETER (MXSEQ=150, MXROWS=5)
C
C     ----- TRANSFORM THE RECTANGULAR MATRIX F
C           USING TWO DIFFERENT SETS OF VECTORS T1 AND T2 -----
C                      H = T1-DAGGER * F * T2
C     THE ORDER OF THE MATRICES MAY BE FOUND IN THE DIMENSION STATEMENT.
C     IT IS CLEAR THAT T1-DAGGER * F * T2 IS A MATRIX OF SHAPE H(M1,M2),
C     WITH MD1 AND MD2 DEFINING THE ACTUAL STORAGE SHAPE OF -H-.
C
C     THIS MAY BE CALLED IN SERIAL (ASKPARR=.F.) OR PARALLEL, AS THE
C     SITUATION DICTATES.  IF THE CALLING PROGRAM HAS A LOOP THAT
C     IS ALREADY RUNNING IN PARALLEL, RUN THIS ROUTINE IN SERIAL MODE!
C
C     ----- INITIALIZATION FOR PARALLEL WORK -----
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
      IF (ASKPARR) THEN
         PARR = GOPARR  .AND.  N2.GT.MXSEQ
      ELSE
         PARR = .FALSE.
      END IF
      IF(PARR) CALL VCLR(H,1,MD1*MD2)
C
      DO 310 I = 1,M1,MXROWS
         IIMAX = MIN(M1,I+MXROWS-1)
C
C     ----- GO PARALLEL! -----
C     TO DECREASE NEXT VALUE OVERHEAD, WE DO -MXROWS- AT A TIME
C
         IF(PARR) THEN
            IF (NXT) THEN
               MINE = MINE + 1
               IF (MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
               IF (NEXT.NE.MINE) GO TO 310
            ELSE
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 310
            END IF
         END IF
C
         DO 300 II=I,IIMAX
            DO 100 L=1,N2
               WRK(L) = DDOT(N1,T1(1,II),1,F(1,L),1)
  100       CONTINUE
            DO 200 J=1,M2
               H(II,J) = DDOT(N2,WRK,1,T2(1,J),1)
  200       CONTINUE
  300    CONTINUE
  310 CONTINUE
C
      IF(PARR) THEN
         CALL DDI_GSUMF(515,H,MD1*MD2)
         IF(NXT) CALL DDI_DLBRESET
      END IF
C
      RETURN
      END
C
C*MODULE EFPAUL  *DECK DVSZIP
      SUBROUTINE DVSZIP(SIJ,CA,CB,EF3,NORBA,NORBB,MXMOA,MXMOB,IC1,IC2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TWO=2.0D+00, TM6=1.0D-06, PI=3.1415927D+00)
C
      DIMENSION SIJ(MXMOA,MXMOB), CA(3,NORBA), CB(3,NORBB)
      DIMENSION EF3(3,*)
C
      DO I = 1,NORBA
         DO J = 1,NORBB
            X = CA(1,I) - CB(1,J)
            Y = CA(2,I) - CB(2,J)
            Z = CA(3,I) - CB(3,J)
            RIJ = SQRT(X*X + Y*Y + Z*Z)
            R3 = RIJ*RIJ*RIJ
            IF(ABS(SIJ(I,J)) .LE. TM6)  GO TO 500
            A = TWO*SQRT(-TWO*LOG(ABS(SIJ(I,J)))/PI)
            B = TWO*A*SIJ(I,J)*SIJ(I,J)/R3
            IF (IC2.GT.0) THEN
               EF3(1,IC2+I) = EF3(1,IC2+I) + B*X
               EF3(2,IC2+I) = EF3(2,IC2+I) + B*Y
               EF3(3,IC2+I) = EF3(3,IC2+I) + B*Z
            END IF
            EF3(1,IC1+J) = EF3(1,IC1+J) - B*X
            EF3(2,IC1+J) = EF3(2,IC1+J) - B*Y
            EF3(3,IC1+J) = EF3(3,IC1+J) - B*Z
  500    END DO
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK DVSTWO
      SUBROUTINE DVSTWO(SIJ,CA,CB,CLMOA,CLMOB,ZA,ZB,EF3,NORBA,NORBB,
     *                 NATA,NATB,MXMOA,MXMOB,IC1,IC2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TWO=2.0D+00, FOUR=4.0D+00)
C
      DIMENSION SIJ(MXMOA,MXMOB), CA(3,NATA), CB(3,NATB)
      DIMENSION CLMOA(3,NORBA), CLMOB(3,NORBB), ZA(NATA), ZB(NATB)
      DIMENSION EF3(3,*)
C
      DO I = 1,NORBA
         XI = CLMOA(1,I)
         YI = CLMOA(2,I)
         ZI = CLMOA(3,I)
         DO J = 1,NORBB
            XJ = CLMOB(1,J)
            YJ = CLMOB(2,J)
            ZJ = CLMOB(3,J)
            S2 = TWO*SIJ(I,J)*SIJ(I,J)
            IF (IC2.EQ.0) GO TO 100
            DO JJ = 1,NATB
               XJJ = XI - CB(1,JJ)
               YJJ = YI - CB(2,JJ)
               ZJJ = ZI - CB(3,JJ)
               RIJJ = SQRT(XJJ*XJJ + YJJ*YJJ + ZJJ*ZJJ)
               R3 = RIJJ*RIJJ*RIJJ
               EF3(1,IC2+I) = EF3(1,IC2+I) + S2*ZB(JJ)*XJJ/R3
               EF3(2,IC2+I) = EF3(2,IC2+I) + S2*ZB(JJ)*YJJ/R3
               EF3(3,IC2+I) = EF3(3,IC2+I) + S2*ZB(JJ)*ZJJ/R3
            END DO
            DO L = 1,NORBB
               XL = XI - CLMOB(1,L)
               YL = YI - CLMOB(2,L)
               ZL = ZI - CLMOB(3,L)
               RIL = SQRT(XL*XL + YL*YL + ZL*ZL)
               R3 = RIL*RIL*RIL
               EF3(1,IC2+I) = EF3(1,IC2+I) - S2*TWO*XL/R3
               EF3(2,IC2+I) = EF3(2,IC2+I) - S2*TWO*YL/R3
               EF3(3,IC2+I) = EF3(3,IC2+I) - S2*TWO*ZL/R3
            END DO
  100       CONTINUE
            DO II = 1,NATA
               XII = XJ - CA(1,II)
               YII = YJ - CA(2,II)
               ZII = ZJ - CA(3,II)
               RJII = SQRT(XII*XII + YII*YII + ZII*ZII)
               R3 = RJII*RJII*RJII
               EF3(1,IC1+J) = EF3(1,IC1+J) + S2*ZA(II)*XII/R3
               EF3(2,IC1+J) = EF3(2,IC1+J) + S2*ZA(II)*YII/R3
               EF3(3,IC1+J) = EF3(3,IC1+J) + S2*ZA(II)*ZII/R3
            END DO
            DO K = 1,NORBA
               XK = XJ - CLMOA(1,K)
               YK = YJ - CLMOA(2,K)
               ZK = ZJ - CLMOA(3,K)
               RKJ = SQRT(XK*XK + YK*YK + ZK*ZK)
               R3 = RKJ*RKJ*RKJ
               EF3(1,IC1+J) = EF3(1,IC1+J) - S2*TWO*XK/R3
               EF3(2,IC1+J) = EF3(2,IC1+J) - S2*TWO*YK/R3
               EF3(3,IC1+J) = EF3(3,IC1+J) - S2*TWO*ZK/R3
C
            END DO
            X = XI - XJ
            Y = YI - YJ
            Z = ZI - ZJ
            RIJ = SQRT(X*X + Y*Y + Z*Z)
            R3 = RIJ*RIJ*RIJ
            IF (IC2.GT.0) THEN
             DO K = 1,NORBA
               EF3(1,IC2+I) = EF3(1,IC2+I)-FOUR*SIJ(K,J)*SIJ(K,J)*X/R3
               EF3(2,IC2+I) = EF3(2,IC2+I)-FOUR*SIJ(K,J)*SIJ(K,J)*Y/R3
               EF3(3,IC2+I) = EF3(3,IC2+I)-FOUR*SIJ(K,J)*SIJ(K,J)*Z/R3
             END DO
            END IF
            DO L = 1,NORBB
               EF3(1,IC1+J) = EF3(1,IC1+J)+FOUR*SIJ(I,L)*SIJ(I,L)*X/R3
               EF3(2,IC1+J) = EF3(2,IC1+J)+FOUR*SIJ(I,L)*SIJ(I,L)*Y/R3
               EF3(3,IC1+J) = EF3(3,IC1+J)+FOUR*SIJ(I,L)*SIJ(I,L)*Z/R3
            END DO
            IF (IC2.GT.0) THEN
               EF3(1,IC2+I) = EF3(1,IC2+I) + S2*X/R3
               EF3(2,IC2+I) = EF3(2,IC2+I) + S2*Y/R3
               EF3(3,IC2+I) = EF3(3,IC2+I) + S2*Z/R3
            END IF
            EF3(1,IC1+J) = EF3(1,IC1+J) - S2*X/R3
            EF3(2,IC1+J) = EF3(2,IC1+J) - S2*Y/R3
            EF3(3,IC1+J) = EF3(3,IC1+J) - S2*Z/R3
         END DO
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK DSANDT
      SUBROUTINE DSANDT(DE,EPS,EPT,L1,L1CO,NATM,NATMCO,
     *                 NGAU,NSHL,EX,CS,CP,CD,CF,CG,
     *                 KSTART,KATOM,KTYPE,KNG,KLOC,KMIN,KMAX,
     *                 NGAUCO,NSHLCO,EXCO,CSCO,CPCO,CDCO,CFCO,CGCO,
     *                 KSTRCO,KATMCO,KTYPCO,KNGCO,KLOCCO,KMINCO,
     *                 KMAXCO,C,CCO,IC3,IC4,NAT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL NORM
      LOGICAL DBG,OUT
      LOGICAL GOPARR,DSKWRK,MASWRK,NXT
C
      PARAMETER (MXATM=2000)
C
      DIMENSION EX(NGAU),CS(NGAU),CP(NGAU),CD(NGAU),
     *          CF(NGAU),CG(NGAU),KSTART(NSHL),KATOM(NSHL),
     *          KTYPE(NSHL),KNG(NSHL),KLOC(NSHL),KMIN(NSHL),KMAX(NSHL),
     *          EXCO(NGAUCO),CSCO(NGAUCO),CPCO(NGAUCO),CDCO(NGAUCO),
     *          CFCO(NGAUCO),CGCO(NGAUCO),KSTRCO(NSHLCO),KATMCO(NSHLCO),
     *          KTYPCO(NSHLCO),KNGCO(NSHLCO),KLOCCO(NSHLCO),
     *          KMINCO(NSHLCO),KMAXCO(NSHLCO),EPS(L1CO,L1),
     *          C(3,NATM),CCO(3,NATMCO),EPT(L1CO,L1),DE(3,NAT)
      DIMENSION DIJ(225), IJX(35), IJY(35),IJZ(35), DIJ2(225),
     *           XS(6,7), YS(6,7), ZS(6,7),XT(6,5), YT(6,5), ZT(6,5),
     *          DXS(5,5),DYS(5,5),DZS(5,5),
     *          DXT(5,5), DYT(5,5), DZT(5,5)
C
      COMMON /DSTV  / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,
     *                XJ,YJ,ZJ,NI,NJ,CX,CY,CZ
      COMMON /GRAD  / ABDE(3,MXATM)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
C
      PARAMETER (SQRT3=1.73205080756888D+00)
      PARAMETER (SQRT5=2.23606797749979D+00, SQRT7=2.64575131106459D+00)
      PARAMETER (ONE=1.0D+00)
      PARAMETER (RLN10=2.30258D+00)
C
      DATA DEBUG/8HDEBUG   /, DBUGME/8HSDER    /, GRD1/8HGRD1    /
C
      DATA IJX / 1, 2, 1, 1, 3, 1, 1, 2, 2, 1,
     *           4, 1, 1, 3, 3, 2, 1, 2, 1, 2,
     *           5, 1, 1, 4, 4, 2, 1, 2, 1, 3,
     *           3, 1, 3, 2, 2/
      DATA IJY / 1, 1, 2, 1, 1, 3, 1, 2, 1, 2,
     *           1, 4, 1, 2, 1, 3, 3, 1, 2, 2,
     *           1, 5, 1, 2, 1, 4, 4, 1, 2, 3,
     *           1, 3, 2, 3, 2/
      DATA IJZ / 1, 1, 1, 2, 1, 1, 3, 1, 2, 2,
     *           1, 1, 4, 1, 2, 1, 2, 3, 3, 2,
     *           1, 1, 5, 1, 2, 1, 2, 4, 4, 1,
     *           3, 3, 2, 2, 3/
C
      DBG = (EXETYP.EQ.DEBUG  .OR.  EXETYP.EQ.DBUGME)  .AND.  MASWRK
      OUT = (EXETYP.EQ.DEBUG  .OR.  EXETYP.EQ.DBUGME  .OR.
     *       EXETYP.EQ.GRD1   .OR.  NPRINT.EQ.-3)
      IF(DBG) WRITE(IW,9000)
C
      TOL = RLN10*ITOL
      NORM = NORMF .NE. 1 .OR. NORMP .NE. 1
C
C     INITIALIZE PARALLEL
C
      NXT = IBTYP.EQ.1
      IPCOUNT = ME - 1
      NEXT = -1
      MINE = -1
C
      IF(DBG) THEN
         WRITE(IW,9010)
         CALL PRTRI(EPS,L1)
      END IF
C
C     ----- I SHELL
C
      DO 780 II = 1,NSHLCO
C
C           GO PARALLEL!
C
      IF(NXT .AND. GOPARR) THEN
         MINE = MINE + 1
         IF(MINE.GT.NEXT) CALL DDI_DLBNEXT(NEXT)
         IF(NEXT.NE.MINE) GO TO 780
      END IF
C
      IAT = KATMCO(II)
      XI = CCO(1,IAT)
      YI = CCO(2,IAT)
      ZI = CCO(3,IAT)
      I1 = KSTRCO(II)
      I2 = I1+KNGCO(II)-1
      LIT = KTYPCO(II)
      MINI = KMINCO(II)
      MAXI = KMAXCO(II)
      LOCI = KLOCCO(II)-MINI
      LITDER = LIT+1
C
C     ----- J SHELL
C
      DO 760 JJ = 1,NSHL
C
C           GO PARALLEL!
C
      IF((.NOT.NXT) .AND. GOPARR) THEN
         IPCOUNT = IPCOUNT + 1
         IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 760
      END IF
C
      JAT = KATOM(JJ)
      XJ = C(1,JAT)
      YJ = C(2,JAT)
      ZJ = C(3,JAT)
      J1 = KSTART(JJ)
      J2 = J1+KNG(JJ)-1
      LJT = KTYPE(JJ)
      MINJ = KMIN(JJ)
      MAXJ = KMAX(JJ)
      LOCJ = KLOC(JJ)-MINJ
      LJTMOD = LJT+2
      RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- I PRIMITIVE
C
      DO 640 IG = I1,I2
        AI = EXCO(IG)
        ARRI = AI*RR
        AXI = AI*XI
        AYI = AI*YI
        AZI = AI*ZI
        CSI=CSCO(IG)
        CPI=CPCO(IG)
        CDI=CDCO(IG)
        CFI=CFCO(IG)
        CGI=CGCO(IG)
C
C     ----- J PRIMITIVE
C
        DO 620 JG = J1,J2
          AJ = EX(JG)
          AA = AI+AJ
          AA1 = ONE/AA
          DUM = AJ*ARRI*AA1
          IF(DUM .GT. TOL) GO TO 620
          FAC = EXP(-DUM)
          CSJ = CS(JG)
          CPJ = CP(JG)
          CDJ = CD(JG)
          CFJ = CF(JG)
          CGJ = CG(JG)
          AX = (AXI+AJ*XJ)*AA1
          AY = (AYI+AJ*YJ)*AA1
          AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
          IJ = 0
          DO 580 I = MINI,MAXI
            IF(I.EQ.1) DUM1=CSI*FAC
            IF(I.EQ.2) DUM1=CPI*FAC
            IF(I.EQ.5) DUM1=CDI*FAC
            IF(I.EQ.8.AND.NORM) DUM1=DUM1*SQRT3
            IF(I.EQ.11) DUM1=CFI*FAC
            IF(I.EQ.14.AND.NORM) DUM1=DUM1*SQRT5
            IF(I.EQ.20.AND.NORM) DUM1=DUM1*SQRT3
            IF(I.EQ.21) DUM1=CGI*FAC
            IF(I.EQ.24.AND.NORM) DUM1=DUM1*SQRT7
            IF(I.EQ.30.AND.NORM) DUM1=DUM1*SQRT5/SQRT3
            IF(I.EQ.33.AND.NORM) DUM1=DUM1*SQRT3
            DO 570 J = MINJ,MAXJ
              IF(J.EQ.1) DUM2=DUM1*CSJ
              IF(J.EQ.2) DUM2=DUM1*CPJ
              IF(J.EQ.5) DUM2=DUM1*CDJ
              IF(J.EQ.8.AND.NORM) DUM2=DUM2*SQRT3
              IF(J.EQ.11) DUM2=DUM1*CFJ
              IF(J.EQ.14.AND.NORM) DUM2=DUM2*SQRT5
              IF(J.EQ.20.AND.NORM) DUM2=DUM2*SQRT3
              IF(J.EQ.21) DUM2=DUM1*CGJ
              IF(J.EQ.24.AND.NORM) DUM2=DUM2*SQRT7
              IF(J.EQ.30.AND.NORM) DUM2=DUM2*SQRT5/SQRT3
              IF(J.EQ.33.AND.NORM) DUM2=DUM2*SQRT3
              IJ=IJ+1
              DEN = EPS(LOCI+I,LOCJ+J)
              DIJ(IJ) = DUM2*DEN
C
              DEN2 = EPT(LOCI+I,LOCJ+J)
              DIJ2(IJ)=DUM2*DEN2
  570       CONTINUE
  580     CONTINUE
C
C     ----- OVERLAP
C
      T = SQRT(AA1)
      X0 = AX
      Y0 = AY
      Z0 = AZ
      DO 590 J = 1,LJTMOD
        NJ = J
        DO 590 I = 1,LITDER
          NI = I
          CALL VINT
          XS(I,J)=XINT*T
          YS(I,J)=YINT*T
          ZS(I,J)=ZINT*T
  590 CONTINUE
C
      CALL DTXYZ(XT,YT,ZT,XS,YS,ZS,LITDER,LJT,AJ)
      CALL DERI(DXS,DYS,DZS,XS,YS,ZS,LIT,LJT,AI)
      CALL DERI(DXT,DYT,DZT,XT,YT,ZT,LIT,LJT,AI)
C
      IJ=0
      DO 600 I=MINI,MAXI
        IX=IJX(I)
        IY=IJY(I)
        IZ=IJZ(I)
        DO 600 J=MINJ,MAXJ
          JX=IJX(J)
          JY=IJY(J)
          JZ=IJZ(J)
          DUMX=DXS(IX,JX)* YS(IY,JY)* ZS(IZ,JZ)
          DUMY= XS(IX,JX)*DYS(IY,JY)* ZS(IZ,JZ)
          DUMZ= XS(IX,JX)* YS(IY,JY)*DZS(IZ,JZ)
          DUMX2=DXT(IX,JX)* YS(IY,JY)* ZS(IZ,JZ)
     1         +DXS(IX,JX)* YT(IY,JY)* ZS(IZ,JZ)
     2         +DXS(IX,JX)* YS(IY,JY)* ZT(IZ,JZ)
          DUMY2= XT(IX,JX)*DYS(IY,JY)* ZS(IZ,JZ)
     1         + XS(IX,JX)*DYT(IY,JY)* ZS(IZ,JZ)
     2         + XS(IX,JX)*DYS(IY,JY)* ZT(IZ,JZ)
          DUMZ2= XT(IX,JX)* YS(IY,JY)*DZS(IZ,JZ)
     1         + XS(IX,JX)* YT(IY,JY)*DZS(IZ,JZ)
     2         + XS(IX,JX)* YS(IY,JY)*DZT(IZ,JZ)
C
          IJ=IJ+1
          IF (IC4.EQ.0) THEN
             ABDE(1,IAT)=ABDE(1,IAT)+(DUMX*DIJ(IJ)+DUMX2*DIJ2(IJ))
             ABDE(2,IAT)=ABDE(2,IAT)+(DUMY*DIJ(IJ)+DUMY2*DIJ2(IJ))
             ABDE(3,IAT)=ABDE(3,IAT)+(DUMZ*DIJ(IJ)+DUMZ2*DIJ2(IJ))
          ELSE
             DE(1,IC4+IAT)=DE(1,IC4+IAT)+(DUMX*DIJ(IJ)+DUMX2*DIJ2(IJ))
             DE(2,IC4+IAT)=DE(2,IC4+IAT)+(DUMY*DIJ(IJ)+DUMY2*DIJ2(IJ))
             DE(3,IC4+IAT)=DE(3,IC4+IAT)+(DUMZ*DIJ(IJ)+DUMZ2*DIJ2(IJ))
          END IF
          DE(1,IC3+JAT)=DE(1,IC3+JAT)-(DUMX*DIJ(IJ)+DUMX2*DIJ2(IJ))
          DE(2,IC3+JAT)=DE(2,IC3+JAT)-(DUMY*DIJ(IJ)+DUMY2*DIJ2(IJ))
          DE(3,IC3+JAT)=DE(3,IC3+JAT)-(DUMZ*DIJ(IJ)+DUMZ2*DIJ2(IJ))
  600 CONTINUE
C
  620 CONTINUE
  640 CONTINUE
C
C     ----- END OF PRIMITIVE LOOPS -----
C
      IF(DBG) THEN
         WRITE(IW,9100) II,JJ
         CALL EGOUT(DE,NAT)
      END IF
  760 CONTINUE
  780 CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
      IF(OUT) THEN
         IF(GOPARR) CALL DDI_GSUMF(1501,DE,3*NAT)
         IF(MASWRK) THEN
            WRITE(IW,9000)
            CALL EGOUT(DE,NAT)
         END IF
         IF(GOPARR) CALL DSCAL(3*NAT,ONE/NPROC,DE,1)
      END IF
C
      IF(GOPARR .AND. NXT) CALL DDI_DLBRESET
      RETURN
C
 9000 FORMAT(/10X,33(1H-)/10X,'GRADIENT INCLUDING DENSITY FORCES'/
     *        10X,33(1H-))
 9010 FORMAT(1X,'THE LAGRANGIAN IN THE AO BASIS IS')
 9100 FORMAT(1X,'SDER: SHELLS II,JJ=',2I5)
      END
C*MODULE EFPAUL  *DECK ODM
      SUBROUTINE ODM(EPS,EPT,SIJ,TIJ,VECA,VECB,CLMOA,CLMOB,FA,FB,
     *               FASQ,FBSQ,CA,CB,ZA,ZB,NORBA,NORBB,NATA,NATB,
     *               MXBFA,MXBFB,MXMOA,MXMOB,MXMO2A,MXMO2B)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,FOUR=4.0D+00)
      PARAMETER (TWO=2.0D+00, TM6=1.0D-06, PI=3.1415927D+00)
C
      DIMENSION EPS(MXBFA,MXBFB), EPT(MXBFA,MXBFB), SIJ(MXMOA,MXMOB)
      DIMENSION TIJ(MXMOA,MXMOB), VECA(MXBFA,NORBA), VECB(MXBFB,NORBB)
      DIMENSION CLMOA(3,NORBA), CLMOB(3,NORBB), FA(MXMO2A), FB(MXMO2B)
      DIMENSION FASQ(MXMOA,MXMOA), FBSQ(MXMOB,MXMOB), CA(3,NATA)
      DIMENSION CB(3,NATB), ZA(NATA), ZB(NATB)
C
      CALL VCLR(EPS,1,MXBFA*MXBFB)
      CALL VCLR(EPT,1,MXBFA*MXBFB)
      CALL CPYTSQ(FA,FASQ,MXMOA,1)
      CALL CPYTSQ(FB,FBSQ,MXMOB,1)
C
      DO MU = 1,MXBFA
         DO NU = 1,MXBFB
            DO I = 1,NORBA
               XI = CLMOA(1,I)
               YI = CLMOA(2,I)
               ZI = CLMOA(3,I)
               DO J = 1,NORBB
                  XJ = CLMOB(1,J)
                  YJ = CLMOB(2,J)
                  ZJ = CLMOB(3,J)
                  X = XI - XJ
                  Y = YI - YJ
                  Z = ZI - ZJ
C DE(V;S0)
                  RIJ = SQRT(X*X + Y*Y + Z*Z)
                  IF(ABS(SIJ(I,J)) .LE. TM6)  GO TO 100
                  A = FOUR*SQRT(-TWO*LOG(ABS(SIJ(I,J)))/PI)
                  B = SQRT( -TWO/(PI*LOG(ABS(SIJ(I,J)))) )
                  EPS(MU,NU) = EPS(MU,NU) - TWO*(A-B)*(SIJ(I,J)/RIJ)*
     *                         VECA(MU,I)*VECB(NU,J)
  100             CONTINUE
C DE(V;S1)
C
                  EPT(MU,NU) = EPT(MU,NU) + FOUR*SIJ(I,J)*VECA(MU,I)*
     *                                      VECB(NU,J)
C
                  SUMK = ZERO
                  DO K = 1,NORBA
                     EPS(MU,NU) = EPS(MU,NU) - TWO*SIJ(I,J)*FASQ(I,K)*
     *                                         VECA(MU,K)*VECB(NU,J)
                     SUMK = SUMK + FASQ(I,K)*SIJ(K,J)
                  END DO
                  SUML = ZERO
                  DO L = 1,NORBB
                     EPS(MU,NU) = EPS(MU,NU) - TWO*SIJ(I,J)*FBSQ(J,L)*
     *                                         VECA(MU,I)*VECB(NU,L)
                     SUML = SUML + FBSQ(J,L)*SIJ(I,L)
                  END DO
                  EPS(MU,NU) = EPS(MU,NU) -
     *                TWO*(SUMK+SUML-TWO*TIJ(I,J))*VECA(MU,I)*VECB(NU,J)
C DE(V;S2)
                  SUMJJ = ZERO
                  DO JJ = 1,NATB
                     XJJ = XI - CB(1,JJ)
                     YJJ = YI - CB(2,JJ)
                     ZJJ = ZI - CB(3,JJ)
                     RIJJ = SQRT(XJJ*XJJ + YJJ*YJJ + ZJJ*ZJJ)
                     SUMJJ = SUMJJ - ZB(JJ)/RIJJ
                  END DO
                  SUML = ZERO
                  DO L = 1,NORBB
                     XL = XI - CLMOB(1,L)
                     YL = YI - CLMOB(2,L)
                     ZL = ZI - CLMOB(3,L)
                     RIL = SQRT(XL*XL + YL*YL + ZL*ZL)
                     SUML = SUML + TWO/RIL
                  END DO
                  SUMII = ZERO
                  DO II = 1,NATA
                     XII = XJ - CA(1,II)
                     YII = YJ - CA(2,II)
                     ZII = ZJ - CA(3,II)
                     RJII = SQRT(XII*XII + YII*YII + ZII*ZII)
                     SUMII = SUMII - ZA(II)/RJII
                  END DO
                  SUMK = ZERO
                  DO K = 1,NORBA
                     XK = XJ - CLMOA(1,K)
                     YK = YJ - CLMOA(2,K)
                     ZK = ZJ - CLMOA(3,K)
                     RKJ = SQRT(XK*XK + YK*YK + ZK*ZK)
                     SUMK = SUMK + TWO/RKJ
                  END DO
                  EPS(MU,NU) = EPS(MU,NU) + FOUR*SIJ(I,J)*
     *                         (SUMJJ+SUML+SUMII+SUMK-ONE/RIJ)*
     *                         VECA(MU,I)*VECB(NU,J)
C         EPS(MU,NU) = EPS(MU,NU) + TWO*SIJ(I,J)*VECA(MU,I)*VECB(NU,J)
               END DO
            END DO
         END DO
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK DZADX
      SUBROUTINE DZADX(EF3,SIJ,CA,CB,CLMOA,CLMOB,ZA,ZB,NORBA,NORBB,
     *                 NATA,NATB,MXMOA,MXMOB,IC3,IC4,NFRGPT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TWO=2.0D+00)
      PARAMETER (MXATM=2000)
C
      COMMON /GRAD  / DE(3,MXATM)
C
      DIMENSION SIJ(MXMOA,MXMOB), CA(3,NATA), CB(3,NATB)
      DIMENSION CLMOA(3,NORBA), CLMOB(3,NORBB), ZA(NATA), ZB(NATB)
      DIMENSION EF3(3,NFRGPT)
C
      DO I = 1,NORBA
         XI = CLMOA(1,I)
         YI = CLMOA(2,I)
         ZI = CLMOA(3,I)
         DO J = 1,NORBB
            S2 = TWO*SIJ(I,J)*SIJ(I,J)
            XJ = CLMOB(1,J)
            YJ = CLMOB(2,J)
            ZJ = CLMOB(3,J)
            DO JJ = 1,NATB
               XJJ = XI - CB(1,JJ)
               YJJ = YI - CB(2,JJ)
               ZJJ = ZI - CB(3,JJ)
               RIJJ = SQRT(XJJ*XJJ + YJJ*YJJ + ZJJ*ZJJ)
               R3 = RIJJ*RIJJ*RIJJ
               EF3(1,IC3+JJ) = EF3(1,IC3+JJ) - S2*ZB(JJ)*XJJ/R3
               EF3(2,IC3+JJ) = EF3(2,IC3+JJ) - S2*ZB(JJ)*YJJ/R3
               EF3(3,IC3+JJ) = EF3(3,IC3+JJ) - S2*ZB(JJ)*ZJJ/R3
            END DO
            DO II = 1,NATA
               XII = XJ - CA(1,II)
               YII = YJ - CA(2,II)
               ZII = ZJ - CA(3,II)
               RJII = SQRT(XII*XII + YII*YII + ZII*ZII)
               R3 = RJII*RJII*RJII
               IF (IC4.EQ.0) THEN
                  DE(1,II) = DE(1,II) - S2*ZA(II)*XII/R3
                  DE(2,II) = DE(2,II) - S2*ZA(II)*YII/R3
                  DE(3,II) = DE(3,II) - S2*ZA(II)*ZII/R3
               ELSE
                  EF3(1,IC4+II) = EF3(1,IC4+II) - S2*ZA(II)*XII/R3
                  EF3(2,IC4+II) = EF3(2,IC4+II) - S2*ZA(II)*YII/R3
                  EF3(3,IC4+II) = EF3(3,IC4+II) - S2*ZA(II)*ZII/R3
               END IF
            END DO
         END DO
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK DPAULA
      SUBROUTINE DPAULA
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (MXFRG=1050, MXFGPT=12000, MXATM=2000, MXAO=8192,
     *           MXDFG=5, MXDPPT=MXFRG*MXDFG*12)
C
      COMMON /FMCOM / X(1)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /OPTLOC/ CVGLOC,MAXLOC,IPRTLO,ISYMLO,IFCORE,NOUTA,NOUTB,
     *                MOOUTA(MXAO),MOOUTB(MXAO)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
C
      IF(NTMO.EQ.0) RETURN
C
      NPRSAV = NPRINT
      NPRINT = -5
C
C    ALLOCATE MEMORY
C
      MXMO=0
      MXBF=0
      DO I = 1, NFRG
         MXMO=MAX(MXMO,NORB(I))
         MXBF=MAX(MXBF,NPBF(I))
      END DO
      MXMO2=(MXMO*MXMO+MXMO)/2
      L1 = NUM
      L2 = (L1*L1+L1)/2
      LNA2 = (NA*NA+NA)/2
      NLOC = NA-NOUTA
      NVIR = L1-NA
C
      CALL VALFM(LOADFM)
      LSMAT   = 1       + LOADFM
      LTMAT   = LSMAT   + L1*MXBF
      LEPS    = LTMAT   + L1*MXBF
      LEPT    = LEPS    + L1*MXBF
      LSIJ    = LEPT    + L1*MXBF
      LTIJ    = LSIJ    + NA*MXMO
      LWRK    = LTIJ    + NA*MXMO
      LVEC    = LWRK    + MXBF
      LARRAY  = LVEC    + L1*NA
      LFMO    = LARRAY  + L2
      LCCHG   = LFMO    + LNA2
      LFMOSQ  = LCCHG   + 3*NA
      LFMO2   = LFMOSQ  + NA*NA
      LARAY2  = LFMO2   + MXMO*MXMO
      LARAY3  = LARAY2  + L2
      LCMO    = LARAY3  + L2
      LTLOC   = LCMO    + L1*L1
      LSMJ    = LTLOC   + NA*NA
      LXMK    = LSMJ    + L1*MXMO
      LXMKVI  = LXMK    + L1*NA
      LTMJ    = LXMKVI  + NVIR*NA
      LXMI    = LTMJ    + L1*MXMO
      LYMI    = LXMI    + L1*NA
      LZMI    = LYMI    + L1*NA
      LZQQ    = LZMI    + L1*NA
      LPROVEC = LZQQ    + NA
      LFOCKMA = LPROVEC + MXBF*NTMO
      LAST    = LFOCKMA + MXMO2*NFRG
C
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      LENPV=MXBF*NTMO
      LENFM=MXMO2*NFRG
      IF (NFRG.GT.0.AND.NTMO.GT.0) THEN
         CALL DAREAD(IDAF,IODA,X(LPROVEC),LENPV,267,0)
         CALL DAREAD(IDAF,IODA,X(LFOCKMA),LENFM,268,0)
      END IF
C
      CALL DRPAUL(X(LSMAT),X(LTMAT),X(LEPS),X(LEPT),X(LSIJ),
     *           X(LTIJ),X(LWRK),X(LVEC),
     *           X(LARRAY),X(LFMO),X(LCCHG),X(LFMOSQ),X(LFMO2),
     *           X(LARAY2),X(LARAY3),X(LCMO),X(LTLOC),X(LSMJ),X(LXMK),
     *           X(LXMKVI),X(LTMJ),X(LXMI),X(LYMI),X(LZMI),X(LZQQ),
     *           L1,MXBF,NA,LNA2,MXMO,L2,NLOC,NVIR,
     *           X(LPROVEC),X(LFOCKMA),MXBF,MXMO2)
C
      CALL RETFM(NEED)
      NPRINT = NPRSAV
      RETURN
      END
C*MODULE EFPAUL  *DECK DRPAUL
      SUBROUTINE DRPAUL(SMAT,TMAT,EPS,EPT,SIJ,TIJ,WRK,VEC,ARRAY,FMO,
     *                  CCHG,FMOSQ,FMO2,ARRAY2,ARRAY3,CMO,TLOC,SMJ,XMK,
     *                  XMKVIR,TMJ,XMI,YMI,ZMI,ZQQ,L1,L1EF,LNA,LNA2,
     *                  NAEF,L2,NLOC,NVIR,PROVEC,FOCKMA,MXBF,MXMO2)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,
     *           MXGTOT=20000, MXSH=5000, MXATM=2000,
     *           MXSHEF=1000, MXGEFP=4000,
     *           MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00)
C
      COMMON /EFPBAS/ EXEF(MXGEFP,MXDFG),CSEF(MXGEFP,MXDFG),
     *                CPEF(MXGEFP,MXDFG),CDEF(MXGEFP,MXDFG),
     *                CFEF(MXGEFP,MXDFG),CGEF(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTREF(MXSHEF,MXDFG),KATMEF(MXSHEF,MXDFG),
     *                KTYPEF(MXSHEF,MXDFG),KNGEF(MXSHEF,MXDFG),
     *                KLOCEF(MXSHEF,MXDFG),KMINEF(MXSHEF,MXDFG),
     *                KMAXEF(MXSHEF,MXDFG),NSHLEF(MXDFG),NGSSEF(MXDFG),
     *                NATEF(MXDFG),NUMEF(MXDFG),NTPATM
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG)
     *                ,EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG)
     *                ,ATORQ(3,MXFRG)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
C
      DIMENSION SMAT(L1,L1EF), TMAT(L1,L1EF), SIJ(LNA,NAEF)
      DIMENSION TIJ(LNA,NAEF), WRK(L1EF), VEC(L1,LNA), ARRAY(L2)
      DIMENSION FMO(LNA2), CCHG(3,LNA), EPS(L1,L1EF), EPT(L1,L1EF)
      DIMENSION FMOSQ(LNA,LNA), FMO2(NAEF,NAEF), ARRAY2(L2), ARRAY3(L2)
      DIMENSION CMO(L1,L1),TLOC(LNA,LNA),SMJ(L1,NAEF),XMK(L1,LNA)
      DIMENSION XMKVIR(NVIR,LNA), TMJ(L1,NAEF), XMI(L1,LNA), YMI(L1,LNA)
      DIMENSION ZMI(L1,LNA), ZQQ(LNA)
      DIMENSION PROVEC(MXBF,NTMO), FOCKMA(MXMO2,NFRG)
C
      DATA DPAULI /8HDPAULI  /
C
C   GET BOYS LMOS
C
      CALL VCLR(ARRAY,1,L2)
      CALL VCLR(ARRAY2,1,L2)
      CALL VCLR(ARRAY3,1,L2)
      CALL VCLR(XMK,1,L1*LNA)
      CALL VCLR(XMKVIR,1,NVIR*LNA)
      CALL VCLR(ZQQ,1,LNA)
C
      CALL DAWRIT(IDAF,IODA,ARRAY,L2,78,0)
      CALL DAWRIT(IDAF,IODA,ARRAY2,L2,79,0)
C
      CALL DAREAD(IDAF,IODA,VEC,L1*LNA,71,0)
      CALL DAREAD(IDAF,IODA,CCHG,3*LNA,83,0)
      CALL DAREAD(IDAF,IODA,FMO,LNA2,82,0)
      CALL DAREAD(IDAF,IODA,CMO,L1*L1,15,0)
      CALL DAREAD(IDAF,IODA,TLOC,LNA*LNA,73,0)
      CALL DAREAD(IDAF,IODA,ARRAY,L2,95,0)
      CALL DAREAD(IDAF,IODA,ARRAY2,L2,96,0)
      CALL DAREAD(IDAF,IODA,ARRAY3,L2,97,0)
C
      CALL EXPMAT(TLOC,LNA,NLOC,LNA)
      NOUT = LNA-NLOC
      DO I = 1,LNA
         DO J = 1,LNA
            IF (I.LE.NOUT) TLOC(I,J) = ZERO
            IF (J.LE.NOUT) TLOC(I,J) = ZERO
         END DO
         IF(I.LE.NOUT) TLOC(I,I) = ONE
      END DO
C
      CALL TFTRAB(CMO,L1,ARRAY,VEC,LNA,XMI,WRK)
      CALL TFTRAB(CMO,L1,ARRAY2,VEC,LNA,YMI,WRK)
      CALL TFTRAB(CMO,L1,ARRAY3,VEC,LNA,ZMI,WRK)
      CALL VCLR(ARRAY,1,L2)
      CALL VCLR(ARRAY2,1,L2)
      CALL VCLR(ARRAY3,1,L2)
C
C  CALCULATE QM/MM PAULI REPULSION
C
      INAT = 1
      IMO = 1
      IC1 = NMTTPT + NPTTPT
      IC3 = IC1
      DO IM = 1,NFRG
         ID = ISET(IM)
         IC1 = IC1 + NATEF(ID)
         CALL SANDT(1,SMAT,TMAT,L1EF,L1,NATEF(ID),NAT,
     *              NGSSEF(ID),NSHLEF(ID),EXEF(1,ID),CSEF(1,ID),
     *              CPEF(1,ID),CDEF(1,ID),CFEF(1,ID),CGEF(1,ID),
     *              KSTREF(1,ID),KATMEF(1,ID),KTYPEF(1,ID),
     *              KNGEF(1,ID),KLOCEF(1,ID),KMINEF(1,ID),KMAXEF(1,ID),
     *              MXGTOT,NSHELL,EX,CS,CP,CD,CF,CG,KSTART,KATOM,KTYPE,
     *              KNG,KLOC,KMIN,KMAX,PRCORD(1,INAT),C)
         CALL VCLR(SIJ,1,LNA*NAEF)
         CALL VCLR(TIJ,1,LNA*NAEF)
         CALL VCLR(SMJ,1,L1*NAEF)
         CALL VCLR(TMJ,1,L1*NAEF)
         CALL TFSQP(SIJ,SMAT,VEC,PROVEC(1,IMO),WRK,L1,L1EF,LNA,NAEF,
     *              LNA,NAEF,.TRUE.)
         CALL TFSQP(TIJ,TMAT,VEC,PROVEC(1,IMO),WRK,L1,L1EF,LNA,NAEF,
     *              LNA,NAEF,.TRUE.)
         CALL TFSQP(SMJ,SMAT,CMO,PROVEC(1,IMO),WRK,L1,L1EF,L1,NAEF,
     *              L1,NAEF,.TRUE.)
         CALL TFSQP(TMJ,TMAT,CMO,PROVEC(1,IMO),WRK,L1,L1EF,L1,NAEF,
     *              L1,NAEF,.TRUE.)
C
C
C  DERIVATIVES WITH RESPECT TO CENTROID POINTS
C
C EEXCH(V;S0)
C
         CALL DVSZIP(SIJ,CCHG,CENTCD(1,IMO),DEF,
     *               LNA,NORB(IM),LNA,NAEF,IC1,0)
C
C EEXCH(V;S2)
C
         CALL DVSTWO(SIJ,C,PRCORD(1,INAT),CCHG,
     *              CENTCD(1,IMO),ZAN,EFZNUC(INAT),DEF,
     *              LNA,NORB(IM),NAT,NATEF(ID),LNA,NAEF,
     *              IC1,0)
C
C  DERIVATIVES WITH RESPECT TO NUCLEAR POINTS
C
C SET UP "OVERLAP DENSITY MATRICES"
C
         CALL ODM(EPS,EPT,SIJ,TIJ,VEC,PROVEC(1,IMO),
     *            CCHG,CENTCD(1,IMO),FMO,
     *            FOCKMA(1,IM),FMOSQ,FMO2,C,
     *            PRCORD(1,INAT),ZAN,EFZNUC(INAT),LNA,
     *            NORB(IM),NAT,NATEF(ID),L1,L1EF,LNA,NAEF,LNA2,
     *            MXMO2)
C
C  CALCULATE TORQUE
C
            CALL PTORQ(SMAT,TMAT,EPS,EPT,L1,L1EF,NSHELL,
     *                 KMIN,KMAX,KLOC,NSHLEF(ID),
     *                 KMINEF(1,ID),KMAXEF(1,ID),KLOCEF(1,ID),0,IM)
C
C CALCULATE OVERLAP AND KE DERIVATIVES
C
         CALL DSANDT(DEF,EPS,EPT,L1EF,L1,NATEF(ID),NAT,
     *              NGSSEF(ID),NSHLEF(ID),EXEF(1,ID),CSEF(1,ID),
     *              CPEF(1,ID),CDEF(1,ID),CFEF(1,ID),CGEF(1,ID),
     *              KSTREF(1,ID),KATMEF(1,ID),KTYPEF(1,ID),
     *              KNGEF(1,ID),KLOCEF(1,ID),KMINEF(1,ID),KMAXEF(1,ID),
     *              MXGTOT,NSHELL,EX,CS,CP,CD,CF,CG,KSTART,KATOM,KTYPE,
     *              KNG,KLOC,KMIN,KMAX,PRCORD(1,INAT),C,IC3,0,MXFGPT)
C
C CALCULATE REMANINING DERIVATIVE
C
         CALL DZADX(DEF,SIJ,C,PRCORD(1,INAT),
     *              CCHG,CENTCD(1,IMO),ZAN,
     *              EFZNUC(INAT),LNA,NORB(IM),NAT,NATEF(ID),
     *              LNA,NAEF,IC3,0,MXFGPT)
C
C AB INITIO CENTROIDS POINTS
C
         CALL ABCENT(ARRAY,ARRAY2,ARRAY3,SIJ,VEC,
     *               CCHG,CENTCD(1,IMO),PRCORD(1,INAT),
     *               EFZNUC(INAT),LNA,NORB(IM),NATEF(ID),L1,L2)
C
         CALL XIJ(XMK,SMJ,TMJ,SIJ,TIJ,XMI,YMI,ZMI,TLOC,
     *            CCHG,CENTCD(1,IMO),FMO,
     *            FOCKMA(1,IM),FMOSQ,FMO2,C,
     *            PRCORD(1,INAT),ZAN,EFZNUC(INAT),LNA,
     *            NORB(IM),NAT,NATEF(ID),L1,NAEF,LNA2,
     *            MXMO2)
C
         CALL FRMZQQ(ZQQ,SMJ,L1,LNA,NORB(IM),NAEF)
C
         IMO = IMO + NORB(IM)
         INAT = INAT + NATEF(ID)
         IC1 = IC1 + NORB(IM)
         IC3 = IC3 + NATEF(ID) + NORB(IM)
      END DO
C
      CALL FZMAT(XMK,XMKVIR,CMO,ZQQ,L1,L2,NVIR,LNA)
C
      CALL DIPDER(ARRAY,ARRAY2,ARRAY3,DUMMY,L2,DUMMY,0,0,0,DPAULI)
C
      RETURN
      END
C*MODULE EFPAUL  *DECK ABCENT
      SUBROUTINE ABCENT(Q1,Q2,Q3,SIJ,VECA,CLMOA,CLMOB,CB,ZB,
     *                  NORBA,NORBB,NATB,L1,L2)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      PARAMETER (TWO=2.0D+00, PI=3.1415927D+00)
      PARAMETER (TM6=1.0D-06, FOUR=4.0D+00)
C
      DIMENSION Q1(L2), Q2(L2), Q3(L2), SIJ(NORBA,NORBB), VECA(L1,NORBA)
      DIMENSION CLMOA(3,NORBA), CLMOB(3,NORBB), CB(3,NATB)
      DIMENSION ZB(NATB)
C
      MUNU = 0
      DO MU = 1,L1
         DO NU = 1,MU
            MUNU = MUNU + 1
            DO I = 1,NORBA
               XI = CLMOA(1,I)
               YI = CLMOA(2,I)
               ZI = CLMOA(3,I)
               DO J = 1,NORBB
                  XJ = CLMOB(1,J)
                  YJ = CLMOB(2,J)
                  ZJ = CLMOB(3,J)
                  X = XI - XJ
                  Y = YI - YJ
                  Z = ZI - ZJ
                  SVECMN = TWO*SIJ(I,J)*SIJ(I,J)*VECA(MU,I)*VECA(NU,I)
C DE(V;S0)
                  RIJ = SQRT(X*X + Y*Y + Z*Z)
                  R3 = RIJ*RIJ*RIJ
                  IF(ABS(SIJ(I,J)) .LE. TM6)  GO TO 100
                  A = TWO*SQRT(-TWO*LOG(ABS(SIJ(I,J)))/PI)
                  B = A*SVECMN/R3
                  Q1(MUNU) = Q1(MUNU) + B*X
                  Q2(MUNU) = Q2(MUNU) + B*Y
                  Q3(MUNU) = Q3(MUNU) + B*Z
  100             CONTINUE
C DE(V;S2)
                  DO K = 1,NORBA
                     A = FOUR*SIJ(K,J)*SIJ(K,J)*VECA(MU,I)*VECA(NU,I)/R3
                     Q1(MUNU) = Q1(MUNU) - X*A
                     Q2(MUNU) = Q2(MUNU) - Y*A
                     Q3(MUNU) = Q3(MUNU) - Z*A
                  END DO
                  A = SVECMN/R3
                  Q1(MUNU) = Q1(MUNU) + X*A
                  Q2(MUNU) = Q2(MUNU) + Y*A
                  Q3(MUNU) = Q3(MUNU) + Z*A
                  DO JJ = 1,NATB
                     XJJ = XI - CB(1,JJ)
                     YJJ = YI - CB(2,JJ)
                     ZJJ = ZI - CB(3,JJ)
                     RIJJ = SQRT(XJJ*XJJ + YJJ*YJJ + ZJJ*ZJJ)
                     R3 = RIJJ*RIJJ*RIJJ
                     Q1(MUNU) = Q1(MUNU) + SVECMN*ZB(JJ)*XJJ/R3
                     Q2(MUNU) = Q2(MUNU) + SVECMN*ZB(JJ)*YJJ/R3
                     Q3(MUNU) = Q3(MUNU) + SVECMN*ZB(JJ)*ZJJ/R3
                   END DO
                   DO L = 1,NORBB
                     XL = XI - CLMOB(1,L)
                     YL = YI - CLMOB(2,L)
                     ZL = ZI - CLMOB(3,L)
                     RIL = SQRT(XL*XL + YL*YL + ZL*ZL)
                     R3 = RIL*RIL*RIL
                     Q1(MUNU) = Q1(MUNU) - SVECMN*TWO*XL/R3
                     Q2(MUNU) = Q2(MUNU) - SVECMN*TWO*YL/R3
                     Q3(MUNU) = Q3(MUNU) - SVECMN*TWO*ZL/R3
                  END DO
               END DO
            END DO
         END DO
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK QMADD
      SUBROUTINE QMADD(D,Q,L2,NREC)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
C
      DIMENSION D(L2), Q(L2)
C
      CALL DAREAD(IDAF,IODA,Q,L2,NREC,0)
C
      CALL VADD(D,1,Q,1,D,1,L2)
C
      RETURN
      END
C*MODULE EFPAUL  *DECK DABPAU
      SUBROUTINE DABPAU(II,JJ,KK,LL,UHFTYP,DA,DB,DAB,DABMAX,Q4,POPLE)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION DA(*),DB(*),DAB(*)
      LOGICAL UHFTYP,POPLE
C
      PARAMETER (MXGTOT=20000, MXSH=5000, MXAO=8192)
C
      LOGICAL OUT,DBG
      COMMON /DSHLT / RTOL,DTOL,VTOL1,VTOL2,VTOLS,OUT,DBG
      COMMON /IJPAIR/ IA(MXAO)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      COMMON /INDD80/ IMAX,JMAX,KKMAX,LMAX
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /SHLLMN/ IGXYZ(4,35),JGXYZ(4,35),KGXYZ(4,35),LGXYZ(4,35)
      COMMON /SHLNRM/ PNRM(84)
      LOGICAL IIEQJJ,KKEQLL,IJEQKL,IJGTKL,IJLTKL
      COMMON /SHLEQU/ IIEQJJ,KKEQLL,IJEQKL,IJGTKL,IJLTKL
C
CJMS  LABELLED COMMON GSPG80 DEFINED FOR COMPUTATIONAL EFFICIENCY.
CJMS  FOR SP BASES ONLY, IT CONTAINS THE E ARRAY WHICH IS THE DAB
CJMS  ARRAY WITH INDICES IN REVERSE ORDER: E(I,J,K,L)= DAB(L,K,J,I)
CJMS  AND IS USED IN SUB JKDG80 (MODULE GRD2B). IT ORIGINATES IN:
CJMS
CJMS     1. SUBS DABCLU, DABDFT, DABGVB, DABMC, DABMP2 AND DABUMP
CJMS        (MODULE GRD2A) AND SUB DABPAU (MODULE EFPAUL) WHICH ARE
CJMS        ALL CALLED BY SUB JKDER (MODULE GRD2A)
CJMS
CJMS     2. SUB DABCLU (MODULE GRD2A) WHICH IS CALLED BY SUB EFDEN OF
CJMS        MODULE EFGRD2
CJMS
CJMS     3. SUB PAR2PDM (MODULE MP2DDI) WHICH IS CALLED BY SUB PJKDMP2
CJMS        OF MODULE MP2DDI
C
      COMMON /GSPG80/ E(4,4,4,4)
C
      PARAMETER (ZER=0.0D+00, PT5=0.5D+00, P25=.25D+00, F04=4.0D+00)
C
C     ----- THIS ROUTINE FORMS THE PRODUCT OF DENSITY       -----
C           MATRICES FOR USE IN FORMING THE TWO ELECTRON
C           GRADIENT.  VALID FOR CLOSED AND OPEN SHELL SCF.
C
      DABMAX= ZER
      MINI= KMIN(II)
      MINJ= KMIN(JJ)
      MINK= KMIN(KK)
      MINL= KMIN(LL)
      LOCI= KLOC(II)-MINI
      LOCJ= KLOC(JJ)-MINJ
      LOCK= KLOC(KK)-MINK
      LOCL= KLOC(LL)-MINL
      IF(POPLE) THEN
         DO 110 L=1,LMAX
            DO 110 K=1,KKMAX
               KAL= MAX0(LOCK+K,LOCL+L)
               KIL= MIN0(LOCK+K,LOCL+L)
               DO 110 J=1,JMAX
                  DO 110 I=1,IMAX
                     IAJ= MAX0(LOCI+I,LOCJ+J)
                     IIJ= MIN0(LOCI+I,LOCJ+J)
                     IN = IAJ
                     JN = IIJ
                     KN = KAL
                     LN = KIL
                     IF(IN.LT.KN .OR.(IN.EQ.KN .AND. JN.LT.LN)) THEN
                        IN = KAL
                        JN = KIL
                        KN = IAJ
                        LN = IIJ
                     ENDIF
C        -----  NOW CALCULATE DENSITY MATRIX CONTRIBUTION.      -----
C        -----  (IJ/KL),(IJ/IL),(IJ/JL),(IJ/KJ)                 -----
C        -----  EIGHT DISTINCT INTEGRALS                        -----
C        -----  CONTRIBUTION TO THE ENERGY                      -----
C        -----  4(IJ)(KL) - (IK)(JL) - (JK)(IL)                 -----
                     IJ = IA(IN)+JN
                     IK = IA(IN)+KN
                     IL = IA(IN)+LN
                     JK = IA(MAX0(JN,KN))+MIN0(JN,KN)
                     JL = IA(JN)+LN
                     IF(JN.LT.KN) JL = IA(MAX0(JN,LN))+MIN0(JN,LN)
                     KL = IA(KN)+LN
                     DF1= DA(IJ)*DA(KL)+
     2                    DA(IJ)*DB(KL)+DB(IJ)*DA(KL)
                     DQ1= DA(IK)*DA(JL)+DA(IL)*DA(JK)+
     2                    DA(IK)*DB(JL)+DA(IL)*DB(JK)+
     3                    DB(IK)*DA(JL)+DB(IL)*DA(JK)
                     IF(UHFTYP) DQ1=DQ1+DB(IK)*DB(JL)+DB(IL)*DB(JK)
                     DF1=(DF1-P25*DQ1)*Q4
                     IF(DABMAX.LT. ABS(DF1)) DABMAX= ABS(DF1)
                     E(I,J,K,L)= DF1
                     IF(OUT) WRITE(IW,9010) II,JJ,KK,LL,I,J,K,L,DF1
  110    CONTINUE
      ELSE
C
C D AND HIGHER FUNCTIONS OR HONDO ONLY RUNS
C
         MAXI= KMAX(II)
         MAXJ= KMAX(JJ)
         MAXK= KMAX(KK)
         MAXL= KMAX(LL)
         DO 210 I=MINI,MAXI
            P1I = PNRM(I)
            JMAX= MAXJ
            IF(IIEQJJ) JMAX= I
            DO 210 J=MINJ,JMAX
               P2J = P1I*PNRM(J)
               IAJ= MAX0(LOCI+I,LOCJ+J)
               IIJ= MIN0(LOCI+I,LOCJ+J)
               KMMAX=MAXK
               IF(IJEQKL) KMMAX= I
               DO 210 K=MINK,KMMAX
                  P3K = P2J*PNRM(K)
                  LMAX= MAXL
                  IF(KKEQLL) LMAX= K
                  IF(IJEQKL .AND. K.EQ.I) LMAX= J
                  DO 210 L=MINL,LMAX
                     P4L = P3K*PNRM(L)
                     KAL= MAX0(LOCK+K,LOCL+L)
                     KIL= MIN0(LOCK+K,LOCL+L)
                     IN = IAJ
                     JN = IIJ
                     KN = KAL
                     LN = KIL
                     IF(IN.LT.KN .OR.(IN.EQ.KN .AND. JN.LT.LN)) THEN
                        IN = KAL
                        JN = KIL
                        KN = IAJ
                        LN = IIJ
                     ENDIF
                     IJ = IA(IN)+JN
                     IK = IA(IN)+KN
                     IL = IA(IN)+LN
                     JK = IA(MAX0(JN,KN))+MIN0(JN,KN)
                     JL = IA(JN)+LN
                     IF(JN.LT.KN) JL = IA(MAX0(JN,LN))+MIN0(JN,LN)
                     KL = IA(KN)+LN
                     DF1= DA(IJ)*DA(KL)+
     2                    DA(IJ)*DB(KL)+DB(IJ)*DA(KL)
                     DQ1= DA(IK)*DA(JL)+DA(IL)*DA(JK)+
     2                    DA(IK)*DB(JL)+DA(IL)*DB(JK)+
     3                    DB(IK)*DA(JL)+DB(IL)*DA(JK)
                     IF(UHFTYP) DQ1=DQ1+DB(IK)*DB(JL)+DB(IL)*DB(JK)
                     DF1= DF1*F04-DQ1
                     IF(JN.EQ.IN               ) DF1= DF1*PT5
                     IF(LN.EQ.KN               ) DF1= DF1*PT5
                     IF(KN.EQ.IN .AND. LN.EQ.JN) DF1= DF1*PT5
                     IF(DABMAX.LT. ABS(DF1)) DABMAX= ABS(DF1)
C
C IGXYZ AND J, K, AND L ARE SET UP IN JKDNDX
C
                     IJKL=IGXYZ(1,I)+JGXYZ(1,J)+KGXYZ(1,K)+LGXYZ(1,L)
                     DAB(IJKL)= DF1*P4L
                     IF(OUT) WRITE(IW,9020) II,JJ,KK,LL,I,J,K,L,IJKL,DF1
  210    CONTINUE
      END IF
      RETURN
 9010 FORMAT(' -DABPAU,POPLE- ',4I4,4I3,D20.12)
 9020 FORMAT(' -DABPAU,HONDO- ',4I4,4I3,I5,D20.12)
      END
C*MODULE EFPAUL  *DECK FZMAT
      SUBROUTINE FZMAT(XMK,XMKVIR,CMO,ZQQ,L1,L2,NVIR,NOC)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL PACK2E
C
      COMMON /DIISSO/ SOGTOL,ETHRSH,MAXDII,IRAF
      COMMON /FMCOM / X(1)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
C
      DIMENSION XMK(L1,NOC), XMKVIR(NVIR,NOC), CMO(L1,L1), ZQQ(NOC)
C
      MAXIT  = 50
      MAXIO  = 2*MAXDII
      MAXIT2 = (MAXIT*MAXIT+MAXIT)/2
C
      NBF = L1
      NBF2 = (L1*L1+L1)/2
      NBF3 = L1*L1
      NROT = NVIR*NOC
C
      CALL VALFM(LOADFM)
      IRHO  = 1     + LOADFM
      IXX   = IRHO  + NBF2
      IY    = IXX   + NBF3
      IXLMN = IY    + NBF3
      LBUF  = IXLMN + NBF3
      IBUF  = LBUF  + NINTMX
      IPAI  = IBUF  + NINTMX
      IPBJ  = IPAI  + NROT
      IERR  = IPBJ  + NROT
      IENG  = IERR  + NROT
      LGIN  = IENG  + NBF
      LARRAY= LGIN  + NOC*NOC
      IAM   = LARRAY+ NBF2
      IX    = IAM   + MAXDII*MAXDII
      IPVT  = IX    + MAXIT
      IB    = IPVT  + MAXIT
      IODIIS= IB    + MAXIT2
      LAST  = IODIIS+ MAXIO
      NEED  = LAST - LOADFM - 1
      CALL GETFM(NEED)
C
      CALL DAREAD(IDAF,IODA,X(IENG),NBF,17,0)
C
      DO NI = 1,NOC
         DO NA = 1,NVIR
            XMKVIR(NA,NI) = XMK(NA+NOC,NI)
         END DO
      END DO
      CALL XIJP(X(IRHO),X(IXX),X(IY),X(IXLMN),X(LBUF),X(IBUF),
     *          XMK,XMKVIR,X(LGIN),X(IPAI),NOC,NVIR,NBF,CMO,
     *          X(IENG),ZQQ,NROT)
      WRITE(IW,9980)
      CALL AOCPHF(X(IRHO),X(IXX),X(IY),X(IXLMN),X(LBUF),X(IBUF),
     *            XMKVIR,X(IPAI),X(IPBJ),NOC,NVIR,NBF,CMO,
     *            X(IERR),X(IENG),X(IAM),X(IX),X(IPVT),X(IB),
     *            X(IODIIS),X(IENG),NROT,MAXIT)
C
      CALL DCOPY(NROT,X(IPAI),1,XMKVIR,1)
C
C   FRISCH PAPER HAS THE ORB. ENERGIES SWITCHED, I.E. SIGN CHANGED
C
      DO NI = 1,NOC
         DO NA = 1,NVIR
            XMK(NA+NOC,NI) = -XMKVIR(NA,NI)
         END DO
      END DO
C
      CALL XII(X(LARRAY),XMK,CMO,NOC,NBF,NBF2)
C
      CALL FBMAT(X(LARRAY),XMK,X(LGIN),X(IRHO),X(IXX),X(IY),X(LBUF),
     *           CMO,X(IENG),X(IXLMN),ZQQ,X(IBUF),NOC,NBF,L2,
     *           NINTMX)
C
      CALL RETFM(NEED)
C
      RETURN
 9980 FORMAT(/' ..... SOLVING CPHF IN THE AO BASIS .....')
      END
C*MODULE EFPAUL  *DECK FBMAT
      SUBROUTINE FBMAT(ARRAY,XMK,GIN,PMN,XX,Y,BUF,C,E,XLMN,ZQQ,IBUF,
     *                 NOC,NBF,L2,NINTMX)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (TOL=1.0D-04)
C
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
C
      DIMENSION ARRAY(L2), XMK(NBF,NOC), PMN(L2), GIN(NOC,NOC)
      DIMENSION XX(NBF,NBF), Y(NBF,NBF), BUF(NINTMX), IBUF(NINTMX)
      DIMENSION C(NBF,NBF), E(NBF), XLMN(NBF,NBF), ZQQ(NOC)
C
C
C     ---- CALCULATE PAI USING EQUATION 10 IN FRISCH'S PAPER ----
C
      DO NI=1,NOC
         DO NA=1,NOC
            IF ( ABS(E(NI)-E(NA)) .GE.TOL) THEN
               XMK(NA,NI)=XMK(NA,NI)/(E(NI)-E(NA))
            ELSE
               IF(NA.NE.NI) WRITE(IW,*) 'WARNING:',NI,NA,E(NI),E(NA)
               XMK(NA,NI) = ZERO
            END IF
         END DO
         XMK(NI,NI) = ZQQ(NI)
      END DO
C
C
C        BEGIN TRANSFORMING -PBJ- TO AO BASIS AS -PMN-
C
      CALL VCLR(Y,1,NBF*NBF)
C
      CALL MRARTR(XMK,NBF,NBF,NOC,C,NBF,NBF,XX,NBF)
      CALL DGEMM('N','N',NBF,NBF,NBF,ONE,C,NBF,XX,NBF,
     *     ONE,Y,NBF)
C
      MUNU = 0
      DO 110 MU=1,NBF
         DO 100 NU=1,MU
            MUNU=MUNU+1
            PMN(MUNU) = (Y(MU,NU) + Y(NU,MU))/TWO
  100    CONTINUE
  110 CONTINUE
C
      CALL DAWRIT(IDAF,IODA,PMN,L2,79,0)
C
C           NOW FORM FOCK-LIKE MATRIX
C           DIRECT METHOD = RECOMPUTE 2E- AO INTEGRALS
C           STANDARD METHOD = PROCESS INTEGRALS FROM DISK
C
      CALL DSCAL(L2,TWO,PMN,1)
      CALL FLMAT(PMN,Y,XLMN,BUF,IBUF,NBF)
      CALL VCLR(GIN,1,NOC*NOC)
      CALL MRARBR(Y,NBF,NBF,NBF,C,NBF,NOC,XX,NBF)
      CALL DGEMM('T','N',NOC,NOC,NBF,ONE,C,NBF,XX,NBF,
     *           ONE,GIN,NOC)
      CALL VCLR(Y,1,NBF*NBF)
      CALL MRARTR(GIN,NOC,NOC,NOC,C,NBF,NBF,XX,NBF)
      CALL MRARBR(C,NBF,NBF,NOC,XX,NBF,NBF,Y,NBF)
      MUNU = 0
      DO 160 MU=1,NBF
         DO 150 NU=1,MU
            MUNU=MUNU+1
            ARRAY(MUNU) = ARRAY(MUNU) - (Y(MU,NU) + Y(NU,MU))/TWO
  150    CONTINUE
  160 CONTINUE
C
      DO 200 NI=1,NOC
         DO 210 NA=1,NBF
            XMK(NA,NI)=XMK(NA,NI)*E(NI)
  210    CONTINUE
  200 CONTINUE
C
      CALL VCLR(Y,1,NBF*NBF)
C
      CALL MRARTR(XMK,NBF,NBF,NOC,C,NBF,NBF,XX,NBF)
      CALL DGEMM('N','N',NBF,NBF,NBF,ONE,C,NBF,XX,NBF,
     *     ONE,Y,NBF)
C
      MUNU = 0
      DO 260 MU=1,NBF
         DO 250 NU=1,MU
            MUNU=MUNU+1
            ARRAY(MUNU) = ARRAY(MUNU) - (Y(MU,NU) + Y(NU,MU))/TWO
  250    CONTINUE
  260 CONTINUE
C
      CALL DAWRIT(IDAF,IODA,ARRAY,L2,78,0)
C
      RETURN
      END
C*MODULE EFPAUL  *DECK EXPMAT
      SUBROUTINE EXPMAT(VEC,ICOL,IROW,LDV)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION VEC(LDV*ICOL)
C
      IOFF = (ICOL-IROW)*ICOL + (ICOL-IROW)
      DO IIP = IROW,1,-1
         IS     = (IIP-1)*IROW + 1
         ISHDBE = IOFF + (IIP-1)*ICOL + 1
         CALL DCOPY(ICOL,VEC(IS),1,VEC(ISHDBE),1)
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK XIJP
      SUBROUTINE XIJP(PMN,XX,Y,XLMN,BUF,IBUF,XMK,XMKVIR,GIN,PAI,
     *                NOC,NVIR,NBF,C,E,ZQQ,NROT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL PACK2E
C
      DIMENSION PAI(NVIR,NOC), PMN(*)
      DIMENSION XX(NBF,NBF), XLMN(*), XMKVIR(NVIR,NOC), XMK(NBF,NOC)
      DIMENSION Y(NBF,NBF),   BUF(NINTMX), IBUF(NINTMX)
      DIMENSION C(NBF,*), E(NBF), GIN(NOC,NOC)
      DIMENSION ZQQ(NOC)
C
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00)
      PARAMETER (TOL=1.0D-04)
C
      DO NI=1,NOC
         DO NA=1,NOC
            IF ( ABS(E(NI)-E(NA)) .GE.TOL) THEN
               GIN(NA,NI)=XMK(NA,NI)/(E(NI)-E(NA))
            ELSE
               IF(NA.NE.NI) WRITE(IW,*) 'WARNING:',NI,NA,E(NI),E(NA)
               GIN(NA,NI) = ZERO
            END IF
         END DO
         GIN(NI,NI) = ZQQ(NI)
      END DO
C
C     ----- FORM D(LAMDA,SIGMA) WHICH WE CALL PMN -----
C     ACCORDING TO EQUATION 17 OF THE FRISCH PAPER.
C
C        BEGIN TRANSFORMING -PBJ- TO AO BASIS AS -PMN-
C
      CALL VCLR(Y,1,NBF*NBF)
C
      CALL MRARTR(GIN,NOC,NOC,NOC,C,NBF,NBF,XX,NBF)
      CALL DGEMM('N','N',NBF,NBF,NOC,TWO,C,NBF,XX,NBF,
     *     ONE,Y,NBF)
C
      MUNU = 0
      DO 110 MU=1,NBF
         DO 100 NU=1,MU
            MUNU=MUNU+1
            PMN(MUNU) = Y(MU,NU) + Y(NU,MU)
  100    CONTINUE
  110 CONTINUE
C
C           NOW FORM FOCK-LIKE MATRIX
C           DIRECT METHOD = RECOMPUTE 2E- AO INTEGRALS
C           STANDARD METHOD = PROCESS INTEGRALS FROM DISK
C
      CALL FLMAT(PMN,Y,XLMN,BUF,IBUF,NBF)
C
C     ---- TRANSFORM THE FOCK-LIKE MATRIX G(MU,NU) TO MO BASIS ----
C
      CALL VCLR(PAI,1,NROT)
C
      CALL MRARBR(Y,NBF,NBF,NBF,C,NBF,NOC,XX,NBF)
      CALL DGEMM('T','N',NVIR,NOC,NBF,ONE,C(1,NOC+1),NBF,XX,NBF,
     *           ONE,PAI,NVIR)
C
C     ---- CALCULATE PAI USING EQUATION 10 IN FRISCH'S PAPER ----
C
      DO 700 NI=1,NOC
         DO 710 NA=1,NVIR
            XMKVIR(NA,NI)=XMKVIR(NA,NI) + PAI(NA,NI)
  710    CONTINUE
  700 CONTINUE
C
      RETURN
      END
C*MODULE EFPAUL  *DECK XII
      SUBROUTINE XII(ARRAY,XMK,VEC,NORBA,L1,L2)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TWO=2.0D+00)
C
      DIMENSION ARRAY(L2), XMK(L1,NORBA), VEC(L1,L1)
C
      CALL VCLR(ARRAY,1,L2)
      MUNU = 0
      DO MU = 1,L1
         DO NU = 1,MU
            MUNU = MUNU + 1
            DO I = 1,NORBA
               ARRAY(MUNU)=ARRAY(MUNU)-XMK(I,I)*VEC(MU,I)*VEC(NU,I)/TWO
            END DO
         END DO
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK TFTRAB
      SUBROUTINE TFTRAB(A,NA,B,C,NC,D,WRK)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00)
C
      DIMENSION C(NA,NC), B(NA*(NA+1)/2), A(NA,NA), D(NA,NC), WRK(NA)
C
C     D = AT * B * C  WHERE B=SYMMETRIC, A=SQUARE, C=RECTANGULAR
C
      CALL MTARBR(B,NA,C,NC,D,NA,1)
C
      DO 190 J=1,NC
         DO 170 I=1,NA
            DUM = ZERO
            DO 160 K=1,NA
               DUM = DUM + A(K,I)*D(K,J)
  160       CONTINUE
            WRK(I) = DUM
  170    CONTINUE
         DO 180 I=1,NA
            D(I,J) = WRK(I)
  180    CONTINUE
  190 CONTINUE
C
      RETURN
      END
C*MODULE EFPAUL  *DECK XIJ
      SUBROUTINE XIJ(XMK,SMJ,TMJ,SIJ,TIJ,XMI,YMI,ZMI,TLOC,CLMOA,CLMOB,
     *               FA,FB,FASQ,FBSQ,CA,CB,ZA,ZB,NORBA,NORBB,NATA,NATB,
     *               L1,NAEF,MXMO2A,MXMO2B)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (ZERO=0.0D+00,ONE=1.0D+00,FOUR=4.0D+00)
      PARAMETER (TWO=2.0D+00, TM6=1.0D-06, PI=3.1415927D+00)
C
      DIMENSION SIJ(NORBA,NAEF), TIJ(NORBA,NAEF)
      DIMENSION CLMOA(3,NORBA), CLMOB(3,NORBB), FA(MXMO2A), FB(MXMO2B)
      DIMENSION FASQ(NORBA,NORBA), FBSQ(NAEF,NAEF), CA(3,NATA)
      DIMENSION CB(3,NATB), ZA(NATA), ZB(NATB), XMK(L1,NORBA)
      DIMENSION SMJ(L1,NAEF), TMJ(L1,NAEF), XMI(L1,NORBA)
      DIMENSION YMI(L1,NORBA), ZMI(L1,NORBA), TLOC(NORBA,NORBA)
C
      CALL CPYTSQ(FA,FASQ,NORBA,1)
      CALL CPYTSQ(FB,FBSQ,NAEF,1)
C
      DO M = 1,L1
         DO IQ = 1,NORBA
            DO I = 1,NORBA
               XI = CLMOA(1,I)
               YI = CLMOA(2,I)
               ZI = CLMOA(3,I)
               DO J = 1,NORBB
                  XJ = CLMOB(1,J)
                  YJ = CLMOB(2,J)
                  ZJ = CLMOB(3,J)
                  X = XI - XJ
                  Y = YI - YJ
                  Z = ZI - ZJ
C DE(V;S0)
                  RIJ = SQRT(X*X + Y*Y + Z*Z)
                  RIJ3 = RIJ*RIJ*RIJ
                  SUMS = ZERO
                  SUMR = ZERO
                  IF(ABS(SIJ(I,J)) .LE. TM6)  GO TO 100
                  A = FOUR*SQRT(-TWO*LOG(ABS(SIJ(I,J)))/PI)
                  B = SQRT( -TWO/(PI*LOG(ABS(SIJ(I,J)))) )
                  SUMS =  -TWO*(A-B)*(SIJ(I,J)/RIJ)
                  SUMR =  -A*SIJ(I,J)*SIJ(I,J)
  100             CONTINUE
C DE(V;S1)
C
                  SUMT = FOUR*SIJ(I,J)
C
                  SUMK = ZERO
                  DO K = 1,NORBA
                     SUMS = SUMS - FOUR*SIJ(K,J)*FASQ(I,K)
                     SUMK = SUMK + SIJ(K,J)*SIJ(K,J)
                  END DO
                  SUML = ZERO
                  DO L = 1,NORBB
                     SUMS = SUMS - FOUR*SIJ(I,L)*FBSQ(J,L)
                     SUML = SUML + SIJ(I,L)*SIJ(I,L)
                  END DO
                  SUMS = SUMS + FOUR*TIJ(I,J)
                  SUMR = SUMR + FOUR*(SUML+SUMK) - TWO*SIJ(I,J)*SIJ(I,J)
C DE(V;S2)
                  SUMJJ = ZERO
                  DO JJ = 1,NATB
                     XJJ = XI - CB(1,JJ)
                     YJJ = YI - CB(2,JJ)
                     ZJJ = ZI - CB(3,JJ)
                     RIJJ = SQRT(XJJ*XJJ + YJJ*YJJ + ZJJ*ZJJ)
                     SUMJJ = SUMJJ - ZB(JJ)/RIJJ
C
                    YMQIJ =FOUR*(XJJ*XMI(M,I)+YJJ*YMI(M,I)+ZJJ*ZMI(M,I))
                    YMQIJ = -YMQIJ*TLOC(IQ,I)/(RIJJ*RIJJ*RIJJ)
                    XMK(M,IQ) = XMK(M,IQ)-ZB(JJ)*SIJ(I,J)*SIJ(I,J)*YMQIJ
                  END DO
                  SUML = ZERO
                  DO L = 1,NORBB
                     XL = XI - CLMOB(1,L)
                     YL = YI - CLMOB(2,L)
                     ZL = ZI - CLMOB(3,L)
                     RIL = SQRT(XL*XL + YL*YL + ZL*ZL)
                     SUML = SUML + TWO/RIL
                  END DO
                  SUMII = ZERO
                  DO II = 1,NATA
                     XII = XJ - CA(1,II)
                     YII = YJ - CA(2,II)
                     ZII = ZJ - CA(3,II)
                     RJII = SQRT(XII*XII + YII*YII + ZII*ZII)
                     SUMII = SUMII - ZA(II)/RJII
                  END DO
                  SUMK = ZERO
                  DO K = 1,NORBA
                     XK = XJ - CLMOA(1,K)
                     YK = YJ - CLMOA(2,K)
                     ZK = ZJ - CLMOA(3,K)
                     RKJ = SQRT(XK*XK + YK*YK + ZK*ZK)
                     SUMK = SUMK + TWO/RKJ
                  END DO
                  SUMS = SUMS + FOUR*SIJ(I,J)*
     *                               (SUMJJ+SUML+SUMII+SUMK-ONE/RIJ)
C
                  XMK(M,IQ) = XMK(M,IQ) + SUMS*TLOC(IQ,I)*SMJ(M,J)
                  XMK(M,IQ) = XMK(M,IQ) + SUMT*TLOC(IQ,I)*TMJ(M,J)
                  YMQIJ = TWO*(X*XMI(M,I)+Y*YMI(M,I)+Z*ZMI(M,I))
                  YMQIJ = YMQIJ*TLOC(IQ,I)/RIJ3
                  XMK(M,IQ) = XMK(M,IQ) - SUMR*YMQIJ
               END DO
            END DO
         END DO
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK FRMZQQ
      SUBROUTINE FRMZQQ(ZQQ,SMJ,L1,LNA,NORBB,NAEF)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (TWO=2.0D+00)
C
      DIMENSION ZQQ(LNA), SMJ(L1,NAEF)
C
      DO IQ = 1,LNA
         DO J = 1,NORBB
            ZQQ(IQ)=ZQQ(IQ)-TWO*SMJ(IQ,J)*SMJ(IQ,J)
         END DO
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK PTORQ
      SUBROUTINE PTORQ(SMAT,TMAT,EPS,EPT,MXBFA,MXBFB,NSHLA,KMINA,
     *                 KMAXA,KLOCA,NSHLB,KMINB,KMAXB,KLOCB,IFRG,JFRG)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION SMAT(MXBFA,MXBFB), TMAT(MXBFA,MXBFB)
      DIMENSION EPS(MXBFA,MXBFB), EPT(MXBFA,MXBFB)
      DIMENSION KMINA(NSHLA), KMAXA(NSHLA), KLOCA(NSHLA)
      DIMENSION KMINB(NSHLB), KMAXB(NSHLB), KLOCB(NSHLB)
C
      PARAMETER (MXFRG=1050, MXFGPT=12000)
C
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
C
      PARAMETER (ZERO=0.0D+00, TWO=2.0D+00)
C
      DO II = 1,NSHLA
         MINI = KMINA(II)
         MAXI = KMAXA(II)
         LOCI = KLOCA(II) - MINI
         DO JJ = 1, NSHLB
            MINJ = KMINB(JJ)
            MAXJ = KMAXB(JJ)
            LOCJ = KLOCB(JJ) - MINJ
            DO I = MINI,MAXI
               MU = LOCI + I
               DO J = MINJ,MAXJ
                  NU = LOCJ + J
                  TIX = ZERO
                  TIY = ZERO
                  TIZ = ZERO
                  TJX = ZERO
                  TJY = ZERO
                  TJZ = ZERO
                  IF (I.EQ.2) THEN
                    TIY = -EPS(MU,NU)*SMAT(MU+2,NU) -
     *                     EPT(MU,NU)*TMAT(MU+2,NU)
                    TIZ =  EPS(MU,NU)*SMAT(MU+1,NU) +
     *                     EPT(MU,NU)*TMAT(MU+1,NU)
                  END IF
                  IF (J.EQ.2) THEN
                    TJY = -EPS(MU,NU)*SMAT(MU,NU+2) -
     *                     EPT(MU,NU)*TMAT(MU,NU+2)
                    TJZ =  EPS(MU,NU)*SMAT(MU,NU+1) +
     *                     EPT(MU,NU)*TMAT(MU,NU+1)
                  END IF
                  IF (I.EQ.3) THEN
                    TIX =  EPS(MU,NU)*SMAT(MU+1,NU) +
     *                     EPT(MU,NU)*TMAT(MU+1,NU)
                    TIZ = -EPS(MU,NU)*SMAT(MU-1,NU) -
     *                     EPT(MU,NU)*TMAT(MU-1,NU)
                  END IF
                  IF (J.EQ.3) THEN
                    TJX =  EPS(MU,NU)*SMAT(MU,NU+1) +
     *                     EPT(MU,NU)*TMAT(MU,NU+1)
                    TJZ = -EPS(MU,NU)*SMAT(MU,NU-1) -
     *                     EPT(MU,NU)*TMAT(MU,NU-1)
                  END IF
                  IF (I.EQ.4) THEN
                    TIX = -EPS(MU,NU)*SMAT(MU-1,NU) -
     *                     EPT(MU,NU)*TMAT(MU-1,NU)
                    TIY =  EPS(MU,NU)*SMAT(MU-2,NU) +
     *                     EPT(MU,NU)*TMAT(MU-2,NU)
                  END IF
                  IF (J.EQ.4) THEN
                    TJX = -EPS(MU,NU)*SMAT(MU,NU-1) -
     *                     EPT(MU,NU)*TMAT(MU,NU-1)
                    TJY =  EPS(MU,NU)*SMAT(MU,NU-2) +
     *                     EPT(MU,NU)*TMAT(MU,NU-2)
                  END IF
                  IF (I.EQ.5) THEN
                    TIY = -TWO*EPS(MU,NU)*SMAT(MU+4,NU) -
     *                     TWO*EPT(MU,NU)*TMAT(MU+4,NU)
                    TIZ =  TWO*EPS(MU,NU)*SMAT(MU+3,NU) +
     *                     TWO*EPT(MU,NU)*TMAT(MU+3,NU)
                  END IF
                  IF (J.EQ.5) THEN
                    TJY = -TWO*EPS(MU,NU)*SMAT(MU,NU+4) -
     *                     TWO*EPT(MU,NU)*TMAT(MU,NU+4)
                    TJZ =  TWO*EPS(MU,NU)*SMAT(MU,NU+3) +
     *                     TWO*EPT(MU,NU)*TMAT(MU,NU+3)
                  END IF
                  IF (I.EQ.6) THEN
                    TIX =  TWO*EPS(MU,NU)*SMAT(MU+4,NU) +
     *                     TWO*EPT(MU,NU)*TMAT(MU+4,NU)
                    TIZ = -TWO*EPS(MU,NU)*SMAT(MU+2,NU) -
     *                     TWO*EPT(MU,NU)*TMAT(MU+2,NU)
                  END IF
                  IF (J.EQ.6) THEN
                    TJX =  TWO*EPS(MU,NU)*SMAT(MU,NU+4) +
     *                     TWO*EPT(MU,NU)*TMAT(MU,NU+4)
                    TJZ = -TWO*EPS(MU,NU)*SMAT(MU,NU+2) -
     *                     TWO*EPT(MU,NU)*TMAT(MU,NU+2)
                  END IF
                  IF (I.EQ.7) THEN
                    TIX = -TWO*EPS(MU,NU)*SMAT(MU+3,NU) -
     *                     TWO*EPT(MU,NU)*TMAT(MU+3,NU)
                    TIY =  TWO*EPS(MU,NU)*SMAT(MU+2,NU) +
     *                     TWO*EPT(MU,NU)*TMAT(MU+2,NU)
                  END IF
                  IF (J.EQ.7) THEN
                    TJX = -TWO*EPS(MU,NU)*SMAT(MU,NU+3) -
     *                     TWO*EPT(MU,NU)*TMAT(MU,NU+3)
                    TJY =  TWO*EPS(MU,NU)*SMAT(MU,NU+2) +
     *                     TWO*EPT(MU,NU)*TMAT(MU,NU+2)
                  END IF
                  IF (I.EQ.8) THEN
                    TIX =  EPS(MU,NU)*SMAT(MU+1,NU) +
     *                     EPT(MU,NU)*TMAT(MU+1,NU)
                    TIY = -EPS(MU,NU)*SMAT(MU+2,NU) -
     *                     EPT(MU,NU)*TMAT(MU+2,NU)
                    TIZ =  EPS(MU,NU)*(SMAT(MU-2,NU) - SMAT(MU-3,NU)) +
     *                     EPT(MU,NU)*(TMAT(MU-2,NU) - TMAT(MU-3,NU))
                  END IF
                  IF (J.EQ.8) THEN
                    TJX =  EPS(MU,NU)*SMAT(MU,NU+1) +
     *                     EPT(MU,NU)*TMAT(MU,NU+1)
                    TJY =  EPS(MU,NU)*SMAT(MU,NU+2) +
     *                     EPT(MU,NU)*TMAT(MU,NU+2)
                    TJZ =  EPS(MU,NU)*(SMAT(MU,NU-2) - SMAT(MU,NU-3)) +
     *                     EPT(MU,NU)*(TMAT(MU,NU-2) - TMAT(MU,NU-3))
                  END IF
                  IF (I.EQ.9) THEN
                    TIX = -EPS(MU,NU)*SMAT(MU-1,NU) -
     *                     EPT(MU,NU)*TMAT(MU-1,NU)
                    TIY =  EPS(MU,NU)*(SMAT(MU-4,NU) - SMAT(MU-2,NU)) +
     *                     EPT(MU,NU)*(TMAT(MU-4,NU) - TMAT(MU-2,NU))
                    TIZ =  EPS(MU,NU)*SMAT(MU+1,NU) +
     *                     EPT(MU,NU)*TMAT(MU+1,NU)
                  END IF
                  IF (J.EQ.9) THEN
                    TJX = -EPS(MU,NU)*SMAT(MU,NU-1) -
     *                     EPT(MU,NU)*TMAT(MU,NU-1)
                    TJY =  EPS(MU,NU)*(SMAT(MU,NU-4) - SMAT(MU,NU-2)) +
     *                     EPT(MU,NU)*(TMAT(MU,NU-4) - TMAT(MU,NU-2))
                    TJZ =  EPS(MU,NU)*SMAT(MU,NU+1) +
     *                     EPT(MU,NU)*TMAT(MU,NU+1)
                  END IF
                  IF (I.EQ.10) THEN
                    TIX =  EPS(MU,NU)*(SMAT(MU-3,NU) - SMAT(MU-4,NU)) +
     *                     EPT(MU,NU)*(TMAT(MU-3,NU) - TMAT(MU-4,NU))
                    TIY =  EPS(MU,NU)*SMAT(MU-2,NU) +
     *                     EPT(MU,NU)*TMAT(MU-2,NU)
                    TIZ = -EPS(MU,NU)*SMAT(MU-1,NU) -
     *                     EPT(MU,NU)*TMAT(MU-1,NU)
                  END IF
                  IF (J.EQ.10) THEN
                    TJX =  EPS(MU,NU)*(SMAT(MU,NU-3) - SMAT(MU,NU-4)) +
     *                     EPT(MU,NU)*(TMAT(MU,NU-3) - TMAT(MU,NU-4))
                    TJY =  EPS(MU,NU)*SMAT(MU,NU-2) +
     *                     EPT(MU,NU)*TMAT(MU,NU-2)
                    TJZ = -EPS(MU,NU)*SMAT(MU,NU-1) -
     *                     EPT(MU,NU)*TMAT(MU,NU-1)
                  END IF
                  IF (I.GT.0) THEN
                     ATORQ(1,IFRG) = ATORQ(1,IFRG) + TIX
                     ATORQ(2,IFRG) = ATORQ(2,IFRG) + TIY
                     ATORQ(3,IFRG) = ATORQ(3,IFRG) + TIZ
                  END IF
                  ATORQ(1,JFRG) = ATORQ(1,JFRG) + TJX
                  ATORQ(2,JFRG) = ATORQ(2,JFRG) + TJY
                  ATORQ(3,JFRG) = ATORQ(3,JFRG) + TJZ
               END DO
            END DO
         END DO
      END DO
C
      RETURN
      END
C*MODULE EFPAUL  *DECK MULCAL
      SUBROUTINE MULCAL(MJ,MI,MLSWTCH,MULI,MULJ,ICOEFF,JCOEFF,KCOEFF,
     *                  PCOEFF,JFIRST,JLAST,JDIFF,IFIRST,ILAST,IDIFF,
     *                  MCOEFF)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (MXFRG=1050, MXFGPT=12000)
C
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /EFPIO / MULMAT(MXFRG)
C
C     DDK
C     THIS ROUTINE CALCULATES THE COEFFICIENT (BASED ON ORBITAL
C     OCCUPATION NUMBER) TO BE USED IN EXCHANGE-REPULSION ROUTINES
C     FOR EFP2.
C
C     MULMAT IS A STRING OF NUMBERS CONTAINING THE MULTIPLICITY
C     OF EACH FRAGMENT, READ IN WHEN THE FRAGMENT INFORMATION IS
C     READ.  BASED ON THE MULTIPLICITY, AND THE NUMBER OF ORBITALS
C     (NORB), THIS ROUTINE DETERMINES THE NUMBER OF SINGLY-OCCUPIED
C     ORBITALS WITH ELECTRONS OF ALPHA SPIN.
C
C     ICOEFF IS PLACED IN FRONT OF THE EX-REP EQUATIONS IN EXREP
C     AND GEXREP.  JCOEFF AND KCOEFF ARE COEFFICIENTS THAT ARE
C     PLACED INSIDE THE EX-REP EQUATIONS.
C
      IF (MLSWTCH .EQ. 1) THEN
         ICOEFF = 2
         MCOEFF = 2
         PCOEFF = 1.0D+00
      ELSE
         ICOEFF = 1
         MCOEFF = 1
         PCOEFF = 0.5D+00
      END IF
      IF (MLSWTCH .EQ. 4) THEN
         JCOEFF = 1
      ELSE
         JCOEFF = 2
      END IF
      IF (MLSWTCH .EQ. 4) THEN
         KCOEFF = 0
      ELSE
         KCOEFF = 1
      END IF
C
      MULI=0
      MULJ=0
      MULI=MULI+MULMAT(MI)-1
      MULJ=MULJ+MULMAT(MJ)-1
      IF (MULMAT(MI).EQ.1 .AND. MULMAT(MJ).EQ.1) THEN
      JFIRST=1
      JLAST=NORB(MJ)
      IFIRST=1
      ILAST=NORB(MI)
      GOTO 400
      ELSE
      GOTO 90
      END IF
   90 CONTINUE
      IF (MLSWTCH .NE. 1) GOTO 100
      JFIRST=1
      JLAST=NORB(MJ)-MULJ
      IFIRST=1
      ILAST=NORB(MI)-MULI
      IDIFF=ILAST-IFIRST+1
      JDIFF=JLAST-JFIRST+1
  100 CONTINUE
      IF (MLSWTCH .NE. 2) GOTO 200
      JFIRST=1
      JLAST=NORB(MJ)-MULJ
      IF (MULI .EQ. 0) GOTO 200
      IFIRST=NORB(MI)-MULI+1
      ILAST=NORB(MI)
      IDIFF=ILAST-IFIRST+1
      JDIFF=JLAST-JFIRST+1
  200 CONTINUE
      IF (MLSWTCH .NE. 3) GOTO 300
      JFIRST=NORB(MJ)-MULJ+1
      JLAST=NORB(MJ)
      IFIRST=1
      ILAST=NORB(MI)-MULI
      IDIFF=ILAST-IFIRST+1
      JDIFF=JLAST-JFIRST+1
  300 CONTINUE
      IF (MLSWTCH .NE. 4) GOTO 400
      IF (MULI .EQ. 0) GOTO 400
      JFIRST=NORB(MJ)-MULJ+1
      JLAST=NORB(MJ)
      IFIRST=NORB(MI)-MULI+1
      ILAST=NORB(MI)
      IDIFF=ILAST-IFIRST+1
      JDIFF=JLAST-JFIRST+1
  400 CONTINUE
      IF (MULI .LT. 0 .OR. MULJ .LT. 0) CALL ABRT
      RETURN
      END
C
C*MODULE EFPAUL  *DECK EXREP
      SUBROUTINE EXREP(ENXR,PROVEC,FOCKMA,SMAT,TMAT,WRK,SAB,TAB,
     *                 FA,FB,SAB_SAVE,MXBF,MXMO,EPEN)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,
     *           MXSHEF=1000, MXGEFP=4000,
     *           MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00,
     *           RT2PI=0.7978845608028654D+00)
C
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NAT(MXDFG),NUM(MXDFG),NTPATM
      COMMON /EFPPBC/ XBOX,YBOX,ZBOX,XCUT,YCUT,ZCUT,RCUT
     *                ,SWR1,SWR2,ISWF
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /EFPSCR/ POLAB(MXFRG),B,SCROFF,IELECS,IDISPS,NEW_POL
C
      DIMENSION PROVEC(MXBF,NTMO),FOCKMA((MXMO*MXMO+MXMO)/2,NFRG),
     *          SMAT(MXBF,MXBF),TMAT(MXBF,MXBF),
     *          WRK(MXBF),SAB(MXMO,MXMO),TAB(MXMO,MXMO),
     *          FA(MXMO,MXMO), FB(MXMO,MXMO)
     *          ,SAB_SAVE(NFRG,NFRG,MXMO,MXMO)
C
C     CALCULATE THE EXCHANGE-REPULSION ENERGY
C     HUI LI, 02/27/2005, AMES
C
      ENXR = ZERO
C  ---- EPEN IS OVERLAP-BASED ELECTROSTATIC DAMPING (J.JENSEN FORMULA,
C  ----  IMPLEMENTATION BY LVS 2008)
      EPEN = ZERO
      IF(NTMO.EQ.0) RETURN
C
C  ---- SAB_SAVE IS AN ARRAY FOR KEEPING THE OVERLAP MATRICES,
C  ---- TO BE USED IN DISPERSION DAMPING FORMULA; LVS 2008
      CALL VCLR(SAB_SAVE,1,NFRG*NFRG*MXMO*MXMO)
C
C     NOTE 'JM' IS MOLECULAE 'A', 'IM' IS MOLECULE 'B'
C
C     - INITIALIZE PARALLEL
      IPCOUNT = ME - 1
C
C  - ZERO OFF CONSTANTS BEFORE CALLING MULCAL
      MLSWTCH=0
      ICOEFF=0
      JCOEFF=0
      KCOEFF=0
C
      JNAT = 1
      JMO = 1
      DO MJ = 1,NFRG
C
         COMX1 = EFCENT(1,MJ)
         COMY1 = EFCENT(2,MJ)
         COMZ1 = EFCENT(3,MJ)
C
         JM=ISET(MJ)
         INAT = 1
         IMO = 1
         CALL CPYTSQ(FOCKMA(1,MJ),FA,MXMO,1)
         DO MI = 1,NFRG
            IM=ISET(MI)
            IF(MI.LE.MJ) GOTO 502
C
C           DDK - CALL MULCAL TO OBTAIN VALUES FOR COEFFICIENTS.
C           MLSWTCH ASSUMES CERTAIN MULTIPLICITY VALUES TO BE
C           TRUE.  IF THEY ARE, THE INTERACTIONS MUST BE CALCULATED
C           IF NOT, WE SKIP THE INTERACTION TYPE AND MOVE TO THE NEXT.
C
C           MLSWTCH = 1 REPULSION BETWEEN 2 CLOSED SHELL ORBITALS
C                     2 REPULSION BETWEEN CLOSED/OPEN SHELLS
C                     3 REPULSION BETWEEN OPEN/CLOSED SHELLS
C                     4 REPULSION BETWEEN OPEN/OPEN SHELLS
            DO 500 MLSWTCH = 1, 4
            CALL MULCAL(MJ,MI,MLSWTCH,MULI,MULJ,ICOEFF,JCOEFF,
     *                  KCOEFF,PCOEFF,JFIRST,JLAST,JDIFF,IFIRST,ILAST,
     *                  IDIFF,MCOEFF)
            IF (MLSWTCH .EQ. 2 .AND. MULI .EQ. 0) GOTO 500
            IF (MLSWTCH .EQ. 3 .AND. MULJ .EQ. 0) GOTO 500
            IF (MLSWTCH .EQ. 4 .AND. MULJ .EQ. 0) GOTO 500
            IF (MLSWTCH .EQ. 4 .AND. MULI .EQ. 0) GOTO 500
C
C           - GO PARALLEL!
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 502
            END IF
C
              COMX2 = EFCENT(1,MI)
              COMY2 = EFCENT(2,MI)
              COMZ2 = EFCENT(3,MI)
C
               COMX = COMX1 - COMX2
               COMY = COMY1 - COMY2
               COMZ = COMZ1 - COMZ2
C
               PBCX = ZERO
               PBCY = ZERO
               PBCZ = ZERO
               IF (XBOX .NE. ZERO) PBCX = XBOX * ANINT(COMX/XBOX)
               IF (YBOX .NE. ZERO) PBCY = YBOX * ANINT(COMY/YBOX)
               IF (ZBOX .NE. ZERO) PBCZ = ZBOX * ANINT(COMZ/ZBOX)
C
C   ----  DISTANCE BETWEEN FRAGMENTS
               X12  = ABS(COMX - PBCX)
               Y12  = ABS(COMY - PBCY)
               Z12  = ABS(COMZ - PBCZ)
               R12  = X12*X12+Y12*Y12+Z12*Z12
C
            IF(X12.GT.XCUT.OR.Y12.GT.YCUT.OR.Z12.GT.ZCUT) GOTO 500
            R12  = X12*X12+Y12*Y12+Z12*Z12
            IF(R12.GT.RCUT) GOTO 500
C
               SWF   = 1.0D+00
               IF(R12.GT.SWR2*SWR2) THEN
                 GOTO 500
               ELSE IF(R12.GT.SWR1*SWR1) THEN
                 IF(ISWF.EQ.1) THEN
                    DUMY1 = 1.0D+00/(SWR2*SWR2 - SWR1*SWR1)
                    DUMY2 = DUMY1*DUMY1
                    DUMY3 = DUMY2*DUMY1
                    DUMY4 = DUMY2*DUMY2
                    DUMY5 = DUMY2*DUMY3
                    VUMY1 = R12 - SWR1*SWR1
                    VUMY2 = VUMY1*VUMY1
                    VUMY3 = VUMY2*VUMY1
                    VUMY4 = VUMY2*VUMY2
                    VUMY5 = VUMY2*VUMY3
                    DSWF  = -30.0D+00*DUMY3*VUMY2
     *                      +60.0D+00*DUMY4*VUMY3
     *                      -30.0D+00*DUMY5*VUMY4
                    DSWF  = 2.0D+00*DSWF
                    SWF   = 1.0D+00 - 10.0D+00*DUMY3*VUMY3
     *                              + 15.0D+00*DUMY4*VUMY4
     *                              -  6.0D+00*DUMY5*VUMY5
                 ELSE IF(ISWF.EQ.2) THEN
                    R12   = SQRT(R12)
                    PIL   = 3.1415926535897932D+00/(SWR2-SWR1)
                    DUMY  = (R12 - SWR1) * PIL
                    SWF   = 0.50D+00 * (COS(DUMY) + 1.0D+00)
                 END IF
               END IF
C
            EFCENT(1,MI) = EFCENT(1,MI) + PBCX
            EFCENT(2,MI) = EFCENT(2,MI) + PBCY
            EFCENT(3,MI) = EFCENT(3,MI) + PBCZ
            DO NATIM=1,NAT(IM)
            PRCORD(1,INAT+NATIM-1) = PRCORD(1,INAT+NATIM-1) + PBCX
            PRCORD(2,INAT+NATIM-1) = PRCORD(2,INAT+NATIM-1) + PBCY
            PRCORD(3,INAT+NATIM-1) = PRCORD(3,INAT+NATIM-1) + PBCZ
            ENDDO
            DO MOIM=IFIRST,ILAST
            CENTCD(1,IMO+MOIM-1) = CENTCD(1,IMO+MOIM-1) + PBCX
            CENTCD(2,IMO+MOIM-1) = CENTCD(2,IMO+MOIM-1) + PBCY
            CENTCD(3,IMO+MOIM-1) = CENTCD(3,IMO+MOIM-1) + PBCZ
            ENDDO
C
            CALL CPYTSQ(FOCKMA(1,MI),FB,MXMO,1)
C
C           -- SAB AND TAB --
C
            CALL STINT(SMAT,TMAT,MXBF,MXBF,NAT(IM),NAT(JM),
     *                 NGAUSS(IM),NSHELL(IM),EX(1,IM),CS(1,IM),
     *                 CP(1,IM),CD(1,IM),CF(1,IM),CG(1,IM),KSTART(1,IM),
     *                 KATOM(1,IM),KTYPE(1,IM),KNG(1,IM),KLOC(1,IM),
     *                 KMIN(1,IM),KMAX(1,IM),NGAUSS(JM),NSHELL(JM),
     *                 EX(1,JM),CS(1,JM),CP(1,JM),CD(1,JM),CF(1,JM),
     *                 CG(1,JM),KSTART(1,JM),KATOM(1,JM),KTYPE(1,JM),
     *                 KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *                 PRCORD(1,INAT),PRCORD(1,JNAT))
            CALL TFSQP(SAB,SMAT,PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
C
            DO II = JFIRST, JLAST
               DO JJ = IFIRST, ILAST
C                 LVS: SAVE SAB FOR USE WITH DAMPING COEFFS
                  SAB_SAVE(MJ,MI,II,JJ) = SAB(II,JJ)
               END DO
            END DO
C
            DO II = JFIRST, JLAST
               DO JJ = IFIRST, ILAST
                  IF(ABS(SAB(II,JJ)).GT.1.0D-06) GOTO 600
               END DO
            END DO
C
            EFCENT(1,MI) = EFCENT(1,MI) - PBCX
            EFCENT(2,MI) = EFCENT(2,MI) - PBCY
            EFCENT(3,MI) = EFCENT(3,MI) - PBCZ
            DO NATIM=1,NAT(IM)
            PRCORD(1,INAT+NATIM-1) = PRCORD(1,INAT+NATIM-1) - PBCX
            PRCORD(2,INAT+NATIM-1) = PRCORD(2,INAT+NATIM-1) - PBCY
            PRCORD(3,INAT+NATIM-1) = PRCORD(3,INAT+NATIM-1) - PBCZ
            ENDDO
            DO MOIM=IFIRST,ILAST
            CENTCD(1,IMO+MOIM-1) = CENTCD(1,IMO+MOIM-1) - PBCX
            CENTCD(2,IMO+MOIM-1) = CENTCD(2,IMO+MOIM-1) - PBCY
            CENTCD(3,IMO+MOIM-1) = CENTCD(3,IMO+MOIM-1) - PBCZ
            ENDDO
C
            GOTO 500
 600        CONTINUE
C
            CALL VCLR(TAB,1,MXMO*MXMO)
            CALL TFSQP(TAB,TMAT,PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
C
C           COMPUTE EXCHANGE-REPULSION ENERGY
C
            XR10 = ZERO
            XR20 = ZERO
            XR30 = ZERO
            EPEN0 = ZERO
            DO 200 I = JFIRST, JLAST
               XI  = CENTCD(1,JMO+I-1)
               YI  = CENTCD(2,JMO+I-1)
               ZI  = CENTCD(3,JMO+I-1)
C
C              -- VIB
C
               VIB = ZERO
C  GOTO 212 AVOIDS DOUBLE-COUNTING ELECTRON-NUCLEAR INTERACTIONS
               IF (MLSWTCH.EQ.2) GOTO 212
               IF (MLSWTCH.EQ.4) GOTO 212
               DO JZB = 1, NAT(IM)
                  XJZB=PRCORD(1,INAT+JZB-1)
                  YJZB=PRCORD(2,INAT+JZB-1)
                  ZJZB=PRCORD(3,INAT+JZB-1)
                  RIJZB = SQRT((XI-XJZB)*(XI-XJZB)+
     *                         (YI-YJZB)*(YI-YJZB)+
     *                         (ZI-ZJZB)*(ZI-ZJZB))
                  ZB=EFZNUC(INAT+JZB-1)
                  VIB = VIB - ZB/RIJZB
               ENDDO
 212           CONTINUE
               DO L = IFIRST, ILAST
                  XL  = CENTCD(1,IMO+L-1)
                  YL  = CENTCD(2,IMO+L-1)
                  ZL  = CENTCD(3,IMO+L-1)
                  RIL = SQRT((XI-XL)*(XI-XL)+
     *                       (YI-YL)*(YI-YL)+
     *                       (ZI-ZL)*(ZI-ZL))
                  VIB = VIB + JCOEFF/RIL
               ENDDO
C
               DO 300 J = IFIRST, ILAST
                  XJ  = CENTCD(1,IMO+J-1)
                  YJ  = CENTCD(2,IMO+J-1)
                  ZJ  = CENTCD(3,IMO+J-1)
C
C                 -- VJA
C
                  VJA = ZERO
                  IF (MLSWTCH.GT.2) GOTO 224
                  DO IZA = 1, NAT(JM)
                     XIZA=PRCORD(1,JNAT+IZA-1)
                     YIZA=PRCORD(2,JNAT+IZA-1)
                     ZIZA=PRCORD(3,JNAT+IZA-1)
                     RJIZA = SQRT((XJ-XIZA)*(XJ-XIZA)+
     *                            (YJ-YIZA)*(YJ-YIZA)+
     *                            (ZJ-ZIZA)*(ZJ-ZIZA))
                     ZB=EFZNUC(JNAT+IZA-1)
                     VJA = VJA - ZB/RJIZA
                  ENDDO
 224              CONTINUE
C
                  DO K = JFIRST, JLAST
                     XK  = CENTCD(1,JMO+K-1)
                     YK  = CENTCD(2,JMO+K-1)
                     ZK  = CENTCD(3,JMO+K-1)
                     RJK = SQRT((XJ-XK)*(XJ-XK)+
     *                          (YJ-YK)*(YJ-YK)+
     *                          (ZJ-ZK)*(ZJ-ZK))
                     VJA = VJA + JCOEFF/RJK
                  ENDDO
C
C                 -- SIJ, TIJ, RIJ
C
                  SIJ = SAB(I,J)
                  SIJ2= SIJ*SIJ
                  TIJ = TAB(I,J)
                  RIJ = SQRT((XI-XJ)*(XI-XJ)+
     *                       (YI-YJ)*(YI-YJ)+
     *                       (ZI-ZJ)*(ZI-ZJ))
                  ONERIJ=ONE/RIJ
C
C                 -- 1ST TERM
C
                  IF (ABS(SIJ) .GT. 1.0D-07) THEN
                     RTLNS= SQRT(-LOG(ABS(SIJ)))
                     XR10 = XR10 - TWO*RT2PI*RTLNS*SIJ2*ONERIJ
                  END IF
C
C                -ELECTROST. DAMPING HERE-
                  IF (IELECS .EQ. 1) THEN
                     IF (ABS(SIJ) .GT. 1.0D-07) THEN
                        EPEN0 = EPEN0-ONE/(SQRT(TWO)*RTLNS)*SIJ2*ONERIJ
C         EXACT ERF FORMULA: DOESN'T GIVE ANY IMPROVEMENT
C                   EPEN0 = EPEN0-TWO*(ONE-ERF(SQRT(TWO)*RTLNS))*ONERIJ
C                   WRITE(6,*)'SAB,R ',I,J,'   ',SIJ,'      ',RIJ
                     END IF
                  END IF
C
C                 -- 2ND TERM
C
                  FIJ  = ZERO
                  DO K = JFIRST, JLAST
                     FIJ = FIJ + FA(I,K)*SAB(K,J)
                  END DO
                  FJI  = ZERO
                  DO L = IFIRST, ILAST
                     FJI = FJI + FB(J,L)*SAB(I,L)
                  END DO
                  XR20 = XR20 - SIJ*(FIJ+FJI-TWO*TIJ)
C
C                 -- 3RD TERM
C
                  XR30 = XR30 + SIJ2*(VIB+VJA-ONERIJ)
C
 300           CONTINUE
 200        CONTINUE
C
C           -- APPLY SWITCHING FUNCTIONS
C
            XR10 = XR10*SWF
            XR20 = XR20*SWF
            XR30 = XR30*SWF
            EPEN0 = EPEN0*SWF
C
            ENXR = ENXR + ICOEFF*(XR10+XR20+XR30)
            EPEN = EPEN + EPEN0
C
            EFCENT(1,MI) = EFCENT(1,MI) - PBCX
            EFCENT(2,MI) = EFCENT(2,MI) - PBCY
            EFCENT(3,MI) = EFCENT(3,MI) - PBCZ
            DO NATIM=1,NAT(IM)
            PRCORD(1,INAT+NATIM-1) = PRCORD(1,INAT+NATIM-1) - PBCX
            PRCORD(2,INAT+NATIM-1) = PRCORD(2,INAT+NATIM-1) - PBCY
            PRCORD(3,INAT+NATIM-1) = PRCORD(3,INAT+NATIM-1) - PBCZ
            ENDDO
            DO MOIM=IFIRST,ILAST
            CENTCD(1,IMO+MOIM-1) = CENTCD(1,IMO+MOIM-1) - PBCX
            CENTCD(2,IMO+MOIM-1) = CENTCD(2,IMO+MOIM-1) - PBCY
            CENTCD(3,IMO+MOIM-1) = CENTCD(3,IMO+MOIM-1) - PBCZ
            ENDDO
C
 500        CONTINUE
 502        CONTINUE
            IMO = IMO + NORB(MI)
            INAT = INAT + NAT(IM)
         END DO
         JMO = JMO + NORB(MJ)
         JNAT = JNAT + NAT(JM)
      END DO
C
      IF(GOPARR) CALL DDI_GSUMF(1510,ENXR,1)
      IF(GOPARR) CALL DDI_GSUMF(1509,EPEN,1)
      IF(GOPARR) CALL DDI_GSUMF(1511,SAB_SAVE,NFRG*NFRG*MXMO*MXMO)
      RETURN
      END
C*MODULE EFPAUL  *DECK GEXREP
      SUBROUTINE GEXREP(ENXR,PROVEC,FOCKMA,SMAT,TMAT,WRK,SAB,TAB,
     *                  FA,FB,DPVEC,DSINT,DTINT,DSAB,
     *                  DTAB,WRK2,GXRFRG,SAB_SAVE,SAB_GRAD,
     *                  MXBF,MXMO,XRFRG,EPEN)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
C
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,
     *           MXSHEF=1000, MXGEFP=4000,
     *           MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00,
     *           FOUR=4.0D+00, RT2PI=0.7978845608028654D+00)
C
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NAT(MXDFG),NUM(MXDFG),NTPATM
      COMMON /EFPGCX/ DCTFRG(6,MXFRG),DXRFRG(6,MXFRG)
      COMMON /EFPPBC/ XBOX,YBOX,ZBOX,XCUT,YCUT,ZCUT,RCUT
     *                ,SWR1,SWR2,ISWF
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
C
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /EFPSCR/ POLAB(MXFRG),B,SCROFF,IELECS,IDISPS,NEW_POL
C
      DIMENSION PROVEC(MXBF,NTMO),FOCKMA((MXMO*MXMO+MXMO)/2,NFRG),
     *          SMAT(MXBF,MXBF),TMAT(MXBF,MXBF),
     *          WRK(MXBF),SAB(MXMO,MXMO),TAB(MXMO,MXMO),
     *          FA(MXMO,MXMO), FB(MXMO,MXMO)
     *          ,SAB_SAVE(NFRG,NFRG,MXMO,MXMO)
     *          ,SAB_GRAD(NFRG,NFRG,MXMO,MXMO,6)
      DIMENSION DSINT(MXBF,MXBF,6),DTINT(MXBF,MXBF,6),
     *          DSAB(MXMO,MXMO,6),DTAB(MXMO,MXMO,6),DPVEC(MXBF,NTMO,3),
     *          WRK2(MXMO,MXMO),GXRFRG(6,NFRG,NFRG),XRFRG(4,6,NFRG,NFRG)
C
C     CALCULATE THE EFP EXCHANGE-REPULSION GRADIENTS
C     HUI LI, 02/27/2005, AMES
C
C  ---- OVERLAP & OVERLAP DERIVATIVES MATRICES; USED IN DEISPERSION
C  ---- DAMPING FORMULA
      CALL VCLR(SAB_SAVE,1,NFRG*NFRG*MXMO*MXMO)
      CALL VCLR(SAB_GRAD,1,NFRG*NFRG*MXMO*MXMO*6)
C
      ENXR = ZERO
      EPEN = ZERO
      DO ICRD =1, 6
         DO IFRG=1,NFRG
           DXRFRG(ICRD,IFRG) = ZERO
           DO JFRG=1,NFRG
              GXRFRG(ICRD,JFRG,IFRG)= ZERO
              DO MFRG=1,4
              XRFRG(MFRG,ICRD,JFRG,IFRG)=ZERO
              END DO
           END DO
         END DO
      END DO
      IF(NTMO.EQ.0) RETURN
C
C     NOTE 'JM' IS MOLECULAE 'A', 'IM' IS MOLECULE 'B'
C
C     - INITIALIZE PARALLEL
      IPCOUNT = ME - 1
C
      MLSWTCH=0
      ICOEFF=0
      JCOEFF=0
      KCOEFF=0
C
      JNAT = 1
      JMO = 1
      DO MJ = 1,NFRG
          COMX1 = EFCENT(1,MJ)
          COMY1 = EFCENT(2,MJ)
          COMZ1 = EFCENT(3,MJ)
C
         JM=ISET(MJ)
         INAT = 1
         IMO = 1
         CALL CPYTSQ(FOCKMA(1,MJ),FA,MXMO,1)
         DO MI = 1,NFRG
            IM=ISET(MI)
            IF(MI.LE.MJ) GOTO 502
C
C           DDK - CALL MULCAL TO OBTAIN VALUES FOR COEFFICIENTS.
C           MLSWTCH ASSUMES CERTAIN MULTIPLICITY VALUES TO BE
C           TRUE.  IF THEY ARE, THE INTERACTIONS MUST BE CALCULATED
C           IF NOT, WE SKIP THE INTERACTION TYPE AND MOVE TO THE NEXT.
C           SEE ADDITIONAL COMMENTS IN EXREP
C
            DO 500 MLSWTCH = 1, 4
            CALL MULCAL(MJ,MI,MLSWTCH,MULI,MULJ,ICOEFF,JCOEFF,
     *                  KCOEFF,PCOEFF,JFIRST,JLAST,JDIFF,IFIRST,ILAST,
     *                  IDIFF,MCOEFF)
            IF (MLSWTCH .EQ. 2 .AND. MULI .EQ. 0) GOTO 500
            IF (MLSWTCH .EQ. 3 .AND. MULJ .EQ. 0) GOTO 500
            IF (MLSWTCH .EQ. 4 .AND. MULJ .EQ. 0) GOTO 500
            IF (MLSWTCH .EQ. 4 .AND. MULI .EQ. 0) GOTO 500
C
C           - GO PARALLEL!
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 502
            END IF
C
              COMX2 = EFCENT(1,MI)
              COMY2 = EFCENT(2,MI)
              COMZ2 = EFCENT(3,MI)
C
               COMX = COMX1 - COMX2
               COMY = COMY1 - COMY2
               COMZ = COMZ1 - COMZ2
C
               PBCX = ZERO
               PBCY = ZERO
               PBCZ = ZERO
               IF (XBOX .NE. ZERO) PBCX = XBOX * ANINT(COMX/XBOX)
               IF (YBOX .NE. ZERO) PBCY = YBOX * ANINT(COMY/YBOX)
               IF (ZBOX .NE. ZERO) PBCZ = ZBOX * ANINT(COMZ/ZBOX)
C
C   ----  DISTANCE BETWEEN FRAGMENTS
               X12  = ABS(COMX - PBCX)
               Y12  = ABS(COMY - PBCY)
               Z12  = ABS(COMZ - PBCZ)
               R12  = X12*X12+Y12*Y12+Z12*Z12
C
               SWF   = 1.0D+00
               SWFDX = 0.0D+00
               SWFDY = 0.0D+00
               SWFDZ = 0.0D+00
C
            IF(X12.GT.XCUT.OR.Y12.GT.YCUT.OR.Z12.GT.ZCUT) GOTO 502
            R12  = X12*X12+Y12*Y12+Z12*Z12
            IF(R12.GT.RCUT) GOTO 502
C
               IF(R12.GT.SWR2*SWR2) THEN
                 GOTO 502
               ELSE IF(R12.GT.SWR1*SWR1) THEN
                 IF(ISWF.EQ.1) THEN
                    DUMY1 = 1.0D+00/(SWR2*SWR2 - SWR1*SWR1)
                    DUMY2 = DUMY1*DUMY1
                    DUMY3 = DUMY2*DUMY1
                    DUMY4 = DUMY2*DUMY2
                    DUMY5 = DUMY2*DUMY3
                    VUMY1 = R12 - SWR1*SWR1
                    VUMY2 = VUMY1*VUMY1
                    VUMY3 = VUMY2*VUMY1
                    VUMY4 = VUMY2*VUMY2
                    VUMY5 = VUMY2*VUMY3
                    DSWF  = -30.0D+00*DUMY3*VUMY2
     *                      +60.0D+00*DUMY4*VUMY3
     *                      -30.0D+00*DUMY5*VUMY4
                    DSWF  = 2.0D+00*DSWF
                    SWF   = 1.0D+00 - 10.0D+00*DUMY3*VUMY3
     *                              + 15.0D+00*DUMY4*VUMY4
     *                              -  6.0D+00*DUMY5*VUMY5
                    SWFDX = DSWF*(EFCENT(1,MI)-EFCENT(1,MJ)+PBCX)
                    SWFDY = DSWF*(EFCENT(2,MI)-EFCENT(2,MJ)+PBCY)
                    SWFDZ = DSWF*(EFCENT(3,MI)-EFCENT(3,MJ)+PBCZ)
                 ELSE IF(ISWF.EQ.2) THEN
                    R12   = SQRT(R12)
                    PIL   = 3.1415926535897932D+00/(SWR2-SWR1)
                    DUMY  = (R12 - SWR1) * PIL
                    SWF   = 0.50D+00 * (COS(DUMY) + 1.0D+00)
                    DUMY2 =-0.50D+00 * SIN(DUMY) * PIL / R12
                    SWFDX = DUMY2*(EFCENT(1,MI)-EFCENT(1,MJ)+PBCX)
                    SWFDY = DUMY2*(EFCENT(2,MI)-EFCENT(2,MJ)+PBCY)
                    SWFDZ = DUMY2*(EFCENT(3,MI)-EFCENT(3,MJ)+PBCZ)
                 END IF
               END IF
C
            EFCENT(1,MI) = EFCENT(1,MI) + PBCX
            EFCENT(2,MI) = EFCENT(2,MI) + PBCY
            EFCENT(3,MI) = EFCENT(3,MI) + PBCZ
            DO NATIM=1,NAT(IM)
            PRCORD(1,INAT+NATIM-1) = PRCORD(1,INAT+NATIM-1) + PBCX
            PRCORD(2,INAT+NATIM-1) = PRCORD(2,INAT+NATIM-1) + PBCY
            PRCORD(3,INAT+NATIM-1) = PRCORD(3,INAT+NATIM-1) + PBCZ
            ENDDO
            DO MOIM=IFIRST,ILAST
            CENTCD(1,IMO+MOIM-1) = CENTCD(1,IMO+MOIM-1) + PBCX
            CENTCD(2,IMO+MOIM-1) = CENTCD(2,IMO+MOIM-1) + PBCY
            CENTCD(3,IMO+MOIM-1) = CENTCD(3,IMO+MOIM-1) + PBCZ
            ENDDO
C
            CALL CPYTSQ(FOCKMA(1,MI),FB,MXMO,1)
C
C           -- SAB AND TAB --
C
            CALL STINT(SMAT,TMAT,MXBF,MXBF,NAT(IM),NAT(JM),
     *                 NGAUSS(IM),NSHELL(IM),EX(1,IM),CS(1,IM),
     *                 CP(1,IM),CD(1,IM),CF(1,IM),CG(1,IM),KSTART(1,IM),
     *                 KATOM(1,IM),KTYPE(1,IM),KNG(1,IM),KLOC(1,IM),
     *                 KMIN(1,IM),KMAX(1,IM),NGAUSS(JM),NSHELL(JM),
     *                 EX(1,JM),CS(1,JM),CP(1,JM),CD(1,JM),CF(1,JM),
     *                 CG(1,JM),KSTART(1,JM),KATOM(1,JM),KTYPE(1,JM),
     *                 KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *                 PRCORD(1,INAT),PRCORD(1,JNAT))
            CALL VCLR(SAB,1,MXMO*MXMO)
            CALL TFSQP(SAB,SMAT,PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
C
            DO II = JFIRST, JLAST
               DO JJ = IFIRST, ILAST
C                 LVS: SAVE SAB FOR USE WITH DAMPING COEFFS
                  SAB_SAVE(MJ,MI,II,JJ) = SAB(II,JJ)
               END DO
            END DO
C
C           USE SAB TO CHECK IF THE XR TERM IS SIGNIFICANT
            DO II = JFIRST,JLAST
               DO JJ = IFIRST,ILAST
                  IF(ABS(SAB(II,JJ)).GT.1.0D-06) GOTO 600
               END DO
            END DO
C
            EFCENT(1,MI) = EFCENT(1,MI) - PBCX
            EFCENT(2,MI) = EFCENT(2,MI) - PBCY
            EFCENT(3,MI) = EFCENT(3,MI) - PBCZ
            DO NATIM=1,NAT(IM)
            PRCORD(1,INAT+NATIM-1) = PRCORD(1,INAT+NATIM-1) - PBCX
            PRCORD(2,INAT+NATIM-1) = PRCORD(2,INAT+NATIM-1) - PBCY
            PRCORD(3,INAT+NATIM-1) = PRCORD(3,INAT+NATIM-1) - PBCZ
            ENDDO
            DO MOIM=IFIRST,ILAST
            CENTCD(1,IMO+MOIM-1) = CENTCD(1,IMO+MOIM-1) - PBCX
            CENTCD(2,IMO+MOIM-1) = CENTCD(2,IMO+MOIM-1) - PBCY
            CENTCD(3,IMO+MOIM-1) = CENTCD(3,IMO+MOIM-1) - PBCZ
            ENDDO
C
            DO II = JFIRST, JLAST
               DO JJ = IFIRST, ILAST
                  SAB_SAVE(MJ,MI,II,JJ) = ZERO
               END DO
            END DO
C
            GOTO 502
 600        CONTINUE
C
            CALL VCLR(TAB,1,MXMO*MXMO)
            CALL TFSQP(TAB,TMAT,PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
C
C           -- DSAB AND DTAB --
C
            CALL DSTINT(MJ,DSINT,DTINT,MXBF,MXBF,NAT(IM),NAT(JM),
     *                 NGAUSS(IM),NSHELL(IM),EX(1,IM),CS(1,IM),
     *                 CP(1,IM),CD(1,IM),CF(1,IM),CG(1,IM),KSTART(1,IM),
     *                 KATOM(1,IM),KTYPE(1,IM),KNG(1,IM),KLOC(1,IM),
     *                 KMIN(1,IM),KMAX(1,IM),NGAUSS(JM),NSHELL(JM),
     *                 EX(1,JM),CS(1,JM),CP(1,JM),CD(1,JM),CF(1,JM),
     *                 CG(1,JM),KSTART(1,JM),KATOM(1,JM),KTYPE(1,JM),
     *                 KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *                 PRCORD(1,INAT),PRCORD(1,JNAT))
            CALL VCLR(DSAB,1,MXMO*MXMO*6)
            CALL VCLR(DTAB,1,MXMO*MXMO*6)
            DO ICRD=1,6
            CALL TFSQP(DSAB(1,1,ICRD),DSINT(1,1,ICRD),
     *                 PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
            CALL TFSQP(DTAB(1,1,ICRD),DTINT(1,1,ICRD),
     *                 PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
            END DO
            DO ICRD=1,3
               CALL VCLR(WRK2,1,MXMO*MXMO)
               CALL TFSQP(WRK2,SMAT,DPVEC(1,JMO,ICRD),PROVEC(1,IMO),
     *                    WRK,MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,
     *                    .FALSE.)
               DO II=1,MXMO
               DO JJ=1,MXMO
                  DSAB(JJ,II,ICRD+3)=DSAB(JJ,II,ICRD+3)+WRK2(JJ,II)
               END DO
               END DO
               CALL VCLR(WRK2,1,MXMO*MXMO)
               CALL TFSQP(WRK2,TMAT,DPVEC(1,JMO,ICRD),PROVEC(1,IMO),
     *                    WRK,MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,
     *                    .FALSE.)
               DO II=1,MXMO
               DO JJ=1,MXMO
                  DTAB(JJ,II,ICRD+3)=DTAB(JJ,II,ICRD+3)+WRK2(JJ,II)
               END DO
               END DO
            END DO
C
            DO ICRD=1,6
            DO II = JFIRST, JLAST
               DO JJ = IFIRST, ILAST
C                 LVS: SAVE SAB_GRAD FOR USE WITH DAMPING COEFFS
                  SAB_GRAD(MJ,MI,II,JJ,ICRD) = DSAB(II,JJ,ICRD)
               END DO
            END DO
            END DO
C
C           COMPUTE EXCHANGE-REPULSION GRADIENTS
C
            XR10 = ZERO
            XR20 = ZERO
            XR30 = ZERO
            G11=ZERO
            G12=ZERO
            G13=ZERO
            G14=ZERO
            G15=ZERO
            G16=ZERO
            G21=ZERO
            G22=ZERO
            G23=ZERO
            G24=ZERO
            G25=ZERO
            G26=ZERO
            G31=ZERO
            G32=ZERO
            G33=ZERO
            G34=ZERO
            G35=ZERO
            G36=ZERO
            GPEN1 = ZERO
            GPEN2 = ZERO
            GPEN3 = ZERO
            GPEN4 = ZERO
            GPEN5 = ZERO
            GPEN6 = ZERO
            EPEN0 = ZERO
            DO 200 I = JFIRST, JLAST
               XI  = CENTCD(1,JMO+I-1)
               YI  = CENTCD(2,JMO+I-1)
               ZI  = CENTCD(3,JMO+I-1)
C
C              -- VIB
C
               VIB  =ZERO
               DVIB1=ZERO
               DVIB2=ZERO
               DVIB3=ZERO
               DVIB4=ZERO
               DVIB5=ZERO
               DVIB6=ZERO
               IF (MLSWTCH.EQ.2) GOTO 212
               IF (MLSWTCH.EQ.4) GOTO 212
               DO JZB = 1, NAT(IM)
                  DX=XI-PRCORD(1,INAT+JZB-1)
                  DY=YI-PRCORD(2,INAT+JZB-1)
                  DZ=ZI-PRCORD(3,INAT+JZB-1)
                  RIJZB2= DX*DX+DY*DY+DZ*DZ
                  RIJZB = SQRT(RIJZB2)
                  ZB=EFZNUC(INAT+JZB-1)
                  VIB = VIB - ZB/RIJZB
                  DUM = ZB/RIJZB/RIJZB2
C
                    DVIB1=DVIB1+DUM*DX
                    DVIB2=DVIB2+DUM*DY
                    DVIB3=DVIB3+DUM*DZ
                    DVIB4=DVIB4+DUM*
     *                  (-DZ*(YI-EFCENT(2,MJ))+DY*(ZI-EFCENT(3,MJ)))
                    DVIB5=DVIB5+DUM*
     *                  (-DX*(ZI-EFCENT(3,MJ))+DZ*(XI-EFCENT(1,MJ)))
                    DVIB6=DVIB6+DUM*
     *                  (-DY*(XI-EFCENT(1,MJ))+DX*(YI-EFCENT(2,MJ)))
               ENDDO
 212           CONTINUE
               DO L = IFIRST, ILAST
                  DX=XI-CENTCD(1,IMO+L-1)
                  DY=YI-CENTCD(2,IMO+L-1)
                  DZ=ZI-CENTCD(3,IMO+L-1)
                  RIL2= DX*DX+DY*DY+DZ*DZ
                  RIL = SQRT(RIL2)
                  VIB = VIB + JCOEFF/RIL
                  DUM = JCOEFF/RIL/RIL2
C
                    DVIB1=DVIB1-DUM*DX
                    DVIB2=DVIB2-DUM*DY
                    DVIB3=DVIB3-DUM*DZ
                    DVIB4=DVIB4-DUM*
     *                  (-DZ*(YI-EFCENT(2,MJ))+DY*(ZI-EFCENT(3,MJ)))
                    DVIB5=DVIB5-DUM*
     *                  (-DX*(ZI-EFCENT(3,MJ))+DZ*(XI-EFCENT(1,MJ)))
                    DVIB6=DVIB6-DUM*
     *                  (-DY*(XI-EFCENT(1,MJ))+DX*(YI-EFCENT(2,MJ)))
               ENDDO
C
               DO 300 J = IFIRST, ILAST
                  XJ  = CENTCD(1,IMO+J-1)
                  YJ  = CENTCD(2,IMO+J-1)
                  ZJ  = CENTCD(3,IMO+J-1)
C
C                 -- VJA
C
                  VJA  =ZERO
                  DVJA1=ZERO
                  DVJA2=ZERO
                  DVJA3=ZERO
                  DVJA4=ZERO
                  DVJA5=ZERO
                  DVJA6=ZERO
                  IF (MLSWTCH .GT. 2) GOTO 224
                  DO IZA = 1, NAT(JM)
                     DX=PRCORD(1,JNAT+IZA-1)-XJ
                     DY=PRCORD(2,JNAT+IZA-1)-YJ
                     DZ=PRCORD(3,JNAT+IZA-1)-ZJ
                     RJIZA2= DX*DX+DY*DY+DZ*DZ
                     RJIZA = SQRT(RJIZA2)
                     ZB=EFZNUC(JNAT+IZA-1)
                     VJA = VJA - ZB/RJIZA
                     DUM = ZB/RJIZA/RJIZA2
                     DVJA1=DVJA1+DUM*DX
                     DVJA2=DVJA2+DUM*DY
                     DVJA3=DVJA3+DUM*DZ
                     DVJA4=DVJA4+DUM*
     *                  (-DZ*(PRCORD(2,JNAT+IZA-1)-EFCENT(2,MJ))
     *                  +DY*(PRCORD(3,JNAT+IZA-1)-EFCENT(3,MJ)))
                     DVJA5=DVJA5+DUM*
     *                  (-DX*(PRCORD(3,JNAT+IZA-1)-EFCENT(3,MJ))
     *                  +DZ*(PRCORD(1,JNAT+IZA-1)-EFCENT(1,MJ)))
                     DVJA6=DVJA6+DUM*
     *                  (-DY*(PRCORD(1,JNAT+IZA-1)-EFCENT(1,MJ))
     *                  +DX*(PRCORD(2,JNAT+IZA-1)-EFCENT(2,MJ)))
                  ENDDO
 224              CONTINUE
                  DO K = JFIRST, JLAST
                     DX=CENTCD(1,JMO+K-1)-XJ
                     DY=CENTCD(2,JMO+K-1)-YJ
                     DZ=CENTCD(3,JMO+K-1)-ZJ
                     RJK2= DX*DX+DY*DY+DZ*DZ
                     RJK = SQRT(RJK2)
                     VJA = VJA + JCOEFF/RJK
                     DUM = JCOEFF/RJK/RJK2
                     DVJA1=DVJA1-DUM*DX
                     DVJA2=DVJA2-DUM*DY
                     DVJA3=DVJA3-DUM*DZ
                     DVJA4=DVJA4-DUM*
     *                  (-DZ*(CENTCD(2,JMO+K-1)-EFCENT(2,MJ))
     *                  +DY*(CENTCD(3,JMO+K-1)-EFCENT(3,MJ)))
                     DVJA5=DVJA5-DUM*
     *                  (-DX*(CENTCD(3,JMO+K-1)-EFCENT(3,MJ))
     *                  +DZ*(CENTCD(1,JMO+K-1)-EFCENT(1,MJ)))
                     DVJA6=DVJA6-DUM*
     *                  (-DY*(CENTCD(1,JMO+K-1)-EFCENT(1,MJ))
     *                  +DX*(CENTCD(2,JMO+K-1)-EFCENT(2,MJ)))
                  ENDDO
C
C                 -- SIJ, TIJ, RIJ
C
                  SIJ = SAB(I,J)
                  SIJ2= SIJ*SIJ
                  TIJ = TAB(I,J)
                  RIJ2= (XI-XJ)*(XI-XJ)+
     *                  (YI-YJ)*(YI-YJ)+
     *                  (ZI-ZJ)*(ZI-ZJ)
                  ONERIJ2=ONE/RIJ2
                  RIJ = SQRT(RIJ2)
                  ONERIJ=ONE/RIJ
                  ONERIJ3=ONERIJ*ONERIJ2
C
C                 -- 1ST TERM
C
                  IF(ABS(SIJ) .GT. 1.0D-07) THEN
                     RTLNS= SQRT(-LOG(ABS(SIJ)))
                     XR10 = XR10 - TWO*RT2PI*RTLNS*SIJ2*ONERIJ
                     DUM1 = (-RT2PI/RTLNS + FOUR*RT2PI*RTLNS)*SIJ*ONERIJ
                     DUM2 = TWO*RT2PI*RTLNS*SIJ2*ONERIJ3
                     G11  = G11 - DUM1*DSAB(I,J,1) + DUM2*(XI-XJ)
                     G12  = G12 - DUM1*DSAB(I,J,2) + DUM2*(YI-YJ)
                     G13  = G13 - DUM1*DSAB(I,J,3) + DUM2*(ZI-ZJ)
                     G14  = G14 - DUM1*DSAB(I,J,4) + DUM2*
     *                         (-(ZI-ZJ)*(YI-EFCENT(2,MJ))
     *                         +(YI-YJ)*(ZI-EFCENT(3,MJ)))
                     G15  = G15 - DUM1*DSAB(I,J,5) + DUM2*
     *                         (-(XI-XJ)*(ZI-EFCENT(3,MJ))
     *                         +(ZI-ZJ)*(XI-EFCENT(1,MJ)))
                     G16  = G16 - DUM1*DSAB(I,J,6) + DUM2*
     *                         (-(YI-YJ)*(XI-EFCENT(1,MJ))
     *                         +(XI-XJ)*(YI-EFCENT(2,MJ)))
                  END IF
C
C                -ELECTROST. DAMPING HERE-
                  IF (IELECS . EQ. 1) THEN
                     IF(ABS(SIJ) .GT. 1.0D-07) THEN
                     RTLNS= SQRT(-LOG(ABS(SIJ)))
                     EPEN0 = EPEN0-ONE/(SQRT(TWO)*RTLNS)*SIJ2*ONERIJ
                     DUM3 = ONE/(SQRT(TWO)*RTLNS)*SIJ2*ONERIJ3
                     DUM4 = -(TWO/RTLNS + ONE/(TWO*RTLNS*RTLNS*RTLNS))*
     *                      SIJ*ONERIJ/SQRT(TWO)
                     GPEN1 = GPEN1 + DUM4*DSAB(I,J,1) + DUM3*(XI-XJ)
                     GPEN2 = GPEN2 + DUM4*DSAB(I,J,2) + DUM3*(YI-YJ)
                     GPEN3 = GPEN3 + DUM4*DSAB(I,J,3) + DUM3*(ZI-ZJ)
                     GPEN4 = GPEN4 + DUM4*DSAB(I,J,4) + DUM3*
     *                         (-(ZI-ZJ)*(YI-EFCENT(2,MJ))
     *                         +(YI-YJ)*(ZI-EFCENT(3,MJ)))
                     GPEN5 = GPEN5 + DUM4*DSAB(I,J,5) + DUM3*
     *                         (-(XI-XJ)*(ZI-EFCENT(3,MJ))
     *                         +(ZI-ZJ)*(XI-EFCENT(1,MJ)))
                     GPEN6 = GPEN6 + DUM4*DSAB(I,J,6) + DUM3*
     *                         (-(YI-YJ)*(XI-EFCENT(1,MJ))
     *                         +(XI-XJ)*(YI-EFCENT(2,MJ)))
                  END IF
               END IF
C
C                 -- 2ND TERM
C
                  FIJ  = ZERO
                  DFIJ1= ZERO
                  DFIJ2= ZERO
                  DFIJ3= ZERO
                  DFIJ4= ZERO
                  DFIJ5= ZERO
                  DFIJ6= ZERO
                  DO K = JFIRST, JLAST
                     FAIK =  FA(I,K)
                     FIJ  =  FIJ + FAIK*SAB(K,J)
                     DFIJ1=DFIJ1 + FAIK*DSAB(K,J,1)
                     DFIJ2=DFIJ2 + FAIK*DSAB(K,J,2)
                     DFIJ3=DFIJ3 + FAIK*DSAB(K,J,3)
                     DFIJ4=DFIJ4 + FAIK*DSAB(K,J,4)
                     DFIJ5=DFIJ5 + FAIK*DSAB(K,J,5)
                     DFIJ6=DFIJ6 + FAIK*DSAB(K,J,6)
                  END DO
                  FJI  = ZERO
                  DFJI1= ZERO
                  DFJI2= ZERO
                  DFJI3= ZERO
                  DFJI4= ZERO
                  DFJI5= ZERO
                  DFJI6= ZERO
                  DO L = IFIRST, ILAST
                     FBJL =  FB(J,L)
                     FJI  =  FJI + FBJL*SAB(I,L)
                     DFJI1=DFJI1 + FBJL*DSAB(I,L,1)
                     DFJI2=DFJI2 + FBJL*DSAB(I,L,2)
                     DFJI3=DFJI3 + FBJL*DSAB(I,L,3)
                     DFJI4=DFJI4 + FBJL*DSAB(I,L,4)
                     DFJI5=DFJI5 + FBJL*DSAB(I,L,5)
                     DFJI6=DFJI6 + FBJL*DSAB(I,L,6)
                  END DO
                  DUM1 = (FIJ+FJI-TWO*TIJ)
                  XR20 = XR20 - SIJ*DUM1
                  G21=G21-DSAB(I,J,1)*DUM1
     *                   -SIJ*(DFIJ1+DFJI1-TWO*DTAB(I,J,1))
                  G22=G22-DSAB(I,J,2)*DUM1
     *                   -SIJ*(DFIJ2+DFJI2-TWO*DTAB(I,J,2))
                  G23=G23-DSAB(I,J,3)*DUM1
     *                   -SIJ*(DFIJ3+DFJI3-TWO*DTAB(I,J,3))
                  G24=G24-DSAB(I,J,4)*DUM1
     *                   -SIJ*(DFIJ4+DFJI4-TWO*DTAB(I,J,4))
                  G25=G25-DSAB(I,J,5)*DUM1
     *                   -SIJ*(DFIJ5+DFJI5-TWO*DTAB(I,J,5))
                  G26=G26-DSAB(I,J,6)*DUM1
     *                   -SIJ*(DFIJ6+DFJI6-TWO*DTAB(I,J,6))
C
C                 -- 3RD TERM
C
                  XR30 = XR30 + SIJ2*(VIB+VJA-ONERIJ)
                  DUM1 = TWO*SIJ*(VIB+VJA-ONERIJ)
                  G31  =  G31 + DUM1*DSAB(I,J,1)
     *                        + SIJ2*(DVIB1+DVJA1+ONERIJ3*(XI-XJ))
                  G32  =  G32 + DUM1*DSAB(I,J,2)
     *                        + SIJ2*(DVIB2+DVJA2+ONERIJ3*(YI-YJ))
                  G33  =  G33 + DUM1*DSAB(I,J,3)
     *                        + SIJ2*(DVIB3+DVJA3+ONERIJ3*(ZI-ZJ))
                  G34  =  G34 + DUM1*DSAB(I,J,4)
     *                        + SIJ2*(DVIB4+DVJA4+ONERIJ3*
     *                          (-(ZI-ZJ)*(YI-EFCENT(2,MJ))
     *                          +(YI-YJ)*(ZI-EFCENT(3,MJ))))
                  G35  =  G35 + DUM1*DSAB(I,J,5)
     *                        + SIJ2*(DVIB5+DVJA5+ONERIJ3*
     *                          (-(XI-XJ)*(ZI-EFCENT(3,MJ))
     *                          +(ZI-ZJ)*(XI-EFCENT(1,MJ))))
                  G36  =  G36 + DUM1*DSAB(I,J,6)
     *                        + SIJ2*(DVIB6+DVJA6+ONERIJ3*
     *                          (-(YI-YJ)*(XI-EFCENT(1,MJ))
     *                          +(XI-XJ)*(YI-EFCENT(2,MJ))))
C
 300           CONTINUE
 200        CONTINUE
            ENXR = ENXR + SWF*ICOEFF*(XR10+XR20+XR30)
            EPEN = EPEN + SWF*EPEN0
C
            XRFRG(MLSWTCH,1,MI,MJ) = XRFRG(MLSWTCH,1,MI,MJ)+
     *                                (MCOEFF*(G11+G21+G31))+GPEN1
            XRFRG(MLSWTCH,2,MI,MJ) = XRFRG(MLSWTCH,2,MI,MJ)+
     *                               (MCOEFF*(G12+G22+G32))+GPEN2
            XRFRG(MLSWTCH,3,MI,MJ) = XRFRG(MLSWTCH,3,MI,MJ)+
     *                                (MCOEFF*(G13+G23+G33))+GPEN3
            XRFRG(MLSWTCH,4,MI,MJ) = XRFRG(MLSWTCH,4,MI,MJ)+
     *                                (MCOEFF*(G14+G24+G34))+GPEN4
            XRFRG(MLSWTCH,5,MI,MJ) = XRFRG(MLSWTCH,5,MI,MJ)+
     *                                (MCOEFF*(G15+G25+G35))+GPEN5
            XRFRG(MLSWTCH,6,MI,MJ) = XRFRG(MLSWTCH,6,MI,MJ)+
     *                                (MCOEFF*(G16+G26+G36))+GPEN6
C
C           -- APPLY SWITCHING FUNCTIONS
C
C              - ALL GRADIENTS ARE MULTIPLIED BY SWF
C
            DO KK = 1, 6
               XRFRG(MLSWTCH,KK,MI,MJ) = SWF*XRFRG(MLSWTCH,KK,MI,MJ)
               XRFRG(MLSWTCH,KK,MJ,MI) = SWF*XRFRG(MLSWTCH,KK,MJ,MI)
            ENDDO
C
C
C            XRAB = ICOEFF*(XR10+XR20+XR30)
            XRAB = ICOEFF*(XR10+XR20+XR30)+EPEN0
            XRFRG(MLSWTCH,1,MI,MJ) = XRFRG(MLSWTCH,1,MI,MJ) - SWFDX*XRAB
            XRFRG(MLSWTCH,2,MI,MJ) = XRFRG(MLSWTCH,2,MI,MJ) - SWFDY*XRAB
            XRFRG(MLSWTCH,3,MI,MJ) = XRFRG(MLSWTCH,3,MI,MJ) - SWFDZ*XRAB
C
            XRFRG(MLSWTCH,1,MJ,MI) = XRFRG(MLSWTCH,1,MJ,MI) + SWFDX*XRAB
            XRFRG(MLSWTCH,2,MJ,MI) = XRFRG(MLSWTCH,2,MJ,MI) + SWFDY*XRAB
            XRFRG(MLSWTCH,3,MJ,MI) = XRFRG(MLSWTCH,3,MJ,MI) + SWFDZ*XRAB
C
 500        CONTINUE
C
            GXRFRG(1,MI,MJ) = XRFRG(1,1,MI,MJ) +XRFRG(2,1,MI,MJ)+
     *                  XRFRG(3,1,MI,MJ) +XRFRG(4,1,MI,MJ)
            GXRFRG(2,MI,MJ) = XRFRG(1,2,MI,MJ) +XRFRG(2,2,MI,MJ)+
     *                  XRFRG(3,2,MI,MJ) +XRFRG(4,2,MI,MJ)
            GXRFRG(3,MI,MJ) = XRFRG(1,3,MI,MJ) +XRFRG(2,3,MI,MJ)+
     *                  XRFRG(3,3,MI,MJ) +XRFRG(4,3,MI,MJ)
            GXRFRG(4,MI,MJ) = XRFRG(1,4,MI,MJ) +XRFRG(2,4,MI,MJ)+
     *                  XRFRG(3,4,MI,MJ) +XRFRG(4,4,MI,MJ)
            GXRFRG(5,MI,MJ) = XRFRG(1,5,MI,MJ) +XRFRG(2,5,MI,MJ)+
     *                  XRFRG(3,5,MI,MJ) +XRFRG(4,5,MI,MJ)
            GXRFRG(6,MI,MJ) = XRFRG(1,6,MI,MJ) +XRFRG(2,6,MI,MJ)+
     *                  XRFRG(3,6,MI,MJ) +XRFRG(4,6,MI,MJ)
C
            GXRFRG(4,MI,MJ) = -GXRFRG(4,MI,MJ)
            GXRFRG(5,MI,MJ) = -GXRFRG(5,MI,MJ)
            GXRFRG(6,MI,MJ) = -GXRFRG(6,MI,MJ)
C
            GXRFRG(1,MJ,MI) = -GXRFRG(1,MI,MJ)
            GXRFRG(2,MJ,MI) = -GXRFRG(2,MI,MJ)
            GXRFRG(3,MJ,MI) = -GXRFRG(3,MI,MJ)
            GXRFRG(4,MJ,MI) = -GXRFRG(4,MI,MJ) -
     *                 GXRFRG(2,MI,MJ)*(EFCENT(3,MI)-EFCENT(3,MJ)) +
     *                 GXRFRG(3,MI,MJ)*(EFCENT(2,MI)-EFCENT(2,MJ))
            GXRFRG(5,MJ,MI) = -GXRFRG(5,MI,MJ) -
     *                 GXRFRG(3,MI,MJ)*(EFCENT(1,MI)-EFCENT(1,MJ)) +
     *                 GXRFRG(1,MI,MJ)*(EFCENT(3,MI)-EFCENT(3,MJ))
            GXRFRG(6,MJ,MI) = -GXRFRG(6,MI,MJ) -
     *                 GXRFRG(1,MI,MJ)*(EFCENT(2,MI)-EFCENT(2,MJ)) +
     *                 GXRFRG(2,MI,MJ)*(EFCENT(1,MI)-EFCENT(1,MJ))
C
            EFCENT(1,MI) = EFCENT(1,MI) - PBCX
            EFCENT(2,MI) = EFCENT(2,MI) - PBCY
            EFCENT(3,MI) = EFCENT(3,MI) - PBCZ
            DO NATIM=1,NAT(IM)
            PRCORD(1,INAT+NATIM-1) = PRCORD(1,INAT+NATIM-1) - PBCX
            PRCORD(2,INAT+NATIM-1) = PRCORD(2,INAT+NATIM-1) - PBCY
            PRCORD(3,INAT+NATIM-1) = PRCORD(3,INAT+NATIM-1) - PBCZ
            ENDDO
            DO MOIM=IFIRST,ILAST
            CENTCD(1,IMO+MOIM-1) = CENTCD(1,IMO+MOIM-1) - PBCX
            CENTCD(2,IMO+MOIM-1) = CENTCD(2,IMO+MOIM-1) - PBCY
            CENTCD(3,IMO+MOIM-1) = CENTCD(3,IMO+MOIM-1) - PBCZ
            ENDDO
C
 502        CONTINUE
            IMO = IMO + NORB(MI)
            INAT = INAT + NAT(IM)
         END DO
         JMO = JMO + NORB(MJ)
         JNAT = JNAT + NAT(JM)
      END DO
C     - SUM UP
      IF(GOPARR) THEN
         CALL DDI_GSUMF(1510,ENXR,1)
         CALL DDI_GSUMF(1509,EPEN,1)
         CALL DDI_GSUMF(1511,GXRFRG,6*NFRG*NFRG)
         CALL DDI_GSUMF(1512,SAB_SAVE,NFRG*NFRG*MXMO*MXMO)
         CALL DDI_GSUMF(1513,SAB_GRAD,NFRG*NFRG*MXMO*MXMO*6)
      END IF
C
      DO IFRG = 1, NFRG
      DO ICRD = 1, 6
      DO JFRG = 1, NFRG
            DXRFRG(ICRD,IFRG)=DXRFRG(ICRD,IFRG)+GXRFRG(ICRD,JFRG,IFRG)
      END DO
      END DO
      END DO
C
      RETURN
      END
C
C*MODULE EFPAUL  *DECK GEXREP
      SUBROUTINE GEXREP_FP(ENXR,PROVEC,FOCKMA,SMAT,TMAT,WRK,SAB,TAB,
     *                  FA,FB,DPVEC,DSINT,DTINT,DSAB,
     *                  DTAB,WRK2,GXRFRG,SAB_SAVE,SAB_GRAD,
     *                  MXBF,MXMO,XRFRG,EPEN)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL GOPARR, DSKWRK, MASWRK
      LOGICAL IFRCPNT
      CHARACTER*8 FRCNME
C
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,
     *           MXSHEF=1000, MXGEFP=4000,
     *           MXDPPT=MXFRG*MXDFG*12)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00,
     *           FOUR=4.0D+00, RT2PI=0.7978845608028654D+00)
C
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NAT(MXDFG),NUM(MXDFG),NTPATM
      COMMON /EFPFRC/ IFRCPNT,NTFRCPN,NFRCPNT(MXFRG),LSTFPTS(MXFRG),
     *                 FRCCRD(3,MXFGPT),FRCNME(MXFGPT),FRCTRQ(6,MXFGPT)
     *                 ,FRCTRQX(6,MXFGPT)
      COMMON /EFPGCX/ DCTFRG(6,MXFRG),DXRFRG(6,MXFRG)
      COMMON /EFPPBC/ XBOX,YBOX,ZBOX,XCUT,YCUT,ZCUT,RCUT
     *                ,SWR1,SWR2,ISWF
      COMMON /FGRAD / DEF(3,MXFGPT),DEFT(3,MXFRG),TORQ(3,MXFRG),
     *                EFCENT(3,MXFRG),FRGMAS(MXFRG),FRGMI(6,MXFRG),
     *                ATORQ(3,MXFRG)
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
C
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /EFPSCR/ POLAB(MXFRG),B,SCROFF,IELECS,IDISPS,NEW_POL
C
      DIMENSION PROVEC(MXBF,NTMO),FOCKMA((MXMO*MXMO+MXMO)/2,NFRG),
     *          SMAT(MXBF,MXBF),TMAT(MXBF,MXBF),
     *          WRK(MXBF),SAB(MXMO,MXMO),TAB(MXMO,MXMO),
     *          FA(MXMO,MXMO), FB(MXMO,MXMO)
     *          ,SAB_SAVE(NFRG,NFRG,MXMO,MXMO)
     *          ,SAB_GRAD(NFRG,NFRG,MXMO,MXMO,6)
      DIMENSION DSINT(MXBF,MXBF,6),DTINT(MXBF,MXBF,6),
     *          DSAB(MXMO,MXMO,6),DTAB(MXMO,MXMO,6),DPVEC(MXBF,NTMO,3),
     *          WRK2(MXMO,MXMO),GXRFRG(6,NFRG,NFRG),XRFRG(4,6,NFRG,NFRG)
     *          ,IFP1(10),IFP2(10),
     *          TRQ1(MXFGPT),TRQ2(MXFGPT),TRQ3(MXFGPT)
C
C     CALCULATE THE EFP EXCHANGE-REPULSION GRADIENTS AND GATHER THEM
C     AT FRORCE POINTS
C     TAKEN FROM GEXREP AT 12/08 BY LVS
C
C  ---- OVERLAP & OVERLAP DERIVATIVES MATRICES; USED IN DEISPERSION
C  ---- DAMPING FORMULA
      CALL VCLR(SAB_SAVE,1,NFRG*NFRG*MXMO*MXMO)
      CALL VCLR(SAB_GRAD,1,NFRG*NFRG*MXMO*MXMO*6)
      CALL VCLR(FRCTRQX,1,6*MXFGPT)
C
      ENXR = ZERO
      EPEN = ZERO
      DO ICRD =1, 6
         DO IFRG=1,NFRG
           DXRFRG(ICRD,IFRG) = ZERO
           DO JFRG=1,NFRG
              GXRFRG(ICRD,JFRG,IFRG)= ZERO
              DO MFRG=1,4
              XRFRG(MFRG,ICRD,JFRG,IFRG)=ZERO
              END DO
           END DO
         END DO
      END DO
      IF(NTMO.EQ.0) RETURN
C
C     NOTE 'JM' IS MOLECULAE 'A', 'IM' IS MOLECULE 'B'
C
C     - INITIALIZE PARALLEL
      IPCOUNT = ME - 1
C
      MLSWTCH=0
      ICOEFF=0
      JCOEFF=0
      KCOEFF=0
C
      JNAT = 1
      JMO = 1
      DO MJ = 1,NFRG
          COMX1 = EFCENT(1,MJ)
          COMY1 = EFCENT(2,MJ)
          COMZ1 = EFCENT(3,MJ)
C
         JM=ISET(MJ)
         INAT = 1
         IMO = 1
         CALL CPYTSQ(FOCKMA(1,MJ),FA,MXMO,1)
         DO MI = 1,NFRG
            IM=ISET(MI)
            IF(MI.LE.MJ) GOTO 502
C
C           DDK - CALL MULCAL TO OBTAIN VALUES FOR COEFFICIENTS.
C           MLSWTCH ASSUMES CERTAIN MULTIPLICITY VALUES TO BE
C           TRUE.  IF THEY ARE, THE INTERACTIONS MUST BE CALCULATED
C           IF NOT, WE SKIP THE INTERACTION TYPE AND MOVE TO THE NEXT.
C           SEE ADDITIONAL COMMENTS IN EXREP
C
            DO 500 MLSWTCH = 1, 4
            CALL MULCAL(MJ,MI,MLSWTCH,MULI,MULJ,ICOEFF,JCOEFF,
     *                  KCOEFF,PCOEFF,JFIRST,JLAST,JDIFF,IFIRST,ILAST,
     *                  IDIFF,MCOEFF)
            IF (MLSWTCH .EQ. 2 .AND. MULI .EQ. 0) GOTO 500
            IF (MLSWTCH .EQ. 3 .AND. MULJ .EQ. 0) GOTO 500
            IF (MLSWTCH .EQ. 4 .AND. MULJ .EQ. 0) GOTO 500
            IF (MLSWTCH .EQ. 4 .AND. MULI .EQ. 0) GOTO 500
C
C           - GO PARALLEL!
            IF(GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF(MOD(IPCOUNT,NPROC).NE.0) GO TO 502
            END IF
C
              COMX2 = EFCENT(1,MI)
              COMY2 = EFCENT(2,MI)
              COMZ2 = EFCENT(3,MI)
C
               COMX = COMX1 - COMX2
               COMY = COMY1 - COMY2
               COMZ = COMZ1 - COMZ2
C
               PBCX = ZERO
               PBCY = ZERO
               PBCZ = ZERO
               IF (XBOX .NE. ZERO) PBCX = XBOX * ANINT(COMX/XBOX)
               IF (YBOX .NE. ZERO) PBCY = YBOX * ANINT(COMY/YBOX)
               IF (ZBOX .NE. ZERO) PBCZ = ZBOX * ANINT(COMZ/ZBOX)
C
C   ----  DISTANCE BETWEEN FRAGMENTS
               X12  = ABS(COMX - PBCX)
               Y12  = ABS(COMY - PBCY)
               Z12  = ABS(COMZ - PBCZ)
               R12  = X12*X12+Y12*Y12+Z12*Z12
C
               SWF   = 1.0D+00
               SWFDX = 0.0D+00
               SWFDY = 0.0D+00
               SWFDZ = 0.0D+00
C
            IF(X12.GT.XCUT.OR.Y12.GT.YCUT.OR.Z12.GT.ZCUT) GOTO 502
            R12  = X12*X12+Y12*Y12+Z12*Z12
            IF(R12.GT.RCUT) GOTO 502
C
               IF(R12.GT.SWR2*SWR2) THEN
                 GOTO 502
               ELSE IF(R12.GT.SWR1*SWR1) THEN
                 IF(ISWF.EQ.1) THEN
                    DUMY1 = 1.0D+00/(SWR2*SWR2 - SWR1*SWR1)
                    DUMY2 = DUMY1*DUMY1
                    DUMY3 = DUMY2*DUMY1
                    DUMY4 = DUMY2*DUMY2
                    DUMY5 = DUMY2*DUMY3
                    VUMY1 = R12 - SWR1*SWR1
                    VUMY2 = VUMY1*VUMY1
                    VUMY3 = VUMY2*VUMY1
                    VUMY4 = VUMY2*VUMY2
                    VUMY5 = VUMY2*VUMY3
                    DSWF  = -30.0D+00*DUMY3*VUMY2
     *                      +60.0D+00*DUMY4*VUMY3
     *                      -30.0D+00*DUMY5*VUMY4
                    DSWF  = 2.0D+00*DSWF
                    SWF   = 1.0D+00 - 10.0D+00*DUMY3*VUMY3
     *                              + 15.0D+00*DUMY4*VUMY4
     *                              -  6.0D+00*DUMY5*VUMY5
                    SWFDX = DSWF*(EFCENT(1,MI)-EFCENT(1,MJ)+PBCX)
                    SWFDY = DSWF*(EFCENT(2,MI)-EFCENT(2,MJ)+PBCY)
                    SWFDZ = DSWF*(EFCENT(3,MI)-EFCENT(3,MJ)+PBCZ)
                 ELSE IF(ISWF.EQ.2) THEN
                    R12   = SQRT(R12)
                    PIL   = 3.1415926535897932D+00/(SWR2-SWR1)
                    DUMY  = (R12 - SWR1) * PIL
                    SWF   = 0.50D+00 * (COS(DUMY) + 1.0D+00)
                    DUMY2 =-0.50D+00 * SIN(DUMY) * PIL / R12
                    SWFDX = DUMY2*(EFCENT(1,MI)-EFCENT(1,MJ)+PBCX)
                    SWFDY = DUMY2*(EFCENT(2,MI)-EFCENT(2,MJ)+PBCY)
                    SWFDZ = DUMY2*(EFCENT(3,MI)-EFCENT(3,MJ)+PBCZ)
                 END IF
               END IF
C
            EFCENT(1,MI) = EFCENT(1,MI) + PBCX
            EFCENT(2,MI) = EFCENT(2,MI) + PBCY
            EFCENT(3,MI) = EFCENT(3,MI) + PBCZ
            DO NATIM=1,NAT(IM)
            PRCORD(1,INAT+NATIM-1) = PRCORD(1,INAT+NATIM-1) + PBCX
            PRCORD(2,INAT+NATIM-1) = PRCORD(2,INAT+NATIM-1) + PBCY
            PRCORD(3,INAT+NATIM-1) = PRCORD(3,INAT+NATIM-1) + PBCZ
            ENDDO
            DO MOIM=IFIRST,ILAST
            CENTCD(1,IMO+MOIM-1) = CENTCD(1,IMO+MOIM-1) + PBCX
            CENTCD(2,IMO+MOIM-1) = CENTCD(2,IMO+MOIM-1) + PBCY
            CENTCD(3,IMO+MOIM-1) = CENTCD(3,IMO+MOIM-1) + PBCZ
            ENDDO
            IF (IFRCPNT) THEN
              IFPT2 = LSTFPTS(MI)
              DO II=IFPT2,IFPT2+NFRCPNT(MI)-1
              FRCCRD(1,II) = FRCCRD(1,II) + PBCX
                FRCCRD(2,II) = FRCCRD(2,II) + PBCY
               FRCCRD(3,II) = FRCCRD(3,II) + PBCZ
              END DO
            END IF
C
            CALL CPYTSQ(FOCKMA(1,MI),FB,MXMO,1)
C
C           -- SAB AND TAB --
C
            CALL STINT(SMAT,TMAT,MXBF,MXBF,NAT(IM),NAT(JM),
     *                 NGAUSS(IM),NSHELL(IM),EX(1,IM),CS(1,IM),
     *                 CP(1,IM),CD(1,IM),CF(1,IM),CG(1,IM),KSTART(1,IM),
     *                 KATOM(1,IM),KTYPE(1,IM),KNG(1,IM),KLOC(1,IM),
     *                 KMIN(1,IM),KMAX(1,IM),NGAUSS(JM),NSHELL(JM),
     *                 EX(1,JM),CS(1,JM),CP(1,JM),CD(1,JM),CF(1,JM),
     *                 CG(1,JM),KSTART(1,JM),KATOM(1,JM),KTYPE(1,JM),
     *                 KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *                 PRCORD(1,INAT),PRCORD(1,JNAT))
            CALL VCLR(SAB,1,MXMO*MXMO)
            CALL TFSQP(SAB,SMAT,PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
C
            DO II = JFIRST, JLAST
               DO JJ = IFIRST, ILAST
C                 LVS: SAVE SAB FOR USE WITH DAMPING COEFFS
                  SAB_SAVE(MJ,MI,II,JJ) = SAB(II,JJ)
               END DO
            END DO
C
C           USE SAB TO CHECK IF THE XR TERM IS SIGNIFICANT
            DO II = JFIRST,JLAST
               DO JJ = IFIRST,ILAST
                  IF(ABS(SAB(II,JJ)).GT.1.0D-06) GOTO 600
               END DO
            END DO
C
            EFCENT(1,MI) = EFCENT(1,MI) - PBCX
            EFCENT(2,MI) = EFCENT(2,MI) - PBCY
            EFCENT(3,MI) = EFCENT(3,MI) - PBCZ
            DO NATIM=1,NAT(IM)
            PRCORD(1,INAT+NATIM-1) = PRCORD(1,INAT+NATIM-1) - PBCX
            PRCORD(2,INAT+NATIM-1) = PRCORD(2,INAT+NATIM-1) - PBCY
            PRCORD(3,INAT+NATIM-1) = PRCORD(3,INAT+NATIM-1) - PBCZ
            ENDDO
            DO MOIM=IFIRST,ILAST
            CENTCD(1,IMO+MOIM-1) = CENTCD(1,IMO+MOIM-1) - PBCX
            CENTCD(2,IMO+MOIM-1) = CENTCD(2,IMO+MOIM-1) - PBCY
            CENTCD(3,IMO+MOIM-1) = CENTCD(3,IMO+MOIM-1) - PBCZ
            ENDDO
C
            DO II = JFIRST, JLAST
               DO JJ = IFIRST, ILAST
                  SAB_SAVE(MJ,MI,II,JJ) = ZERO
               END DO
            END DO
C
            GOTO 502
 600        CONTINUE
C
            CALL VCLR(TAB,1,MXMO*MXMO)
            CALL TFSQP(TAB,TMAT,PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
C
C           -- DSAB AND DTAB --
C
            CALL DSTINT(MJ,DSINT,DTINT,MXBF,MXBF,NAT(IM),NAT(JM),
     *                 NGAUSS(IM),NSHELL(IM),EX(1,IM),CS(1,IM),
     *                 CP(1,IM),CD(1,IM),CF(1,IM),CG(1,IM),KSTART(1,IM),
     *                 KATOM(1,IM),KTYPE(1,IM),KNG(1,IM),KLOC(1,IM),
     *                 KMIN(1,IM),KMAX(1,IM),NGAUSS(JM),NSHELL(JM),
     *                 EX(1,JM),CS(1,JM),CP(1,JM),CD(1,JM),CF(1,JM),
     *                 CG(1,JM),KSTART(1,JM),KATOM(1,JM),KTYPE(1,JM),
     *                 KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *                 PRCORD(1,INAT),PRCORD(1,JNAT))
            CALL VCLR(DSAB,1,MXMO*MXMO*6)
            CALL VCLR(DTAB,1,MXMO*MXMO*6)
            DO ICRD=1,6
            CALL TFSQP(DSAB(1,1,ICRD),DSINT(1,1,ICRD),
     *                 PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
            CALL TFSQP(DTAB(1,1,ICRD),DTINT(1,1,ICRD),
     *                 PROVEC(1,JMO),PROVEC(1,IMO),WRK,
     *                 MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,.FALSE.)
            END DO
            DO ICRD=1,3
               CALL VCLR(WRK2,1,MXMO*MXMO)
               CALL TFSQP(WRK2,SMAT,DPVEC(1,JMO,ICRD),PROVEC(1,IMO),
     *                    WRK,MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,
     *                    .FALSE.)
               DO II=1,MXMO
               DO JJ=1,MXMO
                  DSAB(JJ,II,ICRD+3)=DSAB(JJ,II,ICRD+3)+WRK2(JJ,II)
               END DO
               END DO
               CALL VCLR(WRK2,1,MXMO*MXMO)
               CALL TFSQP(WRK2,TMAT,DPVEC(1,JMO,ICRD),PROVEC(1,IMO),
     *                    WRK,MXBF,MXBF,NORB(MJ),NORB(MI),MXMO,MXMO,
     *                    .FALSE.)
               DO II=1,MXMO
               DO JJ=1,MXMO
                  DTAB(JJ,II,ICRD+3)=DTAB(JJ,II,ICRD+3)+WRK2(JJ,II)
               END DO
               END DO
            END DO
C
            DO ICRD=1,6
            DO II = JFIRST, JLAST
               DO JJ = IFIRST, ILAST
C                 LVS: SAVE SAB_GRAD FOR USE WITH DAMPING COEFFS
                  SAB_GRAD(MJ,MI,II,JJ,ICRD) = DSAB(II,JJ,ICRD)
               END DO
            END DO
            END DO
C
C           COMPUTE EXCHANGE-REPULSION GRADIENTS
C
            XR10 = ZERO
            XR20 = ZERO
            XR30 = ZERO
            G11=ZERO
            G12=ZERO
            G13=ZERO
            G14=ZERO
            G15=ZERO
            G16=ZERO
            G21=ZERO
            G22=ZERO
            G23=ZERO
            G24=ZERO
            G25=ZERO
            G26=ZERO
            G31=ZERO
            G32=ZERO
            G33=ZERO
            G34=ZERO
            G35=ZERO
            G36=ZERO
            GPEN1 = ZERO
            GPEN2 = ZERO
            GPEN3 = ZERO
            GPEN4 = ZERO
            GPEN5 = ZERO
            GPEN6 = ZERO
            EPEN0 = ZERO
            DO 200 I = JFIRST, JLAST
               XI  = CENTCD(1,JMO+I-1)
               YI  = CENTCD(2,JMO+I-1)
               ZI  = CENTCD(3,JMO+I-1)
C
C                IF FORCE POINTS ARE ACTIVE
               IF(IFRCPNT) THEN
                 CALL NEARFP(MJ,XI,YI,ZI,IFP1,IFP1_COM,NEQUAL1)
               ENDIF
C
C---  DIMENSION IFPX(10)
C---            IF (0.EQ.1) THEN
C---C              -- VIB
C---C
C---               VIB  =ZERO
C---               DVIB1=ZERO
C---               DVIB2=ZERO
C---               DVIB3=ZERO
C---               DVIB4=ZERO
C---               DVIB5=ZERO
C---               DVIB6=ZERO
C---C
C---               DVIB1_FC=ZERO
C---               DVIB2_FC=ZERO
C---               DVIB3_FC=ZERO
C---               DVIB4_FC=ZERO
C---               DVIB5_FC=ZERO
C---               DVIB6_FC=ZERO
C---               DVIB4_FC2=ZERO
C---               DVIB5_FC2=ZERO
C---               DVIB6_FC2=ZERO
C---C
C---               IF (MLSWTCH.EQ.2) GOTO 212
C---               IF (MLSWTCH.EQ.4) GOTO 212
C---               DO JZB = 1, NAT(IM)
C---                  DX=XI-PRCORD(1,INAT+JZB-1)
C---                  DY=YI-PRCORD(2,INAT+JZB-1)
C---                  DZ=ZI-PRCORD(3,INAT+JZB-1)
C---                  RIJZB2= DX*DX+DY*DY+DZ*DZ
C---                  RIJZB = SQRT(RIJZB2)
C---                  ZB=EFZNUC(INAT+JZB-1)
C---                  VIB = VIB - ZB/RIJZB
C---                  DUM = ZB/RIJZB/RIJZB2
C---C
C---C   --- IF FORCE POINTS ARE ACTIVE - TORQUES SHOULD BE
C---C       CALCULATED DIFFERENTLY
C---                  IF(IFRCPNT) THEN
C---                     DVIB1_FC=DVIB1_FC + DUM*DX
C---                     DVIB2_FC=DVIB2_FC + DUM*DY
C---                     DVIB3_FC=DVIB3_FC + DUM*DZ
C---                      DO II=1,NEQUAL1
C---                       IFP = IFP1(II)
C---                       COEF=ONE/NEQUAL1
C---                     DVIB4_FC=DVIB4_FC + COEF*DUM*
C---     *                  (-DZ*(YI-FRCCRD(2,IFP))
C---     *                   +DY*(ZI-FRCCRD(3,IFP)))
C---                     DVIB5_FC=DVIB5_FC + COEF*DUM*
C---     *                  (-DX*(ZI-FRCCRD(3,IFP))
C---     *                   +DZ*(XI-FRCCRD(1,IFP)))
C---                     DVIB6_FC=DVIB6_FC + COEF*DUM*
C---     *                  (-DY*(XI-FRCCRD(1,IFP))
C---     *                   +DX*(YI-FRCCRD(2,IFP)))
C---                      END DO
C---C
C---                       CALL NEARFP(MI,PRCORD(1,INAT+JZB-1),
C---     *               PRCORD(2,INAT+JZB-1),PRCORD(3,INAT+JZB-1),
C---     *                      IFPX,IFPX_COM,NEQUALX)
C---                       DO II=1,NEQUALX
C---                       IFP = IFPX(II)
C---                       COEF=ONE/NEQUALX
C---                     DVIB4_FC2=DVIB4_FC2 + COEF*DUM*
C---     *                  (-DZ*(PRCORD(2,INAT+JZB-1)-FRCCRD(2,IFP))
C---     *                   +DY*(PRCORD(3,INAT+JZB-1)-FRCCRD(3,IFP)))
C---                     DVIB5_FC2=DVIB5_FC2 + COEF*DUM*
C---     *                  (-DX*(PRCORD(3,INAT+JZB-1)-FRCCRD(3,IFP))
C---     *                   +DZ*(PRCORD(1,INAT+JZB-1)-FRCCRD(1,IFP)))
C---                     DVIB6_FC2=DVIB6_FC2 + COEF*DUM*
C---     *                  (-DY*(PRCORD(1,INAT+JZB-1)-FRCCRD(1,IFP))
C---     *                   +DX*(PRCORD(2,INAT+JZB-1)-FRCCRD(2,IFP)))
C---                    END DO
C---                  END IF
C---                    DVIB1=DVIB1+DUM*DX
C---                    DVIB2=DVIB2+DUM*DY
C---                    DVIB3=DVIB3+DUM*DZ
C---                    DVIB4=DVIB4+DUM*
C---     *                  (-DZ*(YI-EFCENT(2,MJ))+DY*(ZI-EFCENT(3,MJ)))
C---                    DVIB5=DVIB5+DUM*
C---     *                  (-DX*(ZI-EFCENT(3,MJ))+DZ*(XI-EFCENT(1,MJ)))
C---                    DVIB6=DVIB6+DUM*
C---     *                  (-DY*(XI-EFCENT(1,MJ))+DX*(YI-EFCENT(2,MJ)))
C---               ENDDO
C--- 212           CONTINUE
C---               DO L = IFIRST, ILAST
C---                  DX=XI-CENTCD(1,IMO+L-1)
C---                  DY=YI-CENTCD(2,IMO+L-1)
C---                  DZ=ZI-CENTCD(3,IMO+L-1)
C---                  RIL2= DX*DX+DY*DY+DZ*DZ
C---                  RIL = SQRT(RIL2)
C---                  VIB = VIB + JCOEFF/RIL
C---                  DUM = JCOEFF/RIL/RIL2
C---C
C---C   --- IF FORCE POINTS ARE ACTIVE - TORQUES SHOULD BE
C---C       CALCULATED DIFFERENTLY
C---                  IF(IFRCPNT) THEN
C---                     DVIB1_FC=DVIB1_FC-DUM*DX
C---                     DVIB2_FC=DVIB2_FC-DUM*DY
C---                     DVIB3_FC=DVIB3_FC-DUM*DZ
C---                     DO IKI=1,NEQUAL1
C---                      IFP = IFP1(IKI)
C---                      COEF=ONE/NEQUAL1
C---                     DVIB4_FC=DVIB4_FC-COEF*DUM*
C---     *                  (-DZ*(YI-FRCCRD(2,IFP))
C---     *                   +DY*(ZI-FRCCRD(3,IFP)))
C---                     DVIB5_FC=DVIB5_FC-COEF*DUM*
C---     *                  (-DX*(ZI-FRCCRD(3,IFP))
C---     *                   +DZ*(XI-FRCCRD(1,IFP)))
C---                     DVIB6_FC=DVIB6_FC-COEF*DUM*
C---     *                  (-DY*(XI-FRCCRD(1,IFP))
C---     *                   +DX*(YI-FRCCRD(2,IFP)))
C---                    END DO
C---C
C---                CALL NEARFP(MI,CENTCD(1,IMO+L-1),CENTCD(2,IMO+L-1),
C---     *                 CENTCD(3,IMO+L-1), IFPX,IFPX_COM,NEQUALX)
C---                  DO IKI=1,NEQUALX
C---                    IFP = IFPX(IKI)
C---                    COEF=ONE/NEQUALX
C---                     DVIB4_FC2=DVIB4_FC2-COEF*DUM*
C---     *                  (-DZ*(CENTCD(2,IMO+L-1)-FRCCRD(2,IFP))
C---     *                   +DY*(CENTCD(3,IMO+L-1)-FRCCRD(3,IFP)))
C---                     DVIB5_FC2=DVIB5_FC2-COEF*DUM*
C---     *                  (-DX*(CENTCD(3,IMO+L-1)-FRCCRD(3,IFP))
C---     *                   +DZ*(CENTCD(1,IMO+L-1)-FRCCRD(1,IFP)))
C---                     DVIB6_FC2=DVIB6_FC2-COEF*DUM*
C---     *                  (-DY*(CENTCD(1,IMO+L-1)-FRCCRD(1,IFP))
C---     *                   +DX*(CENTCD(2,IMO+L-1)-FRCCRD(2,IFP)))
C---                  END DO
C---                  END IF
C---C
C---                    DVIB1=DVIB1-DUM*DX
C---                    DVIB2=DVIB2-DUM*DY
C---                    DVIB3=DVIB3-DUM*DZ
C---                    DVIB4=DVIB4-DUM*
C---     *                  (-DZ*(YI-EFCENT(2,MJ))+DY*(ZI-EFCENT(3,MJ)))
C---                    DVIB5=DVIB5-DUM*
C---     *                  (-DX*(ZI-EFCENT(3,MJ))+DZ*(XI-EFCENT(1,MJ)))
C---                    DVIB6=DVIB6-DUM*
C---     *                  (-DY*(XI-EFCENT(1,MJ))+DX*(YI-EFCENT(2,MJ)))
C---               ENDDO
C---       END IF
C
               DO 300 J = IFIRST, ILAST
C
            G11_FC=ZERO
            G12_FC=ZERO
            G13_FC=ZERO
            G14_FC=ZERO
            G15_FC=ZERO
            G16_FC=ZERO
            G21_FC=ZERO
            G22_FC=ZERO
            G23_FC=ZERO
            G24_FC=ZERO
            G25_FC=ZERO
            G26_FC=ZERO
            G31_FC=ZERO
            G32_FC=ZERO
            G33_FC=ZERO
            G34_FC=ZERO
            G35_FC=ZERO
            G36_FC=ZERO
            GPEN1_FC = ZERO
            GPEN2_FC = ZERO
            GPEN3_FC = ZERO
            GPEN4_FC = ZERO
            GPEN5_FC = ZERO
            GPEN6_FC = ZERO
C
                  XJ  = CENTCD(1,IMO+J-1)
                  YJ  = CENTCD(2,IMO+J-1)
                  ZJ  = CENTCD(3,IMO+J-1)
C
C                IF FORCE POINTS ARE ACTIVE
                  IF(IFRCPNT) THEN
                    CALL NEARFP(MI,XJ,YJ,ZJ,IFP2,IFP2_COM,NEQUAL2)
                    CALL VCLR(TRQ1,1,MXFGPT)
                    CALL VCLR(TRQ2,1,MXFGPT)
                    CALL VCLR(TRQ3,1,MXFGPT)
                  ENDIF
C
C        VIB PART TEMPORARY HERE
C
               VIB  =ZERO
               DVIB1=ZERO
               DVIB2=ZERO
               DVIB3=ZERO
               DVIB4=ZERO
               DVIB5=ZERO
               DVIB6=ZERO
C
               DVIB1_FC=ZERO
               DVIB2_FC=ZERO
               DVIB3_FC=ZERO
               DVIB4_FC=ZERO
               DVIB5_FC=ZERO
               DVIB6_FC=ZERO
               DVIB4_FC2=ZERO
               DVIB5_FC2=ZERO
               DVIB6_FC2=ZERO
C
               IF (MLSWTCH.EQ.2) GOTO 213
               IF (MLSWTCH.EQ.4) GOTO 213
               DO JZB = 1, NAT(IM)
                  DX=XI-PRCORD(1,INAT+JZB-1)
                  DY=YI-PRCORD(2,INAT+JZB-1)
                  DZ=ZI-PRCORD(3,INAT+JZB-1)
                  RIJZB2= DX*DX+DY*DY+DZ*DZ
                  RIJZB = SQRT(RIJZB2)
                  ZB=EFZNUC(INAT+JZB-1)
                  VIB = VIB - ZB/RIJZB
                  DUM = ZB/RIJZB/RIJZB2
C
C   --- IF FORCE POINTS ARE ACTIVE - TORQUES SHOULD BE
C       CALCULATED DIFFERENTLY
                  IF(IFRCPNT) THEN
                     DVIB1_FC=DVIB1_FC + DUM*DX
                     DVIB2_FC=DVIB2_FC + DUM*DY
                     DVIB3_FC=DVIB3_FC + DUM*DZ
                      DO II=1,NEQUAL1
                       IFP = IFP1(II)
                       COEF=ONE/NEQUAL1
                     DVIB4_FC=DVIB4_FC + COEF*DUM*
     *                  (-DZ*(YI-FRCCRD(2,IFP))
     *                   +DY*(ZI-FRCCRD(3,IFP)))
                     DVIB5_FC=DVIB5_FC + COEF*DUM*
     *                  (-DX*(ZI-FRCCRD(3,IFP))
     *                   +DZ*(XI-FRCCRD(1,IFP)))
                     DVIB6_FC=DVIB6_FC + COEF*DUM*
     *                  (-DY*(XI-FRCCRD(1,IFP))
     *                   +DX*(YI-FRCCRD(2,IFP)))
                      END DO
C
C                       CALL NEARFP(MI,PRCORD(1,INAT+JZB-1),
C     *               PRCORD(2,INAT+JZB-1),PRCORD(3,INAT+JZB-1),
C     *                      IFPX,IFPX_COM,NEQUALX)
                       DO II=1,NEQUAL2
                       IFP = IFP2(II)
                       COEF=ONE/NEQUAL2
                     DVIB4_FC2=DVIB4_FC2 + COEF*DUM*
     *                  (-DZ*(PRCORD(2,INAT+JZB-1)-FRCCRD(2,IFP))
     *                   +DY*(PRCORD(3,INAT+JZB-1)-FRCCRD(3,IFP)))
                     DVIB5_FC2=DVIB5_FC2 + COEF*DUM*
     *                  (-DX*(PRCORD(3,INAT+JZB-1)-FRCCRD(3,IFP))
     *                   +DZ*(PRCORD(1,INAT+JZB-1)-FRCCRD(1,IFP)))
                     DVIB6_FC2=DVIB6_FC2 + COEF*DUM*
     *                  (-DY*(PRCORD(1,INAT+JZB-1)-FRCCRD(1,IFP))
     *                   +DX*(PRCORD(2,INAT+JZB-1)-FRCCRD(2,IFP)))
                    END DO
                  END IF
                    DVIB1=DVIB1+DUM*DX
                    DVIB2=DVIB2+DUM*DY
                    DVIB3=DVIB3+DUM*DZ
                    DVIB4=DVIB4+DUM*
     *                  (-DZ*(YI-EFCENT(2,MJ))+DY*(ZI-EFCENT(3,MJ)))
                    DVIB5=DVIB5+DUM*
     *                  (-DX*(ZI-EFCENT(3,MJ))+DZ*(XI-EFCENT(1,MJ)))
                    DVIB6=DVIB6+DUM*
     *                  (-DY*(XI-EFCENT(1,MJ))+DX*(YI-EFCENT(2,MJ)))
               ENDDO
 213           CONTINUE
               DO L = IFIRST, ILAST
                  DX=XI-CENTCD(1,IMO+L-1)
                  DY=YI-CENTCD(2,IMO+L-1)
                  DZ=ZI-CENTCD(3,IMO+L-1)
                  RIL2= DX*DX+DY*DY+DZ*DZ
                  RIL = SQRT(RIL2)
                  VIB = VIB + JCOEFF/RIL
                  DUM = JCOEFF/RIL/RIL2
C
C   --- IF FORCE POINTS ARE ACTIVE - TORQUES SHOULD BE
C       CALCULATED DIFFERENTLY
                  IF(IFRCPNT) THEN
                     DVIB1_FC=DVIB1_FC-DUM*DX
                     DVIB2_FC=DVIB2_FC-DUM*DY
                     DVIB3_FC=DVIB3_FC-DUM*DZ
                     DO IKI=1,NEQUAL1
                      IFP = IFP1(IKI)
                      COEF=ONE/NEQUAL1
                     DVIB4_FC=DVIB4_FC-COEF*DUM*
     *                  (-DZ*(YI-FRCCRD(2,IFP))
     *                   +DY*(ZI-FRCCRD(3,IFP)))
                     DVIB5_FC=DVIB5_FC-COEF*DUM*
     *                  (-DX*(ZI-FRCCRD(3,IFP))
     *                   +DZ*(XI-FRCCRD(1,IFP)))
                     DVIB6_FC=DVIB6_FC-COEF*DUM*
     *                  (-DY*(XI-FRCCRD(1,IFP))
     *                   +DX*(YI-FRCCRD(2,IFP)))
                    END DO
C
C                  CALL NEARFP(MI,CENTCD(1,IMO+L-1),CENTCD(2,IMO+L-1),
C     *                 CENTCD(3,IMO+L-1), IFPX,IFPX_COM,NEQUALX)
                  DO IKI=1,NEQUAL2
                    IFP = IFP2(IKI)
                    COEF=ONE/NEQUAL2
                     DVIB4_FC2=DVIB4_FC2-COEF*DUM*
     *                  (-DZ*(CENTCD(2,IMO+L-1)-FRCCRD(2,IFP))
     *                   +DY*(CENTCD(3,IMO+L-1)-FRCCRD(3,IFP)))
                     DVIB5_FC2=DVIB5_FC2-COEF*DUM*
     *                  (-DX*(CENTCD(3,IMO+L-1)-FRCCRD(3,IFP))
     *                   +DZ*(CENTCD(1,IMO+L-1)-FRCCRD(1,IFP)))
                     DVIB6_FC2=DVIB6_FC2-COEF*DUM*
     *                  (-DY*(CENTCD(1,IMO+L-1)-FRCCRD(1,IFP))
     *                   +DX*(CENTCD(2,IMO+L-1)-FRCCRD(2,IFP)))
                  END DO
                  END IF
C
                    DVIB1=DVIB1-DUM*DX
                    DVIB2=DVIB2-DUM*DY
                    DVIB3=DVIB3-DUM*DZ
                    DVIB4=DVIB4-DUM*
     *                  (-DZ*(YI-EFCENT(2,MJ))+DY*(ZI-EFCENT(3,MJ)))
                    DVIB5=DVIB5-DUM*
     *                  (-DX*(ZI-EFCENT(3,MJ))+DZ*(XI-EFCENT(1,MJ)))
                    DVIB6=DVIB6-DUM*
     *                  (-DY*(XI-EFCENT(1,MJ))+DX*(YI-EFCENT(2,MJ)))
               ENDDO
C
C    VIB PART IS HERE
C
C                 -- VJA
C
                  VJA  =ZERO
                  DVJA1=ZERO
                  DVJA2=ZERO
                  DVJA3=ZERO
                  DVJA4=ZERO
                  DVJA5=ZERO
                  DVJA6=ZERO
C
                  DVJA1_FC=ZERO
                  DVJA2_FC=ZERO
                  DVJA3_FC=ZERO
                  DVJA4_FC=ZERO
                  DVJA5_FC=ZERO
                  DVJA6_FC=ZERO
                  DVJA4_FC2=ZERO
                  DVJA5_FC2=ZERO
                  DVJA6_FC2=ZERO
C
                  IF (MLSWTCH .GT. 2) GOTO 224
                  DO IZA = 1, NAT(JM)
                     DX=PRCORD(1,JNAT+IZA-1)-XJ
                     DY=PRCORD(2,JNAT+IZA-1)-YJ
                     DZ=PRCORD(3,JNAT+IZA-1)-ZJ
                     RJIZA2= DX*DX+DY*DY+DZ*DZ
                     RJIZA = SQRT(RJIZA2)
                     ZB=EFZNUC(JNAT+IZA-1)
                     VJA = VJA - ZB/RJIZA
                     DUM = ZB/RJIZA/RJIZA2
C
             IF(IFRCPNT) THEN
                       DVJA1_FC=DVJA1_FC + DUM*DX
                       DVJA2_FC=DVJA2_FC + DUM*DY
                       DVJA3_FC=DVJA3_FC + DUM*DZ
C
C                       CALL NEARFP(MJ,PRCORD(1,JNAT+IZA-1),
C     *               PRCORD(2,JNAT+IZA-1),PRCORD(3,JNAT+IZA-1),
C     *                      IFPX,IFPX_COM,NEQUALX)
                       DO II=1,NEQUAL1
                       IFP = IFP1(II)
                       COEF=ONE/NEQUAL1
                       DVJA4_FC=DVJA4_FC + COEF*DUM*
     *                  (-DZ*(PRCORD(2,JNAT+IZA-1)-FRCCRD(2,IFP))
     *                   +DY*(PRCORD(3,JNAT+IZA-1)-FRCCRD(3,IFP)))
                       DVJA5_FC=DVJA5_FC + COEF*DUM*
     *                  (-DX*(PRCORD(3,JNAT+IZA-1)-FRCCRD(3,IFP))
     *                   +DZ*(PRCORD(1,JNAT+IZA-1)-FRCCRD(1,IFP)))
                       DVJA6_FC=DVJA6_FC + COEF*DUM*
     *                  (-DY*(PRCORD(1,JNAT+IZA-1)-FRCCRD(1,IFP))
     *                   +DX*(PRCORD(2,JNAT+IZA-1)-FRCCRD(2,IFP)))
                       END DO
C
                       DO II=1,NEQUAL2
                       IFP = IFP2(II)
                       COEF=ONE/NEQUAL2
                       DVJA4_FC2=DVJA4_FC2 + COEF*DUM*
     *                  (-DZ*(YJ-FRCCRD(2,IFP))
     *                   +DY*(ZJ-FRCCRD(3,IFP)))
                       DVJA5_FC2=DVJA5_FC2 + COEF*DUM*
     *                  (-DX*(ZJ-FRCCRD(3,IFP))
     *                   +DZ*(XJ-FRCCRD(1,IFP)))
                       DVJA6_FC2=DVJA6_FC2 + COEF*DUM*
     *                  (-DY*(XJ-FRCCRD(1,IFP))
     *                   +DX*(YJ-FRCCRD(2,IFP)))
                      END DO
                      END IF
C
                       DVJA1=DVJA1+DUM*DX
                       DVJA2=DVJA2+DUM*DY
                       DVJA3=DVJA3+DUM*DZ
                       DVJA4=DVJA4+DUM*
     *                  (-DZ*(PRCORD(2,JNAT+IZA-1)-EFCENT(2,MJ))
     *                  +DY*(PRCORD(3,JNAT+IZA-1)-EFCENT(3,MJ)))
                       DVJA5=DVJA5+DUM*
     *                  (-DX*(PRCORD(3,JNAT+IZA-1)-EFCENT(3,MJ))
     *                  +DZ*(PRCORD(1,JNAT+IZA-1)-EFCENT(1,MJ)))
                       DVJA6=DVJA6+DUM*
     *                  (-DY*(PRCORD(1,JNAT+IZA-1)-EFCENT(1,MJ))
     *                  +DX*(PRCORD(2,JNAT+IZA-1)-EFCENT(2,MJ)))
                  ENDDO
 224              CONTINUE
                  DO K = JFIRST, JLAST
                     DX=CENTCD(1,JMO+K-1)-XJ
                     DY=CENTCD(2,JMO+K-1)-YJ
                     DZ=CENTCD(3,JMO+K-1)-ZJ
                     RJK2= DX*DX+DY*DY+DZ*DZ
                     RJK = SQRT(RJK2)
                     VJA = VJA + JCOEFF/RJK
                     DUM = JCOEFF/RJK/RJK2
C
                     IF(IFRCPNT) THEN
                       DVJA1_FC=DVJA1_FC-DUM*DX
                       DVJA2_FC=DVJA2_FC-DUM*DY
                       DVJA3_FC=DVJA3_FC-DUM*DZ
C
C                CALL NEARFP(MJ,CENTCD(1,JMO+K-1),CENTCD(2,JMO+K-1),
C     *                         CENTCD(3,JMO+K-1),IFPX,IFPX_COM,NEQUALX)
                       DO II=1,NEQUAL1
                           IFP = IFP1(II)
                           COEF=ONE/NEQUAL1
                       DVJA4_FC=DVJA4_FC - COEF*DUM*
     *                  (-DZ*(CENTCD(2,JMO+K-1)-FRCCRD(2,IFP))
     *                   +DY*(CENTCD(3,JMO+K-1)-FRCCRD(3,IFP)))
                       DVJA5_FC=DVJA5_FC - COEF*DUM*
     *                  (-DX*(CENTCD(3,JMO+K-1)-FRCCRD(3,IFP))
     *                   +DZ*(CENTCD(1,JMO+K-1)-FRCCRD(1,IFP)))
                       DVJA6_FC=DVJA6_FC - COEF*DUM*
     *                  (-DY*(CENTCD(1,JMO+K-1)-FRCCRD(1,IFP))
     *                   +DX*(CENTCD(2,JMO+K-1)-FRCCRD(2,IFP)))
                       END DO
C
                       DO II=1,NEQUAL2
                           IFP = IFP2(II)
                           COEF=ONE/NEQUAL2
                       DVJA4_FC2=DVJA4_FC2 - COEF*DUM*
     *                  (-DZ*(YJ-FRCCRD(2,IFP))
     *                   +DY*(ZJ-FRCCRD(3,IFP)))
                       DVJA5_FC2=DVJA5_FC2 - COEF*DUM*
     *                  (-DX*(ZJ-FRCCRD(3,IFP))
     *                   +DZ*(XJ-FRCCRD(1,IFP)))
                       DVJA6_FC2=DVJA6_FC2 - COEF*DUM*
     *                  (-DY*(XJ-FRCCRD(1,IFP))
     *                   +DX*(YJ-FRCCRD(2,IFP)))
                       END DO
                    END IF
C
                       DVJA1=DVJA1-DUM*DX
                       DVJA2=DVJA2-DUM*DY
                       DVJA3=DVJA3-DUM*DZ
                       DVJA4=DVJA4-DUM*
     *                  (-DZ*(CENTCD(2,JMO+K-1)-EFCENT(2,MJ))
     *                  +DY*(CENTCD(3,JMO+K-1)-EFCENT(3,MJ)))
                       DVJA5=DVJA5-DUM*
     *                  (-DX*(CENTCD(3,JMO+K-1)-EFCENT(3,MJ))
     *                  +DZ*(CENTCD(1,JMO+K-1)-EFCENT(1,MJ)))
                       DVJA6=DVJA6-DUM*
     *                  (-DY*(CENTCD(1,JMO+K-1)-EFCENT(1,MJ))
     *                  +DX*(CENTCD(2,JMO+K-1)-EFCENT(2,MJ)))
                  ENDDO
C
C                 -- SIJ, TIJ, RIJ
C
                  SIJ = SAB(I,J)
                  SIJ2= SIJ*SIJ
                  TIJ = TAB(I,J)
                  RIJ2= (XI-XJ)*(XI-XJ)+
     *                  (YI-YJ)*(YI-YJ)+
     *                  (ZI-ZJ)*(ZI-ZJ)
                  ONERIJ2=ONE/RIJ2
                  RIJ = SQRT(RIJ2)
                  ONERIJ=ONE/RIJ
                  ONERIJ3=ONERIJ*ONERIJ2
C
C                 -- 1ST TERM
C
                  IF(ABS(SIJ) .GT. 1.0D-07) THEN
                     RTLNS= SQRT(-LOG(ABS(SIJ)))
                     XR10 = XR10 - TWO*RT2PI*RTLNS*SIJ2*ONERIJ
                     DUM1 = (-RT2PI/RTLNS + FOUR*RT2PI*RTLNS)*SIJ*ONERIJ
                     DUM2 = TWO*RT2PI*RTLNS*SIJ2*ONERIJ3
                  IF(IFRCPNT) THEN
                     G11_FC  =  - DUM1*DSAB(I,J,1) + DUM2*(XI-XJ)
                     G12_FC  =  - DUM1*DSAB(I,J,2) + DUM2*(YI-YJ)
                     G13_FC  =  - DUM1*DSAB(I,J,3) + DUM2*(ZI-ZJ)
                     G14_FC  =  - DUM1*DSAB(I,J,4)
                     G15_FC  =  - DUM1*DSAB(I,J,5)
                     G16_FC  =  - DUM1*DSAB(I,J,6)
C       EXTRA TORQUES
                          DO II=1,NEQUAL1
                           IFP = IFP1(II)
                           COEF=ONE/NEQUAL1
                     TRQ1(IFP1_COM) = TRQ1(IFP1_COM) + COEF*DUM2*
     *                      (-(ZI-ZJ)*(YI-FRCCRD(2,IFP))
     *                      +(YI-YJ)*(ZI-FRCCRD(3,IFP)))
                     TRQ2(IFP1_COM) = TRQ2(IFP1_COM) + COEF*DUM2*
     *                      (-(XI-XJ)*(ZI-FRCCRD(3,IFP))
     *                      +(ZI-ZJ)*(XI-FRCCRD(1,IFP)))
                     TRQ3(IFP1_COM) = TRQ3(IFP1_COM) + COEF*DUM2*
     *                      (-(YI-YJ)*(XI-FRCCRD(1,IFP))
     *                      +(XI-XJ)*(YI-FRCCRD(2,IFP)))
                    END DO
                          DO II=1,NEQUAL2
                           IFP = IFP2(II)
                           COEF=ONE/NEQUAL2
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM) + COEF*DUM2*
     *                      (-(ZI-ZJ)*(YJ-FRCCRD(2,IFP))
     *                      +(YI-YJ)*(ZJ-FRCCRD(3,IFP)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM) + COEF*DUM2*
     *                      (-(XI-XJ)*(ZJ-FRCCRD(3,IFP))
     *                      +(ZI-ZJ)*(XJ-FRCCRD(1,IFP)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM) + COEF*DUM2*
     *                      (-(YI-YJ)*(XJ-FRCCRD(1,IFP))
     *                      +(XI-XJ)*(YJ-FRCCRD(2,IFP)))
                    END DO
C
C   THE NEXT TWO TERMS ARE EXTRA TORQUES FROM SHIFTING FORCES FROM COM
C   TO FORCE POINTS
                        DO II=1,NEQUAL1
                           IFP = IFP1(II)
                           COEF=ONE/NEQUAL1
                     TRQ1(IFP1_COM) = TRQ1(IFP1_COM) + COEF*DUM1*
     *                 (DSAB(I,J,2)*(FRCCRD(3,IFP)-EFCENT(3,MJ))-
     *                  DSAB(I,J,3)*(FRCCRD(2,IFP)-EFCENT(2,MJ)))
                     TRQ2(IFP1_COM) = TRQ2(IFP1_COM) + COEF*DUM1*
     *                 (DSAB(I,J,3)*(FRCCRD(1,IFP)-EFCENT(1,MJ))-
     *                  DSAB(I,J,1)*(FRCCRD(3,IFP)-EFCENT(3,MJ)))
                     TRQ3(IFP1_COM) = TRQ3(IFP1_COM) + COEF*DUM1*
     *                 (DSAB(I,J,1)*(FRCCRD(2,IFP)-EFCENT(2,MJ))-
     *                  DSAB(I,J,2)*(FRCCRD(1,IFP)-EFCENT(1,MJ)))
                        END DO
C
                        DO II=1,NEQUAL2
                           IFP = IFP2(II)
                           COEF=ONE/NEQUAL2
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM) + COEF*DUM1*
     *                 (DSAB(I,J,2)*(FRCCRD(3,IFP)-EFCENT(3,MI))-
     *                  DSAB(I,J,3)*(FRCCRD(2,IFP)-EFCENT(2,MI)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM) + COEF*DUM1*
     *                 (DSAB(I,J,3)*(FRCCRD(1,IFP)-EFCENT(1,MI))-
     *                  DSAB(I,J,1)*(FRCCRD(3,IFP)-EFCENT(3,MI)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM) + COEF*DUM1*
     *                 (DSAB(I,J,1)*(FRCCRD(2,IFP)-EFCENT(2,MI))-
     *                  DSAB(I,J,2)*(FRCCRD(1,IFP)-EFCENT(1,MI)))
                        END DO
C
C      THIS IS TO ACCOUNT FOR THE SECOND FRAGMENT TORQUE
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM)
     *                   +(DUM1*DSAB(I,J,2)*(EFCENT(3,MI)-EFCENT(3,MJ))-
     *                     DUM1*DSAB(I,J,3)*(EFCENT(2,MI)-EFCENT(2,MJ)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM)
     *                   +(DUM1*DSAB(I,J,3)*(EFCENT(1,MI)-EFCENT(1,MJ))-
     *                     DUM1*DSAB(I,J,1)*(EFCENT(3,MI)-EFCENT(3,MJ)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM)
     *                   +(DUM1*DSAB(I,J,1)*(EFCENT(2,MI)-EFCENT(2,MJ))-
     *                     DUM1*DSAB(I,J,2)*(EFCENT(1,MI)-EFCENT(1,MJ)))
C
                END IF
                     G11  = G11 - DUM1*DSAB(I,J,1) + DUM2*(XI-XJ)
                     G12  = G12 - DUM1*DSAB(I,J,2) + DUM2*(YI-YJ)
                     G13  = G13 - DUM1*DSAB(I,J,3) + DUM2*(ZI-ZJ)
                     G14  = G14 - DUM1*DSAB(I,J,4) + DUM2*
     *                         (-(ZI-ZJ)*(YI-EFCENT(2,MJ))
     *                         +(YI-YJ)*(ZI-EFCENT(3,MJ)))
                     G15  = G15 - DUM1*DSAB(I,J,5) + DUM2*
     *                         (-(XI-XJ)*(ZI-EFCENT(3,MJ))
     *                         +(ZI-ZJ)*(XI-EFCENT(1,MJ)))
                     G16  = G16 - DUM1*DSAB(I,J,6) + DUM2*
     *                         (-(YI-YJ)*(XI-EFCENT(1,MJ))
     *                         +(XI-XJ)*(YI-EFCENT(2,MJ)))
                  END IF
C
C                -ELECTROST. DAMPING HERE-
                  IF (IELECS . EQ. 1) THEN
                     IF(ABS(SIJ) .GT. 1.0D-07) THEN
                     RTLNS= SQRT(-LOG(ABS(SIJ)))
                     EPEN0 = EPEN0-ONE/(SQRT(TWO)*RTLNS)*SIJ2*ONERIJ
                     DUM3 = ONE/(SQRT(TWO)*RTLNS)*SIJ2*ONERIJ3
                     DUM4 = -(TWO/RTLNS + ONE/(TWO*RTLNS*RTLNS*RTLNS))*
     *                      SIJ*ONERIJ/SQRT(TWO)
C
                  IF(IFRCPNT) THEN
C   THIS IS DIRTY: WE MULTIPLY BY MCOEFF (I.E., 2) IN THE END GPEN TERMS
C  BUT WE DO NOT NEED IT, SO WE DIVIDE BY 2 HERE
                     DUM3= DUM3/TWO
                     DUM4 = DUM4/TWO
                     GPEN1_FC = DUM4*DSAB(I,J,1) + DUM3*(XI-XJ)
                     GPEN2_FC = DUM4*DSAB(I,J,2) + DUM3*(YI-YJ)
                     GPEN3_FC = DUM4*DSAB(I,J,3) + DUM3*(ZI-ZJ)
                     GPEN4_FC = DUM4*DSAB(I,J,4)
                     GPEN5_FC = DUM4*DSAB(I,J,5)
                     GPEN6_FC = DUM4*DSAB(I,J,6)
C
C       EXTRA TORQUES
                          DO II=1,NEQUAL1
                           IFP = IFP1(II)
                           COEF=ONE/NEQUAL1
                     TRQ1(IFP1_COM) = TRQ1(IFP1_COM) + COEF*DUM3*
     *                      (-(ZI-ZJ)*(YI-FRCCRD(2,IFP))
     *                      +(YI-YJ)*(ZI-FRCCRD(3,IFP)))
                     TRQ2(IFP1_COM) = TRQ2(IFP1_COM) + COEF*DUM3*
     *                      (-(XI-XJ)*(ZI-FRCCRD(3,IFP))
     *                      +(ZI-ZJ)*(XI-FRCCRD(1,IFP)))
                     TRQ3(IFP1_COM) = TRQ3(IFP1_COM) + COEF*DUM3*
     *                      (-(YI-YJ)*(XI-FRCCRD(1,IFP))
     *                      +(XI-XJ)*(YI-FRCCRD(2,IFP)))
                    END DO
                          DO II=1,NEQUAL2
                           IFP = IFP2(II)
                           COEF=ONE/NEQUAL2
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM) + COEF*DUM3*
     *                      (-(ZI-ZJ)*(YJ-FRCCRD(2,IFP))
     *                      +(YI-YJ)*(ZJ-FRCCRD(3,IFP)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM) + COEF*DUM3*
     *                      (-(XI-XJ)*(ZJ-FRCCRD(3,IFP))
     *                      +(ZI-ZJ)*(XJ-FRCCRD(1,IFP)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM) + COEF*DUM3*
     *                      (-(YI-YJ)*(XJ-FRCCRD(1,IFP))
     *                      +(XI-XJ)*(YJ-FRCCRD(2,IFP)))
                    END DO
C
C   THE NEXT TWO TERMS ARE EXTRA TORQUES FROM SHIFTING FORCES FROM COM
C   TO FORCE POINTS
                        DO II=1,NEQUAL1
                           IFP = IFP1(II)
                           COEF=ONE/NEQUAL1
                     TRQ1(IFP1_COM) = TRQ1(IFP1_COM) - COEF*DUM4*
     *                 (DSAB(I,J,2)*(FRCCRD(3,IFP)-EFCENT(3,MJ))-
     *                  DSAB(I,J,3)*(FRCCRD(2,IFP)-EFCENT(2,MJ)))
                     TRQ2(IFP1_COM) = TRQ2(IFP1_COM) - COEF*DUM4*
     *                 (DSAB(I,J,3)*(FRCCRD(1,IFP)-EFCENT(1,MJ))-
     *                  DSAB(I,J,1)*(FRCCRD(3,IFP)-EFCENT(3,MJ)))
                     TRQ3(IFP1_COM) = TRQ3(IFP1_COM) - COEF*DUM4*
     *                 (DSAB(I,J,1)*(FRCCRD(2,IFP)-EFCENT(2,MJ))-
     *                  DSAB(I,J,2)*(FRCCRD(1,IFP)-EFCENT(1,MJ)))
                        END DO
C
                        DO II=1,NEQUAL2
                           IFP = IFP2(II)
                           COEF=ONE/NEQUAL2
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM) - COEF*DUM4*
     *                 (DSAB(I,J,2)*(FRCCRD(3,IFP)-EFCENT(3,MI))-
     *                  DSAB(I,J,3)*(FRCCRD(2,IFP)-EFCENT(2,MI)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM) - COEF*DUM4*
     *                 (DSAB(I,J,3)*(FRCCRD(1,IFP)-EFCENT(1,MI))-
     *                  DSAB(I,J,1)*(FRCCRD(3,IFP)-EFCENT(3,MI)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM) - COEF*DUM4*
     *                 (DSAB(I,J,1)*(FRCCRD(2,IFP)-EFCENT(2,MI))-
     *                  DSAB(I,J,2)*(FRCCRD(1,IFP)-EFCENT(1,MI)))
                        END DO
C
C      THIS IS TO ACCOUNT FOR THE SECOND FRAGMENT TORQUE
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM)
     *                   -(DUM4*DSAB(I,J,2)*(EFCENT(3,MI)-EFCENT(3,MJ))-
     *                     DUM4*DSAB(I,J,3)*(EFCENT(2,MI)-EFCENT(2,MJ)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM)
     *                   -(DUM4*DSAB(I,J,3)*(EFCENT(1,MI)-EFCENT(1,MJ))-
     *                     DUM4*DSAB(I,J,1)*(EFCENT(3,MI)-EFCENT(3,MJ)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM)
     *                   -(DUM4*DSAB(I,J,1)*(EFCENT(2,MI)-EFCENT(2,MJ))-
     *                     DUM4*DSAB(I,J,2)*(EFCENT(1,MI)-EFCENT(1,MJ)))
C     NOW MULTIPLY BACK BY 2
                   DUM3= DUM3*TWO
                   DUM4 = DUM4*TWO
C
                END IF
C
                     GPEN1 = GPEN1 + DUM4*DSAB(I,J,1) + DUM3*(XI-XJ)
                     GPEN2 = GPEN2 + DUM4*DSAB(I,J,2) + DUM3*(YI-YJ)
                     GPEN3 = GPEN3 + DUM4*DSAB(I,J,3) + DUM3*(ZI-ZJ)
                     GPEN4 = GPEN4 + DUM4*DSAB(I,J,4) + DUM3*
     *                         (-(ZI-ZJ)*(YI-EFCENT(2,MJ))
     *                         +(YI-YJ)*(ZI-EFCENT(3,MJ)))
                     GPEN5 = GPEN5 + DUM4*DSAB(I,J,5) + DUM3*
     *                         (-(XI-XJ)*(ZI-EFCENT(3,MJ))
     *                         +(ZI-ZJ)*(XI-EFCENT(1,MJ)))
                     GPEN6 = GPEN6 + DUM4*DSAB(I,J,6) + DUM3*
     *                         (-(YI-YJ)*(XI-EFCENT(1,MJ))
     *                         +(XI-XJ)*(YI-EFCENT(2,MJ)))
                  END IF
               END IF
C
C                 -- 2ND TERM
C
                  FIJ  = ZERO
                  DFIJ1= ZERO
                  DFIJ2= ZERO
                  DFIJ3= ZERO
                  DFIJ4= ZERO
                  DFIJ5= ZERO
                  DFIJ6= ZERO
                  DO K = JFIRST, JLAST
                     FAIK =  FA(I,K)
                     FIJ  =  FIJ + FAIK*SAB(K,J)
                     DFIJ1=DFIJ1 + FAIK*DSAB(K,J,1)
                     DFIJ2=DFIJ2 + FAIK*DSAB(K,J,2)
                     DFIJ3=DFIJ3 + FAIK*DSAB(K,J,3)
                     DFIJ4=DFIJ4 + FAIK*DSAB(K,J,4)
                     DFIJ5=DFIJ5 + FAIK*DSAB(K,J,5)
                     DFIJ6=DFIJ6 + FAIK*DSAB(K,J,6)
                  END DO
                  FJI  = ZERO
                  DFJI1= ZERO
                  DFJI2= ZERO
                  DFJI3= ZERO
                  DFJI4= ZERO
                  DFJI5= ZERO
                  DFJI6= ZERO
                  DO L = IFIRST, ILAST
                     FBJL =  FB(J,L)
                     FJI  =  FJI + FBJL*SAB(I,L)
                     DFJI1=DFJI1 + FBJL*DSAB(I,L,1)
                     DFJI2=DFJI2 + FBJL*DSAB(I,L,2)
                     DFJI3=DFJI3 + FBJL*DSAB(I,L,3)
                     DFJI4=DFJI4 + FBJL*DSAB(I,L,4)
                     DFJI5=DFJI5 + FBJL*DSAB(I,L,5)
                     DFJI6=DFJI6 + FBJL*DSAB(I,L,6)
                  END DO
                  DUM1 = (FIJ+FJI-TWO*TIJ)
                  XR20 = XR20 - SIJ*DUM1
C
                  IF(IFRCPNT) THEN
                  G21_FC=-DSAB(I,J,1)*DUM1
     *                   -SIJ*(DFIJ1+DFJI1-TWO*DTAB(I,J,1))
                  G22_FC=-DSAB(I,J,2)*DUM1
     *                   -SIJ*(DFIJ2+DFJI2-TWO*DTAB(I,J,2))
                  G23_FC=-DSAB(I,J,3)*DUM1
     *                   -SIJ*(DFIJ3+DFJI3-TWO*DTAB(I,J,3))
                  G24_FC=-DSAB(I,J,4)*DUM1
     *                   -SIJ*(DFIJ4+DFJI4-TWO*DTAB(I,J,4))
                  G25_FC=-DSAB(I,J,5)*DUM1
     *                   -SIJ*(DFIJ5+DFJI5-TWO*DTAB(I,J,5))
                  G26_FC=-DSAB(I,J,6)*DUM1
     *                   -SIJ*(DFIJ6+DFJI6-TWO*DTAB(I,J,6))
C
C   THE NEXT TWO TERMS ARE EXTRA TORQUES FROM SHIFTING FORCES FROM COM
C   TO FORCE POINTS
                        DO II=1,NEQUAL1
                           IFP = IFP1(II)
                           COEF=ONE/NEQUAL1
                     TRQ1(IFP1_COM) = TRQ1(IFP1_COM) - COEF*
     *                 (G22_FC*(FRCCRD(3,IFP)-EFCENT(3,MJ))-
     *                  G23_FC*(FRCCRD(2,IFP)-EFCENT(2,MJ)))
                     TRQ2(IFP1_COM) = TRQ2(IFP1_COM) - COEF*
     *                 (G23_FC*(FRCCRD(1,IFP)-EFCENT(1,MJ))-
     *                  G21_FC*(FRCCRD(3,IFP)-EFCENT(3,MJ)))
                     TRQ3(IFP1_COM) = TRQ3(IFP1_COM) - COEF*
     *                 (G21_FC*(FRCCRD(2,IFP)-EFCENT(2,MJ))-
     *                  G22_FC*(FRCCRD(1,IFP)-EFCENT(1,MJ)))
                        END DO
C
                        DO II=1,NEQUAL2
                           IFP = IFP2(II)
                           COEF=ONE/NEQUAL2
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM) - COEF*
     *                 (G22_FC*(FRCCRD(3,IFP)-EFCENT(3,MI))-
     *                  G23_FC*(FRCCRD(2,IFP)-EFCENT(2,MI)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM) - COEF*
     *                 (G23_FC*(FRCCRD(1,IFP)-EFCENT(1,MI))-
     *                  G21_FC*(FRCCRD(3,IFP)-EFCENT(3,MI)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM) - COEF*
     *                 (G21_FC*(FRCCRD(2,IFP)-EFCENT(2,MI))-
     *                  G22_FC*(FRCCRD(1,IFP)-EFCENT(1,MI)))
                        END DO
C
                  TRQ1(IFP2_COM) = TRQ1(IFP2_COM)- (
     *                   G22_FC*(EFCENT(3,MI)-EFCENT(3,MJ)) -
     *                    G23_FC*(EFCENT(2,MI)-EFCENT(2,MJ)))
                  TRQ2(IFP2_COM) = TRQ2(IFP2_COM)- (
     *                   G23_FC*(EFCENT(1,MI)-EFCENT(1,MJ)) -
     *                    G21_FC*(EFCENT(3,MI)-EFCENT(3,MJ)))
                  TRQ3(IFP2_COM) = TRQ3(IFP2_COM)- (
     *                   G21_FC*(EFCENT(2,MI)-EFCENT(2,MJ)) -
     *                    G22_FC*(EFCENT(1,MI)-EFCENT(1,MJ)))
                  END IF
C
                  G21=G21-DSAB(I,J,1)*DUM1
     *                   -SIJ*(DFIJ1+DFJI1-TWO*DTAB(I,J,1))
                  G22=G22-DSAB(I,J,2)*DUM1
     *                   -SIJ*(DFIJ2+DFJI2-TWO*DTAB(I,J,2))
                  G23=G23-DSAB(I,J,3)*DUM1
     *                   -SIJ*(DFIJ3+DFJI3-TWO*DTAB(I,J,3))
                  G24=G24-DSAB(I,J,4)*DUM1
     *                   -SIJ*(DFIJ4+DFJI4-TWO*DTAB(I,J,4))
                  G25=G25-DSAB(I,J,5)*DUM1
     *                   -SIJ*(DFIJ5+DFJI5-TWO*DTAB(I,J,5))
                  G26=G26-DSAB(I,J,6)*DUM1
     *                   -SIJ*(DFIJ6+DFJI6-TWO*DTAB(I,J,6))
C
C                 -- 3RD TERM
C
                  XR30 = XR30 + SIJ2*(VIB+VJA-ONERIJ)
                  DUM1 = TWO*SIJ*(VIB+VJA-ONERIJ)
C
C  IF ACTIVE FORCE POINTS
                  IF (IFRCPNT) THEN
                  G31_FC  =   + DUM1*DSAB(I,J,1)
     *                    + SIJ2*(DVIB1_FC+DVJA1_FC+ONERIJ3*(XI-XJ))
                  G32_FC  =   + DUM1*DSAB(I,J,2)
     *                    + SIJ2*(DVIB2_FC+DVJA2_FC+ONERIJ3*(YI-YJ))
                  G33_FC  =   + DUM1*DSAB(I,J,3)
     *                    + SIJ2*(DVIB3_FC+DVJA3_FC+ONERIJ3*(ZI-ZJ))
                  G34_FC  =   + DUM1*DSAB(I,J,4)
                  G35_FC  =   + DUM1*DSAB(I,J,5)
                  G36_FC  =   + DUM1*DSAB(I,J,6)
C
C   THE NEXT TWO TERMS ARE EXTRA TORQUES FROM SHIFTING FORCES FROM COM
C   TO FORCE POINTS
                DO II=1,NEQUAL1
                           IFP = IFP1(II)
                           COEF=ONE/NEQUAL1
                     TRQ1(IFP1_COM) = TRQ1(IFP1_COM) - COEF*DUM1*
     *                 (DSAB(I,J,2)*(FRCCRD(3,IFP)-EFCENT(3,MJ))-
     *                  DSAB(I,J,3)*(FRCCRD(2,IFP)-EFCENT(2,MJ)))
                     TRQ2(IFP1_COM) = TRQ2(IFP1_COM) - COEF*DUM1*
     *                 (DSAB(I,J,3)*(FRCCRD(1,IFP)-EFCENT(1,MJ))-
     *                  DSAB(I,J,1)*(FRCCRD(3,IFP)-EFCENT(3,MJ)))
                     TRQ3(IFP1_COM) = TRQ3(IFP1_COM) - COEF*DUM1*
     *                 (DSAB(I,J,1)*(FRCCRD(2,IFP)-EFCENT(2,MJ))-
     *                  DSAB(I,J,2)*(FRCCRD(1,IFP)-EFCENT(1,MJ)))
                        END DO
C
                        DO II=1,NEQUAL2
                           IFP = IFP2(II)
                           COEF=ONE/NEQUAL2
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM) - COEF*DUM1*
     *                 (DSAB(I,J,2)*(FRCCRD(3,IFP)-EFCENT(3,MI))-
     *                  DSAB(I,J,3)*(FRCCRD(2,IFP)-EFCENT(2,MI)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM) - COEF*DUM1*
     *                 (DSAB(I,J,3)*(FRCCRD(1,IFP)-EFCENT(1,MI))-
     *                  DSAB(I,J,1)*(FRCCRD(3,IFP)-EFCENT(3,MI)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM) - COEF*DUM1*
     *                 (DSAB(I,J,1)*(FRCCRD(2,IFP)-EFCENT(2,MI))-
     *                  DSAB(I,J,2)*(FRCCRD(1,IFP)-EFCENT(1,MI)))
                        END DO
C
                 DO II=1,NEQUAL1
                   IFP = IFP1(II)
                   COEF=ONE/NEQUAL1
                     TRQ1(IFP1_COM) = TRQ1(IFP1_COM)+
     *                  COEF*SIJ2*ONERIJ3*
     *                          (-(ZI-ZJ)*(YI-FRCCRD(2,IFP))
     *                          +(YI-YJ)*(ZI-FRCCRD(3,IFP)))
                     TRQ2(IFP1_COM) = TRQ2(IFP1_COM)+
     *                  COEF*SIJ2*ONERIJ3*
     *                          (-(XI-XJ)*(ZI-FRCCRD(3,IFP))
     *                          +(ZI-ZJ)*(XI-FRCCRD(1,IFP)))
                     TRQ3(IFP1_COM) = TRQ3(IFP1_COM)+
     *                  COEF*SIJ2*ONERIJ3*
     *                          (-(YI-YJ)*(XI-FRCCRD(1,IFP))
     *                          +(XI-XJ)*(YI-FRCCRD(2,IFP)))
                 END DO
C
                 DO II=1,NEQUAL2
                   IFP = IFP2(II)
                   COEF=ONE/NEQUAL2
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM)
     *                  +COEF*SIJ2*ONERIJ3*
     *                          (-(ZI-ZJ)*(YJ-FRCCRD(2,IFP))
     *                          +(YI-YJ)*(ZJ-FRCCRD(3,IFP)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM)
     *                  +COEF*SIJ2*ONERIJ3*
     *                          (-(XI-XJ)*(ZJ-FRCCRD(3,IFP))
     *                          +(ZI-ZJ)*(XJ-FRCCRD(1,IFP)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM)
     *                  +COEF*SIJ2*ONERIJ3*
     *                          (-(YI-YJ)*(XJ-FRCCRD(1,IFP))
     *                          +(XI-XJ)*(YJ-FRCCRD(2,IFP)))
                  END DO
C
                     TRQ1(IFP1_COM) = TRQ1(IFP1_COM)+
     *                  SIJ2*(DVIB4_FC+DVJA4_FC)
                     TRQ2(IFP1_COM) = TRQ2(IFP1_COM)+
     *                  SIJ2*(DVIB5_FC+DVJA5_FC)
                     TRQ3(IFP1_COM) = TRQ3(IFP1_COM)+
     *                  SIJ2*(DVIB6_FC+DVJA6_FC)
C
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM) +
     *                  SIJ2*(DVIB4_FC2+DVJA4_FC2)
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM) +
     *                  SIJ2*(DVIB5_FC2+DVJA5_FC2)
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM) +
     *                  SIJ2*(DVIB6_FC2+DVJA6_FC2)
C
                     TRQ1(IFP2_COM) = TRQ1(IFP2_COM)
     *                   -(DUM1*DSAB(I,J,2)*(EFCENT(3,MI)-EFCENT(3,MJ))-
     *                     DUM1*DSAB(I,J,3)*(EFCENT(2,MI)-EFCENT(2,MJ)))
                     TRQ2(IFP2_COM) = TRQ2(IFP2_COM)
     *                   -(DUM1*DSAB(I,J,3)*(EFCENT(1,MI)-EFCENT(1,MJ))-
     *                     DUM1*DSAB(I,J,1)*(EFCENT(3,MI)-EFCENT(3,MJ)))
                     TRQ3(IFP2_COM) = TRQ3(IFP2_COM)
     *                   -(DUM1*DSAB(I,J,1)*(EFCENT(2,MI)-EFCENT(2,MJ))-
     *                     DUM1*DSAB(I,J,2)*(EFCENT(1,MI)-EFCENT(1,MJ)))
                  END IF
C
                  G31  =  G31 + DUM1*DSAB(I,J,1)
     *                        + SIJ2*(DVIB1+DVJA1+ONERIJ3*(XI-XJ))
                  G32  =  G32 + DUM1*DSAB(I,J,2)
     *                        + SIJ2*(DVIB2+DVJA2+ONERIJ3*(YI-YJ))
                  G33  =  G33 + DUM1*DSAB(I,J,3)
     *                        + SIJ2*(DVIB3+DVJA3+ONERIJ3*(ZI-ZJ))
                  G34  =  G34 + DUM1*DSAB(I,J,4)
     *                        + SIJ2*(DVIB4+DVJA4+ONERIJ3*
     *                          (-(ZI-ZJ)*(YI-EFCENT(2,MJ))
     *                          +(YI-YJ)*(ZI-EFCENT(3,MJ))))
                  G35  =  G35 + DUM1*DSAB(I,J,5)
     *                        + SIJ2*(DVIB5+DVJA5+ONERIJ3*
     *                          (-(XI-XJ)*(ZI-EFCENT(3,MJ))
     *                          +(ZI-ZJ)*(XI-EFCENT(1,MJ))))
                  G36  =  G36 + DUM1*DSAB(I,J,6)
     *                        + SIJ2*(DVIB6+DVJA6+ONERIJ3*
     *                          (-(YI-YJ)*(XI-EFCENT(1,MJ))
     *                          +(XI-XJ)*(YI-EFCENT(2,MJ))))
C
C
            IF (IFRCPNT) THEN
               DO II=1,NEQUAL2
                  IFP = IFP2(II)
                  COEF=ONE/NEQUAL2
                  FRCTRQX(1,IFP) = FRCTRQX(1,IFP) - TWO*COEF*SWF*
     *                            (G11_FC+G21_FC+G31_FC+GPEN1_FC)
                  FRCTRQX(2,IFP) = FRCTRQX(2,IFP) - TWO*COEF*SWF*
     *                            (G12_FC+G22_FC+G32_FC+GPEN2_FC)
                  FRCTRQX(3,IFP) = FRCTRQX(3,IFP) - TWO*COEF*SWF*
     *                            (G13_FC+G23_FC+G33_FC+GPEN3_FC)
                  FRCTRQX(4,IFP) = FRCTRQX(4,IFP) - TWO*COEF*SWF*
     *                            (G14_FC+G24_FC+G34_FC+GPEN4_FC)
                  FRCTRQX(5,IFP) = FRCTRQX(5,IFP) - TWO*COEF*SWF*
     *                            (G15_FC+G25_FC+G35_FC+GPEN5_FC)
                  FRCTRQX(6,IFP) = FRCTRQX(6,IFP) - TWO*COEF*SWF*
     *                            (G16_FC+G26_FC+G36_FC+GPEN6_FC)
                END DO
                  FRCTRQX(4,IFP1_COM) = FRCTRQX(4,IFP1_COM)
     *                          + SWF*TWO*TRQ1(IFP1_COM)
                  FRCTRQX(5,IFP1_COM) = FRCTRQX(5,IFP1_COM)
     *                          + SWF*TWO*TRQ2(IFP1_COM)
                  FRCTRQX(6,IFP1_COM) = FRCTRQX(6,IFP1_COM)
     *                          + SWF*TWO*TRQ3(IFP1_COM)
                  DO II=1,NEQUAL1
                  IFP = IFP1(II)
                  COEF=ONE/NEQUAL1
                  FRCTRQX(1,IFP) = FRCTRQX(1,IFP) + TWO*COEF*SWF*
     *                            (G11_FC+G21_FC+G31_FC+GPEN1_FC)
                  FRCTRQX(2,IFP) = FRCTRQX(2,IFP) + TWO*COEF*SWF*
     *                            (G12_FC+G22_FC+G32_FC+GPEN2_FC)
                  FRCTRQX(3,IFP) = FRCTRQX(3,IFP) + TWO*COEF*SWF*
     *                            (G13_FC+G23_FC+G33_FC+GPEN3_FC)
                  FRCTRQX(4,IFP) = FRCTRQX(4,IFP) + TWO*COEF*SWF*
     *                            (G14_FC+G24_FC+G34_FC+GPEN4_FC)
                  FRCTRQX(5,IFP) = FRCTRQX(5,IFP) + TWO*COEF*SWF*
     *                            (G15_FC+G25_FC+G35_FC+GPEN5_FC)
                  FRCTRQX(6,IFP) = FRCTRQX(6,IFP) + TWO*COEF*SWF*
     *                            (G16_FC+G26_FC+G36_FC+GPEN6_FC)
                END DO
C
                  FRCTRQX(4,IFP2_COM) = FRCTRQX(4,IFP2_COM)
     *                          - SWF*TWO*TRQ1(IFP2_COM)
                  FRCTRQX(5,IFP2_COM) = FRCTRQX(5,IFP2_COM)
     *                          - SWF*TWO*TRQ2(IFP2_COM)
                  FRCTRQX(6,IFP2_COM) = FRCTRQX(6,IFP2_COM)
     *                          - SWF*TWO*TRQ3(IFP2_COM)
          END IF
C
 300           CONTINUE
 200        CONTINUE
            ENXR = ENXR + SWF*ICOEFF*(XR10+XR20+XR30)
            EPEN = EPEN + SWF*EPEN0
C
            XRFRG(MLSWTCH,1,MI,MJ) = XRFRG(MLSWTCH,1,MI,MJ)+
     *                                (MCOEFF*(G11+G21+G31))+GPEN1
            XRFRG(MLSWTCH,2,MI,MJ) = XRFRG(MLSWTCH,2,MI,MJ)+
     *                               (MCOEFF*(G12+G22+G32))+GPEN2
            XRFRG(MLSWTCH,3,MI,MJ) = XRFRG(MLSWTCH,3,MI,MJ)+
     *                                (MCOEFF*(G13+G23+G33))+GPEN3
            XRFRG(MLSWTCH,4,MI,MJ) = XRFRG(MLSWTCH,4,MI,MJ)+
     *                                (MCOEFF*(G14+G24+G34))+GPEN4
            XRFRG(MLSWTCH,5,MI,MJ) = XRFRG(MLSWTCH,5,MI,MJ)+
     *                                (MCOEFF*(G15+G25+G35))+GPEN5
            XRFRG(MLSWTCH,6,MI,MJ) = XRFRG(MLSWTCH,6,MI,MJ)+
     *                                (MCOEFF*(G16+G26+G36))+GPEN6
C
C           -- APPLY SWITCHING FUNCTIONS
C
C              - ALL GRADIENTS ARE MULTIPLIED BY SWF
C
            DO KK = 1, 6
               XRFRG(MLSWTCH,KK,MI,MJ) = SWF*XRFRG(MLSWTCH,KK,MI,MJ)
               XRFRG(MLSWTCH,KK,MJ,MI) = SWF*XRFRG(MLSWTCH,KK,MJ,MI)
            ENDDO
C
C
C            XRAB = ICOEFF*(XR10+XR20+XR30)
            XRAB = ICOEFF*(XR10+XR20+XR30)+EPEN0
            XRFRG(MLSWTCH,1,MI,MJ) = XRFRG(MLSWTCH,1,MI,MJ) - SWFDX*XRAB
            XRFRG(MLSWTCH,2,MI,MJ) = XRFRG(MLSWTCH,2,MI,MJ) - SWFDY*XRAB
            XRFRG(MLSWTCH,3,MI,MJ) = XRFRG(MLSWTCH,3,MI,MJ) - SWFDZ*XRAB
C
            XRFRG(MLSWTCH,1,MJ,MI) = XRFRG(MLSWTCH,1,MJ,MI) + SWFDX*XRAB
            XRFRG(MLSWTCH,2,MJ,MI) = XRFRG(MLSWTCH,2,MJ,MI) + SWFDY*XRAB
            XRFRG(MLSWTCH,3,MJ,MI) = XRFRG(MLSWTCH,3,MJ,MI) + SWFDZ*XRAB
C
C     IF FORCE POINTS ACTIVE - GATHER FORCES AND TORQUES HERE
             IF(IFRCPNT) THEN
                  FRCTRQX(1,IFP2_COM) = FRCTRQX(1,IFP2_COM)+XRAB*SWFDX
                  FRCTRQX(2,IFP2_COM) = FRCTRQX(2,IFP2_COM)+XRAB*SWFDY
                  FRCTRQX(3,IFP2_COM) = FRCTRQX(3,IFP2_COM)+XRAB*SWFDZ
                  FRCTRQX(1,IFP1_COM) = FRCTRQX(1,IFP1_COM)-XRAB*SWFDX
                  FRCTRQX(2,IFP1_COM) = FRCTRQX(2,IFP1_COM)-XRAB*SWFDY
                  FRCTRQX(3,IFP1_COM) = FRCTRQX(3,IFP1_COM)-XRAB*SWFDZ
C                  WRITE(6,*)'IFP1_COM',IFP1_COM, IFP2_COM
C                  WRITE(6,*)'FRCTRQ 1:',(FRCTRQX(IKI,1),IKI=4,6)
C                  WRITE(6,*)'FRCTRQ 2:',(FRCTRQX(IKI,2),IKI=4,6)
              END IF
C
 500        CONTINUE
C
            GXRFRG(1,MI,MJ) = XRFRG(1,1,MI,MJ) +XRFRG(2,1,MI,MJ)+
     *                  XRFRG(3,1,MI,MJ) +XRFRG(4,1,MI,MJ)
            GXRFRG(2,MI,MJ) = XRFRG(1,2,MI,MJ) +XRFRG(2,2,MI,MJ)+
     *                  XRFRG(3,2,MI,MJ) +XRFRG(4,2,MI,MJ)
            GXRFRG(3,MI,MJ) = XRFRG(1,3,MI,MJ) +XRFRG(2,3,MI,MJ)+
     *                  XRFRG(3,3,MI,MJ) +XRFRG(4,3,MI,MJ)
            GXRFRG(4,MI,MJ) = XRFRG(1,4,MI,MJ) +XRFRG(2,4,MI,MJ)+
     *                  XRFRG(3,4,MI,MJ) +XRFRG(4,4,MI,MJ)
            GXRFRG(5,MI,MJ) = XRFRG(1,5,MI,MJ) +XRFRG(2,5,MI,MJ)+
     *                  XRFRG(3,5,MI,MJ) +XRFRG(4,5,MI,MJ)
            GXRFRG(6,MI,MJ) = XRFRG(1,6,MI,MJ) +XRFRG(2,6,MI,MJ)+
     *                  XRFRG(3,6,MI,MJ) +XRFRG(4,6,MI,MJ)
C
            GXRFRG(4,MI,MJ) = -GXRFRG(4,MI,MJ)
            GXRFRG(5,MI,MJ) = -GXRFRG(5,MI,MJ)
            GXRFRG(6,MI,MJ) = -GXRFRG(6,MI,MJ)
C
            GXRFRG(1,MJ,MI) = -GXRFRG(1,MI,MJ)
            GXRFRG(2,MJ,MI) = -GXRFRG(2,MI,MJ)
            GXRFRG(3,MJ,MI) = -GXRFRG(3,MI,MJ)
            GXRFRG(4,MJ,MI) = -GXRFRG(4,MI,MJ) -
     *                 GXRFRG(2,MI,MJ)*(EFCENT(3,MI)-EFCENT(3,MJ)) +
     *                 GXRFRG(3,MI,MJ)*(EFCENT(2,MI)-EFCENT(2,MJ))
            GXRFRG(5,MJ,MI) = -GXRFRG(5,MI,MJ) -
     *                 GXRFRG(3,MI,MJ)*(EFCENT(1,MI)-EFCENT(1,MJ)) +
     *                 GXRFRG(1,MI,MJ)*(EFCENT(3,MI)-EFCENT(3,MJ))
            GXRFRG(6,MJ,MI) = -GXRFRG(6,MI,MJ) -
     *                 GXRFRG(1,MI,MJ)*(EFCENT(2,MI)-EFCENT(2,MJ)) +
     *                 GXRFRG(2,MI,MJ)*(EFCENT(1,MI)-EFCENT(1,MJ))
C
C                  WRITE(6,*)'GXRFRG 1:',(GXRFRG(IKI,2,1),IKI=4,6)
C                  WRITE(6,*)'GXRFRG 2:',(GXRFRG(IKI,1,2),IKI=4,6)
C
            EFCENT(1,MI) = EFCENT(1,MI) - PBCX
            EFCENT(2,MI) = EFCENT(2,MI) - PBCY
            EFCENT(3,MI) = EFCENT(3,MI) - PBCZ
            DO NATIM=1,NAT(IM)
            PRCORD(1,INAT+NATIM-1) = PRCORD(1,INAT+NATIM-1) - PBCX
            PRCORD(2,INAT+NATIM-1) = PRCORD(2,INAT+NATIM-1) - PBCY
            PRCORD(3,INAT+NATIM-1) = PRCORD(3,INAT+NATIM-1) - PBCZ
            ENDDO
            DO MOIM=IFIRST,ILAST
            CENTCD(1,IMO+MOIM-1) = CENTCD(1,IMO+MOIM-1) - PBCX
            CENTCD(2,IMO+MOIM-1) = CENTCD(2,IMO+MOIM-1) - PBCY
            CENTCD(3,IMO+MOIM-1) = CENTCD(3,IMO+MOIM-1) - PBCZ
            ENDDO
            IF (IFRCPNT) THEN
              IFPT2 = LSTFPTS(MI)
             DO II=IFPT2,IFPT2+NFRCPNT(MI)-1
              FRCCRD(1,II) = FRCCRD(1,II) - PBCX
               FRCCRD(2,II) = FRCCRD(2,II) - PBCY
              FRCCRD(3,II) = FRCCRD(3,II) - PBCZ
              END DO
            END IF
C
 502        CONTINUE
            IMO = IMO + NORB(MI)
            INAT = INAT + NAT(IM)
         END DO
         JMO = JMO + NORB(MJ)
         JNAT = JNAT + NAT(JM)
      END DO
C     - SUM UP
      IF(GOPARR) THEN
         CALL DDI_GSUMF(1510,ENXR,1)
         CALL DDI_GSUMF(1509,EPEN,1)
         CALL DDI_GSUMF(1511,GXRFRG,6*NFRG*NFRG)
         CALL DDI_GSUMF(1512,SAB_SAVE,NFRG*NFRG*MXMO*MXMO)
         CALL DDI_GSUMF(1513,SAB_GRAD,NFRG*NFRG*MXMO*MXMO*6)
         CALL DDI_GSUMF(1514,FRCTRQX,6*MXFGPT)
      END IF
C
      DO IFRG = 1, NFRG
      DO ICRD = 1, 6
      DO JFRG = 1, NFRG
            DXRFRG(ICRD,IFRG)=DXRFRG(ICRD,IFRG)+GXRFRG(ICRD,JFRG,IFRG)
      END DO
      END DO
      END DO
C
      DO I=1,MXFGPT
       DO II=4,6
        FRCTRQX(II,I)= -FRCTRQX(II,I)
       END DO
      END DO
C
      RETURN
      END
C
C*MODULE EFPAUL  *DECK EFHFDR
      SUBROUTINE EFHFDR(H1,VMI,VMITRI,EXCHE,L1,CNVGED)
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
C
      LOGICAL CNVGED
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,MXATM=2000,
     *           MXSH=5000, MXGTOT=20000,
     *           MXDPPT=MXFRG*MXDFG*12,MXSHEF=1000, MXGEFP=4000)
      COMMON /CONV  / DENTOL,EN,ETOT,EHF,EHF0,DIFF,ITER,ICALP,ICBET
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /FMCOM / X(1)
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
C
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
      COMMON /EFPBAS/ EXB(MXGEFP,MXDFG),CSB(MXGEFP,MXDFG),
     *                CPB(MXGEFP,MXDFG),CDB(MXGEFP,MXDFG),
     *                CFB(MXGEFP,MXDFG),CGB(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUCB(MXFGPT),
     *                KSTARTB(MXSHEF,MXDFG),KATOMB(MXSHEF,MXDFG),
     *                KTYPEB(MXSHEF,MXDFG),KNGB(MXSHEF,MXDFG),
     *                KLOCB(MXSHEF,MXDFG),KMINB(MXSHEF,MXDFG),
     *                KMAXB(MXSHEF,MXDFG),NSHELLB(MXDFG),
     *                NGAUSSB(MXDFG),
     *                NATB(MXDFG),NUMB(MXDFG),NTPATMB
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
C
      DIMENSION VMI(L1,L1),H1((L1*L1+L1)/2)
      DIMENSION VMITRI(((L1*L1)+L1)/2)
C
C  DRIVER FOR AB INITIO/EFP2 EXCHANGE REPULSION.
C  EFAIV2- FOCK MATRIX OPERATOR, USED ON THE 2ND, 4TH, 8TH....ITERATION
C  EFAIE- EX-REP ENERGY CALCULATION, DONE AFTER CONVERGED
C
C  THE EXCHANGE REPULSION ENERGY IS A SIMPLER EXPRESSION, HOWEVER
C  EFAIV2 IS ACTUALLY CALLED BEFORE EFAIE IS CALLED. THEREFORE,
C  IT MAY BE BEST TO LEARN EFAIV2 FIRST.  SEVERAL INTERMEDIATE
C  QUANTITIES AND INTEGRALS ARE CALCULATED AND FORMED INSIDE
C  EFAIV2 AND THEN USED INSIDE EFAIE.  THE TWO
C  SUBROUTINES ARE VERY SIMILAR, SO A WORKING KNOWLEDGE OF
C  EFAIV2 WILL HELP THE PROGRAMMER UNDERSTAND EFAIE.
C
C---  CALL PRSQ(VMI,L1,L1,L1)
C---  CALL PRTRI(VMITRI,L1)
C
      NUMEFT = 0
      NRBEFT = 0
      NATMT  = 0
      DO MJ = 1,NFRG
      JM = ISET(MJ)
      NUMEFT = NUMEFT + NUMB(JM)
      NRBEFT = NRBEFT + NORB(MJ)
      NATMT  = NATMT  + NATB(JM)
      END DO
C
      ICORE = NUMCOR()
      EXCHE=0.0D+00
      L2=((L1*L1)+L1)/2
      L3 = L1*L1
      MXMO=0
      MXBF=0
      NGAUSS=0
      DO I = 1, NFRG
          MXMO=MAX(MXMO,NORB(I))
          MXBF=MAX(MXBF,NPBF(I))
      END DO
C
      DO I = 1, NSHELL
       NGAUSS= NGAUSS + KNG(NSHELL)
      END DO
C
C     IF THE SCF HAS CONVERGED, EFHFDR HAS BEEN CALLED TO OBTAIN THE
C     EXCHANGE REPULSION ENERGY AT THE END OF THE SCF. THEREFORE,
C     SKIP THE CALL TO EFAIV2 AND OBTAIN THE ENERGY DIRECTLY.
C
      IF(CNVGED) THEN
      GOTO 300
      ELSE
      IF(ITER.EQ.2) GOTO 100
      IF(MOD(ITER,4).NE.0) GOTO 450
 100  CONTINUE
C
C    SETUP FREE MEMORY
C
      CALL VALFM(LOADFM)
      LVEC    = 1       + LOADFM
      LTMAT   = LVEC    + L3
      LSMAT   = LTMAT   + L1*MXBF
      LCA     = LSMAT   + L1*MXBF
      LSAB    = LCA     + 3*MXATM
      LWRK    = LSAB    + NA*MXMO
      LFOCK   = LWRK    + MXBF
      LFSQ    = LFOCK   + L2
      LFMO    = LFSQ    + L3
      LWRK2   = LFMO    + L3
      LSMO    = LWRK2   + L1
      LTAB    = LSMO    + L3
      LPROVEC = LTAB    + NA*MXMO
      LCENTCA = LPROVEC + MXBF*MXMO
      LFOCKMB = LCENTCA + NA*3
      LFB     = LFOCKMB + ((MXMO*MXMO)+MXMO)/2
      LFA     = LFB     + MXMO*MXMO
      LVIJ    = LFA     + L2
      LESQ    = LVIJ    + L1*L1
      LRA     = LESQ    + NA*NA
      LVMO    = LRA     + ((NA*NA+NA)/2)*3
      LVMOSQ  = LVMO    + ((NA*NA)+NA)/2
      LABAB   = LVMOSQ  + NA*NA
      LDX     = LABAB   + L1*L1
      LDY     = LDX     + L2
      LDZ     = LDY     + L2
      LRCB    = LDZ     + L2
      LSAOB   = LRCB    + NAT*NRBEFT
      LR      = LSAOB   + L1*MXMO
      LRU     = LR      + L1*NRBEFT
      LRUV    = LRU     + 3*L1
      LV      = LRUV    + L1*L1
      LE      = LV      + L2
      LVIJA   = LE      + NA
      LVEFP   = LVIJA   + (NA-ICORE)*MXMO
      LVAAEFB = LVEFP   + L1*L1
      LIDOIT  = LVAAEFB + NA*NA
      LQUAD   = LIDOIT  + NMTTPT
      LVABEFA = LQUAD   + 6*NMTTPT
      LVMUJ   = LVABEFA + L1*MXBF
      LS      = LVMUJ   + L1*MXMO
      LDXSQ   = LS      + L2
      LDYSQ   = LDXSQ   + L1*L1
      LDZSQ   = LDYSQ   + L1*L1
      LSIGLAM = LDZSQ   + L1*L1
      LAST    = LSIGLAM   + L1*L1
C
      NEEDV = LAST - LOADFM - 1
      CALL GETFM(NEEDV)
C
      CALL VALFM(LOADFM)
      LABAB2  = 1       + LOADFM
      LABABSQ = LABAB2  + L2
      LZANV   = LABABSQ + NA*NA
      LAST    = LZANV   + NAT
C
      NEEDV2 = LAST - LOADFM -1
      CALL GETFM(NEEDV2)
      CALL EFAIV2(VMI,EX,CS,CP,CD,CF,CG,KSTART,KATOM,
     *           KTYPE,KNG,KLOC,KMIN,KMAX,NSHELL,C,NAT,L1,L2,
     *           MXBF,MXMO,NA,ZAN,X(LVEC),X(LTMAT),X(LSMAT),
     *           X(LSAB),X(LWRK),X(LFOCK),X(LFSQ),X(LRU),X(LRUV),
     *           X(LFMO),X(LWRK2),X(LSAOB),X(LR),
     *           X(LPROVEC),X(LCENTCA),X(LFOCKMB),X(LFB),
     *           X(LVIJ),X(LRA),X(LVMO),X(LVMOSQ),X(LABAB),
     *           X(LABAB2),X(LABABSQ),X(LDX),X(LDY),X(LDZ),
     *           X(LS),X(LVEFP),X(LVAAEFB),
     *           X(LIDOIT),X(LQUAD),X(LVABEFA),X(LVIJA),ICORE,
     *           X(LRCB),X(LZANV),NUMEFT,NRBEFT,NATMT,
     *           X(LSIGLAM))
      CALL RETFM(NEEDV)
      CALL RETFM(NEEDV2)
      END IF
      GOTO 450
C
 300  CONTINUE
      CALL VALFM(LOADFM)
      LVEC    = 1       + LOADFM
      LTMAT   = LVEC    + L3
      LSMAT   = LTMAT   + L1*MXBF
      LCA     = LSMAT   + L1*MXBF
      LSAB    = LCA     + 3*MXATM
      LWRK    = LSAB    + NA*MXMO
      LFOCK   = LWRK    + MXBF
      LFSQ    = LFOCK   + L2
      LFMO    = LFSQ    + L3
      LWRK2   = LFMO    + L3
      LSMO    = LWRK2   + L1
      LTAB    = LSMO    + L3
      LPROVEC = LTAB    + NA*MXMO
      LCENTCA = LPROVEC + MXBF*MXMO
      LFOCKMB = LCENTCA + NA*3
      LFB     = LFOCKMB + ((MXMO*MXMO)+MXMO)/2
      LFA     = LFB     + MXMO*MXMO
      LVIJ    = LFA     + L2
      LESQ    = LVIJ    + L1*L1
      LRA     = LESQ    + NA*NA
      LVMO    = LRA     + ((NA*NA+NA)/2)*3
      LVMOSQ  = LVMO    + ((NA*NA)+NA)/2
      LABAB   = LVMOSQ  + NA*NA
      LDX     = LABAB   + L1*L1
      LDY     = LDX     + L2
      LDZ     = LDY     + L2
      LRCB    = LDZ     + L2
      LSAOB   = LRCB    + NAT*MXMO
      LR      = LSAOB   + L1*MXMO
      LRU     = LR      + L1*MXMO
      LRUV    = LRU     + 3*L1
      LV      = LRUV    + L1*L1
      LE      = LV      + L2
      LVIJA   = LE      + NA
      LVEFP   = LVIJA   + (NA-ICORE)*MXMO
      LVAAEFB = LVEFP   + L1*L1
      LIDOIT  = LVAAEFB + NA*NA
      LQUAD   = LIDOIT  + NMTTPT
      LVABEFA = LQUAD   + 6*NMTTPT
      LVMUJ   = LVABEFA + L1*MXBF
      LS      = LVMUJ   + L1*MXMO
      LDXSQ   = LS      + L2
      LDYSQ   = LDXSQ   + L1*L1
      LDZSQ   = LDYSQ   + L1*L1
      LAST    = LDZSQ   + L1*L1
C
      NEEDE = LAST - LOADFM - 1
      CALL GETFM(NEEDE)
C
      CALL VALFM(LOADFM)
      LABAB2  = 1       + LOADFM
      LABABSQ = LABAB2  + L2
      LZANV   = LABABSQ + NA*NA
      LAST    = LZANV   + NAT
C
      NEEDE2 = LAST - LOADFM -1
      CALL GETFM(NEEDE2)
      CALL EFAIE(EXCHE,EX,CS,CP,CD,CF,CG,KSTART,KATOM,
     *           KTYPE,KNG,KLOC,KMIN,KMAX,NSHELL,C,NAT,L1,L2,
     *           MXBF,MXMO,NA,ZAN,X(LVEC),X(LTMAT),X(LSMAT),
     *           X(LSAB),X(LWRK),X(LFOCK),X(LFSQ),
     *           X(LFMO),X(LWRK2),
     *           X(LPROVEC),X(LCENTCA),X(LFOCKMB),X(LFB),
     *           X(LRA),X(LDX),X(LDY),X(LDZ),X(LRCB),
     *           X(LSAOB),X(LR),X(LVMOSQ),X(LRU),X(LRUV),X(LV),
     *           X(LVMO),X(LABAB),X(LE),X(LVIJA),
     *           X(LVEFP),X(LVAAEFB),X(LIDOIT),X(LQUAD),
     *           X(LVABEFA),X(LS),ICORE,X(LZANV),
     *           X(LDXSQ),X(LDYSQ),X(LDZSQ),NRBEFT)
      CALL RETFM(NEEDE)
      CALL RETFM(NEEDE2)
      GOTO 999
C
C     ADD VMI INTO THE AB INITIO FOCK MATRIX, AND THEN BACK
C     TRANSFORM TO THE AO BASIS
C
 450  CONTINUE
      CALL CPYSQT(VMI,VMITRI,L1,1)
      DO K=1,((NA*NA+NA)/2)
       H1(K)= H1(K)+VMITRI(K)
      END DO
C
 999  CONTINUE
      RETURN
      END
C
C*MODULE EFPAUL  *DECK EFAIE
      SUBROUTINE EFAIE(EXR,EXA,CSA,CPA,CDA,CFA,CGA,
     *           KSTARTA,KATOMA,KTYPEA,KNGA,
     *           KLOCA,KMINA,KMAXA,NSHELLA,CA,NATA,L1,L2,
     *           MXBF,MXMO,NA,ZAN,VEC,TMAT,SMAT,
     *           SAB,WRK,FOCK,FSQ,FMO,WRK2,
     *           PROVEC,CENTCA,FOCKMB,FB,RA,DX,DY,DZ,
     *           RCB,SAOB,R,VMOSQ,RU,RUV,V,VMO,ABAB,E,
     *           VIJA,VEFP,VAAEFB,IDOIT,QUAD,
     *           VABEFA,S,ICORE,ZANV,DXSQ,DYSQ,DZSQ,NRBEFT)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DOUBLE PRECISION NUMCOR(103)
      INTEGER COREA
      LOGICAL SOME,OUT,DBUG,LZINT,DOESP
C
      LOGICAL PACK2E
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,MXATM=2000,
     *           MXSH=5000, MXGTOT=20000,
     *           MXDPPT=MXFRG*MXDFG*12,MXSHEF=1000, MXGEFP=4000)
      PARAMETER(ZERO=0.0D+00,TWO=2.0D+00)
      PARAMETER(ONE=1.0D+00,RTPI=1.772453850905516D+00)
      PARAMETER(QTR=0.25D+00)
C
      COMMON /ATLIM / LIMLOW(MXATM),LIMSUP(MXATM)
C     COMMON /CONV  / DENTOL,EN,ETOT,EHF,EHF0,DIFF,ITER,ICALP,ICBET
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NAT(MXDFG),NUM(MXDFG),NTPATM
      COMMON /FMCOM / X(1)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
C
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      PARAMETER (NTX=4, NPF=450, NGRD=7, NPX=1000, MXQT=16)
      PARAMETER (PI4=0.785398163397448D+00)
      COMMON /FMTTBL/ FGRID(0:NTX,0:NPF,0:NGRD),XGRID(0:NTX,0:NPX)
     *,               TMAX,RFINC(0:NGRD),RXINC
     *,               RMR(MXQT),TLGM(0:MXQT),NORD
      COMMON /MP2PRT/ SOME,OUT,DBUG
      DATA NUMCOR/2*0,
     *            2*1,                  6*1,
     *            2*5,                  6*5,
     *            2*9,          10*9,   6*14,
     *            2*18,         10*18,  6*23,
     *            2*27,  14*27, 10*34,  6*39,
     *            2*43,  14*43,    50/
C
      DIMENSION EXA(MXGTOT),CSA(MXGTOT),CPA(MXGTOT),CDA(MXGTOT),
     *          CFA(MXGTOT),CGA(MXGTOT),
     *          KSTARTA(MXSH),KATOMA(MXSH),KTYPEA(MXSH),KNGA(MXSH),
     *          KLOCA(MXSH),KMINA(MXSH),KMAXA(MXSH),ZAN(MXATM),
     *          ZANV(NATA)
      DIMENSION FOCKMB((MXMO*MXMO+MXMO)/2,NFRG),FB(MXMO,MXMO),
     *          RCB(NATA,NRBEFT)
C
      DIMENSION VEC(L1,L1), PROVEC(MXBF,MXMO), SMAT(L1,MXBF),
     *          TMAT(L1,MXBF),CA(3,MXATM),WRK(MXBF),SAB(NA,MXMO),
     *          SAOB(L1,MXMO),R(L1,NRBEFT),CENTCA(NA,3),
     *          VMOSQ(NA,NA),RU(3,L1),RUV(L1,L1),V(L2),VMO(L2)
C
      DIMENSION ABAB(L2),E(NA),WRK2(L1)
      DIMENSION FOCK(L2),FSQ(L1,L1),FMO(L1,L1),
     *          S(L2)
      DIMENSION VEFP(L1,L1),VAAEFB(NA,NA),IDOIT(NMTTPT),QUAD(6*NMTTPT),
     *          VABEFA(L1,MXBF),VIJA(NA-ICORE,MXMO)
      DIMENSION DX(L2),DY(L2),DZ(L2),RA((NA*NA+NA)/2,3)
C
      DIMENSION DXSQ(L1,L1),DYSQ(L1,L1),DZSQ(L1,L1)
C
C     ROUTINE TO CALCULATE THE EXCHANGE REPULSION ENERGY BETWEEN
C     AB INITIO MOLECULES AND EFP2 FRAGMENTS.  EXR IS THE FINAL
C     EXCHANGE REPULSION ENERGY.  IT IS COMPRISED OF 3 COMPONENTS.
C     EACH COMPONENT HAS A DIFFERENT DEPENDENCE UPON THE OVERLAP.
C     EXR1- S^0 (NO OVERLAP DEPENDENCE)
C     EXR2- S^1 (OVERLAP TO THE FIRST POWER)
C     EXR3- S^2 (OVERLAP TO THE SECOND POWER)
C
      EXR=ZERO
      EXR1=ZERO
      EXR2=ZERO
      EXR3=ZERO
      MXMO2=(MXMO*MXMO+MXMO)/2
      LENFM=MXMO2*NFRG
      L3=L1*L1
C
      COREA=0
      DO II=1,NATA
        ZA=ZAN(II)
        IZ = INT(ZAN(II))
        COREA=COREA+INT(NUMCOR(IZ))
        ZANV(II)=ZAN(II)-(NUMCOR(IZ)*TWO)
      END DO
      COREA = COREA + 1
      CALL DAREAD(IDAF,IODA,VEC,L3,15,0)
      CALL DAREAD(IDAF,IODA,PROVEC,MXBF*MXMO,267,0)
      CALL STFASE(VEC,L1,L1,NA)
      CALL DAREAD(IDAF,IODA,FOCKMB,LENFM,268,0)
      CALL DAREAD(IDAF,IODA,FOCK,L2,14,0)
      CALL DAREAD(IDAF,IODA,S,L2,12,0)
      CALL DAREAD(IDAF,IODA,DX,L2,95,0)
      CALL TFTRI(RA(1,1),DX,VEC,WRK2,NA,L1,L1)
      CALL DAREAD(IDAF,IODA,DY,L2,96,0)
      CALL TFTRI(RA(1,2),DY,VEC,WRK2,NA,L1,L1)
      CALL DAREAD(IDAF,IODA,DZ,L2,97,0)
      CALL TFTRI(RA(1,3),DZ,VEC,WRK2,NA,L1,L1)
      CALL CPYTSQ(DX,DXSQ,L1,1)
      CALL CPYTSQ(DX,DYSQ,L1,1)
      CALL CPYTSQ(DX,DZSQ,L1,1)
      II = 0
      DO 150 I = 1,NA
         II = II + I
         DO IMU=1,3
         CENTCA(I,IMU)=RA(II,IMU)
         END DO
  150 CONTINUE
      CALL CPYTSQ(FOCK,FSQ,L1,1)
      CALL TFSQU(FMO,FSQ,VEC,WRK,L1,L1)
      CALL CPYTSQ(FOCKMB(1,1),FB,MXMO,1)
C
C     UNPACK THE 2E- INTEGRALS CALCULATED BY EFP2EI, WHICH WAS CALLED
C     FROM INSIDE EFAIV2.
C
      NUMEFT = 0
      NRBEFT = 0
      DO MJ = 1,NFRG
      JM = ISET(MJ)
      NUMEFT = NUMEFT + NUM(JM)
      NRBEFT = NRBEFT + NORB(MJ)
      END DO
      CALL VALFM(LOADFM)
      LXX = LOADFM +1
      LIX = LXX + NINTMX
      LSABL   = LIX + NINTMX
      LSMATL  = LSABL + NA*NRBEFT
      LTMATL  = LSMATL + L1*NUMEFT
      LSPRIME = LTMATL + L1*NUMEFT
      LDPRIME = LSPRIME + L1*NUMEFT
      LWRK    = LDPRIME + L1*L1
      LAOSQ   = LWRK + NUMEFT
      LAST    = LAOSQ   + L1*L1
      NEED2   = LAST - LOADFM - 1
      CALL GETFM(NEED2)
      CALL EFPUNP(X(LXX),X(LIX),NINTMX,NUMEFT,NRBEFT,
     *            PROVEC,VEC,X(LSABL),X(LSMATL),X(LTMATL),
     *            X(LSPRIME),X(LDPRIME),L1,NA,
     *            X(LWRK),
     *            TERM3,TERM4,
     *            COREA,MXBF,MXMO,NFRG,CA,NATA)
      CALL RETFM(NEED2)
C
      JNAT = 1
      JMO = 1
      DO MJ = 1,NFRG
      JM = ISET(MJ)
C
C     OBTAIN THE OVERLAP MATRIX
C
      CALL STINT(SMAT,TMAT,MXBF,L1,NATA,NAT(JM),
     *           NGAUSS(JM),NSHELL(JM),EX(1,JM),CS(1,JM),CP(1,JM),
     *           CD(1,JM),CF(1,JM),CG(1,JM),KSTART(1,JM),KATOM(1,JM),
     *           KTYPE(1,JM),KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,PRCORD(1,JNAT),CA)
C
      CALL DGEMM('N','N',L1,MXMO,MXBF,ONE,SMAT,L1,PROVEC(1,JMO),MXBF,
     *           ZERO,SAOB,L1)
      CALL TFSQP(SAB,SMAT,VEC,PROVEC(1,JMO),WRK,
     *           L1,MXBF,NA,NORB(MJ),NA,MXMO,.FALSE.)
      CALL VCLR(VABEFA,1,L1*MXBF)
      CALL EFCEF2(VABEFA,MXBF,L1,NAT(JM),NATA,
     *           NGAUSS(JM),NSHELL(JM),EX(1,JM),CS(1,JM),
     *           CP(1,JM),CD(1,JM),CF(1,JM),CG(1,JM),KSTART(1,JM),
     *           KATOM(1,JM),KTYPE(1,JM),KNG(1,JM),KLOC(1,JM),
     *           KMIN(1,JM),KMAX(1,JM),L1,NSHELLA,
     *           EXA,CSA,CPA,CDA,CFA,
     *           CGA,KSTARTA,KATOMA,KTYPEA,
     *           KNGA,KLOCA,KMINA,KMAXA,
     *           PRCORD(1,JNAT),CA,ZANV)
      CALL TFSQP(VIJA,VABEFA,VEC(1,COREA),PROVEC(1,JMO),WRK,
     *           L1,MXBF,NA-COREA+1,NORB(MJ),NA-COREA+1,MXMO,.FALSE.)
C
C   A CALL TO HUI'S EF*EF ROUTINES, WHICH CALCULATE C- CHARGE,
C   D- DIPOLE, O-OCTUPOLE INTERACTIONS FOR THE MULTIPOLE APPROXIMATION
C   OF V + J
C
C
C           -- VAAEFB --
C
      CALL VCLR(VEFP,1,L1*L1)
      CALL EFCEF(VEFP,MJ,L1,L1,NATA,NATA,
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,L1,NSHELLA,
     *           EXA,CSA,CPA,CDA,CFA,
     *           CGA,KSTARTA,KATOMA,KTYPEA,
     *           KNGA,KLOCA,KMINA,KMAXA,
     *           CA,CA,IDOIT)
      CALL EFDEF(VEFP,MJ,L1,L1,NATA,NATA,
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,L1,NSHELLA,
     *           EXA,CSA,CPA,CDA,CFA,
     *           CGA,KSTARTA,KATOMA,KTYPEA,
     *           KNGA,KLOCA,KMINA,KMAXA,
     *           CA,CA,IDOIT)
      CALL EFQEF(VEFP,MJ,L1,L1,NATA,NATA,
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,L1,NSHELLA,
     *           EXA,CSA,CPA,CDA,CFA,
     *           CGA,KSTARTA,KATOMA,KTYPEA,
     *           KNGA,KLOCA,KMINA,KMAXA,
     *           CA,CA,IDOIT,QUAD)
      CALL VCLR(VAAEFB(1,1),1,NA*NA)
      CALL TFSQP(VAAEFB(1,1),VEFP,VEC,
     *           VEC,WRK2,
     *           L1,L1,NA,NA,
     *           NA,NA,.FALSE.)
C
C
      LIMLOW(1) = 1
      LAT = 1
      J = 1
      DO 10 I = 1,NSHELLA
         IAT = KATOMA(I)
         IF (LAT .EQ. IAT) GO TO 10
         LAT = IAT
         LIMSUP(J) = KLOCA(I)-1
         J = J+1
         LIMLOW(J) = KLOCA(I)
 10   CONTINUE
C
C  MUS- MU SMALL
C  MUL- MU LARGE
C  DETERMINE LOCATION OF BASIS FUNCTIONS
C
      MUS=1
      DO J=1,NATA
       MUL=LIMSUP(J)
       IF (J.EQ.NATA) MUL=L1
       DO MU=MUS,MUL
        RU(1,MU)=CA(1,J)
        RU(2,MU)=CA(2,J)
        RU(3,MU)=CA(3,J)
       END DO
      IF(J.EQ.NATA) GO TO 11
      MUS=LIMLOW(J+1)
 11   CONTINUE
      END DO
C
      DO II = 1,NATA
       DO J = 1,NORB(MJ)
       RCB(II,J)=SQRT(((CA(1,II)-CENTCD(1,JMO+J-1))**2)+
     *             ((CA(2,II)-CENTCD(2,JMO+J-1))**2)+
     *             ((CA(3,II)-CENTCD(3,JMO+J-1))**2))
       END DO
      END DO
C
      DO II = 1,L1
       DO JJ = 1,L1
        RUV(II,JJ)= SQRT((RU(1,II)-RU(1,JJ))**2+(RU(2,II)-RU(2,JJ))**2+
     *                  (RU(3,II)-RU(3,JJ))**2)
       END DO
      END DO
C
      DO II = 1,L1
         DO J=1,NORB(MJ)
          R(II,J) = SQRT(((RU(1,II)-CENTCD(1,JMO+J-1))**2)+
     *             ((RU(2,II)-CENTCD(2,JMO+J-1))**2)+
     *             ((RU(3,II)-CENTCD(3,JMO+J-1))**2))
         END DO
      END DO
C
      DO J=1,NORB(MJ)
C
      DOESP=.FALSE.
      LZINT=.FALSE.
      CALL VIKJ(V,J,JMO,CENTCD,L2,SOME,LZINT,
     *          DOESP)
      CALL TFTRI(VMO,V,VEC,WRK2,NA,L1,L1)
      CALL CPYTSQ(VMO,VMOSQ,NA,1)
C
C     BEGIN USE OF THE SGO APPROXIMATION TO CALCULATE THE
C     ( I J | I J ) INTEGRALS.  I IS HANDLED IN THE AO BASIS,
C     MU AND NU.
C
C     NOTE THAT UNLIKE -EFAIV2- THERE IS NO HANDLING OF THE CASE
C     IN WHICH -SAOB- CONTAINS A VALUE CLOSE TO ZERO.
C
      K=0
       DO MU=1,L1
        ALPMUJ= ZERO - ((TWO/(R(MU,J)**2))*LOG(ABS(SAOB(MU,J))))
        DO NU=1,MU
        K=K+1
        ALPNUJ= ZERO - ((TWO/(R(NU,J)**2))*LOG(ABS(SAOB(NU,J))))
        IF (SAOB(MU,J).EQ.ZERO .OR. SAOB(NU,J) .EQ.ZERO) THEN
          ABAB(K)=ZERO
          GOTO 25
        ELSE
        TEMP= TWO*(1/RTPI)*SQRT((TWO*ALPMUJ*ALPNUJ)/
     *                    (ALPMUJ+ALPNUJ))*SAOB(MU,J)*
     *                    SAOB(NU,J)
        T=(QTR*TWO*ALPMUJ*ALPNUJ)/(ALPMUJ+ALPNUJ)*RUV(MU,NU)*RUV(MU,NU)
        IF (T.LE.TMAX) THEN
            TVAL=T*RFINC(0)
            IPT=NINT(TVAL)
            FX =      FGRID(4,IPT,0) *TVAL
            FX = (FX +FGRID(3,IPT,0))*TVAL
            FX = (FX +FGRID(2,IPT,0))*TVAL
            FX = (FX +FGRID(1,IPT,0))*TVAL
            FX =  FX +FGRID(0,IPT,0)
            F0T=FX
        ELSE
            F0T= SQRT(PI4/T)
        ENDIF
        ABAB(K)= TEMP*F0T
        END IF
 25     CONTINUE
        END DO
       END DO
       CALL TFDIAG(ABAB,VEC,E,WRK2,L1,L2,L1,NA)
       DO L=COREA,NA
       EXR1= EXR1 - E(L)
       END DO
C
C      USE INTERMEDIATE QUANTITIES OBTAINED ABOVE AND ROLL THEM
C      INTO THE EXCHANGE REPULSION ENERGY COMPONENTS
C
       DO L=1,NORB(MJ)
        DO I=COREA,NA
        EXR2= EXR2 - SAB(I,J)*SAB(I,L)*FB(J,L)
        END DO
       END DO
C
       DO I=COREA,NA
        DO K=COREA,NA
         EXR3 = EXR3 + TWO*SAB(I,J)*SAB(I,J)*VMOSQ(K,K)
         EXR3 = EXR3 - SAB(I,J)*SAB(K,J)*VMOSQ(I,K)
        END DO
C
        DO II=1,NATA
         ZA=ZAN(II)
         IZ = INT(ZAN(II))
         ZA=ZA-TWO*NUMCOR(IZ)
         EXR3 = EXR3 - SAB(I,J)*SAB(I,J)*ZA/RCB(II,J)
        END DO
        DO K=COREA,NA
         EXR3 = EXR3 + SAB(I,J)*SAB(K,J)*FMO(I,K)
        END DO
       END DO
C
      END DO
C
      DO I=COREA,NA
       DO K=COREA,NA
       DO J=1,NORB(MJ)
       EXR3 = EXR3 + SAB(I,J)*SAB(K,J)*VAAEFB(I,K)
       END DO
       END DO
      END DO
      DO I=1,NA-COREA+1
       DO J=1,NORB(MJ)
        EXR2 = EXR2 - TWO*VIJA(I,J)*SAB(I+COREA-1,J)
       END DO
      END DO
C
      JMO = JMO + NORB(MJ)
      JNAT = JNAT + NAT(JM)
C
C  END OF LOOP OVER FRAGMENTS
C
      END DO
C
C     THESE PULLED BELOW THE BOTTOM OF THE LOOP IN FEB 2010
C     ADD IN THE CONTRIBUTIONS FROM THE 2E- INTEGRALS.
C     TERM3 IS J-TYPE, TERM4 IS K-TYPE
C
      EXR2 = EXR2+TERM3
      EXR2 = EXR2+TERM4
C
      EXR=TWO*(EXR1+EXR2+EXR3)
C
C          THIS IS BASICALLY DEBUG PRINTING,
C          BUT USEFUL AT PRESENT STAGE OF DEVELOPMENT OF THIS CODE
      WRITE(IW,9000) EXR
C
C---  EXR1=EXR1*TWO
C---  EXR2=EXR2*TWO
C---  EXR3=EXR3*TWO
C---  PRINT *, 'EXR1=', EXR1
C---  PRINT *, 'EXR2=', EXR2
C---  PRINT *, 'EXR3=', EXR3
C
      RETURN
 9000 FORMAT(1X,'EXCHANGE REPULSION ENERGY IS EXR=',F20.10)
      END
C
C
C*MODULE EFPAUL  *DECK EFAIV2
      SUBROUTINE EFAIV2(VMI,EXA,CSA,CPA,CDA,CFA,CGA,
     *           KSTARTA,KATOMA,KTYPEA,KNGA,
     *           KLOCA,KMINA,KMAXA,NSHELLA,CA,NATA,L1,L2,
     *           MXBF,MXMO,NA,ZAN,VEC,TMAT,SMAT,SAB,WRK,FOCK,
     *           FSQ,RU,RUV,FMO,WRK2,SAOB,R,
     *           PROVEC,CENTCA,FOCKMB,FB,V,
     *           RA,VMO,VMOSQ,ABAB,ABAB2,ABABSQ,
     *           DX,DY,DZ,S,VEFP,VAAEFB,IDOIT,
     *           QUAD,VABEFA,VIJA,ICORE,RCB,ZANV,
     *           NUMEFT,NRBEFT,NATMT,SIGLAM)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DOUBLE PRECISION NUMCOR(103)
C
      INTEGER COREA
      LOGICAL SOME,OUT,DBUG,LZINT,
     *        DOESP,DIRSCF,FDIFF,GOPARR,DSKWRK,MASWRK
C
      LOGICAL TDSKWRK
      LOGICAL SCHWRZ,PACK2E,PK,PANDK,BLOCK
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,MXATM=2000,
     *           MXSH=5000, MXGTOT=20000, MXGSH=30,
     *           MXDPPT=MXFRG*MXDFG*12,MXSHEF=1000, MXGEFP=4000)
      PARAMETER(ZERO=0.0D+00,TWO=2.0D+00,HALF=0.5D+00)
      PARAMETER(ONE=1.0D+00,RTPI=1.772453850905516D+00)
      PARAMETER(QTR=0.25D+00)
C
      COMMON /ATLIM / LIMLOW(MXATM),LIMSUP(MXATM)
      COMMON /CONV  / DENTOL,EN,ETOT,EHF,EHF0,DIFF,ITER,ICALP,ICBET
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NAT(MXDFG),NUM(MXDFG),NTPATM
      COMMON /FMCOM / X(1)
      COMMON /INTFIL/ NINTMX,NHEX,NTUPL,PACK2E,INTTYP,IGRDTYP
      COMMON /INTOPT/ ISCHWZ,IECP,NECP,IEFLD
C
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
C
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /IOFILE/ IR,IW,IP,IJK,IPK,IDAF,NAV,IODA(950)
      PARAMETER (NTX=4, NPF=450, NGRD=7, NPX=1000, MXQT=16)
      PARAMETER (PI4=0.785398163397448D+00)
      COMMON /FMTTBL/ FGRID(0:NTX,0:NPF,0:NGRD),XGRID(0:NTX,0:NPX)
     *,               TMAX,RFINC(0:NGRD),RXINC
     *,               RMR(MXQT),TLGM(0:MXQT),NORD
      COMMON /MP2PRT/ SOME,OUT,DBUG
      COMMON /OPTSCF/ DIRSCF,FDIFF
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PKFIL / PK,PANDK,BLOCK
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
      DATA NUMCOR/2*0,
     *            2*1,                  6*1,
     *            2*5,                  6*5,
     *            2*9,          10*9,   6*14,
     *            2*18,         10*18,  6*23,
     *            2*27,  14*27, 10*34,  6*39,
     *            2*43,  14*43,    50/
C
      DIMENSION EXA(MXGTOT),CSA(MXGTOT),CPA(MXGTOT),CDA(MXGTOT),
     *          CFA(MXGTOT),CGA(MXGTOT),
     *          KSTARTA(MXSH),KATOMA(MXSH),KTYPEA(MXSH),KNGA(MXSH),
     *          KLOCA(MXSH),KMINA(MXSH),KMAXA(MXSH),ZAN(MXATM),
     *          ZANV(NATA)
      DIMENSION FOCKMB((MXMO*MXMO+MXMO)/2,NFRG),FB(MXMO,MXMO),
     *          RCB(NATA,NRBEFT)
C
      DIMENSION VEC(L1,L1), PROVEC(MXBF,MXMO), SMAT(L1,MXBF),
     *          TMAT(L1,MXBF),CA(3,MXATM),WRK(MXBF),SAB(NA,MXMO),
     *          SAOB(L1,MXMO),R(L1,NRBEFT),CENTCA(NA,3),
     *          VMOSQ(NA,NA),RU(3,L1),RUV(L1,L1),V(L2),VMO(L2)
C
      DIMENSION ABAB(L2),ABAB2(L2),ABABSQ(NA,NA),WRK2(L1)
      DIMENSION FOCK(L2),FSQ(L1,L1),FMO(L1,L1),
     *          S(L2),VMI(L1,L1),SIGLAM(L1,L1)
      DIMENSION VEFP(L1,L1),VAAEFB(NA,NA),IDOIT(NMTTPT),QUAD(6*NMTTPT),
     *          VABEFA(L1,MXBF),VIJA(NA-ICORE,MXMO)
      DIMENSION DX(L2),DY(L2),DZ(L2),RA((NA*NA+NA)/2,3)
C
C             THIS ROUTINE CALCULATES THE FOCK OPERATOR VMI
C     FOR THE EXCHANGE REPULSION BETWEEN AB INITIO AND EFP2 MOLECULES
C
      MXMO2=(MXMO*MXMO+MXMO)/2
      LENFM=MXMO2*NFRG
      L3=L1*L1
      CALL VCLR(VMI,1,L1*L1)
C
      COREA=0
      DO II=1,NATA
        ZA=ZAN(II)
        IZ = INT(ZAN(II))
        COREA=COREA+INT(NUMCOR(IZ))
        ZANV(II)=ZAN(II)-(NUMCOR(IZ)*TWO)
      END DO
      COREA = COREA + 1
C
C     READ VARIOUS QUANTITIES OFF OF DISK
C
      CALL DAREAD(IDAF,IODA,VEC,L3,15,0)
      CALL DAREAD(IDAF,IODA,PROVEC,MXBF*MXMO,267,0)
      CALL STFASE(VEC,L1,L1,NA)
      CALL DAREAD(IDAF,IODA,FOCKMB,LENFM,268,0)
      CALL DAREAD(IDAF,IODA,FOCK,L2,14,0)
      CALL DAREAD(IDAF,IODA,S,L2,12,0)
      CALL DAREAD(IDAF,IODA,DX,L2,95,0)
      CALL TFTRI(RA(1,1),DX,VEC,WRK2,NA,L1,L1)
      CALL DAREAD(IDAF,IODA,DY,L2,96,0)
      CALL TFTRI(RA(1,2),DY,VEC,WRK2,NA,L1,L1)
      CALL DAREAD(IDAF,IODA,DZ,L2,97,0)
      CALL TFTRI(RA(1,3),DZ,VEC,WRK2,NA,L1,L1)
      II = 0
      DO 150 I = 1,NA
         II = II + I
         DO IMU=1,3
         CENTCA(I,IMU)=RA(II,IMU)
         END DO
  150 CONTINUE
      CALL CPYTSQ(FOCK,FSQ,L1,1)
      CALL TFSQU(FMO,FSQ,VEC,WRK,L1,L1)
      CALL CPYTSQ(FOCKMB(1,1),FB,MXMO,1)
C
      LIMLOW(1) = 1
      LAT = 1
      J = 1
      DO 10 I = 1,NSHELLA
         IAT = KATOMA(I)
         IF (LAT .EQ. IAT) GO TO 10
         LAT = IAT
         LIMSUP(J) = KLOCA(I)-1
         J = J+1
         LIMLOW(J) = KLOCA(I)
 10   CONTINUE
C
C  MUS- MU SMALL
C  MUL- MU LARGE
C  DETERMINES LOCATION OF BASIS FUNCTIONS
C
      MUS=1
      DO J=1,NATA
       MUL=LIMSUP(J)
       IF (J.EQ.NATA) MUL=L1
       DO MU=MUS,MUL
        RU(1,MU)=CA(1,J)
        RU(2,MU)=CA(2,J)
        RU(3,MU)=CA(3,J)
       END DO
      IF(J.EQ.NATA) GO TO 11
      MUS=LIMLOW(J+1)
 11   CONTINUE
      END DO
C
      JNAT = 1
      JMO = 1
      DO MJ = 1,NFRG
      JM = ISET(MJ)
C
C     CALCULATE VARIOUS DISTANCES, RCB, RUV AND R, USED LATER ON
C
C        PRIOR TO FEB 2010, RCB'S 2ND INDEX WAS JUST 'J',
C                             R'S 2ND INDEX WAS JUST 'J'
C                           AND -JMO- WAS NOT INCREMENTED AT ALL
C
      DO II = 1,NATA
       DO J = 1,NORB(MJ)
       RCB(II,JMO+J-1)=SQRT(((CA(1,II)-CENTCD(1,JMO+J-1))**2)+
     *                      ((CA(2,II)-CENTCD(2,JMO+J-1))**2)+
     *                      ((CA(3,II)-CENTCD(3,JMO+J-1))**2))
       END DO
      END DO
C
      DO II = 1,L1
       DO JJ = 1,L1
        RUV(II,JJ)= SQRT((RU(1,II)-RU(1,JJ))**2
     *                  +(RU(2,II)-RU(2,JJ))**2
     *                  +(RU(3,II)-RU(3,JJ))**2)
       END DO
      END DO
C
      DO II = 1,L1
         DO J=1,NORB(MJ)
          R(II,JMO+J-1) = SQRT(((RU(1,II)-CENTCD(1,JMO+J-1))**2)+
     *             ((RU(2,II)-CENTCD(2,JMO+J-1))**2)+
     *             ((RU(3,II)-CENTCD(3,JMO+J-1))**2))
         END DO
      END DO
      JMO = JMO + NORB(MJ)
      END DO
C
C     OBTAIN NECESSARY AB INITIO 2E- INTEGRALS
C     ALL 4 CENTERS RESIDE ON THE AB INITIO MOLECULE
C     THE INTEGRAL QUANTITIES ARE MULTIPLIED BY OVERLAPS
C     BETWEEN THE AB INITIO MOLECULE AND THE EFP2S.
C
C     THIS CALCULATION IS DONE FOR EVERY EFP2 ALL AT ONCE
C
      CALL VALFM(LOADFM)
      LXX = LOADFM +1
      LIX = LXX + NINTMX
      LSABL   = LIX + NINTMX
      LSMATL  = LSABL + NA*NRBEFT
      LTMATL  = LSMATL + L1*NUMEFT
      LSPRIME = LTMATL + L1*NUMEFT
      LSKN    = LSPRIME + L1*L1
      LVAO    = LSKN + NA*NA
      LWRK    = LVAO +  L1*L1
      LWRK2 = LWRK     + MXBF
      LVMO  =  LWRK2    + L1
      LAST = LVMO + L1*L1
      NEED2 = LAST - LOADFM -1
      CALL GETFM(NEED2)
      CALL UNPTEI(X(LXX),X(LIX),NINTMX,
     *                  VEC,X(LSABL),X(LSMATL),X(LTMATL),
     *                  L1,NA,
     *                  COREA,MXBF,PROVEC,WRK,
     *                  MXMO,NFRG,CA,NATA,VMI,NUMEFT,NRBEFT,
     *                  X(LSPRIME),X(LSKN),X(LVAO),WRK2,
     *                  SIGLAM,X(LVMO))
      CALL RETFM(NEED2)
C
C     OBTAIN FREE MEMORY AND CALCULATE THE 2E- INTEGRALS BETWEEN
C     THE EFP2S AND THE AB INITIO MOLECULES
C     THIS IS COMPUTATIONALLY COSTLY.  THE INTEGRALS THEMSELVES
C     ARE STORED ON DISK, SO THERE IS NO NEED TO RE-CALCULATE THEM
C     THEREFORE, THIS IS SKIPPED IF THE ITERATION COUNT IS GREATER
C     THAN 2. SUBROUTINE ZM IS USED TO EVALUATE THE SCHWARZ
C     INEQUALITY, WHICH REDUCES THE INTEGRALS COMPUTED AND SPEEDS
C     UP THE CALCULATION
C
      IF (ITER .GT. 2) GOTO 400
      CALL BASCHK(LMAX)
                    NANGM =  4
      IF(LMAX.EQ.2) NANGM =  6
      IF(LMAX.EQ.3) NANGM = 10
      IF(LMAX.EQ.4) NANGM = 15
      IF(LMAX.EQ.5) NANGM = 21
      IF(LMAX.EQ.6) NANGM = 28
                 MAXG = NANGM**4
      IF(PK)     MAXG = MAXG*3
      IF(DIRSCF) MAXG = 1
      SCHWRZ = ISCHWZ.GT.0
      NSHELT = NSHELLA
      DO MJ = 1,NFRG
      JM = ISET(MJ)
      NSHELT = NSHELT + NSHELL(JM)
      END DO
      NSH2 = (NSHELT*NSHELT+NSHELT)/2
      MXG2=MXGSH*MXGSH
      MINTMX=NINTMX
      CALL VALFM(LOADFM)
      LBUFP  = LOADFM + 1
      LBUFK  = LBUFP  + MINTMX
      LIX    = LBUFK  + MINTMX
      LXINTS = LIX    + MINTMX
      LGHOND = LXINTS + NSH2
      LDDIJ  = LGHOND + MAXG
      LSMATL = LDDIJ  + 49*MXG2
      LZETAMU = LSMATL + L1*NUMEFT
      LTMATL = LZETAMU + L1*NUMEFT
      LRZETA = LTMATL + L1*NUMEFT
      LRUZ   = LRZETA + 3*NUMEFT
      LAST   = LRUZ + L1*NUMEFT
      NEED = LAST - LOADFM - 1
      CALL GETFM(NEED)
      TDSKWRK = DSKWRK
      DSKWRK  = .TRUE.
      IDUMMY=0
      DUMMY=0.0D+00
      CALL ZM(RU,X(LZETAMU),NUMEFT,L1,NATMT,NATA,MXBF,
     *              NSHELLA,EXA,CSA,CPA,CDA,CFA,CGA,KSTARTA,
     *              KATOMA,KTYPEA,KNGA,KLOCA,
     *              KMINA,KMAXA,CA,X(LSMATL),X(LTMATL),
     *              X(LRZETA),X(LRUZ))
      CALL EFP2EI(SCFTYP,.FALSE.,.FALSE.,.FALSE.,.FALSE.,
     *           SCHWRZ,NINT2,NSCHWZ,1,1,
     *           X(LBUFP),X(LBUFK),X(LIX),NINTMX,
     *           X(LGHOND),MAXG,
     *           IDUMMY,DUMMY,DUMMY,DUMMY,DUMMY,DUMMY,DUMMY,
     *           1,X(LSMATL),NUMEFT,L1,X(LZETAMU),SIGLAM)
      CALL RETFM(NEED)
      DSKWRK=TDSKWRK
C
C     SKIP TO HERE IF ITERATION COUNT IS GREATER THAN 2
C     UNPVXR UNPACKS THE 2E- INTEGRALS CALCULATED BY EFP2EI
C     FROM THE DISK.  THEN, THE INTEGRALS ARE MULTIPLIED BY
C     THE NECESSARY OVERLAPS BETWEEN THE AB INITIO MOLECULE
C     AND THE EFP2S. ALL EFP2S ARE HANDLED ALL AT ONCE, AND
C     THE RESULT IS ADDED INTO VMI.
C
 400  CONTINUE
      CALL VALFM(LOADFM)
      LXX = LOADFM +1
      LIX = LXX + NINTMX
      LWRK    = LIX + NINTMX
      LSABL   = LWRK + MXBF
      LSMATL  = LSABL + NA*NRBEFT
      LTMATL  = LSMATL + L1*NUMEFT
      LDPRIME = LTMATL + L1*NUMEFT
      LVAO    = LDPRIME + L1*L1
      LSPRIME = LVAO    + NUMEFT*L1
      LDSTAR  = LSPRIME + NUMEFT*NA
      LSSTAR  = LDSTAR  + NA*NA
      LVAO2   = LSSTAR  + NUMEFT*L1
      LAST    = LVAO2   + L1*L1
      NEED2   = LAST - LOADFM - 1
      CALL GETFM(NEED2)
      CALL UNPVXR(X(LXX),X(LIX),NINTMX,NUMEFT,NRBEFT,
     *            PROVEC,VEC,X(LSABL),X(LSMATL),X(LTMATL),
     *            L1,NA,
     *            X(LWRK),
     *            VMI,
     *            COREA,MXBF,MXMO,
     *            NFRG,NATA,CA,X(LDPRIME),
     *            X(LVAO),X(LSPRIME),X(LDSTAR),X(LSSTAR),X(LVAO2))
      CALL RETFM(NEED2)
C
      JNAT = 1
      JMO = 1
      DO MJ = 1,NFRG
      JM = ISET(MJ)
C
C     BEGINNING OF MJ LOOP, WHICH LOOPS OVER ALL FRAGMENTS
C     OBTAIN OVERLAP IN THE AO (SMAT) AND MO (SAB) BASIS
C
      CALL STINT(SMAT,TMAT,MXBF,L1,NATA,NAT(JM),
     *           NGAUSS(JM),NSHELL(JM),EX(1,JM),CS(1,JM),CP(1,JM),
     *           CD(1,JM),CF(1,JM),CG(1,JM),KSTART(1,JM),KATOM(1,JM),
     *           KTYPE(1,JM),KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,PRCORD(1,JNAT),CA)
C
C  THIS MATCHES THE OFF-DIAGONAL AO SAB IN THE WORKING CODE
      CALL DGEMM('N','N',L1,MXMO,MXBF,ONE,SMAT,L1,PROVEC(1,JMO),MXBF,
     *           ZERO,SAOB,L1)
      CALL TFSQP(SAB,SMAT,VEC,PROVEC(1,JMO),WRK,
     *           L1,MXBF,NA,NORB(MJ),NA,MXMO,.FALSE.)
C
C     OBTAIN THE 1E- ELECTRON NUCLEAR ATTRACTION INTEGRALS
C     (I | Z/R(A) | J), SOMETIMES REFERRED TO AS VABEFA BY
C     THE EFP2/EFP2 CODE
C
C          -- VABEFA --
C
      CALL VCLR(VABEFA,1,L1*MXBF)
      CALL EFCEF2(VABEFA,MXBF,L1,NAT(JM),NATA,
     *           NGAUSS(JM),NSHELL(JM),EX(1,JM),CS(1,JM),
     *           CP(1,JM),CD(1,JM),CF(1,JM),CG(1,JM),KSTART(1,JM),
     *           KATOM(1,JM),KTYPE(1,JM),KNG(1,JM),KLOC(1,JM),
     *           KMIN(1,JM),KMAX(1,JM),L1,NSHELLA,
     *           EXA,CSA,CPA,CDA,CFA,
     *           CGA,KSTARTA,KATOMA,KTYPEA,
     *           KNGA,KLOCA,KMINA,KMAXA,
     *           PRCORD(1,JNAT),CA,ZANV)
      CALL TFSQP(VIJA,VABEFA,VEC(1,COREA),PROVEC(1,JMO),WRK,
     *           L1,MXBF,NA-COREA+1,NORB(MJ),NA-COREA+1,MXMO,.FALSE.)
C
C   A CALL TO HUI'S EF*EF ROUTINES, WHICH CALCULATE C- CHARGE,
C   D- DIPOLE, O-OCTUPOLE INTERACTIONS FOR THE MULTIPOLE APPROXIMATION
C   OF V + J
C
C           -- VAAEFB --
C
      CALL VCLR(VEFP,1,L1*L1)
      CALL EFCEF(VEFP,MJ,L1,L1,NATA,NATA,
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,L1,NSHELLA,
     *           EXA,CSA,CPA,CDA,CFA,
     *           CGA,KSTARTA,KATOMA,KTYPEA,
     *           KNGA,KLOCA,KMINA,KMAXA,
     *           CA,CA,IDOIT)
      CALL EFDEF(VEFP,MJ,L1,L1,NATA,NATA,
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,L1,NSHELLA,
     *           EXA,CSA,CPA,CDA,CFA,
     *           CGA,KSTARTA,KATOMA,KTYPEA,
     *           KNGA,KLOCA,KMINA,KMAXA,
     *           CA,CA,IDOIT)
      CALL EFQEF(VEFP,MJ,L1,L1,NATA,NATA,
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,L1,NSHELLA,
     *           EXA,CSA,CPA,CDA,CFA,
     *           CGA,KSTARTA,KATOMA,KTYPEA,
     *           KNGA,KLOCA,KMINA,KMAXA,
     *           CA,CA,IDOIT,QUAD)
      CALL VCLR(VAAEFB(1,1),1,NA*NA)
      CALL TFSQP(VAAEFB(1,1),VEFP,VEC,
     *           VEC,WRK2,
     *           L1,L1,NA,NA,
     *           NA,NA,.FALSE.)
C
      DO J=1,NORB(MJ)
      DOESP=.FALSE.
      LZINT=.FALSE.
C
C     MORE 1E- ELECTRON-NUCLEUS ATTRACTION INTEGRALS
C
      CALL VIKJ(V,J,JMO,CENTCD,L2,SOME,LZINT,
     *          DOESP)
      CALL TFTRI(VMO,V,VEC,WRK2,NA,L1,L1)
      CALL CPYTSQ(VMO,VMOSQ,NA,1)
C
C     THE SPHERICAL GAUSSIAN APPROXIMATION IS USED TO APPROXIMATE
C     THE ( M J | I J ) INTEGRALS.  IN THIS CASE, M AND I RESIDE
C     ON THE AB INITIO MOLECULE, AND ARE TREATED IN THE AO BASIS,
C     MU AND NU.
C
      CALL VCLR(ABAB,1,L2)
C
      DO 550 MU=1,L1
        IF(ABS(SAOB(MU,J)).LT.1.0D-06) GO TO 550
        ALPMUJ= ZERO - ((TWO/(R(MU,J)**2))*LOG(ABS(SAOB(MU,J))))
        DO 500 NU=1,MU
        K= (MU*MU-MU)/2 + NU
        IF(ABS(SAOB(NU,J)).LT.1.0D-06) GO TO 500
        ALPNUJ= ZERO - ((TWO/(R(NU,J)**2))*LOG(ABS(SAOB(NU,J))))
        TEMP= TWO*(1/RTPI)*SQRT((TWO*ALPMUJ*ALPNUJ)/
     *                    (ALPMUJ+ALPNUJ))*SAOB(MU,J)*
     *                    SAOB(NU,J)
        T=(QTR*TWO*ALPMUJ*ALPNUJ)/(ALPMUJ+ALPNUJ)*RUV(MU,NU)*RUV(MU,NU)
        IF (T.LE.TMAX) THEN
            TVAL=T*RFINC(0)
            IPT=NINT(TVAL)
            FX =      FGRID(4,IPT,0) *TVAL
            FX = (FX +FGRID(3,IPT,0))*TVAL
            FX = (FX +FGRID(2,IPT,0))*TVAL
            FX = (FX +FGRID(1,IPT,0))*TVAL
            FX =  FX +FGRID(0,IPT,0)
            F0T=FX
        ELSE
            F0T= SQRT(PI4/T)
        ENDIF
        ABAB(K)= TEMP*F0T
  500   CONTINUE
  550 CONTINUE
C
       CALL TFTRI(ABAB2,ABAB,VEC,WRK2,NA,L1,L1)
       CALL CPYTSQ(ABAB2,ABABSQ,NA,1)
       DO M=COREA,NA
        DO I=COREA,NA
        VMI(M,I)= VMI(M,I) - ABABSQ(M,I)
        END DO
       END DO
C
C      AT THIS POINT, WE USE ALL OF THE INTERMEDIATE QUANTITIES
C      FORMED IN THE CODE ABOVE, AND ROLL THEM INTO VMI.
C
C      FB IS THE FOCK MATRIX OF THE EFP2
C
       DO L=1,NORB(MJ)
        DO M=COREA,NA
         DO I=COREA,NA
          VMI(M,I) = VMI(M,I) - HALF*SAB(M,J)*SAB(I,L)*FB(J,L)
          VMI(M,I) = VMI(M,I) - HALF*SAB(I,J)*SAB(M,L)*FB(J,L)
         END DO
        END DO
       END DO
C
       DO I=COREA,NA
        DO M=COREA,NA
         DO K=COREA,NA
          VMI(M,I) = VMI(M,I) + SAB(M,J)*SAB(I,J)*TWO*VMOSQ(K,K)
          VMI(M,I) = VMI(M,I) - SAB(M,J)*SAB(K,J)*VMOSQ(I,K)
          VMI(M,I) = VMI(M,I) - SAB(I,J)*SAB(K,J)*VMOSQ(M,K)
          VMI(M,I) = VMI(M,I) + TWO*SAB(K,J)*SAB(K,J)*VMOSQ(M,I)
         END DO
C
         DO II=1,NATA
          ZA=ZAN(II)
          IZ = INT(ZAN(II))
          ZA=ZA-TWO*NUMCOR(IZ)
          VMI(M,I) = VMI(M,I) - SAB(M,J)*SAB(I,J)*ZA/RCB(II,JMO+J-1)
         END DO
        END DO
        DO M=COREA,NA
          DO K=COREA,NA
          VMI(M,I) = VMI(M,I) + SAB(M,J)*SAB(K,J)*FMO(I,K)
          VMI(M,I) = VMI(M,I) + SAB(I,J)*SAB(K,J)*FMO(M,K)
          END DO
        END DO
       END DO
C
      END DO
C
      DO I=COREA,NA
       DO K=COREA,NA
        DO M=COREA,NA
         DO J=1,NORB(MJ)
          VMI(M,I) = VMI(M,I) + SAB(M,J)*SAB(K,J)*VAAEFB(I,K)
          VMI(M,I) = VMI(M,I) + SAB(I,J)*SAB(K,J)*VAAEFB(M,K)
         END DO
        END DO
       END DO
      END DO
C
      DO I=1,NA-COREA+1
       DO J=1,NORB(MJ)
        DO M=COREA,NA
         VMI(M,I+COREA-1) = VMI(M,I+COREA-1) - VIJA(I,J)*SAB(M,J)
        END DO
       END DO
      END DO
C
      DO I=COREA,NA
       DO J=1,NORB(MJ)
        DO M=1,NA-COREA+1
         VMI(M+COREA-1,I) = VMI(M+COREA-1,I) - VIJA(M,J)*SAB(I,J)
        END DO
       END DO
      END DO
C
      JMO = JMO + NORB(MJ)
      JNAT = JNAT + NAT(JM)
C  END OF LOOP OVER FRAGMENTS
      END DO
C
      RETURN
      END
C
C*MODULE INT1    *DECK VIKJ
      SUBROUTINE VIKJ(V,MOB,JMO,CENTCD,LL2,
     *                  SOME,LZINT,DOESP)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION MOROKM
C
      LOGICAL SOME,LZINT,UNCON,DOESP
      LOGICAL IANDJ,DOUBLE,GOPARR,DSKWRK,MASWRK,SCREEN
      LOGICAL ISEPS, USEPS
      PARAMETER (MXSH=5000, MXGTOT=20000, MXATM=2000, MAXSH=84,
     *           MXFGPT=12000)
C
      DIMENSION SBLK(784),TBLK(784),VBLK(784),ZBLK(784),
     *          FT(784),DIJ(784),IJX(784),IJY(784),IJZ(784),
     *          XIN(343),YIN(343),ZIN(343),CONI(MAXSH),CONJ(MAXSH),
     *          IX(84),IY(84),IZ(84),JX(84),JY(84),JZ(84)
      DIMENSION CENTCD(3,MXFGPT),V(LL2)
C
      PARAMETER (MXCHRM=1)
C
      COMMON /CHMGMS/ XCHM(MXCHRM),YCHM(MXCHRM),ZCHM(MXCHRM),
     *                DXELMM(MXCHRM),DYELMM(MXCHRM),DZELMM(MXCHRM),
     *                QCHM(MXCHRM),NCHMAT,KCHRMM
      COMMON /FMORUN/ ESPSCF,E0SCF(2),EMP2S,IDAFMO,ICURFG,JCURFG,KCURFG,
     *                ICURLAY,ICURUNT,NAT1E,NCURSH,NGAU,ICURPOP,IFMOSTP,
     *                MONCOR,NEEDR,MODRST,NORBPROJ,NUNESP,ISKIPESP,
     *                IESDPPC,IDOPROP,MP2RUN,ICURIT
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /SCINP / VLAMB,SCREEN
      COMMON /STV   / XINT,YINT,ZINT,TAA,X0,Y0,Z0,
     *                XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /WERMIT/ W1,W2(2),W3(3),W4(4),W5(5),W6(6),W7(7),
     *                W8(8),W9(9),W10(10),
     *                W11(11),W12(12),W13(13),W14(14),W15(15)
      COMMON /SHLNRM/ PNRM(84)
      COMMON /SYMIND/ TOL,II,JJ,LIT,LJT,MINI,MINJ,MAXI,MAXJ,IANDJ
      COMMON /RELWFN/ RMETHOD,QRQMT,CLIG,CLIG2,QRTOL,IQRORD,MODQR,NESOC,
     *                NRATOM,NUMU,NQMTR,NQRDAF,MORDA,NDARELB
      COMMON /WFNOPT/ SCFTYP,VBTYP,DFTYPE,TDDFTYP,CITYP,CCTYP,
     *                MPLEVL,MPCTYP
      PARAMETER (MAXDEN=25*MXATM, LENABC=2000)
      COMMON /CONV  / DENTOL,EN,ETOT,EHF,EHF0,DIFF,ITER,ICALP,ICBET
      COMMON /ISEPS / ISEPS,USEPS
      COMMON /SOLV  / FEPSI,RDS,DISEX2,COSURF(3,LENABC),SRAD(MXATM),
     *                QDEN(MAXDEN),AR(LENABC),
     *                NSPA,NPS,NPS2,NDEN,NPSPHER
C
      PARAMETER (ZERO=0.0D+00, PT5=0.5D+00, ONE=1.0D+00, TWO=2.0D+00,
     *           PI212=1.1283791670955D+00, RLN10=2.30258D+00)
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     *          3, 0, 0, 2, 2, 1, 0, 1, 0, 1,
     *          4, 0, 0, 3, 3, 1, 0, 1, 0, 2,
     *          2, 0, 2, 1, 1,
     *          5, 0, 0, 4, 4, 1, 0, 1, 0, 3,
     *          3, 2, 0, 2, 0, 3, 1, 1, 2, 2,
     *          1,
     *          6, 0, 0, 5, 5, 1, 0, 1, 0, 4,
     *          4, 2, 0, 2, 0, 4, 1, 1, 3, 3,
     *          0, 3, 3, 2, 1, 2, 1, 2/
      DATA IX / 1, 8, 1, 1,15, 1, 1, 8, 8, 1,
     *         22, 1, 1,15,15, 8, 1, 8, 1, 8,
     *         29, 1, 1,22,22, 8, 1, 8, 1,15,
     *         15, 1,15, 8, 8,
     *         36, 1, 1,29,29, 8, 1, 8, 1,22,
     *         22,15, 1,15, 1,22, 8, 8,15,15,
     *          8,
     *         43, 1, 1,36,36, 8, 1, 8, 1,29,
     *         29,15, 1,15, 1,29, 8, 8,22,22,
     *          1,22,22,15, 8,15, 8,15/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     *          0, 3, 0, 1, 0, 2, 2, 0, 1, 1,
     *          0, 4, 0, 1, 0, 3, 3, 0, 1, 2,
     *          0, 2, 1, 2, 1,
     *          0, 5, 0, 1, 0, 4, 4, 0, 1, 2,
     *          0, 3, 3, 0, 2, 1, 3, 1, 2, 1,
     *          2,
     *          0, 6, 0, 1, 0, 5, 5, 0, 1, 2,
     *          0, 4, 4, 0, 2, 1, 4, 1, 3, 0,
     *          3, 2, 1, 3, 3, 1, 2, 2/
      DATA IY / 1, 1, 8, 1, 1,15, 1, 8, 1, 8,
     *          1,22, 1, 8, 1,15,15, 1, 8, 8,
     *          1,29, 1, 8, 1,22,22, 1, 8,15,
     *          1,15, 8,15, 8,
     *          1,36, 1, 8, 1,29,29, 1, 8,15,
     *          1,22,22, 1,15, 8,22, 8,15, 8,
     *         15,
     *          1,43, 1, 8, 1,36,36, 1, 8,15,
     *          1,29,29, 1,15, 8,29, 8,22, 1,
     *         22,15, 8,22,22, 8,15,15/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     *          0, 0, 3, 0, 1, 0, 1, 2, 2, 1,
     *          0, 0, 4, 0, 1, 0, 1, 3, 3, 0,
     *          2, 2, 1, 1, 2,
     *          0, 0, 5, 0, 1, 0, 1, 4, 4, 0,
     *          2, 0, 2, 3, 3, 1, 1, 3, 1, 2,
     *          2,
     *          0, 0, 6, 0, 1, 0, 1, 5, 5, 0,
     *          2, 0, 2, 4, 4, 1, 1, 4, 0, 3,
     *          3, 1, 2, 1, 2, 3, 3, 2/
      DATA IZ / 1, 1, 1, 8, 1, 1,15, 1, 8, 8,
     *          1, 1,22, 1, 8, 1, 8,15,15, 8,
     *          1, 1,29, 1, 8, 1, 8,22,22, 1,
     *         15,15, 8, 8,15,
     *          1, 1,36, 1, 8, 1, 8,29,29, 1,
     *         15, 1,15,22,22, 8, 8,22, 8,15,
     *         15,
     *          1, 1,43, 1, 8, 1, 8,36,36, 1,
     *         15, 1,15,29,29, 8, 8,29, 1,22,
     *         22, 8,15, 8,15,22,22,15/
C
      DATA MOROKM/8HMOROKUMA/
      DATA NONE,RNONE/4HNONE,8HNONE    /
C
C     ----- COMPUTE CONVENTIONAL H, S, AND T INTEGRALS -----
C     THIS ROUTINE IS BASED ON HSANDT, WHERE H = V + T
C     HERE, WE ONLY WANT V.
C
      UNCON=RMETHOD.NE.RNONE.AND.MOD(MODQR,2).EQ.1
      TOL = RLN10*ITOL
      IF(SOME  .AND.  SCREEN) WRITE(IW,9010) VLAMB
      IF(DOESP.AND.LZINT) THEN
         WRITE(IW,*) 'STORAGE NOT ALLOCATED IN -VIKJ-'
         CALL ABRT
      END IF
C
C     ----- MOPAC INTEGRALS ARE DONE ELSEWHERE -----
C
      IF(MPCTYP.NE.NONE) THEN
         CALL MPCINT
         RETURN
      END IF
C
      IF(ISEPS  .AND.  ITER.GT.0) THEN
         CALL DAREAD(IDAF,IODA,H,LL2,11,0)
         CALL DAWRIT(IDAF,IODA,H,LL2,87,0)
      END IF
C
C     ----- RESET SOME PARAMETERS FOR MOROKUMA DECOMPOSITIONS -----
C     ISAVE .EQ. 0 : SAVE S, H, AND T TO DAF 12, 11, AND 13
C     ISAVE .EQ. 1 : SAVE S, H, AND T TO DAF 12, 11, AND 13
C                    AND SAVE S AND H TO DAF 312 AND 311
C     NOTE THAT LL2 IS ALWAYS (NUM*NUM+NUM)/2,
C     L1,L2 MAY BE SMALLER THAN USUAL FOR A MONOMER IN A MOROKUMA RUN
C
      IF (RUNTYP.EQ.MOROKM) THEN
         CALL STINT1(ISTART,IEND,JSTART,LOCIJ,NATST,NATED,ISAVE,L1,L2)
      ELSE
         ISTART = 1
         IEND   = NSHELL
         JSTART = 1
         LOCIJ  = 0
         NATST  = 1
         NATED  = NAT+NCHMAT
         IF(ISEPS) NATED = NAT+NPS
         IF(DOESP) NATED=NAT1E
         ISAVE  = 0
         L1 = NUM
         IF(UNCON) L1=NUMU
         L2 = (L1*(L1+1))/2
      END IF
C
      IF(GOPARR) THEN
         CALL VCLR(H ,1,LL2)
         CALL VCLR(S ,1,LL2)
         CALL VCLR(T ,1,LL2)
C-XYZ-   CALL VCLR(TX,1,LL2)
C-XYZ-   CALL VCLR(TY,1,LL2)
C-XYZ-   CALL VCLR(TZ,1,LL2)
         IF(LZINT) CALL VCLR(Z,1,LL2)
         IF(DOESP) CALL VCLR(ESP1E,1,LL2)
      END IF
C
C     ----- INTIALIZE PARALLEL -----
C
      IPCOUNT = ME - 1
C
C     ----- I SHELL -----
C
      DO 720 II = ISTART,IEND
         I = KATOM(II)
         XI = C(1,I)
         YI = C(2,I)
         ZI = C(3,I)
         I1 = KSTART(II)
         I2 = I1+KNG(II)-1
         LIT = KTYPE(II)
         MINI = KMIN(II)
         MAXI = KMAX(II)
         LOCI = KLOC(II)-MINI-LOCIJ
C
C     ----- J SHELL -----
C
         DO 700 JJ = JSTART,II
C
C     ----- GO PARALLEL! (STATIC LOAD BALANCING) -----
C
            IF (GOPARR) THEN
               IPCOUNT = IPCOUNT + 1
               IF (MOD(IPCOUNT,NPROC).NE.0) GO TO 700
            END IF
C
            J = KATOM(JJ)
            XJ = C(1,J)
            YJ = C(2,J)
            ZJ = C(3,J)
            J1 = KSTART(JJ)
            J2 = J1+KNG(JJ)-1
            LJT = KTYPE(JJ)
            MINJ = KMIN(JJ)
            MAXJ = KMAX(JJ)
            LOCJ = KLOC(JJ)-MINJ-LOCIJ
            NROOTS = (LIT+LJT-2)/2+1
            RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
            IANDJ = II .EQ. JJ
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
            IJ = 0
            MAX = MAXJ
            DO 160 I = MINI,MAXI
               NX = IX(I)
               NY = IY(I)
               NZ = IZ(I)
               IF (IANDJ) MAX = I
               DO 140 J = MINJ,MAX
                  IJ = IJ+1
                  IJX(IJ) = NX+JX(J)
                  IJY(IJ) = NY+JY(J)
                  IJZ(IJ) = NZ+JZ(J)
                  FT (IJ) = 2*(JX(J)+JY(J)+JZ(J)) + 3
C-XYZ-            FTX(IJ) = 2* JX(J)              + 1
C-XYZ-            FTY(IJ) = 2*       JY(J)        + 1
C-XYZ-            FTZ(IJ) = 2*             JZ(J)  + 1
  140          CONTINUE
  160       CONTINUE
C
            CALL VCLR( SBLK,1,IJ)
            CALL VCLR( TBLK,1,IJ)
            CALL VCLR( VBLK,1,IJ)
C-XYZ-      CALL VCLR(TXBLK,1,IJ)
C-XYZ-      CALL VCLR(TYBLK,1,IJ)
C-XYZ-      CALL VCLR(TZBLK,1,IJ)
            IF(LZINT.OR.DOESP) CALL VCLR(ZBLK,1,IJ)
C
C     ----- I PRIMITIVE
C
            JGMAX = J2
            DO 520 IG = I1,I2
               AI = EX(IG)
               ARRI = AI*RR
               AXI = AI*XI
               AYI = AI*YI
               AZI = AI*ZI
               CALL SETCONI(CONI,IG)
C
C     ----- J PRIMITIVE
C
               IF (IANDJ) JGMAX = IG
               DO 500 JG = J1,JGMAX
                  AJ = EX(JG)
                  AA = AI+AJ
                  AA1 = ONE/AA
                  DUM = AJ*ARRI*AA1
                  IF (DUM .GT. TOL) GO TO 500
                  FAC = EXP(-DUM)
                  CALL SETCONI(CONJ,JG)
                  AX = (AXI+AJ*XJ)*AA1
                  AY = (AYI+AJ*YJ)*AA1
                  AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
C     THE ONLY REASON WHY -ILZ WORKS WITH THIS DENSITY THAT ASSUMES
C     HERMITICITY IS BECAUSE <I|-ILZ|I>=0 (MOMENTUM QUENCHING).
C
                  DOUBLE=IANDJ.AND.IG.NE.JG
                  MAX = MAXJ
                  NN = 0
                  DTWO=ONE
                  IF(DOUBLE) DTWO=TWO
C                 NOTE THAT PNRM FACTORS FOR S AND P SHELLS ARE 1.
                  SPDIJ=CS(IG)*CP(JG)*FAC
                  DO 220 I = MINI,MAXI
                     IF (IANDJ) MAX = I
                     FACI=FAC*CONI(I)*PNRM(I)*DTWO
                     NN1=NN+1
                     DO 200 J = MINJ,MAX
                        NN = NN+1
                        DIJ(NN)=FACI*CONJ(J)*PNRM(J)
C                    WRITE(6,*) 'WWWDIJ',NN,I,J,II,JJ,DIJ(NN)
  200                CONTINUE
C            CORRECT FOR L-SHELL DOUBLE COUNTING OF THE SP
C            OFF-DIAGONAL TERMS (FOR NON-L SHELLS CSI*CPJ IS ZERO).
C            NN1 POINTS TO THE APPROPRIATE DENSITY ELEMENT
                     IF(MINJ.LE.1.AND.I.GT.1.AND.DOUBLE)
     *                 DIJ(NN1)=DIJ(NN1)*PT5+SPDIJ
  220             CONTINUE
C
C     ----- OVERLAP AND KINETIC ENERGY
C
                  TAA = SQRT(AA1)
                  T1 = -TWO*AJ*AJ*TAA
                  T2 = -PT5*TAA
                  X0 = AX
                  Y0 = AY
                  Z0 = AZ
                  IN = -7
                  DO 320 I = 1,LIT
                     IN = IN+7
                     NI = I
                     DO 300 J = 1,LJT
                        JN = IN+J
                        NJ = J
                        CALL STVINT
                        XIN(JN) = XINT*TAA
                        YIN(JN) = YINT*TAA
                        ZIN(JN) = ZINT*TAA
                        NJ = J+2
                        CALL STVINT
                        XIN(JN+49) = XINT*T1
                        YIN(JN+49) = YINT*T1
                        ZIN(JN+49) = ZINT*T1
                        NJ = J-2
                        IF (NJ .GT. 0) THEN
                           CALL STVINT
                        ELSE
                           XINT = ZERO
                           YINT = ZERO
                           ZINT = ZERO
                        END IF
                        N = (J-1)*(J-2)
                        DUM = N * T2
                        XIN(JN+98) = XINT*DUM
                        YIN(JN+98) = YINT*DUM
                        ZIN(JN+98) = ZINT*DUM
                        IF(LZINT) THEN
                           NJ = J+1
                           CALL STVINT
                           XIN(JN+147) = XINT*TAA
                           YIN(JN+147) = YINT*TAA
C---                       ZIN(JN+147) = ZINT*TAA
                           NJ = J-1
                           IF (NJ .GT. 0) THEN
                              CALL STVINT
                           ELSE
                              XINT = ZERO
                              YINT = ZERO
C---                          ZINT = ZERO
                           END IF
                           XIN(JN+196) = XINT*TAA*NJ
                           YIN(JN+196) = YINT*TAA*NJ
C---                       ZIN(JN+196) = ZINT*TAA*NJ
                        END IF
  300                CONTINUE
  320             CONTINUE
                  DO 340 I = 1,IJ
                     NX = IJX(I)
                     NY = IJY(I)
                     NZ = IJZ(I)
                     DUM   =             XIN(NX)    *YIN(NY)*ZIN(NZ)
                     DUM1X = (XIN(NX+49)+XIN(NX+98))*YIN(NY)*ZIN(NZ)
                     DUM1Y = (YIN(NY+49)+YIN(NY+98))*XIN(NX)*ZIN(NZ)
                     DUM1Z = (ZIN(NZ+49)+ZIN(NZ+98))*XIN(NX)*YIN(NY)
                     DUM1  = DUM1X + DUM1Y + DUM1Z
                      SBLK(I) =  SBLK(I) + DIJ(I)* DUM
                      TBLK(I) =  TBLK(I) + DIJ(I)*(DUM*AJ*FT (I)+DUM1 )
C-XYZ-               TXBLK(I) = TXBLK(I) + DIJ(I)*(DUM*AJ*FTX(I)+DUM1X)
C-XYZ-               TYBLK(I) = TYBLK(I) + DIJ(I)*(DUM*AJ*FTY(I)+DUM1Y)
C-XYZ-               TZBLK(I) = TZBLK(I) + DIJ(I)*(DUM*AJ*FTZ(I)+DUM1Z)
                     IF(LZINT) THEN
                        DUM2 = XIN(NX+147)*YIN(NY+196)
     *                       - XIN(NX+196)*YIN(NY+147)
                        ZBLK(I) = ZBLK(I) + DIJ(I)*DUM2*ZIN(NZ)
                     END IF
  340             CONTINUE
C
C     ----- NUCLEAR ATTRACTION
C     EL SIGUIENTE DO SOLO EN CASO NO SCREEN.
C
                  IF (.NOT.SCREEN) THEN
                     DUM = PI212*AA1
                     DO 400 I = 1,IJ
                        DIJ(I) = DIJ(I)*DUM
  400                CONTINUE
                  END IF
C
                  AAX = AA*AX
                  AAY = AA*AY
                  AAZ = AA*AZ
C
C     -NCHMAT- IS NONZERO IF THERE ARE EXTERNAL CHARGES WHICH
C     PERTURB THE SYSTEM, SUCH AS IF CHARMM IS IN USE.  NOTE
C     THAT THERE IS ALSO A NUCLEAR REPULSION TERM WHICH IS NOT
C     INCLUDED HERE, IT IS IN THE CHARMM INTERFACE CODE.
C
                  DO 460 IC = MOB,MOB
                        ZNUC = 1.0D+00
                        CX = CENTCD(1,JMO+IC-1)
                        CY = CENTCD(2,JMO+IC-1)
                        CZ = CENTCD(3,JMO+IC-1)
C
                  IF (SCREEN) THEN
                  ELSE
                     XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                     IF (NROOTS.LE.3) CALL RT123
                     IF (NROOTS.EQ.4) CALL ROOT4
                     IF (NROOTS.EQ.5) CALL ROOT5
                     IF (NROOTS.GE.6) CALL ROOT6
                     MM = 0
                     DO 430 K = 1,NROOTS
                        UU = AA*U(K)
                        WW = W(K)*ZNUC
                        TT = ONE/(AA+UU)
                        TAA = SQRT(TT)
                        X0 = (AAX+UU*CX)*TT
                        Y0 = (AAY+UU*CY)*TT
                        Z0 = (AAZ+UU*CZ)*TT
                        IN = -7+MM
                        J0 = 2
C
C                       J0 SKIPS THE TRIVIAL COMBINATION NI=NJ=1
C                       THAT IS DONE EXPLICITLY NOW
C
                        XIN(IN+8) = W1
                        YIN(IN+8) = W1
                        ZIN(IN+8) = W1*WW
                        DO 420 I = 1,LIT
                           IN = IN+7
                           NI = I
                           DO 410 J = J0,LJT
                              JN = IN+J
                              NJ = J
                              CALL STVINT
                              XIN(JN) = XINT
                              YIN(JN) = YINT
                              ZIN(JN) = ZINT*WW
  410                      CONTINUE
                           J0 = 1
  420                   CONTINUE
                        MM = MM+49
  430                CONTINUE
                     DO 450 I = 1,IJ
                        NX = IJX(I)
                        NY = IJY(I)
                        NZ = IJZ(I)
                        DUM = ZERO
                        MM = 0
                        DO 440 K = 1,NROOTS
                           DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
                           MM = MM+49
  440                   CONTINUE
                           VBLK(I) = VBLK(I) + DUM*DIJ(I)
  450                CONTINUE
                   END IF
  460             CONTINUE
C
C     ----- END OF PRIMITIVE LOOPS -----
C
  500          CONTINUE
  520       CONTINUE
C
C     ----- COPY BLOCK INTO H-CORE, OVERLAP, AND KINETIC ENERGY MATRICES
C
            MAX = MAXJ
            NN = 0
            DO 620 I = MINI,MAXI
               LI = LOCI+I
               IN = (LI*(LI-1))/2
               IF (IANDJ) MAX = I
               DO 600 J = MINJ,MAX
                  LJ = LOCJ+J
                  JN = LJ+IN
                  NN = NN+1
                   V(JN) =  VBLK(NN)
C-XYZ-            TX(JN) = TXBLK(NN)
C-XYZ-            TY(JN) = TYBLK(NN)
C-XYZ-            TZ(JN) = TZBLK(NN)
C                 IF(LZINT) Z(JN) = ZBLK(NN)
C                 IF(DOESP) ESP1E(JN)=ZBLK(NN)
  600          CONTINUE
  620       CONTINUE
C
C     ----- END OF SHELL LOOPS -----
C
  700    CONTINUE
  720 CONTINUE
C
      IF(LZINT) CALL DAWRIT(IDAF,IODA,Z,LL2,379,0)
C
      RETURN
C
 9010 FORMAT(1X,'SCREENING VALUE=',F20.5,' IS BEING USED')
      END
C
C*MODULE EFPAUL   *DECK EFPUNP
      SUBROUTINE EFPUNP(XX,IX,NINTMX,NUMEFT,NRBEFT,PROVEC,
     *                  VEC,SAB,SMAT,TMAT,SPRIME,DPRIME,L1,
     *                  NA,
     *                  WRK,
     *                  TERM3,TERM4,COREA,MXBF,
     *                  MXMO,NFRG,CA,NATA)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      INTEGER COREA
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER(TWO=2.0D+00, ZERO=0.0D+00)
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,
     *           MXSH=5000, MXGTOT=20000,MXSHEF=1000, MXGEFP=4000)
      DIMENSION XX(NINTMX),IX(*)
C
      DIMENSION WRK(MXBF),
     *          SAB(NA,NRBEFT),VEC(L1,L1),
     *          PROVEC(MXBF,MXMO)
      DIMENSION SMAT(L1,NUMEFT),TMAT(L1,NUMEFT)
      DIMENSION SPRIME(L1,NUMEFT), DPRIME(L1,L1)
C
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NAT(MXDFG),NUM(MXDFG),NTPATM
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /NSHEL / EXA(MXGTOT),CSA(MXGTOT),CPA(MXGTOT),CDA(MXGTOT),
     *                CFA(MXGTOT),CGA(MXGTOT),CHA(MXGTOT),CIA(MXGTOT),
     *                KSTARTA(MXSH),KATOMA(MXSH),KTYPEA(MXSH),
     *                KNGA(MXSH),KLOCA(MXSH),KMINA(MXSH),
     *                KMAXA(MXSH),NSHELLA
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /PCKLAB/ LABSIZ
C
C  UNPACK 2E- INTEGRALS REQUIRED FOR EFAIE
C
      CALL VCLR(DPRIME,1,L1*L1)
      DO LAMBDA=1,L1
       DO KSIGMA=1,L1
        DO K=COREA,NA
          DPRIME(LAMBDA,KSIGMA)=DPRIME(LAMBDA,KSIGMA)+
     *                    (VEC(LAMBDA,K)*VEC(KSIGMA,K))
        END DO
       END DO
      END DO
C
      CALL VCLR(SMAT,1,L1*NUMEFT)
      CALL VCLR(SAB,1,NRBEFT)
      CALL VCLR(SPRIME,1,L1*NUMEFT)
      JAO=0
      JMO=0
      JNAT=0
      DO MJ=1,NFRG
      JM = ISET(MJ)
      CALL STINT(SMAT(1,JAO+1),TMAT(1,JAO+1),MXBF,L1,NATA,NAT(JM),
     *           NGAUSS(JM),NSHELL(JM),EX(1,JM),CS(1,JM),CP(1,JM),
     *           CD(1,JM),CF(1,JM),CG(1,JM),KSTART(1,JM),KATOM(1,JM),
     *           KTYPE(1,JM),KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,PRCORD(1,JNAT+1),CA)
      CALL TFSQP(SAB(1,JMO+1),SMAT,VEC,PROVEC(1,JMO+1),WRK,
     *           L1,NUM(JM),NA,NORB(MJ),NA,NORB(MJ),.FALSE.)
      DO MU=1,L1
       DO JZETA=1,NUM(JM)
        TEMP2=ZERO
        DO I=COREA,NA
         TEMP1=ZERO
         DO J=1,NORB(MJ)
          TEMP1=TEMP1+(SAB(I,JMO+J)*PROVEC(JZETA,J+JMO))
         END DO
        TEMP2=TEMP2+(TEMP1*VEC(MU,I))
        END DO
       SPRIME(MU,JZETA+JAO)=TEMP2
       END DO
      END DO
      JMO = JMO + NORB(MJ)
      JAO = JAO + NUM(JM)
      JNAT = JNAT + NAT(JM)
      END DO      ! NFRG LOOP
C
      TERMAO=ZERO
      TERM4AO=ZERO
      IT=39
      CALL SEQREW(IT)
C
C        READ TRANSFORMED 2E- INTEGRAL FILE IN REVERSE CANONICAL ORDER.
C
  150 CONTINUE
      CALL PREAD(IT,XX,IX,NX,NINTMX)
C
      IF (NX.EQ.0) GO TO 300
      MX = ABS(NX)
      IF (MX.GT.NINTMX) THEN
         IF(MASWRK) WRITE(6,*) 'CONFUSION WITH INTEGRALS IN -SRTING-'
         CALL ABRT
      END IF
C
C     ----- UNPACK LABEL AND PROCESS INTEGRAL -----
C
         DO 700 M=1,MX
         VAL   = XX(M)
C
                       NPACK = M
                       IF (LABSIZ .EQ. 2) THEN
*I32                     LABEL1 = IX( 2*NPACK - 1 )
*I32                     LABEL2 = IX( 2*NPACK     )
*I32                     IPACK = ISHFT( LABEL1, -16 )
*I32                     JPACK = IAND( LABEL1, 65535 )
*I32                     KPACK = ISHFT( LABEL2, -16 )
*I32                     LPACK = IAND( LABEL2, 65535 )
*I64                     LABEL = IX(NPACK)
*I64                     IPACK = ISHFT( LABEL, -48 )
*I64                     JPACK = IAND( ISHFT( LABEL, -32 ), 65535 )
*I64                     KPACK = IAND( ISHFT( LABEL, -16 ), 65535 )
*I64                     LPACK = IAND( LABEL, 65535 )
                       ELSE IF (LABSIZ .EQ. 1) THEN
*I32                     LABEL = IX(NPACK)
*I32                     IPACK = ISHFT( LABEL, -24 )
*I32                     JPACK = IAND( ISHFT( LABEL, -16 ), 255 )
*I32                     KPACK = IAND( ISHFT( LABEL,  -8 ), 255 )
*I32                     LPACK = IAND( LABEL, 255 )
*I64                     IF ( MOD(NPACK,2) .EQ. 0 ) THEN
*I64                       LABEL = IX( NPACK/2 )
*I64                       IPACK = IAND( ISHFT( LABEL, -24 ), 255 )
*I64                       JPACK = IAND( ISHFT( LABEL, -16 ), 255 )
*I64                       KPACK = IAND( ISHFT( LABEL,  -8 ), 255 )
*I64                       LPACK = IAND( LABEL, 255 )
*I64                     ELSE
*I64                       LABEL = IX( (NPACK/2)+1 )
*I64                       IPACK = ISHFT( LABEL, -56 )
*I64                       JPACK = IAND( ISHFT( LABEL, -48 ), 255 )
*I64                       KPACK = IAND( ISHFT( LABEL, -40 ), 255 )
*I64                       LPACK = IAND( ISHFT( LABEL, -32 ), 255 )
*I64                     END IF
                       END IF
C                      K = IPACK
C                      L = JPACK
C                      I = KPACK
C                      J = LPACK
C
C  JZETA  - AO INDEX ZETA, FOR MO J, ON THE EFP
C  MU     - AO INDEX FOR MO I, ON AB INITIO MOLECULE
C  KSIGMA - AO INDEX FOR MO K, ON AB INITIO MOLECULE
C  LAMBDA - AO INDEX FOR MO L, ON AB INITIO MOLECULE
C  AOINT  - FOUR INDEX MATRIX HOLDING 2E- INTEGRALS IN AO BASIS(ES)
C  AOTRI  - TRIANGULAR MATRIX HOLDING THE 2E- INTS FOR THE INNER LOOPS
C  DIAG   - VECTOR CONTAINING THE DIAGONAL TRANSFORMED ELEMENTS
C  TWOINT - RECTANGULAR MATRIX CONTAINING STRIPS OF ALL DIAG VECTORS
C           FROM THE MU LOOP
C  TWOESQ - SQUARE MATRIX, CONTAINING 2E- INTEGRALS FROM TWOINT,
C           TRANSFORMED TO THE MO BASIS
C  TESQMO - CONTAINS ALL TWOESQ MATRICES FORMED, ONE FOR EACH EFP AO
C  ZVEC   - A VECTOR, TRANSFORMED SLICE OF TESQMO, TRANSFORMED FROM
C           THE EFP AO TO EFP MO BASIS
C  CMOINT - MATRIX CONTAINING 2E- INTEGRALS, COMPLETELY IN THE MO BASIS,
C           COULOMB-TYPE
C  EMOINT - MATRIX CONTAINING 2E- INTEGRALS, COMPLETELY IN THE MO BASIS,
C           EXCHANGE-TYPE
C  TERM3  - SUM UP ALL S(I,J)*<IJ|KK> AND RETURN TO CALLING ROUTINE
C
C
                       JZETA  = IPACK
                       MU     = JPACK
                       KSIGMA = KPACK
                       LAMBDA = LPACK
C
         IF(KSIGMA.NE.LAMBDA) THEN
         TERMAO=TERMAO+DPRIME(LAMBDA,KSIGMA)*VAL*SPRIME(MU,JZETA)
         END IF
         TERMAO=TERMAO+DPRIME(KSIGMA,LAMBDA)*VAL*SPRIME(MU,JZETA)
C
         IF(KSIGMA.NE.LAMBDA) THEN
         TERM4AO=TERM4AO+DPRIME(MU,KSIGMA)*VAL*SPRIME(LAMBDA,JZETA)
         END IF
C
         TERM4AO=TERM4AO+DPRIME(LAMBDA,MU)*VAL*SPRIME(KSIGMA,JZETA)
  700    CONTINUE
         IF(NX.GT.0) GO TO 150
  300   CONTINUE
        CALL SEQREW(39)
        TERM3=ZERO-TWO*TWO*TERMAO
        TERM4=TWO*TERM4AO
C
      RETURN
      END
C
C*MODULE EFPAUL   *DECK UNPVXR
      SUBROUTINE UNPVXR(XX,IX,NINTMX,NUMEFT,NRBEFT,
     *            PROVEC,VEC,SAB,SMAT,TMAT,L1,NA,
     *            WRK,
     *            VXR,
     *            COREA,MXBF,MXMO,
     *            NFRG,NATA,CA,
     *            DPRIME,VAO,SPRIME,DSTAR,SSTAR,VAO2)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      INTEGER COREA
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER(TWO=2.0D+00,
     *          HALF=0.5D+00,FOUR=4.0D+00)
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,MXATM=2000,
     *           MXSH=5000, MXGTOT=20000,MXSHEF=1000, MXGEFP=4000)
      DIMENSION XX(NINTMX),IX(*)
C
      DIMENSION WRK(MXBF),
     *          SAB(NA,NRBEFT),VEC(L1,L1),
     *          PROVEC(MXBF,MXMO),VXR(L1,L1)
C
      DIMENSION DPRIME(L1,L1),VAO(NUMEFT,L1),SPRIME(NA,NUMEFT),
     *          DSTAR(NA,NA),SSTAR(L1,NUMEFT),VAO2(L1,L1)
C
      DIMENSION SMAT(L1,NUMEFT), TMAT(L1,NUMEFT),CA(3,MXATM)
C
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NAT(MXDFG),NUM(MXDFG),NTPATM
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /NSHEL / EXA(MXGTOT),CSA(MXGTOT),CPA(MXGTOT),CDA(MXGTOT),
     *                CFA(MXGTOT),CGA(MXGTOT),CHA(MXGTOT),CIA(MXGTOT),
     *                KSTARTA(MXSH),KATOMA(MXSH),KTYPEA(MXSH),
     *                KNGA(MXSH),KLOCA(MXSH),KMINA(MXSH),
     *                KMAXA(MXSH),NSHELLA
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /PCKLAB/ LABSIZ
C
C  UNPACK 2E- INTEGRALS REQUIRED FOR EFAIV
C  THREE OF THE 4 CENTERS RESIDE ON THE AB INITIO MOLECULE WHILE
C  THE 4TH RESIDES ON AN EFP2.
C
      CALL VCLR(VAO,1,NUMEFT*L1)
      CALL VCLR(DPRIME,1,L1*L1)
      CALL VCLR(VAO2,1,L1*L1)
      CALL VCLR(DSTAR,1,NA*NA)
      CALL VCLR(SPRIME,1,NA*NUMEFT)
      CALL VCLR(SSTAR,1,L1*NUMEFT)
      DO LAMBDA=1,L1
       DO KSIGMA=1,L1
        DO K=COREA,NA
          DPRIME(LAMBDA,KSIGMA)=DPRIME(LAMBDA,KSIGMA)+
     *                    (VEC(LAMBDA,K)*VEC(KSIGMA,K))
        END DO
       END DO
      END DO
C
      DO M=COREA,NA
       DO I=COREA,NA
        DO MALPHA=1,L1
         DO MU=1,L1
          DSTAR(M,I)=DSTAR(M,I)+VEC(MALPHA,M)*VEC(MU,I)
         END DO
        END DO
       END DO
      END DO
C
      JAO=0
      JMO=0
      JNAT=0
      DO MJ=1,NFRG
      JM = ISET(MJ)
      CALL STINT(SMAT(1,JAO+1),TMAT(1,JAO+1),MXBF,L1,NATA,NAT(JM),
     *           NGAUSS(JM),NSHELL(JM),EX(1,JM),CS(1,JM),CP(1,JM),
     *           CD(1,JM),CF(1,JM),CG(1,JM),KSTART(1,JM),KATOM(1,JM),
     *           KTYPE(1,JM),KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,PRCORD(1,JNAT+1),CA)
C        ADDRESS FOR SMAT CHANGED FEB 2010
      CALL TFSQP(SAB(1,JMO+1),SMAT(1,JAO+1),VEC,PROVEC(1,JMO+1),WRK,
     *           L1,NUM(JM),NA,NORB(MJ),NA,NORB(MJ),.FALSE.)
      JMO = JMO + NORB(MJ)
      JAO = JAO + NUM(JM)
      JNAT = JNAT + NAT(JM)
      END DO      ! NFRG LOOP
C
      JAO=0
      JMO=0
      JNAT=0
      DO MJ=1,NFRG
      JM = ISET(MJ)
      DO JZETA=1,NUM(JM)
       DO M=COREA,NA
        DO J=1,NORB(MJ)
         SPRIME(M,JZETA+JAO)=SPRIME(M,JZETA+JAO)+
     *            (SAB(M,JMO+J)*PROVEC(JZETA,J+JMO))
        END DO
       END DO
      END DO
      JMO = JMO + NORB(MJ)
      JAO = JAO + NUM(JM)
      JNAT = JNAT + NAT(JM)
      END DO      ! NFRG LOOP
C
      JAO=0
      JMO=0
      JNAT=0
      DO MJ=1,NFRG
      JM = ISET(MJ)
      DO JZETA=1,NUM(JM)
       DO LAMBDA=1,L1
        DO J=1,NORB(MJ)
         DO K=COREA,NA
         SSTAR(LAMBDA,JZETA)=SSTAR(LAMBDA,JZETA)+
     *        VEC(LAMBDA,K)*(SAB(K,JMO+J)*PROVEC(JZETA,J+JMO))
         END DO
        END DO
       END DO
      END DO
      JMO = JMO + NORB(MJ)
      JAO = JAO + NUM(JM)
      JNAT = JNAT + NAT(JM)
      END DO      ! NFRG LOOP
C
      IT=39
      CALL SEQREW(IT)
  150 CONTINUE
      CALL PREAD(IT,XX,IX,NX,NINTMX)
C
      IF (NX.EQ.0) GO TO 300
      MX = ABS(NX)
      IF (MX.GT.NINTMX) THEN
         IF(MASWRK) WRITE(6,*) 'CONFUSION WITH INTEGRALS IN -SRTING-'
         CALL ABRT
      END IF
C
C     ----- UNPACK LABEL AND PROCESS INTEGRAL -----
C
         DO 700 M=1,MX
         VAL   = XX(M)
C
                       NPACK = M
                       IF (LABSIZ .EQ. 2) THEN
*I32                     LABEL1 = IX( 2*NPACK - 1 )
*I32                     LABEL2 = IX( 2*NPACK     )
*I32                     IPACK = ISHFT( LABEL1, -16 )
*I32                     JPACK = IAND( LABEL1, 65535 )
*I32                     KPACK = ISHFT( LABEL2, -16 )
*I32                     LPACK = IAND( LABEL2, 65535 )
*I64                     LABEL = IX(NPACK)
*I64                     IPACK = ISHFT( LABEL, -48 )
*I64                     JPACK = IAND( ISHFT( LABEL, -32 ), 65535 )
*I64                     KPACK = IAND( ISHFT( LABEL, -16 ), 65535 )
*I64                     LPACK = IAND( LABEL, 65535 )
                       ELSE IF (LABSIZ .EQ. 1) THEN
*I32                     LABEL = IX(NPACK)
*I32                     IPACK = ISHFT( LABEL, -24 )
*I32                     JPACK = IAND( ISHFT( LABEL, -16 ), 255 )
*I32                     KPACK = IAND( ISHFT( LABEL,  -8 ), 255 )
*I32                     LPACK = IAND( LABEL, 255 )
*I64                     IF ( MOD(NPACK,2) .EQ. 0 ) THEN
*I64                       LABEL = IX( NPACK/2 )
*I64                       IPACK = IAND( ISHFT( LABEL, -24 ), 255 )
*I64                       JPACK = IAND( ISHFT( LABEL, -16 ), 255 )
*I64                       KPACK = IAND( ISHFT( LABEL,  -8 ), 255 )
*I64                       LPACK = IAND( LABEL, 255 )
*I64                     ELSE
*I64                       LABEL = IX( (NPACK/2)+1 )
*I64                       IPACK = ISHFT( LABEL, -56 )
*I64                       JPACK = IAND( ISHFT( LABEL, -48 ), 255 )
*I64                       KPACK = IAND( ISHFT( LABEL, -40 ), 255 )
*I64                       LPACK = IAND( ISHFT( LABEL, -32 ), 255 )
*I64                     END IF
                       END IF
C                      K = IPACK
C                      L = JPACK
C                      I = KPACK
C                      J = LPACK
C
C  JZETA  - AO INDEX ZETA, FOR MO J, ON THE EFP
C  MU     - AO INDEX FOR MO I, ON AB INITIO MOLECULE
C  KSIGMA - AO INDEX FOR MO K, ON AB INITIO MOLECULE
C  LAMBDA - AO INDEX FOR MO L, ON AB INITIO MOLECULE
C  AOINT  - FOUR INDEX MATRIX HOLDING 2E- INTEGRALS IN AO BASIS(ES)
C  AOTRI  - TRIANGULAR MATRIX HOLDING THE 2E- INTS FOR THE INNER LOOPS
C  DIAG   - VECTOR CONTAINING THE DIAGONAL TRANSFORMED ELEMENTS
C  TWOINT - RECTANGULAR MATRIX CONTAINING STRIPS OF ALL DIAG VECTORS
C           FROM THE MU LOOP
C  TWOESQ - SQUARE MATRIX, CONTAINING 2E- INTEGRALS FROM TWOINT,
C           TRANSFORMED TO THE MO BASIS
C  TESQMO - CONTAINS ALL TWOESQ MATRICES FORMED, ONE FOR EACH EFP AO
C  ZVEC   - A VECTOR, TRANSFORMED SLICE OF TESQMO, TRANSFORMED FROM
C           THE EFP AO TO EFP MO BASIS
C  CMOINT - MATRIX CONTAINING 2E- INTEGRALS, COMPLETELY IN THE MO BASIS,
C           COULOMB-TYPE
C  EMOINT - MATRIX CONTAINING 2E- INTEGRALS, COMPLETELY IN THE MO BASIS,
C           EXCHANGE-TYPE
C  TERM3  - SUM UP ALL S(I,J)*<IJ|KK> AND RETURN TO CALLING ROUTINE
C
C
                       JZETA  = IPACK
                       MU     = JPACK
                       KSIGMA = KPACK
                       LAMBDA = LPACK
C
         IF(KSIGMA.NE.LAMBDA) THEN
         VAO(JZETA,MU)=VAO(JZETA,MU)-HALF*TWO*TWO*
     *                 DPRIME(LAMBDA,KSIGMA)*VAL
         END IF
         VAO(JZETA,MU)=VAO(JZETA,MU)-HALF*TWO*TWO*
     *                 DPRIME(KSIGMA,LAMBDA)*VAL
C
         IF(KSIGMA.NE.LAMBDA) THEN
         VAO(JZETA,LAMBDA)=VAO(JZETA,LAMBDA)+
     *                 DPRIME(MU,KSIGMA)*VAL
         END IF
C
         VAO(JZETA,KSIGMA)=VAO(JZETA,KSIGMA)+
     *                 DPRIME(MU,LAMBDA)*VAL
C FOR VAO2
                       JZETA  = IPACK
                       LAMBDA = JPACK
                       MALPHA = KPACK
                       MU     = LPACK
C
         IF(MU.NE.MALPHA) THEN
         VAO2(MU,MALPHA)=VAO2(MU,MALPHA)-
     *                 SSTAR(LAMBDA,JZETA)*VAL*FOUR
         END IF
         VAO2(MALPHA,MU)=VAO2(MALPHA,MU)-
     *                 SSTAR(LAMBDA,JZETA)*VAL*FOUR
C
         IF(MU.NE.MALPHA) THEN
         VAO2(MU,LAMBDA)=VAO2(MU,LAMBDA)+
     *                 SSTAR(MALPHA,JZETA)*VAL
         END IF
         VAO2(MALPHA,LAMBDA)=VAO2(MALPHA,LAMBDA)+
     *                 SSTAR(MU,JZETA)*VAL
C
         IF(MU.NE.MALPHA) THEN
         VAO2(LAMBDA,MALPHA)=VAO2(LAMBDA,MALPHA)+
     *                 SSTAR(MU,JZETA)*VAL
         END IF
         VAO2(LAMBDA,MU)=VAO2(LAMBDA,MU)+
     *                 SSTAR(MALPHA,JZETA)*VAL
C
  700    CONTINUE
         IF(NX.GT.0) GO TO 150
  300   CONTINUE
        CALL SEQREW(39)
      JAO=0
      JMO=0
      JNAT=0
      DO MJ=1,NFRG
      JM = ISET(MJ)
       DO M=COREA,NA
        DO I=COREA,NA
        DO MU=1,L1
         DO JZETA=1,NUM(JM)
          VXR(M,I)=VXR(M,I)+(VAO(JZETA+JAO,MU)*
     *            SPRIME(M,JZETA+JAO)*VEC(MU,I))
         END DO
        END DO
        END DO
       END DO
      JMO = JMO + NORB(MJ)
      JAO = JAO + NUM(JM)
      JNAT = JNAT + NAT(JM)
      END DO      ! NFRG LOOP
C
      JAO=0
      JMO=0
      JNAT=0
      DO MJ=1,NFRG
      JM = ISET(MJ)
       DO M=COREA,NA
        DO I=COREA,NA
        DO MALPHA=1,L1
         DO JZETA=1,NUM(JM)
          VXR(M,I)=VXR(M,I)+(VAO(JZETA+JAO,MALPHA)*
     *            SPRIME(I,JZETA+JAO)*VEC(MALPHA,M))
         END DO
        END DO
        END DO
       END DO
      JMO = JMO + NORB(MJ)
      JAO = JAO + NUM(JM)
      JNAT = JNAT + NAT(JM)
      END DO      ! NFRG LOOP
C
      DO M=COREA,NA
       DO I=COREA,NA
        DO MALPHA=1,L1
         DO MU=1,L1
         VXR(M,I)=VXR(M,I)+VAO2(MALPHA,MU)*
     *         VEC(MALPHA,M)*VEC(MU,I)
         END DO
        END DO
       END DO
      END DO
C
      RETURN
      END
C
C
C*MODULE EFCHTR  *DECK EFCEF2
      SUBROUTINE EFCEF2(VEFP,L1,L1CO,NATM,NATMCO,
     *                  NGAU,NSHL,EX,CS,CP,CD,CF,CG,
     *                  KSTART,KATOM,KTYPE,KNG,KLOC,KMIN,KMAX,
     *                  NGAUCO,NSHLCO,EXCO,CSCO,CPCO,CDCO,CFCO,CGCO,
     *                  KSTRCO,KATMCO,KTYPCO,KNGCO,KLOCCO,KMINCO,
     *                  KMAXCO,C,CCO,ZAN)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL IANDJ
C
      DIMENSION EX(NGAU),CS(NGAU),CP(NGAU),CD(NGAU),
     *          CF(NGAU),CG(NGAU),KSTART(NSHL),KATOM(NSHL),
     *          KTYPE(NSHL),KNG(NSHL),KLOC(NSHL),KMIN(NSHL),KMAX(NSHL),
     *          EXCO(NGAUCO),CSCO(NGAUCO),CPCO(NGAUCO),CDCO(NGAUCO),
     *          CFCO(NGAUCO),CGCO(NGAUCO),KSTRCO(NSHLCO),KATMCO(NSHLCO),
     *          KTYPCO(NSHLCO),KNGCO(NSHLCO),KLOCCO(NSHLCO),
     *          KMINCO(NSHLCO),KMAXCO(NSHLCO),
     *          C(3,NATM),CCO(3,NATMCO),
     *          VEFP(L1CO,L1),ZAN(NATMCO)
      DIMENSION DIJ(225),XIN(225),YIN(225),ZIN(225),
     *          IX(35),IY(35),IZ(35),JX(35),JY(35),JZ(35),
     *          IJX(225),IJY(225),IJZ(225),CONI(35),CONJ(35),
     *          CHCINT(225),FIJ(225)
C
      COMMON /ROOT  / XX,U(13),W(13),NROOTS
      COMMON /SHLNRM/ PNRM(84)
      COMMON /STV   / XINT,YINT,ZINT,T,X0,Y0,Z0,XI,YI,ZI,XJ,YJ,ZJ,NI,NJ
      COMMON /SYMIND/ TOL,II,JJ,LIT,LJT,MINI,MINJ,MAXI,MAXJ,IANDJ
C
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00,
     *           PI212=1.1283791670955D+00)
C
      DATA JX / 0, 1, 0, 0, 2, 0, 0, 1, 1, 0,
     *          3, 0, 0, 2, 2, 1, 0, 1, 0, 1,
     *          4, 0, 0, 3, 3, 1, 0, 1, 0, 2,
     *          2, 0, 2, 1, 1/
      DATA IX / 1, 6, 1, 1,11, 1, 1, 6, 6, 1,
     *         16, 1, 1,11,11, 6, 1, 6, 1, 6,
     *         21, 1, 1,16,16, 6, 1, 6, 1,11,
     *         11, 1,11, 6, 6/
      DATA JY / 0, 0, 1, 0, 0, 2, 0, 1, 0, 1,
     *          0, 3, 0, 1, 0, 2, 2, 0, 1, 1,
     *          0, 4, 0, 1, 0, 3, 3, 0, 1, 2,
     *          0, 2, 1, 2, 1/
      DATA IY / 1, 1, 6, 1, 1,11, 1, 6, 1, 6,
     *          1,16, 1, 6, 1,11,11, 1, 6, 6,
     *          1,21, 1, 6, 1,16,16, 1, 6,11,
     *          1,11, 6,11, 6/
      DATA JZ / 0, 0, 0, 1, 0, 0, 2, 0, 1, 1,
     *          0, 0, 3, 0, 1, 0, 1, 2, 2, 1,
     *          0, 0, 4, 0, 1, 0, 1, 3, 3, 0,
     *          2, 2, 1, 1, 2/
      DATA IZ / 1, 1, 1, 6, 1, 1,11, 1, 6, 6,
     *          1, 1,16, 1, 6, 1, 6,11,11, 6,
     *          1, 1,21, 1, 6, 1, 6,16,16, 1,
     *         11,11, 6, 6,11/
C
C   BASED ON EFCEF,
C   USED TO OBTAIN 1E- NUCLEAR-ELECTRON ATTRACTION INTEGRALS
C
C     ----- ISHELL
C
      DO 720 II = 1,NSHLCO
         I = KATMCO(II)
         XI = CCO(1,I)
         YI = CCO(2,I)
         ZI = CCO(3,I)
C
         I1 = KSTRCO(II)
         I2 = I1+KNGCO(II)-1
         LIT = KTYPCO(II)
         MINI = KMINCO(II)
         MAXI = KMAXCO(II)
         LOCI = KLOCCO(II)-MINI
C
C     ----- JSHELL
C
         DO 700 JJ = 1,NSHL
C
            J = KATOM(JJ)
            XJ = C(1,J)
            YJ = C(2,J)
            ZJ = C(3,J)
            J1 = KSTART(JJ)
            J2 = J1+KNG(JJ)-1
            LJT = KTYPE(JJ)
            MINJ = KMIN(JJ)
            MAXJ = KMAX(JJ)
            LOCJ = KLOC(JJ)-MINJ
            NROOTS = (LIT+LJT-2)/2+1
            RR = (XI-XJ)**2+(YI-YJ)**2+(ZI-ZJ)**2
C
C     ----- PREPARE INDICES FOR PAIRS OF (I,J) FUNCTIONS
C
            IJ = 0
            DO 160 I = MINI,MAXI
               NX = IX(I)
               NY = IY(I)
               NZ = IZ(I)
               DO 140 J = MINJ,MAXJ
                  IJ = IJ+1
                  IJX(IJ) = NX+JX(J)
                  IJY(IJ) = NY+JY(J)
                  IJZ(IJ) = NZ+JZ(J)
  140          CONTINUE
  160       CONTINUE
            DO 180 I = 1,IJ
               CHCINT(I) = ZERO
  180       CONTINUE
C
C     ----- I PRIMITIVE
C
            DO 520 IG = I1,I2
               AI = EXCO(IG)
               ARRI = AI*RR
               AXI = AI*XI
               AYI = AI*YI
               AZI = AI*ZI
               CALL SETCON(CONI,IG,CSCO,CPCO,CDCO,CFCO,CGCO)
C
C     ----- J PRIMITIVE
C
               DO 500 JG = J1,J2
                  AJ = EX(JG)
                  AA = AI+AJ
                  AA1 = ONE/AA
                  DUM = AJ*ARRI*AA1
                  IF (DUM .GT. TOL) GO TO 500
                  FAC = EXP(-DUM)
                  CALL SETCON(CONJ,JG,CS,CP,CD,CF,CG)
                  AX = (AXI+AJ*XJ)*AA1
                  AY = (AYI+AJ*YJ)*AA1
                  AZ = (AZI+AJ*ZJ)*AA1
C
C     ----- DENSITY FACTOR
C
                  NN = 0
                  DO 220 I = MINI,MAXI
                     FACI=FAC*CONI(I)*PNRM(I)
                     DO 200 J = MINJ,MAXJ
                        NN = NN+1
                        DIJ(NN)=FACI*CONJ(J)*PNRM(J)
  200                CONTINUE
  220             CONTINUE
C
C     EFFECTIVE POINT CHARGES INTEGRALS.
C
                  DUM = PI212*AA1
                  DO 400 I=1,IJ
                     FIJ(I) = DIJ(I)*DUM
  400             CONTINUE
                  AAX = AA*AX
                  AAY = AA*AY
                  AAZ = AA*AZ
C
                  DO 492 IC = 1,NATMCO
                     ZNUC = -ZAN(IC)
                     CX = CCO(1,IC)
                     CY = CCO(2,IC)
                     CZ = CCO(3,IC)
                     XX = AA*((AX-CX)**2+(AY-CY)**2+(AZ-CZ)**2)
                     IF (NROOTS.LE.3) CALL RT123
                     IF (NROOTS.EQ.4) CALL ROOT4
                     IF (NROOTS.EQ.5) CALL ROOT5
                     IF (NROOTS.GE.6) CALL ROOT6
                     MM = 0
                     DO 477 K = 1,NROOTS
                        UU = AA*U(K)
                        WW = W(K)*ZNUC
                        TT = ONE/(AA+UU)
                        T = SQRT(TT)
                        X0 = (AAX+UU*CX)*TT
                        Y0 = (AAY+UU*CY)*TT
                        Z0 = (AAZ+UU*CZ)*TT
                        IN = -5+MM
                        DO 476 I = 1,LIT
                           IN = IN+5
                           NI = I
                           DO 475 J = 1,LJT
                              JN = IN+J
                              NJ = J
                              CALL STVINT
                              XIN(JN) = XINT
                              YIN(JN) = YINT
                              ZIN(JN) = ZINT*WW
  475                      CONTINUE
  476                   CONTINUE
                        MM = MM+25
  477                CONTINUE
                     DO 481 I = 1,IJ
                        NX = IJX(I)
                        NY = IJY(I)
                        NZ = IJZ(I)
                        DUM = ZERO
                        MM = 0
                        DO 479 K = 1,NROOTS
                           DUM = DUM+XIN(NX+MM)*YIN(NY+MM)*ZIN(NZ+MM)
                           MM = MM+25
  479                   CONTINUE
                        CHCINT(I) = CHCINT(I)+DUM*FIJ(I)
  481                CONTINUE
  492             CONTINUE
C
C     ----- END PRIMITIVES -----
C
  500          CONTINUE
  520       CONTINUE
C
C     ----- STORE THE INTEGRALS FOR THESE SHELLS -----
C
            NN = 0
            DO 620 I = MINI,MAXI
               LI = LOCI+I
               DO 600 J = MINJ,MAXJ
                  LJ = LOCJ+J
                  NN = NN+1
                  VEFP(LI,LJ) = CHCINT(NN)
  600          CONTINUE
  620       CONTINUE
C
C     ----- END SHELLS -----
C
  700    CONTINUE
  720 CONTINUE
      RETURN
      END
C*MODULE EFPAUL   *DECK UNPTEI
      SUBROUTINE UNPTEI(XX,IX,NINTMX,
     *                  VEC,SAB,SMAT,TMAT,L1,NA,
     *                  COREA,MXBF,PROVEC,WRK,
     *                  MXMO,NFRG,CA,NATA,VXR,NUMEFT,
     *                  NRBEFT,SPRIME,SKN,VAO,WRK2,SIGLAM,
     *                  VMO)
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      INTEGER COREA
C
      LOGICAL GOPARR,DSKWRK,MASWRK
C
      PARAMETER(FOUR=4.0D+00, HALF=0.5D+00,TWO=2.0D+00)
      PARAMETER(ZERO=0.0D+00)
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,MXATM=2000,
     *           MXSH=5000, MXGTOT=20000,MXSHEF=1000, MXGEFP=4000)
      DIMENSION XX(NINTMX),IX(*)
      DIMENSION VXR(L1,L1),
     *          SAB(NA,NRBEFT),VEC(L1,L1),WRK(MXBF),
     *          PROVEC(MXBF,MXMO),CA(3,MXATM),WRK2(L1)
      DIMENSION SMAT(L1,NUMEFT),TMAT(L1,NUMEFT)
      DIMENSION SPRIME(L1,L1), SKN(NA,NA), VAO(L1,L1),VMO(L1,L1)
      DIMENSION SIGLAM(L1,L1)
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NAT(MXDFG),NUM(MXDFG),NTPATM
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      COMMON /NSHEL / EXA(MXGTOT),CSA(MXGTOT),CPA(MXGTOT),CDA(MXGTOT),
     *                CFA(MXGTOT),CGA(MXGTOT),CHA(MXGTOT),CIA(MXGTOT),
     *                KSTARTA(MXSH),KATOMA(MXSH),KTYPEA(MXSH),
     *                KNGA(MXSH),KLOCA(MXSH),KMINA(MXSH),
     *                KMAXA(MXSH),NSHELLA
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /PCKLAB/ LABSIZ
C
C     UNPACK AB INITIO TWO ELECTRON INTEGRALS
C     ALL 4 CENTERS RESIDE ON THE AB INITIO MOLECULE(S)
C
      CALL VCLR(SMAT,1,L1*NUMEFT)
      CALL VCLR(SAB,1,NA*NRBEFT)
      CALL VCLR(SPRIME,1,L1*NUMEFT)
      CALL VCLR(SKN,1,NA*NA)
      CALL VCLR(VAO,1,L1*L1)
      JAO=0
      JMO=0
      JNAT=0
      DO MJ=1,NFRG
      JM = ISET(MJ)
      CALL STINT(SMAT(1,JAO+1),TMAT(1,JAO+1),MXBF,L1,NATA,NAT(JM),
     *           NGAUSS(JM),NSHELL(JM),EX(1,JM),CS(1,JM),CP(1,JM),
     *           CD(1,JM),CF(1,JM),CG(1,JM),KSTART(1,JM),KATOM(1,JM),
     *           KTYPE(1,JM),KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,PRCORD(1,JNAT+1),CA)
C          SMAT ADDRESSING CHANGED FEB 2010
      CALL TFSQP(SAB(1,JMO+1),SMAT(1,JAO+1),VEC,PROVEC(1,JMO+1),WRK,
     *           L1,NUM(JM),NA,NORB(MJ),NA,NORB(MJ),.FALSE.)
C
      DO K=COREA,NA
       DO N=COREA,NA
        DO J=1,NORB(MJ)
        SKN(K,N)=SKN(K,N)+(SAB(K,J+JMO)*SAB(N,J+JMO))
        END DO
       END DO
      END DO
      JMO = JMO + NORB(MJ)
      JAO = JAO + NUM(JM)
      JNAT = JNAT + NAT(JM)
      END DO      ! NFRG LOOP
C
      TEMP1=ZERO
      TEMP2=ZERO
      DO NALPHA=1,L1
       DO LAMBDA=1,L1
        DO N=COREA,NA
         DO K=COREA,NA
         TEMP1=TEMP1+SKN(K,N)*VEC(LAMBDA,K)
         END DO
        TEMP2=TEMP2+TEMP1*VEC(NALPHA,N)
        TEMP1=ZERO
        END DO
       SPRIME(LAMBDA,NALPHA)=SPRIME(LAMBDA,NALPHA)+TEMP2
       TEMP2=ZERO
       END DO
      END DO
C
      CALL SEQREW(8)
  150 CONTINUE
      CALL PREAD(8,XX,IX,NX,NINTMX)
C
      IF (NX.EQ.0) GO TO 300
      MX = ABS(NX)
      IF (MX.GT.NINTMX) THEN
         IF(MASWRK) WRITE(6,*) 'CONFUSION WITH INTEGRALS IN -SRTING-'
         CALL ABRT
      END IF
C
C     ----- UNPACK LABEL AND PROCESS INTEGRAL -----
C
         DO 700 L=1,MX
         VAL   = XX(L)
C
                       NPACK = L
                       IF (LABSIZ .EQ. 2) THEN
*I32                     LABEL1 = IX( 2*NPACK - 1 )
*I32                     LABEL2 = IX( 2*NPACK     )
*I32                     IPACK = ISHFT( LABEL1, -16 )
*I32                     JPACK = IAND( LABEL1, 65535 )
*I32                     KPACK = ISHFT( LABEL2, -16 )
*I32                     LPACK = IAND( LABEL2, 65535 )
*I64                     LABEL = IX(NPACK)
*I64                     IPACK = ISHFT( LABEL, -48 )
*I64                     JPACK = IAND( ISHFT( LABEL, -32 ), 65535 )
*I64                     KPACK = IAND( ISHFT( LABEL, -16 ), 65535 )
*I64                     LPACK = IAND( LABEL, 65535 )
                       ELSE IF (LABSIZ .EQ. 1) THEN
*I32                     LABEL = IX(NPACK)
*I32                     IPACK = ISHFT( LABEL, -24 )
*I32                     JPACK = IAND( ISHFT( LABEL, -16 ), 255 )
*I32                     KPACK = IAND( ISHFT( LABEL,  -8 ), 255 )
*I32                     LPACK = IAND( LABEL, 255 )
*I64                     IF ( MOD(NPACK,2) .EQ. 0 ) THEN
*I64                       LABEL = IX( NPACK/2 )
*I64                       IPACK = IAND( ISHFT( LABEL, -24 ), 255 )
*I64                       JPACK = IAND( ISHFT( LABEL, -16 ), 255 )
*I64                       KPACK = IAND( ISHFT( LABEL,  -8 ), 255 )
*I64                       LPACK = IAND( LABEL, 255 )
*I64                     ELSE
*I64                       LABEL = IX( (NPACK/2)+1 )
*I64                       IPACK = ISHFT( LABEL, -56 )
*I64                       JPACK = IAND( ISHFT( LABEL, -48 ), 255 )
*I64                       KPACK = IAND( ISHFT( LABEL, -40 ), 255 )
*I64                       LPACK = IAND( ISHFT( LABEL, -32 ), 255 )
*I64                     END IF
                       END IF
C
C  JZETA  - AO INDEX ZETA, FOR MO J, ON THE EFP
C  MU     - AO INDEX FOR MO I, ON AB INITIO MOLECULE
C  KSIGMA - AO INDEX FOR MO K, ON AB INITIO MOLECULE
C  LAMBDA - AO INDEX FOR MO L, ON AB INITIO MOLECULE
C  AOINT  - FOUR INDEX MATRIX HOLDING 2E- INTEGRALS IN AO BASIS(ES)
C  AOTRI  - TRIANGULAR MATRIX HOLDING THE 2E- INTS FOR THE INNER LOOPS
C  DIAG   - VECTOR CONTAINING THE DIAGONAL TRANSFORMED ELEMENTS
C  TWOINT - RECTANGULAR MATRIX CONTAINING STRIPS OF ALL DIAG VECTORS
C           FROM THE MU LOOP
C  TWOESQ - SQUARE MATRIX, CONTAINING 2E- INTEGRALS FROM TWOINT,
C           TRANSFORMED TO THE MO BASIS
C  TESQMO - CONTAINS ALL TWOESQ MATRICES FORMED, ONE FOR EACH EFP AO
C  ZVEC   - A VECTOR, TRANSFORMED SLICE OF TESQMO, TRANSFORMED FROM THE
C           EFP AO TO EFP MO BASIS
C  CMOINT - MATRIX CONTAINING 2E- INTEGRALS, COMPLETELY IN THE MO BASIS,
C           COULOMB-TYPE
C  EMOINT - MATRIX CONTAINING 2E- INTEGRALS, COMPLETELY IN THE MO BASIS,
C           EXCHANGE-TYPE
C  TERM3  - SUM UP ALL S(I,J)*<IJ|KK> AND RETURN TO CALLING ROUTINE
C
C
C
C
      NALPHA  = IPACK
      LAMBDA  = JPACK
      MU      = KPACK
      MSIGMA  = LPACK
C--   IF(NALPHA.GT.L1) WRITE(6,*) 'NALPHA=', NALPHA
C--   IF(LAMBDA.GT.L1) WRITE(6,*) 'LAMBDA=', LAMBDA
C--   IF(    MU.GT.L1) WRITE(6,*) '    MU=', MU
C--   IF(MSIGMA.GT.L1) WRITE(6,*) 'MSIGMA=', MSIGMA
C
         IF(NALPHA.EQ.LAMBDA) VAL=VAL*TWO
         IF(MU.EQ.MSIGMA) VAL=VAL*TWO
         IF(NALPHA.EQ.MU .AND. LAMBDA.EQ.MSIGMA) THEN
         VAL=VAL*TWO
         SIGLAM(NALPHA,LAMBDA)=VAL
         SIGLAM(LAMBDA,NALPHA)=VAL
         END IF
C
C
         IF (MU.EQ.NALPHA .AND. MSIGMA.EQ.LAMBDA) THEN
         GOTO 200
         ELSE
         VAO(LAMBDA,NALPHA)=VAO(LAMBDA,NALPHA)+HALF*
     *                 FOUR*VAL*SPRIME(MSIGMA,MU)
C
         IF(MSIGMA.NE.MU) THEN
         VAO(LAMBDA,NALPHA)=VAO(LAMBDA,NALPHA)+HALF*
     *                 FOUR*VAL*SPRIME(MU,MSIGMA)
         END IF
C
         IF(NALPHA.NE.LAMBDA) THEN
         VAO(NALPHA,LAMBDA)=VAO(NALPHA,LAMBDA)+HALF*
     *                 FOUR*VAL*SPRIME(MSIGMA,MU)
         END IF
C
         IF(MSIGMA.NE.MU .AND. NALPHA.NE.LAMBDA) THEN
         VAO(NALPHA,LAMBDA)=VAO(NALPHA,LAMBDA)+HALF*
     *                 FOUR*VAL*SPRIME(MU,MSIGMA)
         END IF
C
         END IF
 200     CONTINUE
C
         IF(NALPHA.NE.LAMBDA) THEN
C
         VAO(MSIGMA,MU)=VAO(MSIGMA,MU)+HALF*
     *                 FOUR*VAL*SPRIME(NALPHA,LAMBDA)
         END IF
C
         IF(MSIGMA.NE.MU) THEN
         VAO(MU,MSIGMA)=VAO(MU,MSIGMA)+HALF*
     *                 FOUR*VAL*SPRIME(LAMBDA,NALPHA)
         IF(LAMBDA.NE.NALPHA) THEN
         VAO(MU,MSIGMA)=VAO(MU,MSIGMA)+HALF*
     *                 FOUR*VAL*SPRIME(NALPHA,LAMBDA)
         END IF
         END IF
C
         VAO(MSIGMA,MU)=VAO(MSIGMA,MU)+HALF*
     *                 FOUR*VAL*SPRIME(LAMBDA,NALPHA)
C
C
         IF(NALPHA.EQ.MU .AND. LAMBDA.EQ.MSIGMA) THEN
         GOTO 250
         ELSE
         IF(NALPHA.NE.LAMBDA) THEN
         VAO(LAMBDA,MSIGMA)=VAO(LAMBDA,MSIGMA)-HALF*
     *                  VAL*SPRIME(NALPHA,MU)
         END IF
         IF(MU.NE.MSIGMA) THEN
         VAO(NALPHA,MU)=VAO(NALPHA,MU)-HALF*
     *                  VAL*SPRIME(LAMBDA,MSIGMA)
         IF(LAMBDA.NE.NALPHA) THEN
         VAO(LAMBDA,MU)=VAO(LAMBDA,MU)-HALF*
     *                  VAL*SPRIME(NALPHA,MSIGMA)
         END IF
         END IF
C
         VAO(NALPHA,MSIGMA)=VAO(NALPHA,MSIGMA)-HALF*
     *                  VAL*SPRIME(MU,LAMBDA)
         END IF
 250     CONTINUE
C
         IF(NALPHA.NE.LAMBDA) THEN
         VAO(MU,NALPHA)=VAO(MU,NALPHA)-HALF*
     *                  VAL*SPRIME(MSIGMA,LAMBDA)
         END IF
C
         IF(MU.NE.MSIGMA) THEN
         VAO(MSIGMA,LAMBDA)=VAO(MSIGMA,LAMBDA)-HALF*
     *                  VAL*SPRIME(MU,NALPHA)
         IF(LAMBDA.NE.NALPHA) THEN
         VAO(MSIGMA,NALPHA)=VAO(MSIGMA,NALPHA)-HALF*
     *                  VAL*SPRIME(LAMBDA,MU)
         END IF
         END IF
C
         VAO(MU,LAMBDA)=VAO(MU,LAMBDA)-HALF*
     *                  VAL*SPRIME(MSIGMA,NALPHA)
C
C
         IF(NALPHA.EQ.MU .AND. LAMBDA.EQ.MSIGMA) THEN
         GOTO 275
         ELSE
         IF(NALPHA.NE.LAMBDA) THEN
         VAO(MU,LAMBDA)=VAO(MU,LAMBDA)-HALF*
     *                 VAL*SPRIME(NALPHA,MSIGMA)
         END IF
         IF(MU.NE.MSIGMA) THEN
         VAO(MSIGMA,NALPHA)=VAO(MSIGMA,NALPHA)-HALF*
     *                 VAL*SPRIME(LAMBDA,MU)
         IF(NALPHA.NE.LAMBDA) THEN
         VAO(MSIGMA,LAMBDA)=VAO(MSIGMA,LAMBDA)-HALF*
     *                 VAL*SPRIME(NALPHA,MU)
         END IF
         END IF
         VAO(MU,NALPHA)=VAO(MU,NALPHA)-HALF*
     *                 VAL*SPRIME(LAMBDA,MSIGMA)
         END IF
 275     CONTINUE
C
         IF(NALPHA.NE.LAMBDA) THEN
         VAO(NALPHA,MSIGMA)=VAO(NALPHA,MSIGMA)-HALF*
     *                 VAL*SPRIME(LAMBDA,MU)
         END IF
         IF(MU.NE.MSIGMA) THEN
         VAO(LAMBDA,MU)=VAO(LAMBDA,MU)-HALF*
     *                 VAL*SPRIME(NALPHA,MSIGMA)
         IF(NALPHA.NE.LAMBDA) THEN
         VAO(NALPHA,MU)=VAO(NALPHA,MU)-HALF*
     *                 VAL*SPRIME(LAMBDA,MSIGMA)
         END IF
         END IF
         VAO(LAMBDA,MSIGMA)=VAO(LAMBDA,MSIGMA)-HALF*
     *                 VAL*SPRIME(NALPHA,MU)
C
C
  700    CONTINUE
         IF(NX.GT.0) GO TO 150
  300   CONTINUE
        CALL SEQREW(8)
C
      CALL TFSQU(VMO,VAO,VEC,WRK2,L1,L1)
      DO I=COREA,NA
       DO M=COREA,NA
        VXR(M,I)=VMO(M,I)
       END DO
      END DO
        RETURN
        END
C*MODULE EFPAUL  *DECK ZM
      SUBROUTINE ZM(RU,ZETAMU,NUMEFT,L1,NATMT,NATA,MXBF,
     *              NSHELLA,EXA,CSA,CPA,CDA,CFA,CGA,KSTARTA,
     *              KATOMA,KTYPEA,KNGA,KLOCA,
     *              KMINA,KMAXA,CA,SMATL,TMATL,RZETA,RUZ)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXDFG=5, MXFRG=1050, MXFGPT=12000,MXATM=2000,
     *           MXSH=5000, MXGTOT=20000,
     *           MXDPPT=MXFRG*MXDFG*12,
     *           MXSHEF=1000, MXGEFP=4000)
      PARAMETER(ZERO=0.0D+00,TWO=2.0D+00)
      PARAMETER(RTPI=1.772453850905516D+00)
C
      COMMON /PAULMO/ CENTNM(MXFGPT),CENTCD(3,MXFGPT),NORB(MXFRG),
     *                NPBF(MXFRG),NTMO
      COMMON /EFPBAS/ EX(MXGEFP,MXDFG),CS(MXGEFP,MXDFG),
     *                CP(MXGEFP,MXDFG),CD(MXGEFP,MXDFG),
     *                CF(MXGEFP,MXDFG),CG(MXGEFP,MXDFG),
     *                PRNAME(MXFGPT),PRCORD(3,MXFGPT),EFZNUC(MXFGPT),
     *                KSTART(MXSHEF,MXDFG),KATOM(MXSHEF,MXDFG),
     *                KTYPE(MXSHEF,MXDFG),KNG(MXSHEF,MXDFG),
     *                KLOC(MXSHEF,MXDFG),KMIN(MXSHEF,MXDFG),
     *                KMAX(MXSHEF,MXDFG),NSHELL(MXDFG),NGAUSS(MXDFG),
     *                NAT(MXDFG),NUM(MXDFG),NTPATM
C
      COMMON /FRGINF/ NMPTS(MXFRG),NMTTPT,IEFC,IEFD,IEFQ,IEFO,
     *                NPPTS(MXFRG),NPTTPT,IEFP,
     *                NRPTS(MXFRG),NRTTPT,IREP,ICHGP,NFRG,
     *                NDPPTS(MXDPPT),NDPTTPT,IEFDP,LSTMPTS(MXFRG)
C
      COMMON /FRGTYP/ NDFRG,ISET(MXFRG),NAMIDX(MXDFG)
      PARAMETER (NTX=4, NPF=450, NGRD=7, NPX=1000, MXQT=16)
      PARAMETER (PI4=0.785398163397448D+00)
      COMMON /FMTTBL/ FGRID(0:NTX,0:NPF,0:NGRD),XGRID(0:NTX,0:NPX)
     *,               TMAX,RFINC(0:NGRD),RXINC
     *,               RMR(MXQT),TLGM(0:MXQT),NORD
C
      DIMENSION LIMLOWE(MXFGPT),LIMSUPE(MXFGPT)
      DIMENSION EXA(MXGTOT),CSA(MXGTOT),CPA(MXGTOT),CDA(MXGTOT),
     *          CFA(MXGTOT),CGA(MXGTOT),
     *          KSTARTA(MXSH),KATOMA(MXSH),KTYPEA(MXSH),KNGA(MXSH),
     *          KLOCA(MXSH),KMINA(MXSH),KMAXA(MXSH)
      DIMENSION TMATL(L1,NUMEFT),CA(3,MXATM),
     *          RU(3,L1)
      DIMENSION SMATL(L1,NUMEFT)
C
      DIMENSION RZETA(3,NUMEFT)
      DIMENSION RUZ(L1,NUMEFT)
      DIMENSION ZETAMU(NUMEFT,L1)
C
C
C     OBTAIN INTERMEDIATE INTEGRAL VALUES (ZETA MU | ZETA MU)
C     USED FOR SCHWARZ INSIDE OF EFP2EI
C
      CALL VCLR(ZETAMU,1,NUMEFT*L1)
      CALL VCLR(SMATL,1,NUMEFT*L1)
      LAT=1
      J = 1
      LIMLOWE(1) = 1
      DO MJ = 1,NFRG
      JM = ISET(MJ)
      DO 10 I = 1,NSHELL(JM)
         IAT = KATOM(I,JM)
         IF (LAT .EQ. IAT) GO TO 10
         LAT = IAT
         LIMSUPE(J) = KLOC(I,JM)-1
         J = J+1
         LIMLOWE(J) = KLOC(I,JM)
 10   CONTINUE
      END DO
C
      MUS=1
      DO J=1,NATMT
       MUL=LIMSUPE(J)
       IF (J.EQ.NATMT) MUL=NUMEFT
       DO MU=MUS,MUL
        RZETA(1,MU)=PRCORD(1,J)
        RZETA(2,MU)=PRCORD(2,J)
        RZETA(3,MU)=PRCORD(3,J)
       END DO
      IF(J.EQ.NATMT) GO TO 11
      MUS=LIMLOWE(J+1)
 11   CONTINUE
      END DO
C
      DO MU=1,L1
      DO JZETA=1,NUMEFT
      RUZ(MU,JZETA)=SQRT(((RU(1,MU)-RZETA(1,JZETA))**2)+
     *             ((RU(2,MU)-RZETA(1,JZETA))**2)+
     *             ((RU(3,MU)-RZETA(1,JZETA))**2))
      END DO
      END DO
C
      JAO=0
      JMO=0
      JNAT=0
      DO MJ=1,NFRG
      JM = ISET(MJ)
      CALL STINT(SMATL(1,JAO+1),TMATL(1,JAO+1),MXBF,L1,NATA,NAT(JM),
     *           NGAUSS(JM),NSHELL(JM),EX(1,JM),CS(1,JM),CP(1,JM),
     *           CD(1,JM),CF(1,JM),CG(1,JM),KSTART(1,JM),KATOM(1,JM),
     *           KTYPE(1,JM),KNG(1,JM),KLOC(1,JM),KMIN(1,JM),KMAX(1,JM),
     *           L1,NSHELLA,EXA,CSA,
     *           CPA,CDA,CFA,CGA,KSTARTA,
     *           KATOMA,KTYPEA,KNGA,KLOCA,
     *           KMINA,KMAXA,PRCORD(1,JNAT+1),CA)
      JMO = JMO + NORB(MJ)
      JAO = JAO + NUM(JM)
      JNAT = JNAT + NAT(JM)
      END DO      ! NFRG LOOP
C
      JAO=0
      JMO=0
      JNAT=0
      DO MJ = 1,NFRG
      JM = ISET(MJ)
       DO JZETA=1,NUM(JM)
       DO MU=1,L1
        IF (SMATL(MU,JZETA+JAO).EQ.ZERO) GOTO 100
        ALPMUJ= ZERO-((TWO/(RUZ(MU,JZETA+JAO)**2))*
     *                 LOG(ABS(SMATL(MU,JZETA+JAO))))
        NU=MU
        ALPNUJ= ZERO-((TWO/(RUZ(NU,JZETA+JAO)**2))*
     *                LOG(ABS(SMATL(NU,JZETA+JAO))))
        TEMP= TWO*(1/RTPI)*SQRT((TWO*ALPMUJ*ALPNUJ)/
     *                    (ALPMUJ+ALPNUJ))*SMATL(MU,JZETA+JAO)*
     *                    SMATL(NU,JZETA+JAO)
        T=ZERO
        IF (T.LE.TMAX) THEN
            TVAL=T*RFINC(0)
            IPT=NINT(TVAL)
            FX =      FGRID(4,IPT,0) *TVAL
            FX = (FX +FGRID(3,IPT,0))*TVAL
            FX = (FX +FGRID(2,IPT,0))*TVAL
            FX = (FX +FGRID(1,IPT,0))*TVAL
            FX =  FX +FGRID(0,IPT,0)
            F0T=FX
        ELSE
            F0T= SQRT(PI4/T)
        ENDIF
        ZETAMU(JZETA+JAO,MU)=TEMP*F0T
 100    CONTINUE
       END DO  !MU
C
       END DO   !JZETA  LOOP
      JMO = JMO + NORB(MJ)
      JAO = JAO + NUM(JM)
      JNAT = JNAT + NAT(JM)
      END DO    !MJ LOOP
      RETURN
      END
