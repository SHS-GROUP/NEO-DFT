C*MODULE NEODFT  *DECK EPCORRCAL
C>    @brief Integration of <I|VC(p->e)|A> and <I'|VC(e->p)|A'>. Clone of DMATD
C>
C>    @details THIS ROUTINE DOES A NUMERICAL INTEGRATION TO YIELD THE
C>     <I|VC(P->E)|A> AND <I'|VC(E->P)|A'> MATRICES WHERE VC(P->E)=D_E(EPC)/D_RHO(E)
C>     AND VC(E->P)=D_E(EPC)/D_RHO(P). IN C1 SYMMETRY FOR NOW.
C>     THE RADIAL QUADRATURE FORMULA IS TAKEN FROM
C>     P.M.W.GILL, B.G.JOHNSON, J.A.POPLE AND M.J.FRISCH,
C>     CHEM. PHYS. LETT. 197, 499 (1992).
C>     THE ANGULAR QUADRATURE FORMULA IS TAKEN FROM V.I.LEBEDEV,
C>     ZH. VYCHISL. MAT. FIZ. 15, 48 (1975) AND 16, 293 (1976),
C>     (ENGLISH TRANSLATION IN U.S.S.R. COMPUT. MATH AND MATH PHYS).
C>     EXCHANGE AND CORRELATION ENERGY CONTRIBUTION DUE TO INTEGRATION
C>     OVER GRID POINTS SURROUNDING ATOM NCNTR IS COMPUTED.
C>
C>    @date : November 29, 2016 - Yang Yang
C>
C>
C>    @details THIS PROGRAM UTILIZES AN ARBITRARY DENSITY TO CALCULATE
C>     THE CORRELATION CORRECTION TO SCF WITH ELECTRON-PROTON
C>     CORRELATION DENSITY FUNCTIONALS.
C
C
      SUBROUTINE EPCORRCAL(TOTWT,IIFACT,NAPTS,COEFFA,COEFFB,IANGN,
     *                 IFACTR,INC0,VMOA,DVMOXA,DVMOYA,DVMOZA,VALGA,
     *                 VMOB,DVMOXB,DVMOYB,DVMOZB,VALGB,FA,FB,NCNTR,EEPC,
     *                 TOTELE,TOTNUC,NANG,PTRAD,XDAT,YDAT,ZDAT,ATMXVEC,
     *                 ATMYVEC,ATMZVEC,ANGXVL,ANGYVL,ANGZVL,RSQRD,
     *                 PCOEFFELE,PCOEFFNUC,EXPSELE,EXPSNUC,AOX,GAOX,
     *                 GAOY,GAOZ,NLCT,NELM,IJX,IJY,IJZ,
     *                 NEEDGR,UROHF,TOTKIN,ATMPOL,ATPPOL,EFPOL,
     *                 WTAB,DRSPH,MAXL,MAXM,NFREQ,ADDTONA,ADDTONB,
     *                 ADDTOEA,ADDTOEB,COEFFANUC,COEFFBNUC,N1,N2,L1,L2,
     *                 AOXNUC,GAOXNUC,GAOYNUC,GNOZNUC,VMOANUC,VMOBNUC)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      LOGICAL UROHF,OUT,NEEDGR,GOPARR,DSKWRK,MASWRK,DLB,NEEDTAU,
     *        PRTTAU,SG1,FUNCL,FUNFL
C
      PARAMETER (MXATM=2000,ZERO=0.0D+00,ONE=1.0D+00,TWO=2.0D+00)
      PARAMETER (MXGRID=10,MXGRIDTYP=10)
      PARAMETER (MXSH=5000, MXGTOT=20000, MXGSH=30, MXG2=MXGSH*MXGSH)
      PARAMETER (MXAO=8192, MXNEO=20)
C
      COMMON /DFGRID/ DFTTHR,DFTGTHR,SWOFF,SW0,BSLRD(137),NDFTFG,
     *                NRAD,NTHE,NPHI,NRAD0,NTHE0,NPHI0,
     *                NANGPT(MXGRID),NANGPT0(MXGRID),SG1,JANS
      COMMON /DFPRUN/ PRUNERADS(MXGRID,MXGRIDTYP),
     *                PRUNEATOMS(2,MXGRIDTYP),
     *                IPRUNECUTS(MXATM),NTOTGRIDPOINTS(MXATM),
     *                NGRIDS,MAXANG,NGRIDTYPS
      COMMON /DNSAO / IDENAO
      COMMON /FUNLIB/ FUNCL,FUNFL
      COMMON /INFOA / NAT,ICH,MUL,NUM,NQMT,NE,NA,NB,
     *                ZAN(MXATM),C(3,MXATM),IAN(MXATM)
      COMMON /IOFILE/ IR,IW,IP,IS,IPK,IDAF,NAV,IODA(950)
      COMMON /LMOEDA/ GDTOLA,GJTOLA,GKTOLA,TKTOLA,VTOLA,
     *                GDTOLB,GJTOLB,GKTOLB,TKTOLB,VTOLB,
     *                ECORL,EXCOR
      COMMON /METGGA/ NEEDTAU,PRTTAU
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
      COMMON /RUNOPT/ RUNTYP,EXETYP,NEVALS,NGLEVL,NHLEVL
      COMMON /SCFOPT/ CONVHF,MAXIT,MCONV,NPUNCH,NPREO(4)
      COMMON /NUCMOI/ NUNIQN,IUNIQN(MXNEO),IUNIQT(MXNEO),NQMNUC,
     *                IQMNUC(MXNEO),IQNTYP(MXNEO),NUMNB,NUCST,NAUXNB,
     *                IAUXNB(MXNEO),NUMULT,NNA,NNB,NTAUXB,IPRDEN
C
      PARAMETER (HALF=0.5D+00)
C
      DIMENSION NLCT(*),NELM(*)
      DIMENSION TOTWT(NAT,*),COEFFA(L1,*),COEFFB(L1,*),VMOA(L1),
     *          DVMOXA(L1),DVMOYA(L1),DVMOZA(L1),VMOB(L1),DVMOXB(L1),
     *          DVMOYB(L1),DVMOZB(L1),VALGA(L1),VALGB(L1)
      DIMENSION NAPTS(NAT),IANGN(NAT,2,*),IIFACT(NAT),IFACTR(NAT)
      DIMENSION FA(*),FB(*),AOX(L1),GAOX(L1),GAOY(L1),GAOZ(L1),
     *          PTRAD(*),XDAT(NAT,MAXANG,*),YDAT(NAT,MAXANG,*),
     *          ZDAT(NAT,MAXANG,*),RSQRD(*),PCOEFFELE(*),PCOEFFNUC(*),
     *          ATMXVEC(NAT,NAT),ATMYVEC(NAT,NAT),ATMZVEC(NAT,NAT),
     *          ANGXVL(NAT,*),ANGYVL(NAT,*),ANGZVL(NAT,*),EXPSELE(*),
     *          EXPSNUC(*)
      DIMENSION AOXNUC(N1),GAOXNUC(N1),GAOYNUC(N1),GNOZNUC(N1)
      DIMENSION ADDTONA(*),ADDTONB(*),ADDTOEA(*),ADDTOEB(*)
      DIMENSION COEFFANUC(N1,*),COEFFBNUC(N1,*),VMOANUC(N1),VMOBNUC(N1)
      DIMENSION IJX(84),IJY(84),IJZ(84)
      DATA DEBUG/8HDEBUG   /, DFTGRD/8HDERDFT  /
C
      LOGICAL LRDFLG,MLTINT,DOLRD
      COMMON /LRDISP/ ELRD6,ELRD8,ELRD10,EMULT,LRDFLG,MLTINT,DOLRD
      DIMENSION WTAB(NAT,NAT,*),ATMPOL(NAT,MAXL,MAXM,MAXM,NFREQ),
     *          ATPPOL(NAT,NAT,NFREQ),EFPOL(NAT),DRSPH(3,MAXL,MAXM)
C-END
C
      OUT = EXETYP.EQ.DFTGRD  .OR.  EXETYP.EQ.DEBUG
      RAD = BRAGGRAD(NCNTR)
      EEPC1 = ZERO
      TOTGRADX = ZERO
      TOTGRADY = ZERO
      TOTGRADZ = ZERO
      GRDAA = ZERO
      GRDBB = ZERO
      GRDAB = ZERO
      NOA = NA
      NOB = NB
      NPT = NRAD*MAXANG
C
C     SET CUT-OFFS FOR THE DENSITY RCUTOFF AND WEIGHT WCUTOFF
C     RCUTOFF IS SET TO DEPEND UPON SCF DENSITY CONV. AND THE GRID SIZE
C     WCUTOFF IS A CELL VOLUME AND WE SET IT TO A FIXED VALUE.
C     MOST CELLS HAVE LARGE VOLUME (ABOUT 97% HAVE VOLUME .GT. 1E-14)
C
      DFTTHRS=DFTTHR
      IF(DFTTHR.EQ.ZERO) DFTTHR=1.0D-04/(NPT*NAT)
      WCUTOFF=1.0D-08/(NPT*NAT)
      RCUTOFF=CONVHF/(NPT*NAT)
      CCUTOFF=1.0D-03/(NPT*NAT)
      IF(DFTTHR.LT.1.1D-15) THEN
         WCUTOFF=1.0D-15
         RCUTOFF=1.0D-15
         CCUTOFF=1.0D-15
      ENDIF
C
C     ANGXVL=X**I, ANGYVL=Y**J, ANGZVL=Z**K, FOR NEEDED VALUES OF I,J,K
C     WHERE (X,Y,Z) IS THE CENTRE OF A DFT GRID POINT RI
C     MINUS AN ATOMIC CENTRE RA: XYZ= (RI - RA)
C
      CALL VCLR(ANGXVL(1,1),1,NAT)
      CALL VCLR(ANGYVL(1,1),1,NAT)
      CALL VCLR(ANGZVL(1,1),1,NAT)
      CALL DACOPY(NAT,ONE,ANGXVL(1,2),1)
      CALL DACOPY(NAT,ONE,ANGYVL(1,2),1)
      CALL DACOPY(NAT,ONE,ANGZVL(1,2),1)
C
C     ---- SYMMETRY MULTIPLICATION FACTOR ----
C
      FACT = IIFACT(NCNTR)*IFACTR(INC0)
C
C     NAPTS   + (NAT-1)/NWDVAR+1
C     DYNAMIC LOAD BALANCING: DIVIDE ALL POINTS INTO NGRAN*NPROC CHUNKS.
C     NGRAN CANNOT BE SET IN THE INPUT FILE. THEN EACH NODE GETS A CHUNK
C     AND TOILS IT OVER UNTIL READY TO ASK FOR MORE.
C
      LOOP=0
      NGRAN=20
      IF(NGRIDS.EQ.1) THEN
         NLOOP=NRAD*(IANGN(NCNTR,2,1)-IANGN(NCNTR,1,1)+1)
      ELSE
         NLOOP=NTOTGRIDPOINTS(NCNTR)
      ENDIF
      MCHUNK=(NLOOP-1)/(NGRAN*NPROC)+1
      NEXT  = -1
      DLB = IBTYP.EQ.1
C***********************************************************************
C     LOOP OVER RADIAL GRIDS
C     LOOP OVER ANGULAR GRIDS
C***********************************************************************
C STB MODIFIED FOR PRUNING
      IGRID = 1
      DO 20 IRADPT = 1, NRAD
C
        R1= RAD*PTRAD(IRADPT)
        IF(R1.GE.(PRUNERADS(IGRID,IPRUNECUTS(NCNTR))*RAD)) THEN
           IGRID = IGRID + 1
        ENDIF
        DO 10 IANGPT = IANGN(NCNTR,1,IGRID), IANGN(NCNTR,2,IGRID)
C         STB - FOR NOW THIS SHOULD BE OK AS I USED THE MAX ANGULAR
C               POINTS SO AS TO SIMPLIFY
          IPT=(IRADPT-1)*NAPTS(NCNTR)+IANGPT
C
          IF(GOPARR) THEN
            IF(DLB) THEN
              LOOP=LOOP+1
              ICHUNK=(LOOP-1)/MCHUNK
              IF(ICHUNK.GT.NEXT) THEN
                CALL DDI_DLBNEXT(NEXT)
              ENDIF
              IF(NEXT.NE.ICHUNK) GOTO 10
            ELSE
              IF(MOD(IPT,NPROC).NE.ME) GOTO 10
            ENDIF
          ENDIF
          IPTME=(IPT-1)/NPROC+1
          IF(DLB) IPTME=IPT
C
          FTOTWT = TOTWT(NCNTR,IPTME)*FACT
          IF(ABS(FTOTWT).LT.WCUTOFF) THEN
             GOTO 10
          ENDIF
C
          XD=R1*XDAT(NCNTR,IANGPT,IGRID)
          YD=R1*YDAT(NCNTR,IANGPT,IGRID)
          ZD=R1*ZDAT(NCNTR,IANGPT,IGRID)
          DO 610 IATM=1,NAT
            XCDNT=ATMXVEC(NCNTR,IATM)+XD
            YCDNT=ATMYVEC(NCNTR,IATM)+YD
            ZCDNT=ATMZVEC(NCNTR,IATM)+ZD
            RSQRD(IATM)=XCDNT**2+YCDNT**2+ZCDNT**2
            ANGXVL(IATM,3)=XCDNT
            ANGYVL(IATM,3)=YCDNT
            ANGZVL(IATM,3)=ZCDNT
            DO 35 IANG=3,NANG
               ANGXVL(IATM,IANG+1)=ANGXVL(IATM,IANG)*XCDNT
               ANGYVL(IATM,IANG+1)=ANGYVL(IATM,IANG)*YCDNT
               ANGZVL(IATM,IANG+1)=ANGZVL(IATM,IANG)*ZCDNT
 35         CONTINUE
  610     CONTINUE
          CALL DFTAO(IJX,IJY,IJZ,AOX,ANGXVL,ANGYVL,ANGZVL,PCOEFFELE,
     *             EXPSELE,RSQRD,NAT,L1)
          CALL DFTNUCAO(IJX,IJY,IJZ,AOXNUC,ANGXVL,ANGYVL,ANGZVL,
     *               PCOEFFNUC,EXPSNUC,RSQRD,NAT,N1)
C***********************************************************************
C     FORM DENSITY AT THIS POINT
C***********************************************************************
C     ----- ELECTRON DENSITY -----
          IF(IDENAO.EQ.0) THEN
             CALL DFTTRFA(UROHF,L1,NOA,COEFFA,COEFFB,AOX,VMOA,VMOB,
     *                    CCUTOFF)
             ROA=DDOT(NOA,VMOA,1,VMOA,1)
             IF(UROHF) THEN
               ROB=DDOT(NOB,VMOB,1,VMOB,1)
             ELSE
               ROB=ROA
             ENDIF
          ELSE
             CALL DFTTRFDM(UROHF,L1,COEFFA,COEFFB,AOX,VMOA,VMOB,CCUTOFF,
     *                     NLCT,NELM)
             ROA=DDOT(L1,AOX,1,VMOA,1)
             IF(UROHF) THEN
                ROB=DDOT(L1,AOX,1,VMOB,1)
             ELSE
                ROA=ROA*HALF
                ROB=ROA
             END IF
C
C            FOR SOME REASON, DENSITY MIGHT BE NEGATIVE... (MK)
             IF(ROA.LT.ZERO) ROA=ZERO
             IF(ROB.LT.ZERO) ROB=ZERO
          END IF
          IF(ABS(ROA+ROB).LT.RCUTOFF) THEN
             GOTO 10
          ENDIF
C
C     ----- PROTON DENSITY -----
          CALL DFTTRFA(FALSE,N1,NNA,COEFFANUC,COEFFBNUC,AOXNUC,
     *                 VMOANUC,VMOBNUC,CCUTOFF)
          ROANUC=DDOT(NNA,VMOANUC,1,VMOANUC,1)
C
C     ----- PROTON-ELECTRON CORRELATION -----
          VCORRAELEBYNUC=ZERO
          VCORRBELEBYNUC=ZERO
          VCORRANUCBYELE=ZERO
          VCORRBNUCBYELE=ZERO
          EEPCATPOINT=ZERO
          CALL CALCNECORR(EEPCATPOINT,ROA,ROB,ROANUC,ROBNUC,FTOTWT,
     *                 VCORRAELEBYNUC,VCORRBELEBYNUC,VCORRANUCBYELE,
     *                 VCORRBNUCBYELE)
          EEPC1=EEPC1+EEPCATPOINT
C
          CALL NEODFTFOCK(UROHF,FTOTWT,VCORRAELEBYNUC,VCORRBELEBYNUC,
     *                 VCORRANUCBYELE,VCORRBNUCBYELE,AOX,AOXNUC,
     *                 L1,N1,ADDTOEA,ADDTOEB,ADDTONA,ADDTONB,DFTTHR)
C
          TOTELE = TOTELE+FTOTWT*(ROA+ROB)
          TOTNUC = TOTNUC+FTOTWT*ROANUC
   10   CONTINUE
C
C     ----- NEXT RADIAL POINT -----
C
   20 CONTINUE
C
C     ----- NEXT ATOM -----
C
      IF(GOPARR.AND.DLB) CALL DDI_DLBRESET
      EEPC = EEPC+EEPC1
      DFTTHR=DFTTHRS
      IF (OUT) WRITE(IW,9999) NCNTR,EEXC,TOTELE,TOTKIN
      RETURN
C
 9999 FORMAT(/5X,'ATM',I8,' EXC=',F20.10,5X,'TOTELE=',F20.10,'TOTKIN=',
     >        F20.10)
      RETURN
      END

C*MODULE NEODFT  *DECK DFTNUCAO
C
C>    @brief Computes values of all nuclear AOs for a grid point, brief
C>           clone of DFTAO
C>
C>    @date : November 30, 2016 - Yang Yang
C>
C>
      SUBROUTINE DFTNUCAO(IJX,IJY,IJZ,VALMOA,ANGXVL,ANGYVL,ANGZVL,CL,
     *                 EXPS,RSQRD,NAT,N1)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      PARAMETER (MXSH=5000, MXGTOT=20000, TWO=2.0D+00,RLN10=2.30258D+00)
      PARAMETER (MXGSH=30, MXG2=MXGSH*MXGSH, MXATM=2000)
      PARAMETER (MXAO=8192, MXNEO=20)
C
      COMMON /NSHEL / EX(MXGTOT),CS(MXGTOT),CP(MXGTOT),CD(MXGTOT),
     *                CF(MXGTOT),CG(MXGTOT),CH(MXGTOT),CI(MXGTOT),
     *                KSTART(MXSH),KATOM(MXSH),KTYPE(MXSH),KNG(MXSH),
     *                KLOC(MXSH),KMIN(MXSH),KMAX(MXSH),NSHELL
      COMMON /NEOSHL/ NGAUSS,NGAUSE,NGAUSN,NTSHEL,NNUCSH
      COMMON /NUCMOI/ NUNIQN,IUNIQN(MXNEO),IUNIQT(MXNEO),NQMNUC,
     *                IQMNUC(MXNEO),IQNTYP(MXNEO),NUMNB,NUCST,NAUXNB,
     *                IAUXNB(MXNEO),NUMULT,NNA,NNB,NTAUXB,IPRDEN
      COMMON /SHLNRM/ PNRM(84)
      COMMON /OUTPUT/ NPRINT,ITOL,ICUT,NORMF,NORMP,NOPK
C
      DIMENSION VALMOA(*),EXPS(*),ANGXVL(NAT,*),ANGYVL(NAT,*),
     *          ANGZVL(NAT,*),CL(*),RSQRD(NAT)
      DIMENSION IJX(84),IJY(84),IJZ(84)
C
      TOL = RLN10*ITOL/TWO
C
C     ITOL SETS THRESHOLD FOR INTEGRALS. HERE IT IS APPLIED TO
C     WAVEFUNCTION, THUS IT IS HALVED. IT IS FOUND THAT THIS IS A
C     RATHER CONSERVATIVE SETTING AND ONE GETS ABOUT 11 SIG. FIGURES
C     OF ACCURACY IN THE TOTAL ENERGY WITH THE DEFAULT ITOL=20.
C     SEE DFTGAO AND DFTG2AO.
C
      IFCT=0
      CALL VCLR(VALMOA,1,N1)
C
C     The only change from dftao is the loop is from NSHELL+1 to NTSHEL,
C     rather than the original 1 to NSHELL
      DO 40 ISHELL = NSHELL+1, NTSHEL
         IATM = KATOM(ISHELL)
C***********************************************************************
C     ANGULAR INTERMEDIATES FOR THE DENSITY AND GRADIENT
C***********************************************************************
         K1 = KSTART(ISHELL)
         K2 = K1 + KNG(ISHELL) - 1
         MINI=KMIN(ISHELL)
         MAXI=KMAX(ISHELL)
         LOCI = KLOC(ISHELL)-MINI
         LOCI0= KLOC(ISHELL)
         DO 60 IMOMFCT = K1, K2
            IFCT=IFCT+1
            DUM=EX(IMOMFCT)*RSQRD(IATM)
            IF(DUM.GT.TOL) GOTO 60
            VEXP=EXP(-DUM)
            EXPS(IFCT)=VEXP
C           SAVE EXP FOR THE GRADIENT
            CC=CL(IMOMFCT)
            LOCI1=LOCI0
            IF(MINI.EQ.1) THEN
C
C           SPECIAL FAST CODE FOR S FUNCTIONS (INCLUDING L SHELLS)
C
               VALMOA(LOCI1)=VALMOA(LOCI1)+CC*VEXP
C              FOR L-SHELLS
               LOCI1=LOCI1+1
               CC=CP(IMOMFCT)
            ENDIF
            IF(MAXI.EQ.4) THEN
C
C           SPECIAL FAST CODE FOR P FUNCTIONS (INCLUDING L SHELLS)
C
               VALMOA(LOCI1  )=VALMOA(LOCI1  )+CC*VEXP*ANGXVL(IATM,3)
               VALMOA(LOCI1+1)=VALMOA(LOCI1+1)+CC*VEXP*ANGYVL(IATM,3)
               VALMOA(LOCI1+2)=VALMOA(LOCI1+2)+CC*VEXP*ANGZVL(IATM,3)
               LOCI1=LOCI1+3
            ENDIF
            IF(LOCI1.NE.LOCI0) GOTO 60
C
C           GENERAL CODE (WORKS FOR S,P,L FUNCTIONS AS WELL)
C           TO USE FOR L-FUNCTIONS, UNCOMMENT THE "C     L-SHELL" LINE
C
            DO 50 ITYP = MINI,MAXI
               IX=IJX(ITYP)-1
               IY=IJY(ITYP)-1
               IZ=IJZ(ITYP)-1
C
C              COMPUTE AO VALUE AT A GRID POINT
C
               DUM=CC*PNRM(ITYP)*VEXP
               VALMOA(LOCI+ITYP)=VALMOA(LOCI+ITYP)+ANGXVL(IATM,IX+2)*
     *            ANGYVL(IATM,IY+2)*ANGZVL(IATM,IZ+2)*DUM
C              UNCOMMENT FOR L-SHELL
C              IF(ITYP.EQ.1) CC=CP(IMOMFCT)
C              THIS IS THE DREADED L-SHELL CASE, FOR S-SHELLS THE LOOP
C              IS OVER, OTHERWISE USE P COEFFICIENT IN THE FOLLOWING
 50         CONTINUE
 60      CONTINUE
 40   CONTINUE
C
      RETURN
      END
C*MODULE NEODFT  *DECK NEODFTFOCK
C>    @brief NEO-DFT correlation addons to Fock Matrix (E and P, alpha and beta)
C
      SUBROUTINE NEODFTFOCK(UROHF,FTOTWT,VCORRAELEBYNUC,VCORRBELEBYNUC,
     *                   VCORRANUCBYELE,VCORRBNUCBYELE,AOX,AOXNUC,L1,N1,
     *                   ADDTOEA,ADDTOEB,ADDTONA,ADDTONB,CUTOFF)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL UROHF
      PARAMETER (TWO=2.0D+00,ZERO=0.0D+00)
      DIMENSION AOX(*),AOXNUC(*)
      DIMENSION ADDTOEA(*),ADDTOEB(*),ADDTONA(*),ADDTONB(*)
C     -----------------------------
C     ----- FOR ELECTRON FOCK -----
C     -----------------------------
      IND=1
      DO I=1,L1
        FFA=FTOTWT*VCORRAELEBYNUC*AOX(I)
        IF(UROHF) THEN
          FFB=FTOTWT*VCORRBELEBYNUC*AOX(I)
          IF(ABS(FFA)+ABS(FFB).LT.CUTOFF*TWO) THEN
            IND=IND+I
            GOTO 100
          ENDIF
          DO J=1,I
            ADDTOEA(IND)=ADDTOEA(IND)+FFA*AOX(J)
            ADDTOEB(IND)=ADDTOEB(IND)+FFB*AOX(J)
            IND=IND+1
          ENDDO
  100     CONTINUE
        ELSE
          IF(ABS(FFA).LT.CUTOFF) THEN
            IND=IND+I
            GOTO 200
          ENDIF
          DO J=1,I
            ADDTOEA(IND)=ADDTOEA(IND)+FFA*AOX(J)
            IND=IND+1
          ENDDO
  200     CONTINUE
        ENDIF
      ENDDO
C     ---------------------------
C     ----- FOR PROTON FOCK -----
C     ---------------------------
      IND=1
      DO I=1,N1
        FFA=FTOTWT*VCORRANUCBYELE*AOXNUC(I)
C        IF(UROHFNEO) THEN
C          FFB=FTOTWT*VCORRBNUCBYELE*AOXNUC(I)
C          IF(ABS(FFA)+ABS(FFB).LT.CUTOFF*TWO) THEN
C            IND=IND+I
C            GOTO 300
C          ENDIF
C          DO J=1,I
C            ADDTONA(IND)=ADDTONA(IND)+FFA*AOXNUC(J)
C            ADDTONB(IND)=ADDTONB(IND)+FFB*AOXNUC(J)
C            IND=IND+1
C          ENDDO
C  300     CONTINUE
C        ELSE
          IF(ABS(FFA).LT.CUTOFF) THEN
            IND=IND+I
            GOTO 400
          ENDIF
          DO J=1,I
            ADDTONA(IND)=ADDTONA(IND)+FFA*AOXNUC(J)
            IND=IND+1
          ENDDO
  400     CONTINUE
C        ENDIF
      ENDDO
C
      RETURN
      END
