C 27 Feb 13 - MWS - extend this program to h+i Cartesian GTOs
C 16 May 08 - MWS - do gradients of the GTOs, to plot kinetic energy
C  3 Mar 06 - MWS - kick maximum shell count from 25 to 30
C 22 FEB 02 - MWS - OPTION TO SKIP BOUNDING BOX AND TITLES
C 07 NOV 01 - JAB - COORDS: ADD DISPLACEMENT OF SYMBOLIC,3ATOMS PLANE.
C 11 JUL 98 - TLW - AOGRID: CORRECT F,G NORMALIZATIONS
C 11 DEC 96 - MWS - BASIS: PREVENT USE OF STO-S HIGHER THAN S,P
C 28 JUL 95 - VAG - ALLOW FOR F AND G FUNCTIONS
C 11 OCT 93 - HS  - PLOT ORBITALS IN ANY DESIRED ORDER
C 26 APR 93 - MWS - DELETE PANSOPHICS VERSION
C 25 FEB 93 - MWS - ALLOW MORE BONDS
C 16 JUN 92 - MWS - MAKE SURE THIS PROGRAM RUNS SERIALLY
C 12 MAR 92 - MWS - BASIS: ALLOW 5D CALCULATION
C 15 APR 92 - JHJ - PLOT SLATER TYPE ORBITALS (MOPAC ORBITALS)
C  7 JAN 92 - MWS - ADD POSTSCRIPT VERSION
C  2 NOV 90 - STE - FIX INITIALIZATION BUG IN COORDS
C 20 MAR 90 - MWS - X-WINDOWS VERSION
C 14 JUN 90 - MWS - INCREASE DIMENSIONS OF ARRAYS.
C  5 JUL 88 - MWS - MAKE FIFTY=50, INSTEAD OF 5 IN PSI,
C                   OUTPUT EACH HARDCOPY PLOT TO SEPARATE FILE.
C 25 MAR 87 - MWS - TOTAL RESTRUCTURING.  EASY INPUT, FORTRAN 77,
C                   SHELLS IMPLEMENTED, PORTED TO VAX/VMS
C*PROGRAM PLTORB  *DECK PLTORB
      PROGRAM PLTORB
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C          change program sizes here, if these are not big enough.
C          see similar dimensions in -DENDIF-
      PARAMETER (MESH=101, MXAOS=2048, MXMOS=512, MXATOM=500,
     *           MXBOND=1000, MXSHEL=30, MXGAUS=30)
C
      REAL*4 R4SIZE
C
      CHARACTER*4  ATOM(MXATOM)
      CHARACTER*8  PLANE
      CHARACTER*24 BIRTH
      CHARACTER*40 LAB1,LAB2
      CHARACTER*80 FMT
C
      LOGICAL PRTGRD,PLTING,ANGS,CHECK,FIVED,SEVNF,NINEG,
     *        GAUSN,HONDO,SLATER,BOX
      LOGICAL PATNCE
      LOGICAL GOPARR,DSKWRK,MASWRK
C
*XW   INTEGER WNAME(3)
*PS   INTEGER WNAME(3)
C
      DIMENSION GRID(MESH,MESH),IBOND(MXBOND),JBOND(MXBOND),
     *          XC(MXATOM),YC(MXATOM),ZC(MXATOM),XX(MXATOM),
     *          YY(MXATOM),T(3,3),XO(3),XIMAX(2),XIMIN(2),
     *          VECS(MXAOS,MXMOS),NPLT(MXMOS),WORK(MESH,MESH,3,28),
     *          ITYPE(MXSHEL,MXATOM),NCONT(MXSHEL,MXATOM),
     *          NGAUS(MXSHEL,MXATOM),NSHEL(MXATOM),
     *          COEF(MXGAUS,MXGAUS,MXSHEL),ZETA(MXGAUS,MXSHEL),
     *          IPQN(MXATOM)
C
      COMMON /PAR   / ME,MASTER,NPROC,IBTYP,IPTIM,GOPARR,DSKWRK,MASWRK
C
      PARAMETER (ZERO=0.0D+00, TWO=2.0D+00,
     *           PI=3.14159 26535 89793D+00)
C
*XW    CHARACTER*4 KEYWRD
*XW    DATA WNAME/4HPLTO,4HRB  ,0/
*PS    DATA WNAME/4HPLTO,4HRB  ,0/
C
C     THIS PROGRAM DRAWS CONTOUR PLOTS OF MOLECULAR ORBITALS
C     EXPANDED IN A BASIS OF CARTESIAN S,P,D,F OR G GAUSSIANS,
C     OR A BASIS OF S OR P SLATER TYPE ORBITALS.
C
C     THIS PROGRAM DERIVES FROM THE PROGRAM 'CONTOUR5', FROM
C     THE GROUP OF PROFESSOR KLAUS RUEDENBERG AT IOWA STATE
C     UNIVERSITY IN AMES, IOWA.  MARY GILBERT, DAVE FELLER, AND
C     MIKE SCHMIDT OF ISU ARE RESPONSIBLE FOR AN EARLY (1982)
C     VERSION OF THIS PROGRAM, ALSO NAMED 'PLTORB'.
C
C     THIS VERSION IS DUE TO MIKE SCHMIDT, DEPARTMENT OF CHEMISTRY,
C     NORTH DAKOTA STATE UNIVERSITY, FARGO, N.DAK. 58105.
C     THIS VERSION FEATURES (ALMOST) EASY, KEYWORD DRIVEN INPUT,
C     THE ABILITY TO INPUT SHELLS OF BASIS FUNCTIONS, THE ABILITY
C     TO PLOT MO'S EXPANDED IN A 5D BASIS, AND THE READING OF ALL
C     INPUT BEFORE ANY SERIOUS COMPUTATION BEGINS.  MARCH 1987.
C
C           THIS PROGRAM RUNS IN SEQUENTIAL MODE
C
      ME = 0
      MASTER = 0
      NPROC = 1
      MASWRK = ME.EQ.MASTER
      DSKWRK = .FALSE.
C
C           DEFINE FILES USED, OPEN CARD INPUT AND PRINT OUTPUT
C
C     IINP   = CARD INPUT
C     IOUT   = PRINT OUTPUT (to be sent to a disk file)
C     IVEC   = INPUT FORMATTED MO COEFFICIENTS
C     IR     = interactive input (used only by X-windows option)
C     IW     = OUTPUT shown on user's screen (very little)
C     IOPRIM = TEMP STORAGE OF GAUSSIAN PRIMITIVE AMPLITUDE GRIDS
C     IOCO   = TEMP STORAGE OF CONTRACTED ORBITAL AMPLITUDE GRIDS
C     IOMO   = TEMP STORAGE OF THE BASIS SET, ON PROGRAM EXIT THE
C              AMPLITUDE GRIDS FOR THE MOS FOR PROGRAM DENDIF
C
      IINP   = 1
      IOUT   = 2
      IVEC   = 4
      IW     = 6
      IOPRIM = 8
      IOCO   = 9
      IOMO   = 10
C
      CALL OPNSEQ(  IINP,'PLTORB',    'OLD', .TRUE., .TRUE.)
      CALL OPNSEQ(  IOUT,'PLTLOG','UNKNOWN',.FALSE., .TRUE.)
      CALL OPNSEQ(IOPRIM,'PRGRID','UNKNOWN',.FALSE.,.FALSE.)
      CALL OPNSEQ(  IOCO,'COGRID','UNKNOWN',.FALSE.,.FALSE.)
      CALL OPNSEQ(  IOMO,'MOGRID','UNKNOWN',.FALSE.,.FALSE.)
C
      CALL OPNCRD(IINP,IOUT)
      WRITE(IOUT,900)
C
C     THE NEXT VAX/VMS SPECIFIC CODE DETERMINES HARD OR SOFT COPY
C     SOFT COPY (TERMINAL) OUTPUT NEEDS TO ERASE THE SCREEN IN
C     BETWEEN PLOTS.  HARD COPY SHOULD OPEN AND CLOSE THE PLOT
C     OUTPUT FILE, SO EACH PLOT IS IN A SEPARATE VERSION NUMBER.
C     GRPHTYPE SHOULD BE 'SOFT' OR 'HARD' ONLY.
C
C           READ KEYWORD OPTIONS
C
      CALL OPTPLT(IOUT,CUTOFF,DELTA,SIZE,KOLOR,FMT,SLATER,
     *            CHECK,PLANE,PRTGRD,PLTING,ANGS,FIVED,
     *            SEVNF,NINEG,GAUSN,HONDO,BOX,
     *            NATOMS,NBONDS,NAOS,NMOS,NPLOTS,IDERIV,IPLOTD,
     *            MXATOM,MXBOND,MXAOS,MXMOS)
C
C           READ ATOMIC,PLOTTING COORDINATES
C
      CALL COORDS(IOUT,NATOMS,NBONDS,XC,YC,ZC,ATOM,T,XO,
     *            XIMIN,XIMAX,IBOND,JBOND,IPQN,SLATER,
     *            PLANE,ANGS)
C
C           READ THE MO COEFFICIENTS
C
      CALL GTVECS(IVEC,IOUT,VECS,NAOS,NMOS,FMT,NPLT,NPLOTS)
C
C           READ BASIS SET INFORMATION
C
      CALL BASIS(IOUT,IOMO,NATOMS,MXSHEL,MXGAUS,MXATOM,ITYPE,
     *           NSHEL,NGAUS,NCONT,ZETA,COEF,NAOS,ATOM,FIVED,
     *           SEVNF,NINEG,SLATER)
C
C           PRINT OUT THE INPUT DATA
C
      CALL PRINT(IOUT,IOMO,NATOMS,NAOS,NMOS,NBONDS,NPLOTS,
     *           KOLOR,DELTA,CUTOFF,SIZE,
     *           PLANE,PRTGRD,PLTING,ANGS,CHECK,FIVED,
     *           SEVNF,NINEG,GAUSN,HONDO,SLATER,
     *           XC,YC,ZC,ATOM,T,XO,XIMIN,XIMAX,IBOND,JBOND,
     *           NSHEL,ITYPE,NGAUS,NCONT,ZETA,COEF,
     *           MXSHEL,MXGAUS,NPLT,VECS,FMT)
      IF(CHECK) GO TO 700
C
C           IF RUNNING INTERACTIVELY, EXHORT PATIENCE.
C
      PATNCE = .FALSE.
*XW   PATNCE = .TRUE.
      IF(PATNCE) WRITE(IW,800)
  800 FORMAT(1X,'PLTORB IS NOW COMPUTING THE GRIDS OVER THE GAUSSIAN'/
     *    1X,'PRIMITIVES, THE ATOMIC BASIS FUNCTIONS, AND FINALLY'/
     *    1X,'THE MOLECULAR ORBITALS.  THIS OFTEN TAKES A LOT OF'/
     *    1X,'CPU TIME, DURING WHICH NOTHING HAPPENS ON YOUR SCREEN.'/
     *    1X,'PLEASE DO NOTHING, IN PARTICULAR DO NOT HIT <RETURN>.'//
     *    1X,'EVENTUALLY, WHEN THE MO PLOTS BEGIN TO APPEAR, EACH'/
     *    1X,'WILL STAY ON THE SCREEN INDEFINITELY.  TO CLEAR EACH'/
     *    1X,'MO PLOT TO SEE THE NEXT ONE, HIT <RETURN>.')
C
C           COMPUTE BASIS SET AMPLITUDE GRIDS
C
      CALL AOGRID(IOUT,IOPRIM,IOCO,IOMO,MESH,NATOMS,
     *            MXSHEL,MXGAUS,IDERIV,
     *            T,XO,XIMIN,XIMAX,XC,YC,ZC,
     *            IPQN,NSHEL,NGAUS,NCONT,ZETA,COEF,ITYPE,
     *            GRID,WORK,PRTGRD,FIVED,SEVNF,NINEG,
     *            GAUSN,HONDO,SLATER,ATOM)
      REWIND IOPRIM
C
C           BEGIN WRITING THE MOLECULAR GRID FILE
C
      CALL OPNDNS(IOUT,IOMO,ATOM,XC,YC,ZC,IBOND,JBOND,T,XO,
     *            XIMIN,XIMAX,NATOMS,NAOS,NMOS,IDERIV,NPLOTS,
     *            NBONDS,MXATOM,MXBOND)
C
C           SCALE THE PLOT.
C           PLOTTING AREA IS 13.3X10 INCHES, I.E. 640X480 PIXELS.
C           1.5 INCHES OF THE X DIRECTION GOES INTO TITLING.
C
      XMX = 11.8D+00
      YMX = 10.0D+00
      SCAL1  = XMX/(XIMAX(1)-XIMIN(1))
      SCAL2  = YMX/(XIMAX(2)-XIMIN(2))
      SCALE = MIN(SCAL1,SCAL2)
      WIDTH  = SCALE*(XIMAX(1)-XIMIN(1))
      HEIGHT = SCALE*(XIMAX(2)-XIMIN(2))
      THETA  = ZERO
      PHI    = PI/TWO
C
C     ----- OPEN THE CALCOMP PLOTTING SYSTEM -----
C
C               XWINDOWS BOUNDARIES 1/2 INCH WIDER THAN 13.3 X 10.0
C               ORIGIN IS RAISED 1/4 INCH FROM LOWER LEFT CORNER.
C
      R4SIZE = REAL(SIZE)
*XW   IF(PLTING) THEN
*XW      CALL OPENCC(13.8,10.5,1,WNAME)
*XW      CALL PLOT(0.25,0.25,-3)
*XW      CALL FACTOR(R4SIZE)
*XW      CALL NEWPEN(KOLOR)
*XW      CALL OPNCRD(IR, 0)
*XW   END IF
C
C               POSTSCRIPT WILL BE BLACK AND WHITE
C
*PS   IF(PLTING) THEN
*PS      CALL OPENPS(13.8,10.5,1,WNAME)
*PS      CALL PLOT(0.25,0.25,-3)
*PS      CALL FACTOR(R4SIZE)
*PS   END IF
C
      ITTL=0
      IPLOT = 1
      JPLOT = 0
      GO TO 410
  400 CONTINUE
      ITTL=1
C
C           LOOP OVER PLOTTING EACH MOLECULAR ORBITAL
C
  410 CONTINUE
         IF(IPLOT.GT.NPLOTS) GO TO 600
C
C              OBTAIN TITLE FOR THIS PLOT
C
         IF(ITTL.EQ.0) THEN
            READ (IINP,890,END=400) LAB1,LAB2
         ELSE
            WRITE(LAB1,'(A11,I4,25X)') 'PLOT NUMBER',IPLOT
            WRITE(LAB2,'(40X)')
         END IF
C
C              COMPUTE GRID OVER THIS MOLECULAR ORBITAL
C
         IORB = NPLT(IPLOT)
         CALL MOGRID(IOUT,IOCO,IOMO,MESH,NAOS,NMOS,IDERIV,IPLOTD,IORB,
     *               LAB1,LAB2,GRID,WORK(1,1,1,1),WORK(1,1,1,2),
     *               VECS,PRTGRD,GMAX,GMIN,T,XO,XIMIN,XIMAX)
C
C              DETERMINE NUMBER OF CONTOURS
C
         GGMAX = MIN(GMAX, CUTOFF)
         GGMIN = MAX(GMIN,-CUTOFF)
         NPCON = INT( GGMAX/DELTA)
         NNCON = INT(-GGMIN/DELTA)
         IF(GGMAX.LE.ZERO) NPCON=0
         IF(GGMIN.GE.ZERO) NNCON=0
         NZCON=0
         IF(GMIN*GMAX.LT.ZERO) NZCON=1
         IF(ABS(GMIN).LT.DELTA/5.0D+00) NZCON=1
         IF(ABS(GMAX).LT.DELTA/5.0D+00) NZCON=1
         CONMIN = -DELTA*NNCON
         CONMAX =  DELTA*NPCON
         NCCN = NNCON + NPCON + NZCON
         IF(NCCN.LE.1) THEN
            WRITE(IOUT,980) IPLOT,GMAX
            WRITE(IW  ,980) IPLOT,GMAX
            IPLOT = IPLOT+1
            GO TO 410
         ELSE
            JPLOT = JPLOT+1
         END IF
C
         CALL DATEOF(BIRTH)
         WRITE(IOUT,910) IPLOT,BIRTH
         WRITE(IOUT,920) LAB1,LAB2
         WRITE(IOUT,930) GMIN,GMAX,CONMIN,CONMAX
         WRITE(IOUT,940) NCCN,DELTA
C
C              DRAW CONTOUR PLOT
C
         IF(PLTING) THEN
C
*PS         IF(JPLOT.GT.1) CALL NEXTPS
*PS         IF(JPLOT.GT.1) CALL PLOT(0.25,0.25,-3)
C
            CALL BORDER(BOX,WIDTH,HEIGHT,SCALE,XO,T,XIMIN,
     *                  IBOND,JBOND,NBONDS,XX,YY,XC,YC,ZC,
     *                  NATOMS,LAB1,LAB2,'PLTORB',BIRTH)
C
            CALL KONTRS(GRID,MESH,MESH,NNCON,NPCON,NZCON,
     *                  DELTA,ZERO,0,ZERO,HEIGHT,WIDTH,
     *                  THETA,PHI)
C
*XW         CALL FLSHCC
*XW         WRITE(IW,6) NPLOTS
C
*XW         CALL RDCARD('PLTORB  ',IEOF)
*XW         IF(IEOF.NE.0) GO TO 600
*XW         IERR=30
*XW         INEXT = IFIND('IPLOT   ',IERR)
*XW         IF(IERR.EQ.0) THEN
*XW            IF(INEXT.LE.0) THEN
*XW               IPLOT = IPLOT+1
*XW            ELSE
*XW               IPLOT=INEXT
*XW            END IF
*XW         ELSE
*XW            CALL REREAD
*XW            CALL GSTRNG(KEYWRD,-4)
*XW            IF(KEYWRD .EQ. 'QUIT') GO TO 600
*XW         END IF
C
*XW         CALL XWINSZ(IDUM1, IDUM2)
*XW         CALL ERASE
*XW         CALL PLOT(0.25,0.25,-3)
C
*PS         IPLOT = IPLOT+1
*PS         CALL EJCTPS
         END IF
      GO TO 410
C
C     ----- CLOSE CALCOMP PLOTTING SYSTEM -----
C
  600 CONTINUE
*XW   IF(PLTING) CALL CLOSCC
*PS   IF(PLTING) CALL CLOSPS
      REWIND IOCO
  700 CONTINUE
      REWIND IOMO
      WRITE(IOUT,950)
      STOP
C
  890 FORMAT(A40,A40)
  900 FORMAT(1X,'PLTORB, A CARTESIAN GAUSSIAN MO PLOTTING PROGRAM')
  910 FORMAT(//1X,'PLOT',I4,' DRAWN AT ',A24)
  920 FORMAT(1X,'PLOT TITLE>',A40/
     *       1X,'          >',A40)
  930 FORMAT(1X,'ORBITAL AMPLITUDE MINIMUM,MAXIMUM=',2F12.6/
     *       1X,'     CONTOUR LINE MINIMUM,MAXIMUM=',2F12.6)
  940 FORMAT(1X,I5,' CONTOURS DRAWN AT INCREMENTS OF',F10.5,
     *           ' BOHR**(-3/2)')
  950 FORMAT(//1X,'EXITING PROGRAM PLTORB NORMALLY')
  980 FORMAT(//1X,'***** PLOT',I4,' HAS CONSTANT AMPLITUDE=',F15.8,
     *            ' NO PLOT WAS GENERATED!')
*XW 6 FORMAT(/1X,'HIT <RETURN> FOR NEXT CONSECUTIVE MO PLOT,'/
*XW  *       1X,'OR CHOOSE THE NUMBER OF NEXT MO (RANGE= 1 TO',I4,'),'/
*XW  *       1X,'OR ELSE "QUIT" OR "DRAW" (TO REDRAW CURRENT MO)')
      END
C*PROGRAM PLTORB  *DECK OPTPLT
      SUBROUTINE OPTPLT(IOUT,CUTOFF,DELTA,SIZE,KOLOR,FMT,SLATER,
     *                  CHECK,PLANE,PRTGRD,PLTING,ANGS,FIVED,SEVNF,
     *                  NINEG,GAUSN,HONDO,BOX,
     *                  NATOMS,NBONDS,NAOS,NMOS,NPLOTS,IDERIV,IPLOTD,
     *                  MXATOM,MXBOND,MXAOS,MXMOS)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      CHARACTER*4  KEYWRD
      CHARACTER*8  PLANE
      CHARACTER*80 FMT
      LOGICAL PRTGRD,PLTING,ANGS,CHECK,FIVED,SEVNF,NINEG,
     *        GAUSN,HONDO,SLATER,BOX
C
C     ----- READ RUNTIME OPTIONS -----
C
      CUTOFF = 1.02D+00
      DELTA  = 0.05D+00
      SIZE   = 1.00D+00
      PLANE  = 'SYMBOLIC'
      PRTGRD = .FALSE.
      PLTING = .TRUE.
      ANGS   = .FALSE.
      CHECK  = .FALSE.
      FIVED  = .FALSE.
      SEVNF  = .FALSE.
      NINEG  = .FALSE.
      GAUSN  = .FALSE.
      HONDO  = .FALSE.
      SLATER = .FALSE.
      BOX    = .TRUE.
      KOLOR  = 1
      NATOMS = 0
      NBONDS = 0
      NAOS   = 0
      NMOS   = 0
      NPLOTS = 0
      IDERIV = 0
C
C        READ A FRESH OPTION CARD
C
      IERR=0
      IEOF=0
  100 CONTINUE
      CALL RDCARD('OPTPLT  ',IEOF)
      IF(IEOF.NE.0) GO TO 800
C
C        SCAN OFF A KEYWORD OPTION
C
  110 CONTINUE
      CALL GSTRNG(KEYWRD,-4)
      IF(KEYWRD.EQ.'    ') GO TO 100
C
      IF(KEYWRD.EQ.'FORM') THEN
         CALL GSTRNG(KEYWRD,-4)
         IF(KEYWRD.EQ.'FREE') THEN
            FMT(1:4)='FREE'
            GO TO 500
         ELSE
            CALL REREAD
            CALL GSTRNG(FMT,80)
            CALL UPRCAS(FMT,80)
            GO TO 500
         END IF
      END IF
C
      IF(KEYWRD.EQ.'NATO') THEN
         NATOMS=IFIND('NATOMS  ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'NAOS') THEN
         NAOS=IFIND('NAOS    ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'NMOS') THEN
         NMOS=IFIND('NMOS    ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'NBON') THEN
         NBONDS=IFIND('NBONDS  ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'NPLO') THEN
         NPLOTS=IFIND('NPLOTS  ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'5D  ') THEN
         FIVED=.TRUE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'7F  ') THEN
         SEVNF=.TRUE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'9G  ') THEN
         NINEG=.TRUE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'GAUS') THEN
         GAUSN=.TRUE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'HOND') THEN
         HONDO=.TRUE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'CHEC') THEN
         CHECK=.TRUE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'DELT') THEN
         DELTA = RFIND('DELTA   ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'SIZE') THEN
         SIZE  = RFIND('SIZE    ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'CUTO') THEN
         CUTOFF = RFIND('CUTOFF  ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'PLAN') THEN
         CALL GSTRNG(PLANE,-8)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'GRID') THEN
         PRTGRD = .TRUE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'NOPL') THEN
         PLTING=.FALSE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'NOBO') THEN
         BOX=.FALSE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'ANGS') THEN
         ANGS=.TRUE.
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'KOLO') THEN
         KOLOR=IFIND('KOLOR   ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'SLAT') THEN
         SLATER = .TRUE.
         GO TO 110
      END IF
C        kinetic energy is integral of 1/2 norm of amplitude's gradient
      IF(KEYWRD.EQ.'KEI ') THEN
         IF(IDERIV.GT.0) CALL DMPINP(IOUT)
         IDERIV=1
         IPLOTD=4
         GO TO 110
      END IF
C        we also allow for computing individual gradient components, too
      IF(KEYWRD.EQ.'D/DX') THEN
         IF(IDERIV.GT.0) CALL DMPINP(IOUT)
         IDERIV=1
         IPLOTD=1
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'D/DY') THEN
         IF(IDERIV.GT.0) CALL DMPINP(IOUT)
         IDERIV=1
         IPLOTD=2
         GO TO 110
      END IF
      IF(KEYWRD.EQ.'D/DZ') THEN
         IF(IDERIV.GT.0) CALL DMPINP(IOUT)
         IDERIV=1
         IPLOTD=3
         GO TO 110
      END IF
C
C        IF YOU GET HERE, THERE WAS AN UNRECOGNIZED KEYWORD.
C
      WRITE(IOUT,960) KEYWRD
      CALL DMPINP(IOUT)
      STOP
C
C        ERROR CHECKING
C
  500 CONTINUE
      NERR=0
      IF(NATOMS.LE.0  .OR.  NATOMS.GT.MXATOM) THEN
         WRITE(IOUT,950) NATOMS,MXATOM
         NERR=NERR+1
      END IF
      IF(NPLOTS.LE.0  .OR.  NPLOTS.GT.MXMOS) THEN
         WRITE(IOUT,951) NPLOTS,MXMOS
         NERR=NERR+1
      END IF
      IF(NAOS.LE.0  .OR.  NAOS.GT.MXAOS) THEN
         WRITE(IOUT,952) NAOS,MXAOS
         NERR=NERR+1
      END IF
      IF(NMOS.LE.0  .OR.  NMOS.GT.MXMOS) THEN
         WRITE(IOUT,953) NMOS,MXMOS
         NERR=NERR+1
      END IF
      IF(NBONDS.LT.0  .OR.  NBONDS.GT.MXBOND) THEN
         WRITE(IOUT,954) NBONDS,MXBOND
         NERR=NERR+1
      END IF
      IF(SLATER  .AND.  IDERIV.GT.0) THEN
         WRITE(IOUT,955)
         NERR=NERR+1
      END IF
C
      IF(NERR.GT.0) CALL DMPINP(IOUT)
      RETURN
C
C        SOME SORT OF INPUT BOOBOO
C
  800 CONTINUE
      WRITE(IOUT,940)
      CALL ABT(IOUT)
      STOP
C
  940 FORMAT(1X,'***** END OF INPUT FILE IN OPTPLT, EXECUTION KILLED')
  950 FORMAT(1X,'***** ILLEGAL NATOMS=',I4,' MXATOM=',I4)
  951 FORMAT(1X,'***** ILLEGAL NPLOTS=',I4,' MXPLOT=',I4)
  952 FORMAT(1X,'***** ILLEGAL NAOS  =',I4,' MXAOS =',I4)
  953 FORMAT(1X,'***** ILLEGAL NMOS  =',I4,' MXMOS =',I4)
  954 FORMAT(1X,'***** ILLEGAL NBONDS=',I4,' MXBOND=',I4)
  955 FORMAT(1X,'***** PLOTTING KINETIC ENERGY INTEGRAND IS',
     *          ' NOT CODED FOR STO BASIS SETS')
  960 FORMAT(1X,'***** UNRECOGNIZED KEYWORD OPTION=',A4)
      END
C*PROGRAM PLTORB  *DECK COORDS
      SUBROUTINE COORDS(IOUT,NATOMS,NBONDS,XC,YC,ZC,ATOM,T,XO,
     *                  XIMIN,XIMAX,IBOND,JBOND,IPQN,SLATER,
     *                  PLANE,ANGS)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL ANGS,SLATER
      DIMENSION XC(NATOMS),YC(NATOMS),ZC(NATOMS),
     *          IBOND(NBONDS),JBOND(NBONDS),
     *          T(3,3),XO(3),XIMIN(2),XIMAX(2),IPQN(NATOMS)
      DIMENSION IATPQ(104)
      CHARACTER*4 ATOM(NATOMS)
      CHARACTER*4 ATMLAB(104)
      CHARACTER*4 STRING
      CHARACTER*8 PLANE
      PARAMETER (TOANGS=0.52917715D+00, ZERO=0.0D+00, ONE=1.0D+00,
     *           SMALL=1.0D-04)
C
      DATA ATMLAB/'H   ','HE  ','LI  ','BE  ','B   ','C   ',
     *            'N   ','O   ','F   ','NE  ','NA  ','MG  ',
     *            'AL  ','SI  ','P   ','S   ','CL  ','AR  ',
     *            'K   ','CA  ','SC  ','TI  ','V   ','CR  ',
     *            'MN  ','FE  ','CO  ','NI  ','CU  ','ZN  ',
     *            'GA  ','GE  ','AS  ','SE  ','BR  ','KR  ',
     *            'RB  ','SR  ','Y   ','ZR  ','NB  ','MO  ',
     *            'TC  ','RU  ','RH  ','PD  ','AG  ','CD  ',
     *            'IN  ','SN  ','SB  ','TE  ','I   ','XE  ',
     *            'CS  ','BA  ','LA  ','CE  ','PR  ','ND  ',
     *            'PM  ','SM  ','EU  ','GD  ','TB  ','DY  ',
     *            'HO  ','ER  ','TM  ','YB  ','LU  ','HF  ',
     *            'TA  ','W   ','RE  ','OS  ','IR  ','PT  ',
     *            'AU  ','HG  ','TL  ','PB  ','BI  ','PO  ',
     *            'AT  ','RN  ','FR  ','RA  ','AC  ','TH  ',
     *            'PA  ','U   ','NP  ','PU  ','AM  ','CM  ',
     *            'BK  ','CF  ','ES  ','FM  ','MD  ','NO  ',
     *            'LR  ','RF  '/
C
      DATA IATPQ/2*1,8*2,8*3,18*4,18*5,32*6,18*7/
C
C     ----- READ COORDINATE INFORMATION -----
C     NUCLEAR COORDINATES, MOLECULAR SKELETON, PLOTTING PLANE
C
      IEOF=0
      IERR=0
C
C           READ COORDINATES OF EACH ATOM
C
      UNITS = ONE
      IF(ANGS) UNITS = ONE/TOANGS
      DO 100 K=1,NATOMS
         CALL RDCARD('COORDS 1',IEOF)
         IF(IEOF.NE.0) GO TO 800
         CALL GSTRNG(ATOM(K),-4)
         XC(K) = UNITS * RFIND('X COORD ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         YC(K) = UNITS * RFIND('Y COORD ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         ZC(K) = UNITS * RFIND('Z COORD ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
C
C     ----- TRANSLATE CHEMICAL SYMBOL INTO NUCLEAR CHARGE -----
C
         IF(SLATER) THEN
            DO J = 1,104
               IF(ATOM(K).EQ.ATMLAB(J)) IPQN(K) = IATPQ(J)
            ENDDO
         END IF
  100 CONTINUE
C
C           READ THE PLOTTING PLANE
C
      IF(PLANE.NE.'SYMBOLIC'  .AND.  PLANE.NE.'3ATOMS  '  .AND.
     *                               PLANE.NE.'SPECIFIC') THEN
         WRITE(IOUT,*) 'ILLEGAL PLOTTING PLANE CHOSEN!'
         CALL ABT(IOUT)
      END IF
C
C           READ CHARACTER STRING TO DEFINE PLOTTING PLANE
C
      IF(PLANE.EQ.'SYMBOLIC') THEN
         CALL RDCARD('COORDS 2',IEOF)
         IF(IEOF.NE.0) GO TO 800
         CALL GSTRNG(STRING,-4)
C
         DO 210 J=1,3
            DO 200 I=1,3
               T(I,J)=ZERO
  200       CONTINUE
  210    CONTINUE
C
         IF(STRING.EQ.'YZ  ') THEN
            T(2,1) = ONE
            T(3,2) = ONE
            T(1,3) = ONE
            GO TO 600
         END IF
         IF(STRING.EQ.'YX  ') THEN
            T(2,1) = ONE
            T(1,2) = ONE
            T(3,3) = ONE
            GO TO 600
         END IF
         IF(STRING.EQ.'ZX  ') THEN
            T(3,1) = ONE
            T(1,2) = ONE
            T(2,3) = ONE
            GO TO 600
         END IF
         IF(STRING.EQ.'ZY  ') THEN
            T(3,1) = ONE
            T(2,2) = ONE
            T(1,3) = ONE
            GO TO 600
         END IF
         IF(STRING.EQ.'XY  ') THEN
            T(1,1) = ONE
            T(2,2) = ONE
            T(3,3) = ONE
            GO TO 600
         END IF
         IF(STRING.EQ.'XZ  ') THEN
            T(1,1) = ONE
            T(3,2) = ONE
            T(2,3) = ONE
            GO TO 600
         END IF
C
         WRITE(IOUT,910) STRING
         CALL ABT(IOUT)
         STOP
      END IF
C
C           READ 3 ATOMS TO DEFINE THE PLOTTING PLANE
C
      IF(PLANE.EQ.'3ATOMS  ') THEN
         CALL RDCARD('COORDS 3',IEOF)
         IF(IEOF.NE.0) GO TO 800
         IAT1 = IFIND('1ST ATOM',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         IAT2 = IFIND('2ND ATOM',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         IAT3 = IFIND('3RD ATOM',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         IF(IAT1.LE.0  .OR.  IAT1.GT.NATOMS  .OR.
     *      IAT2.LE.0  .OR.  IAT2.GT.NATOMS  .OR.
     *      IAT3.LE.0  .OR.  IAT3.GT.NATOMS) THEN
            WRITE(IOUT,*) 'ILLEGAL ATOM DEFINING PLANE:',IAT1,IAT2,IAT3
            CALL DMPINP(IOUT)
         END IF
C
         T(1,1) = XC(IAT2) - XC(IAT1)
         T(2,1) = YC(IAT2) - YC(IAT1)
         T(3,1) = ZC(IAT2) - ZC(IAT1)
         T1NORM = T(1,1)*T(1,1) + T(2,1)*T(2,1) + T(3,1)*T(3,1)
         T1NORM = ONE/SQRT(T1NORM)
C
         T(1,2) = XC(IAT3) - XC(IAT1)
         T(2,2) = YC(IAT3) - YC(IAT1)
         T(3,2) = ZC(IAT3) - ZC(IAT1)
         T2NORM = T(1,2)*T(1,2) + T(2,2)*T(2,2) + T(3,2)*T(3,2)
         T2NORM = ONE/SQRT(T2NORM)
C
         DO 310 I=1,3
            T(I,1) = T1NORM*T(I,1)
            T(I,2) = T2NORM*T(I,2)
  310    CONTINUE
         DOTPRD = T(1,1)*T(1,2) + T(2,1)*T(2,2) + T(3,1)*T(3,2)
         T(1,2) = T(1,2) - DOTPRD*T(1,1)
         T(2,2) = T(2,2) - DOTPRD*T(2,1)
         T(3,2) = T(3,2) - DOTPRD*T(3,1)
C
         T(1,3) = T(2,1)*T(3,2) - T(3,1)*T(2,2)
         T(2,3) = T(3,1)*T(1,2) - T(1,1)*T(3,2)
         T(3,3) = T(1,1)*T(2,2) - T(2,1)*T(1,2)
      END IF
C
C           READ GENERAL ORIENTATION OF PLOTTING PLANE
C
      IF(PLANE.EQ.'SPECIFIC') THEN
         CALL RDCARD('COORDS 4',IEOF)
         IF(IEOF.NE.0) GO TO 800
         DO 330 J=1,3
            DO 320 I=1,3
               T(I,J) = RFIND('P ORIENT',IERR)
               IF(IERR.NE.0) CALL DMPINP(IOUT)
  320       CONTINUE
  330    CONTINUE
      END IF
C
C           NORMALIZE THE COLUMNS OF THE PLOTTING PLANE ROTATION
C
      DO 580 J=1,3
         VECSQR = ZERO
         DO 560 I=1,3
            VECSQR = VECSQR + T(I,J)*T(I,J)
  560    CONTINUE
         VECSQR = SQRT(VECSQR)
         DO 570 I=1,3
            T(I,J) = T(I,J) / VECSQR
  570    CONTINUE
  580 CONTINUE
C
C           CHECK THAT AN ORTHOGONAL ROTATION MATRIX WAS INPUT
C
      D13=ZERO
      D23=ZERO
      D12=ZERO
      DO 590 I=1,3
         D12 = D12 + T(I,1)*T(I,2)
         D13 = D13 + T(I,1)*T(I,3)
         D23 = D23 + T(I,2)*T(I,3)
  590 CONTINUE
      IF(ABS(D12).GT.SMALL  .OR.
     *   ABS(D13).GT.SMALL  .OR.
     *   ABS(D23).GT.SMALL) THEN
         WRITE(IOUT,920) D12,D13,D23
         CALL DMPINP(IOUT)
         STOP
      END IF
C
C           GET TRANSLATION FROM FUNDAMENTAL TO PLOTTING AXIS ORIGINS
C
  600 CONTINUE
C
      IF(PLANE.EQ.'SYMBOLIC') THEN
         DO 610 I=1,3
            XO(I) = ZERO
  610    CONTINUE
      END IF
C
      IF(PLANE.EQ.'3ATOMS  ') THEN
         XO(1) = XC(IAT1)
         XO(2) = YC(IAT1)
         XO(3) = ZC(IAT1)
      END IF
C
      IF(PLANE.EQ.'SPECIFIC') THEN
         CALL RDCARD('COORDS 5',IEOF)
         IF(IEOF.NE.0) GO TO 800
         DO 620 I=1,3
            XO(I) = UNITS * RFIND('VECTR OP',IERR)
            IF(IERR.NE.0) CALL DMPINP(IOUT)
  620    CONTINUE
      END IF
C
      IF (PLANE.EQ.'SYMBOLIC' .OR. PLANE.EQ.'3ATOMS') THEN
         CALL RDCARD('COORDS 6',IEOF)
         IF(IEOF.NE.0) GO TO 800
         RDIST = UNITS * RFIND('P DISPLC',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         XR = T(1,3)*RDIST
         YR = T(2,3)*RDIST
         ZR = T(3,3)*RDIST
         XO(1) = XO(1) + XR
         XO(2) = XO(2) + YR
         XO(3) = XO(3) + ZR
      END IF
C
C           READ THE BOUNDARIES OF THE PLOTTING PLANE
C
      CALL RDCARD('COORDS 7',IEOF)
      IF(IEOF.NE.0) GO TO 800
      XIMIN(1) = UNITS * RFIND('  PX MIN',IERR)
      IF(IERR.NE.0) CALL DMPINP(IOUT)
      XIMAX(1) = UNITS * RFIND('  PX MAX',IERR)
      IF(IERR.NE.0) CALL DMPINP(IOUT)
      XIMIN(2) = UNITS * RFIND('  PY MIN',IERR)
      IF(IERR.NE.0) CALL DMPINP(IOUT)
      XIMAX(2) = UNITS * RFIND('  PY MAX',IERR)
      IF(IERR.NE.0) CALL DMPINP(IOUT)
C
C           READ MOLECULAR SKELETON
C
      IF(NBONDS.LE.0) RETURN
      CALL RDCARD('COORDS 8',IEOF)
      IF(IEOF.NE.0) GO TO 800
      CALL GSTRNG(STRING,-4)
      IF(STRING.NE.'BOND') THEN
         WRITE(IOUT,930)
         CALL DMPINP(IOUT)
         STOP
      END IF
      DO I = 1,NBONDS
         IBOND(I) = IFIND('1ST ATOM',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         JBOND(I) = IFIND('2ND ATOM',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
      ENDDO
      RETURN
C
C           END OF INPUT FILE HIT
C
  800 CONTINUE
      WRITE(IOUT,940)
      CALL ABT(IOUT)
      STOP
C
  910 FORMAT(1X,'***** ERROR, UNRECOGNIZABLE PLOTTING PLANE= ',A4)
  920 FORMAT(1X,'***** YOUR INPUT T MATRIX IS NOT ORTHOGONAL *****'/
     *       1X,'COLUMN DOT PRODUCTS ARE D12,D13,D23='/1X,3F20.10)
  930 FORMAT(1X,'***** I WAS EXPECTING THE ''BOND'' CARD')
  940 FORMAT(1X,'***** END OF INPUT FILE IN COORDS, EXECUTION KILLED')
      END
C*PROGRAM PLTORB  *DECK GTVECS
      SUBROUTINE GTVECS(IVEC,IOUT,VECS,NAOS,NMOS,FMT,NPLT,NPLOTS)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION VECS(NAOS,NMOS),NPLT(NPLOTS)
      CHARACTER*4  KEYWRD
      CHARACTER*8  WORD
      CHARACTER*80 FMT
C
C     ----- READ IN THE MOLECULAR ORBITALS -----
C     AND DETERMINE WHICH MO-S ARE TO BE PLOTTED.
C
      IERR=0
      IEOF=0
      CALL RDCARD('GTVECS 1',IEOF)
      IF(IEOF.NE.0) GO TO 800
      CALL GSTRNG(KEYWRD,-4)
      IF(KEYWRD.NE.'PLOT') THEN
         WRITE(IOUT,920)
         CALL DMPINP(IOUT)
         STOP
      END IF
      DO 100 I=1,NPLOTS
         NPLT(I) = IFIND('MO PLOT ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         IF(NPLT(I).EQ.0  .OR.  ABS(NPLT(I)).GT.NMOS) THEN
            WRITE(IOUT,940) I,NMOS
            CALL DMPINP(IOUT)
            STOP
         END IF
  100 CONTINUE
C
      IF(FMT(1:4).EQ.'FREE') GO TO 300
C
C        READ FORMATTED MO COEFFICIENTS
C     COMMENT/HEADER CARD(S) MAY BE USED BEFORE A $VEC CARD.
C
      CALL OPNSEQ(  IVEC,'PLTVEC',    'OLD', .TRUE., .TRUE.)
      REWIND IVEC
  200 CONTINUE
      READ(IVEC,980,END=700,ERR=700) WORD
      CALL UPRCAS(WORD,8)
      IF(WORD.NE.' $VEC   ') GO TO 200
      DO 220 J=1,NMOS
         READ(IVEC,FMT,ERR=700,END=700) (VECS(I,J),I=1,NAOS)
  220 CONTINUE
      REWIND IVEC
      RETURN
C
C        READ HAND-TYPED (UGH!) FREE FORMAT MO COEFFICIENTS
C
  300 CONTINUE
      DO 320 IMO=1,NMOS
         CALL RDCARD('GTVECS 2',IEOF)
         IF(IEOF.NE.0) GO TO 700
         DO 310 IAO=1,NAOS
            VECS(IAO,IMO) = RFIND('VECTORS ',IERR)
            IF(IERR.NE.0) THEN
               WRITE(IOUT,930) IAO,IMO
               CALL DMPINP(IOUT)
               STOP
            END IF
  310    CONTINUE
  320 CONTINUE
      RETURN
C
C        ERROR OR END OF FILE ON VECTOR INPUT
C
  700 CONTINUE
      WRITE(IOUT,910)
      CALL DMPINP(IOUT)
      STOP
C
C        END OF FILE ENCOUNTERED
C
  800 CONTINUE
      WRITE(IOUT,900)
      CALL ABT(IOUT)
      STOP
C
  900 FORMAT(1X,'***** END OF INPUT FILE IN GTVECS, EXECUTION KILLED')
  910 FORMAT(1X,'***** END OF FILE, OR OTHER ERROR READING VECTORS')
  920 FORMAT(1X,'***** I WAS EXPECTING THE ''PLOTMOS'' CARD.')
  930 FORMAT(1X,'***** ERROR READING COEFFICIENT',I4,' OF MO',I4)
  940 FORMAT(1X,'***** REQUESTED MO PLOT',I4,' IS INVALID,',
     *       1X,'VALID VALUES ARE +-1 TO +-NMOS=',I4)
  980 FORMAT(A8)
      END
C*PROGRAM PLTORB  *DECK BASIS
      SUBROUTINE BASIS(IOUT,IOMO,NATOMS,MXSHEL,MXGAUS,MXATOM,ITYPE,
     *                 NSHEL,NGAUS,NCONT,ZETA,COEF,NAOS,ATOM,FIVED,
     *                 SEVNF,NINEG,SLATER)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL FIVED,SEVNF,NINEG,SLATER
      DIMENSION ITYPE(MXSHEL,MXATOM),NSHEL(MXATOM),
     *          NGAUS(MXSHEL,MXATOM),NCONT(MXSHEL,MXATOM),
     *          ZETA(MXGAUS,MXSHEL),COEF(MXGAUS,MXGAUS,MXSHEL),
     *          IDEGEN(7)
      CHARACTER*4 ATOM(NATOMS)
      CHARACTER*4 STRING
      PARAMETER (ZERO=0.0D+00)
      DATA IDEGEN/1,3,6,10,15,21,28/
C
C     ----- READ THE MOLECULAR BASIS SET -----
C
      IF(FIVED) IDEGEN(3)=5
      IERR=0
      IEOF=0
C
      IF(SEVNF) IDEGEN(4)=7
      IERR=0
      IEOF=0
C
      IF(NINEG) IDEGEN(5)=9
      IERR=0
      IEOF=0
C
C           LOOP OVER EACH ATOM
C
      NCO=0
      REWIND IOMO
      DO 500 K=1,NATOMS
C
C              READ THE NUMBER OF SHELLS ON THE K-TH ATOM
C
         CALL RDCARD('BASIS  1',IEOF)
         IF(IEOF.NE.0) GO TO 800
         CALL GSTRNG(STRING,-4)
         IF(STRING.NE.ATOM(K)) THEN
            WRITE(IOUT,960) ATOM(K)
            CALL DMPINP(IOUT)
            STOP
         END IF
         NSH = IFIND('NSHELLS ',IERR)
         IF(IERR.NE.0) CALL DMPINP(IOUT)
         IF(NSH.LT.0  .OR.  NSH.GT.MXSHEL) THEN
            WRITE(IOUT,900) NSH
            CALL DMPINP(IOUT)
            STOP
         END IF
         NSHEL(K)=NSH
C
C              READ DATA FOR EACH SHELL
C
         DO 400 I=1,NSH
            CALL RDCARD('BASIS  2',IEOF)
            IF(IEOF.NE.0) GO TO 800
            CALL GSTRNG(STRING,-4)
            ITYP=0
            IF(STRING.EQ.'S   ') ITYP=1
            IF(STRING.EQ.'P   ') ITYP=2
            IF(STRING.EQ.'D   ') ITYP=3
            IF(STRING.EQ.'F   ') ITYP=4
            IF(STRING.EQ.'G   ') ITYP=5
            IF(STRING.EQ.'H   ') ITYP=6
            IF(STRING.EQ.'I   ') ITYP=7
            IF(ITYP.EQ.0) THEN
               WRITE(IOUT,910) STRING
               CALL DMPINP(IOUT)
               STOP
            END IF
            IF(SLATER  .AND.  ITYP.GT.2) THEN
               WRITE(IOUT,915) STRING
               CALL DMPINP(IOUT)
               STOP
            END IF
            ITYPE(I,K) = ITYP
C
C                 READ NUMBER OF PRIMITIVE GAUSSIANS
C
            NG = IFIND('NGAUSS  ',IERR)
            IF(IERR.NE.0) CALL DMPINP(IOUT)
            IF(NG.LE.0  .OR.  NG.GT.MXGAUS) THEN
               WRITE(IOUT,920) NG,MXGAUS
               CALL ABT(IOUT)
               STOP
            END IF
            NGAUS(I,K) = NG
C
C                 READ NUMBER OF CONTRACTED AO-S
C
            NC = IFIND('NCONT   ',IERR)
            IF(IERR.NE.0) CALL DMPINP(IOUT)
            IF(NC.LE.0  .OR.  NC.GT.NG) THEN
               WRITE(IOUT,930) NC,NG
               CALL ABT(IOUT)
               STOP
            END IF
            NCONT(I,K) = NC
            NCO=NCO+NC*IDEGEN(ITYP)
C
C                 READ EXPONENTS AND CONTRACTION COEFFICIENTS
C
            ALP = RFIND('ALPHA   ',IERR)
            IF(IERR.NE.0) CALL DMPINP(IOUT)
            IF(ALP.EQ.ZERO) GO TO 230
C
C                 READ EVEN TEMPERED EXPONENTS
C
            BET = RFIND('BETA    ',IERR)
            IF(IERR.NE.0) CALL DMPINP(IOUT)
            ALPHA = MIN(ALP,BET)
            BETA  = MAX(ALP,BET)
            ZETA(1,I) = ALPHA*BETA
            DO KI=2,NG
               ZETA(KI,I) = ZETA(KI-1,I)*BETA
            ENDDO
            GO TO 300
C
C                 READ GENERAL EXPONENTS
C
  230       CONTINUE
            CALL RDCARD('BASIS  3',IEOF)
            IF(IEOF.NE.0) GO TO 800
            DO KI=1,NG
               ZETA(KI,I) = RFIND('ZETA    ',IERR)
               IF(IERR.NE.0) CALL DMPINP(IOUT)
            ENDDO
C
C                 READ CONTRACTION COEFFICIENTS
C
  300       CONTINUE
            DO KJ=1,NC
               CALL RDCARD('BASIS  4',IEOF)
               IF(IEOF.NE.0) GO TO 800
               DO KI=1,NG
                  COEF(KI,KJ,I) = RFIND('CON.COEF',IERR)
                  IF(IERR.NE.0) CALL DMPINP(IOUT)
               ENDDO
            ENDDO
  400    CONTINUE
         WRITE(IOMO) ZETA,COEF
  500 CONTINUE
C
      IF(NCO.NE.NAOS) THEN
         WRITE(IOUT,950) NAOS,NCO
         CALL DMPINP(IOUT)
         STOP
      END IF
      RETURN
C
C        END OF FILE ON INPUT
C
  800 CONTINUE
      WRITE(IOUT,940)
      CALL ABT(IOUT)
      STOP
C
  900 FORMAT(1X,'***** ILLEGAL NSHELL=',I4)
  910 FORMAT(1X,'***** ILLEGAL BASIS TYPE= ',A4)
  915 FORMAT(1X,'***** SLATER BASIS TYPE MUST BE S OR P, NOT',A4)
  920 FORMAT(1X,'***** ILLEGAL NUMBER OF GAUSSIANS=',I4,
     *          ' MXGAUSS=',I4)
  930 FORMAT(1X,'***** ILLEGAL NUMBER OF CONTRACTIONS=',I4,
     *          ' NGAUSS=',I4)
  940 FORMAT(1X,'***** END OF INPUT FILE IN  BASIS, EXECUTION KILLED')
  950 FORMAT(1X,'***** YOU SAID YOU WERE GOING TO INPUT',I4,' AO''S'/
     *       1X,'***** BUT YOU ACTUALLY INPUT',I4,' AO''S')
  960 FORMAT(1X,'***** I WAS EXPECTING THE BASIS SET FOR ATOM ',A4)
      END
C*PROGRAM PLTORB  *DECK PRINT
      SUBROUTINE PRINT(IOUT,IOMO,NATOMS,NAOS,NMOS,NBONDS,NPLOTS,
     *                 KOLOR,DELTA,CUTOFF,SIZE,
     *                 PLANE,PRTGRD,PLTING,ANGS,CHECK,FIVED,
     *                 SEVNF,NINEG,GAUSN,HONDO,SLATER,
     *                 XC,YC,ZC,ATOM,T,XO,XIMIN,XIMAX,IBOND,JBOND,
     *                 NSHEL,ITYPE,NGAUS,NCONT,ZETA,COEF,
     *                 MXSHEL,MXGAUS,NPLT,VECS,FMT)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL ANGS,PRTGRD,PLTING,CHECK,FIVED,SEVNF,NINEG,
     *        GAUSN,HONDO,SLATER
      CHARACTER*8 PLANE
C
      DIMENSION XC(NATOMS),YC(NATOMS),ZC(NATOMS),T(3,3),XO(3),
     *          XIMIN(2),XIMAX(2),IBOND(NBONDS),JBOND(NBONDS),
     *          NSHEL(NATOMS),ITYPE(MXSHEL,NATOMS),
     *          NGAUS(MXSHEL,NATOMS),NCONT(MXSHEL,NATOMS),
     *          ZETA(MXGAUS,MXSHEL),COEF(MXGAUS,MXGAUS,MXSHEL),
     *          NPLT(NPLOTS),VECS(NAOS,NMOS)
      CHARACTER*4  ATOM(NATOMS)
      CHARACTER*4  SYMB(7)
      CHARACTER*80 FMT
      DATA SYMB/'S   ','P   ','D   ','F   ','G   ','H   ','I   '/
C
C     ----- PRINT OUT THE PROGRAM'S INTERPRETATION OF THE INPUT -----
C
      WRITE(IOUT,9000) CUTOFF,DELTA,SIZE,
     *               NATOMS,NBONDS,NAOS,NMOS,NPLOTS,KOLOR,
     *               ANGS,PLANE,PRTGRD,.NOT.PLTING,FIVED,
     *               SEVNF,NINEG,GAUSN,HONDO,CHECK,SLATER,FMT
 9000 FORMAT(///1X,'PLTORB OPTION SETTINGS ARE'//
     *       1X,'CUTOFF=',F8.1,5X,'DELTA =',F8.3/
     *       1X,'SIZE  =',F8.4/
     *       1X,'NATOMS=',I8,5X,'NBONDS=',I8/
     *       1X,'NAOS  =',I8,5X,'NMOS  =',I8/
     *       1X,'NPLOTS=',I8,5X,'KOLOR =',I8/
     *       1X,'ANGS  =',L8,5X,'PLANE =',A8/
     *       1X,'GRIDS =',L8,5X,'NOPLOT=',L8/
     *       1X,'5D    =',L8,5X,'7F    =',L8,5X,'9G    =',L8/
     *       1X,'GAUSN =',L8,5X,'HONDO =',L8/
     *       1X,'CHECK =',L8,5X,'SLATER=',L8/
     *       1X,'FORMAT=',A)
C
      WRITE(IOUT,9010)
 9010 FORMAT(//1X,'THE ATOMIC POSITIONS ARE'/
     *         1X,'ATOM',6X,'X',11X,'Y',11X,'Z (BOHRS)')
      DO K=1,NATOMS
         WRITE(IOUT,9020) ATOM(K),XC(K),YC(K),ZC(K)
      ENDDO
 9020 FORMAT(1X,A4,3F12.7)
C
      WRITE(IOUT,9030) ((T(I,J),J=1,3),I=1,3)
 9030 FORMAT(//1X,'ROTATION FROM FUNDAMENTAL TO PLOTTING AXES IS'/
     *      11X,'PX',11X,'PY',11X,'PZ'/
     *      1X,'FX',3F13.7/1X,'FY',3F13.7/1X,'FZ',3F13.7)
      WRITE(IOUT,9040) XO
 9040 FORMAT(//1X,'TRANSLATION FROM F AXIS ORIGIN TO P AXIS ORIGIN IS'/
     *         1X,3F13.7,'  (BOHRS)')
      WRITE(IOUT,9050) XIMIN(1),XIMAX(1),XIMIN(2),XIMAX(2)
 9050 FORMAT(//1X,'MINIMA AND MAXIMA ON THE PLOTTING PLANE ARE'/
     *         5X,'PX MIN=',F13.6,' PX MAX=',F13.6/
     *         5X,'PY MIN=',F13.6,' PY MAX=',F13.6,' BOHR')
C
      WRITE(IOUT,9060)
 9060 FORMAT(//1X,'ATOM CONNECTIVITIES ARE')
      II=0
      DO I=1,NBONDS,20
         JJ=II+20
         JJ=MIN(JJ,NBONDS)
         II=II+1
         WRITE(IOUT,9070) 'IBOND=',(IBOND(KK),KK=II,JJ)
         WRITE(IOUT,9070) 'JBOND=',(JBOND(KK),KK=II,JJ)
      ENDDO
 9070 FORMAT(1X,A6,20I3)
C
      WRITE(IOUT,9080)
 9080 FORMAT(//1X,'MOLECULAR BASIS SET (ONLY THE FIRST EIGHT',
     *          ' CONTRACTIONS FIT ON THE PAGE)'//
     *         1X,'ATOM',1X,'NSH',1X,'TYPE',8X,'ZETA',8X,'CONTR.COEFS')
      REWIND IOMO
      DO 230 K=1,NATOMS
         NSH=NSHEL(K)
         READ(IOMO) ZETA,COEF
         DO 220 I=1,NSH
            NG=NGAUS(I,K)
            NC=MIN(NCONT(I,K),8)
            DO 210 KI=1,NG
               IF(KI.EQ.1) THEN
                  WRITE(IOUT,9090) ATOM(K),I,SYMB(ITYPE(I,K)),
     *                           ZETA(KI,I),(COEF(KI,KJ,I),KJ=1,NC)
               ELSE
                  WRITE(IOUT,9100) ZETA(KI,I),(COEF(KI,KJ,I),KJ=1,NC)
               END IF
  210       CONTINUE
  220    CONTINUE
  230 CONTINUE
 9090 FORMAT(2X,A4,I3,2X,A4,1X,F15.7,3X,8F11.7)
 9100 FORMAT(              16X,F15.7,3X,8F11.7)
C
      WRITE(IOUT,9110)
 9110 FORMAT(//1X,'THE MO''S TO BE PLOTTED ARE')
      JMAX=0
      DO 330 N=1,NPLOTS,10
         JMIN=JMAX+1
         JMAX=MIN(JMAX+10,NPLOTS)
         WRITE(IOUT,9120) (NPLT(J),J=JMIN,JMAX)
         DO 310 I=1,NAOS
            WRITE(IOUT,9130) I,(VECS(I,ABS(NPLT(J))),J=JMIN,JMAX)
  310    CONTINUE
  330 CONTINUE
      RETURN
 9120 FORMAT(13X,10(I3,9X))
 9130 FORMAT(1X,I4,2X,10F12.7)
      END
C*PROGRAM PLTORB  *DECK AOGRID
      SUBROUTINE AOGRID(IOUT,IOPRIM,IOCO,IOMO,MESH,NATOMS,
     *                  MXSHEL,MXGAUS,IDERIV,
     *                  T,XO,XIMIN,XIMAX,XC,YC,ZC,
     *                  IPQN,NSHEL,NGAUS,NCONT,ZETA,COEF,ITYPE,
     *                  GRID,WORK,PRTGRD,FIVED,SEVNF,NINEG,
     *                  GAUSN,HONDO,SLATER,ATOM)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL PRTGRD,FIVED,SEVNF,NINEG,
     *        GAUSN,HONDO,SLATER
      DIMENSION T(3,3),XO(3),XIMIN(2),XIMAX(2),CORNER(3),DX(3,2),
     *          XC(NATOMS),YC(NATOMS),ZC(NATOMS),NSHEL(NATOMS),
     *          NGAUS(MXSHEL,NATOMS),NCONT(MXSHEL,NATOMS),
     *          ITYPE(MXSHEL,NATOMS),IPQN(NATOMS),
     *          ZETA(MXGAUS,MXSHEL),COEF(MXGAUS,MXGAUS,MXSHEL),
     *          GRID(MESH,MESH),IQNFG(10,3),
     *          WORK(MESH,MESH,3,28),IQN(28,3,7),IDEGEN(7)
      CHARACTER*1 TYPE(7)
      CHARACTER*4 ATOM(NATOMS)
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00, THREE=3.0D+00,
     *           FOUR=4.0D+00, FIVE=5.0D+00,SIX=6.0D+00, SEVEN=7.0D+00,
     *           EIGHT=8.0D+00, ANINE=9.0D+00,
     *           TEN=10.0D+00, ELEVEN=11.0D+00,
     *           R18=18.0D+00,R28=28.0D+00,R46=46.0D+00,
     *           TWNTFR=24.0D+00,HALF=5.0D-01,R196=196.0D+00,
     *           TRTN36=1336.0D+00,R35=35.0D+00,R96=96.0D+00,
     *           SNTN44=1744.0D+00,R98=98.0D+00,FRTN62=1462.0D+00,
     *           R342=342.0D+00,FRSN28=4728.0D+00,TWNT1=21.0D+00)
C            each row-triplet is x,y,z powers for the Cartesian GTOs.
      DATA TYPE/'S','P','D','F','G','H','I'/
      DATA IDEGEN/1,3,6,10,15,21,28/
      DATA IQN/
     *       0,27*0,
     *       0,27*0,
     *       0,27*0,
     *       1,0,0,25*0,
     *       0,1,0,25*0,
     *       0,0,1,25*0,
     *       2,0,0,1,1,0,22*0,
     *       0,2,0,1,0,1,22*0,
     *       0,0,2,0,1,1,22*0,
     *       3,0,0,2,2,1,0,1,0,1,18*0,
     *       0,3,0,1,0,2,2,0,1,1,18*0,
     *       0,0,3,0,1,0,1,2,2,1,18*0,
     *       4,0,0,3,3,1,0,1,0,2,2,0,2,1,1,13*0,
     *       0,4,0,1,0,3,3,0,1,2,0,2,1,2,1,13*0,
     *       0,0,4,0,1,0,1,3,3,0,2,2,1,1,2,13*0,
     *       5,0,0,4,4,1,0,1,0,3,3,2,0,2,0,3,1,1,2,2,1,7*0,
     *       0,5,0,1,0,4,4,0,1,2,0,3,3,0,2,1,3,1,2,1,2,7*0,
     *       0,0,5,0,1,0,1,4,4,0,2,0,2,3,3,1,1,3,1,2,2,7*0,
     *       6,0,0,5,5,1,0,1,0,4,4,2,0,2,0,4,1,1,3,3,0,3,3,2,1,2,1,2,
     *       0,6,0,1,0,5,5,0,1,2,0,4,4,0,2,1,4,1,3,0,3,2,1,3,3,1,2,2,
     *       0,0,6,0,1,0,1,5,5,0,2,0,2,4,4,1,1,4,0,3,3,1,2,1,2,3,3,2/
C              next has to do with plotting Gaussian's f shell order
      DATA IQNFG/3,0,0,1,2,2,1,0,0,1,
     *           0,3,0,2,1,0,0,1,2,1,
     *           0,0,3,0,0,1,2,2,1,1/
C
C     ----- COMPUTE AMPLITUDE GRID FOR EACH CONTRACTED AO -----
C     or, if ideriv.eq.1, compute the AO amplitude's gradient.
C
      IF(IDERIV.EQ.0) THEN
         MXAMP=1
      ELSE
         MXAMP=3
      END IF
C
C     THIS ROUTINE USES MOST OF THE COMPUTER TIME.
C     FIRST, A GRID OVER EACH GAUSSIAN IN A PARTICULAR SHELL
C     IS COMPUTED.  THEN, THESE ARE SUMMED WITH THE CONTRACTION
C     COEFFICIENTS TO PRODUCE AN AMPLITUDE GRID FOR EACH
C     CONTRACTED AO IN THE MOLECULE.
C
      SQRT2 = SQRT(TWO)
      SQRT3 = SQRT(THREE)
      SQRT5 = SQRT(FIVE)
      SQRT7 = SQRT(SEVEN)
      SQRT9 = SQRT(ANINE)
      SQRT11= SQRT(ELEVEN)
C
      HFRT3 = HALF*SQRT3
C
      R1=SQRT5/(TWO*SQRT2)
      R2=THREE/(TWO*SQRT5)
      R3=SQRT3/TWO
      R4=HFRT3/SQRT2
      R5=FOUR/SQRT5
      R6=ONE/SQRT5
      R7=THREE/SQRT5
C
      DO I=1,3
         CORNER(I)=T(I,1)*XIMIN(1)+T(I,2)*XIMIN(2)+XO(I)
         DO J=1,2
            DX(I,J)=T(I,J)*(XIMAX(J)-XIMIN(J))/(MESH-1)
         ENDDO
      ENDDO
C
C        LOOP OVER EACH ATOM, AND EACH SHELL ON EACH ATOM
C
C        UNIT IOMO HOLDS THE BASIS SET, ONE RECORD PER ATOM
C        UNIT IOPRIM WILL HOLD THE GRIDS FOR ALL GAUSSIANS IN A SHELL
C        UNIT IOCO WILL RECIEVE THE GRIDS FOR EACH CONTRACTED ORBITAL
C
      REWIND IOCO
      REWIND IOMO
C
C                 LOOP OVER EACH ATOM, AND EACH SHELL ON THAT ATOM
C
      IPQNUM=0
      DO 820 K=1,NATOMS
         IF(SLATER) IPQNUM=IPQN(K)
         READ(IOMO) ZETA,COEF
         XAT = XC(K)
         YAT = YC(K)
         ZAT = ZC(K)
         NSH = NSHEL(K)
C
         DO 810 I=1,NSH
            ITYP = ITYPE(I,K)
            NC   = NCONT(I,K)
            NG   = NGAUS(I,K)
C
            REWIND IOPRIM
C
C                 LOOP OVER GAUSSIAN PRIMITIVES IN THIS SHELL
C
            DO 390 KI=1,NG
               ZET = ZETA(KI,I)
C
C                 LOOP OVER THE DEGENERACY OF CARTESIAN GAUSSIAN
C
               IDEG=IDEGEN(ITYP)
               DO 240 LMN=1,IDEG
                  LQN=IQN(LMN,1,ITYP)
                  MQN=IQN(LMN,2,ITYP)
                  NQN=IQN(LMN,3,ITYP)
C
C       GAUSSIAN's ORDER OF CARTESIAN GTOs IS NOT STANDARD
C
                  IF(ITYP.EQ.4  .AND. GAUSN .AND. .NOT. SEVNF) THEN
                     LQN=IQNFG(LMN,1)
                     MQN=IQNFG(LMN,2)
                     NQN=IQNFG(LMN,3)
                  END IF
C
                  DO 230 II=1,MESH
                     DO 220 JJ=1,MESH
C
C       generate the base level GTO amplitude, or its gradient.  The
C       word "base" means only powers of x,y,z and the exp(-zeta*r**2),
C       so we lack proper normalization, done in 2 stages below.
C
                        XA=CORNER(1)+(II-1)*DX(1,1)+(JJ-1)*DX(1,2)-XAT
                        YA=CORNER(2)+(II-1)*DX(2,1)+(JJ-1)*DX(2,2)-YAT
                        ZA=CORNER(3)+(II-1)*DX(3,1)+(JJ-1)*DX(3,2)-ZAT
                        CALL PSI(IDERIV,ZET,LQN,MQN,NQN,XA,YA,ZA,
     *                           SLATER,ITYP,IPQNUM,
     *                           AMPL,DXAMPL,DYAMPL,DZAMPL)
C
C       the purpose of -GFACT- is to cope with the small changes
C       in normalization factors of Gaussians, as the powers for
C       x**L * y**M * z**N affect the double factorial in the
C       normalization by square roots.  Note that -CNORM- below
C       is the normalization factor for x**(L+M+N) * y**0 * z**0.
C
                        GFACT = ONE
                        IF(ITYP.EQ.3) THEN
                           IF(LMN.GE.4)
     *                        GFACT=SQRT3
                        ENDIF
                        IF(ITYP.EQ.4) THEN
                           IF(LMN.GE. 4 .AND. LMN.LE. 9)
     *                        GFACT=SQRT5
                           IF(LMN.EQ.10)
     *                        GFACT=SQRT3*SQRT5
                        END IF
                        IF(ITYP.EQ.5) THEN
                           IF(LMN.GE. 4 .AND. LMN.LE. 9)
     *                        GFACT=SQRT7
                           IF(LMN.GE.10 .AND. LMN.LE.12)
     *                        GFACT=SQRT5*SQRT7/SQRT3
                           IF(LMN.GE.13 .AND. LMN.LE.15)
     *                        GFACT=SQRT5*SQRT7
                        END IF
                        IF(ITYP.EQ.6) THEN
                           IF(LMN.GE. 4 .AND. LMN.LE. 9)
     *                        GFACT=SQRT9
                           IF(LMN.GE.10 .AND. LMN.LE.15)
     *                        GFACT=SQRT7*SQRT9/SQRT3
                           IF(LMN.GE.16 .AND. LMN.LE.18)
     *                        GFACT=SQRT7*SQRT9
                           IF(LMN.GE.19 .AND. LMN.LE.21)
     *                        GFACT=SQRT3*SQRT5*SQRT7
                        END IF
                        IF(ITYP.EQ.7) THEN
                           IF(LMN.GE. 4 .AND. LMN.LE. 9)
     *                        GFACT=SQRT11
                           IF(LMN.GE.10 .AND. LMN.LE.15)
     *                        GFACT=SQRT9*SQRT11/SQRT3
                           IF(LMN.GE.16 .AND. LMN.LE.18)
     *                        GFACT=SQRT9*SQRT11
                           IF(LMN.GE.19 .AND. LMN.LE.21)
     *                        GFACT=SQRT7*SQRT9*SQRT11/(SQRT3*SQRT5)
                           IF(LMN.GE.22 .AND. LMN.LE.27)
     *                        GFACT=SQRT7*SQRT9*SQRT11/SQRT3
                           IF(LMN.EQ.28)
     *                        GFACT=SQRT5*SQRT7*SQRT11
                        END IF
C
C    store the orbital, or its gradient, still without -CNORM- below.
C
                        IF(IDERIV.EQ.0) THEN
                           AMPL = AMPL*GFACT
                           WORK(II,JJ,1,LMN) = AMPL
                        ELSE
                           DXAMPL = DXAMPL*GFACT
                           DYAMPL = DYAMPL*GFACT
                           DZAMPL = DZAMPL*GFACT
                           WORK(II,JJ,1,LMN) = DXAMPL
                           WORK(II,JJ,2,LMN) = DYAMPL
                           WORK(II,JJ,3,LMN) = DZAMPL
                        END IF
  220                CONTINUE
  230             CONTINUE
  240          CONTINUE
C
C        optional change to Hondo/Gaussian spherical harmonic LCAO
C        matrix, by transforming from the Cartesian primitives.
C
               DO 333 KK=1,MXAMP
C
C                    POSSIBLE CHANGE TO PURE D BASIS
C
               IF(ITYP.EQ.3  .AND.  FIVED) THEN
                  IDEG=5
                  IF(GAUSN) THEN
                    DO 320 JJ=1,MESH
                      DO 310 II=1,MESH
                        XX=WORK(II,JJ,KK,1)
                        YY=WORK(II,JJ,KK,2)
                        ZZ=WORK(II,JJ,KK,3)
                        XY=WORK(II,JJ,KK,4)
                        XZ=WORK(II,JJ,KK,5)
                        YZ=WORK(II,JJ,KK,6)
                        WORK(II,JJ,KK,1) = ZZ-HALF*(XX+YY)
                        WORK(II,JJ,KK,2) = XZ
                        WORK(II,JJ,KK,3) = YZ
                        WORK(II,JJ,KK,4) = HFRT3*(XX-YY)
                        WORK(II,JJ,KK,5) = XY
  310                 CONTINUE
  320               CONTINUE
                  END IF
C
                  IF(HONDO) THEN
                    DO 322 JJ=1,MESH
                      DO 312 II=1,MESH
                        XX=WORK(II,JJ,KK,1)
                        YY=WORK(II,JJ,KK,2)
                        ZZ=WORK(II,JJ,KK,3)
                        XY=WORK(II,JJ,KK,4)
                        XZ=WORK(II,JJ,KK,5)
                        YZ=WORK(II,JJ,KK,6)
                        WORK(II,JJ,KK,1) = ZZ-HALF*(XX+YY)
                        WORK(II,JJ,KK,2) = HFRT3*(XX-YY)
                        WORK(II,JJ,KK,3) = XY
                        WORK(II,JJ,KK,4) = XZ
                        WORK(II,JJ,KK,5) = YZ
  312                 CONTINUE
  322               CONTINUE
                  END IF
               END IF
C
C                    POSSIBLE CHANGE TO PURE F BASIS
C
               IF(ITYP.EQ.4  .AND.  SEVNF) THEN
                  IDEG=7
                IF(GAUSN) THEN
                  DO 324 JJ=1,MESH
                     DO 314 II=1,MESH
                        XXX=WORK(II,JJ,KK,1)
                        YYY=WORK(II,JJ,KK,2)
                        ZZZ=WORK(II,JJ,KK,3)
                        XXY=WORK(II,JJ,KK,4)
                        XXZ=WORK(II,JJ,KK,5)
                        XYY=WORK(II,JJ,KK,6)
                        YYZ=WORK(II,JJ,KK,7)
                        XZZ=WORK(II,JJ,KK,8)
                        YZZ=WORK(II,JJ,KK,9)
                        XYZ=WORK(II,JJ,KK,10)
                        WORK(II,JJ,KK,1) = ZZZ-R2*(XXZ+YYZ)
                        WORK(II,JJ,KK,2) = R4*(R5*XZZ-XXX-R6*XYY)
                        WORK(II,JJ,KK,3) = R4*(R5*YZZ-YYY-R6*XXY)
                        WORK(II,JJ,KK,4) = R3*(XXZ-YYZ)
                        WORK(II,JJ,KK,5) = XYZ
                        WORK(II,JJ,KK,6) = R1*(XXX-R7*XYY)
                        WORK(II,JJ,KK,7) = R1*(R7*XXY-YYY)
  314                CONTINUE
  324             CONTINUE
               END IF
C
                IF(HONDO) THEN
                  DO 326 JJ=1,MESH
                     DO 316 II=1,MESH
                        XXX=WORK(II,JJ,KK,1)
                        YYY=WORK(II,JJ,KK,2)
                        ZZZ=WORK(II,JJ,KK,3)
                        XXY=WORK(II,JJ,KK,4)
                        XXZ=WORK(II,JJ,KK,5)
                        XYY=WORK(II,JJ,KK,6)
                        YYZ=WORK(II,JJ,KK,7)
                        XZZ=WORK(II,JJ,KK,8)
                        YZZ=WORK(II,JJ,KK,9)
                        XYZ=WORK(II,JJ,KK,10)
                        WORK(II,JJ,KK,1) =
     *  SQRT(SQRT5/(TEN*SQRT5-SIX))*(XXX-THREE*XYY)
                        WORK(II,JJ,KK,2) =
     *  HFRT3*(XXZ-YYZ)
                        WORK(II,JJ,KK,3) =
     *  SQRT(THREE*SQRT5/(R46*SQRT5-R18))*(FOUR*XZZ-XXX-XYY)
                        WORK(II,JJ,KK,4) =
     *  SQRT(SQRT5/(R28*SQRT5-TWNTFR))*(TWO*ZZZ-THREE*(XXZ+YYZ))
                        WORK(II,JJ,KK,5) =
     *  SQRT(THREE*SQRT5/(R46*SQRT5-R18))*(FOUR*YZZ-YYY-XXY)
                        WORK(II,JJ,KK,6) = XYZ
                        WORK(II,JJ,KK,7) =
     *  SQRT(SQRT5/(TEN*SQRT5-SIX))*(THREE*XXY-YYY)
  316                CONTINUE
  326             CONTINUE
               END IF
               END IF
C
C                 POSSIBLE CHANGE TO PURE G BASIS
C
               IF(ITYP.EQ.5 .AND. NINEG) THEN
                 IDEG=9
                 IF(GAUSN) THEN
                   WRITE(IOUT,9150)
                   CALL ABT(IOUT)
                   STOP
                 END IF
C
                 IF(HONDO) THEN
                   FAC4P=ONE/(SQRT((TRTN36/R35)
     *                       -((TWNTFR*SQRT5)/SQRT(TWNT1))))
                   FAC3P=SQRT(SQRT5/((TEN*SQRT5)-SIX))
                   FAC2P=ONE/(SQRT((SNTN44/R35)
     *                       -((R96*SQRT5)/(FIVE*SQRT(TWNT1)))))
                   FAC1P=SQRT(FIVE/(R98-(SIX*SQRT5)))
                   FAC0=ONE/(SQRT((FRTN62+(R342/R35)
     *                      -((FRSN28*SQRT5)/(FIVE*SQRT(TWNT1))))))
                   FAC1M=FAC1P
                   FAC2M=SQRT(5/(R196-(TWNTFR*SQRT5)))
                   FAC3M=FAC3P
                   FAC4M=SQRT5/FOUR
                  DO 328 JJ=1,MESH
                      DO 318 II=1,MESH
                         XXXX=WORK(II,JJ,KK,1)
                         YYYY=WORK(II,JJ,KK,2)
                         ZZZZ=WORK(II,JJ,KK,3)
                         XXXY=WORK(II,JJ,KK,4)
                         XXXZ=WORK(II,JJ,KK,5)
                         YYYX=WORK(II,JJ,KK,6)
                         YYYZ=WORK(II,JJ,KK,7)
                         ZZZX=WORK(II,JJ,KK,8)
                         ZZZY=WORK(II,JJ,KK,9)
                         XXYY=WORK(II,JJ,KK,10)
                         XXZZ=WORK(II,JJ,KK,11)
                         YYZZ=WORK(II,JJ,KK,12)
                         XXYZ=WORK(II,JJ,KK,13)
                         XYYZ=WORK(II,JJ,KK,14)
                         XYZZ=WORK(II,JJ,KK,15)
                         WORK(II,JJ,KK,1) =
     *                       FAC4P*(XXXX+YYYY-SIX*XXYY)
                         WORK(II,JJ,KK,2) =
     *                       FAC3P*(XXXZ-THREE*XYYZ)
                         WORK(II,JJ,KK,3) =
     *                       FAC2P*(-XXXX+YYYY+SIX*(XXZZ-YYZZ))
                         WORK(II,JJ,KK,4) =
     *                       FAC1P*(-THREE*XXXZ+FOUR*ZZZX-THREE*XYYZ)
                         WORK(II,JJ,KK,5) =
     *                      FAC0*(THREE*(XXXX+YYYY)+EIGHT*ZZZZ
     *                            +SIX*XXYY-TWNTFR*(XXZZ+YYZZ))
                         WORK(II,JJ,KK,6) =
     *                       FAC1M*(-THREE*YYYZ+FOUR*ZZZY-THREE*XXYZ)
                         WORK(II,JJ,KK,7) =
     *                       FAC2M*(-XXXY+SIX*XYZZ-YYYX)
                         WORK(II,JJ,KK,8) =
     *                       FAC3M*(YYYZ-THREE*XXYZ)
                         WORK(II,JJ,KK,9) =
     *                       FAC4M*(XXXY-YYYX)
  318                 CONTINUE
  328              CONTINUE
                 END IF
               END IF
  333          CONTINUE
C
C                 WRITE PRIMITIVE GRIDS TO DISK, WITH OPTIONAL PRINTOUT
C
                DO 360 LMN=1,IDEG
                   DO 350 KK=1,MXAMP
                      CALL SQWRIT(IOPRIM,WORK(1,1,KK,LMN),MESH*MESH)
                      IF(PRTGRD) THEN
                       WRITE(IOUT,910) LMN,KI,ZET,I,TYPE(ITYP),K,ATOM(K)
                       WRITE(IOUT,920) (JJ,JJ=1,MESH,3)
                       DO II=1,MESH,3
                  WRITE(IOUT,930) II,(WORK(II,JJ,KK,LMN),JJ=1,MESH,3)
                       ENDDO
                      END IF
  350              CONTINUE
  360           CONTINUE
C
C                end loop over primitives
  390       CONTINUE
C
C              Perform normalization of the primitives, by applying
C              the factor for the maximum power for X.  Note that
C              the normalization changes for other powers of X,Y,Z
C              are accounted for above, by -GFACT-.
C
            DO KI=1,NG
               ZET = ZETA(KI,I)
               CNST = CNORM(ZET,ITYP,SLATER,IPQNUM)
               DO KJ=1,NC
                  COEF(KI,KJ,I) = CNST * COEF(KI,KJ,I)
               ENDDO
            ENDDO
C
C                 COMPUTE GRID FOR EACH CONTRACTED ORBITAL
C
            IDEG = IDEGEN(ITYP)
            IF(ITYP.EQ.3  .AND.  FIVED) IDEG=5
            IF(ITYP.EQ.4  .AND.  SEVNF) IDEG=7
            IF(ITYP.EQ.5  .AND.  NINEG) IDEG=9
C
            DO 750 KJ=1,NC
C
               DO LMN=1,IDEG
                  DO KK=1,MXAMP
                     DO JJ=1,MESH
                        DO II=1,MESH
                           WORK(II,JJ,KK,LMN) = ZERO
                        ENDDO
                     ENDDO
                  ENDDO
               ENDDO
C
               REWIND IOPRIM
C
               DO 590 KI=1,NG
                  COEFX = COEF(KI,KJ,I)
                  DO 580 LMN=1,IDEG
                     DO 570 KK=1,MXAMP
                        IF(COEFX.EQ.ZERO) THEN
                           READ(IOPRIM)
                        ELSE
                           READ(IOPRIM) GRID
                           DO 560 JJ=1,MESH
                              DO 550 II=1,MESH
                                 WORK(II,JJ,KK,LMN)=WORK(II,JJ,KK,LMN)
     *                                       + COEFX * GRID(II,JJ)
  550                         CONTINUE
  560                      CONTINUE
                        END IF
  570                CONTINUE
  580             CONTINUE
  590          CONTINUE
C
C                 write contracted AO grids to disk, with optional print
C
               DO 660 LMN=1,IDEG
                  DO 650 KK=1,MXAMP
                     CALL SQWRIT(IOCO,WORK(1,1,KK,LMN),MESH*MESH)
                     IF(PRTGRD) THEN
                        WRITE(IOUT,940) LMN,KJ,I,TYPE(ITYP),K,ATOM(K)
                        WRITE(IOUT,920) (JJ,JJ=1,MESH,3)
                        DO II=1,MESH,3
                    WRITE(IOUT,930) II,(WORK(II,JJ,KK,LMN),JJ=1,MESH,3)
                        ENDDO
                     END IF
  650             CONTINUE
  660          CONTINUE
C
C                end loop over (general) contractions in this shell.
  750       CONTINUE
C
C                end loop over shells on this atom.
C                end loop over atoms.
  810    CONTINUE
  820 CONTINUE
      RETURN
C
  910 FORMAT(1X,'GRID FOR SUBSPECIES',I3,' FOR GAUS.',I3,
     *       '(',F11.5,') OF SHELL',I3,'(',A1,')',
     *       ', ON ATOM',I3,'(',A4,')')
  920 FORMAT(//5X,21I6)
  930 FORMAT(1X,I2,2X,21F6.2)
  940 FORMAT(1X,'GRID FOR SUBSPECIES',I3,' OF CONT.',I3,
     *          ' OF SHELL',I3,'(',A1,') ON ATOM',I3,'(',A4,')')
 9150 FORMAT(1X,'***** 9G IS NOT COMPATIBLE WITH GAUSN')
      END
C*PROGRAM PLTORB  *DECK PSI
      SUBROUTINE PSI(IDERIV,ZETA,L,M,N,XA,YA,ZA,
     *               SLATER,IPQNUM,ITYP,
     *               AMPL,DXAMPL,DYAMPL,DZAMPL)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL SLATER
      PARAMETER (ZERO=0.0D+00, ONE=1.0D+00, TWO=2.0D+00,
     *           SMALL=5.0D-05, FIFTY=50.0D+00)
C
C     ----- EVALUATE THE SLATER FUNCTION OR GAUSSIAN PRIMITIVE -----
C     This routine only does the x,y,z and exponential parts of
C     the amplitude (or its derivative).  Normalization factors
C     are handled in -CNORM-, and small adjustments to GTO factors
C     stemming from the double factorials are left for the loop
C     calling this routine to cope with.
C     STO functions do not compute x,y,z derivatives of the amplitude,
C     GTO's may optionally evaluate these instead of the amplitude.
C
      IF(ABS(XA).LE.SMALL) XA=ZERO
      IF(ABS(YA).LE.SMALL) YA=ZERO
      IF(ABS(ZA).LE.SMALL) ZA=ZERO
      RHO=SQRT(XA*XA+YA*YA+ZA*ZA)
      IF(RHO.LE.SMALL) RHO=ZERO
C
      LMN = L + M + N
      IF(RHO.EQ.ZERO .AND. LMN.EQ.0) GO TO 200
      IF(RHO.EQ.ZERO .AND. LMN.GT.0) GO TO 300
C
C        GENERAL, OFF NUCLEUS CASE
C
      IF(SLATER) THEN
         CHECK = ZETA*RHO
      ELSE
         CHECK = ZETA*RHO*RHO
      END IF
C                  note that exp(-50) is about 1.0D-22
      IF(CHECK.GT.FIFTY) GO TO 100
      POWER = EXP(-CHECK)
C
C           we only handle s and p STO functions at present, for MOPAC.
      IF(SLATER) THEN
         A = ONE
         B = ONE
         C = ONE
         IF(L.EQ.1) A = XA
         IF(M.EQ.1) B = YA
         IF(N.EQ.1) C = ZA
         AMPL = A * B * C * RHO**(IPQNUM-ITYP) * POWER
         RETURN
      END IF
C
      IF(IDERIV.EQ.0) THEN
         A = ONE
         DO I=1,L
            A = A*XA
         ENDDO
         B = ONE
         DO I=1,M
            B = B*YA
         ENDDO
         C = ONE
         DO I=1,N
            C = C*ZA
         ENDDO
         AMPL =  A * B * C * POWER
         RETURN
      ELSE
         IF(L.EQ.0) THEN
            AMINUS = ZERO
            A      = ONE
            APLUS  = TWO*ZETA*XA
         ELSE
            A = ONE
            DO I=1,L
               IF(I.EQ.L) AMINUS= L*A
               A = A*XA
               IF(I.EQ.L) APLUS = TWO*ZETA*A*XA
            ENDDO
         END IF
C
         IF(M.EQ.0) THEN
            BMINUS = ZERO
            B      = ONE
            BPLUS  = TWO*ZETA*YA
         ELSE
            B = ONE
            DO I=1,M
               IF(I.EQ.M) BMINUS= M*B
               B = B*YA
               IF(I.EQ.M) BPLUS = TWO*ZETA*B*YA
            ENDDO
         END IF
C
         IF(N.EQ.0) THEN
            CMINUS = ZERO
            C      = ONE
            CPLUS  = TWO*ZETA*ZA
         ELSE
            C = ONE
            DO I=1,N
               IF(I.EQ.N) CMINUS= N*C
               C = C*ZA
               IF(I.EQ.N) CPLUS = TWO*ZETA*C*ZA
            ENDDO
         END IF
         DXAMPL = (AMINUS * B * C  -  APLUS * B * C) * POWER
         DYAMPL = (A * BMINUS * C  -  A * BPLUS * C) * POWER
         DZAMPL = (A * B * CMINUS  -  A * B * CPLUS) * POWER
         RETURN
      END IF
C
C        the exponential is big, so underflow to zero.
C
  100 CONTINUE
      IF(IDERIV.EQ.0) THEN
         AMPL = ZERO
      ELSE
         DXAMPL = ZERO
         DYAMPL = ZERO
         DZAMPL = ZERO
      END IF
      RETURN
C
C        CUSP OF AN S ORBITAL
C
  200 CONTINUE
      IF(IDERIV.EQ.0) THEN
         AMPL = ONE
      ELSE
         DXAMPL = ZERO
         DYAMPL = ZERO
         DZAMPL = ZERO
      END IF
      RETURN
C
C        CUSP OF ANY OTHER ORBITAL
C
  300 CONTINUE
      IF(IDERIV.EQ.0) THEN
         AMPL = ZERO
      ELSE
         DXAMPL = ZERO
         DYAMPL = ZERO
         DZAMPL = ZERO
         IF(LMN.EQ.1) THEN
            IF(L.EQ.1) DXAMPL = ONE
            IF(M.EQ.1) DYAMPL = ONE
            IF(N.EQ.1) DZAMPL = ONE
         END IF
      END IF
      RETURN
      END
C*PROGRAM PLTORB  *DECK CNORM
      DOUBLE PRECISION FUNCTION CNORM(ZETA,ITYP,SLATER,IPQNUM)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION LMNQN(7),FACT2N(7),POWTWO(7)
      DIMENSION CONST(7)
      PARAMETER (PITO32= 5.568327996831707D+00, TWO=2.0D+00,
     *           ONE=1.0D+00, SQRT3=1.7320508D+00,
     *           PI=3.14159 26535 89793D+00)
      LOGICAL FIRST,SLATER
      DATA LMNQN/0,1,2,3,4,5,6/
      DATA FIRST/.TRUE./
      SAVE FIRST,FACT2N,POWTWO
      SAVE CONST
C
      IF(FIRST) THEN
         FIRST=.FALSE.
         FACT2N(1)=ONE
         POWTWO(1)=TWO**(1.5D+00)
         DO N=2,7
            FACT = N+N-3
            FACT2N(N) = FACT2N(N-1) * FACT
            POWTWO(N) = POWTWO(N-1) * TWO*TWO
         ENDDO
C               STO normalization includes the angular factor for -s-
         FOURPI = (TWO+TWO)*PI
         FACT=ONE
         DO N=1,7
            TWON   = N+N
            TWONP1 = N+N+1
            TWONM1 = N+N-1
            FACT=FACT*TWONM1*TWON
            CONST(N) = SQRT((TWO**TWONP1)/(FOURPI*FACT))
         ENDDO
      END IF
C
      IF(SLATER) THEN
C
C     ----- NORMALIZATION FACTOR FOR A SLATER -----
C        RADIAL NORMALIZATION= SQRT[(2*ZETA)**(2*N+1)] / (2N)!
C            ANGULAR FUNCTION= SQRT(1/4*PI) FOR S, SQRT(3/4*PI) FOR P
C     principle quantum number is 1 for H,He; 2 for Carbon row;
C                           ... 6 for Pb row; then 7 up to Z=104.
C
         CNORM = CONST(IPQNUM) * ZETA**(IPQNUM+0.5D+00)
         IF(ITYP.EQ.2) CNORM = CNORM * SQRT3
      ELSE
C
C     ----- NORMALIZATION FACTOR FOR A GAUSSIAN -----
C     GENERAL NORMALIZATION FORMULA FOR X**L,Y**M,Z**N
C     CARTESIAN GAUSSIAN IS: (FACT2=DOUBLE FACTORIAL)
C        A=ZETA**(L+M+N+1.5)
C        B=2**(2*L+2*M+2*N+1.5)
C        C=FACT2(L+L-1)*FACT2(M+M-1)*FACT2(N+N-1)*PITO32
C     but here, we are after the CNORM for L=L+M+N, M=0, N=0
C     ITYP=1,2,3,4,5,6,7 MEANS S,P,D,F,G,H,I FUNCTION
C
         LMN = LMNQN(ITYP)
         A=ZETA**(LMN+1.5D+00)
         B=POWTWO(ITYP)
         C=FACT2N(ITYP)*PITO32
         CNORM=SQRT(A*B/C)
      END IF
      RETURN
      END
C*PROGRAM PLTORB  *DECK OPNDNS
      SUBROUTINE OPNDNS(IOUT,IOMO,ATOM,XC,YC,ZC,IBOND,JBOND,T,XO,
     *                  XIMIN,XIMAX,NATOMS,NAOS,NMOS,IDERIV,NPLOTS,
     *                  NBONDS,MXATOM,MXBOND)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION XC(MXATOM),YC(MXATOM),ZC(MXATOM),IBOND(MXBOND),
     *          JBOND(MXBOND),T(3,3),XO(3),XIMIN(2),XIMAX(2)
      CHARACTER*4  ATOM(MXATOM)
      CHARACTER*4  KINDFL
      CHARACTER*24 BIRTH
      DATA KINDFL/'PLTO'/
C
C     ----- WRITE HEADER RECORDS ON MOLECULAR GRID FILE -----
C            (THIS FILE IS READ BY THE PROGRAM DENDIF)
C
      CALL DATEOF(BIRTH)
      WRITE(IOUT,930) BIRTH
      REWIND IOMO
      WRITE (IOMO) KINDFL,BIRTH,NATOMS,NAOS,NMOS,IDERIV,NPLOTS,NBONDS
      WRITE (IOMO) ATOM,XC,YC,ZC
      WRITE (IOMO) IBOND,JBOND
      WRITE (IOMO) T,XO,XIMIN,XIMAX
      RETURN
  930 FORMAT(1X,'MO GRID FILE CREATED AT ',A24)
      END
C
C*PROGRAM PLTORB  *DECK MOGRID
      SUBROUTINE MOGRID(IOUT,IOCO,IOMO,MESH,NAOS,NMOS,IDERIV,IPLOTD,
     *                  IORB,LAB1,LAB2,GRID,GRID3,WORK,VECS,PRTGRD,
     *                  GMAX,GMIN,T,XO,XIMIN,XIMAX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL PRTGRD,FULLGRID
      CHARACTER*40 LAB1,LAB2
      DIMENSION GRID(MESH,MESH),GRID3(MESH,MESH,3),WORK(MESH,MESH),
     *          VECS(NAOS,NMOS),
     *          T(3,3),XO(3),XIMIN(2),XIMAX(2)
      DIMENSION CORNER(3),DX(3,2)
      PARAMETER (ZERO=0.0D+00, HALF=0.5D+00, BIG=1.0D+10)
C
C     ----- COMPUTE MOLECULAR ORBITAL AMPLITUDE GRID -----
C
      IF(IDERIV.EQ.0) THEN
         MXAMP=1
      ELSE
         MXAMP=3
      END IF
C
      REWIND IOCO
C
      DO 110 J=1,MESH
         DO 100 I=1,MESH
            GRID(I,J) = ZERO
            IF(IDERIV.EQ.1) THEN
               GRID3(I,J,1) = ZERO
               GRID3(I,J,2) = ZERO
               GRID3(I,J,3) = ZERO
            END IF
  100    CONTINUE
  110 CONTINUE
C
C           COMPUTE ORBITAL GRID
C           if we are computing the gradient of the orbitals,
C           form the sum of all three Cartesian components in -grid-,
C           for purposes of plotting their square (the kinetic energy
C           integrand), but output the separate components to disk for
C           program DENDIF to use.
C
      MO = ABS(IORB)
      CMAX = -BIG
      CMIN =  BIG
      DO 230 IAO=1,NAOS
         COEF = VECS(IAO,MO)
         DO 220 KK=1,MXAMP
            IF(COEF.EQ.ZERO) THEN
               READ(IOCO)
            ELSE
               READ(IOCO) WORK
               DO 210 I=1,MESH
                  DO 200 J=1,MESH
                     VALUE = COEF*WORK(J,I)
                     IF(IDERIV.EQ.0) THEN
                        GRID(J,I) = GRID(J,I) + VALUE
                     ELSE
C      for derivatives, -GRID- will be plotted by this program,
C      while -GRID3- will be written to disk for -DENDIF- purposes.
                        GRID3(J,I,KK) = GRID3(J,I,KK) + VALUE
                        IF(IPLOTD.EQ.KK) GRID(J,I)=GRID(J,I)+VALUE
                        IF(IPLOTD.EQ.4)  GRID(J,I)=GRID(J,I)+VALUE*VALUE
                     END IF
  200             CONTINUE
  210          CONTINUE
               CMAX = MAX(CMAX,COEF)
               CMIN = MIN(CMIN,COEF)
            END IF
  220    CONTINUE
  230 CONTINUE
C
C        kinetic energy has a factor of 1/2 to be included now.
C        note that this factor is not included if drawing components!
C
      IF(IDERIV.GT.0  .AND.  IPLOTD.EQ.4) THEN
         CMAX = HALF*CMAX
         CMIN = HALF*CMIN
         DO JJ=1,MESH
            DO II=1,MESH
               GRID(II,JJ) = HALF*GRID(II,JJ)
            ENDDO
         ENDDO
      ENDIF
C
C        POSSIBLE ORBITAL PHASE CHANGES
C
      IFLIP=1
      IF(-CMIN.GT.CMAX) THEN
         WRITE(IOUT,900) MO
         IFLIP = -IFLIP
      END IF
      IF(IORB.LT.0) THEN
         WRITE(IOUT,910) MO
         IFLIP = -IFLIP
      END IF
      IF(IFLIP.EQ.-1) THEN
         DO J=1,MESH
            DO I=1,MESH
               GRID(I,J) = -GRID(I,J)
            ENDDO
         ENDDO
      END IF
C
C        OPTIONAL PRINTOUT OF THE GRID (EVERY 3RD POINT)
C
      IF(PRTGRD) THEN
         IF(IDERIV.EQ.0) WRITE(IOUT,920) MO
         IF(IDERIV.EQ.1) WRITE(IOUT,925) MO
         WRITE(IOUT,930) (JJ,JJ=1,MESH,3)
         DO I=1,MESH,3
            WRITE(IOUT,940) I,(GRID(I,J),J=1,MESH,3)
         ENDDO
      END IF
C
C        POSSIBLE OUTPUT OF FINAL MOLECULAR ORBITAL, WITH COORDINATES
C        this is debugging information, modify to suit yourself, such
C        as printing out only a 1-D vector along the bond of a diatom,
C        by running only one of the loops below.
C
      FULLGRID=.FALSE.
      IF(FULLGRID) THEN
         DO I=1,3
            CORNER(I)=T(I,1)*XIMIN(1)+T(I,2)*XIMIN(2)+XO(I)
            DO J=1,2
               DX(I,J)=T(I,J)*(XIMAX(J)-XIMIN(J))/(MESH-1)
            ENDDO
         ENDDO
         II = (MESH+1)/2   ! set II to the middle of the P-x mesh
         WRITE(IOUT,*) 'function values computed along P-y direction'
         DO JJ=1,MESH
C--         DO II=1,MESH
               XPT=CORNER(1)+(II-1)*DX(1,1)+(JJ-1)*DX(1,2)
               YPT=CORNER(2)+(II-1)*DX(2,1)+(JJ-1)*DX(2,2)  
               ZPT=CORNER(3)+(II-1)*DX(3,1)+(JJ-1)*DX(3,2)
               WRITE(IOUT,8123) XPT,YPT,ZPT,GRID(II,JJ)
C--         ENDDO
         ENDDO
      END IF
 8123 FORMAT(1X,'X,Y,Z=',3F10.6,1X,'FUNCTION=',F15.10)
C
C        Store the MO grid (or its spatial derivatives) on disk
C
      WRITE(IOMO) LAB1,LAB2
      IF(IDERIV.EQ.0) THEN
         WRITE(IOMO) GRID
      ELSE
         CALL SQWRIT(IOMO,GRID3(1,1,1),MESH*MESH)
         CALL SQWRIT(IOMO,GRID3(1,1,2),MESH*MESH)
         CALL SQWRIT(IOMO,GRID3(1,1,3),MESH*MESH)
      END IF
C
C        FIND MINIMUM AND MAXIMUM AMPLITUDES
C
      GMIN = BIG
      GMAX =-BIG
      DO 620 I=1,MESH
         DO 610 J=1,MESH
            GMAX = MAX(GMAX,GRID(I,J))
            GMIN = MIN(GMIN,GRID(I,J))
  610    CONTINUE
  620 CONTINUE
      RETURN
C
C           FORMAT STATEMENTS
C
  900 FORMAT(1X,'AUTOMATIC ORBITAL PHASE CHANGE PERFORMED FOR',
     *          ' ORBITAL',I5)
  910 FORMAT(1X,'REQUESTED PHASE CHANGE MADE FOR ORBITAL',I5)
  920 FORMAT(///1X,'AMPLITUDE GRID FOR MOLECULAR ORBITAL',I4)
  925 FORMAT(///1X,'KINETIC E GRID FOR MOLECULAR ORBITAL',I4)
  930 FORMAT(//5X,21I6)
  940 FORMAT(1X,I2,2X,21F6.2)
      END
